Module name: rst. Module specification: The `rst` module serves as a crucial block designed for the synchronization and debouncing of an asynchronous reset signal, named `rst_n`, ensuring its alignment with the system's clock domain. The module operates with two primary input ports: `clk`, the clock signal input facilitating the synchronization of the reset operation thereby averting potential metastability issues, and `rst_n`, an active-low asynchronous reset signal intended for initializing the system or setting it to a known state under specific conditions like power-up. The sole output port, `rst`, emerges as the synchronized reset signal, an outcome of the module's internal operations, aimed at providing a glitch-free and stable reset signal across the design's clock domain. Internally, the module leverages a D-type flip-flop, `rst1`, to capture the state of `rst_n` on the clock's rising edge. This flip-flop constitutes the first stage in the synchronization process, playing a pivotal role in debouncing the async reset signal and curbing the risk of metastability by ensuring that the reset signal transition occurs in strict concordance with the clock cycles. The Verilog code for the `rst` module explicitly delineates its functionality: It commences with the `always` block triggered on the positive edge of `clk` or the negative edge of `rst_n`. Within this block, a conditional check (`if(!rst_n)`) discerns the reset condition to asynchronously set both `rst1` and `rst` to low (`0`), thereby ensuring the system's proper initialization. Conversely, absent the reset condition, the code sequentially captures and propagates the `rst_n` signal through `rst1` to `rst`, thereby completing the two-stage synchronization mechanism that guarantees a clean and stabilized reset signal (`rst`) for subsequent use within the design's clock domain.