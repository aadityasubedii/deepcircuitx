Module name: command.
Module specification: The `command` module acts as a controller for an SDRAM memory interface, dictating the flow and type of operations executed on the memory such as reads, writes, and refreshes, based on a set of input commands. The module works under synchronization with a given clock `CLK`, and can be reset using the asynchronous `RESET_N` signal. It takes in operational inputs like `SADDR` for addressing, `NOP`, `READA`, `WRITEA`, `REFRESH`, `PRECHARGE`, `LOAD_MODE`, `REF_REQ`, `INIT_REQ`, `PM_STOP`, and `PM_DONE` to handle various commands, and outputs signals such as `REF_ACK`, `CM_ACK`, `OE` to acknowledge operations and enable data transfer, as well as `SA`, `BA`, `CS_N`, `CKE`, `RAS_N`, `CAS_N`, and `WE_N` which interact directly with the SDRAM’s operation commands. The module also features a set of internal registers and wires such as `do_reada`, `do_writea`, `do_refresh`, `do_precharge`, `do_load_mode`, `do_initial`, `command_done`, `command_delay` and many others to manage the internal state, delays, data flow control, and operation sequencing required for correct SDRAM interfacing. The code is segmented into multiple `always` blocks that are triggered on the `CLK` rising edge or `RESET_N` negative edge, each managing a specific aspect of the module's operation. These blocks take care of: initialization and command recognition, command acknowledgment and status update, output enable timing control based on SDRAM burst lengths, read/write activation, and setting up the correct SDRAM command signals for a variety of the SDRAM’s operational modes. The `command` module thus ensures that the SDRAM operates correctly in response to incoming control signals while adhering to the necessary command protocols and timing constraints described by the SDRAM parameters included from the "Sdram_Params.h" file.