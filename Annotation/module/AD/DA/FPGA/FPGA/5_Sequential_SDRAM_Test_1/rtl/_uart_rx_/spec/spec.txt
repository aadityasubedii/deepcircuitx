Module name: `uart_rx`.
Module specification: The `uart_rx` module is a UART receiver designed to synchronize with a system clock and reset signal, receiving serial data using specified parameters such as UART_BPS (bits per second) and CLK_FREQ (system clock frequency). It provides an 8-bit parallel data output and a flag to indicate data availability. Among the input ports: `sys_clk` is the system clock, `sys_rst_n` is an active-low synchronous reset, and `rx` is the incoming serial data stream. The outputs are: `po_data`, an 8-bit parallel data output of the received byte, and `po_flag`, a signal indicating that new data is available. Internal signals like `rx_reg1`, `rx_reg2`, and `rx_reg3` are flip-flops for edge detection and synchronization; `start_nedge` detects the UART start bit; `work_en` enables the data reception process; `baud_cnt` is a baud rate counter for timing bit sampling; `bit_flag` indicates the sampling point for bits; `bit_cnt` counts the bits received; `rx_data` assembles the 8-bit data byte; and `rx_flag` indicates the completion of data byte reception.

The code blocks are structured as follows: initialization and reset of internal registers and flags; edge detection for the start bit; enable logic for activating the reception process; baud rate counter increments and resets based on the system clock and reception status; sampling point flag generation; incoming bit count tracking; data byte assembly from the sampled bits, and flag signalling when data byte reception is complete; output byte updating with the received data; and data availability flagging for external components. Each always block manages a specific aspect of the reception process to decode the asynchronous serial data input and provide it in parallel form.