Module name: movingAverage.
Module specification: The `movingAverage` module is responsible for calculating the moving average of a stream of 12-bit data inputs (`iDataIn`). This calculation occurs over a specified filter width (`iFilterWidth`), which defines the number of samples included in the average calculation. The module processes data only when a new sample is indicated by the `iSampleReady` signal. The primary inputs to this module include a clock signal (`clk`), which synchronizes the operations, a reset signal (`rst`) for reinitializing internal states, the data input signal (`iDataIn`), a new sample indication signal (`iSampleReady`), and the filter width signal (`iFilterWidth`). The outputs are the 12-bit moving average value (`oDataOut`) and a signal (`oDataReady`) indicating the data validity. Internally, the module utilizes signals like `wrEn` for enabling data writes to the filter storage, `wrIndex` and `cellIndex` for handling memory indexing, `cellData` for holding retrieved data, `dataOut` for the computed average, and control flags like `dataReady` and `filterEnable`. The module operates by enabling the filter when `iFilterWidth` is greater than 1 and not in reset. The sequential logic in the module is managed by a finite state machine, which transitions through states for sampling, averaging, and output handling, based on the clock and sample availability. The `filterCells` block is instantiated for memory operations, managing reading and writing of sample data. This structure ensures the moving average computation adjusts dynamically with input data variations, providing a real-time processing capability in data-sensitive applications like signal processing and real-time analytics.