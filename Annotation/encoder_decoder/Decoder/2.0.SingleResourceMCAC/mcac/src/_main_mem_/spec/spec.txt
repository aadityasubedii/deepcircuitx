Module name: main_mem. 
Module specification: The `main_mem` module is designed to interface with a memory system providing read and write functionality with support for configurable data widths of 32 or 128 bits, depending on the `WB_DWIDTH` parameter. It operates on input ports such as `clk` (clock signal), `reset` (reset signal), `scan_enable` (scan enable for test mode), `test_mode` (indicates test mode), `i_mem_ctrl` (memory control signal), `i_wb_adr` (address input from the Wishbone bus), `i_wb_sel` (selection signal for byte operations), `i_wb_we` (write enable signal), `i_wb_dat` (data from Wishbone bus), `i_wb_cyc` (cycle signal from Wishbone), and `i_wb_stb` (strobe signal). The output ports include `o_wb_dat` (output data to Wishbone bus), `o_wb_ack` (acknowledge signal for operation completion), and `o_wb_err` (error indication, statically set to 0). Internal signals such as `ram` (memory storage), `start_write` and `start_read` manage operation initiation, `wr_en`, `wr_mask`, and `wr_data` manage data writes, while `addr_d1`, `busy`, `rd_data` and `masked_wdata` manage addressing and data integrity during memory operations. The code contains a conditional generate block that defines the operations depending on the width of the data bus configured. For the 128-bit configuration, the module uses a single stage of data interaction, while for the 32-bit configuration, it selectively manipulates the data per byte influenced by the address alignment. Each configuration block (`wb128` and `wb32`) includes signal preparations for reading, writing, data preparation, and pipeline delays (`start_read_d1`, `start_read_d2`) ensuring proper timing and sequencing of memory operations. This organized and detailed module schema affords adaptability to various system demands regarding data width and detailed memory handling features, making `main_mem` a flexible component in system design.