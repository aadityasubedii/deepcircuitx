Module name: interrupt_controller. 
Module specification: The `interrupt_controller` module is designed primarily for the management and arbitration of regular and fast interrupts (IRQs and FIRQs) across various system components such as UARTs, timers, and diagnostic modules. It features input ports such as `clk` for clock signals, `reset` for initialization, `scan_in[0:4]` for test scanning, and `test_mode` to enable testing functionalities. `i_wb_*` ports represent the Wishbone interface for handling data transactions. The module outputs `scan_out[0:4]` for test results, `o_wb_dat` for data transmission, and `o_wb_ack` and `o_wb_err` as acknowledgments and error signals respectively. Additionally, interrupt outputs include `o_irq` and `o_firq` for handling regular and fast interrupts. Internally, the module utilizes signals such as `raw_interrupts` to collate inputs into a 32-bit vector, and `irq0_interrupts`, `firq0_interrupts` etc., to filter these interrupts through enable registers and determine which interrupts are active. `wb_rdata32` and `wb_wdata32` manage data being read from and written to registers. Throughout the module, the Verilog code incorporates defined signal assignments for data handling, conditional checking based on `reset` and `clk` for state maintenance, and read and write operations based on Wishbone protocol interactions. There are also debug sections under the `AMBER_IC_DEBUG` flag that facilitate detailed logging during simulation to monitor internal register operations and data transfers. This module effectively orchestrates the handling of multiple interrupt sources, facilitating controlled responses to system events.