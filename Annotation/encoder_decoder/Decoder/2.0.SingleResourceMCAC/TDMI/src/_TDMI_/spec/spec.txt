Module name: TDMI. Module specification: The TDMI (Time Division Multiplexed Input) module is designed for handling serial data input with synchronization requirements and testability support. It reads serial data `data_in` on every rising edge of a clock, which is chosen based on the `test_mode` input to decide between `ser_clk` (operation clock) and `clk` (test clock). The module detects the start of a data frame via the `frame_sync` signal and increments channels and data bits accordingly, interfacing with a Wishbone bus for data transfer and control. Input ports include `reset`, `ser_clk`, `data_in`, `frame_sync`, `scan_in0` to `scan_in4` (for scan chain), `scan_enable`, `test_mode`, `clk`, and Wishbone bus signals such as `i_wb_adr` and `i_wb_dat`. Output ports are `new_data_int` (a new data available interrupt), `scan_out0` to `scan_out4` (scan chain outputs), and Wishbone bus responses including `o_wb_dat` (output data), `o_wb_ack` (data transaction acknowledgment), and `o_wb_err` (error indication fixed at 0). Internally, the module uses signals such as `sys_clk` and `serial_clk` for timing, and various registers like `ch_count` and `bit_count` for tracking data state and `data_out_buf` for assembling incoming serial data. The code includes multiple blocks: clock selection and buffer instantiation defining operational or test mode clock handling, data processing and state management in response to clock edges for reading and buffering data, and another block handling Wishbone bus interactions, enabling data readout, module control via bus commands, and interrupt management.