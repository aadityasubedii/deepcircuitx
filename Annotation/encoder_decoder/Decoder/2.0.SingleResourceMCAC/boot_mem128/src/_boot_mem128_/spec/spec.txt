Module name: boot_mem128. 
Module specification: The `boot_mem128` module is designed to manage memory interface operations for a system utilizing the Wishbone bus protocol with a data width of 128 bits and byte select width of 16. It specifically handles read and write operations and integrates debug support for different FPGA families including specific configurations like `XILINX_SPARTAN6_FPGA`. Input ports include `clk` (clock input), `reset` (reset signal), multiple `scan_in` inputs and `scan_enable` for testing, `test_mode` to modify operational behavior, and typical Wishbone inputs like `i_wb_adr` (address), `i_wb_sel` (byte select), `i_wb_we` (write enable), `i_wb_dat` (data input), `i_wb_cyc` (cycle signal indicating the bus cycle's start and duration), and `i_wb_stb` (strobe signal indicating data/address validation). Output ports include `scan_out` outputs for testing results, `o_wb_dat` (data out to Wishbone bus), `o_wb_ack` (acknowledge signal for transaction completion), and `o_wb_err` (error output, hardcoded to 0 indicating no error handling). Internal signals such as `start_write`, `start_read`, `read_data`, `write_data`, `byte_enable`, `address`, `jitter_r`, and `start_read_r` manage the internal state, control transaction initiations, data flow, and address decoding. The code includes conditional compilation blocks for debugging (`AMBER_WISHBONE_DEBUG`), handling Xilinx Spartan-6 specific functionalities, and configuration for using generic SRAM with byte enable or the conditional setup for testing (`verilog` and `non-verilog` environments). This overall design aids in enabling efficient memory operations matched with reliable debugging and verification potential, suitable for systems demanding robust memory interaction under varying operational conditions.