Module name: eth_register.
Module specification: The 'eth_register' module is designed to provide a register functionality with an 8-bit width, accommodating both asynchronous and synchronous reset options alongside write capabilities controlled by a clock input. The module has several input ports including 'DataIn', an 8-bit vector that feeds data to be stored in the register; 'Write', a control signal that, when high, enables the data from 'DataIn' to be latched into the output at the rising edge of the 'Clk' signal; 'Clk', the clock input that governs the timing of data storage; 'Reset', an asynchronous reset signal that clears the register to a predefined 'RESET_VALUE' (also a parameterizable constant) regardless of clock state; and 'SyncReset', which similarly clears the register but synchronously with the clock's rising edge. The sole output port, 'DataOut', also declared internally as a register, reflects the stored data which is either the reset value or the input data depending on the state of the control signals. In the implementation, the module employs an 'always @ (posedge Clk or posedge Reset)' block which decisively checks for the high state of 'Reset', 'SyncReset', or 'Write', respectively setting 'DataOut' to the 'RESET_VALUE' or updating it with 'DataIn', using non-blocking assignments ('<=') to ensure proper event-driven simulation behavior. This arrangement captures the core functionality of data storage and condition-driven updates effectively within the design.