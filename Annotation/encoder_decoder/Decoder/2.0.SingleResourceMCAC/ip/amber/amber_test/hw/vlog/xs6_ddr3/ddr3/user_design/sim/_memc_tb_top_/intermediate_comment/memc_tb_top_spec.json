{
    "spec": "Module name: memc_tb_top. Module specification: This module serves as a testbench top-level for a memory controller, supporting up to 6 ports with configurable modes (read or write). It instantiates and connects multiple traffic generators (TGs) for different ports, manages port configurations, and handles command and data signals for read and write operations. The module features input ports for clock, reset, calibration status, VIO control signals, and various status signals from the memory controller for each port. Output ports include command and data signals to control the memory controller, as well as comparison data, error flags, and error status for each port. Internal signals are used to control and monitor the traffic generators for each port, including run traffic, address ranges, seeds, and mode settings. The module is structured with generate blocks for each port, instantiating init_mem_pattern_ctr and mcb_traffic_gen sub-modules to handle",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: memc_tb_top\n\nExplanation: This module appears to be a testbench top-level module for a memory controller. It instantiates and connects multiple traffic generators (TGs) for different ports, manages port configurations, and handles command and data signals for read and write operations. The module supports up to 6 ports with configurable modes (read or write) and allows for various testing scenarios by generating and comparing data patterns. It also includes error checking and status reporting functionality for each port."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nclk0, rst0, calib_done, vio_modify_enable, vio_data_mode_value, vio_addr_mode_value, p0_mcb_cmd_full, p0_mcb_wr_full, p0_mcb_wr_fifo_counts, p0_mcb_rd_data, p0_mcb_rd_empty, p0_mcb_rd_fifo_counts, p1_mcb_cmd_full, p1_mcb_wr_full, p1_mcb_wr_fifo_counts, p1_mcb_rd_data, p1_mcb_rd_empty, p1_mcb_rd_fifo_counts, p2_mcb_cmd_full, p2_mcb_wr_full, p2_mcb_wr_fifo_counts, p2_mcb_rd_data, p2_mcb_rd_empty, p2_mcb_rd_fifo_counts, p3_mcb_cmd_full, p3_mcb_wr_full, p3_mcb_wr_fifo_counts, p3_mcb_rd_data, p3_mcb_rd_empty, p3_mcb_rd_fifo_counts, p4_mcb_cmd_full, p4_mcb_wr_full, p4_mcb_wr_fifo_counts, p4_mcb_rd_data, p4_mcb_rd_empty, p4_mcb_rd_fifo_counts, p5_mcb_cmd_full, p5_mcb_wr_full, p5_mcb_wr_fifo_counts, p5_mcb_rd_data, p5_mcb_rd_empty, p5_mcb_rd_fifo_counts.\n\nExplanation: These input ports include clock and reset signals, calibration status, VIO control signals, and various status signals from the memory controller for each port (0-5), such as command full, write full, read data, read empty, and FIFO counts.\n\nOutput ports:\np0_mcb_cmd_en, p0_mcb_cmd_instr, p0_mcb_cmd_bl, p0_mcb_cmd_addr, p0_mcb_wr_en, p0_mcb_wr_mask, p0_mcb_wr_data, p0_mcb_rd_en, p1_mcb_cmd_en, p1_mcb_cmd_instr, p1_mcb_cmd_bl, p1_mcb_cmd_addr, p1_mcb_wr_en, p1_mcb_wr_mask, p1_mcb_wr_data, p1_mcb_rd_en, p2_mcb_cmd_en, p2_mcb_cmd_instr, p2_mcb_cmd_bl, p2_mcb_cmd_addr, p2_mcb_wr_en, p2_mcb_wr_mask, p2_mcb_wr_data, p2_mcb_rd_en, p3_mcb_cmd_en, p3_mcb_cmd_instr, p3_mcb_cmd_bl, p3_mcb_cmd_addr, p3_mcb_wr_en, p3_mcb_wr_mask, p3_mcb_wr_data, p3_mcb_rd_en, p4_mcb_cmd_en, p4_mcb_cmd_instr, p4_mcb_cmd_bl, p4_mcb_cmd_addr, p4_mcb_wr_en, p4_mcb_wr_mask, p4_mcb_wr_data, p4_mcb_rd_en, p5_mcb_cmd_en, p5_mcb_cmd_instr, p5_mcb_cmd_bl, p5_mcb_cmd_addr, p5_mcb_wr_en, p5_mcb_wr_mask, p5_mcb_wr_data, p5_mcb_rd_en, cmp_data, cmp_data_valid, cmp_error, error, p0_error_status, p1_error_status, p2_error_status, p3_error_status, p4_error_status, p5_error_status.\n\nExplanation: These output ports include command and data signals for each port (0-5) to control the memory controller, such as command enable, instruction, burst length, address, write enable, write mask, write data, and read enable. Additionally, there are outputs for comparison data, error flags, and error status for each port."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\np0_tg_run_traffic, p0_tg_start_addr, p0_tg_end_addr, p0_tg_cmd_seed, p0_tg_data_seed, p0_tg_load_seed, p0_tg_addr_mode, p0_tg_instr_mode, p0_tg_bl_mode, p0_tg_data_mode, p0_tg_mode_load, p0_tg_fixed_bl, p0_tg_fixed_instr, p0_tg_fixed_addr, p0_error, p0_cmp_error, p0_cmp_data, p0_cmp_data_valid, p1_tg_run_traffic, p1_tg_start_addr, p1_tg_end_addr, p1_tg_cmd_seed, p1_tg_data_seed, p1_tg_load_seed, p1_tg_addr_mode, p1_tg_instr_mode, p1_tg_bl_mode, p1_tg_data_mode, p1_tg_mode_load, p1_tg_fixed_bl, p1_tg_fixed_instr, p1_tg_fixed_addr, p1_error, p1_cmp_error, p1_cmp_data, p1_cmp_data_valid, p2_tg_run_traffic, p2_tg_start_addr, p2_tg_end_addr, p2_tg_cmd_seed, p2_tg_data_seed, p2_tg_load_seed, p2_tg_addr_mode, p2_tg_instr_mode, p2_tg_bl_mode, p2_tg_data_mode, p2_tg_mode_load, p2_tg_fixed_bl, p2_tg_fixed_instr, p2_tg_fixed_addr, p2_error, p2_cmp_error, p2_cmp_data, p2_cmp_data_valid, p2_mcb_cmd_en_sig, p2_mcb_cmd_instr_sig, p2_mcb_cmd_bl_sig, p2_mcb_cmd_addr_sig, p2_mcb_wr_en_sig, p3_tg_run_traffic, p3_tg_start_addr, p3_tg_end_addr, p3_tg_cmd_seed, p3_tg_data_seed, p3_tg_load_seed, p3_tg_addr_mode, p3_tg_instr_mode, p3_tg_bl_mode, p3_tg_data_mode, p3_tg_mode_load, p3_tg_fixed_bl, p3_tg_fixed_instr, p3_tg_fixed_addr, p3_error, p3_cmp_error, p3_cmp_data, p3_cmp_data_valid, p3_mcb_cmd_en_sig, p3_mcb_cmd_instr_sig, p3_mcb_cmd_bl_sig, p3_mcb_cmd_addr_sig, p3_mcb_wr_en_sig, p4_tg_run_traffic, p4_tg_start_addr, p4_tg_end_addr, p4_tg_cmd_seed, p4_tg_data_seed, p4_tg_load_seed, p4_tg_addr_mode, p4_tg_instr_mode, p4_tg_bl_mode, p4_tg_data_mode, p4_tg_mode_load, p4_tg_fixed_bl, p4_tg_fixed_instr, p4_tg_fixed_addr, p4_error, p4_cmp_error, p4_cmp_data, p4_cmp_data_valid, p4_mcb_cmd_en_sig, p4_mcb_cmd_instr_sig, p4_mcb_cmd_bl_sig, p4_mcb_cmd_addr_sig, p4_mcb_wr_en_sig, p5_tg_run_traffic, p5_tg_start_addr, p5_tg_end_addr, p5_tg_cmd_seed, p5_tg_data_seed, p5_tg_load_seed, p5_tg_addr_mode, p5_tg_instr_mode, p5_tg_bl_mode, p5_tg_data_mode, p5_tg_mode_load, p5_tg_fixed_bl, p5_tg_fixed_instr, p5_tg_fixed_addr, p5_error, p5_cmp_error, p5_cmp_data, p5_cmp_data_valid, p5_mcb_cmd_en_sig, p5_mcb_cmd_instr_sig, p5_mcb_cmd_bl_sig, p5_mcb_cmd_addr_sig, p5_mcb_wr_en_sig.\n\nExplanation: These internal signals are used for each port (0-5) to control and monitor the traffic generators. They include signals for running traffic, setting address ranges, configuring seeds for command and data generation, controlling address and data modes, setting fixed burst lengths and instructions, and handling error detection and comparison. The signals with \"_sig\" suffixes are used for command field mapping between ports. Each set of signals is specific to its corresponding port and is used to manage the traffic generation and error checking for that port."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule memc_tb_top #(\n\n   parameter C_SIMULATION                  = \"FALSE\",   \n   parameter C_NUM_DQ_PINS                 = 4,\n   parameter C_MEM_BURST_LEN               = 8,\t       \n   parameter C_MEM_NUM_COL_BITS            = 11,\n   parameter C_SMALL_DEVICE                = \"FALSE\",         \n\n   parameter C_PORT_ENABLE                 = 6'b111111,\t       \n   parameter C_P0_MASK_SIZE                = 4,\n   parameter C_P0_DATA_PORT_SIZE           = 32,\n   parameter C_P1_MASK_SIZE                = 4,\n   parameter C_P1_DATA_PORT_SIZE           = 32,\n   parameter C_P0_PORT_MODE                = \"BI_MODE\",           \n   parameter C_P1_PORT_MODE                = \"BI_MODE\",\n   parameter C_P2_PORT_MODE                = \"RD_MODE\",           \n   parameter C_P3_PORT_MODE                = \"RD_MODE\",           \n   parameter C_P4_PORT_MODE                = \"RD_MODE\",           \n   parameter C_P5_PORT_MODE                = \"RD_MODE\",\n\n   parameter C_p0_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p0_DATA_MODE                = 4'b0010,\n   parameter C_p0_END_ADDRESS              = 32'h000002ff,\n   parameter C_p0_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p0_PRBS_SADDR_MASK_POS      = 32'h00000100,\n   parameter C_p1_BEGIN_ADDRESS            = 32'h00000300,\n   parameter C_p1_DATA_MODE                = 4'b0010,\n   parameter C_p1_END_ADDRESS              = 32'h000004ff,\n   parameter C_p1_PRBS_EADDR_MASK_POS      = 32'hfffff800,\n   parameter C_p1_PRBS_SADDR_MASK_POS      = 32'h00000300,\n   parameter C_p2_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p2_DATA_MODE                = 4'b0010,\n   parameter C_p2_END_ADDRESS              = 32'h000002ff,\n   parameter C_p2_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p2_PRBS_SADDR_MASK_POS      = 32'h00000100,\n   parameter C_p3_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p3_DATA_MODE                = 4'b0010,\n   parameter C_p3_END_ADDRESS              = 32'h000002ff,\n   parameter C_p3_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p3_PRBS_SADDR_MASK_POS      = 32'h00000100,\n   parameter C_p4_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p4_DATA_MODE                = 4'b0010,\n   parameter C_p4_END_ADDRESS              = 32'h000002ff,\n   parameter C_p4_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p4_PRBS_SADDR_MASK_POS      = 32'h00000100,\n   parameter C_p5_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p5_DATA_MODE                = 4'b0010,\n   parameter C_p5_END_ADDRESS              = 32'h000002ff,\n   parameter C_p5_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p5_PRBS_SADDR_MASK_POS      = 32'h00000100\n  )\n  (\n   input                    clk0, \n   input                    rst0, \n   input                    calib_done, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   output\t\tp0_mcb_cmd_en,\n   output [2:0]\t        p0_mcb_cmd_instr,\n   output [5:0]\t        p0_mcb_cmd_bl,\n   output [29:0]\tp0_mcb_cmd_addr,\n   input\t\tp0_mcb_cmd_full,\n\n   \n   \n   output\t\tp0_mcb_wr_en,\n   output [C_P0_MASK_SIZE - 1:0]\tp0_mcb_wr_mask,\n   output [C_P0_DATA_PORT_SIZE - 1:0]\tp0_mcb_wr_data,\n   input\t\tp0_mcb_wr_full,\n   input [6:0]\t        p0_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp0_mcb_rd_en,\n   input [C_P0_DATA_PORT_SIZE - 1:0]\tp0_mcb_rd_data,\n   input\t\tp0_mcb_rd_empty,\n   input [6:0]\t        p0_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp1_mcb_cmd_en,\n   output [2:0]\t        p1_mcb_cmd_instr,\n   output [5:0]\t        p1_mcb_cmd_bl,\n   output [29:0]\tp1_mcb_cmd_addr,\n   input\t\tp1_mcb_cmd_full,\n\n   \n   \n   output\t\tp1_mcb_wr_en,\n   output [C_P1_MASK_SIZE - 1:0]\tp1_mcb_wr_mask,\n   output [C_P1_DATA_PORT_SIZE - 1:0]\tp1_mcb_wr_data,\n   input\t\tp1_mcb_wr_full,\n   input [6:0]\t        p1_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp1_mcb_rd_en,\n   input [C_P1_DATA_PORT_SIZE - 1:0]\tp1_mcb_rd_data,\n   input\t\tp1_mcb_rd_empty,\n   input [6:0]\t        p1_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp2_mcb_cmd_en,\n   output [2:0]\t        p2_mcb_cmd_instr,\n   output [5:0]\t        p2_mcb_cmd_bl,\n   output [29:0]\tp2_mcb_cmd_addr,\n   input\t\tp2_mcb_cmd_full,\n\n   \n   \n   output\t\tp2_mcb_wr_en,\n   output [3:0]\t        p2_mcb_wr_mask,\n   output [31:0]\tp2_mcb_wr_data,\n   input\t\tp2_mcb_wr_full,\n   input [6:0]\t        p2_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp2_mcb_rd_en,\n   input [31:0]\t        p2_mcb_rd_data,\n   input\t\tp2_mcb_rd_empty,\n   input [6:0]\t        p2_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp3_mcb_cmd_en,\n   output [2:0]\t        p3_mcb_cmd_instr,\n   output [5:0]\t        p3_mcb_cmd_bl,\n   output [29:0]\tp3_mcb_cmd_addr,\n   input\t\tp3_mcb_cmd_full,\n\n   \n   \n   output\t\tp3_mcb_wr_en,\n   output [3:0]\t        p3_mcb_wr_mask,\n   output [31:0]\tp3_mcb_wr_data,\n   input\t\tp3_mcb_wr_full,\n   input [6:0]\t        p3_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp3_mcb_rd_en,\n   input [31:0]\t        p3_mcb_rd_data,\n   input\t\tp3_mcb_rd_empty,\n   input [6:0]\t        p3_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp4_mcb_cmd_en,\n   output [2:0]\t        p4_mcb_cmd_instr,\n   output [5:0]\t        p4_mcb_cmd_bl,\n   output [29:0]\tp4_mcb_cmd_addr,\n   input\t\tp4_mcb_cmd_full,\n\n   \n   \n   output\t\tp4_mcb_wr_en,\n   output [3:0]\t        p4_mcb_wr_mask,\n   output [31:0]\tp4_mcb_wr_data,\n   input\t\tp4_mcb_wr_full,\n   input [6:0]\t        p4_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp4_mcb_rd_en,\n   input [31:0]\t        p4_mcb_rd_data,\n   input\t\tp4_mcb_rd_empty,\n   input [6:0]\t        p4_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp5_mcb_cmd_en,\n   output [2:0]\t        p5_mcb_cmd_instr,\n   output [5:0]\t        p5_mcb_cmd_bl,\n   output [29:0]\tp5_mcb_cmd_addr,\n   input\t\tp5_mcb_cmd_full,\n\n   \n   \n   output\t\tp5_mcb_wr_en,\n   output [3:0]\t        p5_mcb_wr_mask,\n   output [31:0]\tp5_mcb_wr_data,\n   input\t\tp5_mcb_wr_full,\n   input [6:0]\t        p5_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp5_mcb_rd_en,\n   input [31:0]\t        p5_mcb_rd_data,\n   input\t\tp5_mcb_rd_empty,\n   input [6:0]\t        p5_mcb_rd_fifo_counts,\n\n   \n   input                vio_modify_enable,\n   input [2:0]          vio_data_mode_value,\n   input [2:0]          vio_addr_mode_value,\n\n   \n   output [31:0]        cmp_data,\n   output               cmp_data_valid,\n   output               cmp_error,\n   output               error,       \n   output [64 + (2*C_P0_DATA_PORT_SIZE - 1):0]     p0_error_status,\n   output [64 + (2*C_P1_DATA_PORT_SIZE - 1):0]     p1_error_status,\n   output [127 : 0]     p2_error_status,\n   output [127 : 0]     p3_error_status,\n   output [127 : 0]     p4_error_status,\n   output [127 : 0]     p5_error_status\n  );\n\n  \n   localparam P2_DWIDTH            = 32;           \n   localparam P3_DWIDTH            = 32;           \n   localparam P4_DWIDTH            = 32;           \n   localparam P5_DWIDTH            = 32;             \n   localparam FAMILY               = \"SPARTAN6\";  \n   localparam CMP_DATA_PIPE_STAGES = 0;            \n   localparam DQ_ERROR_WIDTH       = (C_NUM_DQ_PINS==4)? 1 : (C_NUM_DQ_PINS/8);\n   localparam TG_DATA_PATTERN      = (C_SMALL_DEVICE == \"FALSE\") ? \"DGEN_ALL\" : \"DGEN_ADDR\";\n\n   localparam P2_PRBS_SADDR_MASK_POS = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_SADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_SADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p2_PRBS_SADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p2_PRBS_SADDR_MASK_POS;\n   localparam P2_PRBS_EADDR_MASK_POS = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_EADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_EADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p2_PRBS_EADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p2_PRBS_EADDR_MASK_POS;\n   localparam P2_BEGIN_ADDRESS       = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_BEGIN_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_BEGIN_ADDRESS: \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_BEGIN_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p2_BEGIN_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p2_BEGIN_ADDRESS;\n   localparam P2_END_ADDRESS         = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_END_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_END_ADDRESS: \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_END_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p2_END_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p2_END_ADDRESS;\n   localparam P2_DATA_MODE           = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_DATA_MODE: \n                                                                     C_PORT_ENABLE[1] ? C_p1_DATA_MODE: \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_DATA_MODE : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_DATA_MODE : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_DATA_MODE : \n\t\t\t  \t\t\t\t\t     C_p2_DATA_MODE \n\t\t\t\t\t\t\t\t   : C_p2_DATA_MODE;\n\n\n   localparam P3_PRBS_SADDR_MASK_POS = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_SADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_SADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p3_PRBS_SADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p3_PRBS_SADDR_MASK_POS;\n   localparam P3_PRBS_EADDR_MASK_POS = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_EADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_EADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p3_PRBS_EADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p3_PRBS_EADDR_MASK_POS;\n   localparam P3_BEGIN_ADDRESS       = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_BEGIN_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_BEGIN_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_BEGIN_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p3_BEGIN_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p3_BEGIN_ADDRESS;\n   localparam P3_END_ADDRESS         = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_END_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_END_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_END_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p3_END_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p3_END_ADDRESS;\n   localparam P3_DATA_MODE           = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_DATA_MODE: \n                                                                     C_PORT_ENABLE[1] ? C_p1_DATA_MODE: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_DATA_MODE : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_DATA_MODE : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_DATA_MODE : \n\t\t\t  \t\t\t\t\t     C_p3_DATA_MODE \n\t\t\t\t\t\t\t\t   : C_p3_DATA_MODE;\n\n\n   localparam P4_PRBS_SADDR_MASK_POS = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_SADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_SADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p4_PRBS_SADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p4_PRBS_SADDR_MASK_POS;\n   localparam P4_PRBS_EADDR_MASK_POS = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_EADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_EADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p4_PRBS_EADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p4_PRBS_EADDR_MASK_POS;\n   localparam P4_BEGIN_ADDRESS       = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_BEGIN_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_BEGIN_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_BEGIN_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p4_BEGIN_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p4_BEGIN_ADDRESS;\n   localparam P4_END_ADDRESS         = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_END_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_END_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_END_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p4_END_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p4_END_ADDRESS;\n   localparam P4_DATA_MODE           = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_DATA_MODE: \n                                                                     C_PORT_ENABLE[1] ? C_p1_DATA_MODE: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_DATA_MODE : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_DATA_MODE : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_DATA_MODE : \n\t\t\t  \t\t\t\t\t     C_p4_DATA_MODE \n\t\t\t\t\t\t\t\t   : C_p4_DATA_MODE;\n\n\n   localparam P5_PRBS_SADDR_MASK_POS = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_SADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_SADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p5_PRBS_SADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p5_PRBS_SADDR_MASK_POS;\n   localparam P5_PRBS_EADDR_MASK_POS = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_EADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_EADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p5_PRBS_EADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p5_PRBS_EADDR_MASK_POS;\n   localparam P5_BEGIN_ADDRESS       = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_BEGIN_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_BEGIN_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_BEGIN_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p5_BEGIN_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p5_BEGIN_ADDRESS;\n   localparam P5_END_ADDRESS         = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_END_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_END_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_END_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p5_END_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p5_END_ADDRESS;\n   localparam P5_DATA_MODE           = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_DATA_MODE: \n                                                                     C_PORT_ENABLE[1] ? C_p1_DATA_MODE: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_DATA_MODE : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_DATA_MODE : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_DATA_MODE : \n\t\t\t  \t\t\t\t\t     C_p5_DATA_MODE \n\t\t\t\t\t\t\t\t   : C_p5_DATA_MODE;\n\n\n\n   wire            p0_tg_run_traffic; \n   wire [31:0]     p0_tg_start_addr;\n   wire [31:0]     p0_tg_end_addr;\n   wire [31:0]     p0_tg_cmd_seed; \n   wire [31:0]     p0_tg_data_seed;\n   wire            p0_tg_load_seed;\n   wire [2:0]      p0_tg_addr_mode;\n   wire [3:0]      p0_tg_instr_mode;\n   wire [1:0]      p0_tg_bl_mode;\n   wire [3:0]      p0_tg_data_mode;\n   wire            p0_tg_mode_load;\n   wire [5:0]      p0_tg_fixed_bl;\n   wire [2:0]      p0_tg_fixed_instr;\n   wire [31:0]     p0_tg_fixed_addr;\n   wire            p0_error;\n   wire            p0_cmp_error;\n   wire [C_P0_DATA_PORT_SIZE-1 :0] p0_cmp_data;\n   wire           p0_cmp_data_valid;\n          \n\n   wire            p1_tg_run_traffic; \n   wire [31:0]     p1_tg_start_addr;\n   wire [31:0]     p1_tg_end_addr;\n   wire [31:0]     p1_tg_cmd_seed; \n   wire [31:0]     p1_tg_data_seed;\n   wire            p1_tg_load_seed;\n   wire [2:0]      p1_tg_addr_mode;\n   wire [3:0]      p1_tg_instr_mode;\n   wire [1:0]      p1_tg_bl_mode;\n   wire [3:0]      p1_tg_data_mode;\n   wire            p1_tg_mode_load;\n   wire [5:0]      p1_tg_fixed_bl;\n   wire [2:0]      p1_tg_fixed_instr;\n   wire [31:0]     p1_tg_fixed_addr;\n   wire            p1_error;\n   wire            p1_cmp_error;\n   wire [C_P1_DATA_PORT_SIZE-1 :0] p1_cmp_data;\n   wire           p1_cmp_data_valid;\n          \n\n   wire            p2_tg_run_traffic; \n   wire [31:0]     p2_tg_start_addr;\n   wire [31:0]     p2_tg_end_addr;\n   wire [31:0]     p2_tg_cmd_seed; \n   wire [31:0]     p2_tg_data_seed;\n   wire            p2_tg_load_seed;\n   wire [2:0]      p2_tg_addr_mode;\n   wire [3:0]      p2_tg_instr_mode;\n   wire [1:0]      p2_tg_bl_mode;\n   wire [3:0]      p2_tg_data_mode;\n   wire            p2_tg_mode_load;\n   wire [5:0]      p2_tg_fixed_bl;\n   wire [2:0]      p2_tg_fixed_instr;\n   wire [31:0]     p2_tg_fixed_addr;\n   wire            p2_error;\n   wire            p2_cmp_error;\n   wire [P2_DWIDTH-1 :0] p2_cmp_data;\n   wire           p2_cmp_data_valid;\n          \n\n   wire            p3_tg_run_traffic; \n   wire [31:0]     p3_tg_start_addr;\n   wire [31:0]     p3_tg_end_addr;\n   wire [31:0]     p3_tg_cmd_seed; \n   wire [31:0]     p3_tg_data_seed;\n   wire            p3_tg_load_seed;\n   wire [2:0]      p3_tg_addr_mode;\n   wire [3:0]      p3_tg_instr_mode;\n   wire [1:0]      p3_tg_bl_mode;\n   wire [3:0]      p3_tg_data_mode;\n   wire            p3_tg_mode_load;\n   wire [5:0]      p3_tg_fixed_bl;\n   wire [2:0]      p3_tg_fixed_instr;\n   wire [31:0]     p3_tg_fixed_addr;\n   wire            p3_error;\n   wire            p3_cmp_error;\n   wire [P3_DWIDTH-1 :0] p3_cmp_data;\n   wire           p3_cmp_data_valid;\n          \n\n   wire            p4_tg_run_traffic; \n   wire [31:0]     p4_tg_start_addr;\n   wire [31:0]     p4_tg_end_addr;\n   wire [31:0]     p4_tg_cmd_seed; \n   wire [31:0]     p4_tg_data_seed;\n   wire            p4_tg_load_seed;\n   wire [2:0]      p4_tg_addr_mode;\n   wire [3:0]      p4_tg_instr_mode;\n   wire [1:0]      p4_tg_bl_mode;\n   wire [3:0]      p4_tg_data_mode;\n   wire            p4_tg_mode_load;\n   wire [5:0]      p4_tg_fixed_bl;\n   wire [2:0]      p4_tg_fixed_instr;\n   wire [31:0]     p4_tg_fixed_addr;\n   wire            p4_error;\n   wire            p4_cmp_error;\n   wire [P4_DWIDTH-1 :0] p4_cmp_data;\n   wire           p4_cmp_data_valid;\n          \n\n   wire            p5_tg_run_traffic; \n   wire [31:0]     p5_tg_start_addr;\n   wire [31:0]     p5_tg_end_addr;\n   wire [31:0]     p5_tg_cmd_seed; \n   wire [31:0]     p5_tg_data_seed;\n   wire            p5_tg_load_seed;\n   wire [2:0]      p5_tg_addr_mode;\n   wire [3:0]      p5_tg_instr_mode;\n   wire [1:0]      p5_tg_bl_mode;\n   wire [3:0]      p5_tg_data_mode;\n   wire            p5_tg_mode_load;\n   wire [5:0]      p5_tg_fixed_bl;\n   wire [2:0]      p5_tg_fixed_instr;\n   wire [31:0]     p5_tg_fixed_addr;\n   wire            p5_error;\n   wire            p5_cmp_error;\n   wire [P5_DWIDTH-1 :0] p5_cmp_data;\n   wire           p5_cmp_data_valid;\n  \n   wire \t  p2_mcb_cmd_en_sig; \n   wire [2:0] \t  p2_mcb_cmd_instr_sig;\n   wire [5:0] \t  p2_mcb_cmd_bl_sig;\n   wire [29:0]\t  p2_mcb_cmd_addr_sig;\n   wire \t  p2_mcb_wr_en_sig;\n   wire \t  p3_mcb_cmd_en_sig; \n   wire [2:0] \t  p3_mcb_cmd_instr_sig;\n   wire [5:0] \t  p3_mcb_cmd_bl_sig;\n   wire [29:0]\t  p3_mcb_cmd_addr_sig;\n   wire \t  p3_mcb_wr_en_sig;\n   wire \t  p4_mcb_cmd_en_sig; \n   wire [2:0] \t  p4_mcb_cmd_instr_sig;\n   wire [5:0] \t  p4_mcb_cmd_bl_sig;\n   wire [29:0]\t  p4_mcb_cmd_addr_sig;\n   wire \t  p4_mcb_wr_en_sig;\n   wire \t  p5_mcb_cmd_en_sig; \n   wire [2:0] \t  p5_mcb_cmd_instr_sig;\n   wire [5:0] \t  p5_mcb_cmd_bl_sig;\n   wire [29:0]\t  p5_mcb_cmd_addr_sig;\n   wire \t  p5_mcb_wr_en_sig;\n\n\n   assign cmp_error      = p0_cmp_error | p1_cmp_error | p2_cmp_error | p3_cmp_error | p4_cmp_error | p5_cmp_error;\n   assign error          = p0_error | p1_error | p2_error | p3_error | p4_error | p5_error;\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[0] == 1) begin: port0_status \n      assign cmp_data       = p0_cmp_data[31:0];\n      assign cmp_data_valid = p0_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[1] == 1) begin: port1_status   \n      assign cmp_data       = p1_cmp_data[31:0];\n      assign cmp_data_valid = p1_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[2] == 1) begin: port2_status   \n      assign cmp_data       = p2_cmp_data[31:0];\n      assign cmp_data_valid = p2_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[3] == 1) begin: port3_status   \n      assign cmp_data       = p3_cmp_data[31:0];\n      assign cmp_data_valid = p3_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[4] == 1) begin: port4_status   \n      assign cmp_data       = p4_cmp_data[31:0];\n      assign cmp_data_valid = p4_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[5] == 1) begin: port5_status   \n      assign cmp_data       = p5_cmp_data[31:0];\n      assign cmp_data_valid = p5_cmp_data_valid;\n   end\nendgenerate   \n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[0] == 1'b1)\n   begin : PORT0_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (C_P0_DATA_PORT_SIZE), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (C_p0_BEGIN_ADDRESS),\n      .END_ADDRESS                   (C_p0_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (C_p0_DATA_MODE), \n      .PORT_MODE                     (C_P0_PORT_MODE) \n    )\n   init_mem_pattern_ctr_p0\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p0_mcb_cmd_en),   \n      .mcb_cmd_instr_i               (p0_mcb_cmd_instr),\n      .mcb_cmd_addr_i                (p0_mcb_cmd_addr), \n      .mcb_cmd_bl_i                  (p0_mcb_cmd_bl),  \n      .mcb_wr_en_i                   (p0_mcb_wr_en), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),  \n      .vio_fixed_bl_value            (6'd64),  \n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p0_error),\n      .run_traffic_o                 (p0_tg_run_traffic),  \n      .start_addr_o                  (p0_tg_start_addr),\n      .end_addr_o                    (p0_tg_end_addr), \n      .cmd_seed_o                    (p0_tg_cmd_seed),  \n      .data_seed_o                   (p0_tg_data_seed), \n      .load_seed_o                   (p0_tg_load_seed), \n      .addr_mode_o                   (p0_tg_addr_mode), \n      .instr_mode_o                  (p0_tg_instr_mode), \n      .bl_mode_o                     (p0_tg_bl_mode), \n      .data_mode_o                   (p0_tg_data_mode), \n      .mode_load_o                   (p0_tg_mode_load), \n      .fixed_bl_o                    (p0_tg_fixed_bl), \n      .fixed_instr_o                 (p0_tg_fixed_instr), \n      .fixed_addr_o                  (p0_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P0_PORT_MODE),     \n      .DWIDTH                        (C_P0_DATA_PORT_SIZE),\n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (C_p0_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (C_p0_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (C_p0_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (C_p0_END_ADDRESS)\n     )  \n   m_traffic_gen_p0 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p0_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p0_tg_start_addr),                  \n      .end_addr_i                    (p0_tg_end_addr),                  \n      .cmd_seed_i                    (p0_tg_cmd_seed),                  \n      .data_seed_i                   (p0_tg_data_seed),                  \n      .load_seed_i                   (p0_tg_load_seed),                \n      .addr_mode_i                   (p0_tg_addr_mode),                \n      .instr_mode_i                  (p0_tg_instr_mode),                  \n      .bl_mode_i                     (p0_tg_bl_mode),                  \n      .data_mode_i                   (p0_tg_data_mode),                  \n      .mode_load_i                   (p0_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p0_tg_fixed_bl),                     \n      .fixed_instr_i                 (p0_tg_fixed_instr),                     \n      .fixed_addr_i                  (p0_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p0_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p0_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p0_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p0_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p0_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p0_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p0_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p0_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p0_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p0_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p0_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p0_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p0_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p0_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p0_error),  \n      .error_status                  (p0_error_status),  \n      .cmp_data                      (p0_cmp_data),            \n      .cmp_data_valid                (p0_cmp_data_valid),                  \n      .cmp_error                     (p0_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );\n   end     \n   else begin: PORT0_NO_TG\n      assign p0_error          = 'b0;\n      assign p0_error_status   = 'b0;\n      assign p0_cmp_data       = 'b0;\n      assign p0_cmp_data_valid = 'b0;\n      assign p0_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[1] == 1'b1) \n   begin : PORT1_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (C_P1_DATA_PORT_SIZE), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (C_p1_BEGIN_ADDRESS),\n      .END_ADDRESS                   (C_p1_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (C_p1_DATA_MODE), \n      .PORT_MODE                     (C_P1_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p1\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p1_mcb_cmd_en),   \n      .mcb_cmd_instr_i               (p1_mcb_cmd_instr),\n      .mcb_cmd_addr_i                (p1_mcb_cmd_addr), \n      .mcb_cmd_bl_i                  (p1_mcb_cmd_bl),  \n      .mcb_wr_en_i                   (p1_mcb_wr_en), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p1_error),\n      .run_traffic_o                 (p1_tg_run_traffic),  \n      .start_addr_o                  (p1_tg_start_addr),\n      .end_addr_o                    (p1_tg_end_addr), \n      .cmd_seed_o                    (p1_tg_cmd_seed),  \n      .data_seed_o                   (p1_tg_data_seed), \n      .load_seed_o                   (p1_tg_load_seed), \n      .addr_mode_o                   (p1_tg_addr_mode), \n      .instr_mode_o                  (p1_tg_instr_mode), \n      .bl_mode_o                     (p1_tg_bl_mode), \n      .data_mode_o                   (p1_tg_data_mode), \n      .mode_load_o                   (p1_tg_mode_load), \n      .fixed_bl_o                    (p1_tg_fixed_bl), \n      .fixed_instr_o                 (p1_tg_fixed_instr), \n      .fixed_addr_o                  (p1_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P1_PORT_MODE),     \n      .DWIDTH                        (C_P1_DATA_PORT_SIZE),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (C_p1_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (C_p1_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (C_p1_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (C_p1_END_ADDRESS)\n     )  \n   m_traffic_gen_p1 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p1_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p1_tg_start_addr),                  \n      .end_addr_i                    (p1_tg_end_addr),                  \n      .cmd_seed_i                    (p1_tg_cmd_seed),                  \n      .data_seed_i                   (p1_tg_data_seed),                  \n      .load_seed_i                   (p1_tg_load_seed),                \n      .addr_mode_i                   (p1_tg_addr_mode),                \n      .instr_mode_i                  (p1_tg_instr_mode),                  \n      .bl_mode_i                     (p1_tg_bl_mode),                  \n      .data_mode_i                   (p1_tg_data_mode),                  \n      .mode_load_i                   (p1_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p1_tg_fixed_bl),                     \n      .fixed_instr_i                 (p1_tg_fixed_instr),                     \n      .fixed_addr_i                  (p1_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p1_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p1_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p1_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p1_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p1_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p1_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p1_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p1_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p1_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p1_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p1_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p1_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p1_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p1_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p1_error),\n      .error_status                  (p1_error_status),\n      .cmp_data                      (p1_cmp_data),            \n      .cmp_data_valid                (p1_cmp_data_valid),                  \n      .cmp_error                     (p1_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end\n   else begin: PORT1_NO_TG\n      assign p1_error          = 'b0;\n      assign p1_error_status   = 'b0;\n      assign p1_cmp_data       = 'b0;\n      assign p1_cmp_data_valid = 'b0;\n      assign p1_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[2] == 1'b1)\n   begin : PORT2_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P2_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P2_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P2_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P2_DATA_MODE), \n      .PORT_MODE                     (C_P2_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p2\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p2_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p2_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p2_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p2_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p2_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p2_error),\n      .run_traffic_o                 (p2_tg_run_traffic),  \n      .start_addr_o                  (p2_tg_start_addr),\n      .end_addr_o                    (p2_tg_end_addr), \n      .cmd_seed_o                    (p2_tg_cmd_seed),  \n      .data_seed_o                   (p2_tg_data_seed), \n      .load_seed_o                   (p2_tg_load_seed), \n      .addr_mode_o                   (p2_tg_addr_mode), \n      .instr_mode_o                  (p2_tg_instr_mode), \n      .bl_mode_o                     (p2_tg_bl_mode), \n      .data_mode_o                   (p2_tg_data_mode), \n      .mode_load_o                   (p2_tg_mode_load), \n      .fixed_bl_o                    (p2_tg_fixed_bl), \n      .fixed_instr_o                 (p2_tg_fixed_instr), \n      .fixed_addr_o                  (p2_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P2_PORT_MODE),     \n      .DWIDTH                        (P2_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P2_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P2_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P2_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P2_END_ADDRESS)\n     )  \n   m_traffic_gen_p2 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p2_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p2_tg_start_addr),                  \n      .end_addr_i                    (p2_tg_end_addr),                  \n      .cmd_seed_i                    (p2_tg_cmd_seed),                  \n      .data_seed_i                   (p2_tg_data_seed),                  \n      .load_seed_i                   (p2_tg_load_seed),                \n      .addr_mode_i                   (p2_tg_addr_mode),                \n      .instr_mode_i                  (p2_tg_instr_mode),                  \n      .bl_mode_i                     (p2_tg_bl_mode),                  \n      .data_mode_i                   (p2_tg_data_mode),                  \n      .mode_load_i                   (p2_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p2_tg_fixed_bl),                     \n      .fixed_instr_i                 (p2_tg_fixed_instr),                     \n      .fixed_addr_i                  (p2_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p2_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p2_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p2_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p2_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p2_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p2_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p2_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p2_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p2_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p2_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p2_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p2_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p2_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p2_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p2_error),\n      .error_status                  (p2_error_status),\n      .cmp_data                      (p2_cmp_data),            \n      .cmp_data_valid                (p2_cmp_data_valid),                  \n      .cmp_error                     (p2_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT2_NO_TG\n      assign p2_error          = 'b0;\n      assign p2_error_status   = 'b0;\n      assign p2_cmp_data       = 'b0;\n      assign p2_cmp_data_valid = 'b0;\n      assign p2_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[3] == 1'b1) \n   begin : PORT3_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P3_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P3_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P3_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P3_DATA_MODE), \n      .PORT_MODE                     (C_P3_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p3\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p3_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p3_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p3_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p3_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p3_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p3_error),\n      .run_traffic_o                 (p3_tg_run_traffic),  \n      .start_addr_o                  (p3_tg_start_addr),\n      .end_addr_o                    (p3_tg_end_addr), \n      .cmd_seed_o                    (p3_tg_cmd_seed),  \n      .data_seed_o                   (p3_tg_data_seed), \n      .load_seed_o                   (p3_tg_load_seed), \n      .addr_mode_o                   (p3_tg_addr_mode), \n      .instr_mode_o                  (p3_tg_instr_mode), \n      .bl_mode_o                     (p3_tg_bl_mode), \n      .data_mode_o                   (p3_tg_data_mode), \n      .mode_load_o                   (p3_tg_mode_load), \n      .fixed_bl_o                    (p3_tg_fixed_bl), \n      .fixed_instr_o                 (p3_tg_fixed_instr), \n      .fixed_addr_o                  (p3_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P3_PORT_MODE),     \n      .DWIDTH                        (P3_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P3_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P3_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P3_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P3_END_ADDRESS)\n     )  \n   m_traffic_gen_p3 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p3_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p3_tg_start_addr),                  \n      .end_addr_i                    (p3_tg_end_addr),                  \n      .cmd_seed_i                    (p3_tg_cmd_seed),                  \n      .data_seed_i                   (p3_tg_data_seed),                  \n      .load_seed_i                   (p3_tg_load_seed),                \n      .addr_mode_i                   (p3_tg_addr_mode),                \n      .instr_mode_i                  (p3_tg_instr_mode),                  \n      .bl_mode_i                     (p3_tg_bl_mode),                  \n      .data_mode_i                   (p3_tg_data_mode),                  \n      .mode_load_i                   (p3_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p3_tg_fixed_bl),                     \n      .fixed_instr_i                 (p3_tg_fixed_instr),                     \n      .fixed_addr_i                  (p3_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p3_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p3_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p3_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p3_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p3_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p3_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p3_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p3_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p3_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p3_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p3_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p3_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p3_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p3_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p3_error),\n      .error_status                  (p3_error_status),\n      .cmp_data                      (p3_cmp_data),            \n      .cmp_data_valid                (p3_cmp_data_valid),                  \n      .cmp_error                     (p3_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT3_NO_TG\n      assign p3_error          = 'b0;\n      assign p3_error_status   = 'b0;\n      assign p3_cmp_data       = 'b0;\n      assign p3_cmp_data_valid = 'b0;\n      assign p3_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[4] == 1'b1) \n   begin : PORT4_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P4_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P4_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P4_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P4_DATA_MODE), \n      .PORT_MODE                     (C_P4_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p4\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p4_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p4_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p4_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p4_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p4_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p4_error),\n      .run_traffic_o                 (p4_tg_run_traffic),  \n      .start_addr_o                  (p4_tg_start_addr),\n      .end_addr_o                    (p4_tg_end_addr), \n      .cmd_seed_o                    (p4_tg_cmd_seed),  \n      .data_seed_o                   (p4_tg_data_seed), \n      .load_seed_o                   (p4_tg_load_seed), \n      .addr_mode_o                   (p4_tg_addr_mode), \n      .instr_mode_o                  (p4_tg_instr_mode), \n      .bl_mode_o                     (p4_tg_bl_mode), \n      .data_mode_o                   (p4_tg_data_mode), \n      .mode_load_o                   (p4_tg_mode_load), \n      .fixed_bl_o                    (p4_tg_fixed_bl), \n      .fixed_instr_o                 (p4_tg_fixed_instr), \n      .fixed_addr_o                  (p4_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P4_PORT_MODE),     \n      .DWIDTH                        (P4_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P4_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P4_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P4_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P4_END_ADDRESS)\n     )  \n   m_traffic_gen_p4 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p4_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p4_tg_start_addr),                  \n      .end_addr_i                    (p4_tg_end_addr),                  \n      .cmd_seed_i                    (p4_tg_cmd_seed),                  \n      .data_seed_i                   (p4_tg_data_seed),                  \n      .load_seed_i                   (p4_tg_load_seed),                \n      .addr_mode_i                   (p4_tg_addr_mode),                \n      .instr_mode_i                  (p4_tg_instr_mode),                  \n      .bl_mode_i                     (p4_tg_bl_mode),                  \n      .data_mode_i                   (p4_tg_data_mode),                  \n      .mode_load_i                   (p4_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p4_tg_fixed_bl),                     \n      .fixed_instr_i                 (p4_tg_fixed_instr),                     \n      .fixed_addr_i                  (p4_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p4_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p4_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p4_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p4_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p4_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p4_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p4_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p4_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p4_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p4_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p4_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p4_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p4_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p4_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p4_error),\n      .error_status                  (p4_error_status),\n      .cmp_data                      (p4_cmp_data),            \n      .cmp_data_valid                (p4_cmp_data_valid),                  \n      .cmp_error                     (p4_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT4_NO_TG\n      assign p4_error          = 'b0;\n      assign p4_error_status   = 'b0;\n      assign p4_cmp_data       = 'b0;\n      assign p4_cmp_data_valid = 'b0;\n      assign p4_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[5] == 1'b1) \n   begin : PORT5_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P5_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P5_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P5_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P5_DATA_MODE), \n      .PORT_MODE                     (C_P5_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p5\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p5_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p5_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p5_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p5_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p5_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p5_error),\n      .run_traffic_o                 (p5_tg_run_traffic),  \n      .start_addr_o                  (p5_tg_start_addr),\n      .end_addr_o                    (p5_tg_end_addr), \n      .cmd_seed_o                    (p5_tg_cmd_seed),  \n      .data_seed_o                   (p5_tg_data_seed), \n      .load_seed_o                   (p5_tg_load_seed), \n      .addr_mode_o                   (p5_tg_addr_mode), \n      .instr_mode_o                  (p5_tg_instr_mode), \n      .bl_mode_o                     (p5_tg_bl_mode), \n      .data_mode_o                   (p5_tg_data_mode), \n      .mode_load_o                   (p5_tg_mode_load), \n      .fixed_bl_o                    (p5_tg_fixed_bl), \n      .fixed_instr_o                 (p5_tg_fixed_instr), \n      .fixed_addr_o                  (p5_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P5_PORT_MODE),     \n      .DWIDTH                        (P5_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P5_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P5_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P5_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P5_END_ADDRESS)\n     )  \n   m_traffic_gen_p5 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p5_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p5_tg_start_addr),                  \n      .end_addr_i                    (p5_tg_end_addr),                  \n      .cmd_seed_i                    (p5_tg_cmd_seed),                  \n      .data_seed_i                   (p5_tg_data_seed),                  \n      .load_seed_i                   (p5_tg_load_seed),                \n      .addr_mode_i                   (p5_tg_addr_mode),                \n      .instr_mode_i                  (p5_tg_instr_mode),                  \n      .bl_mode_i                     (p5_tg_bl_mode),                  \n      .data_mode_i                   (p5_tg_data_mode),                  \n      .mode_load_i                   (p5_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p5_tg_fixed_bl),                     \n      .fixed_instr_i                 (p5_tg_fixed_instr),                     \n      .fixed_addr_i                  (p5_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p5_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p5_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p5_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p5_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p5_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p5_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p5_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p5_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p5_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p5_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p5_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p5_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p5_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p5_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p5_error),\n      .error_status                  (p5_error_status),\n      .cmp_data                      (p5_cmp_data),            \n      .cmp_data_valid                (p5_cmp_data_valid),                  \n      .cmp_error                     (p5_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );\n   end\n   else begin: PORT5_NO_TG\n      assign p5_error          = 'b0;\n      assign p5_error_status   = 'b0;\n      assign p5_cmp_data       = 'b0;\n      assign p5_cmp_data_valid = 'b0;\n      assign p5_cmp_error      = 'b0;\n   end   \nendgenerate    \n\n\n\n\ngenerate\nif (C_PORT_ENABLE[2] == 1'b1) begin: P2_cmd_field_mapping\n\n   if (C_P2_PORT_MODE == \"RD_MODE\") begin: RD_P2_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P2_equal_P0_cmd_field\n         assign p2_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P2_equal_P1_cmd_field\n         assign p2_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\"))  begin: RD_P2_equal_P3_cmd_field\n         assign p2_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P2_equal_P4_cmd_field\n         assign p2_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P2_equal_P5_cmd_field\n         assign p2_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P2_equal_P2_cmd_field\n         assign p2_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P2_cmd_field_mapping\n      assign p2_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n      assign p2_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n      assign p2_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n      assign p2_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n      assign p2_mcb_wr_en_sig           = p2_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[3] == 1'b1) begin: P3_cmd_field_mapping\n\n   if (C_P3_PORT_MODE == \"RD_MODE\") begin: RD_P3_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P3_equal_P0_cmd_field\n         assign p3_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P3_equal_P1_cmd_field\n         assign p3_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P3_equal_P2_cmd_field\n         assign p3_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P3_equal_P4_cmd_field\n         assign p3_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P3_equal_P5_cmd_field\n         assign p3_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P3_equal_P3_cmd_field\n         assign p3_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P3_cmd_field_mapping\n      assign p3_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n      assign p3_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n      assign p3_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n      assign p3_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n      assign p3_mcb_wr_en_sig           = p3_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[4] == 1'b1) begin: P4_cmd_field_mapping\n\n   if (C_P4_PORT_MODE == \"RD_MODE\") begin: RD_P4_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P4_equal_P0_cmd_field\n         assign p4_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P4_equal_P1_cmd_field\n         assign p4_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P4_equal_P2_cmd_field\n         assign p4_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\")) begin: RD_P4_equal_P3_cmd_field\n         assign p4_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P4_equal_P5_cmd_field\n         assign p4_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P4_equal_P4_cmd_field\n         assign p4_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P4_cmd_field_mapping\n      assign p4_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n      assign p4_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n      assign p4_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n      assign p4_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n      assign p4_mcb_wr_en_sig           = p4_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[5] == 1'b1) begin: P5_cmd_field_mapping\n\n   if (C_P5_PORT_MODE == \"RD_MODE\") begin: RD_P5_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P5_equal_P0_cmd_field\n         assign p5_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P5_equal_P1_cmd_field\n         assign p5_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P5_equal_P2_cmd_field\n         assign p5_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\")) begin: RD_P5_equal_P3_cmd_field\n         assign p5_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P5_equal_P4_cmd_field\n         assign p5_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\n        else begin: RD_P5_equal_P5_cmd_field\n         assign p5_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P5_cmd_field_mapping\n      assign p5_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n      assign p5_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n      assign p5_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n      assign p5_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n      assign p5_mcb_wr_en_sig           = p5_mcb_wr_en;\n   end\nend \nendgenerate\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: memc_tb_top. Module specification: This module serves as a testbench top-level for a memory controller, supporting up to 6 ports with configurable modes (read or write). It instantiates and connects multiple traffic generators (TGs) for different ports, manages port configurations, and handles command and data signals for read and write operations. The module features input ports for clock, reset, calibration status, VIO control signals, and various status signals from the memory controller for each port. Output ports include command and data signals to control the memory controller, as well as comparison data, error flags, and error status for each port. Internal signals are used to control and monitor the traffic generators for each port, including run traffic, address ranges, seeds, and mode settings. The module is structured with generate blocks for each port, instantiating init_mem_pattern_ctr and mcb_traffic_gen sub-modules to handle"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: memc_tb_top\n\nExplanation: This module appears to be a testbench top-level module for a memory controller. It instantiates and connects multiple traffic generators (TGs) for different ports, manages port configurations, and handles command and data signals for read and write operations. The module supports up to 6 ports with configurable modes (read or write) and allows for various testing scenarios by generating and comparing data patterns. It also includes error checking and status reporting functionality for each port."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nclk0, rst0, calib_done, vio_modify_enable, vio_data_mode_value, vio_addr_mode_value, p0_mcb_cmd_full, p0_mcb_wr_full, p0_mcb_wr_fifo_counts, p0_mcb_rd_data, p0_mcb_rd_empty, p0_mcb_rd_fifo_counts, p1_mcb_cmd_full, p1_mcb_wr_full, p1_mcb_wr_fifo_counts, p1_mcb_rd_data, p1_mcb_rd_empty, p1_mcb_rd_fifo_counts, p2_mcb_cmd_full, p2_mcb_wr_full, p2_mcb_wr_fifo_counts, p2_mcb_rd_data, p2_mcb_rd_empty, p2_mcb_rd_fifo_counts, p3_mcb_cmd_full, p3_mcb_wr_full, p3_mcb_wr_fifo_counts, p3_mcb_rd_data, p3_mcb_rd_empty, p3_mcb_rd_fifo_counts, p4_mcb_cmd_full, p4_mcb_wr_full, p4_mcb_wr_fifo_counts, p4_mcb_rd_data, p4_mcb_rd_empty, p4_mcb_rd_fifo_counts, p5_mcb_cmd_full, p5_mcb_wr_full, p5_mcb_wr_fifo_counts, p5_mcb_rd_data, p5_mcb_rd_empty, p5_mcb_rd_fifo_counts.\n\nExplanation: These input ports include clock and reset signals, calibration status, VIO control signals, and various status signals from the memory controller for each port (0-5), such as command full, write full, read data, read empty, and FIFO counts.\n\nOutput ports:\np0_mcb_cmd_en, p0_mcb_cmd_instr, p0_mcb_cmd_bl, p0_mcb_cmd_addr, p0_mcb_wr_en, p0_mcb_wr_mask, p0_mcb_wr_data, p0_mcb_rd_en, p1_mcb_cmd_en, p1_mcb_cmd_instr, p1_mcb_cmd_bl, p1_mcb_cmd_addr, p1_mcb_wr_en, p1_mcb_wr_mask, p1_mcb_wr_data, p1_mcb_rd_en, p2_mcb_cmd_en, p2_mcb_cmd_instr, p2_mcb_cmd_bl, p2_mcb_cmd_addr, p2_mcb_wr_en, p2_mcb_wr_mask, p2_mcb_wr_data, p2_mcb_rd_en, p3_mcb_cmd_en, p3_mcb_cmd_instr, p3_mcb_cmd_bl, p3_mcb_cmd_addr, p3_mcb_wr_en, p3_mcb_wr_mask, p3_mcb_wr_data, p3_mcb_rd_en, p4_mcb_cmd_en, p4_mcb_cmd_instr, p4_mcb_cmd_bl, p4_mcb_cmd_addr, p4_mcb_wr_en, p4_mcb_wr_mask, p4_mcb_wr_data, p4_mcb_rd_en, p5_mcb_cmd_en, p5_mcb_cmd_instr, p5_mcb_cmd_bl, p5_mcb_cmd_addr, p5_mcb_wr_en, p5_mcb_wr_mask, p5_mcb_wr_data, p5_mcb_rd_en, cmp_data, cmp_data_valid, cmp_error, error, p0_error_status, p1_error_status, p2_error_status, p3_error_status, p4_error_status, p5_error_status.\n\nExplanation: These output ports include command and data signals for each port (0-5) to control the memory controller, such as command enable, instruction, burst length, address, write enable, write mask, write data, and read enable. Additionally, there are outputs for comparison data, error flags, and error status for each port."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\np0_tg_run_traffic, p0_tg_start_addr, p0_tg_end_addr, p0_tg_cmd_seed, p0_tg_data_seed, p0_tg_load_seed, p0_tg_addr_mode, p0_tg_instr_mode, p0_tg_bl_mode, p0_tg_data_mode, p0_tg_mode_load, p0_tg_fixed_bl, p0_tg_fixed_instr, p0_tg_fixed_addr, p0_error, p0_cmp_error, p0_cmp_data, p0_cmp_data_valid, p1_tg_run_traffic, p1_tg_start_addr, p1_tg_end_addr, p1_tg_cmd_seed, p1_tg_data_seed, p1_tg_load_seed, p1_tg_addr_mode, p1_tg_instr_mode, p1_tg_bl_mode, p1_tg_data_mode, p1_tg_mode_load, p1_tg_fixed_bl, p1_tg_fixed_instr, p1_tg_fixed_addr, p1_error, p1_cmp_error, p1_cmp_data, p1_cmp_data_valid, p2_tg_run_traffic, p2_tg_start_addr, p2_tg_end_addr, p2_tg_cmd_seed, p2_tg_data_seed, p2_tg_load_seed, p2_tg_addr_mode, p2_tg_instr_mode, p2_tg_bl_mode, p2_tg_data_mode, p2_tg_mode_load, p2_tg_fixed_bl, p2_tg_fixed_instr, p2_tg_fixed_addr, p2_error, p2_cmp_error, p2_cmp_data, p2_cmp_data_valid, p2_mcb_cmd_en_sig, p2_mcb_cmd_instr_sig, p2_mcb_cmd_bl_sig, p2_mcb_cmd_addr_sig, p2_mcb_wr_en_sig, p3_tg_run_traffic, p3_tg_start_addr, p3_tg_end_addr, p3_tg_cmd_seed, p3_tg_data_seed, p3_tg_load_seed, p3_tg_addr_mode, p3_tg_instr_mode, p3_tg_bl_mode, p3_tg_data_mode, p3_tg_mode_load, p3_tg_fixed_bl, p3_tg_fixed_instr, p3_tg_fixed_addr, p3_error, p3_cmp_error, p3_cmp_data, p3_cmp_data_valid, p3_mcb_cmd_en_sig, p3_mcb_cmd_instr_sig, p3_mcb_cmd_bl_sig, p3_mcb_cmd_addr_sig, p3_mcb_wr_en_sig, p4_tg_run_traffic, p4_tg_start_addr, p4_tg_end_addr, p4_tg_cmd_seed, p4_tg_data_seed, p4_tg_load_seed, p4_tg_addr_mode, p4_tg_instr_mode, p4_tg_bl_mode, p4_tg_data_mode, p4_tg_mode_load, p4_tg_fixed_bl, p4_tg_fixed_instr, p4_tg_fixed_addr, p4_error, p4_cmp_error, p4_cmp_data, p4_cmp_data_valid, p4_mcb_cmd_en_sig, p4_mcb_cmd_instr_sig, p4_mcb_cmd_bl_sig, p4_mcb_cmd_addr_sig, p4_mcb_wr_en_sig, p5_tg_run_traffic, p5_tg_start_addr, p5_tg_end_addr, p5_tg_cmd_seed, p5_tg_data_seed, p5_tg_load_seed, p5_tg_addr_mode, p5_tg_instr_mode, p5_tg_bl_mode, p5_tg_data_mode, p5_tg_mode_load, p5_tg_fixed_bl, p5_tg_fixed_instr, p5_tg_fixed_addr, p5_error, p5_cmp_error, p5_cmp_data, p5_cmp_data_valid, p5_mcb_cmd_en_sig, p5_mcb_cmd_instr_sig, p5_mcb_cmd_bl_sig, p5_mcb_cmd_addr_sig, p5_mcb_wr_en_sig.\n\nExplanation: These internal signals are used for each port (0-5) to control and monitor the traffic generators. They include signals for running traffic, setting address ranges, configuring seeds for command and data generation, controlling address and data modes, setting fixed burst lengths and instructions, and handling error detection and comparison. The signals with \"_sig\" suffixes are used for command field mapping between ports. Each set of signals is specific to its corresponding port and is used to manage the traffic generation and error checking for that port."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule memc_tb_top #(\n\n   parameter C_SIMULATION                  = \"FALSE\",   \n   parameter C_NUM_DQ_PINS                 = 4,\n   parameter C_MEM_BURST_LEN               = 8,\t       \n   parameter C_MEM_NUM_COL_BITS            = 11,\n   parameter C_SMALL_DEVICE                = \"FALSE\",         \n\n   parameter C_PORT_ENABLE                 = 6'b111111,\t       \n   parameter C_P0_MASK_SIZE                = 4,\n   parameter C_P0_DATA_PORT_SIZE           = 32,\n   parameter C_P1_MASK_SIZE                = 4,\n   parameter C_P1_DATA_PORT_SIZE           = 32,\n   parameter C_P0_PORT_MODE                = \"BI_MODE\",           \n   parameter C_P1_PORT_MODE                = \"BI_MODE\",\n   parameter C_P2_PORT_MODE                = \"RD_MODE\",           \n   parameter C_P3_PORT_MODE                = \"RD_MODE\",           \n   parameter C_P4_PORT_MODE                = \"RD_MODE\",           \n   parameter C_P5_PORT_MODE                = \"RD_MODE\",\n\n   parameter C_p0_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p0_DATA_MODE                = 4'b0010,\n   parameter C_p0_END_ADDRESS              = 32'h000002ff,\n   parameter C_p0_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p0_PRBS_SADDR_MASK_POS      = 32'h00000100,\n   parameter C_p1_BEGIN_ADDRESS            = 32'h00000300,\n   parameter C_p1_DATA_MODE                = 4'b0010,\n   parameter C_p1_END_ADDRESS              = 32'h000004ff,\n   parameter C_p1_PRBS_EADDR_MASK_POS      = 32'hfffff800,\n   parameter C_p1_PRBS_SADDR_MASK_POS      = 32'h00000300,\n   parameter C_p2_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p2_DATA_MODE                = 4'b0010,\n   parameter C_p2_END_ADDRESS              = 32'h000002ff,\n   parameter C_p2_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p2_PRBS_SADDR_MASK_POS      = 32'h00000100,\n   parameter C_p3_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p3_DATA_MODE                = 4'b0010,\n   parameter C_p3_END_ADDRESS              = 32'h000002ff,\n   parameter C_p3_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p3_PRBS_SADDR_MASK_POS      = 32'h00000100,\n   parameter C_p4_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p4_DATA_MODE                = 4'b0010,\n   parameter C_p4_END_ADDRESS              = 32'h000002ff,\n   parameter C_p4_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p4_PRBS_SADDR_MASK_POS      = 32'h00000100,\n   parameter C_p5_BEGIN_ADDRESS            = 32'h00000100,\n   parameter C_p5_DATA_MODE                = 4'b0010,\n   parameter C_p5_END_ADDRESS              = 32'h000002ff,\n   parameter C_p5_PRBS_EADDR_MASK_POS      = 32'hfffffc00,\n   parameter C_p5_PRBS_SADDR_MASK_POS      = 32'h00000100\n  )\n  (\n   input                    clk0, \n   input                    rst0, \n   input                    calib_done, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   \n   output\t\tp0_mcb_cmd_en,\n   output [2:0]\t        p0_mcb_cmd_instr,\n   output [5:0]\t        p0_mcb_cmd_bl,\n   output [29:0]\tp0_mcb_cmd_addr,\n   input\t\tp0_mcb_cmd_full,\n\n   \n   \n   output\t\tp0_mcb_wr_en,\n   output [C_P0_MASK_SIZE - 1:0]\tp0_mcb_wr_mask,\n   output [C_P0_DATA_PORT_SIZE - 1:0]\tp0_mcb_wr_data,\n   input\t\tp0_mcb_wr_full,\n   input [6:0]\t        p0_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp0_mcb_rd_en,\n   input [C_P0_DATA_PORT_SIZE - 1:0]\tp0_mcb_rd_data,\n   input\t\tp0_mcb_rd_empty,\n   input [6:0]\t        p0_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp1_mcb_cmd_en,\n   output [2:0]\t        p1_mcb_cmd_instr,\n   output [5:0]\t        p1_mcb_cmd_bl,\n   output [29:0]\tp1_mcb_cmd_addr,\n   input\t\tp1_mcb_cmd_full,\n\n   \n   \n   output\t\tp1_mcb_wr_en,\n   output [C_P1_MASK_SIZE - 1:0]\tp1_mcb_wr_mask,\n   output [C_P1_DATA_PORT_SIZE - 1:0]\tp1_mcb_wr_data,\n   input\t\tp1_mcb_wr_full,\n   input [6:0]\t        p1_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp1_mcb_rd_en,\n   input [C_P1_DATA_PORT_SIZE - 1:0]\tp1_mcb_rd_data,\n   input\t\tp1_mcb_rd_empty,\n   input [6:0]\t        p1_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp2_mcb_cmd_en,\n   output [2:0]\t        p2_mcb_cmd_instr,\n   output [5:0]\t        p2_mcb_cmd_bl,\n   output [29:0]\tp2_mcb_cmd_addr,\n   input\t\tp2_mcb_cmd_full,\n\n   \n   \n   output\t\tp2_mcb_wr_en,\n   output [3:0]\t        p2_mcb_wr_mask,\n   output [31:0]\tp2_mcb_wr_data,\n   input\t\tp2_mcb_wr_full,\n   input [6:0]\t        p2_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp2_mcb_rd_en,\n   input [31:0]\t        p2_mcb_rd_data,\n   input\t\tp2_mcb_rd_empty,\n   input [6:0]\t        p2_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp3_mcb_cmd_en,\n   output [2:0]\t        p3_mcb_cmd_instr,\n   output [5:0]\t        p3_mcb_cmd_bl,\n   output [29:0]\tp3_mcb_cmd_addr,\n   input\t\tp3_mcb_cmd_full,\n\n   \n   \n   output\t\tp3_mcb_wr_en,\n   output [3:0]\t        p3_mcb_wr_mask,\n   output [31:0]\tp3_mcb_wr_data,\n   input\t\tp3_mcb_wr_full,\n   input [6:0]\t        p3_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp3_mcb_rd_en,\n   input [31:0]\t        p3_mcb_rd_data,\n   input\t\tp3_mcb_rd_empty,\n   input [6:0]\t        p3_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp4_mcb_cmd_en,\n   output [2:0]\t        p4_mcb_cmd_instr,\n   output [5:0]\t        p4_mcb_cmd_bl,\n   output [29:0]\tp4_mcb_cmd_addr,\n   input\t\tp4_mcb_cmd_full,\n\n   \n   \n   output\t\tp4_mcb_wr_en,\n   output [3:0]\t        p4_mcb_wr_mask,\n   output [31:0]\tp4_mcb_wr_data,\n   input\t\tp4_mcb_wr_full,\n   input [6:0]\t        p4_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp4_mcb_rd_en,\n   input [31:0]\t        p4_mcb_rd_data,\n   input\t\tp4_mcb_rd_empty,\n   input [6:0]\t        p4_mcb_rd_fifo_counts,\n\n   \n   \n   output\t\tp5_mcb_cmd_en,\n   output [2:0]\t        p5_mcb_cmd_instr,\n   output [5:0]\t        p5_mcb_cmd_bl,\n   output [29:0]\tp5_mcb_cmd_addr,\n   input\t\tp5_mcb_cmd_full,\n\n   \n   \n   output\t\tp5_mcb_wr_en,\n   output [3:0]\t        p5_mcb_wr_mask,\n   output [31:0]\tp5_mcb_wr_data,\n   input\t\tp5_mcb_wr_full,\n   input [6:0]\t        p5_mcb_wr_fifo_counts,\n\n   \n   \n   output\t\tp5_mcb_rd_en,\n   input [31:0]\t        p5_mcb_rd_data,\n   input\t\tp5_mcb_rd_empty,\n   input [6:0]\t        p5_mcb_rd_fifo_counts,\n\n   \n   input                vio_modify_enable,\n   input [2:0]          vio_data_mode_value,\n   input [2:0]          vio_addr_mode_value,\n\n   \n   output [31:0]        cmp_data,\n   output               cmp_data_valid,\n   output               cmp_error,\n   output               error,       \n   output [64 + (2*C_P0_DATA_PORT_SIZE - 1):0]     p0_error_status,\n   output [64 + (2*C_P1_DATA_PORT_SIZE - 1):0]     p1_error_status,\n   output [127 : 0]     p2_error_status,\n   output [127 : 0]     p3_error_status,\n   output [127 : 0]     p4_error_status,\n   output [127 : 0]     p5_error_status\n  );\n\n  \n   localparam P2_DWIDTH            = 32;           \n   localparam P3_DWIDTH            = 32;           \n   localparam P4_DWIDTH            = 32;           \n   localparam P5_DWIDTH            = 32;             \n   localparam FAMILY               = \"SPARTAN6\";  \n   localparam CMP_DATA_PIPE_STAGES = 0;            \n   localparam DQ_ERROR_WIDTH       = (C_NUM_DQ_PINS==4)? 1 : (C_NUM_DQ_PINS/8);\n   localparam TG_DATA_PATTERN      = (C_SMALL_DEVICE == \"FALSE\") ? \"DGEN_ALL\" : \"DGEN_ADDR\";\n\n   localparam P2_PRBS_SADDR_MASK_POS = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_SADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_SADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p2_PRBS_SADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p2_PRBS_SADDR_MASK_POS;\n   localparam P2_PRBS_EADDR_MASK_POS = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_EADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_EADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p2_PRBS_EADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p2_PRBS_EADDR_MASK_POS;\n   localparam P2_BEGIN_ADDRESS       = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_BEGIN_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_BEGIN_ADDRESS: \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_BEGIN_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p2_BEGIN_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p2_BEGIN_ADDRESS;\n   localparam P2_END_ADDRESS         = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_END_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_END_ADDRESS: \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_END_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p2_END_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p2_END_ADDRESS;\n   localparam P2_DATA_MODE           = (C_P2_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_DATA_MODE: \n                                                                     C_PORT_ENABLE[1] ? C_p1_DATA_MODE: \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_DATA_MODE : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_DATA_MODE : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_DATA_MODE : \n\t\t\t  \t\t\t\t\t     C_p2_DATA_MODE \n\t\t\t\t\t\t\t\t   : C_p2_DATA_MODE;\n\n\n   localparam P3_PRBS_SADDR_MASK_POS = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_SADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_SADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p3_PRBS_SADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p3_PRBS_SADDR_MASK_POS;\n   localparam P3_PRBS_EADDR_MASK_POS = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_EADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_EADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p3_PRBS_EADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p3_PRBS_EADDR_MASK_POS;\n   localparam P3_BEGIN_ADDRESS       = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_BEGIN_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_BEGIN_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_BEGIN_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p3_BEGIN_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p3_BEGIN_ADDRESS;\n   localparam P3_END_ADDRESS         = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_END_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_END_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_END_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p3_END_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p3_END_ADDRESS;\n   localparam P3_DATA_MODE           = (C_P3_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_DATA_MODE: \n                                                                     C_PORT_ENABLE[1] ? C_p1_DATA_MODE: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_DATA_MODE : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_DATA_MODE : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_DATA_MODE : \n\t\t\t  \t\t\t\t\t     C_p3_DATA_MODE \n\t\t\t\t\t\t\t\t   : C_p3_DATA_MODE;\n\n\n   localparam P4_PRBS_SADDR_MASK_POS = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_SADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_SADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p4_PRBS_SADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p4_PRBS_SADDR_MASK_POS;\n   localparam P4_PRBS_EADDR_MASK_POS = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_EADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_PRBS_EADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p4_PRBS_EADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p4_PRBS_EADDR_MASK_POS;\n   localparam P4_BEGIN_ADDRESS       = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_BEGIN_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_BEGIN_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_BEGIN_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p4_BEGIN_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p4_BEGIN_ADDRESS;\n   localparam P4_END_ADDRESS         = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_END_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_END_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_END_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p4_END_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p4_END_ADDRESS;\n   localparam P4_DATA_MODE           = (C_P4_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_DATA_MODE: \n                                                                     C_PORT_ENABLE[1] ? C_p1_DATA_MODE: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_DATA_MODE : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_DATA_MODE : \n                                                                     (C_PORT_ENABLE[5] && (C_P5_PORT_MODE == \"WR_MODE\")) ? C_p5_DATA_MODE : \n\t\t\t  \t\t\t\t\t     C_p4_DATA_MODE \n\t\t\t\t\t\t\t\t   : C_p4_DATA_MODE;\n\n\n   localparam P5_PRBS_SADDR_MASK_POS = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_SADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_SADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_SADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p5_PRBS_SADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p5_PRBS_SADDR_MASK_POS;\n   localparam P5_PRBS_EADDR_MASK_POS = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_PRBS_EADDR_MASK_POS : \n                                                                     C_PORT_ENABLE[1] ? C_p1_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_PRBS_EADDR_MASK_POS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_PRBS_EADDR_MASK_POS : \n\t\t\t  \t\t\t\t\t     C_p5_PRBS_EADDR_MASK_POS\n\t\t\t\t\t\t\t\t   : C_p5_PRBS_EADDR_MASK_POS;\n   localparam P5_BEGIN_ADDRESS       = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_BEGIN_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_BEGIN_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_BEGIN_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_BEGIN_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p5_BEGIN_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p5_BEGIN_ADDRESS;\n   localparam P5_END_ADDRESS         = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_END_ADDRESS: \n                                                                     C_PORT_ENABLE[1] ? C_p1_END_ADDRESS: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_END_ADDRESS : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_END_ADDRESS : \n\t\t\t  \t\t\t\t\t     C_p5_END_ADDRESS \n\t\t\t\t\t\t\t\t   : C_p5_END_ADDRESS;\n   localparam P5_DATA_MODE           = (C_P5_PORT_MODE == \"RD_MODE\") ? C_PORT_ENABLE[0] ? C_p0_DATA_MODE: \n                                                                     C_PORT_ENABLE[1] ? C_p1_DATA_MODE: \n                                                                     (C_PORT_ENABLE[2] && (C_P2_PORT_MODE == \"WR_MODE\")) ? C_p2_DATA_MODE : \n                                                                     (C_PORT_ENABLE[3] && (C_P3_PORT_MODE == \"WR_MODE\")) ? C_p3_DATA_MODE : \n                                                                     (C_PORT_ENABLE[4] && (C_P4_PORT_MODE == \"WR_MODE\")) ? C_p4_DATA_MODE : \n\t\t\t  \t\t\t\t\t     C_p5_DATA_MODE \n\t\t\t\t\t\t\t\t   : C_p5_DATA_MODE;\n\n\n\n   wire            p0_tg_run_traffic; \n   wire [31:0]     p0_tg_start_addr;\n   wire [31:0]     p0_tg_end_addr;\n   wire [31:0]     p0_tg_cmd_seed; \n   wire [31:0]     p0_tg_data_seed;\n   wire            p0_tg_load_seed;\n   wire [2:0]      p0_tg_addr_mode;\n   wire [3:0]      p0_tg_instr_mode;\n   wire [1:0]      p0_tg_bl_mode;\n   wire [3:0]      p0_tg_data_mode;\n   wire            p0_tg_mode_load;\n   wire [5:0]      p0_tg_fixed_bl;\n   wire [2:0]      p0_tg_fixed_instr;\n   wire [31:0]     p0_tg_fixed_addr;\n   wire            p0_error;\n   wire            p0_cmp_error;\n   wire [C_P0_DATA_PORT_SIZE-1 :0] p0_cmp_data;\n   wire           p0_cmp_data_valid;\n          \n\n   wire            p1_tg_run_traffic; \n   wire [31:0]     p1_tg_start_addr;\n   wire [31:0]     p1_tg_end_addr;\n   wire [31:0]     p1_tg_cmd_seed; \n   wire [31:0]     p1_tg_data_seed;\n   wire            p1_tg_load_seed;\n   wire [2:0]      p1_tg_addr_mode;\n   wire [3:0]      p1_tg_instr_mode;\n   wire [1:0]      p1_tg_bl_mode;\n   wire [3:0]      p1_tg_data_mode;\n   wire            p1_tg_mode_load;\n   wire [5:0]      p1_tg_fixed_bl;\n   wire [2:0]      p1_tg_fixed_instr;\n   wire [31:0]     p1_tg_fixed_addr;\n   wire            p1_error;\n   wire            p1_cmp_error;\n   wire [C_P1_DATA_PORT_SIZE-1 :0] p1_cmp_data;\n   wire           p1_cmp_data_valid;\n          \n\n   wire            p2_tg_run_traffic; \n   wire [31:0]     p2_tg_start_addr;\n   wire [31:0]     p2_tg_end_addr;\n   wire [31:0]     p2_tg_cmd_seed; \n   wire [31:0]     p2_tg_data_seed;\n   wire            p2_tg_load_seed;\n   wire [2:0]      p2_tg_addr_mode;\n   wire [3:0]      p2_tg_instr_mode;\n   wire [1:0]      p2_tg_bl_mode;\n   wire [3:0]      p2_tg_data_mode;\n   wire            p2_tg_mode_load;\n   wire [5:0]      p2_tg_fixed_bl;\n   wire [2:0]      p2_tg_fixed_instr;\n   wire [31:0]     p2_tg_fixed_addr;\n   wire            p2_error;\n   wire            p2_cmp_error;\n   wire [P2_DWIDTH-1 :0] p2_cmp_data;\n   wire           p2_cmp_data_valid;\n          \n\n   wire            p3_tg_run_traffic; \n   wire [31:0]     p3_tg_start_addr;\n   wire [31:0]     p3_tg_end_addr;\n   wire [31:0]     p3_tg_cmd_seed; \n   wire [31:0]     p3_tg_data_seed;\n   wire            p3_tg_load_seed;\n   wire [2:0]      p3_tg_addr_mode;\n   wire [3:0]      p3_tg_instr_mode;\n   wire [1:0]      p3_tg_bl_mode;\n   wire [3:0]      p3_tg_data_mode;\n   wire            p3_tg_mode_load;\n   wire [5:0]      p3_tg_fixed_bl;\n   wire [2:0]      p3_tg_fixed_instr;\n   wire [31:0]     p3_tg_fixed_addr;\n   wire            p3_error;\n   wire            p3_cmp_error;\n   wire [P3_DWIDTH-1 :0] p3_cmp_data;\n   wire           p3_cmp_data_valid;\n          \n\n   wire            p4_tg_run_traffic; \n   wire [31:0]     p4_tg_start_addr;\n   wire [31:0]     p4_tg_end_addr;\n   wire [31:0]     p4_tg_cmd_seed; \n   wire [31:0]     p4_tg_data_seed;\n   wire            p4_tg_load_seed;\n   wire [2:0]      p4_tg_addr_mode;\n   wire [3:0]      p4_tg_instr_mode;\n   wire [1:0]      p4_tg_bl_mode;\n   wire [3:0]      p4_tg_data_mode;\n   wire            p4_tg_mode_load;\n   wire [5:0]      p4_tg_fixed_bl;\n   wire [2:0]      p4_tg_fixed_instr;\n   wire [31:0]     p4_tg_fixed_addr;\n   wire            p4_error;\n   wire            p4_cmp_error;\n   wire [P4_DWIDTH-1 :0] p4_cmp_data;\n   wire           p4_cmp_data_valid;\n          \n\n   wire            p5_tg_run_traffic; \n   wire [31:0]     p5_tg_start_addr;\n   wire [31:0]     p5_tg_end_addr;\n   wire [31:0]     p5_tg_cmd_seed; \n   wire [31:0]     p5_tg_data_seed;\n   wire            p5_tg_load_seed;\n   wire [2:0]      p5_tg_addr_mode;\n   wire [3:0]      p5_tg_instr_mode;\n   wire [1:0]      p5_tg_bl_mode;\n   wire [3:0]      p5_tg_data_mode;\n   wire            p5_tg_mode_load;\n   wire [5:0]      p5_tg_fixed_bl;\n   wire [2:0]      p5_tg_fixed_instr;\n   wire [31:0]     p5_tg_fixed_addr;\n   wire            p5_error;\n   wire            p5_cmp_error;\n   wire [P5_DWIDTH-1 :0] p5_cmp_data;\n   wire           p5_cmp_data_valid;\n  \n   wire \t  p2_mcb_cmd_en_sig; \n   wire [2:0] \t  p2_mcb_cmd_instr_sig;\n   wire [5:0] \t  p2_mcb_cmd_bl_sig;\n   wire [29:0]\t  p2_mcb_cmd_addr_sig;\n   wire \t  p2_mcb_wr_en_sig;\n   wire \t  p3_mcb_cmd_en_sig; \n   wire [2:0] \t  p3_mcb_cmd_instr_sig;\n   wire [5:0] \t  p3_mcb_cmd_bl_sig;\n   wire [29:0]\t  p3_mcb_cmd_addr_sig;\n   wire \t  p3_mcb_wr_en_sig;\n   wire \t  p4_mcb_cmd_en_sig; \n   wire [2:0] \t  p4_mcb_cmd_instr_sig;\n   wire [5:0] \t  p4_mcb_cmd_bl_sig;\n   wire [29:0]\t  p4_mcb_cmd_addr_sig;\n   wire \t  p4_mcb_wr_en_sig;\n   wire \t  p5_mcb_cmd_en_sig; \n   wire [2:0] \t  p5_mcb_cmd_instr_sig;\n   wire [5:0] \t  p5_mcb_cmd_bl_sig;\n   wire [29:0]\t  p5_mcb_cmd_addr_sig;\n   wire \t  p5_mcb_wr_en_sig;\n\n\n   assign cmp_error      = p0_cmp_error | p1_cmp_error | p2_cmp_error | p3_cmp_error | p4_cmp_error | p5_cmp_error;\n   assign error          = p0_error | p1_error | p2_error | p3_error | p4_error | p5_error;\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[0] == 1) begin: port0_status \n      assign cmp_data       = p0_cmp_data[31:0];\n      assign cmp_data_valid = p0_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[1] == 1) begin: port1_status   \n      assign cmp_data       = p1_cmp_data[31:0];\n      assign cmp_data_valid = p1_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[2] == 1) begin: port2_status   \n      assign cmp_data       = p2_cmp_data[31:0];\n      assign cmp_data_valid = p2_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[3] == 1) begin: port3_status   \n      assign cmp_data       = p3_cmp_data[31:0];\n      assign cmp_data_valid = p3_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[4] == 1) begin: port4_status   \n      assign cmp_data       = p4_cmp_data[31:0];\n      assign cmp_data_valid = p4_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[5] == 1) begin: port5_status   \n      assign cmp_data       = p5_cmp_data[31:0];\n      assign cmp_data_valid = p5_cmp_data_valid;\n   end\nendgenerate   \n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[0] == 1'b1)\n   begin : PORT0_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (C_P0_DATA_PORT_SIZE), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (C_p0_BEGIN_ADDRESS),\n      .END_ADDRESS                   (C_p0_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (C_p0_DATA_MODE), \n      .PORT_MODE                     (C_P0_PORT_MODE) \n    )\n   init_mem_pattern_ctr_p0\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p0_mcb_cmd_en),   \n      .mcb_cmd_instr_i               (p0_mcb_cmd_instr),\n      .mcb_cmd_addr_i                (p0_mcb_cmd_addr), \n      .mcb_cmd_bl_i                  (p0_mcb_cmd_bl),  \n      .mcb_wr_en_i                   (p0_mcb_wr_en), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),  \n      .vio_fixed_bl_value            (6'd64),  \n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p0_error),\n      .run_traffic_o                 (p0_tg_run_traffic),  \n      .start_addr_o                  (p0_tg_start_addr),\n      .end_addr_o                    (p0_tg_end_addr), \n      .cmd_seed_o                    (p0_tg_cmd_seed),  \n      .data_seed_o                   (p0_tg_data_seed), \n      .load_seed_o                   (p0_tg_load_seed), \n      .addr_mode_o                   (p0_tg_addr_mode), \n      .instr_mode_o                  (p0_tg_instr_mode), \n      .bl_mode_o                     (p0_tg_bl_mode), \n      .data_mode_o                   (p0_tg_data_mode), \n      .mode_load_o                   (p0_tg_mode_load), \n      .fixed_bl_o                    (p0_tg_fixed_bl), \n      .fixed_instr_o                 (p0_tg_fixed_instr), \n      .fixed_addr_o                  (p0_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P0_PORT_MODE),     \n      .DWIDTH                        (C_P0_DATA_PORT_SIZE),\n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (C_p0_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (C_p0_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (C_p0_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (C_p0_END_ADDRESS)\n     )  \n   m_traffic_gen_p0 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p0_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p0_tg_start_addr),                  \n      .end_addr_i                    (p0_tg_end_addr),                  \n      .cmd_seed_i                    (p0_tg_cmd_seed),                  \n      .data_seed_i                   (p0_tg_data_seed),                  \n      .load_seed_i                   (p0_tg_load_seed),                \n      .addr_mode_i                   (p0_tg_addr_mode),                \n      .instr_mode_i                  (p0_tg_instr_mode),                  \n      .bl_mode_i                     (p0_tg_bl_mode),                  \n      .data_mode_i                   (p0_tg_data_mode),                  \n      .mode_load_i                   (p0_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p0_tg_fixed_bl),                     \n      .fixed_instr_i                 (p0_tg_fixed_instr),                     \n      .fixed_addr_i                  (p0_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p0_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p0_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p0_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p0_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p0_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p0_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p0_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p0_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p0_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p0_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p0_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p0_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p0_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p0_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p0_error),  \n      .error_status                  (p0_error_status),  \n      .cmp_data                      (p0_cmp_data),            \n      .cmp_data_valid                (p0_cmp_data_valid),                  \n      .cmp_error                     (p0_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );\n   end     \n   else begin: PORT0_NO_TG\n      assign p0_error          = 'b0;\n      assign p0_error_status   = 'b0;\n      assign p0_cmp_data       = 'b0;\n      assign p0_cmp_data_valid = 'b0;\n      assign p0_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[1] == 1'b1) \n   begin : PORT1_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (C_P1_DATA_PORT_SIZE), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (C_p1_BEGIN_ADDRESS),\n      .END_ADDRESS                   (C_p1_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (C_p1_DATA_MODE), \n      .PORT_MODE                     (C_P1_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p1\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p1_mcb_cmd_en),   \n      .mcb_cmd_instr_i               (p1_mcb_cmd_instr),\n      .mcb_cmd_addr_i                (p1_mcb_cmd_addr), \n      .mcb_cmd_bl_i                  (p1_mcb_cmd_bl),  \n      .mcb_wr_en_i                   (p1_mcb_wr_en), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p1_error),\n      .run_traffic_o                 (p1_tg_run_traffic),  \n      .start_addr_o                  (p1_tg_start_addr),\n      .end_addr_o                    (p1_tg_end_addr), \n      .cmd_seed_o                    (p1_tg_cmd_seed),  \n      .data_seed_o                   (p1_tg_data_seed), \n      .load_seed_o                   (p1_tg_load_seed), \n      .addr_mode_o                   (p1_tg_addr_mode), \n      .instr_mode_o                  (p1_tg_instr_mode), \n      .bl_mode_o                     (p1_tg_bl_mode), \n      .data_mode_o                   (p1_tg_data_mode), \n      .mode_load_o                   (p1_tg_mode_load), \n      .fixed_bl_o                    (p1_tg_fixed_bl), \n      .fixed_instr_o                 (p1_tg_fixed_instr), \n      .fixed_addr_o                  (p1_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P1_PORT_MODE),     \n      .DWIDTH                        (C_P1_DATA_PORT_SIZE),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (C_p1_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (C_p1_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (C_p1_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (C_p1_END_ADDRESS)\n     )  \n   m_traffic_gen_p1 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p1_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p1_tg_start_addr),                  \n      .end_addr_i                    (p1_tg_end_addr),                  \n      .cmd_seed_i                    (p1_tg_cmd_seed),                  \n      .data_seed_i                   (p1_tg_data_seed),                  \n      .load_seed_i                   (p1_tg_load_seed),                \n      .addr_mode_i                   (p1_tg_addr_mode),                \n      .instr_mode_i                  (p1_tg_instr_mode),                  \n      .bl_mode_i                     (p1_tg_bl_mode),                  \n      .data_mode_i                   (p1_tg_data_mode),                  \n      .mode_load_i                   (p1_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p1_tg_fixed_bl),                     \n      .fixed_instr_i                 (p1_tg_fixed_instr),                     \n      .fixed_addr_i                  (p1_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p1_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p1_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p1_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p1_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p1_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p1_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p1_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p1_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p1_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p1_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p1_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p1_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p1_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p1_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p1_error),\n      .error_status                  (p1_error_status),\n      .cmp_data                      (p1_cmp_data),            \n      .cmp_data_valid                (p1_cmp_data_valid),                  \n      .cmp_error                     (p1_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end\n   else begin: PORT1_NO_TG\n      assign p1_error          = 'b0;\n      assign p1_error_status   = 'b0;\n      assign p1_cmp_data       = 'b0;\n      assign p1_cmp_data_valid = 'b0;\n      assign p1_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[2] == 1'b1)\n   begin : PORT2_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P2_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P2_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P2_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P2_DATA_MODE), \n      .PORT_MODE                     (C_P2_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p2\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p2_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p2_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p2_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p2_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p2_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p2_error),\n      .run_traffic_o                 (p2_tg_run_traffic),  \n      .start_addr_o                  (p2_tg_start_addr),\n      .end_addr_o                    (p2_tg_end_addr), \n      .cmd_seed_o                    (p2_tg_cmd_seed),  \n      .data_seed_o                   (p2_tg_data_seed), \n      .load_seed_o                   (p2_tg_load_seed), \n      .addr_mode_o                   (p2_tg_addr_mode), \n      .instr_mode_o                  (p2_tg_instr_mode), \n      .bl_mode_o                     (p2_tg_bl_mode), \n      .data_mode_o                   (p2_tg_data_mode), \n      .mode_load_o                   (p2_tg_mode_load), \n      .fixed_bl_o                    (p2_tg_fixed_bl), \n      .fixed_instr_o                 (p2_tg_fixed_instr), \n      .fixed_addr_o                  (p2_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P2_PORT_MODE),     \n      .DWIDTH                        (P2_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P2_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P2_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P2_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P2_END_ADDRESS)\n     )  \n   m_traffic_gen_p2 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p2_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p2_tg_start_addr),                  \n      .end_addr_i                    (p2_tg_end_addr),                  \n      .cmd_seed_i                    (p2_tg_cmd_seed),                  \n      .data_seed_i                   (p2_tg_data_seed),                  \n      .load_seed_i                   (p2_tg_load_seed),                \n      .addr_mode_i                   (p2_tg_addr_mode),                \n      .instr_mode_i                  (p2_tg_instr_mode),                  \n      .bl_mode_i                     (p2_tg_bl_mode),                  \n      .data_mode_i                   (p2_tg_data_mode),                  \n      .mode_load_i                   (p2_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p2_tg_fixed_bl),                     \n      .fixed_instr_i                 (p2_tg_fixed_instr),                     \n      .fixed_addr_i                  (p2_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p2_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p2_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p2_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p2_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p2_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p2_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p2_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p2_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p2_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p2_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p2_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p2_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p2_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p2_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p2_error),\n      .error_status                  (p2_error_status),\n      .cmp_data                      (p2_cmp_data),            \n      .cmp_data_valid                (p2_cmp_data_valid),                  \n      .cmp_error                     (p2_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT2_NO_TG\n      assign p2_error          = 'b0;\n      assign p2_error_status   = 'b0;\n      assign p2_cmp_data       = 'b0;\n      assign p2_cmp_data_valid = 'b0;\n      assign p2_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[3] == 1'b1) \n   begin : PORT3_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P3_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P3_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P3_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P3_DATA_MODE), \n      .PORT_MODE                     (C_P3_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p3\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p3_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p3_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p3_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p3_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p3_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p3_error),\n      .run_traffic_o                 (p3_tg_run_traffic),  \n      .start_addr_o                  (p3_tg_start_addr),\n      .end_addr_o                    (p3_tg_end_addr), \n      .cmd_seed_o                    (p3_tg_cmd_seed),  \n      .data_seed_o                   (p3_tg_data_seed), \n      .load_seed_o                   (p3_tg_load_seed), \n      .addr_mode_o                   (p3_tg_addr_mode), \n      .instr_mode_o                  (p3_tg_instr_mode), \n      .bl_mode_o                     (p3_tg_bl_mode), \n      .data_mode_o                   (p3_tg_data_mode), \n      .mode_load_o                   (p3_tg_mode_load), \n      .fixed_bl_o                    (p3_tg_fixed_bl), \n      .fixed_instr_o                 (p3_tg_fixed_instr), \n      .fixed_addr_o                  (p3_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P3_PORT_MODE),     \n      .DWIDTH                        (P3_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P3_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P3_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P3_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P3_END_ADDRESS)\n     )  \n   m_traffic_gen_p3 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p3_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p3_tg_start_addr),                  \n      .end_addr_i                    (p3_tg_end_addr),                  \n      .cmd_seed_i                    (p3_tg_cmd_seed),                  \n      .data_seed_i                   (p3_tg_data_seed),                  \n      .load_seed_i                   (p3_tg_load_seed),                \n      .addr_mode_i                   (p3_tg_addr_mode),                \n      .instr_mode_i                  (p3_tg_instr_mode),                  \n      .bl_mode_i                     (p3_tg_bl_mode),                  \n      .data_mode_i                   (p3_tg_data_mode),                  \n      .mode_load_i                   (p3_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p3_tg_fixed_bl),                     \n      .fixed_instr_i                 (p3_tg_fixed_instr),                     \n      .fixed_addr_i                  (p3_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p3_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p3_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p3_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p3_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p3_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p3_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p3_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p3_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p3_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p3_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p3_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p3_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p3_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p3_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p3_error),\n      .error_status                  (p3_error_status),\n      .cmp_data                      (p3_cmp_data),            \n      .cmp_data_valid                (p3_cmp_data_valid),                  \n      .cmp_error                     (p3_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT3_NO_TG\n      assign p3_error          = 'b0;\n      assign p3_error_status   = 'b0;\n      assign p3_cmp_data       = 'b0;\n      assign p3_cmp_data_valid = 'b0;\n      assign p3_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[4] == 1'b1) \n   begin : PORT4_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P4_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P4_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P4_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P4_DATA_MODE), \n      .PORT_MODE                     (C_P4_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p4\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p4_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p4_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p4_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p4_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p4_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p4_error),\n      .run_traffic_o                 (p4_tg_run_traffic),  \n      .start_addr_o                  (p4_tg_start_addr),\n      .end_addr_o                    (p4_tg_end_addr), \n      .cmd_seed_o                    (p4_tg_cmd_seed),  \n      .data_seed_o                   (p4_tg_data_seed), \n      .load_seed_o                   (p4_tg_load_seed), \n      .addr_mode_o                   (p4_tg_addr_mode), \n      .instr_mode_o                  (p4_tg_instr_mode), \n      .bl_mode_o                     (p4_tg_bl_mode), \n      .data_mode_o                   (p4_tg_data_mode), \n      .mode_load_o                   (p4_tg_mode_load), \n      .fixed_bl_o                    (p4_tg_fixed_bl), \n      .fixed_instr_o                 (p4_tg_fixed_instr), \n      .fixed_addr_o                  (p4_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P4_PORT_MODE),     \n      .DWIDTH                        (P4_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P4_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P4_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P4_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P4_END_ADDRESS)\n     )  \n   m_traffic_gen_p4 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p4_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p4_tg_start_addr),                  \n      .end_addr_i                    (p4_tg_end_addr),                  \n      .cmd_seed_i                    (p4_tg_cmd_seed),                  \n      .data_seed_i                   (p4_tg_data_seed),                  \n      .load_seed_i                   (p4_tg_load_seed),                \n      .addr_mode_i                   (p4_tg_addr_mode),                \n      .instr_mode_i                  (p4_tg_instr_mode),                  \n      .bl_mode_i                     (p4_tg_bl_mode),                  \n      .data_mode_i                   (p4_tg_data_mode),                  \n      .mode_load_i                   (p4_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p4_tg_fixed_bl),                     \n      .fixed_instr_i                 (p4_tg_fixed_instr),                     \n      .fixed_addr_i                  (p4_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p4_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p4_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p4_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p4_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p4_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p4_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p4_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p4_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p4_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p4_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p4_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p4_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p4_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p4_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p4_error),\n      .error_status                  (p4_error_status),\n      .cmp_data                      (p4_cmp_data),            \n      .cmp_data_valid                (p4_cmp_data_valid),                  \n      .cmp_error                     (p4_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT4_NO_TG\n      assign p4_error          = 'b0;\n      assign p4_error_status   = 'b0;\n      assign p4_cmp_data       = 'b0;\n      assign p4_cmp_data_valid = 'b0;\n      assign p4_cmp_error      = 'b0;\n   end   \nendgenerate\n\n\n\n\ngenerate\n   if (C_PORT_ENABLE[5] == 1'b1) \n   begin : PORT5_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P5_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P5_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P5_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P5_DATA_MODE), \n      .PORT_MODE                     (C_P5_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p5\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p5_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p5_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p5_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p5_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p5_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p5_error),\n      .run_traffic_o                 (p5_tg_run_traffic),  \n      .start_addr_o                  (p5_tg_start_addr),\n      .end_addr_o                    (p5_tg_end_addr), \n      .cmd_seed_o                    (p5_tg_cmd_seed),  \n      .data_seed_o                   (p5_tg_data_seed), \n      .load_seed_o                   (p5_tg_load_seed), \n      .addr_mode_o                   (p5_tg_addr_mode), \n      .instr_mode_o                  (p5_tg_instr_mode), \n      .bl_mode_o                     (p5_tg_bl_mode), \n      .data_mode_o                   (p5_tg_data_mode), \n      .mode_load_o                   (p5_tg_mode_load), \n      .fixed_bl_o                    (p5_tg_fixed_bl), \n      .fixed_instr_o                 (p5_tg_fixed_instr), \n      .fixed_addr_o                  (p5_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P5_PORT_MODE),     \n      .DWIDTH                        (P5_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P5_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P5_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P5_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P5_END_ADDRESS)\n     )  \n   m_traffic_gen_p5 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p5_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p5_tg_start_addr),                  \n      .end_addr_i                    (p5_tg_end_addr),                  \n      .cmd_seed_i                    (p5_tg_cmd_seed),                  \n      .data_seed_i                   (p5_tg_data_seed),                  \n      .load_seed_i                   (p5_tg_load_seed),                \n      .addr_mode_i                   (p5_tg_addr_mode),                \n      .instr_mode_i                  (p5_tg_instr_mode),                  \n      .bl_mode_i                     (p5_tg_bl_mode),                  \n      .data_mode_i                   (p5_tg_data_mode),                  \n      .mode_load_i                   (p5_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p5_tg_fixed_bl),                     \n      .fixed_instr_i                 (p5_tg_fixed_instr),                     \n      .fixed_addr_i                  (p5_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p5_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p5_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p5_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p5_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p5_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p5_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p5_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p5_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p5_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p5_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p5_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p5_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p5_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p5_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p5_error),\n      .error_status                  (p5_error_status),\n      .cmp_data                      (p5_cmp_data),            \n      .cmp_data_valid                (p5_cmp_data_valid),                  \n      .cmp_error                     (p5_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );\n   end\n   else begin: PORT5_NO_TG\n      assign p5_error          = 'b0;\n      assign p5_error_status   = 'b0;\n      assign p5_cmp_data       = 'b0;\n      assign p5_cmp_data_valid = 'b0;\n      assign p5_cmp_error      = 'b0;\n   end   \nendgenerate    \n\n\n\n\ngenerate\nif (C_PORT_ENABLE[2] == 1'b1) begin: P2_cmd_field_mapping\n\n   if (C_P2_PORT_MODE == \"RD_MODE\") begin: RD_P2_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P2_equal_P0_cmd_field\n         assign p2_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P2_equal_P1_cmd_field\n         assign p2_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\"))  begin: RD_P2_equal_P3_cmd_field\n         assign p2_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P2_equal_P4_cmd_field\n         assign p2_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P2_equal_P5_cmd_field\n         assign p2_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P2_equal_P2_cmd_field\n         assign p2_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P2_cmd_field_mapping\n      assign p2_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n      assign p2_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n      assign p2_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n      assign p2_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n      assign p2_mcb_wr_en_sig           = p2_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[3] == 1'b1) begin: P3_cmd_field_mapping\n\n   if (C_P3_PORT_MODE == \"RD_MODE\") begin: RD_P3_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P3_equal_P0_cmd_field\n         assign p3_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P3_equal_P1_cmd_field\n         assign p3_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P3_equal_P2_cmd_field\n         assign p3_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P3_equal_P4_cmd_field\n         assign p3_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P3_equal_P5_cmd_field\n         assign p3_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P3_equal_P3_cmd_field\n         assign p3_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P3_cmd_field_mapping\n      assign p3_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n      assign p3_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n      assign p3_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n      assign p3_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n      assign p3_mcb_wr_en_sig           = p3_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[4] == 1'b1) begin: P4_cmd_field_mapping\n\n   if (C_P4_PORT_MODE == \"RD_MODE\") begin: RD_P4_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P4_equal_P0_cmd_field\n         assign p4_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P4_equal_P1_cmd_field\n         assign p4_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P4_equal_P2_cmd_field\n         assign p4_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\")) begin: RD_P4_equal_P3_cmd_field\n         assign p4_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P4_equal_P5_cmd_field\n         assign p4_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P4_equal_P4_cmd_field\n         assign p4_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P4_cmd_field_mapping\n      assign p4_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n      assign p4_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n      assign p4_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n      assign p4_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n      assign p4_mcb_wr_en_sig           = p4_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[5] == 1'b1) begin: P5_cmd_field_mapping\n\n   if (C_P5_PORT_MODE == \"RD_MODE\") begin: RD_P5_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P5_equal_P0_cmd_field\n         assign p5_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P5_equal_P1_cmd_field\n         assign p5_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P5_equal_P2_cmd_field\n         assign p5_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\")) begin: RD_P5_equal_P3_cmd_field\n         assign p5_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P5_equal_P4_cmd_field\n         assign p5_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\n        else begin: RD_P5_equal_P5_cmd_field\n         assign p5_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P5_cmd_field_mapping\n      assign p5_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n      assign p5_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n      assign p5_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n      assign p5_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n      assign p5_mcb_wr_en_sig           = p5_mcb_wr_en;\n   end\nend \nendgenerate\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: memc_tb_top. Module specification: This module serves as a testbench top-level for a memory controller, supporting up to 6 ports with configurable modes (read or write). It instantiates and connects multiple traffic generators (TGs) for different ports, manages port configurations, and handles command and data signals for read and write operations. The module features input ports for clock, reset, calibration status, VIO control signals, and various status signals from the memory controller for each port. Output ports include command and data signals to control the memory controller, as well as comparison data, error flags, and error status for each port. Internal signals are used to control and monitor the traffic generators for each port, including run traffic, address ranges, seeds, and mode settings. The module is structured with generate blocks for each port, instantiating init_mem_pattern_ctr and mcb_traffic_gen sub-modules to handle"
                }
            ]
        }
    ]
}