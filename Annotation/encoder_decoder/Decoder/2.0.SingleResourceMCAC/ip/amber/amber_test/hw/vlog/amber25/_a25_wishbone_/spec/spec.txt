Module name: a25_wishbone. Module specification: The `a25_wishbone` module is designed to act as a multiplexer or arbitrator for Wishbone bus transactions, interfacing with three different ports to manage their access to the bus. It carefully controls and sequences the handling of bus requests, data, addresses, and acknowledgments based on the state of the bus and validity of requests. The module features several input ports such as `clk` for clock input, `reset` for initializing the module, `scan_enable` and `test_mode` for test configurations, alongside `i_portX_req`, `i_portX_write`, `i_portX_wdata`, `i_portX_be`, and `i_portX_addr` for handling requests, write operations, data, byte enable, and address specifics from each port. Output ports include acknowledgment `o_portX_ack` and read data `o_portX_rdata` to each port, and signals like `o_wb_adr`, `o_wb_sel`, `o_wb_we`, `o_wb_dat`, `o_wb_cyc`, and `o_wb_stb` to manage the interfacing with the Wishbone bus. Internal signals such as `wbuf_valid`, `wbuf_accepted`, `wbuf_write`, `wbuf_wdata`, `wbuf_be`, `wbuf_addr`, `wbuf_rdata_valid`, `new_access`, and `serving_port` are used to manage the transaction buffers, indicate their status, control data flow, and select which port is currently being served. The code is organized into sections where instances of `a25_wishbone_buf` for each port handle the buffering and transfer of requests and data, and control logic is implemented in the main module to manage bus accesses and response to the ports based on bus availability and transaction completion. This detailed setup ensures efficient management of multiple data requests and robust handling of read/write operations with the Wishbone bus.