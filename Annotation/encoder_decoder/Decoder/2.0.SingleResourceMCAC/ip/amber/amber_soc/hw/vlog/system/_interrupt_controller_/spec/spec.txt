Module name: interrupt_controller. Module specification: The `interrupt_controller` is a Verilog module designed to manage various hardware interrupts within a system, interfacing through a Wishbone bus. Inputs, including `i_clk` (the system clock), address (`i_wb_adr`), selection (`i_wb_sel`), data (`i_wb_dat`), and control signals (`i_wb_we`, `i_wb_cyc`, `i_wb_stb`) from the Wishbone master, are utilized to conduct read/write operations. Additional interrupt signals are received from peripherals such as UARTs and Ethernet MAC. The module produces outputs `o_wb_dat`, `o_wb_ack`, `o_wb_err` for data transfer acknowledgments and error signaling, along with `o_irq` and `o_firq` for interrupt requests. Internally, the module uses registers like `irq0_enable_reg` and `firq0_enable_reg` for managing interrupt enable state, and signals like `irq_0` and `firq_0` to aggregate interrupts. The primary blocks within the code handle data alignment for different bus widths, register and interrupt management based on address-mapped read/write operations, data preparation for bus transactions, and interrupt signal generation. The code is structured with an initial declaration of ports and parameters, followed by signal and register definitions, assignments for managing read and write operations, and always blocks for updating data based on bus transactions and clock edges. Additionally, depending on the compile-time flag `AMBER_IC_DEBUG`, there are debugging messages that log register access events. This modular and annotated structure allows for effective management and scaling of interrupt handling operations in complex hardware systems.