Module name: boot_mem128. 
Module specification: The 'boot_mem128' module is a memory management unit interfacing with a Wishbone bus, primarily designed to manage read and write operations to a memory block with a configurable data and address width. It includes input ports such as `clk` for clock synchronization, `reset` for internal state resets, various `scan_in` and `scan_out` for test purposes, and `i_wb_*` signals for interfacing with the Wishbone bus which include address, data, and control signals. The output ports include `o_wb_dat` for output data, `o_wb_ack` for transaction acknowledgement, and `o_wb_err` for error signaling in memory operations. Internally, the module utilizes signals like `start_write` and `start_read` to initiate memory operations, `read_data` and `write_data` for holding the data being transferred, and `byte_enable` and `address` for selective memory access and location addressing. The module is structured into blocks handling the initialization and conditional compilation for debug features (`AMBER_WISHBONE_DEBUG`), memory operation initiation, data and address assignment, and memory hardware instantiation (`generic_sram_byte_en`). Additionally, it includes conditional generation of memory blocks or the use of parameterized memory models depending on compilation flags. These elements collectively enhance the moduleâ€™s utility and flexibility in embedded hardware design tasks, supporting both test and operational modes efficiently.