{
    "spec": "Module name: system. Module specification: The system module is a top-level design for a system-on-chip (SoC) that integrates various components including an Amber processor core, memory controllers, UART interfaces, Ethernet MAC, timers, and interrupt controllers using a Wishbone bus architecture. It handles clock generation, reset management, and interfaces with external DDR3 memory and Ethernet PHY. The module has input ports for board reset, clocks, UART, and Ethernet signals, and output ports for UART, DDR3 memory, Ethernet, and LEDs. Internal signals include system clock, reset, and various interrupt and control signals. The module is organized into several blocks: clock and reset management, Amber core, Ethernet interface, boot memory, UART controllers, test module, timer module, interrupt controller, DDR3 memory interface (for Xilinx FPGAs), and a",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: system\n\nExplanation: This module represents the top-level design of a system-on-chip (SoC) that includes various components such as a processor core (Amber), memory controllers, UART interfaces, Ethernet MAC, timers, and interrupt controllers. It integrates these components using a Wishbone bus architecture for communication. The module handles clock generation, reset management, and interfaces with external DDR3 memory and Ethernet PHY. It also includes test and debug functionalities. The system is designed to be configurable for different FPGA platforms, with specific implementations for Xilinx Spartan-6 FPGAs."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nbrd_rst, brd_clk_n, brd_clk_p, i_uart0_rts, i_uart0_tx, mtx_clk_pad_i, mrx_clk_pad_i, mrxd_pad_i, mrxdv_pad_i, mrxerr_pad_i, mcoll_pad_i, mcrs_pad_i.\n\nExplanation:\n- brd_rst: Board reset signal\n- brd_clk_n, brd_clk_p: Differential board clock inputs\n- i_uart0_rts, i_uart0_tx: UART0 input signals (RTS and TX)\n- mtx_clk_pad_i, mrx_clk_pad_i: Ethernet MAC transmit and receive clock inputs\n- mrxd_pad_i: Ethernet MAC receive data input\n- mrxdv_pad_i, mrxerr_pad_i: Ethernet MAC receive data valid and error inputs\n- mcoll_pad_i, mcrs_pad_i: Ethernet MAC collision and carrier sense inputs\n\nOutput ports:\no_uart0_rx, o_uart0_cts, ddr3_addr, ddr3_ba, ddr3_ras_n, ddr3_cas_n, ddr3_we_n, ddr3_odt, ddr3_reset_n, ddr3_cke, ddr3_dm, ddr3_ck_p, ddr3_ck_n, mtxd_pad_o, mtxen_pad_o, mtxerr_pad_o, mdc_pad_o, phy_reset_n, led.\n\nExplanation:\n- o_uart0_rx, o_uart0_cts: UART0 output signals (RX and CTS)\n- ddr3_* signals: DDR3 memory interface outputs\n- mtxd_pad_o, mtxen_pad_o, mtxerr_pad_o: Ethernet MAC transmit data, enable, and error outputs\n- mdc_pad_o: Ethernet MAC MDC clock output\n- phy_reset_n: Ethernet PHY reset output\n- led: LED outputs for debugging or status indication\n\nNote: There are also inout ports for DDR3 (ddr3_dq, ddr3_dqs_p, ddr3_dqs_n) and Ethernet (md_pad_io) which serve as bidirectional data lines."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\nsys_clk, sys_rst, clk_200, phy_init_done, test_mem_ctrl, system_rdy, amber_irq, amber_firq, ethmac_int, test_reg_irq, test_reg_firq, uart0_int, uart1_int, timer_int, md_pad_i, md_pad_o, md_padoe_o.\n\nExplanation:\n- sys_clk: System clock signal generated from input clocks\n- sys_rst: System reset signal\n- clk_200: 200 MHz clock signal for DDR3 memory controller\n- phy_init_done: Indicates when the DDR3 PHY initialization is complete\n- test_mem_ctrl: Control signal for test memory module\n- system_rdy: Indicates when the entire system is ready (PHY initialized and not in reset)\n- amber_irq, amber_firq: Interrupt and fast interrupt signals for the Amber processor core\n- ethmac_int: Interrupt signal from Ethernet MAC\n- test_reg_irq, test_reg_firq: Interrupt signals from test register module\n- uart0_int, uart1_int: Interrupt signals from UART modules\n- timer_int: Interrupt signal from timer module\n- md_pad_i, md_pad_o, md_padoe_o: Ethernet MDIO interface signals (input, output, and output enable)\n\nThese internal signals are used for system control, synchronization, interrupt handling, and interfacing between different modules within the SoC design."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule system\n(\ninput                       brd_rst,\ninput                       brd_clk_n,\ninput                       brd_clk_p,\n\n\n\ninput                       i_uart0_rts,\noutput                      o_uart0_rx,\noutput                      o_uart0_cts,\ninput                       i_uart0_tx,\n\n\ninout  [15:0]               ddr3_dq,\noutput [12:0]               ddr3_addr,\noutput [2:0]                ddr3_ba,\noutput                      ddr3_ras_n,\noutput                      ddr3_cas_n,\noutput                      ddr3_we_n,\noutput                      ddr3_odt,\noutput                      ddr3_reset_n,\noutput                      ddr3_cke,\noutput [1:0]                ddr3_dm,\ninout  [1:0]                ddr3_dqs_p,\ninout  [1:0]                ddr3_dqs_n,\noutput                      ddr3_ck_p,\noutput                      ddr3_ck_n,\n\n`ifdef XILINX_SPARTAN6_FPGA\ninout                       mcb3_rzq,\n`endif\n\n\n\ninput                       mtx_clk_pad_i,\noutput  [3:0]               mtxd_pad_o,\noutput                      mtxen_pad_o,\noutput                      mtxerr_pad_o,\ninput                       mrx_clk_pad_i,\ninput   [3:0]               mrxd_pad_i,\ninput                       mrxdv_pad_i,\ninput                       mrxerr_pad_i,\ninput                       mcoll_pad_i,\ninput                       mcrs_pad_i,\ninout                       md_pad_io,\noutput                      mdc_pad_o,\noutput                      phy_reset_n,\n\noutput  [3:0]               led\n);\n\n\nwire            sys_clk;    \nwire            sys_rst;    \nwire            clk_200;    \n\n\n\n\n\n`ifdef XILINX_SPARTAN6_FPGA\nwire            c3_p0_cmd_en;\nwire  [2:0]     c3_p0_cmd_instr;\nwire  [29:0]    c3_p0_cmd_byte_addr;\nwire            c3_p0_wr_en;\nwire  [15:0]    c3_p0_wr_mask;\nwire  [127:0]   c3_p0_wr_data;\nwire  [127:0]   c3_p0_rd_data;\nwire            c3_p0_rd_empty;\nwire            c3_p0_cmd_full;\nwire            c3_p0_wr_full;\n`endif\n\nwire            phy_init_done;\nwire            test_mem_ctrl;\nwire            system_rdy;\n\n\n\n\n\nwire            md_pad_i;\nwire            md_pad_o;\nwire            md_padoe_o;\n\n\n\n\n\nlocalparam WB_MASTERS = 2;\nlocalparam WB_SLAVES  = 9;\n\n`ifdef AMBER_A25_CORE\nlocalparam WB_DWIDTH  = 128;\nlocalparam WB_SWIDTH  = 16;\n`else\nlocalparam WB_DWIDTH  = 32;\nlocalparam WB_SWIDTH  = 4;\n`endif\n\n\n\nwire      [31:0]            m_wb_adr      [WB_MASTERS-1:0];\nwire      [WB_SWIDTH-1:0]   m_wb_sel      [WB_MASTERS-1:0];\nwire      [WB_MASTERS-1:0]  m_wb_we                       ;\nwire      [WB_DWIDTH-1:0]   m_wb_dat_w    [WB_MASTERS-1:0];\nwire      [WB_DWIDTH-1:0]   m_wb_dat_r    [WB_MASTERS-1:0];\nwire      [WB_MASTERS-1:0]  m_wb_cyc                      ;\nwire      [WB_MASTERS-1:0]  m_wb_stb                      ;\nwire      [WB_MASTERS-1:0]  m_wb_ack                      ;\nwire      [WB_MASTERS-1:0]  m_wb_err                      ;\n\n\n\nwire      [31:0]            s_wb_adr      [WB_SLAVES-1:0];\nwire      [WB_SWIDTH-1:0]   s_wb_sel      [WB_SLAVES-1:0];\nwire      [WB_SLAVES-1:0]   s_wb_we                      ;\nwire      [WB_DWIDTH-1:0]   s_wb_dat_w    [WB_SLAVES-1:0];\nwire      [WB_DWIDTH-1:0]   s_wb_dat_r    [WB_SLAVES-1:0];\nwire      [WB_SLAVES-1:0]   s_wb_cyc                     ;\nwire      [WB_SLAVES-1:0]   s_wb_stb                     ;\nwire      [WB_SLAVES-1:0]   s_wb_ack                     ;\nwire      [WB_SLAVES-1:0]   s_wb_err                     ;\n\nwire      [31:0]            emm_wb_adr;\nwire      [3:0]             emm_wb_sel;\nwire                        emm_wb_we;\nwire      [31:0]            emm_wb_rdat;\nwire      [31:0]            emm_wb_wdat;\nwire                        emm_wb_cyc;\nwire                        emm_wb_stb;\nwire                        emm_wb_ack;\nwire                        emm_wb_err;\n\nwire      [31:0]            ems_wb_adr;\nwire      [3:0]             ems_wb_sel;\nwire                        ems_wb_we;\nwire      [31:0]            ems_wb_rdat;\nwire      [31:0]            ems_wb_wdat;\nwire                        ems_wb_cyc;\nwire                        ems_wb_stb;\nwire                        ems_wb_ack;\nwire                        ems_wb_err;\n\n\n\n\n\nwire                        amber_irq;\nwire                        amber_firq;\nwire                        ethmac_int;\nwire                        test_reg_irq;\nwire                        test_reg_firq;\nwire                        uart0_int;\nwire                        uart1_int;\nwire      [2:0]             timer_int;\n\n\n\n\n\nclocks_resets u_clocks_resets (\n    .i_brd_rst          ( brd_rst           ),\n    .i_brd_clk_n        ( brd_clk_n         ),\n    .i_brd_clk_p        ( brd_clk_p         ),\n    .i_ddr_calib_done   ( phy_init_done     ),\n    .o_sys_rst          ( sys_rst           ),\n    .o_sys_clk          ( sys_clk           ),\n    .o_clk_200          ( clk_200           )\n);\n\n\n\n\n\n`ifdef AMBER_A25_CORE\na25_core u_amber (\n`else\na23_core u_amber (\n`endif\n    .i_clk          ( sys_clk         ),\n`ifdef AMBER_A25_CORE\n    .i_reset        ( sys_rst         ),\n`endif\n\n    .i_irq          ( amber_irq       ),\n    .i_firq         ( amber_firq      ),\n\n    .i_system_rdy   ( system_rdy      ),\n\n    .o_wb_adr       ( m_wb_adr  [1]   ),\n    .o_wb_sel       ( m_wb_sel  [1]   ),\n    .o_wb_we        ( m_wb_we   [1]   ),\n    .i_wb_dat       ( m_wb_dat_r[1]   ),\n    .o_wb_dat       ( m_wb_dat_w[1]   ),\n    .o_wb_cyc       ( m_wb_cyc  [1]   ),\n    .o_wb_stb       ( m_wb_stb  [1]   ),\n    .i_wb_ack       ( m_wb_ack  [1]   ),\n    .i_wb_err       ( m_wb_err  [1]   )\n);\n\n\n\n\n\neth_top u_eth_top (\n    .wb_clk_i                   ( sys_clk                ),\n    .wb_rst_i                   ( sys_rst                ),\n\n    \n    .wb_adr_i                   ( ems_wb_adr [11:2]      ),\n    .wb_sel_i                   ( ems_wb_sel             ),\n    .wb_we_i                    ( ems_wb_we              ),\n    .wb_cyc_i                   ( ems_wb_cyc             ),\n    .wb_stb_i                   ( ems_wb_stb             ),\n    .wb_ack_o                   ( ems_wb_ack             ),\n    .wb_dat_i                   ( ems_wb_wdat            ),\n    .wb_dat_o                   ( ems_wb_rdat            ),\n    .wb_err_o                   ( ems_wb_err             ),\n\n    \n    .m_wb_adr_o                 ( emm_wb_adr             ),\n    .m_wb_sel_o                 ( emm_wb_sel             ),\n    .m_wb_we_o                  ( emm_wb_we              ),\n    .m_wb_dat_i                 ( emm_wb_rdat            ),\n    .m_wb_dat_o                 ( emm_wb_wdat            ),\n    .m_wb_cyc_o                 ( emm_wb_cyc             ),\n    .m_wb_stb_o                 ( emm_wb_stb             ),\n    .m_wb_ack_i                 ( emm_wb_ack             ),\n    .m_wb_err_i                 ( emm_wb_err             ),\n\n    \n    .mtx_clk_pad_i              ( mtx_clk_pad_i          ),\n    .mtxd_pad_o                 ( mtxd_pad_o             ),\n    .mtxen_pad_o                ( mtxen_pad_o            ),\n    .mtxerr_pad_o               ( mtxerr_pad_o           ),\n    .mrx_clk_pad_i              ( mrx_clk_pad_i          ),\n    .mrxd_pad_i                 ( mrxd_pad_i             ),\n    .mrxdv_pad_i                ( mrxdv_pad_i            ),\n    .mrxerr_pad_i               ( mrxerr_pad_i           ),\n    .mcoll_pad_i                ( mcoll_pad_i            ),\n    .mcrs_pad_i                 ( mcrs_pad_i             ),\n    .md_pad_i                   ( md_pad_i               ),\n    .mdc_pad_o                  ( mdc_pad_o              ),\n    .md_pad_o                   ( md_pad_o               ),\n    .md_padoe_o                 ( md_padoe_o             ),\n\n    \n    .int_o                      ( ethmac_int             )\n);\n\n\n\n\n\n`ifdef XILINX_FPGA\nIOBUF u_iobuf (\n`else\ngeneric_iobuf u_iobuf (\n`endif\n    .O                          ( md_pad_i              ),\n    .IO                         ( md_pad_io             ),\n    .I                          ( md_pad_o              ),\n    \n    .T                          ( ~md_padoe_o           )\n);\n\n\n\nassign system_rdy = phy_init_done && !sys_rst;\n\n\n\n\n\ngenerate\nif (WB_DWIDTH == 32) begin : boot_mem32\n    boot_mem32 u_boot_mem (\n        .i_wb_clk               ( sys_clk         ),\n        .i_wb_adr               ( s_wb_adr  [1]   ),\n        .i_wb_sel               ( s_wb_sel  [1]   ),\n        .i_wb_we                ( s_wb_we   [1]   ),\n        .o_wb_dat               ( s_wb_dat_r[1]   ),\n        .i_wb_dat               ( s_wb_dat_w[1]   ),\n        .i_wb_cyc               ( s_wb_cyc  [1]   ),\n        .i_wb_stb               ( s_wb_stb  [1]   ),\n        .o_wb_ack               ( s_wb_ack  [1]   ),\n        .o_wb_err               ( s_wb_err  [1]   )\n    );\nend\nelse begin : boot_mem128\n    boot_mem128 u_boot_mem (\n        .i_wb_clk               ( sys_clk         ),\n        .i_wb_adr               ( s_wb_adr  [1]   ),\n        .i_wb_sel               ( s_wb_sel  [1]   ),\n        .i_wb_we                ( s_wb_we   [1]   ),\n        .o_wb_dat               ( s_wb_dat_r[1]   ),\n        .i_wb_dat               ( s_wb_dat_w[1]   ),\n        .i_wb_cyc               ( s_wb_cyc  [1]   ),\n        .i_wb_stb               ( s_wb_stb  [1]   ),\n        .o_wb_ack               ( s_wb_ack  [1]   ),\n        .o_wb_err               ( s_wb_err  [1]   )\n    );\nend\nendgenerate\n\n\n\n\n\nuart  #(\n    .WB_DWIDTH              ( WB_DWIDTH       ),\n    .WB_SWIDTH              ( WB_SWIDTH       )\n    )\nu_uart0 (\n    .i_clk                  ( sys_clk        ),\n\n    .o_uart_int             ( uart0_int      ),\n\n    .i_uart_cts_n           ( i_uart0_rts    ),\n    .o_uart_txd             ( o_uart0_rx     ),\n    .o_uart_rts_n           ( o_uart0_cts    ),\n    .i_uart_rxd             ( i_uart0_tx     ),\n\n    .i_wb_adr               ( s_wb_adr  [3]  ),\n    .i_wb_sel               ( s_wb_sel  [3]  ),\n    .i_wb_we                ( s_wb_we   [3]  ),\n    .o_wb_dat               ( s_wb_dat_r[3]  ),\n    .i_wb_dat               ( s_wb_dat_w[3]  ),\n    .i_wb_cyc               ( s_wb_cyc  [3]  ),\n    .i_wb_stb               ( s_wb_stb  [3]  ),\n    .o_wb_ack               ( s_wb_ack  [3]  ),\n    .o_wb_err               ( s_wb_err  [3]  )\n);\n\n\n\n\n\nuart  #(\n    .WB_DWIDTH              ( WB_DWIDTH       ),\n    .WB_SWIDTH              ( WB_SWIDTH       )\n    )\nu_uart1 (\n    .i_clk                  ( sys_clk        ),\n\n    .o_uart_int             ( uart1_int      ),\n\n    \n    \n    .i_uart_cts_n           ( 1'd1           ),\n    .o_uart_txd             (                ),\n    .o_uart_rts_n           (                ),\n    .i_uart_rxd             ( 1'd1           ),\n\n    .i_wb_adr               ( s_wb_adr  [4]  ),\n    .i_wb_sel               ( s_wb_sel  [4]  ),\n    .i_wb_we                ( s_wb_we   [4]  ),\n    .o_wb_dat               ( s_wb_dat_r[4]  ),\n    .i_wb_dat               ( s_wb_dat_w[4]  ),\n    .i_wb_cyc               ( s_wb_cyc  [4]  ),\n    .i_wb_stb               ( s_wb_stb  [4]  ),\n    .o_wb_ack               ( s_wb_ack  [4]  ),\n    .o_wb_err               ( s_wb_err  [4]  )\n);\n\n\n\n\n\n\ntest_module #(\n    .WB_DWIDTH              ( WB_DWIDTH      ),\n    .WB_SWIDTH              ( WB_SWIDTH      )\n    )\nu_test_module (\n    .i_clk                  ( sys_clk        ),\n\n    .o_irq                  ( test_reg_irq   ),\n    .o_firq                 ( test_reg_firq  ),\n    .o_mem_ctrl             ( test_mem_ctrl  ),\n    .i_wb_adr               ( s_wb_adr  [5]  ),\n    .i_wb_sel               ( s_wb_sel  [5]  ),\n    .i_wb_we                ( s_wb_we   [5]  ),\n    .o_wb_dat               ( s_wb_dat_r[5]  ),\n    .i_wb_dat               ( s_wb_dat_w[5]  ),\n    .i_wb_cyc               ( s_wb_cyc  [5]  ),\n    .i_wb_stb               ( s_wb_stb  [5]  ),\n    .o_wb_ack               ( s_wb_ack  [5]  ),\n    .o_wb_err               ( s_wb_err  [5]  ),\n    .o_led                  ( led            ),\n    .o_phy_rst_n            ( phy_reset_n    )\n);\n\n\n\n\n\ntimer_module  #(\n    .WB_DWIDTH              ( WB_DWIDTH      ),\n    .WB_SWIDTH              ( WB_SWIDTH      )\n    )\nu_timer_module (\n    .i_clk                  ( sys_clk        ),\n\n    \n    .o_timer_int            ( timer_int      ),\n\n    \n    .i_wb_adr               ( s_wb_adr  [6]  ),\n    .i_wb_sel               ( s_wb_sel  [6]  ),\n    .i_wb_we                ( s_wb_we   [6]  ),\n    .o_wb_dat               ( s_wb_dat_r[6]  ),\n    .i_wb_dat               ( s_wb_dat_w[6]  ),\n    .i_wb_cyc               ( s_wb_cyc  [6]  ),\n    .i_wb_stb               ( s_wb_stb  [6]  ),\n    .o_wb_ack               ( s_wb_ack  [6]  ),\n    .o_wb_err               ( s_wb_err  [6]  )\n);\n\n\n\n\n\ninterrupt_controller  #(\n    .WB_DWIDTH              ( WB_DWIDTH      ),\n    .WB_SWIDTH              ( WB_SWIDTH      )\n    )\nu_interrupt_controller (\n    .i_clk                  ( sys_clk        ),\n\n    \n    .o_irq                  ( amber_irq      ),\n    .o_firq                 ( amber_firq     ),\n\n    \n    .i_uart0_int            ( uart0_int      ),\n    .i_uart1_int            ( uart1_int      ),\n    .i_ethmac_int           ( ethmac_int     ),\n    .i_test_reg_irq         ( test_reg_irq   ),\n    .i_test_reg_firq        ( test_reg_firq  ),\n    .i_tm_timer_int         ( timer_int      ),\n\n    \n    .i_wb_adr               ( s_wb_adr  [7]  ),\n    .i_wb_sel               ( s_wb_sel  [7]  ),\n    .i_wb_we                ( s_wb_we   [7]  ),\n    .o_wb_dat               ( s_wb_dat_r[7]  ),\n    .i_wb_dat               ( s_wb_dat_w[7]  ),\n    .i_wb_cyc               ( s_wb_cyc  [7]  ),\n    .i_wb_stb               ( s_wb_stb  [7]  ),\n    .o_wb_ack               ( s_wb_ack  [7]  ),\n    .o_wb_err               ( s_wb_err  [7]  )\n);\n\n\n\n\n`ifndef XILINX_FPGA\n    \n    \n    \n\n    assign phy_init_done = 1'd1;\n\n    main_mem #(\n                .WB_DWIDTH             ( WB_DWIDTH             ),\n                .WB_SWIDTH             ( WB_SWIDTH             )\n                )\n    u_main_mem (\n               .i_clk                  ( sys_clk               ),\n               .i_mem_ctrl             ( test_mem_ctrl         ),\n               .i_wb_adr               ( s_wb_adr  [2]         ),\n               .i_wb_sel               ( s_wb_sel  [2]         ),\n               .i_wb_we                ( s_wb_we   [2]         ),\n               .o_wb_dat               ( s_wb_dat_r[2]         ),\n               .i_wb_dat               ( s_wb_dat_w[2]         ),\n               .i_wb_cyc               ( s_wb_cyc  [2]         ),\n               .i_wb_stb               ( s_wb_stb  [2]         ),\n               .o_wb_ack               ( s_wb_ack  [2]         ),\n               .o_wb_err               ( s_wb_err  [2]         )\n            );\n\n`endif\n\n\n`ifdef XILINX_SPARTAN6_FPGA\n    \n    \n    \n    \n    wb_xs6_ddr3_bridge   #(\n        .WB_DWIDTH              ( WB_DWIDTH             ),\n        .WB_SWIDTH              ( WB_SWIDTH             )\n        )\n    u_wb_xs6_ddr3_bridge(\n        .i_clk                  ( sys_clk               ),\n\n        .o_cmd_en               ( c3_p0_cmd_en          ),\n        .o_cmd_instr            ( c3_p0_cmd_instr       ),\n        .o_cmd_byte_addr        ( c3_p0_cmd_byte_addr   ),\n        .i_cmd_full             ( c3_p0_cmd_full        ),\n        .i_wr_full              ( c3_p0_wr_full         ),\n        .o_wr_en                ( c3_p0_wr_en           ),\n        .o_wr_mask              ( c3_p0_wr_mask         ),\n        .o_wr_data              ( c3_p0_wr_data         ),\n        .i_rd_data              ( c3_p0_rd_data         ),\n        .i_rd_empty             ( c3_p0_rd_empty        ),\n\n        .i_mem_ctrl             ( test_mem_ctrl         ),\n        .i_wb_adr               ( s_wb_adr  [2]         ),\n        .i_wb_sel               ( s_wb_sel  [2]         ),\n        .i_wb_we                ( s_wb_we   [2]         ),\n        .o_wb_dat               ( s_wb_dat_r[2]         ),\n        .i_wb_dat               ( s_wb_dat_w[2]         ),\n        .i_wb_cyc               ( s_wb_cyc  [2]         ),\n        .i_wb_stb               ( s_wb_stb  [2]         ),\n        .o_wb_ack               ( s_wb_ack  [2]         ),\n        .o_wb_err               ( s_wb_err  [2]         )\n    );\n\n\n    \n    \n    \n    ddr3 u_ddr3  (\n\n                \n               .mcb3_dram_dq            ( ddr3_dq               ),\n               .mcb3_dram_a             ( ddr3_addr             ),\n               .mcb3_dram_ba            ( ddr3_ba               ),\n               .mcb3_dram_ras_n         ( ddr3_ras_n            ),\n               .mcb3_dram_cas_n         ( ddr3_cas_n            ),\n               .mcb3_dram_we_n          ( ddr3_we_n             ),\n               .mcb3_dram_odt           ( ddr3_odt              ),\n               .mcb3_dram_reset_n       ( ddr3_reset_n          ),\n               .mcb3_dram_cke           ( ddr3_cke              ),\n               .mcb3_dram_udm           ( ddr3_dm[1]            ),\n               .mcb3_dram_dm            ( ddr3_dm[0]            ),\n               .mcb3_rzq                ( mcb3_rzq              ),\n               .mcb3_dram_udqs          ( ddr3_dqs_p[1]         ),\n               .mcb3_dram_dqs           ( ddr3_dqs_p[0]         ),\n               .mcb3_dram_udqs_n        ( ddr3_dqs_n[1]         ),\n               .mcb3_dram_dqs_n         ( ddr3_dqs_n[0]         ),\n               .mcb3_dram_ck            ( ddr3_ck_p             ),\n               .mcb3_dram_ck_n          ( ddr3_ck_n             ),\n\n               .c3_sys_clk              ( clk_200               ),\n               .c3_sys_rst_i            ( brd_rst               ), \n               .c3_clk0                 (                       ),\n               .c3_rst0                 (                       ),\n               .c3_calib_done           ( phy_init_done         ),\n\n               .c3_p0_cmd_clk           ( sys_clk               ),\n\n               .c3_p0_cmd_en            ( c3_p0_cmd_en          ),\n               .c3_p0_cmd_instr         ( c3_p0_cmd_instr       ),\n               .c3_p0_cmd_bl            ( 6'd0                  ),\n               .c3_p0_cmd_byte_addr     ( c3_p0_cmd_byte_addr   ),\n               .c3_p0_cmd_empty         (                       ),\n               .c3_p0_cmd_full          ( c3_p0_cmd_full        ),\n\n               .c3_p0_wr_clk            ( sys_clk               ),\n\n               .c3_p0_wr_en             ( c3_p0_wr_en           ),\n               .c3_p0_wr_mask           ( c3_p0_wr_mask         ),\n               .c3_p0_wr_data           ( c3_p0_wr_data         ),\n               .c3_p0_wr_full           ( c3_p0_wr_full         ),\n               .c3_p0_wr_empty          (                       ),\n               .c3_p0_wr_count          (                       ),\n               .c3_p0_wr_underrun       (                       ),\n               .c3_p0_wr_error          (                       ),\n\n               .c3_p0_rd_clk            ( sys_clk               ),\n\n               .c3_p0_rd_en             ( 1'd1                  ),\n               .c3_p0_rd_data           ( c3_p0_rd_data         ),\n               .c3_p0_rd_full           (                       ),\n               .c3_p0_rd_empty          ( c3_p0_rd_empty        ),\n               .c3_p0_rd_count          (                       ),\n               .c3_p0_rd_overflow       (                       ),\n               .c3_p0_rd_error          (                       )\n       );\n`endif\n\n\n\n\n\n\nwishbone_arbiter #(\n    .WB_DWIDTH              ( WB_DWIDTH         ),\n    .WB_SWIDTH              ( WB_SWIDTH         )\n    )\nu_wishbone_arbiter (\n    .i_wb_clk               ( sys_clk           ),\n\n    \n    .i_m0_wb_adr            ( m_wb_adr   [0]    ),\n    .i_m0_wb_sel            ( m_wb_sel   [0]    ),\n    .i_m0_wb_we             ( m_wb_we    [0]    ),\n    .o_m0_wb_dat            ( m_wb_dat_r [0]    ),\n    .i_m0_wb_dat            ( m_wb_dat_w [0]    ),\n    .i_m0_wb_cyc            ( m_wb_cyc   [0]    ),\n    .i_m0_wb_stb            ( m_wb_stb   [0]    ),\n    .o_m0_wb_ack            ( m_wb_ack   [0]    ),\n    .o_m0_wb_err            ( m_wb_err   [0]    ),\n\n\n    \n    .i_m1_wb_adr            ( m_wb_adr   [1]    ),\n    .i_m1_wb_sel            ( m_wb_sel   [1]    ),\n    .i_m1_wb_we             ( m_wb_we    [1]    ),\n    .o_m1_wb_dat            ( m_wb_dat_r [1]    ),\n    .i_m1_wb_dat            ( m_wb_dat_w [1]    ),\n    .i_m1_wb_cyc            ( m_wb_cyc   [1]    ),\n    .i_m1_wb_stb            ( m_wb_stb   [1]    ),\n    .o_m1_wb_ack            ( m_wb_ack   [1]    ),\n    .o_m1_wb_err            ( m_wb_err   [1]    ),\n\n\n    \n    .o_s0_wb_adr            ( s_wb_adr   [0]    ),\n    .o_s0_wb_sel            ( s_wb_sel   [0]    ),\n    .o_s0_wb_we             ( s_wb_we    [0]    ),\n    .i_s0_wb_dat            ( s_wb_dat_r [0]    ),\n    .o_s0_wb_dat            ( s_wb_dat_w [0]    ),\n    .o_s0_wb_cyc            ( s_wb_cyc   [0]    ),\n    .o_s0_wb_stb            ( s_wb_stb   [0]    ),\n    .i_s0_wb_ack            ( s_wb_ack   [0]    ),\n    .i_s0_wb_err            ( s_wb_err   [0]    ),\n\n\n    \n    .o_s1_wb_adr            ( s_wb_adr   [1]    ),\n    .o_s1_wb_sel            ( s_wb_sel   [1]    ),\n    .o_s1_wb_we             ( s_wb_we    [1]    ),\n    .i_s1_wb_dat            ( s_wb_dat_r [1]    ),\n    .o_s1_wb_dat            ( s_wb_dat_w [1]    ),\n    .o_s1_wb_cyc            ( s_wb_cyc   [1]    ),\n    .o_s1_wb_stb            ( s_wb_stb   [1]    ),\n    .i_s1_wb_ack            ( s_wb_ack   [1]    ),\n    .i_s1_wb_err            ( s_wb_err   [1]    ),\n\n\n    \n    .o_s2_wb_adr            ( s_wb_adr   [2]    ),\n    .o_s2_wb_sel            ( s_wb_sel   [2]    ),\n    .o_s2_wb_we             ( s_wb_we    [2]    ),\n    .i_s2_wb_dat            ( s_wb_dat_r [2]    ),\n    .o_s2_wb_dat            ( s_wb_dat_w [2]    ),\n    .o_s2_wb_cyc            ( s_wb_cyc   [2]    ),\n    .o_s2_wb_stb            ( s_wb_stb   [2]    ),\n    .i_s2_wb_ack            ( s_wb_ack   [2]    ),\n    .i_s2_wb_err            ( s_wb_err   [2]    ),\n\n\n    \n    .o_s3_wb_adr            ( s_wb_adr   [3]    ),\n    .o_s3_wb_sel            ( s_wb_sel   [3]    ),\n    .o_s3_wb_we             ( s_wb_we    [3]    ),\n    .i_s3_wb_dat            ( s_wb_dat_r [3]    ),\n    .o_s3_wb_dat            ( s_wb_dat_w [3]    ),\n    .o_s3_wb_cyc            ( s_wb_cyc   [3]    ),\n    .o_s3_wb_stb            ( s_wb_stb   [3]    ),\n    .i_s3_wb_ack            ( s_wb_ack   [3]    ),\n    .i_s3_wb_err            ( s_wb_err   [3]    ),\n\n\n    \n    .o_s4_wb_adr            ( s_wb_adr   [4]    ),\n    .o_s4_wb_sel            ( s_wb_sel   [4]    ),\n    .o_s4_wb_we             ( s_wb_we    [4]    ),\n    .i_s4_wb_dat            ( s_wb_dat_r [4]    ),\n    .o_s4_wb_dat            ( s_wb_dat_w [4]    ),\n    .o_s4_wb_cyc            ( s_wb_cyc   [4]    ),\n    .o_s4_wb_stb            ( s_wb_stb   [4]    ),\n    .i_s4_wb_ack            ( s_wb_ack   [4]    ),\n    .i_s4_wb_err            ( s_wb_err   [4]    ),\n\n\n    \n    .o_s5_wb_adr            ( s_wb_adr   [5]    ),\n    .o_s5_wb_sel            ( s_wb_sel   [5]    ),\n    .o_s5_wb_we             ( s_wb_we    [5]    ),\n    .i_s5_wb_dat            ( s_wb_dat_r [5]    ),\n    .o_s5_wb_dat            ( s_wb_dat_w [5]    ),\n    .o_s5_wb_cyc            ( s_wb_cyc   [5]    ),\n    .o_s5_wb_stb            ( s_wb_stb   [5]    ),\n    .i_s5_wb_ack            ( s_wb_ack   [5]    ),\n    .i_s5_wb_err            ( s_wb_err   [5]    ),\n\n\n    \n    .o_s6_wb_adr            ( s_wb_adr   [6]    ),\n    .o_s6_wb_sel            ( s_wb_sel   [6]    ),\n    .o_s6_wb_we             ( s_wb_we    [6]    ),\n    .i_s6_wb_dat            ( s_wb_dat_r [6]    ),\n    .o_s6_wb_dat            ( s_wb_dat_w [6]    ),\n    .o_s6_wb_cyc            ( s_wb_cyc   [6]    ),\n    .o_s6_wb_stb            ( s_wb_stb   [6]    ),\n    .i_s6_wb_ack            ( s_wb_ack   [6]    ),\n    .i_s6_wb_err            ( s_wb_err   [6]    ),\n\n\n    \n    .o_s7_wb_adr            ( s_wb_adr   [7]    ),\n    .o_s7_wb_sel            ( s_wb_sel   [7]    ),\n    .o_s7_wb_we             ( s_wb_we    [7]    ),\n    .i_s7_wb_dat            ( s_wb_dat_r [7]    ),\n    .o_s7_wb_dat            ( s_wb_dat_w [7]    ),\n    .o_s7_wb_cyc            ( s_wb_cyc   [7]    ),\n    .o_s7_wb_stb            ( s_wb_stb   [7]    ),\n    .i_s7_wb_ack            ( s_wb_ack   [7]    ),\n    .i_s7_wb_err            ( s_wb_err   [7]    )\n    );\n\n\nethmac_wb #(\n    .WB_DWIDTH              ( WB_DWIDTH         ),\n    .WB_SWIDTH              ( WB_SWIDTH         )\n    )\nu_ethmac_wb (\n    \n    .o_m_wb_adr             ( m_wb_adr   [0]    ),\n    .o_m_wb_sel             ( m_wb_sel   [0]    ),\n    .o_m_wb_we              ( m_wb_we    [0]    ),\n    .i_m_wb_rdat            ( m_wb_dat_r [0]    ),\n    .o_m_wb_wdat            ( m_wb_dat_w [0]    ),\n    .o_m_wb_cyc             ( m_wb_cyc   [0]    ),\n    .o_m_wb_stb             ( m_wb_stb   [0]    ),\n    .i_m_wb_ack             ( m_wb_ack   [0]    ),\n    .i_m_wb_err             ( m_wb_err   [0]    ),\n\n    \n    .i_s_wb_adr             ( s_wb_adr   [0]    ),\n    .i_s_wb_sel             ( s_wb_sel   [0]    ),\n    .i_s_wb_we              ( s_wb_we    [0]    ),\n    .i_s_wb_cyc             ( s_wb_cyc   [0]    ),\n    .i_s_wb_stb             ( s_wb_stb   [0]    ),\n    .o_s_wb_ack             ( s_wb_ack   [0]    ),\n    .i_s_wb_wdat            ( s_wb_dat_w [0]    ),\n    .o_s_wb_rdat            ( s_wb_dat_r [0]    ),\n    .o_s_wb_err             ( s_wb_err   [0]    ),\n\n    \n    .i_m_wb_adr             ( emm_wb_adr        ),\n    .i_m_wb_sel             ( emm_wb_sel        ),\n    .i_m_wb_we              ( emm_wb_we         ),\n    .o_m_wb_rdat            ( emm_wb_rdat       ),\n    .i_m_wb_wdat            ( emm_wb_wdat       ),\n    .i_m_wb_cyc             ( emm_wb_cyc        ),\n    .i_m_wb_stb             ( emm_wb_stb        ),\n    .o_m_wb_ack             ( emm_wb_ack        ),\n    .o_m_wb_err             ( emm_wb_err        ),\n\n    \n    .o_s_wb_adr             ( ems_wb_adr        ),\n    .o_s_wb_sel             ( ems_wb_sel        ),\n    .o_s_wb_we              ( ems_wb_we         ),\n    .i_s_wb_rdat            ( ems_wb_rdat       ),\n    .o_s_wb_wdat            ( ems_wb_wdat       ),\n    .o_s_wb_cyc             ( ems_wb_cyc        ),\n    .o_s_wb_stb             ( ems_wb_stb        ),\n    .i_s_wb_ack             ( ems_wb_ack        ),\n    .i_s_wb_err             ( ems_wb_err        )\n);\n\n\n\n\nendmodule\n\n\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: system. Module specification: The system module is a top-level design for a system-on-chip (SoC) that integrates various components including an Amber processor core, memory controllers, UART interfaces, Ethernet MAC, timers, and interrupt controllers using a Wishbone bus architecture. It handles clock generation, reset management, and interfaces with external DDR3 memory and Ethernet PHY. The module has input ports for board reset, clocks, UART, and Ethernet signals, and output ports for UART, DDR3 memory, Ethernet, and LEDs. Internal signals include system clock, reset, and various interrupt and control signals. The module is organized into several blocks: clock and reset management, Amber core, Ethernet interface, boot memory, UART controllers, test module, timer module, interrupt controller, DDR3 memory interface (for Xilinx FPGAs), and a"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: system\n\nExplanation: This module represents the top-level design of a system-on-chip (SoC) that includes various components such as a processor core (Amber), memory controllers, UART interfaces, Ethernet MAC, timers, and interrupt controllers. It integrates these components using a Wishbone bus architecture for communication. The module handles clock generation, reset management, and interfaces with external DDR3 memory and Ethernet PHY. It also includes test and debug functionalities. The system is designed to be configurable for different FPGA platforms, with specific implementations for Xilinx Spartan-6 FPGAs."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nbrd_rst, brd_clk_n, brd_clk_p, i_uart0_rts, i_uart0_tx, mtx_clk_pad_i, mrx_clk_pad_i, mrxd_pad_i, mrxdv_pad_i, mrxerr_pad_i, mcoll_pad_i, mcrs_pad_i.\n\nExplanation:\n- brd_rst: Board reset signal\n- brd_clk_n, brd_clk_p: Differential board clock inputs\n- i_uart0_rts, i_uart0_tx: UART0 input signals (RTS and TX)\n- mtx_clk_pad_i, mrx_clk_pad_i: Ethernet MAC transmit and receive clock inputs\n- mrxd_pad_i: Ethernet MAC receive data input\n- mrxdv_pad_i, mrxerr_pad_i: Ethernet MAC receive data valid and error inputs\n- mcoll_pad_i, mcrs_pad_i: Ethernet MAC collision and carrier sense inputs\n\nOutput ports:\no_uart0_rx, o_uart0_cts, ddr3_addr, ddr3_ba, ddr3_ras_n, ddr3_cas_n, ddr3_we_n, ddr3_odt, ddr3_reset_n, ddr3_cke, ddr3_dm, ddr3_ck_p, ddr3_ck_n, mtxd_pad_o, mtxen_pad_o, mtxerr_pad_o, mdc_pad_o, phy_reset_n, led.\n\nExplanation:\n- o_uart0_rx, o_uart0_cts: UART0 output signals (RX and CTS)\n- ddr3_* signals: DDR3 memory interface outputs\n- mtxd_pad_o, mtxen_pad_o, mtxerr_pad_o: Ethernet MAC transmit data, enable, and error outputs\n- mdc_pad_o: Ethernet MAC MDC clock output\n- phy_reset_n: Ethernet PHY reset output\n- led: LED outputs for debugging or status indication\n\nNote: There are also inout ports for DDR3 (ddr3_dq, ddr3_dqs_p, ddr3_dqs_n) and Ethernet (md_pad_io) which serve as bidirectional data lines."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\nsys_clk, sys_rst, clk_200, phy_init_done, test_mem_ctrl, system_rdy, amber_irq, amber_firq, ethmac_int, test_reg_irq, test_reg_firq, uart0_int, uart1_int, timer_int, md_pad_i, md_pad_o, md_padoe_o.\n\nExplanation:\n- sys_clk: System clock signal generated from input clocks\n- sys_rst: System reset signal\n- clk_200: 200 MHz clock signal for DDR3 memory controller\n- phy_init_done: Indicates when the DDR3 PHY initialization is complete\n- test_mem_ctrl: Control signal for test memory module\n- system_rdy: Indicates when the entire system is ready (PHY initialized and not in reset)\n- amber_irq, amber_firq: Interrupt and fast interrupt signals for the Amber processor core\n- ethmac_int: Interrupt signal from Ethernet MAC\n- test_reg_irq, test_reg_firq: Interrupt signals from test register module\n- uart0_int, uart1_int: Interrupt signals from UART modules\n- timer_int: Interrupt signal from timer module\n- md_pad_i, md_pad_o, md_padoe_o: Ethernet MDIO interface signals (input, output, and output enable)\n\nThese internal signals are used for system control, synchronization, interrupt handling, and interfacing between different modules within the SoC design."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule system\n(\ninput                       brd_rst,\ninput                       brd_clk_n,\ninput                       brd_clk_p,\n\n\n\ninput                       i_uart0_rts,\noutput                      o_uart0_rx,\noutput                      o_uart0_cts,\ninput                       i_uart0_tx,\n\n\ninout  [15:0]               ddr3_dq,\noutput [12:0]               ddr3_addr,\noutput [2:0]                ddr3_ba,\noutput                      ddr3_ras_n,\noutput                      ddr3_cas_n,\noutput                      ddr3_we_n,\noutput                      ddr3_odt,\noutput                      ddr3_reset_n,\noutput                      ddr3_cke,\noutput [1:0]                ddr3_dm,\ninout  [1:0]                ddr3_dqs_p,\ninout  [1:0]                ddr3_dqs_n,\noutput                      ddr3_ck_p,\noutput                      ddr3_ck_n,\n\n`ifdef XILINX_SPARTAN6_FPGA\ninout                       mcb3_rzq,\n`endif\n\n\n\ninput                       mtx_clk_pad_i,\noutput  [3:0]               mtxd_pad_o,\noutput                      mtxen_pad_o,\noutput                      mtxerr_pad_o,\ninput                       mrx_clk_pad_i,\ninput   [3:0]               mrxd_pad_i,\ninput                       mrxdv_pad_i,\ninput                       mrxerr_pad_i,\ninput                       mcoll_pad_i,\ninput                       mcrs_pad_i,\ninout                       md_pad_io,\noutput                      mdc_pad_o,\noutput                      phy_reset_n,\n\noutput  [3:0]               led\n);\n\n\nwire            sys_clk;    \nwire            sys_rst;    \nwire            clk_200;    \n\n\n\n\n\n`ifdef XILINX_SPARTAN6_FPGA\nwire            c3_p0_cmd_en;\nwire  [2:0]     c3_p0_cmd_instr;\nwire  [29:0]    c3_p0_cmd_byte_addr;\nwire            c3_p0_wr_en;\nwire  [15:0]    c3_p0_wr_mask;\nwire  [127:0]   c3_p0_wr_data;\nwire  [127:0]   c3_p0_rd_data;\nwire            c3_p0_rd_empty;\nwire            c3_p0_cmd_full;\nwire            c3_p0_wr_full;\n`endif\n\nwire            phy_init_done;\nwire            test_mem_ctrl;\nwire            system_rdy;\n\n\n\n\n\nwire            md_pad_i;\nwire            md_pad_o;\nwire            md_padoe_o;\n\n\n\n\n\nlocalparam WB_MASTERS = 2;\nlocalparam WB_SLAVES  = 9;\n\n`ifdef AMBER_A25_CORE\nlocalparam WB_DWIDTH  = 128;\nlocalparam WB_SWIDTH  = 16;\n`else\nlocalparam WB_DWIDTH  = 32;\nlocalparam WB_SWIDTH  = 4;\n`endif\n\n\n\nwire      [31:0]            m_wb_adr      [WB_MASTERS-1:0];\nwire      [WB_SWIDTH-1:0]   m_wb_sel      [WB_MASTERS-1:0];\nwire      [WB_MASTERS-1:0]  m_wb_we                       ;\nwire      [WB_DWIDTH-1:0]   m_wb_dat_w    [WB_MASTERS-1:0];\nwire      [WB_DWIDTH-1:0]   m_wb_dat_r    [WB_MASTERS-1:0];\nwire      [WB_MASTERS-1:0]  m_wb_cyc                      ;\nwire      [WB_MASTERS-1:0]  m_wb_stb                      ;\nwire      [WB_MASTERS-1:0]  m_wb_ack                      ;\nwire      [WB_MASTERS-1:0]  m_wb_err                      ;\n\n\n\nwire      [31:0]            s_wb_adr      [WB_SLAVES-1:0];\nwire      [WB_SWIDTH-1:0]   s_wb_sel      [WB_SLAVES-1:0];\nwire      [WB_SLAVES-1:0]   s_wb_we                      ;\nwire      [WB_DWIDTH-1:0]   s_wb_dat_w    [WB_SLAVES-1:0];\nwire      [WB_DWIDTH-1:0]   s_wb_dat_r    [WB_SLAVES-1:0];\nwire      [WB_SLAVES-1:0]   s_wb_cyc                     ;\nwire      [WB_SLAVES-1:0]   s_wb_stb                     ;\nwire      [WB_SLAVES-1:0]   s_wb_ack                     ;\nwire      [WB_SLAVES-1:0]   s_wb_err                     ;\n\nwire      [31:0]            emm_wb_adr;\nwire      [3:0]             emm_wb_sel;\nwire                        emm_wb_we;\nwire      [31:0]            emm_wb_rdat;\nwire      [31:0]            emm_wb_wdat;\nwire                        emm_wb_cyc;\nwire                        emm_wb_stb;\nwire                        emm_wb_ack;\nwire                        emm_wb_err;\n\nwire      [31:0]            ems_wb_adr;\nwire      [3:0]             ems_wb_sel;\nwire                        ems_wb_we;\nwire      [31:0]            ems_wb_rdat;\nwire      [31:0]            ems_wb_wdat;\nwire                        ems_wb_cyc;\nwire                        ems_wb_stb;\nwire                        ems_wb_ack;\nwire                        ems_wb_err;\n\n\n\n\n\nwire                        amber_irq;\nwire                        amber_firq;\nwire                        ethmac_int;\nwire                        test_reg_irq;\nwire                        test_reg_firq;\nwire                        uart0_int;\nwire                        uart1_int;\nwire      [2:0]             timer_int;\n\n\n\n\n\nclocks_resets u_clocks_resets (\n    .i_brd_rst          ( brd_rst           ),\n    .i_brd_clk_n        ( brd_clk_n         ),\n    .i_brd_clk_p        ( brd_clk_p         ),\n    .i_ddr_calib_done   ( phy_init_done     ),\n    .o_sys_rst          ( sys_rst           ),\n    .o_sys_clk          ( sys_clk           ),\n    .o_clk_200          ( clk_200           )\n);\n\n\n\n\n\n`ifdef AMBER_A25_CORE\na25_core u_amber (\n`else\na23_core u_amber (\n`endif\n    .i_clk          ( sys_clk         ),\n`ifdef AMBER_A25_CORE\n    .i_reset        ( sys_rst         ),\n`endif\n\n    .i_irq          ( amber_irq       ),\n    .i_firq         ( amber_firq      ),\n\n    .i_system_rdy   ( system_rdy      ),\n\n    .o_wb_adr       ( m_wb_adr  [1]   ),\n    .o_wb_sel       ( m_wb_sel  [1]   ),\n    .o_wb_we        ( m_wb_we   [1]   ),\n    .i_wb_dat       ( m_wb_dat_r[1]   ),\n    .o_wb_dat       ( m_wb_dat_w[1]   ),\n    .o_wb_cyc       ( m_wb_cyc  [1]   ),\n    .o_wb_stb       ( m_wb_stb  [1]   ),\n    .i_wb_ack       ( m_wb_ack  [1]   ),\n    .i_wb_err       ( m_wb_err  [1]   )\n);\n\n\n\n\n\neth_top u_eth_top (\n    .wb_clk_i                   ( sys_clk                ),\n    .wb_rst_i                   ( sys_rst                ),\n\n    \n    .wb_adr_i                   ( ems_wb_adr [11:2]      ),\n    .wb_sel_i                   ( ems_wb_sel             ),\n    .wb_we_i                    ( ems_wb_we              ),\n    .wb_cyc_i                   ( ems_wb_cyc             ),\n    .wb_stb_i                   ( ems_wb_stb             ),\n    .wb_ack_o                   ( ems_wb_ack             ),\n    .wb_dat_i                   ( ems_wb_wdat            ),\n    .wb_dat_o                   ( ems_wb_rdat            ),\n    .wb_err_o                   ( ems_wb_err             ),\n\n    \n    .m_wb_adr_o                 ( emm_wb_adr             ),\n    .m_wb_sel_o                 ( emm_wb_sel             ),\n    .m_wb_we_o                  ( emm_wb_we              ),\n    .m_wb_dat_i                 ( emm_wb_rdat            ),\n    .m_wb_dat_o                 ( emm_wb_wdat            ),\n    .m_wb_cyc_o                 ( emm_wb_cyc             ),\n    .m_wb_stb_o                 ( emm_wb_stb             ),\n    .m_wb_ack_i                 ( emm_wb_ack             ),\n    .m_wb_err_i                 ( emm_wb_err             ),\n\n    \n    .mtx_clk_pad_i              ( mtx_clk_pad_i          ),\n    .mtxd_pad_o                 ( mtxd_pad_o             ),\n    .mtxen_pad_o                ( mtxen_pad_o            ),\n    .mtxerr_pad_o               ( mtxerr_pad_o           ),\n    .mrx_clk_pad_i              ( mrx_clk_pad_i          ),\n    .mrxd_pad_i                 ( mrxd_pad_i             ),\n    .mrxdv_pad_i                ( mrxdv_pad_i            ),\n    .mrxerr_pad_i               ( mrxerr_pad_i           ),\n    .mcoll_pad_i                ( mcoll_pad_i            ),\n    .mcrs_pad_i                 ( mcrs_pad_i             ),\n    .md_pad_i                   ( md_pad_i               ),\n    .mdc_pad_o                  ( mdc_pad_o              ),\n    .md_pad_o                   ( md_pad_o               ),\n    .md_padoe_o                 ( md_padoe_o             ),\n\n    \n    .int_o                      ( ethmac_int             )\n);\n\n\n\n\n\n`ifdef XILINX_FPGA\nIOBUF u_iobuf (\n`else\ngeneric_iobuf u_iobuf (\n`endif\n    .O                          ( md_pad_i              ),\n    .IO                         ( md_pad_io             ),\n    .I                          ( md_pad_o              ),\n    \n    .T                          ( ~md_padoe_o           )\n);\n\n\n\nassign system_rdy = phy_init_done && !sys_rst;\n\n\n\n\n\ngenerate\nif (WB_DWIDTH == 32) begin : boot_mem32\n    boot_mem32 u_boot_mem (\n        .i_wb_clk               ( sys_clk         ),\n        .i_wb_adr               ( s_wb_adr  [1]   ),\n        .i_wb_sel               ( s_wb_sel  [1]   ),\n        .i_wb_we                ( s_wb_we   [1]   ),\n        .o_wb_dat               ( s_wb_dat_r[1]   ),\n        .i_wb_dat               ( s_wb_dat_w[1]   ),\n        .i_wb_cyc               ( s_wb_cyc  [1]   ),\n        .i_wb_stb               ( s_wb_stb  [1]   ),\n        .o_wb_ack               ( s_wb_ack  [1]   ),\n        .o_wb_err               ( s_wb_err  [1]   )\n    );\nend\nelse begin : boot_mem128\n    boot_mem128 u_boot_mem (\n        .i_wb_clk               ( sys_clk         ),\n        .i_wb_adr               ( s_wb_adr  [1]   ),\n        .i_wb_sel               ( s_wb_sel  [1]   ),\n        .i_wb_we                ( s_wb_we   [1]   ),\n        .o_wb_dat               ( s_wb_dat_r[1]   ),\n        .i_wb_dat               ( s_wb_dat_w[1]   ),\n        .i_wb_cyc               ( s_wb_cyc  [1]   ),\n        .i_wb_stb               ( s_wb_stb  [1]   ),\n        .o_wb_ack               ( s_wb_ack  [1]   ),\n        .o_wb_err               ( s_wb_err  [1]   )\n    );\nend\nendgenerate\n\n\n\n\n\nuart  #(\n    .WB_DWIDTH              ( WB_DWIDTH       ),\n    .WB_SWIDTH              ( WB_SWIDTH       )\n    )\nu_uart0 (\n    .i_clk                  ( sys_clk        ),\n\n    .o_uart_int             ( uart0_int      ),\n\n    .i_uart_cts_n           ( i_uart0_rts    ),\n    .o_uart_txd             ( o_uart0_rx     ),\n    .o_uart_rts_n           ( o_uart0_cts    ),\n    .i_uart_rxd             ( i_uart0_tx     ),\n\n    .i_wb_adr               ( s_wb_adr  [3]  ),\n    .i_wb_sel               ( s_wb_sel  [3]  ),\n    .i_wb_we                ( s_wb_we   [3]  ),\n    .o_wb_dat               ( s_wb_dat_r[3]  ),\n    .i_wb_dat               ( s_wb_dat_w[3]  ),\n    .i_wb_cyc               ( s_wb_cyc  [3]  ),\n    .i_wb_stb               ( s_wb_stb  [3]  ),\n    .o_wb_ack               ( s_wb_ack  [3]  ),\n    .o_wb_err               ( s_wb_err  [3]  )\n);\n\n\n\n\n\nuart  #(\n    .WB_DWIDTH              ( WB_DWIDTH       ),\n    .WB_SWIDTH              ( WB_SWIDTH       )\n    )\nu_uart1 (\n    .i_clk                  ( sys_clk        ),\n\n    .o_uart_int             ( uart1_int      ),\n\n    \n    \n    .i_uart_cts_n           ( 1'd1           ),\n    .o_uart_txd             (                ),\n    .o_uart_rts_n           (                ),\n    .i_uart_rxd             ( 1'd1           ),\n\n    .i_wb_adr               ( s_wb_adr  [4]  ),\n    .i_wb_sel               ( s_wb_sel  [4]  ),\n    .i_wb_we                ( s_wb_we   [4]  ),\n    .o_wb_dat               ( s_wb_dat_r[4]  ),\n    .i_wb_dat               ( s_wb_dat_w[4]  ),\n    .i_wb_cyc               ( s_wb_cyc  [4]  ),\n    .i_wb_stb               ( s_wb_stb  [4]  ),\n    .o_wb_ack               ( s_wb_ack  [4]  ),\n    .o_wb_err               ( s_wb_err  [4]  )\n);\n\n\n\n\n\n\ntest_module #(\n    .WB_DWIDTH              ( WB_DWIDTH      ),\n    .WB_SWIDTH              ( WB_SWIDTH      )\n    )\nu_test_module (\n    .i_clk                  ( sys_clk        ),\n\n    .o_irq                  ( test_reg_irq   ),\n    .o_firq                 ( test_reg_firq  ),\n    .o_mem_ctrl             ( test_mem_ctrl  ),\n    .i_wb_adr               ( s_wb_adr  [5]  ),\n    .i_wb_sel               ( s_wb_sel  [5]  ),\n    .i_wb_we                ( s_wb_we   [5]  ),\n    .o_wb_dat               ( s_wb_dat_r[5]  ),\n    .i_wb_dat               ( s_wb_dat_w[5]  ),\n    .i_wb_cyc               ( s_wb_cyc  [5]  ),\n    .i_wb_stb               ( s_wb_stb  [5]  ),\n    .o_wb_ack               ( s_wb_ack  [5]  ),\n    .o_wb_err               ( s_wb_err  [5]  ),\n    .o_led                  ( led            ),\n    .o_phy_rst_n            ( phy_reset_n    )\n);\n\n\n\n\n\ntimer_module  #(\n    .WB_DWIDTH              ( WB_DWIDTH      ),\n    .WB_SWIDTH              ( WB_SWIDTH      )\n    )\nu_timer_module (\n    .i_clk                  ( sys_clk        ),\n\n    \n    .o_timer_int            ( timer_int      ),\n\n    \n    .i_wb_adr               ( s_wb_adr  [6]  ),\n    .i_wb_sel               ( s_wb_sel  [6]  ),\n    .i_wb_we                ( s_wb_we   [6]  ),\n    .o_wb_dat               ( s_wb_dat_r[6]  ),\n    .i_wb_dat               ( s_wb_dat_w[6]  ),\n    .i_wb_cyc               ( s_wb_cyc  [6]  ),\n    .i_wb_stb               ( s_wb_stb  [6]  ),\n    .o_wb_ack               ( s_wb_ack  [6]  ),\n    .o_wb_err               ( s_wb_err  [6]  )\n);\n\n\n\n\n\ninterrupt_controller  #(\n    .WB_DWIDTH              ( WB_DWIDTH      ),\n    .WB_SWIDTH              ( WB_SWIDTH      )\n    )\nu_interrupt_controller (\n    .i_clk                  ( sys_clk        ),\n\n    \n    .o_irq                  ( amber_irq      ),\n    .o_firq                 ( amber_firq     ),\n\n    \n    .i_uart0_int            ( uart0_int      ),\n    .i_uart1_int            ( uart1_int      ),\n    .i_ethmac_int           ( ethmac_int     ),\n    .i_test_reg_irq         ( test_reg_irq   ),\n    .i_test_reg_firq        ( test_reg_firq  ),\n    .i_tm_timer_int         ( timer_int      ),\n\n    \n    .i_wb_adr               ( s_wb_adr  [7]  ),\n    .i_wb_sel               ( s_wb_sel  [7]  ),\n    .i_wb_we                ( s_wb_we   [7]  ),\n    .o_wb_dat               ( s_wb_dat_r[7]  ),\n    .i_wb_dat               ( s_wb_dat_w[7]  ),\n    .i_wb_cyc               ( s_wb_cyc  [7]  ),\n    .i_wb_stb               ( s_wb_stb  [7]  ),\n    .o_wb_ack               ( s_wb_ack  [7]  ),\n    .o_wb_err               ( s_wb_err  [7]  )\n);\n\n\n\n\n`ifndef XILINX_FPGA\n    \n    \n    \n\n    assign phy_init_done = 1'd1;\n\n    main_mem #(\n                .WB_DWIDTH             ( WB_DWIDTH             ),\n                .WB_SWIDTH             ( WB_SWIDTH             )\n                )\n    u_main_mem (\n               .i_clk                  ( sys_clk               ),\n               .i_mem_ctrl             ( test_mem_ctrl         ),\n               .i_wb_adr               ( s_wb_adr  [2]         ),\n               .i_wb_sel               ( s_wb_sel  [2]         ),\n               .i_wb_we                ( s_wb_we   [2]         ),\n               .o_wb_dat               ( s_wb_dat_r[2]         ),\n               .i_wb_dat               ( s_wb_dat_w[2]         ),\n               .i_wb_cyc               ( s_wb_cyc  [2]         ),\n               .i_wb_stb               ( s_wb_stb  [2]         ),\n               .o_wb_ack               ( s_wb_ack  [2]         ),\n               .o_wb_err               ( s_wb_err  [2]         )\n            );\n\n`endif\n\n\n`ifdef XILINX_SPARTAN6_FPGA\n    \n    \n    \n    \n    wb_xs6_ddr3_bridge   #(\n        .WB_DWIDTH              ( WB_DWIDTH             ),\n        .WB_SWIDTH              ( WB_SWIDTH             )\n        )\n    u_wb_xs6_ddr3_bridge(\n        .i_clk                  ( sys_clk               ),\n\n        .o_cmd_en               ( c3_p0_cmd_en          ),\n        .o_cmd_instr            ( c3_p0_cmd_instr       ),\n        .o_cmd_byte_addr        ( c3_p0_cmd_byte_addr   ),\n        .i_cmd_full             ( c3_p0_cmd_full        ),\n        .i_wr_full              ( c3_p0_wr_full         ),\n        .o_wr_en                ( c3_p0_wr_en           ),\n        .o_wr_mask              ( c3_p0_wr_mask         ),\n        .o_wr_data              ( c3_p0_wr_data         ),\n        .i_rd_data              ( c3_p0_rd_data         ),\n        .i_rd_empty             ( c3_p0_rd_empty        ),\n\n        .i_mem_ctrl             ( test_mem_ctrl         ),\n        .i_wb_adr               ( s_wb_adr  [2]         ),\n        .i_wb_sel               ( s_wb_sel  [2]         ),\n        .i_wb_we                ( s_wb_we   [2]         ),\n        .o_wb_dat               ( s_wb_dat_r[2]         ),\n        .i_wb_dat               ( s_wb_dat_w[2]         ),\n        .i_wb_cyc               ( s_wb_cyc  [2]         ),\n        .i_wb_stb               ( s_wb_stb  [2]         ),\n        .o_wb_ack               ( s_wb_ack  [2]         ),\n        .o_wb_err               ( s_wb_err  [2]         )\n    );\n\n\n    \n    \n    \n    ddr3 u_ddr3  (\n\n                \n               .mcb3_dram_dq            ( ddr3_dq               ),\n               .mcb3_dram_a             ( ddr3_addr             ),\n               .mcb3_dram_ba            ( ddr3_ba               ),\n               .mcb3_dram_ras_n         ( ddr3_ras_n            ),\n               .mcb3_dram_cas_n         ( ddr3_cas_n            ),\n               .mcb3_dram_we_n          ( ddr3_we_n             ),\n               .mcb3_dram_odt           ( ddr3_odt              ),\n               .mcb3_dram_reset_n       ( ddr3_reset_n          ),\n               .mcb3_dram_cke           ( ddr3_cke              ),\n               .mcb3_dram_udm           ( ddr3_dm[1]            ),\n               .mcb3_dram_dm            ( ddr3_dm[0]            ),\n               .mcb3_rzq                ( mcb3_rzq              ),\n               .mcb3_dram_udqs          ( ddr3_dqs_p[1]         ),\n               .mcb3_dram_dqs           ( ddr3_dqs_p[0]         ),\n               .mcb3_dram_udqs_n        ( ddr3_dqs_n[1]         ),\n               .mcb3_dram_dqs_n         ( ddr3_dqs_n[0]         ),\n               .mcb3_dram_ck            ( ddr3_ck_p             ),\n               .mcb3_dram_ck_n          ( ddr3_ck_n             ),\n\n               .c3_sys_clk              ( clk_200               ),\n               .c3_sys_rst_i            ( brd_rst               ), \n               .c3_clk0                 (                       ),\n               .c3_rst0                 (                       ),\n               .c3_calib_done           ( phy_init_done         ),\n\n               .c3_p0_cmd_clk           ( sys_clk               ),\n\n               .c3_p0_cmd_en            ( c3_p0_cmd_en          ),\n               .c3_p0_cmd_instr         ( c3_p0_cmd_instr       ),\n               .c3_p0_cmd_bl            ( 6'd0                  ),\n               .c3_p0_cmd_byte_addr     ( c3_p0_cmd_byte_addr   ),\n               .c3_p0_cmd_empty         (                       ),\n               .c3_p0_cmd_full          ( c3_p0_cmd_full        ),\n\n               .c3_p0_wr_clk            ( sys_clk               ),\n\n               .c3_p0_wr_en             ( c3_p0_wr_en           ),\n               .c3_p0_wr_mask           ( c3_p0_wr_mask         ),\n               .c3_p0_wr_data           ( c3_p0_wr_data         ),\n               .c3_p0_wr_full           ( c3_p0_wr_full         ),\n               .c3_p0_wr_empty          (                       ),\n               .c3_p0_wr_count          (                       ),\n               .c3_p0_wr_underrun       (                       ),\n               .c3_p0_wr_error          (                       ),\n\n               .c3_p0_rd_clk            ( sys_clk               ),\n\n               .c3_p0_rd_en             ( 1'd1                  ),\n               .c3_p0_rd_data           ( c3_p0_rd_data         ),\n               .c3_p0_rd_full           (                       ),\n               .c3_p0_rd_empty          ( c3_p0_rd_empty        ),\n               .c3_p0_rd_count          (                       ),\n               .c3_p0_rd_overflow       (                       ),\n               .c3_p0_rd_error          (                       )\n       );\n`endif\n\n\n\n\n\n\nwishbone_arbiter #(\n    .WB_DWIDTH              ( WB_DWIDTH         ),\n    .WB_SWIDTH              ( WB_SWIDTH         )\n    )\nu_wishbone_arbiter (\n    .i_wb_clk               ( sys_clk           ),\n\n    \n    .i_m0_wb_adr            ( m_wb_adr   [0]    ),\n    .i_m0_wb_sel            ( m_wb_sel   [0]    ),\n    .i_m0_wb_we             ( m_wb_we    [0]    ),\n    .o_m0_wb_dat            ( m_wb_dat_r [0]    ),\n    .i_m0_wb_dat            ( m_wb_dat_w [0]    ),\n    .i_m0_wb_cyc            ( m_wb_cyc   [0]    ),\n    .i_m0_wb_stb            ( m_wb_stb   [0]    ),\n    .o_m0_wb_ack            ( m_wb_ack   [0]    ),\n    .o_m0_wb_err            ( m_wb_err   [0]    ),\n\n\n    \n    .i_m1_wb_adr            ( m_wb_adr   [1]    ),\n    .i_m1_wb_sel            ( m_wb_sel   [1]    ),\n    .i_m1_wb_we             ( m_wb_we    [1]    ),\n    .o_m1_wb_dat            ( m_wb_dat_r [1]    ),\n    .i_m1_wb_dat            ( m_wb_dat_w [1]    ),\n    .i_m1_wb_cyc            ( m_wb_cyc   [1]    ),\n    .i_m1_wb_stb            ( m_wb_stb   [1]    ),\n    .o_m1_wb_ack            ( m_wb_ack   [1]    ),\n    .o_m1_wb_err            ( m_wb_err   [1]    ),\n\n\n    \n    .o_s0_wb_adr            ( s_wb_adr   [0]    ),\n    .o_s0_wb_sel            ( s_wb_sel   [0]    ),\n    .o_s0_wb_we             ( s_wb_we    [0]    ),\n    .i_s0_wb_dat            ( s_wb_dat_r [0]    ),\n    .o_s0_wb_dat            ( s_wb_dat_w [0]    ),\n    .o_s0_wb_cyc            ( s_wb_cyc   [0]    ),\n    .o_s0_wb_stb            ( s_wb_stb   [0]    ),\n    .i_s0_wb_ack            ( s_wb_ack   [0]    ),\n    .i_s0_wb_err            ( s_wb_err   [0]    ),\n\n\n    \n    .o_s1_wb_adr            ( s_wb_adr   [1]    ),\n    .o_s1_wb_sel            ( s_wb_sel   [1]    ),\n    .o_s1_wb_we             ( s_wb_we    [1]    ),\n    .i_s1_wb_dat            ( s_wb_dat_r [1]    ),\n    .o_s1_wb_dat            ( s_wb_dat_w [1]    ),\n    .o_s1_wb_cyc            ( s_wb_cyc   [1]    ),\n    .o_s1_wb_stb            ( s_wb_stb   [1]    ),\n    .i_s1_wb_ack            ( s_wb_ack   [1]    ),\n    .i_s1_wb_err            ( s_wb_err   [1]    ),\n\n\n    \n    .o_s2_wb_adr            ( s_wb_adr   [2]    ),\n    .o_s2_wb_sel            ( s_wb_sel   [2]    ),\n    .o_s2_wb_we             ( s_wb_we    [2]    ),\n    .i_s2_wb_dat            ( s_wb_dat_r [2]    ),\n    .o_s2_wb_dat            ( s_wb_dat_w [2]    ),\n    .o_s2_wb_cyc            ( s_wb_cyc   [2]    ),\n    .o_s2_wb_stb            ( s_wb_stb   [2]    ),\n    .i_s2_wb_ack            ( s_wb_ack   [2]    ),\n    .i_s2_wb_err            ( s_wb_err   [2]    ),\n\n\n    \n    .o_s3_wb_adr            ( s_wb_adr   [3]    ),\n    .o_s3_wb_sel            ( s_wb_sel   [3]    ),\n    .o_s3_wb_we             ( s_wb_we    [3]    ),\n    .i_s3_wb_dat            ( s_wb_dat_r [3]    ),\n    .o_s3_wb_dat            ( s_wb_dat_w [3]    ),\n    .o_s3_wb_cyc            ( s_wb_cyc   [3]    ),\n    .o_s3_wb_stb            ( s_wb_stb   [3]    ),\n    .i_s3_wb_ack            ( s_wb_ack   [3]    ),\n    .i_s3_wb_err            ( s_wb_err   [3]    ),\n\n\n    \n    .o_s4_wb_adr            ( s_wb_adr   [4]    ),\n    .o_s4_wb_sel            ( s_wb_sel   [4]    ),\n    .o_s4_wb_we             ( s_wb_we    [4]    ),\n    .i_s4_wb_dat            ( s_wb_dat_r [4]    ),\n    .o_s4_wb_dat            ( s_wb_dat_w [4]    ),\n    .o_s4_wb_cyc            ( s_wb_cyc   [4]    ),\n    .o_s4_wb_stb            ( s_wb_stb   [4]    ),\n    .i_s4_wb_ack            ( s_wb_ack   [4]    ),\n    .i_s4_wb_err            ( s_wb_err   [4]    ),\n\n\n    \n    .o_s5_wb_adr            ( s_wb_adr   [5]    ),\n    .o_s5_wb_sel            ( s_wb_sel   [5]    ),\n    .o_s5_wb_we             ( s_wb_we    [5]    ),\n    .i_s5_wb_dat            ( s_wb_dat_r [5]    ),\n    .o_s5_wb_dat            ( s_wb_dat_w [5]    ),\n    .o_s5_wb_cyc            ( s_wb_cyc   [5]    ),\n    .o_s5_wb_stb            ( s_wb_stb   [5]    ),\n    .i_s5_wb_ack            ( s_wb_ack   [5]    ),\n    .i_s5_wb_err            ( s_wb_err   [5]    ),\n\n\n    \n    .o_s6_wb_adr            ( s_wb_adr   [6]    ),\n    .o_s6_wb_sel            ( s_wb_sel   [6]    ),\n    .o_s6_wb_we             ( s_wb_we    [6]    ),\n    .i_s6_wb_dat            ( s_wb_dat_r [6]    ),\n    .o_s6_wb_dat            ( s_wb_dat_w [6]    ),\n    .o_s6_wb_cyc            ( s_wb_cyc   [6]    ),\n    .o_s6_wb_stb            ( s_wb_stb   [6]    ),\n    .i_s6_wb_ack            ( s_wb_ack   [6]    ),\n    .i_s6_wb_err            ( s_wb_err   [6]    ),\n\n\n    \n    .o_s7_wb_adr            ( s_wb_adr   [7]    ),\n    .o_s7_wb_sel            ( s_wb_sel   [7]    ),\n    .o_s7_wb_we             ( s_wb_we    [7]    ),\n    .i_s7_wb_dat            ( s_wb_dat_r [7]    ),\n    .o_s7_wb_dat            ( s_wb_dat_w [7]    ),\n    .o_s7_wb_cyc            ( s_wb_cyc   [7]    ),\n    .o_s7_wb_stb            ( s_wb_stb   [7]    ),\n    .i_s7_wb_ack            ( s_wb_ack   [7]    ),\n    .i_s7_wb_err            ( s_wb_err   [7]    )\n    );\n\n\nethmac_wb #(\n    .WB_DWIDTH              ( WB_DWIDTH         ),\n    .WB_SWIDTH              ( WB_SWIDTH         )\n    )\nu_ethmac_wb (\n    \n    .o_m_wb_adr             ( m_wb_adr   [0]    ),\n    .o_m_wb_sel             ( m_wb_sel   [0]    ),\n    .o_m_wb_we              ( m_wb_we    [0]    ),\n    .i_m_wb_rdat            ( m_wb_dat_r [0]    ),\n    .o_m_wb_wdat            ( m_wb_dat_w [0]    ),\n    .o_m_wb_cyc             ( m_wb_cyc   [0]    ),\n    .o_m_wb_stb             ( m_wb_stb   [0]    ),\n    .i_m_wb_ack             ( m_wb_ack   [0]    ),\n    .i_m_wb_err             ( m_wb_err   [0]    ),\n\n    \n    .i_s_wb_adr             ( s_wb_adr   [0]    ),\n    .i_s_wb_sel             ( s_wb_sel   [0]    ),\n    .i_s_wb_we              ( s_wb_we    [0]    ),\n    .i_s_wb_cyc             ( s_wb_cyc   [0]    ),\n    .i_s_wb_stb             ( s_wb_stb   [0]    ),\n    .o_s_wb_ack             ( s_wb_ack   [0]    ),\n    .i_s_wb_wdat            ( s_wb_dat_w [0]    ),\n    .o_s_wb_rdat            ( s_wb_dat_r [0]    ),\n    .o_s_wb_err             ( s_wb_err   [0]    ),\n\n    \n    .i_m_wb_adr             ( emm_wb_adr        ),\n    .i_m_wb_sel             ( emm_wb_sel        ),\n    .i_m_wb_we              ( emm_wb_we         ),\n    .o_m_wb_rdat            ( emm_wb_rdat       ),\n    .i_m_wb_wdat            ( emm_wb_wdat       ),\n    .i_m_wb_cyc             ( emm_wb_cyc        ),\n    .i_m_wb_stb             ( emm_wb_stb        ),\n    .o_m_wb_ack             ( emm_wb_ack        ),\n    .o_m_wb_err             ( emm_wb_err        ),\n\n    \n    .o_s_wb_adr             ( ems_wb_adr        ),\n    .o_s_wb_sel             ( ems_wb_sel        ),\n    .o_s_wb_we              ( ems_wb_we         ),\n    .i_s_wb_rdat            ( ems_wb_rdat       ),\n    .o_s_wb_wdat            ( ems_wb_wdat       ),\n    .o_s_wb_cyc             ( ems_wb_cyc        ),\n    .o_s_wb_stb             ( ems_wb_stb        ),\n    .i_s_wb_ack             ( ems_wb_ack        ),\n    .i_s_wb_err             ( ems_wb_err        )\n);\n\n\n\n\nendmodule\n\n\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: system. Module specification: The system module is a top-level design for a system-on-chip (SoC) that integrates various components including an Amber processor core, memory controllers, UART interfaces, Ethernet MAC, timers, and interrupt controllers using a Wishbone bus architecture. It handles clock generation, reset management, and interfaces with external DDR3 memory and Ethernet PHY. The module has input ports for board reset, clocks, UART, and Ethernet signals, and output ports for UART, DDR3 memory, Ethernet, and LEDs. Internal signals include system clock, reset, and various interrupt and control signals. The module is organized into several blocks: clock and reset management, Amber core, Ethernet interface, boot memory, UART controllers, test module, timer module, interrupt controller, DDR3 memory interface (for Xilinx FPGAs), and a"
                }
            ]
        }
    ]
}