{
    "spec": "Module name: mcb_ui_top. Module specification: This module serves as a top-level wrapper for a memory controller block (MCB) interface, integrating various components including AXI interfaces, MCB raw wrapper, and BUFPLL_MCB for clock management. It supports up to 6 ports, configurable as either native MCB interfaces or AXI interfaces. The module handles address translation, arbitration, and data transfer between user interfaces and the memory controller. Input ports include clock signals, reset signals, arbitration enables, command signals, write/read signals, AXI interface signals, and various control signals for memory operations and calibration. Output ports include buffered clock signals, status signals for command and data operations, memory interface signals, calibration status signals, and AXI interface response signals. Internal signals serve as intermediaries between the module's inputs/outputs and its submodules, including masked versions of AXI",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: mcb_ui_top\n\nExplanation: This module serves as a top-level wrapper for a memory controller block (MCB) interface. It integrates various components including AXI interfaces, MCB raw wrapper, and BUFPLL_MCB for clock management. The module supports up to 6 ports, which can be configured as either native MCB interfaces or AXI interfaces. It handles address translation, arbitration, and data transfer between the user interfaces and the memory controller. The module also manages clock synchronization and calibration signals for proper memory operation."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nsysclk_2x, sysclk_2x_180, pll_ce_0, pll_ce_90, pll_lock, sys_rst, p0_arb_en to p5_arb_en, p0_cmd_clk to p5_cmd_clk, p0_cmd_en to p5_cmd_en, p0_cmd_instr to p5_cmd_instr, p0_cmd_bl to p5_cmd_bl, p0_cmd_byte_addr to p5_cmd_byte_addr, p0_wr_clk to p5_wr_clk, p0_wr_en to p5_wr_en, p0_wr_mask to p5_wr_mask, p0_wr_data to p5_wr_data, p0_rd_clk to p5_rd_clk, p0_rd_en to p5_rd_en, calib_recal, ui_read, ui_add, ui_cs, ui_clk, ui_sdi, ui_addr, ui_broadcast, ui_drp_update, ui_done_cal, ui_cmd, ui_cmd_in, ui_cmd_en, ui_dqcount, ui_dq_lower_dec, ui_dq_lower_inc, ui_dq_upper_dec, ui_dq_upper_inc, ui_udqs_inc, ui_udqs_dec, ui_ldqs_inc, ui_ldqs_dec, selfrefresh_enter, s0_axi_aclk to s5_axi_aclk, s0_axi_aresetn to s5_axi_aresetn, s0_axi_awid to s5_axi_awid, s0_axi_awaddr to s5_axi_awaddr, s0_axi_awlen to s5_axi_awlen, s0_axi_awsize to s5_axi_awsize, s0_axi_awburst to s5_axi_awburst, s0_axi_awlock to s5_axi_awlock, s0_axi_awcache to s5_axi_awcache, s0_axi_awprot to s5_axi_awprot, s0_axi_awqos to s5_axi_awqos, s0_axi_awvalid to s5_axi_awvalid, s0_axi_wdata to s5_axi_wdata, s0_axi_wstrb to s5_axi_wstrb, s0_axi_wlast to s5_axi_wlast, s0_axi_wvalid to s5_axi_wvalid, s0_axi_bready to s5_axi_bready, s0_axi_arid to s5_axi_arid, s0_axi_araddr to s5_axi_araddr, s0_axi_arlen to s5_axi_arlen, s0_axi_arsize to s5_axi_arsize, s0_axi_arburst to s5_axi_arburst, s0_axi_arlock to s5_axi_arlock, s0_axi_arcache to s5_axi_arcache, s0_axi_arprot to s5_axi_arprot, s0_axi_arqos to s5_axi_arqos, s0_axi_arvalid to s5_axi_arvalid, s0_axi_rready to s5_axi_rready.\n\nExplanation: These input ports include clock signals, reset signals, arbitration enables, command signals, write/read signals, AXI interface signals, and various control signals for memory operations and calibration.\n\nOutput ports:\nsysclk_2x_bufpll_o, sysclk_2x_180_bufpll_o, pll_ce_0_bufpll_o, pll_ce_90_bufpll_o, pll_lock_bufpll_o, p0_cmd_empty to p5_cmd_empty, p0_cmd_full to p5_cmd_full, p0_wr_full to p5_wr_full, p0_wr_empty to p5_wr_empty, p0_wr_count to p5_wr_count, p0_wr_underrun to p5_wr_underrun, p0_wr_error to p5_wr_error, p0_rd_data to p5_rd_data, p0_rd_full to p5_rd_full, p0_rd_empty to p5_rd_empty, p0_rd_count to p5_rd_count, p0_rd_overflow to p5_rd_overflow, p0_rd_error to p5_rd_error, mcbx_dram_addr, mcbx_dram_ba, mcbx_dram_ras_n, mcbx_dram_cas_n, mcbx_dram_we_n, mcbx_dram_cke, mcbx_dram_clk, mcbx_dram_clk_n, mcbx_dram_dq, mcbx_dram_dqs, mcbx_dram_dqs_n, mcbx_dram_udqs, mcbx_dram_udqs_n, mcbx_dram_udm, mcbx_dram_ldm, mcbx_dram_odt, mcbx_dram_ddr3_rst, uo_data, uo_data_valid, uo_done_cal, uo_cmd_ready_in, uo_refrsh_flag, uo_cal_start, uo_sdo, status, selfrefresh_mode, s0_axi_awready to s5_axi_awready, s0_axi_wready to s5_axi_wready, s0_axi_bid to s5_axi_bid, s0_axi_bresp to s5_axi_bresp, s0_axi_bvalid to s5_axi_bvalid, s0_axi_arready to s5_axi_arready, s0_axi_rid to s5_axi_rid, s0_axi_rdata to s5_axi_rdata, s0_axi_rresp to s5_axi_rresp, s0_axi_rlast to s5_axi_rlast, s0_axi_rvalid to s5_axi_rvalid.\n\nExplanation: These output ports include buffered clock signals, status signals for command and data operations, memory interface signals, calibration status signals, and AXI interface response signals."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the provided code, here are the internal signals and their explanations:\n\nInternal signals: s0_axi_araddr_i, s0_axi_awaddr_i, s1_axi_araddr_i, s1_axi_awaddr_i, s2_axi_araddr_i, s2_axi_awaddr_i, s3_axi_araddr_i, s3_axi_awaddr_i, s4_axi_araddr_i, s4_axi_awaddr_i, s5_axi_araddr_i, s5_axi_awaddr_i, p0_arb_en_i to p5_arb_en_i, p0_cmd_clk_i to p5_cmd_clk_i, p0_cmd_en_i to p5_cmd_en_i, p0_cmd_instr_i to p5_cmd_instr_i, p0_cmd_bl_i to p5_cmd_bl_i, p0_cmd_byte_addr_i to p5_cmd_byte_addr_i, p0_cmd_empty_i to p5_cmd_empty_i, p0_cmd_full_i to p5_cmd_full_i, p0_wr_clk_i to p5_wr_clk_i, p0_wr_en_i to p5_wr_en_i, p0_wr_mask_i to p5_wr_mask_i, p0_wr_data_i to p5_wr_data_i, p0_wr_full_i to p5_wr_full_i, p0_wr_empty_i to p5_wr_empty_i, p0_wr_count_i to p5_wr_count_i, p0_wr_underrun_i to p5_wr_underrun_i, p0_wr_error_i to p5_wr_error_i, p0_rd_clk_i to p5_rd_clk_i, p0_rd_en_i to p5_rd_en_i, p0_rd_data_i to p5_rd_data_i, p0_rd_full_i to p5_rd_full_i, p0_rd_empty_i to p5_rd_empty_i, p0_rd_count_i to p5_rd_count_i, p0_rd_overflow_i to p5_rd_overflow_i, p0_rd_error_i to p5_rd_error_i, ioclk0, ioclk180, pll_ce_0_i, pll_ce_90_i.\n\nExplanation: These internal signals serve as intermediaries between the module's inputs/outputs and its submodules. The AXI address signals (*_axi_araddr_i and *_axi_awaddr_i) are masked versions of the input addresses. The signals with suffix \"_i\" (e.g., p0_arb_en_i, p0_cmd_clk_i) are internal representations of the corresponding input/output signals, used to connect the top-level ports with the mcb_raw_wrapper instance. The ioclk0, ioclk180, pll_ce_0_i, and pll_ce_90_i signals are used for clock management and are connected to either the BUFPLL_MCB instance or directly to input signals depending on the C_MCB_USE_EXTERNAL_BUFPLL parameter."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps / 1ps\n\nmodule mcb_ui_top #\n   (\n\n\n\n   \n   parameter         C_MEMCLK_PERIOD           = 2500,\n   parameter         C_PORT_ENABLE             = 6'b111111,\n   parameter         C_MEM_ADDR_ORDER          = \"BANK_ROW_COLUMN\",\n   parameter         C_USR_INTERFACE_MODE      = \"NATIVE\",\n   parameter         C_ARB_ALGORITHM           = 0,\n   parameter         C_ARB_NUM_TIME_SLOTS      = 12,\n   parameter         C_ARB_TIME_SLOT_0         = 18'o012345,\n   parameter         C_ARB_TIME_SLOT_1         = 18'o123450,\n   parameter         C_ARB_TIME_SLOT_2         = 18'o234501,\n   parameter         C_ARB_TIME_SLOT_3         = 18'o345012,\n   parameter         C_ARB_TIME_SLOT_4         = 18'o450123,\n   parameter         C_ARB_TIME_SLOT_5         = 18'o501234,\n   parameter         C_ARB_TIME_SLOT_6         = 18'o012345,\n   parameter         C_ARB_TIME_SLOT_7         = 18'o123450,\n   parameter         C_ARB_TIME_SLOT_8         = 18'o234501,\n   parameter         C_ARB_TIME_SLOT_9         = 18'o345012,\n   parameter         C_ARB_TIME_SLOT_10        = 18'o450123,\n   parameter         C_ARB_TIME_SLOT_11        = 18'o501234,\n   parameter         C_PORT_CONFIG             = \"B128\",\n   parameter         C_MEM_TRAS                = 45000,\n   parameter         C_MEM_TRCD                = 12500,\n   parameter         C_MEM_TREFI               = 7800,\n   parameter         C_MEM_TRFC                = 127500,\n   parameter         C_MEM_TRP                 = 12500,\n   parameter         C_MEM_TWR                 = 15000,\n   parameter         C_MEM_TRTP                = 7500,\n   parameter         C_MEM_TWTR                = 7500,\n   parameter         C_NUM_DQ_PINS             = 8,\n   parameter         C_MEM_TYPE                = \"DDR3\",\n   parameter         C_MEM_DENSITY             = \"512M\",\n   parameter         C_MEM_BURST_LEN           = 8,\n   parameter         C_MEM_CAS_LATENCY         = 4,\n   parameter         C_MEM_ADDR_WIDTH          = 13,\n   parameter         C_MEM_BANKADDR_WIDTH      = 3,\n   parameter         C_MEM_NUM_COL_BITS        = 11,\n   parameter         C_MEM_DDR3_CAS_LATENCY    = 7,\n   parameter         C_MEM_MOBILE_PA_SR        = \"FULL\",\n   parameter         C_MEM_DDR1_2_ODS          = \"FULL\",\n   parameter         C_MEM_DDR3_ODS            = \"DIV6\",\n   parameter         C_MEM_DDR2_RTT            = \"50OHMS\",\n   parameter         C_MEM_DDR3_RTT            = \"DIV2\",\n   parameter         C_MEM_MDDR_ODS            = \"FULL\",\n   parameter         C_MEM_DDR2_DIFF_DQS_EN    = \"YES\",\n   parameter         C_MEM_DDR2_3_PA_SR        = \"OFF\",\n   parameter         C_MEM_DDR3_CAS_WR_LATENCY = 5,\n   parameter         C_MEM_DDR3_AUTO_SR        = \"ENABLED\",\n   parameter         C_MEM_DDR2_3_HIGH_TEMP_SR = \"NORMAL\",\n   parameter         C_MEM_DDR3_DYN_WRT_ODT    = \"OFF\",\n   parameter         C_MEM_TZQINIT_MAXCNT      = 10'd512,\n   parameter         C_MC_CALIB_BYPASS         = \"NO\",\n   parameter         C_MC_CALIBRATION_RA       = 15'h0000,\n   parameter         C_MC_CALIBRATION_BA       = 3'h0,\n   parameter         C_CALIB_SOFT_IP           = \"TRUE\",\n   parameter         C_SKIP_IN_TERM_CAL        = 1'b0,\n   parameter         C_SKIP_DYNAMIC_CAL        = 1'b0,\n   parameter         C_SKIP_DYN_IN_TERM        = 1'b1,\n   parameter         LDQSP_TAP_DELAY_VAL       = 0,\n   parameter         UDQSP_TAP_DELAY_VAL       = 0,\n   parameter         LDQSN_TAP_DELAY_VAL       = 0,\n   parameter         UDQSN_TAP_DELAY_VAL       = 0,\n   parameter         DQ0_TAP_DELAY_VAL         = 0,\n   parameter         DQ1_TAP_DELAY_VAL         = 0,\n   parameter         DQ2_TAP_DELAY_VAL         = 0,\n   parameter         DQ3_TAP_DELAY_VAL         = 0,\n   parameter         DQ4_TAP_DELAY_VAL         = 0,\n   parameter         DQ5_TAP_DELAY_VAL         = 0,\n   parameter         DQ6_TAP_DELAY_VAL         = 0,\n   parameter         DQ7_TAP_DELAY_VAL         = 0,\n   parameter         DQ8_TAP_DELAY_VAL         = 0,\n   parameter         DQ9_TAP_DELAY_VAL         = 0,\n   parameter         DQ10_TAP_DELAY_VAL        = 0,\n   parameter         DQ11_TAP_DELAY_VAL        = 0,\n   parameter         DQ12_TAP_DELAY_VAL        = 0,\n   parameter         DQ13_TAP_DELAY_VAL        = 0,\n   parameter         DQ14_TAP_DELAY_VAL        = 0,\n   parameter         DQ15_TAP_DELAY_VAL        = 0,\n   parameter         C_MC_CALIBRATION_CA       = 12'h000,\n   parameter         C_MC_CALIBRATION_CLK_DIV  = 1,\n   parameter         C_MC_CALIBRATION_MODE     = \"CALIBRATION\",\n   parameter         C_MC_CALIBRATION_DELAY    = \"HALF\",\n   parameter         C_SIMULATION              = \"FALSE\",\n   parameter         C_P0_MASK_SIZE            = 4,\n   parameter         C_P0_DATA_PORT_SIZE       = 32,\n   parameter         C_P1_MASK_SIZE            = 4,\n   parameter         C_P1_DATA_PORT_SIZE       = 32,\n   parameter integer C_MCB_USE_EXTERNAL_BUFPLL = 1,\n   \n   parameter         C_S0_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S0_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S0_AXI_ENABLE           = 0,\n   parameter integer C_S0_AXI_ID_WIDTH         = 4,\n   parameter integer C_S0_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S0_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S0_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S0_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S0_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S0_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S0_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S0_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S0_AXI_ENABLE_AP        = 0,\n   parameter         C_S1_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S1_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S1_AXI_ENABLE           = 0,\n   parameter integer C_S1_AXI_ID_WIDTH         = 4,\n   parameter integer C_S1_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S1_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S1_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S1_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S1_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S1_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S1_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S1_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S1_AXI_ENABLE_AP        = 0,\n   parameter         C_S2_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S2_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S2_AXI_ENABLE           = 0,\n   parameter integer C_S2_AXI_ID_WIDTH         = 4,\n   parameter integer C_S2_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S2_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S2_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S2_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S2_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S2_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S2_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S2_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S2_AXI_ENABLE_AP        = 0,\n   parameter         C_S3_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S3_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S3_AXI_ENABLE           = 0,\n   parameter integer C_S3_AXI_ID_WIDTH         = 4,\n   parameter integer C_S3_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S3_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S3_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S3_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S3_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S3_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S3_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S3_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S3_AXI_ENABLE_AP        = 0,\n   parameter         C_S4_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S4_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S4_AXI_ENABLE           = 0,\n   parameter integer C_S4_AXI_ID_WIDTH         = 4,\n   parameter integer C_S4_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S4_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S4_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S4_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S4_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S4_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S4_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S4_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S4_AXI_ENABLE_AP        = 0,\n   parameter         C_S5_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S5_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S5_AXI_ENABLE           = 0,\n   parameter integer C_S5_AXI_ID_WIDTH         = 4,\n   parameter integer C_S5_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S5_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S5_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S5_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S5_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S5_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S5_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S5_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S5_AXI_ENABLE_AP        = 0\n   )\n   (\n\n\n\n   \n   input                                     sysclk_2x          ,\n   input                                     sysclk_2x_180      ,\n   input                                     pll_ce_0           ,\n   input                                     pll_ce_90          ,\n   output                                    sysclk_2x_bufpll_o ,\n   output                                    sysclk_2x_180_bufpll_o,\n   output                                    pll_ce_0_bufpll_o  ,\n   output                                    pll_ce_90_bufpll_o ,\n   output                                    pll_lock_bufpll_o  ,\n   input                                     pll_lock           ,\n   input                                     sys_rst            ,\n   input                                     p0_arb_en          ,\n   input                                     p0_cmd_clk         ,\n   input                                     p0_cmd_en          ,\n   input       [2:0]                         p0_cmd_instr       ,\n   input       [5:0]                         p0_cmd_bl          ,\n   input       [29:0]                        p0_cmd_byte_addr   ,\n   output                                    p0_cmd_empty       ,\n   output                                    p0_cmd_full        ,\n   input                                     p0_wr_clk          ,\n   input                                     p0_wr_en           ,\n   input       [C_P0_MASK_SIZE-1:0]          p0_wr_mask         ,\n   input       [C_P0_DATA_PORT_SIZE-1:0]     p0_wr_data         ,\n   output                                    p0_wr_full         ,\n   output                                    p0_wr_empty        ,\n   output      [6:0]                         p0_wr_count        ,\n   output                                    p0_wr_underrun     ,\n   output                                    p0_wr_error        ,\n   input                                     p0_rd_clk          ,\n   input                                     p0_rd_en           ,\n   output      [C_P0_DATA_PORT_SIZE-1:0]     p0_rd_data         ,\n   output                                    p0_rd_full         ,\n   output                                    p0_rd_empty        ,\n   output      [6:0]                         p0_rd_count        ,\n   output                                    p0_rd_overflow     ,\n   output                                    p0_rd_error        ,\n   input                                     p1_arb_en          ,\n   input                                     p1_cmd_clk         ,\n   input                                     p1_cmd_en          ,\n   input       [2:0]                         p1_cmd_instr       ,\n   input       [5:0]                         p1_cmd_bl          ,\n   input       [29:0]                        p1_cmd_byte_addr   ,\n   output                                    p1_cmd_empty       ,\n   output                                    p1_cmd_full        ,\n   input                                     p1_wr_clk          ,\n   input                                     p1_wr_en           ,\n   input       [C_P1_MASK_SIZE-1:0]          p1_wr_mask         ,\n   input       [C_P1_DATA_PORT_SIZE-1:0]     p1_wr_data         ,\n   output                                    p1_wr_full         ,\n   output                                    p1_wr_empty        ,\n   output      [6:0]                         p1_wr_count        ,\n   output                                    p1_wr_underrun     ,\n   output                                    p1_wr_error        ,\n   input                                     p1_rd_clk          ,\n   input                                     p1_rd_en           ,\n   output      [C_P1_DATA_PORT_SIZE-1:0]     p1_rd_data         ,\n   output                                    p1_rd_full         ,\n   output                                    p1_rd_empty        ,\n   output      [6:0]                         p1_rd_count        ,\n   output                                    p1_rd_overflow     ,\n   output                                    p1_rd_error        ,\n   input                                     p2_arb_en          ,\n   input                                     p2_cmd_clk         ,\n   input                                     p2_cmd_en          ,\n   input       [2:0]                         p2_cmd_instr       ,\n   input       [5:0]                         p2_cmd_bl          ,\n   input       [29:0]                        p2_cmd_byte_addr   ,\n   output                                    p2_cmd_empty       ,\n   output                                    p2_cmd_full        ,\n   input                                     p2_wr_clk          ,\n   input                                     p2_wr_en           ,\n   input       [3:0]                         p2_wr_mask         ,\n   input       [31:0]                        p2_wr_data         ,\n   output                                    p2_wr_full         ,\n   output                                    p2_wr_empty        ,\n   output      [6:0]                         p2_wr_count        ,\n   output                                    p2_wr_underrun     ,\n   output                                    p2_wr_error        ,\n   input                                     p2_rd_clk          ,\n   input                                     p2_rd_en           ,\n   output      [31:0]                        p2_rd_data         ,\n   output                                    p2_rd_full         ,\n   output                                    p2_rd_empty        ,\n   output      [6:0]                         p2_rd_count        ,\n   output                                    p2_rd_overflow     ,\n   output                                    p2_rd_error        ,\n   input                                     p3_arb_en          ,\n   input                                     p3_cmd_clk         ,\n   input                                     p3_cmd_en          ,\n   input       [2:0]                         p3_cmd_instr       ,\n   input       [5:0]                         p3_cmd_bl          ,\n   input       [29:0]                        p3_cmd_byte_addr   ,\n   output                                    p3_cmd_empty       ,\n   output                                    p3_cmd_full        ,\n   input                                     p3_wr_clk          ,\n   input                                     p3_wr_en           ,\n   input       [3:0]                         p3_wr_mask         ,\n   input       [31:0]                        p3_wr_data         ,\n   output                                    p3_wr_full         ,\n   output                                    p3_wr_empty        ,\n   output      [6:0]                         p3_wr_count        ,\n   output                                    p3_wr_underrun     ,\n   output                                    p3_wr_error        ,\n   input                                     p3_rd_clk          ,\n   input                                     p3_rd_en           ,\n   output      [31:0]                        p3_rd_data         ,\n   output                                    p3_rd_full         ,\n   output                                    p3_rd_empty        ,\n   output      [6:0]                         p3_rd_count        ,\n   output                                    p3_rd_overflow     ,\n   output                                    p3_rd_error        ,\n   input                                     p4_arb_en          ,\n   input                                     p4_cmd_clk         ,\n   input                                     p4_cmd_en          ,\n   input       [2:0]                         p4_cmd_instr       ,\n   input       [5:0]                         p4_cmd_bl          ,\n   input       [29:0]                        p4_cmd_byte_addr   ,\n   output                                    p4_cmd_empty       ,\n   output                                    p4_cmd_full        ,\n   input                                     p4_wr_clk          ,\n   input                                     p4_wr_en           ,\n   input       [3:0]                         p4_wr_mask         ,\n   input       [31:0]                        p4_wr_data         ,\n   output                                    p4_wr_full         ,\n   output                                    p4_wr_empty        ,\n   output      [6:0]                         p4_wr_count        ,\n   output                                    p4_wr_underrun     ,\n   output                                    p4_wr_error        ,\n   input                                     p4_rd_clk          ,\n   input                                     p4_rd_en           ,\n   output      [31:0]                        p4_rd_data         ,\n   output                                    p4_rd_full         ,\n   output                                    p4_rd_empty        ,\n   output      [6:0]                         p4_rd_count        ,\n   output                                    p4_rd_overflow     ,\n   output                                    p4_rd_error        ,\n   input                                     p5_arb_en          ,\n   input                                     p5_cmd_clk         ,\n   input                                     p5_cmd_en          ,\n   input       [2:0]                         p5_cmd_instr       ,\n   input       [5:0]                         p5_cmd_bl          ,\n   input       [29:0]                        p5_cmd_byte_addr   ,\n   output                                    p5_cmd_empty       ,\n   output                                    p5_cmd_full        ,\n   input                                     p5_wr_clk          ,\n   input                                     p5_wr_en           ,\n   input       [3:0]                         p5_wr_mask         ,\n   input       [31:0]                        p5_wr_data         ,\n   output                                    p5_wr_full         ,\n   output                                    p5_wr_empty        ,\n   output      [6:0]                         p5_wr_count        ,\n   output                                    p5_wr_underrun     ,\n   output                                    p5_wr_error        ,\n   input                                     p5_rd_clk          ,\n   input                                     p5_rd_en           ,\n   output      [31:0]                        p5_rd_data         ,\n   output                                    p5_rd_full         ,\n   output                                    p5_rd_empty        ,\n   output      [6:0]                         p5_rd_count        ,\n   output                                    p5_rd_overflow     ,\n   output                                    p5_rd_error        ,\n   output      [C_MEM_ADDR_WIDTH-1:0]        mcbx_dram_addr     ,\n   output      [C_MEM_BANKADDR_WIDTH-1:0]    mcbx_dram_ba       ,\n   output                                    mcbx_dram_ras_n    ,\n   output                                    mcbx_dram_cas_n    ,\n   output                                    mcbx_dram_we_n     ,\n   output                                    mcbx_dram_cke      ,\n   output                                    mcbx_dram_clk      ,\n   output                                    mcbx_dram_clk_n    ,\n   inout       [C_NUM_DQ_PINS-1:0]           mcbx_dram_dq       ,\n   inout                                     mcbx_dram_dqs      ,\n   inout                                     mcbx_dram_dqs_n    ,\n   inout                                     mcbx_dram_udqs     ,\n   inout                                     mcbx_dram_udqs_n   ,\n   output                                    mcbx_dram_udm      ,\n   output                                    mcbx_dram_ldm      ,\n   output                                    mcbx_dram_odt      ,\n   output                                    mcbx_dram_ddr3_rst ,\n   input                                     calib_recal        ,\n   inout                                     rzq                ,\n   inout                                     zio                ,\n   input                                     ui_read            ,\n   input                                     ui_add             ,\n   input                                     ui_cs              ,\n   input                                     ui_clk             ,\n   input                                     ui_sdi             ,\n   input       [4:0]                         ui_addr            ,\n   input                                     ui_broadcast       ,\n   input                                     ui_drp_update      ,\n   input                                     ui_done_cal        ,\n   input                                     ui_cmd             ,\n   input                                     ui_cmd_in          ,\n   input                                     ui_cmd_en          ,\n   input       [3:0]                         ui_dqcount         ,\n   input                                     ui_dq_lower_dec    ,\n   input                                     ui_dq_lower_inc    ,\n   input                                     ui_dq_upper_dec    ,\n   input                                     ui_dq_upper_inc    ,\n   input                                     ui_udqs_inc        ,\n   input                                     ui_udqs_dec        ,\n   input                                     ui_ldqs_inc        ,\n   input                                     ui_ldqs_dec        ,\n   output      [7:0]                         uo_data            ,\n   output                                    uo_data_valid      ,\n   output                                    uo_done_cal        ,\n   output                                    uo_cmd_ready_in    ,\n   output                                    uo_refrsh_flag     ,\n   output                                    uo_cal_start       ,\n   output                                    uo_sdo             ,\n   output      [31:0]                        status             ,\n   input                                     selfrefresh_enter  ,\n   output                                    selfrefresh_mode   ,\n   \n   input  wire                               s0_axi_aclk        ,\n   input  wire                               s0_axi_aresetn     ,\n   input  wire [C_S0_AXI_ID_WIDTH-1:0]       s0_axi_awid        ,\n   input  wire [C_S0_AXI_ADDR_WIDTH-1:0]     s0_axi_awaddr      ,\n   input  wire [7:0]                         s0_axi_awlen       ,\n   input  wire [2:0]                         s0_axi_awsize      ,\n   input  wire [1:0]                         s0_axi_awburst     ,\n   input  wire [0:0]                         s0_axi_awlock      ,\n   input  wire [3:0]                         s0_axi_awcache     ,\n   input  wire [2:0]                         s0_axi_awprot      ,\n   input  wire [3:0]                         s0_axi_awqos       ,\n   input  wire                               s0_axi_awvalid     ,\n   output wire                               s0_axi_awready     ,\n   input  wire [C_S0_AXI_DATA_WIDTH-1:0]     s0_axi_wdata       ,\n   input  wire [C_S0_AXI_DATA_WIDTH/8-1:0]   s0_axi_wstrb       ,\n   input  wire                               s0_axi_wlast       ,\n   input  wire                               s0_axi_wvalid      ,\n   output wire                               s0_axi_wready      ,\n   output wire [C_S0_AXI_ID_WIDTH-1:0]       s0_axi_bid         ,\n   output wire [1:0]                         s0_axi_bresp       ,\n   output wire                               s0_axi_bvalid      ,\n   input  wire                               s0_axi_bready      ,\n   input  wire [C_S0_AXI_ID_WIDTH-1:0]       s0_axi_arid        ,\n   input  wire [C_S0_AXI_ADDR_WIDTH-1:0]     s0_axi_araddr      ,\n   input  wire [7:0]                         s0_axi_arlen       ,\n   input  wire [2:0]                         s0_axi_arsize      ,\n   input  wire [1:0]                         s0_axi_arburst     ,\n   input  wire [0:0]                         s0_axi_arlock      ,\n   input  wire [3:0]                         s0_axi_arcache     ,\n   input  wire [2:0]                         s0_axi_arprot      ,\n   input  wire [3:0]                         s0_axi_arqos       ,\n   input  wire                               s0_axi_arvalid     ,\n   output wire                               s0_axi_arready     ,\n   output wire [C_S0_AXI_ID_WIDTH-1:0]       s0_axi_rid         ,\n   output wire [C_S0_AXI_DATA_WIDTH-1:0]     s0_axi_rdata       ,\n   output wire [1:0]                         s0_axi_rresp       ,\n   output wire                               s0_axi_rlast       ,\n   output wire                               s0_axi_rvalid      ,\n   input  wire                               s0_axi_rready      ,\n\n   input  wire                               s1_axi_aclk        ,\n   input  wire                               s1_axi_aresetn     ,\n   input  wire [C_S1_AXI_ID_WIDTH-1:0]       s1_axi_awid        ,\n   input  wire [C_S1_AXI_ADDR_WIDTH-1:0]     s1_axi_awaddr      ,\n   input  wire [7:0]                         s1_axi_awlen       ,\n   input  wire [2:0]                         s1_axi_awsize      ,\n   input  wire [1:0]                         s1_axi_awburst     ,\n   input  wire [0:0]                         s1_axi_awlock      ,\n   input  wire [3:0]                         s1_axi_awcache     ,\n   input  wire [2:0]                         s1_axi_awprot      ,\n   input  wire [3:0]                         s1_axi_awqos       ,\n   input  wire                               s1_axi_awvalid     ,\n   output wire                               s1_axi_awready     ,\n   input  wire [C_S1_AXI_DATA_WIDTH-1:0]     s1_axi_wdata       ,\n   input  wire [C_S1_AXI_DATA_WIDTH/8-1:0]   s1_axi_wstrb       ,\n   input  wire                               s1_axi_wlast       ,\n   input  wire                               s1_axi_wvalid      ,\n   output wire                               s1_axi_wready      ,\n   output wire [C_S1_AXI_ID_WIDTH-1:0]       s1_axi_bid         ,\n   output wire [1:0]                         s1_axi_bresp       ,\n   output wire                               s1_axi_bvalid      ,\n   input  wire                               s1_axi_bready      ,\n   input  wire [C_S1_AXI_ID_WIDTH-1:0]       s1_axi_arid        ,\n   input  wire [C_S1_AXI_ADDR_WIDTH-1:0]     s1_axi_araddr      ,\n   input  wire [7:0]                         s1_axi_arlen       ,\n   input  wire [2:0]                         s1_axi_arsize      ,\n   input  wire [1:0]                         s1_axi_arburst     ,\n   input  wire [0:0]                         s1_axi_arlock      ,\n   input  wire [3:0]                         s1_axi_arcache     ,\n   input  wire [2:0]                         s1_axi_arprot      ,\n   input  wire [3:0]                         s1_axi_arqos       ,\n   input  wire                               s1_axi_arvalid     ,\n   output wire                               s1_axi_arready     ,\n   output wire [C_S1_AXI_ID_WIDTH-1:0]       s1_axi_rid         ,\n   output wire [C_S1_AXI_DATA_WIDTH-1:0]     s1_axi_rdata       ,\n   output wire [1:0]                         s1_axi_rresp       ,\n   output wire                               s1_axi_rlast       ,\n   output wire                               s1_axi_rvalid      ,\n   input  wire                               s1_axi_rready      ,\n\n   input  wire                               s2_axi_aclk        ,\n   input  wire                               s2_axi_aresetn     ,\n   input  wire [C_S2_AXI_ID_WIDTH-1:0]       s2_axi_awid        ,\n   input  wire [C_S2_AXI_ADDR_WIDTH-1:0]     s2_axi_awaddr      ,\n   input  wire [7:0]                         s2_axi_awlen       ,\n   input  wire [2:0]                         s2_axi_awsize      ,\n   input  wire [1:0]                         s2_axi_awburst     ,\n   input  wire [0:0]                         s2_axi_awlock      ,\n   input  wire [3:0]                         s2_axi_awcache     ,\n   input  wire [2:0]                         s2_axi_awprot      ,\n   input  wire [3:0]                         s2_axi_awqos       ,\n   input  wire                               s2_axi_awvalid     ,\n   output wire                               s2_axi_awready     ,\n   input  wire [C_S2_AXI_DATA_WIDTH-1:0]     s2_axi_wdata       ,\n   input  wire [C_S2_AXI_DATA_WIDTH/8-1:0]   s2_axi_wstrb       ,\n   input  wire                               s2_axi_wlast       ,\n   input  wire                               s2_axi_wvalid      ,\n   output wire                               s2_axi_wready      ,\n   output wire [C_S2_AXI_ID_WIDTH-1:0]       s2_axi_bid         ,\n   output wire [1:0]                         s2_axi_bresp       ,\n   output wire                               s2_axi_bvalid      ,\n   input  wire                               s2_axi_bready      ,\n   input  wire [C_S2_AXI_ID_WIDTH-1:0]       s2_axi_arid        ,\n   input  wire [C_S2_AXI_ADDR_WIDTH-1:0]     s2_axi_araddr      ,\n   input  wire [7:0]                         s2_axi_arlen       ,\n   input  wire [2:0]                         s2_axi_arsize      ,\n   input  wire [1:0]                         s2_axi_arburst     ,\n   input  wire [0:0]                         s2_axi_arlock      ,\n   input  wire [3:0]                         s2_axi_arcache     ,\n   input  wire [2:0]                         s2_axi_arprot      ,\n   input  wire [3:0]                         s2_axi_arqos       ,\n   input  wire                               s2_axi_arvalid     ,\n   output wire                               s2_axi_arready     ,\n   output wire [C_S2_AXI_ID_WIDTH-1:0]       s2_axi_rid         ,\n   output wire [C_S2_AXI_DATA_WIDTH-1:0]     s2_axi_rdata       ,\n   output wire [1:0]                         s2_axi_rresp       ,\n   output wire                               s2_axi_rlast       ,\n   output wire                               s2_axi_rvalid      ,\n   input  wire                               s2_axi_rready      ,\n\n   input  wire                               s3_axi_aclk        ,\n   input  wire                               s3_axi_aresetn     ,\n   input  wire [C_S3_AXI_ID_WIDTH-1:0]       s3_axi_awid        ,\n   input  wire [C_S3_AXI_ADDR_WIDTH-1:0]     s3_axi_awaddr      ,\n   input  wire [7:0]                         s3_axi_awlen       ,\n   input  wire [2:0]                         s3_axi_awsize      ,\n   input  wire [1:0]                         s3_axi_awburst     ,\n   input  wire [0:0]                         s3_axi_awlock      ,\n   input  wire [3:0]                         s3_axi_awcache     ,\n   input  wire [2:0]                         s3_axi_awprot      ,\n   input  wire [3:0]                         s3_axi_awqos       ,\n   input  wire                               s3_axi_awvalid     ,\n   output wire                               s3_axi_awready     ,\n   input  wire [C_S3_AXI_DATA_WIDTH-1:0]     s3_axi_wdata       ,\n   input  wire [C_S3_AXI_DATA_WIDTH/8-1:0]   s3_axi_wstrb       ,\n   input  wire                               s3_axi_wlast       ,\n   input  wire                               s3_axi_wvalid      ,\n   output wire                               s3_axi_wready      ,\n   output wire [C_S3_AXI_ID_WIDTH-1:0]       s3_axi_bid         ,\n   output wire [1:0]                         s3_axi_bresp       ,\n   output wire                               s3_axi_bvalid      ,\n   input  wire                               s3_axi_bready      ,\n   input  wire [C_S3_AXI_ID_WIDTH-1:0]       s3_axi_arid        ,\n   input  wire [C_S3_AXI_ADDR_WIDTH-1:0]     s3_axi_araddr      ,\n   input  wire [7:0]                         s3_axi_arlen       ,\n   input  wire [2:0]                         s3_axi_arsize      ,\n   input  wire [1:0]                         s3_axi_arburst     ,\n   input  wire [0:0]                         s3_axi_arlock      ,\n   input  wire [3:0]                         s3_axi_arcache     ,\n   input  wire [2:0]                         s3_axi_arprot      ,\n   input  wire [3:0]                         s3_axi_arqos       ,\n   input  wire                               s3_axi_arvalid     ,\n   output wire                               s3_axi_arready     ,\n   output wire [C_S3_AXI_ID_WIDTH-1:0]       s3_axi_rid         ,\n   output wire [C_S3_AXI_DATA_WIDTH-1:0]     s3_axi_rdata       ,\n   output wire [1:0]                         s3_axi_rresp       ,\n   output wire                               s3_axi_rlast       ,\n   output wire                               s3_axi_rvalid      ,\n   input  wire                               s3_axi_rready      ,\n\n   input  wire                               s4_axi_aclk        ,\n   input  wire                               s4_axi_aresetn     ,\n   input  wire [C_S4_AXI_ID_WIDTH-1:0]       s4_axi_awid        ,\n   input  wire [C_S4_AXI_ADDR_WIDTH-1:0]     s4_axi_awaddr      ,\n   input  wire [7:0]                         s4_axi_awlen       ,\n   input  wire [2:0]                         s4_axi_awsize      ,\n   input  wire [1:0]                         s4_axi_awburst     ,\n   input  wire [0:0]                         s4_axi_awlock      ,\n   input  wire [3:0]                         s4_axi_awcache     ,\n   input  wire [2:0]                         s4_axi_awprot      ,\n   input  wire [3:0]                         s4_axi_awqos       ,\n   input  wire                               s4_axi_awvalid     ,\n   output wire                               s4_axi_awready     ,\n   input  wire [C_S4_AXI_DATA_WIDTH-1:0]     s4_axi_wdata       ,\n   input  wire [C_S4_AXI_DATA_WIDTH/8-1:0]   s4_axi_wstrb       ,\n   input  wire                               s4_axi_wlast       ,\n   input  wire                               s4_axi_wvalid      ,\n   output wire                               s4_axi_wready      ,\n   output wire [C_S4_AXI_ID_WIDTH-1:0]       s4_axi_bid         ,\n   output wire [1:0]                         s4_axi_bresp       ,\n   output wire                               s4_axi_bvalid      ,\n   input  wire                               s4_axi_bready      ,\n   input  wire [C_S4_AXI_ID_WIDTH-1:0]       s4_axi_arid        ,\n   input  wire [C_S4_AXI_ADDR_WIDTH-1:0]     s4_axi_araddr      ,\n   input  wire [7:0]                         s4_axi_arlen       ,\n   input  wire [2:0]                         s4_axi_arsize      ,\n   input  wire [1:0]                         s4_axi_arburst     ,\n   input  wire [0:0]                         s4_axi_arlock      ,\n   input  wire [3:0]                         s4_axi_arcache     ,\n   input  wire [2:0]                         s4_axi_arprot      ,\n   input  wire [3:0]                         s4_axi_arqos       ,\n   input  wire                               s4_axi_arvalid     ,\n   output wire                               s4_axi_arready     ,\n   output wire [C_S4_AXI_ID_WIDTH-1:0]       s4_axi_rid         ,\n   output wire [C_S4_AXI_DATA_WIDTH-1:0]     s4_axi_rdata       ,\n   output wire [1:0]                         s4_axi_rresp       ,\n   output wire                               s4_axi_rlast       ,\n   output wire                               s4_axi_rvalid      ,\n   input  wire                               s4_axi_rready      ,\n\n   input  wire                               s5_axi_aclk        ,\n   input  wire                               s5_axi_aresetn     ,\n   input  wire [C_S5_AXI_ID_WIDTH-1:0]       s5_axi_awid        ,\n   input  wire [C_S5_AXI_ADDR_WIDTH-1:0]     s5_axi_awaddr      ,\n   input  wire [7:0]                         s5_axi_awlen       ,\n   input  wire [2:0]                         s5_axi_awsize      ,\n   input  wire [1:0]                         s5_axi_awburst     ,\n   input  wire [0:0]                         s5_axi_awlock      ,\n   input  wire [3:0]                         s5_axi_awcache     ,\n   input  wire [2:0]                         s5_axi_awprot      ,\n   input  wire [3:0]                         s5_axi_awqos       ,\n   input  wire                               s5_axi_awvalid     ,\n   output wire                               s5_axi_awready     ,\n   input  wire [C_S5_AXI_DATA_WIDTH-1:0]     s5_axi_wdata       ,\n   input  wire [C_S5_AXI_DATA_WIDTH/8-1:0]   s5_axi_wstrb       ,\n   input  wire                               s5_axi_wlast       ,\n   input  wire                               s5_axi_wvalid      ,\n   output wire                               s5_axi_wready      ,\n   output wire [C_S5_AXI_ID_WIDTH-1:0]       s5_axi_bid         ,\n   output wire [1:0]                         s5_axi_bresp       ,\n   output wire                               s5_axi_bvalid      ,\n   input  wire                               s5_axi_bready      ,\n   input  wire [C_S5_AXI_ID_WIDTH-1:0]       s5_axi_arid        ,\n   input  wire [C_S5_AXI_ADDR_WIDTH-1:0]     s5_axi_araddr      ,\n   input  wire [7:0]                         s5_axi_arlen       ,\n   input  wire [2:0]                         s5_axi_arsize      ,\n   input  wire [1:0]                         s5_axi_arburst     ,\n   input  wire [0:0]                         s5_axi_arlock      ,\n   input  wire [3:0]                         s5_axi_arcache     ,\n   input  wire [2:0]                         s5_axi_arprot      ,\n   input  wire [3:0]                         s5_axi_arqos       ,\n   input  wire                               s5_axi_arvalid     ,\n   output wire                               s5_axi_arready     ,\n   output wire [C_S5_AXI_ID_WIDTH-1:0]       s5_axi_rid         ,\n   output wire [C_S5_AXI_DATA_WIDTH-1:0]     s5_axi_rdata       ,\n   output wire [1:0]                         s5_axi_rresp       ,\n   output wire                               s5_axi_rlast       ,\n   output wire                               s5_axi_rvalid      ,\n   input  wire                               s5_axi_rready\n   );\n\n\n\n\n\nfunction [17:0] blso (\n  input [17:0] a,\n  input integer shift,\n  input integer width\n);\nbegin : func_blso\n  integer i;\n  integer w;\n  integer s;\n  w = width*3;\n  s = (shift*3) % w;\n  blso = 18'o000000;\n  for (i = 0; i < w; i = i + 1) begin\n    blso[i] = a[(i+w-s)%w];\n    \n  end\nend\nendfunction\n\n\n\nfunction [17:0] rr (\n  input [5:0] port_enable,\n  input integer port_config,\n  input integer slot_num\n);\nbegin : func_rr\n  integer i;\n  integer max_ports;\n  integer num_ports;\n  integer port_cnt;\n\n  case (port_config)\n    1: max_ports = 6;\n    2: max_ports = 4;\n    3: max_ports = 3;\n    4: max_ports = 2;\n    5: max_ports = 1;\n\n    default : $display(\"ERROR: Port Config can't be %d\", port_config);\n\n  endcase\n\n  num_ports = 0;\n  for (i = 0; i < max_ports; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n\n  rr = 18'o000000;\n  port_cnt = 0;\n\n  for (i = (num_ports-1); i >= 0; i = i - 1) begin\n    while (port_enable[port_cnt] != 1'b1) begin\n      port_cnt = port_cnt + 1;\n    end\n    rr[i*3 +: 3] = port_cnt[2:0];\n    port_cnt = port_cnt +1;\n  end\n\n\n  rr = blso(rr, slot_num, num_ports);\nend\nendfunction\n\nfunction [17:0] convert_arb_slot (\n  input [5:0]   port_enable,\n  input integer port_config,\n  input [17:0]  mig_arb_slot\n);\nbegin : func_convert_arb_slot\n  integer i;\n  integer num_ports;\n  integer mig_port_num;\n  reg [17:0] port_map;\n  num_ports = 0;\n\n  \n  case (port_config)\n    1: port_map = 18'o543210;\n    2: port_map = 18'o774210;\n    3: port_map = 18'o777420;\n    4: port_map = 18'o777720;\n    5: port_map = 18'o777770;\n\n    default : $display (\"ERROR: Invalid Port Configuration.\");\n\n  endcase\n\n  \n  for (i = 0; i < 6; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n\n  \n  for (i = 0; i < 6; i = i + 1) begin\n    if (i < num_ports) begin\n      mig_port_num = mig_arb_slot[3*(num_ports-i-1) +: 3];\n      convert_arb_slot[3*i +: 3] = port_map[3*mig_port_num +: 3];\n    end else begin\n      convert_arb_slot[3*i +: 3] = 3'b111;\n    end\n  end\nend\nendfunction\n\n\n\n\nfunction integer calc_num_time_slots (\n  input [5:0]   port_enable,\n  input integer port_config\n);\nbegin : func_calc_num_tim_slots\n  integer num_ports;\n  integer i;\n  num_ports = 0;\n  for (i = 0; i < 6; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n  calc_num_time_slots = (port_config == 1 && num_ports == 5) ? 10 : 12;\nend\nendfunction\n\n\n\n  localparam P_S0_AXI_ADDRMASK = C_S0_AXI_BASEADDR ^ C_S0_AXI_HIGHADDR;\n  localparam P_S1_AXI_ADDRMASK = C_S1_AXI_BASEADDR ^ C_S1_AXI_HIGHADDR;\n  localparam P_S2_AXI_ADDRMASK = C_S2_AXI_BASEADDR ^ C_S2_AXI_HIGHADDR;\n  localparam P_S3_AXI_ADDRMASK = C_S3_AXI_BASEADDR ^ C_S3_AXI_HIGHADDR;\n  localparam P_S4_AXI_ADDRMASK = C_S4_AXI_BASEADDR ^ C_S4_AXI_HIGHADDR;\n  localparam P_S5_AXI_ADDRMASK = C_S5_AXI_BASEADDR ^ C_S5_AXI_HIGHADDR;\n  localparam P_PORT_CONFIG     = (C_PORT_CONFIG == \"B32_B32_B32_B32\") ? 2 :\n                                 (C_PORT_CONFIG == \"B64_B32_B32\"    ) ? 3 :\n                                 (C_PORT_CONFIG == \"B64_B64\"        ) ? 4 :\n                                 (C_PORT_CONFIG == \"B128\"           ) ? 5 :\n                                 1; \n  localparam P_ARB_NUM_TIME_SLOTS = (C_ARB_ALGORITHM == 0) ? calc_num_time_slots(C_PORT_ENABLE, P_PORT_CONFIG) : C_ARB_NUM_TIME_SLOTS;\n  localparam P_0_ARB_TIME_SLOT_0 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 0 ) : C_ARB_TIME_SLOT_0 ;\n  localparam P_0_ARB_TIME_SLOT_1 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 1 ) : C_ARB_TIME_SLOT_1 ;\n  localparam P_0_ARB_TIME_SLOT_2 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 2 ) : C_ARB_TIME_SLOT_2 ;\n  localparam P_0_ARB_TIME_SLOT_3 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 3 ) : C_ARB_TIME_SLOT_3 ;\n  localparam P_0_ARB_TIME_SLOT_4 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 4 ) : C_ARB_TIME_SLOT_4 ;\n  localparam P_0_ARB_TIME_SLOT_5 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 5 ) : C_ARB_TIME_SLOT_5 ;\n  localparam P_0_ARB_TIME_SLOT_6 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 6 ) : C_ARB_TIME_SLOT_6 ;\n  localparam P_0_ARB_TIME_SLOT_7 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 7 ) : C_ARB_TIME_SLOT_7 ;\n  localparam P_0_ARB_TIME_SLOT_8 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 8 ) : C_ARB_TIME_SLOT_8 ;\n  localparam P_0_ARB_TIME_SLOT_9 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 9 ) : C_ARB_TIME_SLOT_9 ;\n  localparam P_0_ARB_TIME_SLOT_10 = (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 10) : C_ARB_TIME_SLOT_10;\n  localparam P_0_ARB_TIME_SLOT_11 = (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 11) : C_ARB_TIME_SLOT_11;\n  localparam P_ARB_TIME_SLOT_0 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_0);\n  localparam P_ARB_TIME_SLOT_1 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_1);\n  localparam P_ARB_TIME_SLOT_2 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_2);\n  localparam P_ARB_TIME_SLOT_3 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_3);\n  localparam P_ARB_TIME_SLOT_4 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_4);\n  localparam P_ARB_TIME_SLOT_5 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_5);\n  localparam P_ARB_TIME_SLOT_6 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_6);\n  localparam P_ARB_TIME_SLOT_7 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_7);\n  localparam P_ARB_TIME_SLOT_8 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_8);\n  localparam P_ARB_TIME_SLOT_9 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_9);\n  localparam P_ARB_TIME_SLOT_10 = convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_10);\n  localparam P_ARB_TIME_SLOT_11 = convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_11);\n\n\n\n\n  wire [C_S0_AXI_ADDR_WIDTH-1:0] s0_axi_araddr_i;\n  wire [C_S0_AXI_ADDR_WIDTH-1:0] s0_axi_awaddr_i;\n  wire                           p0_arb_en_i;\n  wire                           p0_cmd_clk_i;\n  wire                           p0_cmd_en_i;\n  wire [2:0]                     p0_cmd_instr_i;\n  wire [5:0]                     p0_cmd_bl_i;\n  wire [29:0]                    p0_cmd_byte_addr_i;\n  wire                           p0_cmd_empty_i;\n  wire                           p0_cmd_full_i;\n  wire                           p0_wr_clk_i;\n  wire                           p0_wr_en_i;\n  wire [C_P0_MASK_SIZE-1:0]      p0_wr_mask_i;\n  wire [C_P0_DATA_PORT_SIZE-1:0] p0_wr_data_i;\n  wire                           p0_wr_full_i;\n  wire                           p0_wr_empty_i;\n  wire [6:0]                     p0_wr_count_i;\n  wire                           p0_wr_underrun_i;\n  wire                           p0_wr_error_i;\n  wire                           p0_rd_clk_i;\n  wire                           p0_rd_en_i;\n  wire [C_P0_DATA_PORT_SIZE-1:0] p0_rd_data_i;\n  wire                           p0_rd_full_i;\n  wire                           p0_rd_empty_i;\n  wire [6:0]                     p0_rd_count_i;\n  wire                           p0_rd_overflow_i;\n  wire                           p0_rd_error_i;\n\n  wire [C_S1_AXI_ADDR_WIDTH-1:0] s1_axi_araddr_i;\n  wire [C_S1_AXI_ADDR_WIDTH-1:0] s1_axi_awaddr_i;\n  wire                           p1_arb_en_i;\n  wire                           p1_cmd_clk_i;\n  wire                           p1_cmd_en_i;\n  wire [2:0]                     p1_cmd_instr_i;\n  wire [5:0]                     p1_cmd_bl_i;\n  wire [29:0]                    p1_cmd_byte_addr_i;\n  wire                           p1_cmd_empty_i;\n  wire                           p1_cmd_full_i;\n  wire                           p1_wr_clk_i;\n  wire                           p1_wr_en_i;\n  wire [C_P1_MASK_SIZE-1:0]      p1_wr_mask_i;\n  wire [C_P1_DATA_PORT_SIZE-1:0] p1_wr_data_i;\n  wire                           p1_wr_full_i;\n  wire                           p1_wr_empty_i;\n  wire [6:0]                     p1_wr_count_i;\n  wire                           p1_wr_underrun_i;\n  wire                           p1_wr_error_i;\n  wire                           p1_rd_clk_i;\n  wire                           p1_rd_en_i;\n  wire [C_P1_DATA_PORT_SIZE-1:0] p1_rd_data_i;\n  wire                           p1_rd_full_i;\n  wire                           p1_rd_empty_i;\n  wire [6:0]                     p1_rd_count_i;\n  wire                           p1_rd_overflow_i;\n  wire                           p1_rd_error_i;\n\n  wire [C_S2_AXI_ADDR_WIDTH-1:0] s2_axi_araddr_i;\n  wire [C_S2_AXI_ADDR_WIDTH-1:0] s2_axi_awaddr_i;\n  wire                           p2_arb_en_i;\n  wire                           p2_cmd_clk_i;\n  wire                           p2_cmd_en_i;\n  wire [2:0]                     p2_cmd_instr_i;\n  wire [5:0]                     p2_cmd_bl_i;\n  wire [29:0]                    p2_cmd_byte_addr_i;\n  wire                           p2_cmd_empty_i;\n  wire                           p2_cmd_full_i;\n  wire                           p2_wr_clk_i;\n  wire                           p2_wr_en_i;\n  wire [3:0]                     p2_wr_mask_i;\n  wire [31:0]                    p2_wr_data_i;\n  wire                           p2_wr_full_i;\n  wire                           p2_wr_empty_i;\n  wire [6:0]                     p2_wr_count_i;\n  wire                           p2_wr_underrun_i;\n  wire                           p2_wr_error_i;\n  wire                           p2_rd_clk_i;\n  wire                           p2_rd_en_i;\n  wire [31:0]                    p2_rd_data_i;\n  wire                           p2_rd_full_i;\n  wire                           p2_rd_empty_i;\n  wire [6:0]                     p2_rd_count_i;\n  wire                           p2_rd_overflow_i;\n  wire                           p2_rd_error_i;\n\n  wire [C_S3_AXI_ADDR_WIDTH-1:0] s3_axi_araddr_i;\n  wire [C_S3_AXI_ADDR_WIDTH-1:0] s3_axi_awaddr_i;\n  wire                           p3_arb_en_i;\n  wire                           p3_cmd_clk_i;\n  wire                           p3_cmd_en_i;\n  wire [2:0]                     p3_cmd_instr_i;\n  wire [5:0]                     p3_cmd_bl_i;\n  wire [29:0]                    p3_cmd_byte_addr_i;\n  wire                           p3_cmd_empty_i;\n  wire                           p3_cmd_full_i;\n  wire                           p3_wr_clk_i;\n  wire                           p3_wr_en_i;\n  wire [3:0]                     p3_wr_mask_i;\n  wire [31:0]                    p3_wr_data_i;\n  wire                           p3_wr_full_i;\n  wire                           p3_wr_empty_i;\n  wire [6:0]                     p3_wr_count_i;\n  wire                           p3_wr_underrun_i;\n  wire                           p3_wr_error_i;\n  wire                           p3_rd_clk_i;\n  wire                           p3_rd_en_i;\n  wire [31:0]                    p3_rd_data_i;\n  wire                           p3_rd_full_i;\n  wire                           p3_rd_empty_i;\n  wire [6:0]                     p3_rd_count_i;\n  wire                           p3_rd_overflow_i;\n  wire                           p3_rd_error_i;\n\n  wire [C_S4_AXI_ADDR_WIDTH-1:0] s4_axi_araddr_i;\n  wire [C_S4_AXI_ADDR_WIDTH-1:0] s4_axi_awaddr_i;\n  wire                           p4_arb_en_i;\n  wire                           p4_cmd_clk_i;\n  wire                           p4_cmd_en_i;\n  wire [2:0]                     p4_cmd_instr_i;\n  wire [5:0]                     p4_cmd_bl_i;\n  wire [29:0]                    p4_cmd_byte_addr_i;\n  wire                           p4_cmd_empty_i;\n  wire                           p4_cmd_full_i;\n  wire                           p4_wr_clk_i;\n  wire                           p4_wr_en_i;\n  wire [3:0]                     p4_wr_mask_i;\n  wire [31:0]                    p4_wr_data_i;\n  wire                           p4_wr_full_i;\n  wire                           p4_wr_empty_i;\n  wire [6:0]                     p4_wr_count_i;\n  wire                           p4_wr_underrun_i;\n  wire                           p4_wr_error_i;\n  wire                           p4_rd_clk_i;\n  wire                           p4_rd_en_i;\n  wire [31:0]                    p4_rd_data_i;\n  wire                           p4_rd_full_i;\n  wire                           p4_rd_empty_i;\n  wire [6:0]                     p4_rd_count_i;\n  wire                           p4_rd_overflow_i;\n  wire                           p4_rd_error_i;\n\n  wire [C_S5_AXI_ADDR_WIDTH-1:0] s5_axi_araddr_i;\n  wire [C_S5_AXI_ADDR_WIDTH-1:0] s5_axi_awaddr_i;\n  wire                           p5_arb_en_i;\n  wire                           p5_cmd_clk_i;\n  wire                           p5_cmd_en_i;\n  wire [2:0]                     p5_cmd_instr_i;\n  wire [5:0]                     p5_cmd_bl_i;\n  wire [29:0]                    p5_cmd_byte_addr_i;\n  wire                           p5_cmd_empty_i;\n  wire                           p5_cmd_full_i;\n  wire                           p5_wr_clk_i;\n  wire                           p5_wr_en_i;\n  wire [3:0]                     p5_wr_mask_i;\n  wire [31:0]                    p5_wr_data_i;\n  wire                           p5_wr_full_i;\n  wire                           p5_wr_empty_i;\n  wire [6:0]                     p5_wr_count_i;\n  wire                           p5_wr_underrun_i;\n  wire                           p5_wr_error_i;\n  wire                           p5_rd_clk_i;\n  wire                           p5_rd_en_i;\n  wire [31:0]                    p5_rd_data_i;\n  wire                           p5_rd_full_i;\n  wire                           p5_rd_empty_i;\n  wire [6:0]                     p5_rd_count_i;\n  wire                           p5_rd_overflow_i;\n  wire                           p5_rd_error_i;\n\n  wire                           ioclk0;\n  wire                           ioclk180;\n  wire                           pll_ce_0_i;\n  wire                           pll_ce_90_i;\n\n  generate\n    if (C_MCB_USE_EXTERNAL_BUFPLL == 0) begin : gen_spartan6_bufpll_mcb\n      \n      BUFPLL_MCB #\n      (\n      .DIVIDE   (2),\n      .LOCK_SRC (\"LOCK_TO_0\")\n      )\n      bufpll_0\n        (\n        .IOCLK0       (ioclk0),\n        .IOCLK1       (ioclk180),\n        .GCLK         (ui_clk),\n        .LOCKED       (pll_lock),\n        .LOCK         (pll_lock_bufpll_o),\n        .SERDESSTROBE0(pll_ce_0_i),\n        .SERDESSTROBE1(pll_ce_90_i),\n        .PLLIN0       (sysclk_2x),\n        .PLLIN1       (sysclk_2x_180)\n        );\n      end else begin : gen_spartan6_no_bufpll_mcb\n        \n        assign pll_ce_0_i   = pll_ce_0;\n        assign pll_ce_90_i  = pll_ce_90;\n        assign ioclk0     = sysclk_2x;\n        assign ioclk180   = sysclk_2x_180;\n        assign pll_lock_bufpll_o = pll_lock;\n      end\n  endgenerate\n\n  assign sysclk_2x_bufpll_o     = ioclk0;\n  assign sysclk_2x_180_bufpll_o = ioclk180;\n  assign pll_ce_0_bufpll_o      = pll_ce_0_i;\n  assign pll_ce_90_bufpll_o     = pll_ce_90_i;\n\nmcb_raw_wrapper #\n   (\n   .C_MEMCLK_PERIOD           ( C_MEMCLK_PERIOD           ),\n   .C_PORT_ENABLE             ( C_PORT_ENABLE             ),\n   .C_MEM_ADDR_ORDER          ( C_MEM_ADDR_ORDER          ),\n   .C_USR_INTERFACE_MODE      ( C_USR_INTERFACE_MODE      ),\n   .C_ARB_NUM_TIME_SLOTS      ( P_ARB_NUM_TIME_SLOTS      ),\n   .C_ARB_TIME_SLOT_0         ( P_ARB_TIME_SLOT_0         ),\n   .C_ARB_TIME_SLOT_1         ( P_ARB_TIME_SLOT_1         ),\n   .C_ARB_TIME_SLOT_2         ( P_ARB_TIME_SLOT_2         ),\n   .C_ARB_TIME_SLOT_3         ( P_ARB_TIME_SLOT_3         ),\n   .C_ARB_TIME_SLOT_4         ( P_ARB_TIME_SLOT_4         ),\n   .C_ARB_TIME_SLOT_5         ( P_ARB_TIME_SLOT_5         ),\n   .C_ARB_TIME_SLOT_6         ( P_ARB_TIME_SLOT_6         ),\n   .C_ARB_TIME_SLOT_7         ( P_ARB_TIME_SLOT_7         ),\n   .C_ARB_TIME_SLOT_8         ( P_ARB_TIME_SLOT_8         ),\n   .C_ARB_TIME_SLOT_9         ( P_ARB_TIME_SLOT_9         ),\n   .C_ARB_TIME_SLOT_10        ( P_ARB_TIME_SLOT_10        ),\n   .C_ARB_TIME_SLOT_11        ( P_ARB_TIME_SLOT_11        ),\n   .C_PORT_CONFIG             ( C_PORT_CONFIG             ),\n   .C_MEM_TRAS                ( C_MEM_TRAS                ),\n   .C_MEM_TRCD                ( C_MEM_TRCD                ),\n   .C_MEM_TREFI               ( C_MEM_TREFI               ),\n   .C_MEM_TRFC                ( C_MEM_TRFC                ),\n   .C_MEM_TRP                 ( C_MEM_TRP                 ),\n   .C_MEM_TWR                 ( C_MEM_TWR                 ),\n   .C_MEM_TRTP                ( C_MEM_TRTP                ),\n   .C_MEM_TWTR                ( C_MEM_TWTR                ),\n   .C_NUM_DQ_PINS             ( C_NUM_DQ_PINS             ),\n   .C_MEM_TYPE                ( C_MEM_TYPE                ),\n   .C_MEM_DENSITY             ( C_MEM_DENSITY             ),\n   .C_MEM_BURST_LEN           ( C_MEM_BURST_LEN           ),\n   .C_MEM_CAS_LATENCY         ( C_MEM_CAS_LATENCY         ),\n   .C_MEM_ADDR_WIDTH          ( C_MEM_ADDR_WIDTH          ),\n   .C_MEM_BANKADDR_WIDTH      ( C_MEM_BANKADDR_WIDTH      ),\n   .C_MEM_NUM_COL_BITS        ( C_MEM_NUM_COL_BITS        ),\n   .C_MEM_DDR3_CAS_LATENCY    ( C_MEM_DDR3_CAS_LATENCY    ),\n   .C_MEM_MOBILE_PA_SR        ( C_MEM_MOBILE_PA_SR        ),\n   .C_MEM_DDR1_2_ODS          ( C_MEM_DDR1_2_ODS          ),\n   .C_MEM_DDR3_ODS            ( C_MEM_DDR3_ODS            ),\n   .C_MEM_DDR2_RTT            ( C_MEM_DDR2_RTT            ),\n   .C_MEM_DDR3_RTT            ( C_MEM_DDR3_RTT            ),\n   .C_MEM_MDDR_ODS            ( C_MEM_MDDR_ODS            ),\n   .C_MEM_DDR2_DIFF_DQS_EN    ( C_MEM_DDR2_DIFF_DQS_EN    ),\n   .C_MEM_DDR2_3_PA_SR        ( C_MEM_DDR2_3_PA_SR        ),\n   .C_MEM_DDR3_CAS_WR_LATENCY ( C_MEM_DDR3_CAS_WR_LATENCY ),\n   .C_MEM_DDR3_AUTO_SR        ( C_MEM_DDR3_AUTO_SR        ),\n   .C_MEM_DDR2_3_HIGH_TEMP_SR ( C_MEM_DDR2_3_HIGH_TEMP_SR ),\n   .C_MEM_DDR3_DYN_WRT_ODT    ( C_MEM_DDR3_DYN_WRT_ODT    ),\n   \n   .C_MEM_TZQINIT_MAXCNT      ( C_MEM_TZQINIT_MAXCNT - 16 ),\n   .C_MC_CALIB_BYPASS         ( C_MC_CALIB_BYPASS         ),\n   .C_MC_CALIBRATION_RA       ( C_MC_CALIBRATION_RA       ),\n   .C_MC_CALIBRATION_BA       ( C_MC_CALIBRATION_BA       ),\n   .C_CALIB_SOFT_IP           ( C_CALIB_SOFT_IP           ),\n   .C_SKIP_IN_TERM_CAL        ( C_SKIP_IN_TERM_CAL        ),\n   .C_SKIP_DYNAMIC_CAL        ( C_SKIP_DYNAMIC_CAL        ),\n   .C_SKIP_DYN_IN_TERM        ( C_SKIP_DYN_IN_TERM        ),\n   .LDQSP_TAP_DELAY_VAL       ( LDQSP_TAP_DELAY_VAL       ),\n   .UDQSP_TAP_DELAY_VAL       ( UDQSP_TAP_DELAY_VAL       ),\n   .LDQSN_TAP_DELAY_VAL       ( LDQSN_TAP_DELAY_VAL       ),\n   .UDQSN_TAP_DELAY_VAL       ( UDQSN_TAP_DELAY_VAL       ),\n   .DQ0_TAP_DELAY_VAL         ( DQ0_TAP_DELAY_VAL         ),\n   .DQ1_TAP_DELAY_VAL         ( DQ1_TAP_DELAY_VAL         ),\n   .DQ2_TAP_DELAY_VAL         ( DQ2_TAP_DELAY_VAL         ),\n   .DQ3_TAP_DELAY_VAL         ( DQ3_TAP_DELAY_VAL         ),\n   .DQ4_TAP_DELAY_VAL         ( DQ4_TAP_DELAY_VAL         ),\n   .DQ5_TAP_DELAY_VAL         ( DQ5_TAP_DELAY_VAL         ),\n   .DQ6_TAP_DELAY_VAL         ( DQ6_TAP_DELAY_VAL         ),\n   .DQ7_TAP_DELAY_VAL         ( DQ7_TAP_DELAY_VAL         ),\n   .DQ8_TAP_DELAY_VAL         ( DQ8_TAP_DELAY_VAL         ),\n   .DQ9_TAP_DELAY_VAL         ( DQ9_TAP_DELAY_VAL         ),\n   .DQ10_TAP_DELAY_VAL        ( DQ10_TAP_DELAY_VAL        ),\n   .DQ11_TAP_DELAY_VAL        ( DQ11_TAP_DELAY_VAL        ),\n   .DQ12_TAP_DELAY_VAL        ( DQ12_TAP_DELAY_VAL        ),\n   .DQ13_TAP_DELAY_VAL        ( DQ13_TAP_DELAY_VAL        ),\n   .DQ14_TAP_DELAY_VAL        ( DQ14_TAP_DELAY_VAL        ),\n   .DQ15_TAP_DELAY_VAL        ( DQ15_TAP_DELAY_VAL        ),\n   .C_MC_CALIBRATION_CA       ( C_MC_CALIBRATION_CA       ),\n   .C_MC_CALIBRATION_CLK_DIV  ( C_MC_CALIBRATION_CLK_DIV  ),\n   .C_MC_CALIBRATION_MODE     ( C_MC_CALIBRATION_MODE     ),\n   .C_MC_CALIBRATION_DELAY    ( C_MC_CALIBRATION_DELAY    ),\n   \n   .C_SIMULATION              ( C_SIMULATION              ),\n   \n   .C_P0_MASK_SIZE            ( C_P0_MASK_SIZE            ),\n   .C_P0_DATA_PORT_SIZE       ( C_P0_DATA_PORT_SIZE       ),\n   .C_P1_MASK_SIZE            ( C_P1_MASK_SIZE            ),\n   .C_P1_DATA_PORT_SIZE       ( C_P1_DATA_PORT_SIZE       )\n   )\n   mcb_raw_wrapper_inst\n   (\n   .sysclk_2x                 ( ioclk0                    ),\n   .sysclk_2x_180             ( ioclk180                  ),\n   .pll_ce_0                  ( pll_ce_0_i                ),\n   .pll_ce_90                 ( pll_ce_90_i               ),\n   .pll_lock                  ( pll_lock_bufpll_o         ),\n   .sys_rst                   ( sys_rst                   ),\n   .p0_arb_en                 ( p0_arb_en_i               ),\n   .p0_cmd_clk                ( p0_cmd_clk_i              ),\n   .p0_cmd_en                 ( p0_cmd_en_i               ),\n   .p0_cmd_instr              ( p0_cmd_instr_i            ),\n   .p0_cmd_bl                 ( p0_cmd_bl_i               ),\n   .p0_cmd_byte_addr          ( p0_cmd_byte_addr_i        ),\n   .p0_cmd_empty              ( p0_cmd_empty_i            ),\n   .p0_cmd_full               ( p0_cmd_full_i             ),\n   .p0_wr_clk                 ( p0_wr_clk_i               ),\n   .p0_wr_en                  ( p0_wr_en_i                ),\n   .p0_wr_mask                ( p0_wr_mask_i              ),\n   .p0_wr_data                ( p0_wr_data_i              ),\n   .p0_wr_full                ( p0_wr_full_i              ),\n   .p0_wr_empty               ( p0_wr_empty_i             ),\n   .p0_wr_count               ( p0_wr_count_i             ),\n   .p0_wr_underrun            ( p0_wr_underrun_i          ),\n   .p0_wr_error               ( p0_wr_error_i             ),\n   .p0_rd_clk                 ( p0_rd_clk_i               ),\n   .p0_rd_en                  ( p0_rd_en_i                ),\n   .p0_rd_data                ( p0_rd_data_i              ),\n   .p0_rd_full                ( p0_rd_full_i              ),\n   .p0_rd_empty               ( p0_rd_empty_i             ),\n   .p0_rd_count               ( p0_rd_count_i             ),\n   .p0_rd_overflow            ( p0_rd_overflow_i          ),\n   .p0_rd_error               ( p0_rd_error_i             ),\n   .p1_arb_en                 ( p1_arb_en_i               ),\n   .p1_cmd_clk                ( p1_cmd_clk_i              ),\n   .p1_cmd_en                 ( p1_cmd_en_i               ),\n   .p1_cmd_instr              ( p1_cmd_instr_i            ),\n   .p1_cmd_bl                 ( p1_cmd_bl_i               ),\n   .p1_cmd_byte_addr          ( p1_cmd_byte_addr_i        ),\n   .p1_cmd_empty              ( p1_cmd_empty_i            ),\n   .p1_cmd_full               ( p1_cmd_full_i             ),\n   .p1_wr_clk                 ( p1_wr_clk_i               ),\n   .p1_wr_en                  ( p1_wr_en_i                ),\n   .p1_wr_mask                ( p1_wr_mask_i              ),\n   .p1_wr_data                ( p1_wr_data_i              ),\n   .p1_wr_full                ( p1_wr_full_i              ),\n   .p1_wr_empty               ( p1_wr_empty_i             ),\n   .p1_wr_count               ( p1_wr_count_i             ),\n   .p1_wr_underrun            ( p1_wr_underrun_i          ),\n   .p1_wr_error               ( p1_wr_error_i             ),\n   .p1_rd_clk                 ( p1_rd_clk_i               ),\n   .p1_rd_en                  ( p1_rd_en_i                ),\n   .p1_rd_data                ( p1_rd_data_i              ),\n   .p1_rd_full                ( p1_rd_full_i              ),\n   .p1_rd_empty               ( p1_rd_empty_i             ),\n   .p1_rd_count               ( p1_rd_count_i             ),\n   .p1_rd_overflow            ( p1_rd_overflow_i          ),\n   .p1_rd_error               ( p1_rd_error_i             ),\n   .p2_arb_en                 ( p2_arb_en_i               ),\n   .p2_cmd_clk                ( p2_cmd_clk_i              ),\n   .p2_cmd_en                 ( p2_cmd_en_i               ),\n   .p2_cmd_instr              ( p2_cmd_instr_i            ),\n   .p2_cmd_bl                 ( p2_cmd_bl_i               ),\n   .p2_cmd_byte_addr          ( p2_cmd_byte_addr_i        ),\n   .p2_cmd_empty              ( p2_cmd_empty_i            ),\n   .p2_cmd_full               ( p2_cmd_full_i             ),\n   .p2_wr_clk                 ( p2_wr_clk_i               ),\n   .p2_wr_en                  ( p2_wr_en_i                ),\n   .p2_wr_mask                ( p2_wr_mask_i              ),\n   .p2_wr_data                ( p2_wr_data_i              ),\n   .p2_wr_full                ( p2_wr_full_i              ),\n   .p2_wr_empty               ( p2_wr_empty_i             ),\n   .p2_wr_count               ( p2_wr_count_i             ),\n   .p2_wr_underrun            ( p2_wr_underrun_i          ),\n   .p2_wr_error               ( p2_wr_error_i             ),\n   .p2_rd_clk                 ( p2_rd_clk_i               ),\n   .p2_rd_en                  ( p2_rd_en_i                ),\n   .p2_rd_data                ( p2_rd_data_i              ),\n   .p2_rd_full                ( p2_rd_full_i              ),\n   .p2_rd_empty               ( p2_rd_empty_i             ),\n   .p2_rd_count               ( p2_rd_count_i             ),\n   .p2_rd_overflow            ( p2_rd_overflow_i          ),\n   .p2_rd_error               ( p2_rd_error_i             ),\n   .p3_arb_en                 ( p3_arb_en_i               ),\n   .p3_cmd_clk                ( p3_cmd_clk_i              ),\n   .p3_cmd_en                 ( p3_cmd_en_i               ),\n   .p3_cmd_instr              ( p3_cmd_instr_i            ),\n   .p3_cmd_bl                 ( p3_cmd_bl_i               ),\n   .p3_cmd_byte_addr          ( p3_cmd_byte_addr_i        ),\n   .p3_cmd_empty              ( p3_cmd_empty_i            ),\n   .p3_cmd_full               ( p3_cmd_full_i             ),\n   .p3_wr_clk                 ( p3_wr_clk_i               ),\n   .p3_wr_en                  ( p3_wr_en_i                ),\n   .p3_wr_mask                ( p3_wr_mask_i              ),\n   .p3_wr_data                ( p3_wr_data_i              ),\n   .p3_wr_full                ( p3_wr_full_i              ),\n   .p3_wr_empty               ( p3_wr_empty_i             ),\n   .p3_wr_count               ( p3_wr_count_i             ),\n   .p3_wr_underrun            ( p3_wr_underrun_i          ),\n   .p3_wr_error               ( p3_wr_error_i             ),\n   .p3_rd_clk                 ( p3_rd_clk_i               ),\n   .p3_rd_en                  ( p3_rd_en_i                ),\n   .p3_rd_data                ( p3_rd_data_i              ),\n   .p3_rd_full                ( p3_rd_full_i              ),\n   .p3_rd_empty               ( p3_rd_empty_i             ),\n   .p3_rd_count               ( p3_rd_count_i             ),\n   .p3_rd_overflow            ( p3_rd_overflow_i          ),\n   .p3_rd_error               ( p3_rd_error_i             ),\n   .p4_arb_en                 ( p4_arb_en_i               ),\n   .p4_cmd_clk                ( p4_cmd_clk_i              ),\n   .p4_cmd_en                 ( p4_cmd_en_i               ),\n   .p4_cmd_instr              ( p4_cmd_instr_i            ),\n   .p4_cmd_bl                 ( p4_cmd_bl_i               ),\n   .p4_cmd_byte_addr          ( p4_cmd_byte_addr_i        ),\n   .p4_cmd_empty              ( p4_cmd_empty_i            ),\n   .p4_cmd_full               ( p4_cmd_full_i             ),\n   .p4_wr_clk                 ( p4_wr_clk_i               ),\n   .p4_wr_en                  ( p4_wr_en_i                ),\n   .p4_wr_mask                ( p4_wr_mask_i              ),\n   .p4_wr_data                ( p4_wr_data_i              ),\n   .p4_wr_full                ( p4_wr_full_i              ),\n   .p4_wr_empty               ( p4_wr_empty_i             ),\n   .p4_wr_count               ( p4_wr_count_i             ),\n   .p4_wr_underrun            ( p4_wr_underrun_i          ),\n   .p4_wr_error               ( p4_wr_error_i             ),\n   .p4_rd_clk                 ( p4_rd_clk_i               ),\n   .p4_rd_en                  ( p4_rd_en_i                ),\n   .p4_rd_data                ( p4_rd_data_i              ),\n   .p4_rd_full                ( p4_rd_full_i              ),\n   .p4_rd_empty               ( p4_rd_empty_i             ),\n   .p4_rd_count               ( p4_rd_count_i             ),\n   .p4_rd_overflow            ( p4_rd_overflow_i          ),\n   .p4_rd_error               ( p4_rd_error_i             ),\n   .p5_arb_en                 ( p5_arb_en_i               ),\n   .p5_cmd_clk                ( p5_cmd_clk_i              ),\n   .p5_cmd_en                 ( p5_cmd_en_i               ),\n   .p5_cmd_instr              ( p5_cmd_instr_i            ),\n   .p5_cmd_bl                 ( p5_cmd_bl_i               ),\n   .p5_cmd_byte_addr          ( p5_cmd_byte_addr_i        ),\n   .p5_cmd_empty              ( p5_cmd_empty_i            ),\n   .p5_cmd_full               ( p5_cmd_full_i             ),\n   .p5_wr_clk                 ( p5_wr_clk_i               ),\n   .p5_wr_en                  ( p5_wr_en_i                ),\n   .p5_wr_mask                ( p5_wr_mask_i              ),\n   .p5_wr_data                ( p5_wr_data_i              ),\n   .p5_wr_full                ( p5_wr_full_i              ),\n   .p5_wr_empty               ( p5_wr_empty_i             ),\n   .p5_wr_count               ( p5_wr_count_i             ),\n   .p5_wr_underrun            ( p5_wr_underrun_i          ),\n   .p5_wr_error               ( p5_wr_error_i             ),\n   .p5_rd_clk                 ( p5_rd_clk_i               ),\n   .p5_rd_en                  ( p5_rd_en_i                ),\n   .p5_rd_data                ( p5_rd_data_i              ),\n   .p5_rd_full                ( p5_rd_full_i              ),\n   .p5_rd_empty               ( p5_rd_empty_i             ),\n   .p5_rd_count               ( p5_rd_count_i             ),\n   .p5_rd_overflow            ( p5_rd_overflow_i          ),\n   .p5_rd_error               ( p5_rd_error_i             ),\n   .mcbx_dram_addr            ( mcbx_dram_addr            ),\n   .mcbx_dram_ba              ( mcbx_dram_ba              ),\n   .mcbx_dram_ras_n           ( mcbx_dram_ras_n           ),\n   .mcbx_dram_cas_n           ( mcbx_dram_cas_n           ),\n   .mcbx_dram_we_n            ( mcbx_dram_we_n            ),\n   .mcbx_dram_cke             ( mcbx_dram_cke             ),\n   .mcbx_dram_clk             ( mcbx_dram_clk             ),\n   .mcbx_dram_clk_n           ( mcbx_dram_clk_n           ),\n   .mcbx_dram_dq              ( mcbx_dram_dq              ),\n   .mcbx_dram_dqs             ( mcbx_dram_dqs             ),\n   .mcbx_dram_dqs_n           ( mcbx_dram_dqs_n           ),\n   .mcbx_dram_udqs            ( mcbx_dram_udqs            ),\n   .mcbx_dram_udqs_n          ( mcbx_dram_udqs_n          ),\n   .mcbx_dram_udm             ( mcbx_dram_udm             ),\n   .mcbx_dram_ldm             ( mcbx_dram_ldm             ),\n   .mcbx_dram_odt             ( mcbx_dram_odt             ),\n   .mcbx_dram_ddr3_rst        ( mcbx_dram_ddr3_rst        ),\n   .calib_recal               ( calib_recal               ),\n   .rzq                       ( rzq                       ),\n   .zio                       ( zio                       ),\n   .ui_read                   ( ui_read                   ),\n   .ui_add                    ( ui_add                    ),\n   .ui_cs                     ( ui_cs                     ),\n   .ui_clk                    ( ui_clk                    ),\n   .ui_sdi                    ( ui_sdi                    ),\n   .ui_addr                   ( ui_addr                   ),\n   .ui_broadcast              ( ui_broadcast              ),\n   .ui_drp_update             ( ui_drp_update             ),\n   .ui_done_cal               ( ui_done_cal               ),\n   .ui_cmd                    ( ui_cmd                    ),\n   .ui_cmd_in                 ( ui_cmd_in                 ),\n   .ui_cmd_en                 ( ui_cmd_en                 ),\n   .ui_dqcount                ( ui_dqcount                ),\n   .ui_dq_lower_dec           ( ui_dq_lower_dec           ),\n   .ui_dq_lower_inc           ( ui_dq_lower_inc           ),\n   .ui_dq_upper_dec           ( ui_dq_upper_dec           ),\n   .ui_dq_upper_inc           ( ui_dq_upper_inc           ),\n   .ui_udqs_inc               ( ui_udqs_inc               ),\n   .ui_udqs_dec               ( ui_udqs_dec               ),\n   .ui_ldqs_inc               ( ui_ldqs_inc               ),\n   .ui_ldqs_dec               ( ui_ldqs_dec               ),\n   .uo_data                   ( uo_data                   ),\n   .uo_data_valid             ( uo_data_valid             ),\n   .uo_done_cal               ( uo_done_cal               ),\n   .uo_cmd_ready_in           ( uo_cmd_ready_in           ),\n   .uo_refrsh_flag            ( uo_refrsh_flag            ),\n   .uo_cal_start              ( uo_cal_start              ),\n   .uo_sdo                    ( uo_sdo                    ),\n   .status                    ( status                    ),\n   .selfrefresh_enter         ( selfrefresh_enter         ),\n   .selfrefresh_mode          ( selfrefresh_mode          )\n   );\n\n\n  generate\n    if (C_S0_AXI_ENABLE == 0) begin : P0_UI_MCB\n      assign  p0_arb_en_i        =  p0_arb_en        ; \n      assign  p0_cmd_clk_i       =  p0_cmd_clk       ; \n      assign  p0_cmd_en_i        =  p0_cmd_en        ; \n      assign  p0_cmd_instr_i     =  p0_cmd_instr     ; \n      assign  p0_cmd_bl_i        =  p0_cmd_bl        ; \n      assign  p0_cmd_byte_addr_i =  p0_cmd_byte_addr ; \n      assign  p0_cmd_empty       =  p0_cmd_empty_i   ; \n      assign  p0_cmd_full        =  p0_cmd_full_i    ; \n      assign  p0_wr_clk_i        =  p0_wr_clk        ; \n      assign  p0_wr_en_i         =  p0_wr_en         ; \n      assign  p0_wr_mask_i       =  p0_wr_mask       ; \n      assign  p0_wr_data_i       =  p0_wr_data       ; \n      assign  p0_wr_full         =  p0_wr_full_i     ; \n      assign  p0_wr_empty        =  p0_wr_empty_i    ; \n      assign  p0_wr_count        =  p0_wr_count_i    ; \n      assign  p0_wr_underrun     =  p0_wr_underrun_i ; \n      assign  p0_wr_error        =  p0_wr_error_i    ; \n      assign  p0_rd_clk_i        =  p0_rd_clk        ; \n      assign  p0_rd_en_i         =  p0_rd_en         ; \n      assign  p0_rd_data         =  p0_rd_data_i     ; \n      assign  p0_rd_full         =  p0_rd_full_i     ; \n      assign  p0_rd_empty        =  p0_rd_empty_i    ; \n      assign  p0_rd_count        =  p0_rd_count_i    ; \n      assign  p0_rd_overflow     =  p0_rd_overflow_i ; \n      assign  p0_rd_error        =  p0_rd_error_i    ; \n    end\n    else begin : P0_UI_AXI\n      assign  p0_arb_en_i        =  p0_arb_en;\n      assign  s0_axi_araddr_i    = s0_axi_araddr & P_S0_AXI_ADDRMASK;\n      assign  s0_axi_awaddr_i    = s0_axi_awaddr & P_S0_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk       ( s0_axi_aclk      ) ,\n        .synch_in  ( uo_done_cal      ) ,\n        .synch_out ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S0_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S0_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( C_S0_AXI_DATA_WIDTH      ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S0_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S0_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S0_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S0_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S0_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( C_P0_DATA_PORT_SIZE      ) ,\n        .C_STRICT_COHERENCY      ( C_S0_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S0_AXI_ENABLE_AP           )\n        )\n        p0_axi_mcb\n        (\n        .aclk              ( s0_axi_aclk        ),\n        .aresetn           ( s0_axi_aresetn     ),\n        .s_axi_awid        ( s0_axi_awid        ),\n        .s_axi_awaddr      ( s0_axi_awaddr_i    ),\n        .s_axi_awlen       ( s0_axi_awlen       ),\n        .s_axi_awsize      ( s0_axi_awsize      ),\n        .s_axi_awburst     ( s0_axi_awburst     ),\n        .s_axi_awlock      ( s0_axi_awlock      ),\n        .s_axi_awcache     ( s0_axi_awcache     ),\n        .s_axi_awprot      ( s0_axi_awprot      ),\n        .s_axi_awqos       ( s0_axi_awqos       ),\n        .s_axi_awvalid     ( s0_axi_awvalid     ),\n        .s_axi_awready     ( s0_axi_awready     ),\n        .s_axi_wdata       ( s0_axi_wdata       ),\n        .s_axi_wstrb       ( s0_axi_wstrb       ),\n        .s_axi_wlast       ( s0_axi_wlast       ),\n        .s_axi_wvalid      ( s0_axi_wvalid      ),\n        .s_axi_wready      ( s0_axi_wready      ),\n        .s_axi_bid         ( s0_axi_bid         ),\n        .s_axi_bresp       ( s0_axi_bresp       ),\n        .s_axi_bvalid      ( s0_axi_bvalid      ),\n        .s_axi_bready      ( s0_axi_bready      ),\n        .s_axi_arid        ( s0_axi_arid        ),\n        .s_axi_araddr      ( s0_axi_araddr_i    ),\n        .s_axi_arlen       ( s0_axi_arlen       ),\n        .s_axi_arsize      ( s0_axi_arsize      ),\n        .s_axi_arburst     ( s0_axi_arburst     ),\n        .s_axi_arlock      ( s0_axi_arlock      ),\n        .s_axi_arcache     ( s0_axi_arcache     ),\n        .s_axi_arprot      ( s0_axi_arprot      ),\n        .s_axi_arqos       ( s0_axi_arqos       ),\n        .s_axi_arvalid     ( s0_axi_arvalid     ),\n        .s_axi_arready     ( s0_axi_arready     ),\n        .s_axi_rid         ( s0_axi_rid         ),\n        .s_axi_rdata       ( s0_axi_rdata       ),\n        .s_axi_rresp       ( s0_axi_rresp       ),\n        .s_axi_rlast       ( s0_axi_rlast       ),\n        .s_axi_rvalid      ( s0_axi_rvalid      ),\n        .s_axi_rready      ( s0_axi_rready      ),\n        .mcb_cmd_clk       ( p0_cmd_clk_i       ),\n        .mcb_cmd_en        ( p0_cmd_en_i        ),\n        .mcb_cmd_instr     ( p0_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p0_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p0_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p0_cmd_empty_i     ),\n        .mcb_cmd_full      ( p0_cmd_full_i      ),\n        .mcb_wr_clk        ( p0_wr_clk_i        ),\n        .mcb_wr_en         ( p0_wr_en_i         ),\n        .mcb_wr_mask       ( p0_wr_mask_i       ),\n        .mcb_wr_data       ( p0_wr_data_i       ),\n        .mcb_wr_full       ( p0_wr_full_i       ),\n        .mcb_wr_empty      ( p0_wr_empty_i      ),\n        .mcb_wr_count      ( p0_wr_count_i      ),\n        .mcb_wr_underrun   ( p0_wr_underrun_i   ),\n        .mcb_wr_error      ( p0_wr_error_i      ),\n        .mcb_rd_clk        ( p0_rd_clk_i        ),\n        .mcb_rd_en         ( p0_rd_en_i         ),\n        .mcb_rd_data       ( p0_rd_data_i       ),\n        .mcb_rd_full       ( p0_rd_full_i       ),\n        .mcb_rd_empty      ( p0_rd_empty_i      ),\n        .mcb_rd_count      ( p0_rd_count_i      ),\n        .mcb_rd_overflow   ( p0_rd_overflow_i   ),\n        .mcb_rd_error      ( p0_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S1_AXI_ENABLE == 0) begin : P1_UI_MCB\n      assign  p1_arb_en_i        =  p1_arb_en        ; \n      assign  p1_cmd_clk_i       =  p1_cmd_clk       ; \n      assign  p1_cmd_en_i        =  p1_cmd_en        ; \n      assign  p1_cmd_instr_i     =  p1_cmd_instr     ; \n      assign  p1_cmd_bl_i        =  p1_cmd_bl        ; \n      assign  p1_cmd_byte_addr_i =  p1_cmd_byte_addr ; \n      assign  p1_cmd_empty       =  p1_cmd_empty_i   ; \n      assign  p1_cmd_full        =  p1_cmd_full_i    ; \n      assign  p1_wr_clk_i        =  p1_wr_clk        ; \n      assign  p1_wr_en_i         =  p1_wr_en         ; \n      assign  p1_wr_mask_i       =  p1_wr_mask       ; \n      assign  p1_wr_data_i       =  p1_wr_data       ; \n      assign  p1_wr_full         =  p1_wr_full_i     ; \n      assign  p1_wr_empty        =  p1_wr_empty_i    ; \n      assign  p1_wr_count        =  p1_wr_count_i    ; \n      assign  p1_wr_underrun     =  p1_wr_underrun_i ; \n      assign  p1_wr_error        =  p1_wr_error_i    ; \n      assign  p1_rd_clk_i        =  p1_rd_clk        ; \n      assign  p1_rd_en_i         =  p1_rd_en         ; \n      assign  p1_rd_data         =  p1_rd_data_i     ; \n      assign  p1_rd_full         =  p1_rd_full_i     ; \n      assign  p1_rd_empty        =  p1_rd_empty_i    ; \n      assign  p1_rd_count        =  p1_rd_count_i    ; \n      assign  p1_rd_overflow     =  p1_rd_overflow_i ; \n      assign  p1_rd_error        =  p1_rd_error_i    ; \n    end\n    else begin : P1_UI_AXI\n      assign  p1_arb_en_i        =  p1_arb_en;\n      assign  s1_axi_araddr_i    = s1_axi_araddr & P_S1_AXI_ADDRMASK;\n      assign  s1_axi_awaddr_i    = s1_axi_awaddr & P_S1_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s1_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S1_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S1_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( C_S1_AXI_DATA_WIDTH      ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S1_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S1_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S1_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S1_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S1_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( C_P1_DATA_PORT_SIZE      ) ,\n        .C_STRICT_COHERENCY      ( C_S1_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S1_AXI_ENABLE_AP           )\n        )\n        p1_axi_mcb\n        (\n        .aclk              ( s1_axi_aclk        ),\n        .aresetn           ( s1_axi_aresetn     ),\n        .s_axi_awid        ( s1_axi_awid        ),\n        .s_axi_awaddr      ( s1_axi_awaddr_i    ),\n        .s_axi_awlen       ( s1_axi_awlen       ),\n        .s_axi_awsize      ( s1_axi_awsize      ),\n        .s_axi_awburst     ( s1_axi_awburst     ),\n        .s_axi_awlock      ( s1_axi_awlock      ),\n        .s_axi_awcache     ( s1_axi_awcache     ),\n        .s_axi_awprot      ( s1_axi_awprot      ),\n        .s_axi_awqos       ( s1_axi_awqos       ),\n        .s_axi_awvalid     ( s1_axi_awvalid     ),\n        .s_axi_awready     ( s1_axi_awready     ),\n        .s_axi_wdata       ( s1_axi_wdata       ),\n        .s_axi_wstrb       ( s1_axi_wstrb       ),\n        .s_axi_wlast       ( s1_axi_wlast       ),\n        .s_axi_wvalid      ( s1_axi_wvalid      ),\n        .s_axi_wready      ( s1_axi_wready      ),\n        .s_axi_bid         ( s1_axi_bid         ),\n        .s_axi_bresp       ( s1_axi_bresp       ),\n        .s_axi_bvalid      ( s1_axi_bvalid      ),\n        .s_axi_bready      ( s1_axi_bready      ),\n        .s_axi_arid        ( s1_axi_arid        ),\n        .s_axi_araddr      ( s1_axi_araddr_i    ),\n        .s_axi_arlen       ( s1_axi_arlen       ),\n        .s_axi_arsize      ( s1_axi_arsize      ),\n        .s_axi_arburst     ( s1_axi_arburst     ),\n        .s_axi_arlock      ( s1_axi_arlock      ),\n        .s_axi_arcache     ( s1_axi_arcache     ),\n        .s_axi_arprot      ( s1_axi_arprot      ),\n        .s_axi_arqos       ( s1_axi_arqos       ),\n        .s_axi_arvalid     ( s1_axi_arvalid     ),\n        .s_axi_arready     ( s1_axi_arready     ),\n        .s_axi_rid         ( s1_axi_rid         ),\n        .s_axi_rdata       ( s1_axi_rdata       ),\n        .s_axi_rresp       ( s1_axi_rresp       ),\n        .s_axi_rlast       ( s1_axi_rlast       ),\n        .s_axi_rvalid      ( s1_axi_rvalid      ),\n        .s_axi_rready      ( s1_axi_rready      ),\n        .mcb_cmd_clk       ( p1_cmd_clk_i       ),\n        .mcb_cmd_en        ( p1_cmd_en_i        ),\n        .mcb_cmd_instr     ( p1_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p1_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p1_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p1_cmd_empty_i     ),\n        .mcb_cmd_full      ( p1_cmd_full_i      ),\n        .mcb_wr_clk        ( p1_wr_clk_i        ),\n        .mcb_wr_en         ( p1_wr_en_i         ),\n        .mcb_wr_mask       ( p1_wr_mask_i       ),\n        .mcb_wr_data       ( p1_wr_data_i       ),\n        .mcb_wr_full       ( p1_wr_full_i       ),\n        .mcb_wr_empty      ( p1_wr_empty_i      ),\n        .mcb_wr_count      ( p1_wr_count_i      ),\n        .mcb_wr_underrun   ( p1_wr_underrun_i   ),\n        .mcb_wr_error      ( p1_wr_error_i      ),\n        .mcb_rd_clk        ( p1_rd_clk_i        ),\n        .mcb_rd_en         ( p1_rd_en_i         ),\n        .mcb_rd_data       ( p1_rd_data_i       ),\n        .mcb_rd_full       ( p1_rd_full_i       ),\n        .mcb_rd_empty      ( p1_rd_empty_i      ),\n        .mcb_rd_count      ( p1_rd_count_i      ),\n        .mcb_rd_overflow   ( p1_rd_overflow_i   ),\n        .mcb_rd_error      ( p1_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S2_AXI_ENABLE == 0) begin : P2_UI_MCB\n      assign  p2_arb_en_i        =  p2_arb_en        ; \n      assign  p2_cmd_clk_i       =  p2_cmd_clk       ; \n      assign  p2_cmd_en_i        =  p2_cmd_en        ; \n      assign  p2_cmd_instr_i     =  p2_cmd_instr     ; \n      assign  p2_cmd_bl_i        =  p2_cmd_bl        ; \n      assign  p2_cmd_byte_addr_i =  p2_cmd_byte_addr ; \n      assign  p2_cmd_empty       =  p2_cmd_empty_i   ; \n      assign  p2_cmd_full        =  p2_cmd_full_i    ; \n      assign  p2_wr_clk_i        =  p2_wr_clk        ; \n      assign  p2_wr_en_i         =  p2_wr_en         ; \n      assign  p2_wr_mask_i       =  p2_wr_mask       ; \n      assign  p2_wr_data_i       =  p2_wr_data       ; \n      assign  p2_wr_full         =  p2_wr_full_i     ; \n      assign  p2_wr_empty        =  p2_wr_empty_i    ; \n      assign  p2_wr_count        =  p2_wr_count_i    ; \n      assign  p2_wr_underrun     =  p2_wr_underrun_i ; \n      assign  p2_wr_error        =  p2_wr_error_i    ; \n      assign  p2_rd_clk_i        =  p2_rd_clk        ; \n      assign  p2_rd_en_i         =  p2_rd_en         ; \n      assign  p2_rd_data         =  p2_rd_data_i     ; \n      assign  p2_rd_full         =  p2_rd_full_i     ; \n      assign  p2_rd_empty        =  p2_rd_empty_i    ; \n      assign  p2_rd_count        =  p2_rd_count_i    ; \n      assign  p2_rd_overflow     =  p2_rd_overflow_i ; \n      assign  p2_rd_error        =  p2_rd_error_i    ; \n    end\n    else begin : P2_UI_AXI\n      assign  p2_arb_en_i        =  p2_arb_en;\n      assign  s2_axi_araddr_i    = s2_axi_araddr & P_S2_AXI_ADDRMASK;\n      assign  s2_axi_awaddr_i    = s2_axi_awaddr & P_S2_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s2_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S2_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S2_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S2_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S2_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S2_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S2_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S2_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S2_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S2_AXI_ENABLE_AP           )\n        )\n        p2_axi_mcb\n        (\n        .aclk              ( s2_axi_aclk        ),\n        .aresetn           ( s2_axi_aresetn     ),\n        .s_axi_awid        ( s2_axi_awid        ),\n        .s_axi_awaddr      ( s2_axi_awaddr_i    ),\n        .s_axi_awlen       ( s2_axi_awlen       ),\n        .s_axi_awsize      ( s2_axi_awsize      ),\n        .s_axi_awburst     ( s2_axi_awburst     ),\n        .s_axi_awlock      ( s2_axi_awlock      ),\n        .s_axi_awcache     ( s2_axi_awcache     ),\n        .s_axi_awprot      ( s2_axi_awprot      ),\n        .s_axi_awqos       ( s2_axi_awqos       ),\n        .s_axi_awvalid     ( s2_axi_awvalid     ),\n        .s_axi_awready     ( s2_axi_awready     ),\n        .s_axi_wdata       ( s2_axi_wdata       ),\n        .s_axi_wstrb       ( s2_axi_wstrb       ),\n        .s_axi_wlast       ( s2_axi_wlast       ),\n        .s_axi_wvalid      ( s2_axi_wvalid      ),\n        .s_axi_wready      ( s2_axi_wready      ),\n        .s_axi_bid         ( s2_axi_bid         ),\n        .s_axi_bresp       ( s2_axi_bresp       ),\n        .s_axi_bvalid      ( s2_axi_bvalid      ),\n        .s_axi_bready      ( s2_axi_bready      ),\n        .s_axi_arid        ( s2_axi_arid        ),\n        .s_axi_araddr      ( s2_axi_araddr_i    ),\n        .s_axi_arlen       ( s2_axi_arlen       ),\n        .s_axi_arsize      ( s2_axi_arsize      ),\n        .s_axi_arburst     ( s2_axi_arburst     ),\n        .s_axi_arlock      ( s2_axi_arlock      ),\n        .s_axi_arcache     ( s2_axi_arcache     ),\n        .s_axi_arprot      ( s2_axi_arprot      ),\n        .s_axi_arqos       ( s2_axi_arqos       ),\n        .s_axi_arvalid     ( s2_axi_arvalid     ),\n        .s_axi_arready     ( s2_axi_arready     ),\n        .s_axi_rid         ( s2_axi_rid         ),\n        .s_axi_rdata       ( s2_axi_rdata       ),\n        .s_axi_rresp       ( s2_axi_rresp       ),\n        .s_axi_rlast       ( s2_axi_rlast       ),\n        .s_axi_rvalid      ( s2_axi_rvalid      ),\n        .s_axi_rready      ( s2_axi_rready      ),\n        .mcb_cmd_clk       ( p2_cmd_clk_i       ),\n        .mcb_cmd_en        ( p2_cmd_en_i        ),\n        .mcb_cmd_instr     ( p2_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p2_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p2_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p2_cmd_empty_i     ),\n        .mcb_cmd_full      ( p2_cmd_full_i      ),\n        .mcb_wr_clk        ( p2_wr_clk_i        ),\n        .mcb_wr_en         ( p2_wr_en_i         ),\n        .mcb_wr_mask       ( p2_wr_mask_i       ),\n        .mcb_wr_data       ( p2_wr_data_i       ),\n        .mcb_wr_full       ( p2_wr_full_i       ),\n        .mcb_wr_empty      ( p2_wr_empty_i      ),\n        .mcb_wr_count      ( p2_wr_count_i      ),\n        .mcb_wr_underrun   ( p2_wr_underrun_i   ),\n        .mcb_wr_error      ( p2_wr_error_i      ),\n        .mcb_rd_clk        ( p2_rd_clk_i        ),\n        .mcb_rd_en         ( p2_rd_en_i         ),\n        .mcb_rd_data       ( p2_rd_data_i       ),\n        .mcb_rd_full       ( p2_rd_full_i       ),\n        .mcb_rd_empty      ( p2_rd_empty_i      ),\n        .mcb_rd_count      ( p2_rd_count_i      ),\n        .mcb_rd_overflow   ( p2_rd_overflow_i   ),\n        .mcb_rd_error      ( p2_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S3_AXI_ENABLE == 0) begin : P3_UI_MCB\n      assign  p3_arb_en_i        =  p3_arb_en        ; \n      assign  p3_cmd_clk_i       =  p3_cmd_clk       ; \n      assign  p3_cmd_en_i        =  p3_cmd_en        ; \n      assign  p3_cmd_instr_i     =  p3_cmd_instr     ; \n      assign  p3_cmd_bl_i        =  p3_cmd_bl        ; \n      assign  p3_cmd_byte_addr_i =  p3_cmd_byte_addr ; \n      assign  p3_cmd_empty       =  p3_cmd_empty_i   ; \n      assign  p3_cmd_full        =  p3_cmd_full_i    ; \n      assign  p3_wr_clk_i        =  p3_wr_clk        ; \n      assign  p3_wr_en_i         =  p3_wr_en         ; \n      assign  p3_wr_mask_i       =  p3_wr_mask       ; \n      assign  p3_wr_data_i       =  p3_wr_data       ; \n      assign  p3_wr_full         =  p3_wr_full_i     ; \n      assign  p3_wr_empty        =  p3_wr_empty_i    ; \n      assign  p3_wr_count        =  p3_wr_count_i    ; \n      assign  p3_wr_underrun     =  p3_wr_underrun_i ; \n      assign  p3_wr_error        =  p3_wr_error_i    ; \n      assign  p3_rd_clk_i        =  p3_rd_clk        ; \n      assign  p3_rd_en_i         =  p3_rd_en         ; \n      assign  p3_rd_data         =  p3_rd_data_i     ; \n      assign  p3_rd_full         =  p3_rd_full_i     ; \n      assign  p3_rd_empty        =  p3_rd_empty_i    ; \n      assign  p3_rd_count        =  p3_rd_count_i    ; \n      assign  p3_rd_overflow     =  p3_rd_overflow_i ; \n      assign  p3_rd_error        =  p3_rd_error_i    ; \n    end\n    else begin : P3_UI_AXI\n      assign  p3_arb_en_i        =  p3_arb_en;\n      assign  s3_axi_araddr_i    = s3_axi_araddr & P_S3_AXI_ADDRMASK;\n      assign  s3_axi_awaddr_i    = s3_axi_awaddr & P_S3_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s3_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S3_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S3_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S3_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S3_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S3_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S3_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S3_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S3_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S3_AXI_ENABLE_AP           )\n        )\n        p3_axi_mcb\n        (\n        .aclk              ( s3_axi_aclk        ),\n        .aresetn           ( s3_axi_aresetn     ),\n        .s_axi_awid        ( s3_axi_awid        ),\n        .s_axi_awaddr      ( s3_axi_awaddr_i    ),\n        .s_axi_awlen       ( s3_axi_awlen       ),\n        .s_axi_awsize      ( s3_axi_awsize      ),\n        .s_axi_awburst     ( s3_axi_awburst     ),\n        .s_axi_awlock      ( s3_axi_awlock      ),\n        .s_axi_awcache     ( s3_axi_awcache     ),\n        .s_axi_awprot      ( s3_axi_awprot      ),\n        .s_axi_awqos       ( s3_axi_awqos       ),\n        .s_axi_awvalid     ( s3_axi_awvalid     ),\n        .s_axi_awready     ( s3_axi_awready     ),\n        .s_axi_wdata       ( s3_axi_wdata       ),\n        .s_axi_wstrb       ( s3_axi_wstrb       ),\n        .s_axi_wlast       ( s3_axi_wlast       ),\n        .s_axi_wvalid      ( s3_axi_wvalid      ),\n        .s_axi_wready      ( s3_axi_wready      ),\n        .s_axi_bid         ( s3_axi_bid         ),\n        .s_axi_bresp       ( s3_axi_bresp       ),\n        .s_axi_bvalid      ( s3_axi_bvalid      ),\n        .s_axi_bready      ( s3_axi_bready      ),\n        .s_axi_arid        ( s3_axi_arid        ),\n        .s_axi_araddr      ( s3_axi_araddr_i    ),\n        .s_axi_arlen       ( s3_axi_arlen       ),\n        .s_axi_arsize      ( s3_axi_arsize      ),\n        .s_axi_arburst     ( s3_axi_arburst     ),\n        .s_axi_arlock      ( s3_axi_arlock      ),\n        .s_axi_arcache     ( s3_axi_arcache     ),\n        .s_axi_arprot      ( s3_axi_arprot      ),\n        .s_axi_arqos       ( s3_axi_arqos       ),\n        .s_axi_arvalid     ( s3_axi_arvalid     ),\n        .s_axi_arready     ( s3_axi_arready     ),\n        .s_axi_rid         ( s3_axi_rid         ),\n        .s_axi_rdata       ( s3_axi_rdata       ),\n        .s_axi_rresp       ( s3_axi_rresp       ),\n        .s_axi_rlast       ( s3_axi_rlast       ),\n        .s_axi_rvalid      ( s3_axi_rvalid      ),\n        .s_axi_rready      ( s3_axi_rready      ),\n        .mcb_cmd_clk       ( p3_cmd_clk_i       ),\n        .mcb_cmd_en        ( p3_cmd_en_i        ),\n        .mcb_cmd_instr     ( p3_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p3_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p3_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p3_cmd_empty_i     ),\n        .mcb_cmd_full      ( p3_cmd_full_i      ),\n        .mcb_wr_clk        ( p3_wr_clk_i        ),\n        .mcb_wr_en         ( p3_wr_en_i         ),\n        .mcb_wr_mask       ( p3_wr_mask_i       ),\n        .mcb_wr_data       ( p3_wr_data_i       ),\n        .mcb_wr_full       ( p3_wr_full_i       ),\n        .mcb_wr_empty      ( p3_wr_empty_i      ),\n        .mcb_wr_count      ( p3_wr_count_i      ),\n        .mcb_wr_underrun   ( p3_wr_underrun_i   ),\n        .mcb_wr_error      ( p3_wr_error_i      ),\n        .mcb_rd_clk        ( p3_rd_clk_i        ),\n        .mcb_rd_en         ( p3_rd_en_i         ),\n        .mcb_rd_data       ( p3_rd_data_i       ),\n        .mcb_rd_full       ( p3_rd_full_i       ),\n        .mcb_rd_empty      ( p3_rd_empty_i      ),\n        .mcb_rd_count      ( p3_rd_count_i      ),\n        .mcb_rd_overflow   ( p3_rd_overflow_i   ),\n        .mcb_rd_error      ( p3_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S4_AXI_ENABLE == 0) begin : P4_UI_MCB\n      assign  p4_arb_en_i        =  p4_arb_en        ; \n      assign  p4_cmd_clk_i       =  p4_cmd_clk       ; \n      assign  p4_cmd_en_i        =  p4_cmd_en        ; \n      assign  p4_cmd_instr_i     =  p4_cmd_instr     ; \n      assign  p4_cmd_bl_i        =  p4_cmd_bl        ; \n      assign  p4_cmd_byte_addr_i =  p4_cmd_byte_addr ; \n      assign  p4_cmd_empty       =  p4_cmd_empty_i   ; \n      assign  p4_cmd_full        =  p4_cmd_full_i    ; \n      assign  p4_wr_clk_i        =  p4_wr_clk        ; \n      assign  p4_wr_en_i         =  p4_wr_en         ; \n      assign  p4_wr_mask_i       =  p4_wr_mask       ; \n      assign  p4_wr_data_i       =  p4_wr_data       ; \n      assign  p4_wr_full         =  p4_wr_full_i     ; \n      assign  p4_wr_empty        =  p4_wr_empty_i    ; \n      assign  p4_wr_count        =  p4_wr_count_i    ; \n      assign  p4_wr_underrun     =  p4_wr_underrun_i ; \n      assign  p4_wr_error        =  p4_wr_error_i    ; \n      assign  p4_rd_clk_i        =  p4_rd_clk        ; \n      assign  p4_rd_en_i         =  p4_rd_en         ; \n      assign  p4_rd_data         =  p4_rd_data_i     ; \n      assign  p4_rd_full         =  p4_rd_full_i     ; \n      assign  p4_rd_empty        =  p4_rd_empty_i    ; \n      assign  p4_rd_count        =  p4_rd_count_i    ; \n      assign  p4_rd_overflow     =  p4_rd_overflow_i ; \n      assign  p4_rd_error        =  p4_rd_error_i    ; \n    end\n    else begin : P4_UI_AXI\n      assign  p4_arb_en_i        =  p4_arb_en;\n      assign  s4_axi_araddr_i    = s4_axi_araddr & P_S4_AXI_ADDRMASK;\n      assign  s4_axi_awaddr_i    = s4_axi_awaddr & P_S4_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s4_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S4_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S4_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S4_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S4_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S4_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S4_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S4_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S4_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S4_AXI_ENABLE_AP           )\n        )\n        p4_axi_mcb\n        (\n        .aclk              ( s4_axi_aclk        ),\n        .aresetn           ( s4_axi_aresetn     ),\n        .s_axi_awid        ( s4_axi_awid        ),\n        .s_axi_awaddr      ( s4_axi_awaddr_i    ),\n        .s_axi_awlen       ( s4_axi_awlen       ),\n        .s_axi_awsize      ( s4_axi_awsize      ),\n        .s_axi_awburst     ( s4_axi_awburst     ),\n        .s_axi_awlock      ( s4_axi_awlock      ),\n        .s_axi_awcache     ( s4_axi_awcache     ),\n        .s_axi_awprot      ( s4_axi_awprot      ),\n        .s_axi_awqos       ( s4_axi_awqos       ),\n        .s_axi_awvalid     ( s4_axi_awvalid     ),\n        .s_axi_awready     ( s4_axi_awready     ),\n        .s_axi_wdata       ( s4_axi_wdata       ),\n        .s_axi_wstrb       ( s4_axi_wstrb       ),\n        .s_axi_wlast       ( s4_axi_wlast       ),\n        .s_axi_wvalid      ( s4_axi_wvalid      ),\n        .s_axi_wready      ( s4_axi_wready      ),\n        .s_axi_bid         ( s4_axi_bid         ),\n        .s_axi_bresp       ( s4_axi_bresp       ),\n        .s_axi_bvalid      ( s4_axi_bvalid      ),\n        .s_axi_bready      ( s4_axi_bready      ),\n        .s_axi_arid        ( s4_axi_arid        ),\n        .s_axi_araddr      ( s4_axi_araddr_i    ),\n        .s_axi_arlen       ( s4_axi_arlen       ),\n        .s_axi_arsize      ( s4_axi_arsize      ),\n        .s_axi_arburst     ( s4_axi_arburst     ),\n        .s_axi_arlock      ( s4_axi_arlock      ),\n        .s_axi_arcache     ( s4_axi_arcache     ),\n        .s_axi_arprot      ( s4_axi_arprot      ),\n        .s_axi_arqos       ( s4_axi_arqos       ),\n        .s_axi_arvalid     ( s4_axi_arvalid     ),\n        .s_axi_arready     ( s4_axi_arready     ),\n        .s_axi_rid         ( s4_axi_rid         ),\n        .s_axi_rdata       ( s4_axi_rdata       ),\n        .s_axi_rresp       ( s4_axi_rresp       ),\n        .s_axi_rlast       ( s4_axi_rlast       ),\n        .s_axi_rvalid      ( s4_axi_rvalid      ),\n        .s_axi_rready      ( s4_axi_rready      ),\n        .mcb_cmd_clk       ( p4_cmd_clk_i       ),\n        .mcb_cmd_en        ( p4_cmd_en_i        ),\n        .mcb_cmd_instr     ( p4_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p4_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p4_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p4_cmd_empty_i     ),\n        .mcb_cmd_full      ( p4_cmd_full_i      ),\n        .mcb_wr_clk        ( p4_wr_clk_i        ),\n        .mcb_wr_en         ( p4_wr_en_i         ),\n        .mcb_wr_mask       ( p4_wr_mask_i       ),\n        .mcb_wr_data       ( p4_wr_data_i       ),\n        .mcb_wr_full       ( p4_wr_full_i       ),\n        .mcb_wr_empty      ( p4_wr_empty_i      ),\n        .mcb_wr_count      ( p4_wr_count_i      ),\n        .mcb_wr_underrun   ( p4_wr_underrun_i   ),\n        .mcb_wr_error      ( p4_wr_error_i      ),\n        .mcb_rd_clk        ( p4_rd_clk_i        ),\n        .mcb_rd_en         ( p4_rd_en_i         ),\n        .mcb_rd_data       ( p4_rd_data_i       ),\n        .mcb_rd_full       ( p4_rd_full_i       ),\n        .mcb_rd_empty      ( p4_rd_empty_i      ),\n        .mcb_rd_count      ( p4_rd_count_i      ),\n        .mcb_rd_overflow   ( p4_rd_overflow_i   ),\n        .mcb_rd_error      ( p4_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S5_AXI_ENABLE == 0) begin : P5_UI_MCB\n      assign  p5_arb_en_i        =  p5_arb_en        ; \n      assign  p5_cmd_clk_i       =  p5_cmd_clk       ; \n      assign  p5_cmd_en_i        =  p5_cmd_en        ; \n      assign  p5_cmd_instr_i     =  p5_cmd_instr     ; \n      assign  p5_cmd_bl_i        =  p5_cmd_bl        ; \n      assign  p5_cmd_byte_addr_i =  p5_cmd_byte_addr ; \n      assign  p5_cmd_empty       =  p5_cmd_empty_i   ; \n      assign  p5_cmd_full        =  p5_cmd_full_i    ; \n      assign  p5_wr_clk_i        =  p5_wr_clk        ; \n      assign  p5_wr_en_i         =  p5_wr_en         ; \n      assign  p5_wr_mask_i       =  p5_wr_mask       ; \n      assign  p5_wr_data_i       =  p5_wr_data       ; \n      assign  p5_wr_full         =  p5_wr_full_i     ; \n      assign  p5_wr_empty        =  p5_wr_empty_i    ; \n      assign  p5_wr_count        =  p5_wr_count_i    ; \n      assign  p5_wr_underrun     =  p5_wr_underrun_i ; \n      assign  p5_wr_error        =  p5_wr_error_i    ; \n      assign  p5_rd_clk_i        =  p5_rd_clk        ; \n      assign  p5_rd_en_i         =  p5_rd_en         ; \n      assign  p5_rd_data         =  p5_rd_data_i     ; \n      assign  p5_rd_full         =  p5_rd_full_i     ; \n      assign  p5_rd_empty        =  p5_rd_empty_i    ; \n      assign  p5_rd_count        =  p5_rd_count_i    ; \n      assign  p5_rd_overflow     =  p5_rd_overflow_i ; \n      assign  p5_rd_error        =  p5_rd_error_i    ; \n    end\n    else begin : P5_UI_AXI\n      assign  p5_arb_en_i        =  p5_arb_en;\n      assign  s5_axi_araddr_i    = s5_axi_araddr & P_S5_AXI_ADDRMASK;\n      assign  s5_axi_awaddr_i    = s5_axi_awaddr & P_S5_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s5_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S5_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S5_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S5_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S5_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S5_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S5_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S5_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S5_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S5_AXI_ENABLE_AP           )\n        )\n        p5_axi_mcb\n        (\n        .aclk              ( s5_axi_aclk        ),\n        .aresetn           ( s5_axi_aresetn     ),\n        .s_axi_awid        ( s5_axi_awid        ),\n        .s_axi_awaddr      ( s5_axi_awaddr_i    ),\n        .s_axi_awlen       ( s5_axi_awlen       ),\n        .s_axi_awsize      ( s5_axi_awsize      ),\n        .s_axi_awburst     ( s5_axi_awburst     ),\n        .s_axi_awlock      ( s5_axi_awlock      ),\n        .s_axi_awcache     ( s5_axi_awcache     ),\n        .s_axi_awprot      ( s5_axi_awprot      ),\n        .s_axi_awqos       ( s5_axi_awqos       ),\n        .s_axi_awvalid     ( s5_axi_awvalid     ),\n        .s_axi_awready     ( s5_axi_awready     ),\n        .s_axi_wdata       ( s5_axi_wdata       ),\n        .s_axi_wstrb       ( s5_axi_wstrb       ),\n        .s_axi_wlast       ( s5_axi_wlast       ),\n        .s_axi_wvalid      ( s5_axi_wvalid      ),\n        .s_axi_wready      ( s5_axi_wready      ),\n        .s_axi_bid         ( s5_axi_bid         ),\n        .s_axi_bresp       ( s5_axi_bresp       ),\n        .s_axi_bvalid      ( s5_axi_bvalid      ),\n        .s_axi_bready      ( s5_axi_bready      ),\n        .s_axi_arid        ( s5_axi_arid        ),\n        .s_axi_araddr      ( s5_axi_araddr_i    ),\n        .s_axi_arlen       ( s5_axi_arlen       ),\n        .s_axi_arsize      ( s5_axi_arsize      ),\n        .s_axi_arburst     ( s5_axi_arburst     ),\n        .s_axi_arlock      ( s5_axi_arlock      ),\n        .s_axi_arcache     ( s5_axi_arcache     ),\n        .s_axi_arprot      ( s5_axi_arprot      ),\n        .s_axi_arqos       ( s5_axi_arqos       ),\n        .s_axi_arvalid     ( s5_axi_arvalid     ),\n        .s_axi_arready     ( s5_axi_arready     ),\n        .s_axi_rid         ( s5_axi_rid         ),\n        .s_axi_rdata       ( s5_axi_rdata       ),\n        .s_axi_rresp       ( s5_axi_rresp       ),\n        .s_axi_rlast       ( s5_axi_rlast       ),\n        .s_axi_rvalid      ( s5_axi_rvalid      ),\n        .s_axi_rready      ( s5_axi_rready      ),\n        .mcb_cmd_clk       ( p5_cmd_clk_i       ),\n        .mcb_cmd_en        ( p5_cmd_en_i        ),\n        .mcb_cmd_instr     ( p5_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p5_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p5_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p5_cmd_empty_i     ),\n        .mcb_cmd_full      ( p5_cmd_full_i      ),\n        .mcb_wr_clk        ( p5_wr_clk_i        ),\n        .mcb_wr_en         ( p5_wr_en_i         ),\n        .mcb_wr_mask       ( p5_wr_mask_i       ),\n        .mcb_wr_data       ( p5_wr_data_i       ),\n        .mcb_wr_full       ( p5_wr_full_i       ),\n        .mcb_wr_empty      ( p5_wr_empty_i      ),\n        .mcb_wr_count      ( p5_wr_count_i      ),\n        .mcb_wr_underrun   ( p5_wr_underrun_i   ),\n        .mcb_wr_error      ( p5_wr_error_i      ),\n        .mcb_rd_clk        ( p5_rd_clk_i        ),\n        .mcb_rd_en         ( p5_rd_en_i         ),\n        .mcb_rd_data       ( p5_rd_data_i       ),\n        .mcb_rd_full       ( p5_rd_full_i       ),\n        .mcb_rd_empty      ( p5_rd_empty_i      ),\n        .mcb_rd_count      ( p5_rd_count_i      ),\n        .mcb_rd_overflow   ( p5_rd_overflow_i   ),\n        .mcb_rd_error      ( p5_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\nendmodule\n\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: mcb_ui_top. Module specification: This module serves as a top-level wrapper for a memory controller block (MCB) interface, integrating various components including AXI interfaces, MCB raw wrapper, and BUFPLL_MCB for clock management. It supports up to 6 ports, configurable as either native MCB interfaces or AXI interfaces. The module handles address translation, arbitration, and data transfer between user interfaces and the memory controller. Input ports include clock signals, reset signals, arbitration enables, command signals, write/read signals, AXI interface signals, and various control signals for memory operations and calibration. Output ports include buffered clock signals, status signals for command and data operations, memory interface signals, calibration status signals, and AXI interface response signals. Internal signals serve as intermediaries between the module's inputs/outputs and its submodules, including masked versions of AXI"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: mcb_ui_top\n\nExplanation: This module serves as a top-level wrapper for a memory controller block (MCB) interface. It integrates various components including AXI interfaces, MCB raw wrapper, and BUFPLL_MCB for clock management. The module supports up to 6 ports, which can be configured as either native MCB interfaces or AXI interfaces. It handles address translation, arbitration, and data transfer between the user interfaces and the memory controller. The module also manages clock synchronization and calibration signals for proper memory operation."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nsysclk_2x, sysclk_2x_180, pll_ce_0, pll_ce_90, pll_lock, sys_rst, p0_arb_en to p5_arb_en, p0_cmd_clk to p5_cmd_clk, p0_cmd_en to p5_cmd_en, p0_cmd_instr to p5_cmd_instr, p0_cmd_bl to p5_cmd_bl, p0_cmd_byte_addr to p5_cmd_byte_addr, p0_wr_clk to p5_wr_clk, p0_wr_en to p5_wr_en, p0_wr_mask to p5_wr_mask, p0_wr_data to p5_wr_data, p0_rd_clk to p5_rd_clk, p0_rd_en to p5_rd_en, calib_recal, ui_read, ui_add, ui_cs, ui_clk, ui_sdi, ui_addr, ui_broadcast, ui_drp_update, ui_done_cal, ui_cmd, ui_cmd_in, ui_cmd_en, ui_dqcount, ui_dq_lower_dec, ui_dq_lower_inc, ui_dq_upper_dec, ui_dq_upper_inc, ui_udqs_inc, ui_udqs_dec, ui_ldqs_inc, ui_ldqs_dec, selfrefresh_enter, s0_axi_aclk to s5_axi_aclk, s0_axi_aresetn to s5_axi_aresetn, s0_axi_awid to s5_axi_awid, s0_axi_awaddr to s5_axi_awaddr, s0_axi_awlen to s5_axi_awlen, s0_axi_awsize to s5_axi_awsize, s0_axi_awburst to s5_axi_awburst, s0_axi_awlock to s5_axi_awlock, s0_axi_awcache to s5_axi_awcache, s0_axi_awprot to s5_axi_awprot, s0_axi_awqos to s5_axi_awqos, s0_axi_awvalid to s5_axi_awvalid, s0_axi_wdata to s5_axi_wdata, s0_axi_wstrb to s5_axi_wstrb, s0_axi_wlast to s5_axi_wlast, s0_axi_wvalid to s5_axi_wvalid, s0_axi_bready to s5_axi_bready, s0_axi_arid to s5_axi_arid, s0_axi_araddr to s5_axi_araddr, s0_axi_arlen to s5_axi_arlen, s0_axi_arsize to s5_axi_arsize, s0_axi_arburst to s5_axi_arburst, s0_axi_arlock to s5_axi_arlock, s0_axi_arcache to s5_axi_arcache, s0_axi_arprot to s5_axi_arprot, s0_axi_arqos to s5_axi_arqos, s0_axi_arvalid to s5_axi_arvalid, s0_axi_rready to s5_axi_rready.\n\nExplanation: These input ports include clock signals, reset signals, arbitration enables, command signals, write/read signals, AXI interface signals, and various control signals for memory operations and calibration.\n\nOutput ports:\nsysclk_2x_bufpll_o, sysclk_2x_180_bufpll_o, pll_ce_0_bufpll_o, pll_ce_90_bufpll_o, pll_lock_bufpll_o, p0_cmd_empty to p5_cmd_empty, p0_cmd_full to p5_cmd_full, p0_wr_full to p5_wr_full, p0_wr_empty to p5_wr_empty, p0_wr_count to p5_wr_count, p0_wr_underrun to p5_wr_underrun, p0_wr_error to p5_wr_error, p0_rd_data to p5_rd_data, p0_rd_full to p5_rd_full, p0_rd_empty to p5_rd_empty, p0_rd_count to p5_rd_count, p0_rd_overflow to p5_rd_overflow, p0_rd_error to p5_rd_error, mcbx_dram_addr, mcbx_dram_ba, mcbx_dram_ras_n, mcbx_dram_cas_n, mcbx_dram_we_n, mcbx_dram_cke, mcbx_dram_clk, mcbx_dram_clk_n, mcbx_dram_dq, mcbx_dram_dqs, mcbx_dram_dqs_n, mcbx_dram_udqs, mcbx_dram_udqs_n, mcbx_dram_udm, mcbx_dram_ldm, mcbx_dram_odt, mcbx_dram_ddr3_rst, uo_data, uo_data_valid, uo_done_cal, uo_cmd_ready_in, uo_refrsh_flag, uo_cal_start, uo_sdo, status, selfrefresh_mode, s0_axi_awready to s5_axi_awready, s0_axi_wready to s5_axi_wready, s0_axi_bid to s5_axi_bid, s0_axi_bresp to s5_axi_bresp, s0_axi_bvalid to s5_axi_bvalid, s0_axi_arready to s5_axi_arready, s0_axi_rid to s5_axi_rid, s0_axi_rdata to s5_axi_rdata, s0_axi_rresp to s5_axi_rresp, s0_axi_rlast to s5_axi_rlast, s0_axi_rvalid to s5_axi_rvalid.\n\nExplanation: These output ports include buffered clock signals, status signals for command and data operations, memory interface signals, calibration status signals, and AXI interface response signals."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the provided code, here are the internal signals and their explanations:\n\nInternal signals: s0_axi_araddr_i, s0_axi_awaddr_i, s1_axi_araddr_i, s1_axi_awaddr_i, s2_axi_araddr_i, s2_axi_awaddr_i, s3_axi_araddr_i, s3_axi_awaddr_i, s4_axi_araddr_i, s4_axi_awaddr_i, s5_axi_araddr_i, s5_axi_awaddr_i, p0_arb_en_i to p5_arb_en_i, p0_cmd_clk_i to p5_cmd_clk_i, p0_cmd_en_i to p5_cmd_en_i, p0_cmd_instr_i to p5_cmd_instr_i, p0_cmd_bl_i to p5_cmd_bl_i, p0_cmd_byte_addr_i to p5_cmd_byte_addr_i, p0_cmd_empty_i to p5_cmd_empty_i, p0_cmd_full_i to p5_cmd_full_i, p0_wr_clk_i to p5_wr_clk_i, p0_wr_en_i to p5_wr_en_i, p0_wr_mask_i to p5_wr_mask_i, p0_wr_data_i to p5_wr_data_i, p0_wr_full_i to p5_wr_full_i, p0_wr_empty_i to p5_wr_empty_i, p0_wr_count_i to p5_wr_count_i, p0_wr_underrun_i to p5_wr_underrun_i, p0_wr_error_i to p5_wr_error_i, p0_rd_clk_i to p5_rd_clk_i, p0_rd_en_i to p5_rd_en_i, p0_rd_data_i to p5_rd_data_i, p0_rd_full_i to p5_rd_full_i, p0_rd_empty_i to p5_rd_empty_i, p0_rd_count_i to p5_rd_count_i, p0_rd_overflow_i to p5_rd_overflow_i, p0_rd_error_i to p5_rd_error_i, ioclk0, ioclk180, pll_ce_0_i, pll_ce_90_i.\n\nExplanation: These internal signals serve as intermediaries between the module's inputs/outputs and its submodules. The AXI address signals (*_axi_araddr_i and *_axi_awaddr_i) are masked versions of the input addresses. The signals with suffix \"_i\" (e.g., p0_arb_en_i, p0_cmd_clk_i) are internal representations of the corresponding input/output signals, used to connect the top-level ports with the mcb_raw_wrapper instance. The ioclk0, ioclk180, pll_ce_0_i, and pll_ce_90_i signals are used for clock management and are connected to either the BUFPLL_MCB instance or directly to input signals depending on the C_MCB_USE_EXTERNAL_BUFPLL parameter."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps / 1ps\n\nmodule mcb_ui_top #\n   (\n\n\n\n   \n   parameter         C_MEMCLK_PERIOD           = 2500,\n   parameter         C_PORT_ENABLE             = 6'b111111,\n   parameter         C_MEM_ADDR_ORDER          = \"BANK_ROW_COLUMN\",\n   parameter         C_USR_INTERFACE_MODE      = \"NATIVE\",\n   parameter         C_ARB_ALGORITHM           = 0,\n   parameter         C_ARB_NUM_TIME_SLOTS      = 12,\n   parameter         C_ARB_TIME_SLOT_0         = 18'o012345,\n   parameter         C_ARB_TIME_SLOT_1         = 18'o123450,\n   parameter         C_ARB_TIME_SLOT_2         = 18'o234501,\n   parameter         C_ARB_TIME_SLOT_3         = 18'o345012,\n   parameter         C_ARB_TIME_SLOT_4         = 18'o450123,\n   parameter         C_ARB_TIME_SLOT_5         = 18'o501234,\n   parameter         C_ARB_TIME_SLOT_6         = 18'o012345,\n   parameter         C_ARB_TIME_SLOT_7         = 18'o123450,\n   parameter         C_ARB_TIME_SLOT_8         = 18'o234501,\n   parameter         C_ARB_TIME_SLOT_9         = 18'o345012,\n   parameter         C_ARB_TIME_SLOT_10        = 18'o450123,\n   parameter         C_ARB_TIME_SLOT_11        = 18'o501234,\n   parameter         C_PORT_CONFIG             = \"B128\",\n   parameter         C_MEM_TRAS                = 45000,\n   parameter         C_MEM_TRCD                = 12500,\n   parameter         C_MEM_TREFI               = 7800,\n   parameter         C_MEM_TRFC                = 127500,\n   parameter         C_MEM_TRP                 = 12500,\n   parameter         C_MEM_TWR                 = 15000,\n   parameter         C_MEM_TRTP                = 7500,\n   parameter         C_MEM_TWTR                = 7500,\n   parameter         C_NUM_DQ_PINS             = 8,\n   parameter         C_MEM_TYPE                = \"DDR3\",\n   parameter         C_MEM_DENSITY             = \"512M\",\n   parameter         C_MEM_BURST_LEN           = 8,\n   parameter         C_MEM_CAS_LATENCY         = 4,\n   parameter         C_MEM_ADDR_WIDTH          = 13,\n   parameter         C_MEM_BANKADDR_WIDTH      = 3,\n   parameter         C_MEM_NUM_COL_BITS        = 11,\n   parameter         C_MEM_DDR3_CAS_LATENCY    = 7,\n   parameter         C_MEM_MOBILE_PA_SR        = \"FULL\",\n   parameter         C_MEM_DDR1_2_ODS          = \"FULL\",\n   parameter         C_MEM_DDR3_ODS            = \"DIV6\",\n   parameter         C_MEM_DDR2_RTT            = \"50OHMS\",\n   parameter         C_MEM_DDR3_RTT            = \"DIV2\",\n   parameter         C_MEM_MDDR_ODS            = \"FULL\",\n   parameter         C_MEM_DDR2_DIFF_DQS_EN    = \"YES\",\n   parameter         C_MEM_DDR2_3_PA_SR        = \"OFF\",\n   parameter         C_MEM_DDR3_CAS_WR_LATENCY = 5,\n   parameter         C_MEM_DDR3_AUTO_SR        = \"ENABLED\",\n   parameter         C_MEM_DDR2_3_HIGH_TEMP_SR = \"NORMAL\",\n   parameter         C_MEM_DDR3_DYN_WRT_ODT    = \"OFF\",\n   parameter         C_MEM_TZQINIT_MAXCNT      = 10'd512,\n   parameter         C_MC_CALIB_BYPASS         = \"NO\",\n   parameter         C_MC_CALIBRATION_RA       = 15'h0000,\n   parameter         C_MC_CALIBRATION_BA       = 3'h0,\n   parameter         C_CALIB_SOFT_IP           = \"TRUE\",\n   parameter         C_SKIP_IN_TERM_CAL        = 1'b0,\n   parameter         C_SKIP_DYNAMIC_CAL        = 1'b0,\n   parameter         C_SKIP_DYN_IN_TERM        = 1'b1,\n   parameter         LDQSP_TAP_DELAY_VAL       = 0,\n   parameter         UDQSP_TAP_DELAY_VAL       = 0,\n   parameter         LDQSN_TAP_DELAY_VAL       = 0,\n   parameter         UDQSN_TAP_DELAY_VAL       = 0,\n   parameter         DQ0_TAP_DELAY_VAL         = 0,\n   parameter         DQ1_TAP_DELAY_VAL         = 0,\n   parameter         DQ2_TAP_DELAY_VAL         = 0,\n   parameter         DQ3_TAP_DELAY_VAL         = 0,\n   parameter         DQ4_TAP_DELAY_VAL         = 0,\n   parameter         DQ5_TAP_DELAY_VAL         = 0,\n   parameter         DQ6_TAP_DELAY_VAL         = 0,\n   parameter         DQ7_TAP_DELAY_VAL         = 0,\n   parameter         DQ8_TAP_DELAY_VAL         = 0,\n   parameter         DQ9_TAP_DELAY_VAL         = 0,\n   parameter         DQ10_TAP_DELAY_VAL        = 0,\n   parameter         DQ11_TAP_DELAY_VAL        = 0,\n   parameter         DQ12_TAP_DELAY_VAL        = 0,\n   parameter         DQ13_TAP_DELAY_VAL        = 0,\n   parameter         DQ14_TAP_DELAY_VAL        = 0,\n   parameter         DQ15_TAP_DELAY_VAL        = 0,\n   parameter         C_MC_CALIBRATION_CA       = 12'h000,\n   parameter         C_MC_CALIBRATION_CLK_DIV  = 1,\n   parameter         C_MC_CALIBRATION_MODE     = \"CALIBRATION\",\n   parameter         C_MC_CALIBRATION_DELAY    = \"HALF\",\n   parameter         C_SIMULATION              = \"FALSE\",\n   parameter         C_P0_MASK_SIZE            = 4,\n   parameter         C_P0_DATA_PORT_SIZE       = 32,\n   parameter         C_P1_MASK_SIZE            = 4,\n   parameter         C_P1_DATA_PORT_SIZE       = 32,\n   parameter integer C_MCB_USE_EXTERNAL_BUFPLL = 1,\n   \n   parameter         C_S0_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S0_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S0_AXI_ENABLE           = 0,\n   parameter integer C_S0_AXI_ID_WIDTH         = 4,\n   parameter integer C_S0_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S0_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S0_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S0_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S0_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S0_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S0_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S0_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S0_AXI_ENABLE_AP        = 0,\n   parameter         C_S1_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S1_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S1_AXI_ENABLE           = 0,\n   parameter integer C_S1_AXI_ID_WIDTH         = 4,\n   parameter integer C_S1_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S1_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S1_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S1_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S1_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S1_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S1_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S1_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S1_AXI_ENABLE_AP        = 0,\n   parameter         C_S2_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S2_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S2_AXI_ENABLE           = 0,\n   parameter integer C_S2_AXI_ID_WIDTH         = 4,\n   parameter integer C_S2_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S2_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S2_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S2_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S2_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S2_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S2_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S2_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S2_AXI_ENABLE_AP        = 0,\n   parameter         C_S3_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S3_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S3_AXI_ENABLE           = 0,\n   parameter integer C_S3_AXI_ID_WIDTH         = 4,\n   parameter integer C_S3_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S3_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S3_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S3_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S3_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S3_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S3_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S3_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S3_AXI_ENABLE_AP        = 0,\n   parameter         C_S4_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S4_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S4_AXI_ENABLE           = 0,\n   parameter integer C_S4_AXI_ID_WIDTH         = 4,\n   parameter integer C_S4_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S4_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S4_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S4_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S4_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S4_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S4_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S4_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S4_AXI_ENABLE_AP        = 0,\n   parameter         C_S5_AXI_BASEADDR         = 32'h00000000,\n   parameter         C_S5_AXI_HIGHADDR         = 32'h00000000,\n   parameter integer C_S5_AXI_ENABLE           = 0,\n   parameter integer C_S5_AXI_ID_WIDTH         = 4,\n   parameter integer C_S5_AXI_ADDR_WIDTH       = 64,\n   parameter integer C_S5_AXI_DATA_WIDTH       = 32,\n   parameter integer C_S5_AXI_SUPPORTS_READ    = 1,\n   parameter integer C_S5_AXI_SUPPORTS_WRITE   = 1,\n   parameter integer C_S5_AXI_SUPPORTS_NARROW_BURST  = 1,\n   parameter         C_S5_AXI_REG_EN0          = 20'h00000,\n   parameter         C_S5_AXI_REG_EN1          = 20'h01000,\n   parameter integer C_S5_AXI_STRICT_COHERENCY = 1,\n   parameter integer C_S5_AXI_ENABLE_AP        = 0\n   )\n   (\n\n\n\n   \n   input                                     sysclk_2x          ,\n   input                                     sysclk_2x_180      ,\n   input                                     pll_ce_0           ,\n   input                                     pll_ce_90          ,\n   output                                    sysclk_2x_bufpll_o ,\n   output                                    sysclk_2x_180_bufpll_o,\n   output                                    pll_ce_0_bufpll_o  ,\n   output                                    pll_ce_90_bufpll_o ,\n   output                                    pll_lock_bufpll_o  ,\n   input                                     pll_lock           ,\n   input                                     sys_rst            ,\n   input                                     p0_arb_en          ,\n   input                                     p0_cmd_clk         ,\n   input                                     p0_cmd_en          ,\n   input       [2:0]                         p0_cmd_instr       ,\n   input       [5:0]                         p0_cmd_bl          ,\n   input       [29:0]                        p0_cmd_byte_addr   ,\n   output                                    p0_cmd_empty       ,\n   output                                    p0_cmd_full        ,\n   input                                     p0_wr_clk          ,\n   input                                     p0_wr_en           ,\n   input       [C_P0_MASK_SIZE-1:0]          p0_wr_mask         ,\n   input       [C_P0_DATA_PORT_SIZE-1:0]     p0_wr_data         ,\n   output                                    p0_wr_full         ,\n   output                                    p0_wr_empty        ,\n   output      [6:0]                         p0_wr_count        ,\n   output                                    p0_wr_underrun     ,\n   output                                    p0_wr_error        ,\n   input                                     p0_rd_clk          ,\n   input                                     p0_rd_en           ,\n   output      [C_P0_DATA_PORT_SIZE-1:0]     p0_rd_data         ,\n   output                                    p0_rd_full         ,\n   output                                    p0_rd_empty        ,\n   output      [6:0]                         p0_rd_count        ,\n   output                                    p0_rd_overflow     ,\n   output                                    p0_rd_error        ,\n   input                                     p1_arb_en          ,\n   input                                     p1_cmd_clk         ,\n   input                                     p1_cmd_en          ,\n   input       [2:0]                         p1_cmd_instr       ,\n   input       [5:0]                         p1_cmd_bl          ,\n   input       [29:0]                        p1_cmd_byte_addr   ,\n   output                                    p1_cmd_empty       ,\n   output                                    p1_cmd_full        ,\n   input                                     p1_wr_clk          ,\n   input                                     p1_wr_en           ,\n   input       [C_P1_MASK_SIZE-1:0]          p1_wr_mask         ,\n   input       [C_P1_DATA_PORT_SIZE-1:0]     p1_wr_data         ,\n   output                                    p1_wr_full         ,\n   output                                    p1_wr_empty        ,\n   output      [6:0]                         p1_wr_count        ,\n   output                                    p1_wr_underrun     ,\n   output                                    p1_wr_error        ,\n   input                                     p1_rd_clk          ,\n   input                                     p1_rd_en           ,\n   output      [C_P1_DATA_PORT_SIZE-1:0]     p1_rd_data         ,\n   output                                    p1_rd_full         ,\n   output                                    p1_rd_empty        ,\n   output      [6:0]                         p1_rd_count        ,\n   output                                    p1_rd_overflow     ,\n   output                                    p1_rd_error        ,\n   input                                     p2_arb_en          ,\n   input                                     p2_cmd_clk         ,\n   input                                     p2_cmd_en          ,\n   input       [2:0]                         p2_cmd_instr       ,\n   input       [5:0]                         p2_cmd_bl          ,\n   input       [29:0]                        p2_cmd_byte_addr   ,\n   output                                    p2_cmd_empty       ,\n   output                                    p2_cmd_full        ,\n   input                                     p2_wr_clk          ,\n   input                                     p2_wr_en           ,\n   input       [3:0]                         p2_wr_mask         ,\n   input       [31:0]                        p2_wr_data         ,\n   output                                    p2_wr_full         ,\n   output                                    p2_wr_empty        ,\n   output      [6:0]                         p2_wr_count        ,\n   output                                    p2_wr_underrun     ,\n   output                                    p2_wr_error        ,\n   input                                     p2_rd_clk          ,\n   input                                     p2_rd_en           ,\n   output      [31:0]                        p2_rd_data         ,\n   output                                    p2_rd_full         ,\n   output                                    p2_rd_empty        ,\n   output      [6:0]                         p2_rd_count        ,\n   output                                    p2_rd_overflow     ,\n   output                                    p2_rd_error        ,\n   input                                     p3_arb_en          ,\n   input                                     p3_cmd_clk         ,\n   input                                     p3_cmd_en          ,\n   input       [2:0]                         p3_cmd_instr       ,\n   input       [5:0]                         p3_cmd_bl          ,\n   input       [29:0]                        p3_cmd_byte_addr   ,\n   output                                    p3_cmd_empty       ,\n   output                                    p3_cmd_full        ,\n   input                                     p3_wr_clk          ,\n   input                                     p3_wr_en           ,\n   input       [3:0]                         p3_wr_mask         ,\n   input       [31:0]                        p3_wr_data         ,\n   output                                    p3_wr_full         ,\n   output                                    p3_wr_empty        ,\n   output      [6:0]                         p3_wr_count        ,\n   output                                    p3_wr_underrun     ,\n   output                                    p3_wr_error        ,\n   input                                     p3_rd_clk          ,\n   input                                     p3_rd_en           ,\n   output      [31:0]                        p3_rd_data         ,\n   output                                    p3_rd_full         ,\n   output                                    p3_rd_empty        ,\n   output      [6:0]                         p3_rd_count        ,\n   output                                    p3_rd_overflow     ,\n   output                                    p3_rd_error        ,\n   input                                     p4_arb_en          ,\n   input                                     p4_cmd_clk         ,\n   input                                     p4_cmd_en          ,\n   input       [2:0]                         p4_cmd_instr       ,\n   input       [5:0]                         p4_cmd_bl          ,\n   input       [29:0]                        p4_cmd_byte_addr   ,\n   output                                    p4_cmd_empty       ,\n   output                                    p4_cmd_full        ,\n   input                                     p4_wr_clk          ,\n   input                                     p4_wr_en           ,\n   input       [3:0]                         p4_wr_mask         ,\n   input       [31:0]                        p4_wr_data         ,\n   output                                    p4_wr_full         ,\n   output                                    p4_wr_empty        ,\n   output      [6:0]                         p4_wr_count        ,\n   output                                    p4_wr_underrun     ,\n   output                                    p4_wr_error        ,\n   input                                     p4_rd_clk          ,\n   input                                     p4_rd_en           ,\n   output      [31:0]                        p4_rd_data         ,\n   output                                    p4_rd_full         ,\n   output                                    p4_rd_empty        ,\n   output      [6:0]                         p4_rd_count        ,\n   output                                    p4_rd_overflow     ,\n   output                                    p4_rd_error        ,\n   input                                     p5_arb_en          ,\n   input                                     p5_cmd_clk         ,\n   input                                     p5_cmd_en          ,\n   input       [2:0]                         p5_cmd_instr       ,\n   input       [5:0]                         p5_cmd_bl          ,\n   input       [29:0]                        p5_cmd_byte_addr   ,\n   output                                    p5_cmd_empty       ,\n   output                                    p5_cmd_full        ,\n   input                                     p5_wr_clk          ,\n   input                                     p5_wr_en           ,\n   input       [3:0]                         p5_wr_mask         ,\n   input       [31:0]                        p5_wr_data         ,\n   output                                    p5_wr_full         ,\n   output                                    p5_wr_empty        ,\n   output      [6:0]                         p5_wr_count        ,\n   output                                    p5_wr_underrun     ,\n   output                                    p5_wr_error        ,\n   input                                     p5_rd_clk          ,\n   input                                     p5_rd_en           ,\n   output      [31:0]                        p5_rd_data         ,\n   output                                    p5_rd_full         ,\n   output                                    p5_rd_empty        ,\n   output      [6:0]                         p5_rd_count        ,\n   output                                    p5_rd_overflow     ,\n   output                                    p5_rd_error        ,\n   output      [C_MEM_ADDR_WIDTH-1:0]        mcbx_dram_addr     ,\n   output      [C_MEM_BANKADDR_WIDTH-1:0]    mcbx_dram_ba       ,\n   output                                    mcbx_dram_ras_n    ,\n   output                                    mcbx_dram_cas_n    ,\n   output                                    mcbx_dram_we_n     ,\n   output                                    mcbx_dram_cke      ,\n   output                                    mcbx_dram_clk      ,\n   output                                    mcbx_dram_clk_n    ,\n   inout       [C_NUM_DQ_PINS-1:0]           mcbx_dram_dq       ,\n   inout                                     mcbx_dram_dqs      ,\n   inout                                     mcbx_dram_dqs_n    ,\n   inout                                     mcbx_dram_udqs     ,\n   inout                                     mcbx_dram_udqs_n   ,\n   output                                    mcbx_dram_udm      ,\n   output                                    mcbx_dram_ldm      ,\n   output                                    mcbx_dram_odt      ,\n   output                                    mcbx_dram_ddr3_rst ,\n   input                                     calib_recal        ,\n   inout                                     rzq                ,\n   inout                                     zio                ,\n   input                                     ui_read            ,\n   input                                     ui_add             ,\n   input                                     ui_cs              ,\n   input                                     ui_clk             ,\n   input                                     ui_sdi             ,\n   input       [4:0]                         ui_addr            ,\n   input                                     ui_broadcast       ,\n   input                                     ui_drp_update      ,\n   input                                     ui_done_cal        ,\n   input                                     ui_cmd             ,\n   input                                     ui_cmd_in          ,\n   input                                     ui_cmd_en          ,\n   input       [3:0]                         ui_dqcount         ,\n   input                                     ui_dq_lower_dec    ,\n   input                                     ui_dq_lower_inc    ,\n   input                                     ui_dq_upper_dec    ,\n   input                                     ui_dq_upper_inc    ,\n   input                                     ui_udqs_inc        ,\n   input                                     ui_udqs_dec        ,\n   input                                     ui_ldqs_inc        ,\n   input                                     ui_ldqs_dec        ,\n   output      [7:0]                         uo_data            ,\n   output                                    uo_data_valid      ,\n   output                                    uo_done_cal        ,\n   output                                    uo_cmd_ready_in    ,\n   output                                    uo_refrsh_flag     ,\n   output                                    uo_cal_start       ,\n   output                                    uo_sdo             ,\n   output      [31:0]                        status             ,\n   input                                     selfrefresh_enter  ,\n   output                                    selfrefresh_mode   ,\n   \n   input  wire                               s0_axi_aclk        ,\n   input  wire                               s0_axi_aresetn     ,\n   input  wire [C_S0_AXI_ID_WIDTH-1:0]       s0_axi_awid        ,\n   input  wire [C_S0_AXI_ADDR_WIDTH-1:0]     s0_axi_awaddr      ,\n   input  wire [7:0]                         s0_axi_awlen       ,\n   input  wire [2:0]                         s0_axi_awsize      ,\n   input  wire [1:0]                         s0_axi_awburst     ,\n   input  wire [0:0]                         s0_axi_awlock      ,\n   input  wire [3:0]                         s0_axi_awcache     ,\n   input  wire [2:0]                         s0_axi_awprot      ,\n   input  wire [3:0]                         s0_axi_awqos       ,\n   input  wire                               s0_axi_awvalid     ,\n   output wire                               s0_axi_awready     ,\n   input  wire [C_S0_AXI_DATA_WIDTH-1:0]     s0_axi_wdata       ,\n   input  wire [C_S0_AXI_DATA_WIDTH/8-1:0]   s0_axi_wstrb       ,\n   input  wire                               s0_axi_wlast       ,\n   input  wire                               s0_axi_wvalid      ,\n   output wire                               s0_axi_wready      ,\n   output wire [C_S0_AXI_ID_WIDTH-1:0]       s0_axi_bid         ,\n   output wire [1:0]                         s0_axi_bresp       ,\n   output wire                               s0_axi_bvalid      ,\n   input  wire                               s0_axi_bready      ,\n   input  wire [C_S0_AXI_ID_WIDTH-1:0]       s0_axi_arid        ,\n   input  wire [C_S0_AXI_ADDR_WIDTH-1:0]     s0_axi_araddr      ,\n   input  wire [7:0]                         s0_axi_arlen       ,\n   input  wire [2:0]                         s0_axi_arsize      ,\n   input  wire [1:0]                         s0_axi_arburst     ,\n   input  wire [0:0]                         s0_axi_arlock      ,\n   input  wire [3:0]                         s0_axi_arcache     ,\n   input  wire [2:0]                         s0_axi_arprot      ,\n   input  wire [3:0]                         s0_axi_arqos       ,\n   input  wire                               s0_axi_arvalid     ,\n   output wire                               s0_axi_arready     ,\n   output wire [C_S0_AXI_ID_WIDTH-1:0]       s0_axi_rid         ,\n   output wire [C_S0_AXI_DATA_WIDTH-1:0]     s0_axi_rdata       ,\n   output wire [1:0]                         s0_axi_rresp       ,\n   output wire                               s0_axi_rlast       ,\n   output wire                               s0_axi_rvalid      ,\n   input  wire                               s0_axi_rready      ,\n\n   input  wire                               s1_axi_aclk        ,\n   input  wire                               s1_axi_aresetn     ,\n   input  wire [C_S1_AXI_ID_WIDTH-1:0]       s1_axi_awid        ,\n   input  wire [C_S1_AXI_ADDR_WIDTH-1:0]     s1_axi_awaddr      ,\n   input  wire [7:0]                         s1_axi_awlen       ,\n   input  wire [2:0]                         s1_axi_awsize      ,\n   input  wire [1:0]                         s1_axi_awburst     ,\n   input  wire [0:0]                         s1_axi_awlock      ,\n   input  wire [3:0]                         s1_axi_awcache     ,\n   input  wire [2:0]                         s1_axi_awprot      ,\n   input  wire [3:0]                         s1_axi_awqos       ,\n   input  wire                               s1_axi_awvalid     ,\n   output wire                               s1_axi_awready     ,\n   input  wire [C_S1_AXI_DATA_WIDTH-1:0]     s1_axi_wdata       ,\n   input  wire [C_S1_AXI_DATA_WIDTH/8-1:0]   s1_axi_wstrb       ,\n   input  wire                               s1_axi_wlast       ,\n   input  wire                               s1_axi_wvalid      ,\n   output wire                               s1_axi_wready      ,\n   output wire [C_S1_AXI_ID_WIDTH-1:0]       s1_axi_bid         ,\n   output wire [1:0]                         s1_axi_bresp       ,\n   output wire                               s1_axi_bvalid      ,\n   input  wire                               s1_axi_bready      ,\n   input  wire [C_S1_AXI_ID_WIDTH-1:0]       s1_axi_arid        ,\n   input  wire [C_S1_AXI_ADDR_WIDTH-1:0]     s1_axi_araddr      ,\n   input  wire [7:0]                         s1_axi_arlen       ,\n   input  wire [2:0]                         s1_axi_arsize      ,\n   input  wire [1:0]                         s1_axi_arburst     ,\n   input  wire [0:0]                         s1_axi_arlock      ,\n   input  wire [3:0]                         s1_axi_arcache     ,\n   input  wire [2:0]                         s1_axi_arprot      ,\n   input  wire [3:0]                         s1_axi_arqos       ,\n   input  wire                               s1_axi_arvalid     ,\n   output wire                               s1_axi_arready     ,\n   output wire [C_S1_AXI_ID_WIDTH-1:0]       s1_axi_rid         ,\n   output wire [C_S1_AXI_DATA_WIDTH-1:0]     s1_axi_rdata       ,\n   output wire [1:0]                         s1_axi_rresp       ,\n   output wire                               s1_axi_rlast       ,\n   output wire                               s1_axi_rvalid      ,\n   input  wire                               s1_axi_rready      ,\n\n   input  wire                               s2_axi_aclk        ,\n   input  wire                               s2_axi_aresetn     ,\n   input  wire [C_S2_AXI_ID_WIDTH-1:0]       s2_axi_awid        ,\n   input  wire [C_S2_AXI_ADDR_WIDTH-1:0]     s2_axi_awaddr      ,\n   input  wire [7:0]                         s2_axi_awlen       ,\n   input  wire [2:0]                         s2_axi_awsize      ,\n   input  wire [1:0]                         s2_axi_awburst     ,\n   input  wire [0:0]                         s2_axi_awlock      ,\n   input  wire [3:0]                         s2_axi_awcache     ,\n   input  wire [2:0]                         s2_axi_awprot      ,\n   input  wire [3:0]                         s2_axi_awqos       ,\n   input  wire                               s2_axi_awvalid     ,\n   output wire                               s2_axi_awready     ,\n   input  wire [C_S2_AXI_DATA_WIDTH-1:0]     s2_axi_wdata       ,\n   input  wire [C_S2_AXI_DATA_WIDTH/8-1:0]   s2_axi_wstrb       ,\n   input  wire                               s2_axi_wlast       ,\n   input  wire                               s2_axi_wvalid      ,\n   output wire                               s2_axi_wready      ,\n   output wire [C_S2_AXI_ID_WIDTH-1:0]       s2_axi_bid         ,\n   output wire [1:0]                         s2_axi_bresp       ,\n   output wire                               s2_axi_bvalid      ,\n   input  wire                               s2_axi_bready      ,\n   input  wire [C_S2_AXI_ID_WIDTH-1:0]       s2_axi_arid        ,\n   input  wire [C_S2_AXI_ADDR_WIDTH-1:0]     s2_axi_araddr      ,\n   input  wire [7:0]                         s2_axi_arlen       ,\n   input  wire [2:0]                         s2_axi_arsize      ,\n   input  wire [1:0]                         s2_axi_arburst     ,\n   input  wire [0:0]                         s2_axi_arlock      ,\n   input  wire [3:0]                         s2_axi_arcache     ,\n   input  wire [2:0]                         s2_axi_arprot      ,\n   input  wire [3:0]                         s2_axi_arqos       ,\n   input  wire                               s2_axi_arvalid     ,\n   output wire                               s2_axi_arready     ,\n   output wire [C_S2_AXI_ID_WIDTH-1:0]       s2_axi_rid         ,\n   output wire [C_S2_AXI_DATA_WIDTH-1:0]     s2_axi_rdata       ,\n   output wire [1:0]                         s2_axi_rresp       ,\n   output wire                               s2_axi_rlast       ,\n   output wire                               s2_axi_rvalid      ,\n   input  wire                               s2_axi_rready      ,\n\n   input  wire                               s3_axi_aclk        ,\n   input  wire                               s3_axi_aresetn     ,\n   input  wire [C_S3_AXI_ID_WIDTH-1:0]       s3_axi_awid        ,\n   input  wire [C_S3_AXI_ADDR_WIDTH-1:0]     s3_axi_awaddr      ,\n   input  wire [7:0]                         s3_axi_awlen       ,\n   input  wire [2:0]                         s3_axi_awsize      ,\n   input  wire [1:0]                         s3_axi_awburst     ,\n   input  wire [0:0]                         s3_axi_awlock      ,\n   input  wire [3:0]                         s3_axi_awcache     ,\n   input  wire [2:0]                         s3_axi_awprot      ,\n   input  wire [3:0]                         s3_axi_awqos       ,\n   input  wire                               s3_axi_awvalid     ,\n   output wire                               s3_axi_awready     ,\n   input  wire [C_S3_AXI_DATA_WIDTH-1:0]     s3_axi_wdata       ,\n   input  wire [C_S3_AXI_DATA_WIDTH/8-1:0]   s3_axi_wstrb       ,\n   input  wire                               s3_axi_wlast       ,\n   input  wire                               s3_axi_wvalid      ,\n   output wire                               s3_axi_wready      ,\n   output wire [C_S3_AXI_ID_WIDTH-1:0]       s3_axi_bid         ,\n   output wire [1:0]                         s3_axi_bresp       ,\n   output wire                               s3_axi_bvalid      ,\n   input  wire                               s3_axi_bready      ,\n   input  wire [C_S3_AXI_ID_WIDTH-1:0]       s3_axi_arid        ,\n   input  wire [C_S3_AXI_ADDR_WIDTH-1:0]     s3_axi_araddr      ,\n   input  wire [7:0]                         s3_axi_arlen       ,\n   input  wire [2:0]                         s3_axi_arsize      ,\n   input  wire [1:0]                         s3_axi_arburst     ,\n   input  wire [0:0]                         s3_axi_arlock      ,\n   input  wire [3:0]                         s3_axi_arcache     ,\n   input  wire [2:0]                         s3_axi_arprot      ,\n   input  wire [3:0]                         s3_axi_arqos       ,\n   input  wire                               s3_axi_arvalid     ,\n   output wire                               s3_axi_arready     ,\n   output wire [C_S3_AXI_ID_WIDTH-1:0]       s3_axi_rid         ,\n   output wire [C_S3_AXI_DATA_WIDTH-1:0]     s3_axi_rdata       ,\n   output wire [1:0]                         s3_axi_rresp       ,\n   output wire                               s3_axi_rlast       ,\n   output wire                               s3_axi_rvalid      ,\n   input  wire                               s3_axi_rready      ,\n\n   input  wire                               s4_axi_aclk        ,\n   input  wire                               s4_axi_aresetn     ,\n   input  wire [C_S4_AXI_ID_WIDTH-1:0]       s4_axi_awid        ,\n   input  wire [C_S4_AXI_ADDR_WIDTH-1:0]     s4_axi_awaddr      ,\n   input  wire [7:0]                         s4_axi_awlen       ,\n   input  wire [2:0]                         s4_axi_awsize      ,\n   input  wire [1:0]                         s4_axi_awburst     ,\n   input  wire [0:0]                         s4_axi_awlock      ,\n   input  wire [3:0]                         s4_axi_awcache     ,\n   input  wire [2:0]                         s4_axi_awprot      ,\n   input  wire [3:0]                         s4_axi_awqos       ,\n   input  wire                               s4_axi_awvalid     ,\n   output wire                               s4_axi_awready     ,\n   input  wire [C_S4_AXI_DATA_WIDTH-1:0]     s4_axi_wdata       ,\n   input  wire [C_S4_AXI_DATA_WIDTH/8-1:0]   s4_axi_wstrb       ,\n   input  wire                               s4_axi_wlast       ,\n   input  wire                               s4_axi_wvalid      ,\n   output wire                               s4_axi_wready      ,\n   output wire [C_S4_AXI_ID_WIDTH-1:0]       s4_axi_bid         ,\n   output wire [1:0]                         s4_axi_bresp       ,\n   output wire                               s4_axi_bvalid      ,\n   input  wire                               s4_axi_bready      ,\n   input  wire [C_S4_AXI_ID_WIDTH-1:0]       s4_axi_arid        ,\n   input  wire [C_S4_AXI_ADDR_WIDTH-1:0]     s4_axi_araddr      ,\n   input  wire [7:0]                         s4_axi_arlen       ,\n   input  wire [2:0]                         s4_axi_arsize      ,\n   input  wire [1:0]                         s4_axi_arburst     ,\n   input  wire [0:0]                         s4_axi_arlock      ,\n   input  wire [3:0]                         s4_axi_arcache     ,\n   input  wire [2:0]                         s4_axi_arprot      ,\n   input  wire [3:0]                         s4_axi_arqos       ,\n   input  wire                               s4_axi_arvalid     ,\n   output wire                               s4_axi_arready     ,\n   output wire [C_S4_AXI_ID_WIDTH-1:0]       s4_axi_rid         ,\n   output wire [C_S4_AXI_DATA_WIDTH-1:0]     s4_axi_rdata       ,\n   output wire [1:0]                         s4_axi_rresp       ,\n   output wire                               s4_axi_rlast       ,\n   output wire                               s4_axi_rvalid      ,\n   input  wire                               s4_axi_rready      ,\n\n   input  wire                               s5_axi_aclk        ,\n   input  wire                               s5_axi_aresetn     ,\n   input  wire [C_S5_AXI_ID_WIDTH-1:0]       s5_axi_awid        ,\n   input  wire [C_S5_AXI_ADDR_WIDTH-1:0]     s5_axi_awaddr      ,\n   input  wire [7:0]                         s5_axi_awlen       ,\n   input  wire [2:0]                         s5_axi_awsize      ,\n   input  wire [1:0]                         s5_axi_awburst     ,\n   input  wire [0:0]                         s5_axi_awlock      ,\n   input  wire [3:0]                         s5_axi_awcache     ,\n   input  wire [2:0]                         s5_axi_awprot      ,\n   input  wire [3:0]                         s5_axi_awqos       ,\n   input  wire                               s5_axi_awvalid     ,\n   output wire                               s5_axi_awready     ,\n   input  wire [C_S5_AXI_DATA_WIDTH-1:0]     s5_axi_wdata       ,\n   input  wire [C_S5_AXI_DATA_WIDTH/8-1:0]   s5_axi_wstrb       ,\n   input  wire                               s5_axi_wlast       ,\n   input  wire                               s5_axi_wvalid      ,\n   output wire                               s5_axi_wready      ,\n   output wire [C_S5_AXI_ID_WIDTH-1:0]       s5_axi_bid         ,\n   output wire [1:0]                         s5_axi_bresp       ,\n   output wire                               s5_axi_bvalid      ,\n   input  wire                               s5_axi_bready      ,\n   input  wire [C_S5_AXI_ID_WIDTH-1:0]       s5_axi_arid        ,\n   input  wire [C_S5_AXI_ADDR_WIDTH-1:0]     s5_axi_araddr      ,\n   input  wire [7:0]                         s5_axi_arlen       ,\n   input  wire [2:0]                         s5_axi_arsize      ,\n   input  wire [1:0]                         s5_axi_arburst     ,\n   input  wire [0:0]                         s5_axi_arlock      ,\n   input  wire [3:0]                         s5_axi_arcache     ,\n   input  wire [2:0]                         s5_axi_arprot      ,\n   input  wire [3:0]                         s5_axi_arqos       ,\n   input  wire                               s5_axi_arvalid     ,\n   output wire                               s5_axi_arready     ,\n   output wire [C_S5_AXI_ID_WIDTH-1:0]       s5_axi_rid         ,\n   output wire [C_S5_AXI_DATA_WIDTH-1:0]     s5_axi_rdata       ,\n   output wire [1:0]                         s5_axi_rresp       ,\n   output wire                               s5_axi_rlast       ,\n   output wire                               s5_axi_rvalid      ,\n   input  wire                               s5_axi_rready\n   );\n\n\n\n\n\nfunction [17:0] blso (\n  input [17:0] a,\n  input integer shift,\n  input integer width\n);\nbegin : func_blso\n  integer i;\n  integer w;\n  integer s;\n  w = width*3;\n  s = (shift*3) % w;\n  blso = 18'o000000;\n  for (i = 0; i < w; i = i + 1) begin\n    blso[i] = a[(i+w-s)%w];\n    \n  end\nend\nendfunction\n\n\n\nfunction [17:0] rr (\n  input [5:0] port_enable,\n  input integer port_config,\n  input integer slot_num\n);\nbegin : func_rr\n  integer i;\n  integer max_ports;\n  integer num_ports;\n  integer port_cnt;\n\n  case (port_config)\n    1: max_ports = 6;\n    2: max_ports = 4;\n    3: max_ports = 3;\n    4: max_ports = 2;\n    5: max_ports = 1;\n\n    default : $display(\"ERROR: Port Config can't be %d\", port_config);\n\n  endcase\n\n  num_ports = 0;\n  for (i = 0; i < max_ports; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n\n  rr = 18'o000000;\n  port_cnt = 0;\n\n  for (i = (num_ports-1); i >= 0; i = i - 1) begin\n    while (port_enable[port_cnt] != 1'b1) begin\n      port_cnt = port_cnt + 1;\n    end\n    rr[i*3 +: 3] = port_cnt[2:0];\n    port_cnt = port_cnt +1;\n  end\n\n\n  rr = blso(rr, slot_num, num_ports);\nend\nendfunction\n\nfunction [17:0] convert_arb_slot (\n  input [5:0]   port_enable,\n  input integer port_config,\n  input [17:0]  mig_arb_slot\n);\nbegin : func_convert_arb_slot\n  integer i;\n  integer num_ports;\n  integer mig_port_num;\n  reg [17:0] port_map;\n  num_ports = 0;\n\n  \n  case (port_config)\n    1: port_map = 18'o543210;\n    2: port_map = 18'o774210;\n    3: port_map = 18'o777420;\n    4: port_map = 18'o777720;\n    5: port_map = 18'o777770;\n\n    default : $display (\"ERROR: Invalid Port Configuration.\");\n\n  endcase\n\n  \n  for (i = 0; i < 6; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n\n  \n  for (i = 0; i < 6; i = i + 1) begin\n    if (i < num_ports) begin\n      mig_port_num = mig_arb_slot[3*(num_ports-i-1) +: 3];\n      convert_arb_slot[3*i +: 3] = port_map[3*mig_port_num +: 3];\n    end else begin\n      convert_arb_slot[3*i +: 3] = 3'b111;\n    end\n  end\nend\nendfunction\n\n\n\n\nfunction integer calc_num_time_slots (\n  input [5:0]   port_enable,\n  input integer port_config\n);\nbegin : func_calc_num_tim_slots\n  integer num_ports;\n  integer i;\n  num_ports = 0;\n  for (i = 0; i < 6; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n  calc_num_time_slots = (port_config == 1 && num_ports == 5) ? 10 : 12;\nend\nendfunction\n\n\n\n  localparam P_S0_AXI_ADDRMASK = C_S0_AXI_BASEADDR ^ C_S0_AXI_HIGHADDR;\n  localparam P_S1_AXI_ADDRMASK = C_S1_AXI_BASEADDR ^ C_S1_AXI_HIGHADDR;\n  localparam P_S2_AXI_ADDRMASK = C_S2_AXI_BASEADDR ^ C_S2_AXI_HIGHADDR;\n  localparam P_S3_AXI_ADDRMASK = C_S3_AXI_BASEADDR ^ C_S3_AXI_HIGHADDR;\n  localparam P_S4_AXI_ADDRMASK = C_S4_AXI_BASEADDR ^ C_S4_AXI_HIGHADDR;\n  localparam P_S5_AXI_ADDRMASK = C_S5_AXI_BASEADDR ^ C_S5_AXI_HIGHADDR;\n  localparam P_PORT_CONFIG     = (C_PORT_CONFIG == \"B32_B32_B32_B32\") ? 2 :\n                                 (C_PORT_CONFIG == \"B64_B32_B32\"    ) ? 3 :\n                                 (C_PORT_CONFIG == \"B64_B64\"        ) ? 4 :\n                                 (C_PORT_CONFIG == \"B128\"           ) ? 5 :\n                                 1; \n  localparam P_ARB_NUM_TIME_SLOTS = (C_ARB_ALGORITHM == 0) ? calc_num_time_slots(C_PORT_ENABLE, P_PORT_CONFIG) : C_ARB_NUM_TIME_SLOTS;\n  localparam P_0_ARB_TIME_SLOT_0 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 0 ) : C_ARB_TIME_SLOT_0 ;\n  localparam P_0_ARB_TIME_SLOT_1 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 1 ) : C_ARB_TIME_SLOT_1 ;\n  localparam P_0_ARB_TIME_SLOT_2 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 2 ) : C_ARB_TIME_SLOT_2 ;\n  localparam P_0_ARB_TIME_SLOT_3 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 3 ) : C_ARB_TIME_SLOT_3 ;\n  localparam P_0_ARB_TIME_SLOT_4 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 4 ) : C_ARB_TIME_SLOT_4 ;\n  localparam P_0_ARB_TIME_SLOT_5 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 5 ) : C_ARB_TIME_SLOT_5 ;\n  localparam P_0_ARB_TIME_SLOT_6 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 6 ) : C_ARB_TIME_SLOT_6 ;\n  localparam P_0_ARB_TIME_SLOT_7 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 7 ) : C_ARB_TIME_SLOT_7 ;\n  localparam P_0_ARB_TIME_SLOT_8 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 8 ) : C_ARB_TIME_SLOT_8 ;\n  localparam P_0_ARB_TIME_SLOT_9 =  (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 9 ) : C_ARB_TIME_SLOT_9 ;\n  localparam P_0_ARB_TIME_SLOT_10 = (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 10) : C_ARB_TIME_SLOT_10;\n  localparam P_0_ARB_TIME_SLOT_11 = (C_ARB_ALGORITHM == 0) ? rr(C_PORT_ENABLE, P_PORT_CONFIG, 11) : C_ARB_TIME_SLOT_11;\n  localparam P_ARB_TIME_SLOT_0 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_0);\n  localparam P_ARB_TIME_SLOT_1 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_1);\n  localparam P_ARB_TIME_SLOT_2 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_2);\n  localparam P_ARB_TIME_SLOT_3 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_3);\n  localparam P_ARB_TIME_SLOT_4 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_4);\n  localparam P_ARB_TIME_SLOT_5 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_5);\n  localparam P_ARB_TIME_SLOT_6 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_6);\n  localparam P_ARB_TIME_SLOT_7 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_7);\n  localparam P_ARB_TIME_SLOT_8 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_8);\n  localparam P_ARB_TIME_SLOT_9 =  convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_9);\n  localparam P_ARB_TIME_SLOT_10 = convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_10);\n  localparam P_ARB_TIME_SLOT_11 = convert_arb_slot(C_PORT_ENABLE, P_PORT_CONFIG, P_0_ARB_TIME_SLOT_11);\n\n\n\n\n  wire [C_S0_AXI_ADDR_WIDTH-1:0] s0_axi_araddr_i;\n  wire [C_S0_AXI_ADDR_WIDTH-1:0] s0_axi_awaddr_i;\n  wire                           p0_arb_en_i;\n  wire                           p0_cmd_clk_i;\n  wire                           p0_cmd_en_i;\n  wire [2:0]                     p0_cmd_instr_i;\n  wire [5:0]                     p0_cmd_bl_i;\n  wire [29:0]                    p0_cmd_byte_addr_i;\n  wire                           p0_cmd_empty_i;\n  wire                           p0_cmd_full_i;\n  wire                           p0_wr_clk_i;\n  wire                           p0_wr_en_i;\n  wire [C_P0_MASK_SIZE-1:0]      p0_wr_mask_i;\n  wire [C_P0_DATA_PORT_SIZE-1:0] p0_wr_data_i;\n  wire                           p0_wr_full_i;\n  wire                           p0_wr_empty_i;\n  wire [6:0]                     p0_wr_count_i;\n  wire                           p0_wr_underrun_i;\n  wire                           p0_wr_error_i;\n  wire                           p0_rd_clk_i;\n  wire                           p0_rd_en_i;\n  wire [C_P0_DATA_PORT_SIZE-1:0] p0_rd_data_i;\n  wire                           p0_rd_full_i;\n  wire                           p0_rd_empty_i;\n  wire [6:0]                     p0_rd_count_i;\n  wire                           p0_rd_overflow_i;\n  wire                           p0_rd_error_i;\n\n  wire [C_S1_AXI_ADDR_WIDTH-1:0] s1_axi_araddr_i;\n  wire [C_S1_AXI_ADDR_WIDTH-1:0] s1_axi_awaddr_i;\n  wire                           p1_arb_en_i;\n  wire                           p1_cmd_clk_i;\n  wire                           p1_cmd_en_i;\n  wire [2:0]                     p1_cmd_instr_i;\n  wire [5:0]                     p1_cmd_bl_i;\n  wire [29:0]                    p1_cmd_byte_addr_i;\n  wire                           p1_cmd_empty_i;\n  wire                           p1_cmd_full_i;\n  wire                           p1_wr_clk_i;\n  wire                           p1_wr_en_i;\n  wire [C_P1_MASK_SIZE-1:0]      p1_wr_mask_i;\n  wire [C_P1_DATA_PORT_SIZE-1:0] p1_wr_data_i;\n  wire                           p1_wr_full_i;\n  wire                           p1_wr_empty_i;\n  wire [6:0]                     p1_wr_count_i;\n  wire                           p1_wr_underrun_i;\n  wire                           p1_wr_error_i;\n  wire                           p1_rd_clk_i;\n  wire                           p1_rd_en_i;\n  wire [C_P1_DATA_PORT_SIZE-1:0] p1_rd_data_i;\n  wire                           p1_rd_full_i;\n  wire                           p1_rd_empty_i;\n  wire [6:0]                     p1_rd_count_i;\n  wire                           p1_rd_overflow_i;\n  wire                           p1_rd_error_i;\n\n  wire [C_S2_AXI_ADDR_WIDTH-1:0] s2_axi_araddr_i;\n  wire [C_S2_AXI_ADDR_WIDTH-1:0] s2_axi_awaddr_i;\n  wire                           p2_arb_en_i;\n  wire                           p2_cmd_clk_i;\n  wire                           p2_cmd_en_i;\n  wire [2:0]                     p2_cmd_instr_i;\n  wire [5:0]                     p2_cmd_bl_i;\n  wire [29:0]                    p2_cmd_byte_addr_i;\n  wire                           p2_cmd_empty_i;\n  wire                           p2_cmd_full_i;\n  wire                           p2_wr_clk_i;\n  wire                           p2_wr_en_i;\n  wire [3:0]                     p2_wr_mask_i;\n  wire [31:0]                    p2_wr_data_i;\n  wire                           p2_wr_full_i;\n  wire                           p2_wr_empty_i;\n  wire [6:0]                     p2_wr_count_i;\n  wire                           p2_wr_underrun_i;\n  wire                           p2_wr_error_i;\n  wire                           p2_rd_clk_i;\n  wire                           p2_rd_en_i;\n  wire [31:0]                    p2_rd_data_i;\n  wire                           p2_rd_full_i;\n  wire                           p2_rd_empty_i;\n  wire [6:0]                     p2_rd_count_i;\n  wire                           p2_rd_overflow_i;\n  wire                           p2_rd_error_i;\n\n  wire [C_S3_AXI_ADDR_WIDTH-1:0] s3_axi_araddr_i;\n  wire [C_S3_AXI_ADDR_WIDTH-1:0] s3_axi_awaddr_i;\n  wire                           p3_arb_en_i;\n  wire                           p3_cmd_clk_i;\n  wire                           p3_cmd_en_i;\n  wire [2:0]                     p3_cmd_instr_i;\n  wire [5:0]                     p3_cmd_bl_i;\n  wire [29:0]                    p3_cmd_byte_addr_i;\n  wire                           p3_cmd_empty_i;\n  wire                           p3_cmd_full_i;\n  wire                           p3_wr_clk_i;\n  wire                           p3_wr_en_i;\n  wire [3:0]                     p3_wr_mask_i;\n  wire [31:0]                    p3_wr_data_i;\n  wire                           p3_wr_full_i;\n  wire                           p3_wr_empty_i;\n  wire [6:0]                     p3_wr_count_i;\n  wire                           p3_wr_underrun_i;\n  wire                           p3_wr_error_i;\n  wire                           p3_rd_clk_i;\n  wire                           p3_rd_en_i;\n  wire [31:0]                    p3_rd_data_i;\n  wire                           p3_rd_full_i;\n  wire                           p3_rd_empty_i;\n  wire [6:0]                     p3_rd_count_i;\n  wire                           p3_rd_overflow_i;\n  wire                           p3_rd_error_i;\n\n  wire [C_S4_AXI_ADDR_WIDTH-1:0] s4_axi_araddr_i;\n  wire [C_S4_AXI_ADDR_WIDTH-1:0] s4_axi_awaddr_i;\n  wire                           p4_arb_en_i;\n  wire                           p4_cmd_clk_i;\n  wire                           p4_cmd_en_i;\n  wire [2:0]                     p4_cmd_instr_i;\n  wire [5:0]                     p4_cmd_bl_i;\n  wire [29:0]                    p4_cmd_byte_addr_i;\n  wire                           p4_cmd_empty_i;\n  wire                           p4_cmd_full_i;\n  wire                           p4_wr_clk_i;\n  wire                           p4_wr_en_i;\n  wire [3:0]                     p4_wr_mask_i;\n  wire [31:0]                    p4_wr_data_i;\n  wire                           p4_wr_full_i;\n  wire                           p4_wr_empty_i;\n  wire [6:0]                     p4_wr_count_i;\n  wire                           p4_wr_underrun_i;\n  wire                           p4_wr_error_i;\n  wire                           p4_rd_clk_i;\n  wire                           p4_rd_en_i;\n  wire [31:0]                    p4_rd_data_i;\n  wire                           p4_rd_full_i;\n  wire                           p4_rd_empty_i;\n  wire [6:0]                     p4_rd_count_i;\n  wire                           p4_rd_overflow_i;\n  wire                           p4_rd_error_i;\n\n  wire [C_S5_AXI_ADDR_WIDTH-1:0] s5_axi_araddr_i;\n  wire [C_S5_AXI_ADDR_WIDTH-1:0] s5_axi_awaddr_i;\n  wire                           p5_arb_en_i;\n  wire                           p5_cmd_clk_i;\n  wire                           p5_cmd_en_i;\n  wire [2:0]                     p5_cmd_instr_i;\n  wire [5:0]                     p5_cmd_bl_i;\n  wire [29:0]                    p5_cmd_byte_addr_i;\n  wire                           p5_cmd_empty_i;\n  wire                           p5_cmd_full_i;\n  wire                           p5_wr_clk_i;\n  wire                           p5_wr_en_i;\n  wire [3:0]                     p5_wr_mask_i;\n  wire [31:0]                    p5_wr_data_i;\n  wire                           p5_wr_full_i;\n  wire                           p5_wr_empty_i;\n  wire [6:0]                     p5_wr_count_i;\n  wire                           p5_wr_underrun_i;\n  wire                           p5_wr_error_i;\n  wire                           p5_rd_clk_i;\n  wire                           p5_rd_en_i;\n  wire [31:0]                    p5_rd_data_i;\n  wire                           p5_rd_full_i;\n  wire                           p5_rd_empty_i;\n  wire [6:0]                     p5_rd_count_i;\n  wire                           p5_rd_overflow_i;\n  wire                           p5_rd_error_i;\n\n  wire                           ioclk0;\n  wire                           ioclk180;\n  wire                           pll_ce_0_i;\n  wire                           pll_ce_90_i;\n\n  generate\n    if (C_MCB_USE_EXTERNAL_BUFPLL == 0) begin : gen_spartan6_bufpll_mcb\n      \n      BUFPLL_MCB #\n      (\n      .DIVIDE   (2),\n      .LOCK_SRC (\"LOCK_TO_0\")\n      )\n      bufpll_0\n        (\n        .IOCLK0       (ioclk0),\n        .IOCLK1       (ioclk180),\n        .GCLK         (ui_clk),\n        .LOCKED       (pll_lock),\n        .LOCK         (pll_lock_bufpll_o),\n        .SERDESSTROBE0(pll_ce_0_i),\n        .SERDESSTROBE1(pll_ce_90_i),\n        .PLLIN0       (sysclk_2x),\n        .PLLIN1       (sysclk_2x_180)\n        );\n      end else begin : gen_spartan6_no_bufpll_mcb\n        \n        assign pll_ce_0_i   = pll_ce_0;\n        assign pll_ce_90_i  = pll_ce_90;\n        assign ioclk0     = sysclk_2x;\n        assign ioclk180   = sysclk_2x_180;\n        assign pll_lock_bufpll_o = pll_lock;\n      end\n  endgenerate\n\n  assign sysclk_2x_bufpll_o     = ioclk0;\n  assign sysclk_2x_180_bufpll_o = ioclk180;\n  assign pll_ce_0_bufpll_o      = pll_ce_0_i;\n  assign pll_ce_90_bufpll_o     = pll_ce_90_i;\n\nmcb_raw_wrapper #\n   (\n   .C_MEMCLK_PERIOD           ( C_MEMCLK_PERIOD           ),\n   .C_PORT_ENABLE             ( C_PORT_ENABLE             ),\n   .C_MEM_ADDR_ORDER          ( C_MEM_ADDR_ORDER          ),\n   .C_USR_INTERFACE_MODE      ( C_USR_INTERFACE_MODE      ),\n   .C_ARB_NUM_TIME_SLOTS      ( P_ARB_NUM_TIME_SLOTS      ),\n   .C_ARB_TIME_SLOT_0         ( P_ARB_TIME_SLOT_0         ),\n   .C_ARB_TIME_SLOT_1         ( P_ARB_TIME_SLOT_1         ),\n   .C_ARB_TIME_SLOT_2         ( P_ARB_TIME_SLOT_2         ),\n   .C_ARB_TIME_SLOT_3         ( P_ARB_TIME_SLOT_3         ),\n   .C_ARB_TIME_SLOT_4         ( P_ARB_TIME_SLOT_4         ),\n   .C_ARB_TIME_SLOT_5         ( P_ARB_TIME_SLOT_5         ),\n   .C_ARB_TIME_SLOT_6         ( P_ARB_TIME_SLOT_6         ),\n   .C_ARB_TIME_SLOT_7         ( P_ARB_TIME_SLOT_7         ),\n   .C_ARB_TIME_SLOT_8         ( P_ARB_TIME_SLOT_8         ),\n   .C_ARB_TIME_SLOT_9         ( P_ARB_TIME_SLOT_9         ),\n   .C_ARB_TIME_SLOT_10        ( P_ARB_TIME_SLOT_10        ),\n   .C_ARB_TIME_SLOT_11        ( P_ARB_TIME_SLOT_11        ),\n   .C_PORT_CONFIG             ( C_PORT_CONFIG             ),\n   .C_MEM_TRAS                ( C_MEM_TRAS                ),\n   .C_MEM_TRCD                ( C_MEM_TRCD                ),\n   .C_MEM_TREFI               ( C_MEM_TREFI               ),\n   .C_MEM_TRFC                ( C_MEM_TRFC                ),\n   .C_MEM_TRP                 ( C_MEM_TRP                 ),\n   .C_MEM_TWR                 ( C_MEM_TWR                 ),\n   .C_MEM_TRTP                ( C_MEM_TRTP                ),\n   .C_MEM_TWTR                ( C_MEM_TWTR                ),\n   .C_NUM_DQ_PINS             ( C_NUM_DQ_PINS             ),\n   .C_MEM_TYPE                ( C_MEM_TYPE                ),\n   .C_MEM_DENSITY             ( C_MEM_DENSITY             ),\n   .C_MEM_BURST_LEN           ( C_MEM_BURST_LEN           ),\n   .C_MEM_CAS_LATENCY         ( C_MEM_CAS_LATENCY         ),\n   .C_MEM_ADDR_WIDTH          ( C_MEM_ADDR_WIDTH          ),\n   .C_MEM_BANKADDR_WIDTH      ( C_MEM_BANKADDR_WIDTH      ),\n   .C_MEM_NUM_COL_BITS        ( C_MEM_NUM_COL_BITS        ),\n   .C_MEM_DDR3_CAS_LATENCY    ( C_MEM_DDR3_CAS_LATENCY    ),\n   .C_MEM_MOBILE_PA_SR        ( C_MEM_MOBILE_PA_SR        ),\n   .C_MEM_DDR1_2_ODS          ( C_MEM_DDR1_2_ODS          ),\n   .C_MEM_DDR3_ODS            ( C_MEM_DDR3_ODS            ),\n   .C_MEM_DDR2_RTT            ( C_MEM_DDR2_RTT            ),\n   .C_MEM_DDR3_RTT            ( C_MEM_DDR3_RTT            ),\n   .C_MEM_MDDR_ODS            ( C_MEM_MDDR_ODS            ),\n   .C_MEM_DDR2_DIFF_DQS_EN    ( C_MEM_DDR2_DIFF_DQS_EN    ),\n   .C_MEM_DDR2_3_PA_SR        ( C_MEM_DDR2_3_PA_SR        ),\n   .C_MEM_DDR3_CAS_WR_LATENCY ( C_MEM_DDR3_CAS_WR_LATENCY ),\n   .C_MEM_DDR3_AUTO_SR        ( C_MEM_DDR3_AUTO_SR        ),\n   .C_MEM_DDR2_3_HIGH_TEMP_SR ( C_MEM_DDR2_3_HIGH_TEMP_SR ),\n   .C_MEM_DDR3_DYN_WRT_ODT    ( C_MEM_DDR3_DYN_WRT_ODT    ),\n   \n   .C_MEM_TZQINIT_MAXCNT      ( C_MEM_TZQINIT_MAXCNT - 16 ),\n   .C_MC_CALIB_BYPASS         ( C_MC_CALIB_BYPASS         ),\n   .C_MC_CALIBRATION_RA       ( C_MC_CALIBRATION_RA       ),\n   .C_MC_CALIBRATION_BA       ( C_MC_CALIBRATION_BA       ),\n   .C_CALIB_SOFT_IP           ( C_CALIB_SOFT_IP           ),\n   .C_SKIP_IN_TERM_CAL        ( C_SKIP_IN_TERM_CAL        ),\n   .C_SKIP_DYNAMIC_CAL        ( C_SKIP_DYNAMIC_CAL        ),\n   .C_SKIP_DYN_IN_TERM        ( C_SKIP_DYN_IN_TERM        ),\n   .LDQSP_TAP_DELAY_VAL       ( LDQSP_TAP_DELAY_VAL       ),\n   .UDQSP_TAP_DELAY_VAL       ( UDQSP_TAP_DELAY_VAL       ),\n   .LDQSN_TAP_DELAY_VAL       ( LDQSN_TAP_DELAY_VAL       ),\n   .UDQSN_TAP_DELAY_VAL       ( UDQSN_TAP_DELAY_VAL       ),\n   .DQ0_TAP_DELAY_VAL         ( DQ0_TAP_DELAY_VAL         ),\n   .DQ1_TAP_DELAY_VAL         ( DQ1_TAP_DELAY_VAL         ),\n   .DQ2_TAP_DELAY_VAL         ( DQ2_TAP_DELAY_VAL         ),\n   .DQ3_TAP_DELAY_VAL         ( DQ3_TAP_DELAY_VAL         ),\n   .DQ4_TAP_DELAY_VAL         ( DQ4_TAP_DELAY_VAL         ),\n   .DQ5_TAP_DELAY_VAL         ( DQ5_TAP_DELAY_VAL         ),\n   .DQ6_TAP_DELAY_VAL         ( DQ6_TAP_DELAY_VAL         ),\n   .DQ7_TAP_DELAY_VAL         ( DQ7_TAP_DELAY_VAL         ),\n   .DQ8_TAP_DELAY_VAL         ( DQ8_TAP_DELAY_VAL         ),\n   .DQ9_TAP_DELAY_VAL         ( DQ9_TAP_DELAY_VAL         ),\n   .DQ10_TAP_DELAY_VAL        ( DQ10_TAP_DELAY_VAL        ),\n   .DQ11_TAP_DELAY_VAL        ( DQ11_TAP_DELAY_VAL        ),\n   .DQ12_TAP_DELAY_VAL        ( DQ12_TAP_DELAY_VAL        ),\n   .DQ13_TAP_DELAY_VAL        ( DQ13_TAP_DELAY_VAL        ),\n   .DQ14_TAP_DELAY_VAL        ( DQ14_TAP_DELAY_VAL        ),\n   .DQ15_TAP_DELAY_VAL        ( DQ15_TAP_DELAY_VAL        ),\n   .C_MC_CALIBRATION_CA       ( C_MC_CALIBRATION_CA       ),\n   .C_MC_CALIBRATION_CLK_DIV  ( C_MC_CALIBRATION_CLK_DIV  ),\n   .C_MC_CALIBRATION_MODE     ( C_MC_CALIBRATION_MODE     ),\n   .C_MC_CALIBRATION_DELAY    ( C_MC_CALIBRATION_DELAY    ),\n   \n   .C_SIMULATION              ( C_SIMULATION              ),\n   \n   .C_P0_MASK_SIZE            ( C_P0_MASK_SIZE            ),\n   .C_P0_DATA_PORT_SIZE       ( C_P0_DATA_PORT_SIZE       ),\n   .C_P1_MASK_SIZE            ( C_P1_MASK_SIZE            ),\n   .C_P1_DATA_PORT_SIZE       ( C_P1_DATA_PORT_SIZE       )\n   )\n   mcb_raw_wrapper_inst\n   (\n   .sysclk_2x                 ( ioclk0                    ),\n   .sysclk_2x_180             ( ioclk180                  ),\n   .pll_ce_0                  ( pll_ce_0_i                ),\n   .pll_ce_90                 ( pll_ce_90_i               ),\n   .pll_lock                  ( pll_lock_bufpll_o         ),\n   .sys_rst                   ( sys_rst                   ),\n   .p0_arb_en                 ( p0_arb_en_i               ),\n   .p0_cmd_clk                ( p0_cmd_clk_i              ),\n   .p0_cmd_en                 ( p0_cmd_en_i               ),\n   .p0_cmd_instr              ( p0_cmd_instr_i            ),\n   .p0_cmd_bl                 ( p0_cmd_bl_i               ),\n   .p0_cmd_byte_addr          ( p0_cmd_byte_addr_i        ),\n   .p0_cmd_empty              ( p0_cmd_empty_i            ),\n   .p0_cmd_full               ( p0_cmd_full_i             ),\n   .p0_wr_clk                 ( p0_wr_clk_i               ),\n   .p0_wr_en                  ( p0_wr_en_i                ),\n   .p0_wr_mask                ( p0_wr_mask_i              ),\n   .p0_wr_data                ( p0_wr_data_i              ),\n   .p0_wr_full                ( p0_wr_full_i              ),\n   .p0_wr_empty               ( p0_wr_empty_i             ),\n   .p0_wr_count               ( p0_wr_count_i             ),\n   .p0_wr_underrun            ( p0_wr_underrun_i          ),\n   .p0_wr_error               ( p0_wr_error_i             ),\n   .p0_rd_clk                 ( p0_rd_clk_i               ),\n   .p0_rd_en                  ( p0_rd_en_i                ),\n   .p0_rd_data                ( p0_rd_data_i              ),\n   .p0_rd_full                ( p0_rd_full_i              ),\n   .p0_rd_empty               ( p0_rd_empty_i             ),\n   .p0_rd_count               ( p0_rd_count_i             ),\n   .p0_rd_overflow            ( p0_rd_overflow_i          ),\n   .p0_rd_error               ( p0_rd_error_i             ),\n   .p1_arb_en                 ( p1_arb_en_i               ),\n   .p1_cmd_clk                ( p1_cmd_clk_i              ),\n   .p1_cmd_en                 ( p1_cmd_en_i               ),\n   .p1_cmd_instr              ( p1_cmd_instr_i            ),\n   .p1_cmd_bl                 ( p1_cmd_bl_i               ),\n   .p1_cmd_byte_addr          ( p1_cmd_byte_addr_i        ),\n   .p1_cmd_empty              ( p1_cmd_empty_i            ),\n   .p1_cmd_full               ( p1_cmd_full_i             ),\n   .p1_wr_clk                 ( p1_wr_clk_i               ),\n   .p1_wr_en                  ( p1_wr_en_i                ),\n   .p1_wr_mask                ( p1_wr_mask_i              ),\n   .p1_wr_data                ( p1_wr_data_i              ),\n   .p1_wr_full                ( p1_wr_full_i              ),\n   .p1_wr_empty               ( p1_wr_empty_i             ),\n   .p1_wr_count               ( p1_wr_count_i             ),\n   .p1_wr_underrun            ( p1_wr_underrun_i          ),\n   .p1_wr_error               ( p1_wr_error_i             ),\n   .p1_rd_clk                 ( p1_rd_clk_i               ),\n   .p1_rd_en                  ( p1_rd_en_i                ),\n   .p1_rd_data                ( p1_rd_data_i              ),\n   .p1_rd_full                ( p1_rd_full_i              ),\n   .p1_rd_empty               ( p1_rd_empty_i             ),\n   .p1_rd_count               ( p1_rd_count_i             ),\n   .p1_rd_overflow            ( p1_rd_overflow_i          ),\n   .p1_rd_error               ( p1_rd_error_i             ),\n   .p2_arb_en                 ( p2_arb_en_i               ),\n   .p2_cmd_clk                ( p2_cmd_clk_i              ),\n   .p2_cmd_en                 ( p2_cmd_en_i               ),\n   .p2_cmd_instr              ( p2_cmd_instr_i            ),\n   .p2_cmd_bl                 ( p2_cmd_bl_i               ),\n   .p2_cmd_byte_addr          ( p2_cmd_byte_addr_i        ),\n   .p2_cmd_empty              ( p2_cmd_empty_i            ),\n   .p2_cmd_full               ( p2_cmd_full_i             ),\n   .p2_wr_clk                 ( p2_wr_clk_i               ),\n   .p2_wr_en                  ( p2_wr_en_i                ),\n   .p2_wr_mask                ( p2_wr_mask_i              ),\n   .p2_wr_data                ( p2_wr_data_i              ),\n   .p2_wr_full                ( p2_wr_full_i              ),\n   .p2_wr_empty               ( p2_wr_empty_i             ),\n   .p2_wr_count               ( p2_wr_count_i             ),\n   .p2_wr_underrun            ( p2_wr_underrun_i          ),\n   .p2_wr_error               ( p2_wr_error_i             ),\n   .p2_rd_clk                 ( p2_rd_clk_i               ),\n   .p2_rd_en                  ( p2_rd_en_i                ),\n   .p2_rd_data                ( p2_rd_data_i              ),\n   .p2_rd_full                ( p2_rd_full_i              ),\n   .p2_rd_empty               ( p2_rd_empty_i             ),\n   .p2_rd_count               ( p2_rd_count_i             ),\n   .p2_rd_overflow            ( p2_rd_overflow_i          ),\n   .p2_rd_error               ( p2_rd_error_i             ),\n   .p3_arb_en                 ( p3_arb_en_i               ),\n   .p3_cmd_clk                ( p3_cmd_clk_i              ),\n   .p3_cmd_en                 ( p3_cmd_en_i               ),\n   .p3_cmd_instr              ( p3_cmd_instr_i            ),\n   .p3_cmd_bl                 ( p3_cmd_bl_i               ),\n   .p3_cmd_byte_addr          ( p3_cmd_byte_addr_i        ),\n   .p3_cmd_empty              ( p3_cmd_empty_i            ),\n   .p3_cmd_full               ( p3_cmd_full_i             ),\n   .p3_wr_clk                 ( p3_wr_clk_i               ),\n   .p3_wr_en                  ( p3_wr_en_i                ),\n   .p3_wr_mask                ( p3_wr_mask_i              ),\n   .p3_wr_data                ( p3_wr_data_i              ),\n   .p3_wr_full                ( p3_wr_full_i              ),\n   .p3_wr_empty               ( p3_wr_empty_i             ),\n   .p3_wr_count               ( p3_wr_count_i             ),\n   .p3_wr_underrun            ( p3_wr_underrun_i          ),\n   .p3_wr_error               ( p3_wr_error_i             ),\n   .p3_rd_clk                 ( p3_rd_clk_i               ),\n   .p3_rd_en                  ( p3_rd_en_i                ),\n   .p3_rd_data                ( p3_rd_data_i              ),\n   .p3_rd_full                ( p3_rd_full_i              ),\n   .p3_rd_empty               ( p3_rd_empty_i             ),\n   .p3_rd_count               ( p3_rd_count_i             ),\n   .p3_rd_overflow            ( p3_rd_overflow_i          ),\n   .p3_rd_error               ( p3_rd_error_i             ),\n   .p4_arb_en                 ( p4_arb_en_i               ),\n   .p4_cmd_clk                ( p4_cmd_clk_i              ),\n   .p4_cmd_en                 ( p4_cmd_en_i               ),\n   .p4_cmd_instr              ( p4_cmd_instr_i            ),\n   .p4_cmd_bl                 ( p4_cmd_bl_i               ),\n   .p4_cmd_byte_addr          ( p4_cmd_byte_addr_i        ),\n   .p4_cmd_empty              ( p4_cmd_empty_i            ),\n   .p4_cmd_full               ( p4_cmd_full_i             ),\n   .p4_wr_clk                 ( p4_wr_clk_i               ),\n   .p4_wr_en                  ( p4_wr_en_i                ),\n   .p4_wr_mask                ( p4_wr_mask_i              ),\n   .p4_wr_data                ( p4_wr_data_i              ),\n   .p4_wr_full                ( p4_wr_full_i              ),\n   .p4_wr_empty               ( p4_wr_empty_i             ),\n   .p4_wr_count               ( p4_wr_count_i             ),\n   .p4_wr_underrun            ( p4_wr_underrun_i          ),\n   .p4_wr_error               ( p4_wr_error_i             ),\n   .p4_rd_clk                 ( p4_rd_clk_i               ),\n   .p4_rd_en                  ( p4_rd_en_i                ),\n   .p4_rd_data                ( p4_rd_data_i              ),\n   .p4_rd_full                ( p4_rd_full_i              ),\n   .p4_rd_empty               ( p4_rd_empty_i             ),\n   .p4_rd_count               ( p4_rd_count_i             ),\n   .p4_rd_overflow            ( p4_rd_overflow_i          ),\n   .p4_rd_error               ( p4_rd_error_i             ),\n   .p5_arb_en                 ( p5_arb_en_i               ),\n   .p5_cmd_clk                ( p5_cmd_clk_i              ),\n   .p5_cmd_en                 ( p5_cmd_en_i               ),\n   .p5_cmd_instr              ( p5_cmd_instr_i            ),\n   .p5_cmd_bl                 ( p5_cmd_bl_i               ),\n   .p5_cmd_byte_addr          ( p5_cmd_byte_addr_i        ),\n   .p5_cmd_empty              ( p5_cmd_empty_i            ),\n   .p5_cmd_full               ( p5_cmd_full_i             ),\n   .p5_wr_clk                 ( p5_wr_clk_i               ),\n   .p5_wr_en                  ( p5_wr_en_i                ),\n   .p5_wr_mask                ( p5_wr_mask_i              ),\n   .p5_wr_data                ( p5_wr_data_i              ),\n   .p5_wr_full                ( p5_wr_full_i              ),\n   .p5_wr_empty               ( p5_wr_empty_i             ),\n   .p5_wr_count               ( p5_wr_count_i             ),\n   .p5_wr_underrun            ( p5_wr_underrun_i          ),\n   .p5_wr_error               ( p5_wr_error_i             ),\n   .p5_rd_clk                 ( p5_rd_clk_i               ),\n   .p5_rd_en                  ( p5_rd_en_i                ),\n   .p5_rd_data                ( p5_rd_data_i              ),\n   .p5_rd_full                ( p5_rd_full_i              ),\n   .p5_rd_empty               ( p5_rd_empty_i             ),\n   .p5_rd_count               ( p5_rd_count_i             ),\n   .p5_rd_overflow            ( p5_rd_overflow_i          ),\n   .p5_rd_error               ( p5_rd_error_i             ),\n   .mcbx_dram_addr            ( mcbx_dram_addr            ),\n   .mcbx_dram_ba              ( mcbx_dram_ba              ),\n   .mcbx_dram_ras_n           ( mcbx_dram_ras_n           ),\n   .mcbx_dram_cas_n           ( mcbx_dram_cas_n           ),\n   .mcbx_dram_we_n            ( mcbx_dram_we_n            ),\n   .mcbx_dram_cke             ( mcbx_dram_cke             ),\n   .mcbx_dram_clk             ( mcbx_dram_clk             ),\n   .mcbx_dram_clk_n           ( mcbx_dram_clk_n           ),\n   .mcbx_dram_dq              ( mcbx_dram_dq              ),\n   .mcbx_dram_dqs             ( mcbx_dram_dqs             ),\n   .mcbx_dram_dqs_n           ( mcbx_dram_dqs_n           ),\n   .mcbx_dram_udqs            ( mcbx_dram_udqs            ),\n   .mcbx_dram_udqs_n          ( mcbx_dram_udqs_n          ),\n   .mcbx_dram_udm             ( mcbx_dram_udm             ),\n   .mcbx_dram_ldm             ( mcbx_dram_ldm             ),\n   .mcbx_dram_odt             ( mcbx_dram_odt             ),\n   .mcbx_dram_ddr3_rst        ( mcbx_dram_ddr3_rst        ),\n   .calib_recal               ( calib_recal               ),\n   .rzq                       ( rzq                       ),\n   .zio                       ( zio                       ),\n   .ui_read                   ( ui_read                   ),\n   .ui_add                    ( ui_add                    ),\n   .ui_cs                     ( ui_cs                     ),\n   .ui_clk                    ( ui_clk                    ),\n   .ui_sdi                    ( ui_sdi                    ),\n   .ui_addr                   ( ui_addr                   ),\n   .ui_broadcast              ( ui_broadcast              ),\n   .ui_drp_update             ( ui_drp_update             ),\n   .ui_done_cal               ( ui_done_cal               ),\n   .ui_cmd                    ( ui_cmd                    ),\n   .ui_cmd_in                 ( ui_cmd_in                 ),\n   .ui_cmd_en                 ( ui_cmd_en                 ),\n   .ui_dqcount                ( ui_dqcount                ),\n   .ui_dq_lower_dec           ( ui_dq_lower_dec           ),\n   .ui_dq_lower_inc           ( ui_dq_lower_inc           ),\n   .ui_dq_upper_dec           ( ui_dq_upper_dec           ),\n   .ui_dq_upper_inc           ( ui_dq_upper_inc           ),\n   .ui_udqs_inc               ( ui_udqs_inc               ),\n   .ui_udqs_dec               ( ui_udqs_dec               ),\n   .ui_ldqs_inc               ( ui_ldqs_inc               ),\n   .ui_ldqs_dec               ( ui_ldqs_dec               ),\n   .uo_data                   ( uo_data                   ),\n   .uo_data_valid             ( uo_data_valid             ),\n   .uo_done_cal               ( uo_done_cal               ),\n   .uo_cmd_ready_in           ( uo_cmd_ready_in           ),\n   .uo_refrsh_flag            ( uo_refrsh_flag            ),\n   .uo_cal_start              ( uo_cal_start              ),\n   .uo_sdo                    ( uo_sdo                    ),\n   .status                    ( status                    ),\n   .selfrefresh_enter         ( selfrefresh_enter         ),\n   .selfrefresh_mode          ( selfrefresh_mode          )\n   );\n\n\n  generate\n    if (C_S0_AXI_ENABLE == 0) begin : P0_UI_MCB\n      assign  p0_arb_en_i        =  p0_arb_en        ; \n      assign  p0_cmd_clk_i       =  p0_cmd_clk       ; \n      assign  p0_cmd_en_i        =  p0_cmd_en        ; \n      assign  p0_cmd_instr_i     =  p0_cmd_instr     ; \n      assign  p0_cmd_bl_i        =  p0_cmd_bl        ; \n      assign  p0_cmd_byte_addr_i =  p0_cmd_byte_addr ; \n      assign  p0_cmd_empty       =  p0_cmd_empty_i   ; \n      assign  p0_cmd_full        =  p0_cmd_full_i    ; \n      assign  p0_wr_clk_i        =  p0_wr_clk        ; \n      assign  p0_wr_en_i         =  p0_wr_en         ; \n      assign  p0_wr_mask_i       =  p0_wr_mask       ; \n      assign  p0_wr_data_i       =  p0_wr_data       ; \n      assign  p0_wr_full         =  p0_wr_full_i     ; \n      assign  p0_wr_empty        =  p0_wr_empty_i    ; \n      assign  p0_wr_count        =  p0_wr_count_i    ; \n      assign  p0_wr_underrun     =  p0_wr_underrun_i ; \n      assign  p0_wr_error        =  p0_wr_error_i    ; \n      assign  p0_rd_clk_i        =  p0_rd_clk        ; \n      assign  p0_rd_en_i         =  p0_rd_en         ; \n      assign  p0_rd_data         =  p0_rd_data_i     ; \n      assign  p0_rd_full         =  p0_rd_full_i     ; \n      assign  p0_rd_empty        =  p0_rd_empty_i    ; \n      assign  p0_rd_count        =  p0_rd_count_i    ; \n      assign  p0_rd_overflow     =  p0_rd_overflow_i ; \n      assign  p0_rd_error        =  p0_rd_error_i    ; \n    end\n    else begin : P0_UI_AXI\n      assign  p0_arb_en_i        =  p0_arb_en;\n      assign  s0_axi_araddr_i    = s0_axi_araddr & P_S0_AXI_ADDRMASK;\n      assign  s0_axi_awaddr_i    = s0_axi_awaddr & P_S0_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk       ( s0_axi_aclk      ) ,\n        .synch_in  ( uo_done_cal      ) ,\n        .synch_out ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S0_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S0_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( C_S0_AXI_DATA_WIDTH      ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S0_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S0_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S0_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S0_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S0_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( C_P0_DATA_PORT_SIZE      ) ,\n        .C_STRICT_COHERENCY      ( C_S0_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S0_AXI_ENABLE_AP           )\n        )\n        p0_axi_mcb\n        (\n        .aclk              ( s0_axi_aclk        ),\n        .aresetn           ( s0_axi_aresetn     ),\n        .s_axi_awid        ( s0_axi_awid        ),\n        .s_axi_awaddr      ( s0_axi_awaddr_i    ),\n        .s_axi_awlen       ( s0_axi_awlen       ),\n        .s_axi_awsize      ( s0_axi_awsize      ),\n        .s_axi_awburst     ( s0_axi_awburst     ),\n        .s_axi_awlock      ( s0_axi_awlock      ),\n        .s_axi_awcache     ( s0_axi_awcache     ),\n        .s_axi_awprot      ( s0_axi_awprot      ),\n        .s_axi_awqos       ( s0_axi_awqos       ),\n        .s_axi_awvalid     ( s0_axi_awvalid     ),\n        .s_axi_awready     ( s0_axi_awready     ),\n        .s_axi_wdata       ( s0_axi_wdata       ),\n        .s_axi_wstrb       ( s0_axi_wstrb       ),\n        .s_axi_wlast       ( s0_axi_wlast       ),\n        .s_axi_wvalid      ( s0_axi_wvalid      ),\n        .s_axi_wready      ( s0_axi_wready      ),\n        .s_axi_bid         ( s0_axi_bid         ),\n        .s_axi_bresp       ( s0_axi_bresp       ),\n        .s_axi_bvalid      ( s0_axi_bvalid      ),\n        .s_axi_bready      ( s0_axi_bready      ),\n        .s_axi_arid        ( s0_axi_arid        ),\n        .s_axi_araddr      ( s0_axi_araddr_i    ),\n        .s_axi_arlen       ( s0_axi_arlen       ),\n        .s_axi_arsize      ( s0_axi_arsize      ),\n        .s_axi_arburst     ( s0_axi_arburst     ),\n        .s_axi_arlock      ( s0_axi_arlock      ),\n        .s_axi_arcache     ( s0_axi_arcache     ),\n        .s_axi_arprot      ( s0_axi_arprot      ),\n        .s_axi_arqos       ( s0_axi_arqos       ),\n        .s_axi_arvalid     ( s0_axi_arvalid     ),\n        .s_axi_arready     ( s0_axi_arready     ),\n        .s_axi_rid         ( s0_axi_rid         ),\n        .s_axi_rdata       ( s0_axi_rdata       ),\n        .s_axi_rresp       ( s0_axi_rresp       ),\n        .s_axi_rlast       ( s0_axi_rlast       ),\n        .s_axi_rvalid      ( s0_axi_rvalid      ),\n        .s_axi_rready      ( s0_axi_rready      ),\n        .mcb_cmd_clk       ( p0_cmd_clk_i       ),\n        .mcb_cmd_en        ( p0_cmd_en_i        ),\n        .mcb_cmd_instr     ( p0_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p0_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p0_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p0_cmd_empty_i     ),\n        .mcb_cmd_full      ( p0_cmd_full_i      ),\n        .mcb_wr_clk        ( p0_wr_clk_i        ),\n        .mcb_wr_en         ( p0_wr_en_i         ),\n        .mcb_wr_mask       ( p0_wr_mask_i       ),\n        .mcb_wr_data       ( p0_wr_data_i       ),\n        .mcb_wr_full       ( p0_wr_full_i       ),\n        .mcb_wr_empty      ( p0_wr_empty_i      ),\n        .mcb_wr_count      ( p0_wr_count_i      ),\n        .mcb_wr_underrun   ( p0_wr_underrun_i   ),\n        .mcb_wr_error      ( p0_wr_error_i      ),\n        .mcb_rd_clk        ( p0_rd_clk_i        ),\n        .mcb_rd_en         ( p0_rd_en_i         ),\n        .mcb_rd_data       ( p0_rd_data_i       ),\n        .mcb_rd_full       ( p0_rd_full_i       ),\n        .mcb_rd_empty      ( p0_rd_empty_i      ),\n        .mcb_rd_count      ( p0_rd_count_i      ),\n        .mcb_rd_overflow   ( p0_rd_overflow_i   ),\n        .mcb_rd_error      ( p0_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S1_AXI_ENABLE == 0) begin : P1_UI_MCB\n      assign  p1_arb_en_i        =  p1_arb_en        ; \n      assign  p1_cmd_clk_i       =  p1_cmd_clk       ; \n      assign  p1_cmd_en_i        =  p1_cmd_en        ; \n      assign  p1_cmd_instr_i     =  p1_cmd_instr     ; \n      assign  p1_cmd_bl_i        =  p1_cmd_bl        ; \n      assign  p1_cmd_byte_addr_i =  p1_cmd_byte_addr ; \n      assign  p1_cmd_empty       =  p1_cmd_empty_i   ; \n      assign  p1_cmd_full        =  p1_cmd_full_i    ; \n      assign  p1_wr_clk_i        =  p1_wr_clk        ; \n      assign  p1_wr_en_i         =  p1_wr_en         ; \n      assign  p1_wr_mask_i       =  p1_wr_mask       ; \n      assign  p1_wr_data_i       =  p1_wr_data       ; \n      assign  p1_wr_full         =  p1_wr_full_i     ; \n      assign  p1_wr_empty        =  p1_wr_empty_i    ; \n      assign  p1_wr_count        =  p1_wr_count_i    ; \n      assign  p1_wr_underrun     =  p1_wr_underrun_i ; \n      assign  p1_wr_error        =  p1_wr_error_i    ; \n      assign  p1_rd_clk_i        =  p1_rd_clk        ; \n      assign  p1_rd_en_i         =  p1_rd_en         ; \n      assign  p1_rd_data         =  p1_rd_data_i     ; \n      assign  p1_rd_full         =  p1_rd_full_i     ; \n      assign  p1_rd_empty        =  p1_rd_empty_i    ; \n      assign  p1_rd_count        =  p1_rd_count_i    ; \n      assign  p1_rd_overflow     =  p1_rd_overflow_i ; \n      assign  p1_rd_error        =  p1_rd_error_i    ; \n    end\n    else begin : P1_UI_AXI\n      assign  p1_arb_en_i        =  p1_arb_en;\n      assign  s1_axi_araddr_i    = s1_axi_araddr & P_S1_AXI_ADDRMASK;\n      assign  s1_axi_awaddr_i    = s1_axi_awaddr & P_S1_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s1_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S1_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S1_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( C_S1_AXI_DATA_WIDTH      ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S1_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S1_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S1_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S1_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S1_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( C_P1_DATA_PORT_SIZE      ) ,\n        .C_STRICT_COHERENCY      ( C_S1_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S1_AXI_ENABLE_AP           )\n        )\n        p1_axi_mcb\n        (\n        .aclk              ( s1_axi_aclk        ),\n        .aresetn           ( s1_axi_aresetn     ),\n        .s_axi_awid        ( s1_axi_awid        ),\n        .s_axi_awaddr      ( s1_axi_awaddr_i    ),\n        .s_axi_awlen       ( s1_axi_awlen       ),\n        .s_axi_awsize      ( s1_axi_awsize      ),\n        .s_axi_awburst     ( s1_axi_awburst     ),\n        .s_axi_awlock      ( s1_axi_awlock      ),\n        .s_axi_awcache     ( s1_axi_awcache     ),\n        .s_axi_awprot      ( s1_axi_awprot      ),\n        .s_axi_awqos       ( s1_axi_awqos       ),\n        .s_axi_awvalid     ( s1_axi_awvalid     ),\n        .s_axi_awready     ( s1_axi_awready     ),\n        .s_axi_wdata       ( s1_axi_wdata       ),\n        .s_axi_wstrb       ( s1_axi_wstrb       ),\n        .s_axi_wlast       ( s1_axi_wlast       ),\n        .s_axi_wvalid      ( s1_axi_wvalid      ),\n        .s_axi_wready      ( s1_axi_wready      ),\n        .s_axi_bid         ( s1_axi_bid         ),\n        .s_axi_bresp       ( s1_axi_bresp       ),\n        .s_axi_bvalid      ( s1_axi_bvalid      ),\n        .s_axi_bready      ( s1_axi_bready      ),\n        .s_axi_arid        ( s1_axi_arid        ),\n        .s_axi_araddr      ( s1_axi_araddr_i    ),\n        .s_axi_arlen       ( s1_axi_arlen       ),\n        .s_axi_arsize      ( s1_axi_arsize      ),\n        .s_axi_arburst     ( s1_axi_arburst     ),\n        .s_axi_arlock      ( s1_axi_arlock      ),\n        .s_axi_arcache     ( s1_axi_arcache     ),\n        .s_axi_arprot      ( s1_axi_arprot      ),\n        .s_axi_arqos       ( s1_axi_arqos       ),\n        .s_axi_arvalid     ( s1_axi_arvalid     ),\n        .s_axi_arready     ( s1_axi_arready     ),\n        .s_axi_rid         ( s1_axi_rid         ),\n        .s_axi_rdata       ( s1_axi_rdata       ),\n        .s_axi_rresp       ( s1_axi_rresp       ),\n        .s_axi_rlast       ( s1_axi_rlast       ),\n        .s_axi_rvalid      ( s1_axi_rvalid      ),\n        .s_axi_rready      ( s1_axi_rready      ),\n        .mcb_cmd_clk       ( p1_cmd_clk_i       ),\n        .mcb_cmd_en        ( p1_cmd_en_i        ),\n        .mcb_cmd_instr     ( p1_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p1_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p1_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p1_cmd_empty_i     ),\n        .mcb_cmd_full      ( p1_cmd_full_i      ),\n        .mcb_wr_clk        ( p1_wr_clk_i        ),\n        .mcb_wr_en         ( p1_wr_en_i         ),\n        .mcb_wr_mask       ( p1_wr_mask_i       ),\n        .mcb_wr_data       ( p1_wr_data_i       ),\n        .mcb_wr_full       ( p1_wr_full_i       ),\n        .mcb_wr_empty      ( p1_wr_empty_i      ),\n        .mcb_wr_count      ( p1_wr_count_i      ),\n        .mcb_wr_underrun   ( p1_wr_underrun_i   ),\n        .mcb_wr_error      ( p1_wr_error_i      ),\n        .mcb_rd_clk        ( p1_rd_clk_i        ),\n        .mcb_rd_en         ( p1_rd_en_i         ),\n        .mcb_rd_data       ( p1_rd_data_i       ),\n        .mcb_rd_full       ( p1_rd_full_i       ),\n        .mcb_rd_empty      ( p1_rd_empty_i      ),\n        .mcb_rd_count      ( p1_rd_count_i      ),\n        .mcb_rd_overflow   ( p1_rd_overflow_i   ),\n        .mcb_rd_error      ( p1_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S2_AXI_ENABLE == 0) begin : P2_UI_MCB\n      assign  p2_arb_en_i        =  p2_arb_en        ; \n      assign  p2_cmd_clk_i       =  p2_cmd_clk       ; \n      assign  p2_cmd_en_i        =  p2_cmd_en        ; \n      assign  p2_cmd_instr_i     =  p2_cmd_instr     ; \n      assign  p2_cmd_bl_i        =  p2_cmd_bl        ; \n      assign  p2_cmd_byte_addr_i =  p2_cmd_byte_addr ; \n      assign  p2_cmd_empty       =  p2_cmd_empty_i   ; \n      assign  p2_cmd_full        =  p2_cmd_full_i    ; \n      assign  p2_wr_clk_i        =  p2_wr_clk        ; \n      assign  p2_wr_en_i         =  p2_wr_en         ; \n      assign  p2_wr_mask_i       =  p2_wr_mask       ; \n      assign  p2_wr_data_i       =  p2_wr_data       ; \n      assign  p2_wr_full         =  p2_wr_full_i     ; \n      assign  p2_wr_empty        =  p2_wr_empty_i    ; \n      assign  p2_wr_count        =  p2_wr_count_i    ; \n      assign  p2_wr_underrun     =  p2_wr_underrun_i ; \n      assign  p2_wr_error        =  p2_wr_error_i    ; \n      assign  p2_rd_clk_i        =  p2_rd_clk        ; \n      assign  p2_rd_en_i         =  p2_rd_en         ; \n      assign  p2_rd_data         =  p2_rd_data_i     ; \n      assign  p2_rd_full         =  p2_rd_full_i     ; \n      assign  p2_rd_empty        =  p2_rd_empty_i    ; \n      assign  p2_rd_count        =  p2_rd_count_i    ; \n      assign  p2_rd_overflow     =  p2_rd_overflow_i ; \n      assign  p2_rd_error        =  p2_rd_error_i    ; \n    end\n    else begin : P2_UI_AXI\n      assign  p2_arb_en_i        =  p2_arb_en;\n      assign  s2_axi_araddr_i    = s2_axi_araddr & P_S2_AXI_ADDRMASK;\n      assign  s2_axi_awaddr_i    = s2_axi_awaddr & P_S2_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s2_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S2_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S2_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S2_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S2_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S2_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S2_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S2_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S2_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S2_AXI_ENABLE_AP           )\n        )\n        p2_axi_mcb\n        (\n        .aclk              ( s2_axi_aclk        ),\n        .aresetn           ( s2_axi_aresetn     ),\n        .s_axi_awid        ( s2_axi_awid        ),\n        .s_axi_awaddr      ( s2_axi_awaddr_i    ),\n        .s_axi_awlen       ( s2_axi_awlen       ),\n        .s_axi_awsize      ( s2_axi_awsize      ),\n        .s_axi_awburst     ( s2_axi_awburst     ),\n        .s_axi_awlock      ( s2_axi_awlock      ),\n        .s_axi_awcache     ( s2_axi_awcache     ),\n        .s_axi_awprot      ( s2_axi_awprot      ),\n        .s_axi_awqos       ( s2_axi_awqos       ),\n        .s_axi_awvalid     ( s2_axi_awvalid     ),\n        .s_axi_awready     ( s2_axi_awready     ),\n        .s_axi_wdata       ( s2_axi_wdata       ),\n        .s_axi_wstrb       ( s2_axi_wstrb       ),\n        .s_axi_wlast       ( s2_axi_wlast       ),\n        .s_axi_wvalid      ( s2_axi_wvalid      ),\n        .s_axi_wready      ( s2_axi_wready      ),\n        .s_axi_bid         ( s2_axi_bid         ),\n        .s_axi_bresp       ( s2_axi_bresp       ),\n        .s_axi_bvalid      ( s2_axi_bvalid      ),\n        .s_axi_bready      ( s2_axi_bready      ),\n        .s_axi_arid        ( s2_axi_arid        ),\n        .s_axi_araddr      ( s2_axi_araddr_i    ),\n        .s_axi_arlen       ( s2_axi_arlen       ),\n        .s_axi_arsize      ( s2_axi_arsize      ),\n        .s_axi_arburst     ( s2_axi_arburst     ),\n        .s_axi_arlock      ( s2_axi_arlock      ),\n        .s_axi_arcache     ( s2_axi_arcache     ),\n        .s_axi_arprot      ( s2_axi_arprot      ),\n        .s_axi_arqos       ( s2_axi_arqos       ),\n        .s_axi_arvalid     ( s2_axi_arvalid     ),\n        .s_axi_arready     ( s2_axi_arready     ),\n        .s_axi_rid         ( s2_axi_rid         ),\n        .s_axi_rdata       ( s2_axi_rdata       ),\n        .s_axi_rresp       ( s2_axi_rresp       ),\n        .s_axi_rlast       ( s2_axi_rlast       ),\n        .s_axi_rvalid      ( s2_axi_rvalid      ),\n        .s_axi_rready      ( s2_axi_rready      ),\n        .mcb_cmd_clk       ( p2_cmd_clk_i       ),\n        .mcb_cmd_en        ( p2_cmd_en_i        ),\n        .mcb_cmd_instr     ( p2_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p2_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p2_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p2_cmd_empty_i     ),\n        .mcb_cmd_full      ( p2_cmd_full_i      ),\n        .mcb_wr_clk        ( p2_wr_clk_i        ),\n        .mcb_wr_en         ( p2_wr_en_i         ),\n        .mcb_wr_mask       ( p2_wr_mask_i       ),\n        .mcb_wr_data       ( p2_wr_data_i       ),\n        .mcb_wr_full       ( p2_wr_full_i       ),\n        .mcb_wr_empty      ( p2_wr_empty_i      ),\n        .mcb_wr_count      ( p2_wr_count_i      ),\n        .mcb_wr_underrun   ( p2_wr_underrun_i   ),\n        .mcb_wr_error      ( p2_wr_error_i      ),\n        .mcb_rd_clk        ( p2_rd_clk_i        ),\n        .mcb_rd_en         ( p2_rd_en_i         ),\n        .mcb_rd_data       ( p2_rd_data_i       ),\n        .mcb_rd_full       ( p2_rd_full_i       ),\n        .mcb_rd_empty      ( p2_rd_empty_i      ),\n        .mcb_rd_count      ( p2_rd_count_i      ),\n        .mcb_rd_overflow   ( p2_rd_overflow_i   ),\n        .mcb_rd_error      ( p2_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S3_AXI_ENABLE == 0) begin : P3_UI_MCB\n      assign  p3_arb_en_i        =  p3_arb_en        ; \n      assign  p3_cmd_clk_i       =  p3_cmd_clk       ; \n      assign  p3_cmd_en_i        =  p3_cmd_en        ; \n      assign  p3_cmd_instr_i     =  p3_cmd_instr     ; \n      assign  p3_cmd_bl_i        =  p3_cmd_bl        ; \n      assign  p3_cmd_byte_addr_i =  p3_cmd_byte_addr ; \n      assign  p3_cmd_empty       =  p3_cmd_empty_i   ; \n      assign  p3_cmd_full        =  p3_cmd_full_i    ; \n      assign  p3_wr_clk_i        =  p3_wr_clk        ; \n      assign  p3_wr_en_i         =  p3_wr_en         ; \n      assign  p3_wr_mask_i       =  p3_wr_mask       ; \n      assign  p3_wr_data_i       =  p3_wr_data       ; \n      assign  p3_wr_full         =  p3_wr_full_i     ; \n      assign  p3_wr_empty        =  p3_wr_empty_i    ; \n      assign  p3_wr_count        =  p3_wr_count_i    ; \n      assign  p3_wr_underrun     =  p3_wr_underrun_i ; \n      assign  p3_wr_error        =  p3_wr_error_i    ; \n      assign  p3_rd_clk_i        =  p3_rd_clk        ; \n      assign  p3_rd_en_i         =  p3_rd_en         ; \n      assign  p3_rd_data         =  p3_rd_data_i     ; \n      assign  p3_rd_full         =  p3_rd_full_i     ; \n      assign  p3_rd_empty        =  p3_rd_empty_i    ; \n      assign  p3_rd_count        =  p3_rd_count_i    ; \n      assign  p3_rd_overflow     =  p3_rd_overflow_i ; \n      assign  p3_rd_error        =  p3_rd_error_i    ; \n    end\n    else begin : P3_UI_AXI\n      assign  p3_arb_en_i        =  p3_arb_en;\n      assign  s3_axi_araddr_i    = s3_axi_araddr & P_S3_AXI_ADDRMASK;\n      assign  s3_axi_awaddr_i    = s3_axi_awaddr & P_S3_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s3_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S3_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S3_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S3_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S3_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S3_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S3_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S3_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S3_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S3_AXI_ENABLE_AP           )\n        )\n        p3_axi_mcb\n        (\n        .aclk              ( s3_axi_aclk        ),\n        .aresetn           ( s3_axi_aresetn     ),\n        .s_axi_awid        ( s3_axi_awid        ),\n        .s_axi_awaddr      ( s3_axi_awaddr_i    ),\n        .s_axi_awlen       ( s3_axi_awlen       ),\n        .s_axi_awsize      ( s3_axi_awsize      ),\n        .s_axi_awburst     ( s3_axi_awburst     ),\n        .s_axi_awlock      ( s3_axi_awlock      ),\n        .s_axi_awcache     ( s3_axi_awcache     ),\n        .s_axi_awprot      ( s3_axi_awprot      ),\n        .s_axi_awqos       ( s3_axi_awqos       ),\n        .s_axi_awvalid     ( s3_axi_awvalid     ),\n        .s_axi_awready     ( s3_axi_awready     ),\n        .s_axi_wdata       ( s3_axi_wdata       ),\n        .s_axi_wstrb       ( s3_axi_wstrb       ),\n        .s_axi_wlast       ( s3_axi_wlast       ),\n        .s_axi_wvalid      ( s3_axi_wvalid      ),\n        .s_axi_wready      ( s3_axi_wready      ),\n        .s_axi_bid         ( s3_axi_bid         ),\n        .s_axi_bresp       ( s3_axi_bresp       ),\n        .s_axi_bvalid      ( s3_axi_bvalid      ),\n        .s_axi_bready      ( s3_axi_bready      ),\n        .s_axi_arid        ( s3_axi_arid        ),\n        .s_axi_araddr      ( s3_axi_araddr_i    ),\n        .s_axi_arlen       ( s3_axi_arlen       ),\n        .s_axi_arsize      ( s3_axi_arsize      ),\n        .s_axi_arburst     ( s3_axi_arburst     ),\n        .s_axi_arlock      ( s3_axi_arlock      ),\n        .s_axi_arcache     ( s3_axi_arcache     ),\n        .s_axi_arprot      ( s3_axi_arprot      ),\n        .s_axi_arqos       ( s3_axi_arqos       ),\n        .s_axi_arvalid     ( s3_axi_arvalid     ),\n        .s_axi_arready     ( s3_axi_arready     ),\n        .s_axi_rid         ( s3_axi_rid         ),\n        .s_axi_rdata       ( s3_axi_rdata       ),\n        .s_axi_rresp       ( s3_axi_rresp       ),\n        .s_axi_rlast       ( s3_axi_rlast       ),\n        .s_axi_rvalid      ( s3_axi_rvalid      ),\n        .s_axi_rready      ( s3_axi_rready      ),\n        .mcb_cmd_clk       ( p3_cmd_clk_i       ),\n        .mcb_cmd_en        ( p3_cmd_en_i        ),\n        .mcb_cmd_instr     ( p3_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p3_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p3_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p3_cmd_empty_i     ),\n        .mcb_cmd_full      ( p3_cmd_full_i      ),\n        .mcb_wr_clk        ( p3_wr_clk_i        ),\n        .mcb_wr_en         ( p3_wr_en_i         ),\n        .mcb_wr_mask       ( p3_wr_mask_i       ),\n        .mcb_wr_data       ( p3_wr_data_i       ),\n        .mcb_wr_full       ( p3_wr_full_i       ),\n        .mcb_wr_empty      ( p3_wr_empty_i      ),\n        .mcb_wr_count      ( p3_wr_count_i      ),\n        .mcb_wr_underrun   ( p3_wr_underrun_i   ),\n        .mcb_wr_error      ( p3_wr_error_i      ),\n        .mcb_rd_clk        ( p3_rd_clk_i        ),\n        .mcb_rd_en         ( p3_rd_en_i         ),\n        .mcb_rd_data       ( p3_rd_data_i       ),\n        .mcb_rd_full       ( p3_rd_full_i       ),\n        .mcb_rd_empty      ( p3_rd_empty_i      ),\n        .mcb_rd_count      ( p3_rd_count_i      ),\n        .mcb_rd_overflow   ( p3_rd_overflow_i   ),\n        .mcb_rd_error      ( p3_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S4_AXI_ENABLE == 0) begin : P4_UI_MCB\n      assign  p4_arb_en_i        =  p4_arb_en        ; \n      assign  p4_cmd_clk_i       =  p4_cmd_clk       ; \n      assign  p4_cmd_en_i        =  p4_cmd_en        ; \n      assign  p4_cmd_instr_i     =  p4_cmd_instr     ; \n      assign  p4_cmd_bl_i        =  p4_cmd_bl        ; \n      assign  p4_cmd_byte_addr_i =  p4_cmd_byte_addr ; \n      assign  p4_cmd_empty       =  p4_cmd_empty_i   ; \n      assign  p4_cmd_full        =  p4_cmd_full_i    ; \n      assign  p4_wr_clk_i        =  p4_wr_clk        ; \n      assign  p4_wr_en_i         =  p4_wr_en         ; \n      assign  p4_wr_mask_i       =  p4_wr_mask       ; \n      assign  p4_wr_data_i       =  p4_wr_data       ; \n      assign  p4_wr_full         =  p4_wr_full_i     ; \n      assign  p4_wr_empty        =  p4_wr_empty_i    ; \n      assign  p4_wr_count        =  p4_wr_count_i    ; \n      assign  p4_wr_underrun     =  p4_wr_underrun_i ; \n      assign  p4_wr_error        =  p4_wr_error_i    ; \n      assign  p4_rd_clk_i        =  p4_rd_clk        ; \n      assign  p4_rd_en_i         =  p4_rd_en         ; \n      assign  p4_rd_data         =  p4_rd_data_i     ; \n      assign  p4_rd_full         =  p4_rd_full_i     ; \n      assign  p4_rd_empty        =  p4_rd_empty_i    ; \n      assign  p4_rd_count        =  p4_rd_count_i    ; \n      assign  p4_rd_overflow     =  p4_rd_overflow_i ; \n      assign  p4_rd_error        =  p4_rd_error_i    ; \n    end\n    else begin : P4_UI_AXI\n      assign  p4_arb_en_i        =  p4_arb_en;\n      assign  s4_axi_araddr_i    = s4_axi_araddr & P_S4_AXI_ADDRMASK;\n      assign  s4_axi_awaddr_i    = s4_axi_awaddr & P_S4_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s4_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S4_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S4_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S4_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S4_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S4_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S4_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S4_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S4_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S4_AXI_ENABLE_AP           )\n        )\n        p4_axi_mcb\n        (\n        .aclk              ( s4_axi_aclk        ),\n        .aresetn           ( s4_axi_aresetn     ),\n        .s_axi_awid        ( s4_axi_awid        ),\n        .s_axi_awaddr      ( s4_axi_awaddr_i    ),\n        .s_axi_awlen       ( s4_axi_awlen       ),\n        .s_axi_awsize      ( s4_axi_awsize      ),\n        .s_axi_awburst     ( s4_axi_awburst     ),\n        .s_axi_awlock      ( s4_axi_awlock      ),\n        .s_axi_awcache     ( s4_axi_awcache     ),\n        .s_axi_awprot      ( s4_axi_awprot      ),\n        .s_axi_awqos       ( s4_axi_awqos       ),\n        .s_axi_awvalid     ( s4_axi_awvalid     ),\n        .s_axi_awready     ( s4_axi_awready     ),\n        .s_axi_wdata       ( s4_axi_wdata       ),\n        .s_axi_wstrb       ( s4_axi_wstrb       ),\n        .s_axi_wlast       ( s4_axi_wlast       ),\n        .s_axi_wvalid      ( s4_axi_wvalid      ),\n        .s_axi_wready      ( s4_axi_wready      ),\n        .s_axi_bid         ( s4_axi_bid         ),\n        .s_axi_bresp       ( s4_axi_bresp       ),\n        .s_axi_bvalid      ( s4_axi_bvalid      ),\n        .s_axi_bready      ( s4_axi_bready      ),\n        .s_axi_arid        ( s4_axi_arid        ),\n        .s_axi_araddr      ( s4_axi_araddr_i    ),\n        .s_axi_arlen       ( s4_axi_arlen       ),\n        .s_axi_arsize      ( s4_axi_arsize      ),\n        .s_axi_arburst     ( s4_axi_arburst     ),\n        .s_axi_arlock      ( s4_axi_arlock      ),\n        .s_axi_arcache     ( s4_axi_arcache     ),\n        .s_axi_arprot      ( s4_axi_arprot      ),\n        .s_axi_arqos       ( s4_axi_arqos       ),\n        .s_axi_arvalid     ( s4_axi_arvalid     ),\n        .s_axi_arready     ( s4_axi_arready     ),\n        .s_axi_rid         ( s4_axi_rid         ),\n        .s_axi_rdata       ( s4_axi_rdata       ),\n        .s_axi_rresp       ( s4_axi_rresp       ),\n        .s_axi_rlast       ( s4_axi_rlast       ),\n        .s_axi_rvalid      ( s4_axi_rvalid      ),\n        .s_axi_rready      ( s4_axi_rready      ),\n        .mcb_cmd_clk       ( p4_cmd_clk_i       ),\n        .mcb_cmd_en        ( p4_cmd_en_i        ),\n        .mcb_cmd_instr     ( p4_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p4_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p4_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p4_cmd_empty_i     ),\n        .mcb_cmd_full      ( p4_cmd_full_i      ),\n        .mcb_wr_clk        ( p4_wr_clk_i        ),\n        .mcb_wr_en         ( p4_wr_en_i         ),\n        .mcb_wr_mask       ( p4_wr_mask_i       ),\n        .mcb_wr_data       ( p4_wr_data_i       ),\n        .mcb_wr_full       ( p4_wr_full_i       ),\n        .mcb_wr_empty      ( p4_wr_empty_i      ),\n        .mcb_wr_count      ( p4_wr_count_i      ),\n        .mcb_wr_underrun   ( p4_wr_underrun_i   ),\n        .mcb_wr_error      ( p4_wr_error_i      ),\n        .mcb_rd_clk        ( p4_rd_clk_i        ),\n        .mcb_rd_en         ( p4_rd_en_i         ),\n        .mcb_rd_data       ( p4_rd_data_i       ),\n        .mcb_rd_full       ( p4_rd_full_i       ),\n        .mcb_rd_empty      ( p4_rd_empty_i      ),\n        .mcb_rd_count      ( p4_rd_count_i      ),\n        .mcb_rd_overflow   ( p4_rd_overflow_i   ),\n        .mcb_rd_error      ( p4_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\n\n  generate\n    if (C_S5_AXI_ENABLE == 0) begin : P5_UI_MCB\n      assign  p5_arb_en_i        =  p5_arb_en        ; \n      assign  p5_cmd_clk_i       =  p5_cmd_clk       ; \n      assign  p5_cmd_en_i        =  p5_cmd_en        ; \n      assign  p5_cmd_instr_i     =  p5_cmd_instr     ; \n      assign  p5_cmd_bl_i        =  p5_cmd_bl        ; \n      assign  p5_cmd_byte_addr_i =  p5_cmd_byte_addr ; \n      assign  p5_cmd_empty       =  p5_cmd_empty_i   ; \n      assign  p5_cmd_full        =  p5_cmd_full_i    ; \n      assign  p5_wr_clk_i        =  p5_wr_clk        ; \n      assign  p5_wr_en_i         =  p5_wr_en         ; \n      assign  p5_wr_mask_i       =  p5_wr_mask       ; \n      assign  p5_wr_data_i       =  p5_wr_data       ; \n      assign  p5_wr_full         =  p5_wr_full_i     ; \n      assign  p5_wr_empty        =  p5_wr_empty_i    ; \n      assign  p5_wr_count        =  p5_wr_count_i    ; \n      assign  p5_wr_underrun     =  p5_wr_underrun_i ; \n      assign  p5_wr_error        =  p5_wr_error_i    ; \n      assign  p5_rd_clk_i        =  p5_rd_clk        ; \n      assign  p5_rd_en_i         =  p5_rd_en         ; \n      assign  p5_rd_data         =  p5_rd_data_i     ; \n      assign  p5_rd_full         =  p5_rd_full_i     ; \n      assign  p5_rd_empty        =  p5_rd_empty_i    ; \n      assign  p5_rd_count        =  p5_rd_count_i    ; \n      assign  p5_rd_overflow     =  p5_rd_overflow_i ; \n      assign  p5_rd_error        =  p5_rd_error_i    ; \n    end\n    else begin : P5_UI_AXI\n      assign  p5_arb_en_i        =  p5_arb_en;\n      assign  s5_axi_araddr_i    = s5_axi_araddr & P_S5_AXI_ADDRMASK;\n      assign  s5_axi_awaddr_i    = s5_axi_awaddr & P_S5_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s5_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S5_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S5_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S5_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S5_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S5_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S5_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S5_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S5_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S5_AXI_ENABLE_AP           )\n        )\n        p5_axi_mcb\n        (\n        .aclk              ( s5_axi_aclk        ),\n        .aresetn           ( s5_axi_aresetn     ),\n        .s_axi_awid        ( s5_axi_awid        ),\n        .s_axi_awaddr      ( s5_axi_awaddr_i    ),\n        .s_axi_awlen       ( s5_axi_awlen       ),\n        .s_axi_awsize      ( s5_axi_awsize      ),\n        .s_axi_awburst     ( s5_axi_awburst     ),\n        .s_axi_awlock      ( s5_axi_awlock      ),\n        .s_axi_awcache     ( s5_axi_awcache     ),\n        .s_axi_awprot      ( s5_axi_awprot      ),\n        .s_axi_awqos       ( s5_axi_awqos       ),\n        .s_axi_awvalid     ( s5_axi_awvalid     ),\n        .s_axi_awready     ( s5_axi_awready     ),\n        .s_axi_wdata       ( s5_axi_wdata       ),\n        .s_axi_wstrb       ( s5_axi_wstrb       ),\n        .s_axi_wlast       ( s5_axi_wlast       ),\n        .s_axi_wvalid      ( s5_axi_wvalid      ),\n        .s_axi_wready      ( s5_axi_wready      ),\n        .s_axi_bid         ( s5_axi_bid         ),\n        .s_axi_bresp       ( s5_axi_bresp       ),\n        .s_axi_bvalid      ( s5_axi_bvalid      ),\n        .s_axi_bready      ( s5_axi_bready      ),\n        .s_axi_arid        ( s5_axi_arid        ),\n        .s_axi_araddr      ( s5_axi_araddr_i    ),\n        .s_axi_arlen       ( s5_axi_arlen       ),\n        .s_axi_arsize      ( s5_axi_arsize      ),\n        .s_axi_arburst     ( s5_axi_arburst     ),\n        .s_axi_arlock      ( s5_axi_arlock      ),\n        .s_axi_arcache     ( s5_axi_arcache     ),\n        .s_axi_arprot      ( s5_axi_arprot      ),\n        .s_axi_arqos       ( s5_axi_arqos       ),\n        .s_axi_arvalid     ( s5_axi_arvalid     ),\n        .s_axi_arready     ( s5_axi_arready     ),\n        .s_axi_rid         ( s5_axi_rid         ),\n        .s_axi_rdata       ( s5_axi_rdata       ),\n        .s_axi_rresp       ( s5_axi_rresp       ),\n        .s_axi_rlast       ( s5_axi_rlast       ),\n        .s_axi_rvalid      ( s5_axi_rvalid      ),\n        .s_axi_rready      ( s5_axi_rready      ),\n        .mcb_cmd_clk       ( p5_cmd_clk_i       ),\n        .mcb_cmd_en        ( p5_cmd_en_i        ),\n        .mcb_cmd_instr     ( p5_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p5_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p5_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p5_cmd_empty_i     ),\n        .mcb_cmd_full      ( p5_cmd_full_i      ),\n        .mcb_wr_clk        ( p5_wr_clk_i        ),\n        .mcb_wr_en         ( p5_wr_en_i         ),\n        .mcb_wr_mask       ( p5_wr_mask_i       ),\n        .mcb_wr_data       ( p5_wr_data_i       ),\n        .mcb_wr_full       ( p5_wr_full_i       ),\n        .mcb_wr_empty      ( p5_wr_empty_i      ),\n        .mcb_wr_count      ( p5_wr_count_i      ),\n        .mcb_wr_underrun   ( p5_wr_underrun_i   ),\n        .mcb_wr_error      ( p5_wr_error_i      ),\n        .mcb_rd_clk        ( p5_rd_clk_i        ),\n        .mcb_rd_en         ( p5_rd_en_i         ),\n        .mcb_rd_data       ( p5_rd_data_i       ),\n        .mcb_rd_full       ( p5_rd_full_i       ),\n        .mcb_rd_empty      ( p5_rd_empty_i      ),\n        .mcb_rd_count      ( p5_rd_count_i      ),\n        .mcb_rd_overflow   ( p5_rd_overflow_i   ),\n        .mcb_rd_error      ( p5_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate\n\nendmodule\n\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: mcb_ui_top. Module specification: This module serves as a top-level wrapper for a memory controller block (MCB) interface, integrating various components including AXI interfaces, MCB raw wrapper, and BUFPLL_MCB for clock management. It supports up to 6 ports, configurable as either native MCB interfaces or AXI interfaces. The module handles address translation, arbitration, and data transfer between user interfaces and the memory controller. Input ports include clock signals, reset signals, arbitration enables, command signals, write/read signals, AXI interface signals, and various control signals for memory operations and calibration. Output ports include buffered clock signals, status signals for command and data operations, memory interface signals, calibration status signals, and AXI interface response signals. Internal signals serve as intermediaries between the module's inputs/outputs and its submodules, including masked versions of AXI"
                }
            ]
        }
    ]
}