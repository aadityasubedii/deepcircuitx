Module name: interrupt_controller. 

Module specification: The 'interrupt_controller' module is designed for managing both interrupt and fast interrupt signals within a system, interfacing via the Wishbone bus protocol. It specifically handles interrupt requests from UARTs, an Ethernet MAC, timers, and software sources, offering both normal and fast interrupt handling. The primary inputs include the clock signal `i_clk`, Wishbone bus signals such as `i_wb_adr`, `i_wb_sel`, `i_wb_we`, `i_wb_dat`, `i_wb_cyc`, `i_wb_stb`, and interrupt sources like `i_uart0_int`, `i_uart1_int`, `i_ethmac_int`, `i_tm_timer_int`, and software interrupt signals. The outputs are primarily `o_wb_dat`, indicating data read operations, `o_wb_ack`, a transaction completion indicator, `o_wb_err` for error signaling, and `o_irq`, `o_firq` for interrupt requests. Internally, the module uses registers such as `irq0_enable_reg`, `softint_0_reg` to manage and configure interrupts. Control signals like `wb_start_write`, `wb_start_read` drive the read/write logic with respect to the Wishbone operations. The module contains several key blocks: signal assignments for handling Wishbone read/write procedures, interrupt aggregation and masking (`raw_interrupts`, `irq0_interrupts`, etc.), generation of final output interrupts, and registering configurations via address-mapped registers. The module also includes a debug section guarded by `AMBER_IC_DEBUG` that provides detailed console output tracing the access to various registers for debugging and monitoring purposes. This meticulous arrangement helps in flexible and efficient handling of interrupts tailored to specific system requirements.