{
    "spec": "Module name: uart. Module specification: This module implements a UART (Universal Asynchronous Receiver/Transmitter) interface with configurable baud rates, FIFO buffers, and Wishbone interface support. It handles both transmitting and receiving data serially, with features including interrupt generation, flow control (CTS/RTS), and configurable parameters like data bits and stop bits. The module has input ports for clock, Wishbone interface signals, UART CTS, and RXD, and output ports for Wishbone interface responses, UART interrupt, TXD, and RTS. Internal signals manage FIFO operations, transmit and receive state machines, and various control registers. The code is organized into sections for FIFO management, transmit and receive operations, register access, and interrupt handling. It supports both FIFO and non-FIFO modes, implements transmit and receive state machines, and includes",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: uart\n\nExplanation: This module implements a UART (Universal Asynchronous Receiver/Transmitter) interface. It handles both transmitting and receiving data serially, supporting configurable baud rates and FIFO buffers. The module includes features such as interrupt generation, flow control (CTS/RTS), and configurable parameters like data bits and stop bits. It also provides a Wishbone interface for communication with other system components. The UART supports both FIFO and non-FIFO modes, handles transmission and reception states, and includes registers for control and status information."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\ni_clk, i_wb_adr, i_wb_sel, i_wb_we, i_wb_dat, i_wb_cyc, i_wb_stb, i_uart_cts_n, i_uart_rxd\n\nExplanation:\n- i_clk: System clock input\n- i_wb_adr: Wishbone address input\n- i_wb_sel: Wishbone byte select input\n- i_wb_we: Wishbone write enable input\n- i_wb_dat: Wishbone data input\n- i_wb_cyc: Wishbone cycle input\n- i_wb_stb: Wishbone strobe input\n- i_uart_cts_n: UART Clear To Send input (active low)\n- i_uart_rxd: UART receive data input\n\nOutput ports:\no_wb_dat, o_wb_ack, o_wb_err, o_uart_int, o_uart_txd, o_uart_rts_n\n\nExplanation:\n- o_wb_dat: Wishbone data output\n- o_wb_ack: Wishbone acknowledge output\n- o_wb_err: Wishbone error output\n- o_uart_int: UART interrupt output\n- o_uart_txd: UART transmit data output\n- o_uart_rts_n: UART Ready To Send output (active low)"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\ntx_interrupt, rx_interrupt, rx_int_timer, fifo_enable, tx_fifo, tx_fifo_full, tx_fifo_empty, tx_fifo_half_or_less_full, tx_fifo_push, tx_fifo_push_not_full, tx_fifo_pop_not_empty, tx_fifo_wp, tx_fifo_rp, tx_fifo_count, tx_fifo_full_flag, rx_fifo, rx_fifo_empty, rx_fifo_full, rx_fifo_half_or_more, rx_fifo_count, rx_fifo_push, rx_fifo_push_not_full, rx_fifo_pop, rx_fifo_pop_not_empty, rx_fifo_wp, rx_fifo_rp, tx_byte, txd_state, txd, tx_bit_pulse, tx_bit_pulse_count, rx_byte, rxd_state, rx_start, rxen, rx_bit_pulse_count, restart_rx_bit_count, rxd_d, uart0_cts_n_d, uart_rsr_reg, uart_lcrh_reg, uart_lcrm_reg, uart_lcrl_reg, uart_cr_reg, wb_rdata32, wb_start_write, wb_start_read, wb_start_read_d1, wb_wdata32.\n\nExplanation:\n- tx_interrupt, rx_interrupt: Transmit and receive interrupt flags\n- rx_int_timer: Timer for receive interrupt generation\n- fifo_enable: Enable signal for FIFO mode\n- tx_fifo, rx_fifo: Transmit and receive FIFO buffers\n- tx_fifo_full, tx_fifo_empty, rx_fifo_full, rx_fifo_empty: FIFO status flags\n- tx_fifo_half_or_less_full, rx_fifo_half_or_more: FIFO level indicators\n- tx_fifo_push, rx_fifo_push: FIFO push signals\n- tx_fifo_pop_not_empty, rx_fifo_pop_not_empty: FIFO pop signals when not empty\n- tx_fifo_wp, tx_fifo_rp, rx_fifo_wp, rx_fifo_rp: FIFO write and read pointers\n- tx_fifo_count, rx_fifo_count: FIFO fill level counters\n- tx_byte, rx_byte: Transmit and receive data bytes\n- txd_state, rxd_state: State machines for transmit and receive operations\n- txd: Transmit data output\n- tx_bit_pulse, rx_bit_pulse_count: Bit timing signals\n- rxen: Receive enable signal\n- restart_rx_bit_count: Signal to restart receive bit counter\n- rxd_d: Delayed receive data input for edge detection\n- uart0_cts_n_d: Delayed CTS input\n- uart_*_reg: UART control and status registers\n- wb_rdata32: Wishbone read data\n- wb_start_write, wb_start_read: Wishbone transaction control signals\n- wb_wdata32: Wishbone write data"
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`include \"system_config_defines.vh\"\n`include \"global_defines.vh\"\n\n\n`ifndef AMBER_UART_BAUD\n`define AMBER_UART_BAUD 230400\n`endif\n\nmodule uart  #(\nparameter WB_DWIDTH  = 32,\nparameter WB_SWIDTH  = 4\n)(\ninput                       i_clk,\n\ninput       [31:0]          i_wb_adr,\ninput       [WB_SWIDTH-1:0] i_wb_sel,\ninput                       i_wb_we,\noutput      [WB_DWIDTH-1:0] o_wb_dat,\ninput       [WB_DWIDTH-1:0] i_wb_dat,\ninput                       i_wb_cyc,\ninput                       i_wb_stb,\noutput                      o_wb_ack,\noutput                      o_wb_err,\n\noutput                      o_uart_int,\n\ninput                       i_uart_cts_n,   \noutput                      o_uart_txd,     \noutput                      o_uart_rts_n,   \ninput                       i_uart_rxd      \n\n);\n\n\n`include \"register_addresses.vh\"\n\n\nlocalparam [3:0] TXD_IDLE  = 4'd0,\n                 TXD_START = 4'd1,\n                 TXD_DATA0 = 4'd2,\n                 TXD_DATA1 = 4'd3,\n                 TXD_DATA2 = 4'd4,\n                 TXD_DATA3 = 4'd5,\n                 TXD_DATA4 = 4'd6,\n                 TXD_DATA5 = 4'd7,\n                 TXD_DATA6 = 4'd8,\n                 TXD_DATA7 = 4'd9,\n                 TXD_STOP1 = 4'd10,\n                 TXD_STOP2 = 4'd11,\n                 TXD_STOP3 = 4'd12;\n                 \nlocalparam [3:0] RXD_IDLE       = 4'd0,\n                 RXD_START      = 4'd1,\n                 RXD_START_MID  = 4'd2,\n                 RXD_START_MID1 = 4'd3,\n                 RXD_DATA0      = 4'd4,\n                 RXD_DATA1      = 4'd5,\n                 RXD_DATA2      = 4'd6,\n                 RXD_DATA3      = 4'd7,\n                 RXD_DATA4      = 4'd8,\n                 RXD_DATA5      = 4'd9,\n                 RXD_DATA6      = 4'd10,\n                 RXD_DATA7      = 4'd11,\n                 RXD_STOP       = 4'd12;\n\n\nlocalparam RX_INTERRUPT_COUNT = 24'h3fffff; \n\n\n\n\n\n\n`ifndef Veritak\nlocalparam real UART_BAUD         = `AMBER_UART_BAUD;            \n\n`ifdef XILINX_VIRTEX6_FPGA\nlocalparam real CLK_FREQ          = 1200.0 / `AMBER_CLK_DIVIDER ; \n`else\nlocalparam real CLK_FREQ          = 800.0 / `AMBER_CLK_DIVIDER ; \n`endif\n\nlocalparam real UART_BIT_PERIOD   = 1000000000 / UART_BAUD;      \nlocalparam real UART_WORD_PERIOD  = ( UART_BIT_PERIOD * 12 );    \nlocalparam real CLK_PERIOD        = 1000 / CLK_FREQ;             \nlocalparam real CLKS_PER_WORD     = UART_WORD_PERIOD / CLK_PERIOD;\nlocalparam real CLKS_PER_BIT      = CLKS_PER_WORD / 12;\n\n\n\n\nlocalparam [9:0] TX_BITPULSE_COUNT         = CLKS_PER_BIT;\nlocalparam [9:0] TX_CLKS_PER_WORD          = CLKS_PER_WORD;\n`else\nlocalparam [9:0] TX_BITPULSE_COUNT         = 30;\nlocalparam [9:0] TX_CLKS_PER_WORD          = 360;\n`endif\n\nlocalparam [9:0] TX_BITADJUST_COUNT        = TX_CLKS_PER_WORD - 11*TX_BITPULSE_COUNT;\n\nlocalparam [9:0] RX_BITPULSE_COUNT         = TX_BITPULSE_COUNT-2;\nlocalparam [9:0] RX_HALFPULSE_COUNT        = TX_BITPULSE_COUNT/2 - 4;\n\n\n\n\nreg             tx_interrupt = 'd0;\nreg             rx_interrupt = 'd0;\nreg   [23:0]    rx_int_timer = 'd0;\n\nwire            fifo_enable;\n\nreg   [7:0]     tx_fifo    [0:15];\nwire            tx_fifo_full;\nwire            tx_fifo_empty;\nwire            tx_fifo_half_or_less_full;\nwire            tx_fifo_push;\nwire            tx_fifo_push_not_full;\nwire            tx_fifo_pop_not_empty;\nreg   [4:0]     tx_fifo_wp = 'd0;\nreg   [4:0]     tx_fifo_rp = 'd0;\nreg   [4:0]     tx_fifo_count = 'd0;   \nreg             tx_fifo_full_flag = 'd0;\n\nreg   [7:0]     rx_fifo    [0:15];\nreg             rx_fifo_empty = 1'd1;\nreg             rx_fifo_full = 1'd0;\nwire            rx_fifo_half_or_more;     \nreg   [4:0]     rx_fifo_count = 'd0;   \nwire            rx_fifo_push;\nwire            rx_fifo_push_not_full;\nwire            rx_fifo_pop;\nwire            rx_fifo_pop_not_empty;\nreg   [4:0]     rx_fifo_wp = 'd0;\nreg   [4:0]     rx_fifo_rp = 'd0;\n\nwire  [7:0]     tx_byte;\nreg   [3:0]     txd_state = TXD_IDLE;\nreg             txd = 1'd1;\nreg             tx_bit_pulse = 'd0;\nreg   [9:0]     tx_bit_pulse_count = 'd0;\n\nreg   [7:0]     rx_byte = 'd0;\nreg   [3:0]     rxd_state = RXD_IDLE;\nwire            rx_start;\nreg             rxen = 'd0;\nreg   [9:0]     rx_bit_pulse_count = 'd0;\nreg             restart_rx_bit_count = 'd0;\nreg   [4:0]     rxd_d = 5'h1f;\nreg   [3:0]     uart0_cts_n_d = 4'hf;\n\n\nreg  [7:0]      uart_rsr_reg = 'd0;       \nreg  [7:0]      uart_lcrh_reg = 'd0;      \nreg  [7:0]      uart_lcrm_reg = 'd0;      \nreg  [7:0]      uart_lcrl_reg = 'd0;      \nreg  [7:0]      uart_cr_reg = 'd0;        \n\n\nreg  [31:0]     wb_rdata32 = 'd0;\nwire            wb_start_write;\nwire            wb_start_read;\nreg             wb_start_read_d1 = 'd0;\nwire [31:0]     wb_wdata32;\n\ninteger         i;\n\n\n\n\n\n\n\nassign wb_start_write = i_wb_stb &&  i_wb_we && !wb_start_read_d1;\nassign wb_start_read  = i_wb_stb && !i_wb_we && !o_wb_ack;\n\nalways @( posedge i_clk )\n    wb_start_read_d1 <= wb_start_read;\n\nassign o_wb_err = 1'd0;\nassign o_wb_ack = i_wb_stb && ( wb_start_write || wb_start_read_d1 );\n\ngenerate\nif (WB_DWIDTH == 128) \n    begin : wb128\n    assign wb_wdata32   = i_wb_adr[3:2] == 2'd3 ? i_wb_dat[127:96] :\n                          i_wb_adr[3:2] == 2'd2 ? i_wb_dat[ 95:64] :\n                          i_wb_adr[3:2] == 2'd1 ? i_wb_dat[ 63:32] :\n                                                  i_wb_dat[ 31: 0] ;\n                                                                                                                                            \n    assign o_wb_dat    = {4{wb_rdata32}};\n    end\nelse\n    begin : wb32\n    assign wb_wdata32  = i_wb_dat;\n    assign o_wb_dat    = wb_rdata32;\n    end\nendgenerate\n\n        \n\n\n\n                       \nassign rx_fifo_pop           = wb_start_read && i_wb_adr[15:0] == AMBER_UART_DR;\nassign rx_fifo_push_not_full = rx_fifo_push && !rx_fifo_full;\nassign rx_fifo_pop_not_empty = rx_fifo_pop && !rx_fifo_empty;\nassign rx_fifo_half_or_more  = rx_fifo_count >= 5'd8;\n\n\nalways @ ( posedge i_clk ) \n    begin\n    if ( fifo_enable )\n        begin\n        \n        if ( rx_fifo_push_not_full )\n            begin\n            rx_fifo[rx_fifo_wp[3:0]]    <= rx_byte;                \n            rx_fifo_wp                  <= rx_fifo_wp + 1'd1;\n            end\n\n        if ( rx_fifo_pop_not_empty )\n            begin\n            rx_fifo_rp                  <= rx_fifo_rp + 1'd1;\n            end\n            \n        if ( rx_fifo_push_not_full && !rx_fifo_pop_not_empty )\n            rx_fifo_count <= rx_fifo_count + 1'd1;\n        else if ( rx_fifo_pop_not_empty  && !rx_fifo_push_not_full )\n            rx_fifo_count <= rx_fifo_count - 1'd1;\n        \n        rx_fifo_full  <= rx_fifo_wp == {~rx_fifo_rp[4], rx_fifo_rp[3:0]};\n        rx_fifo_empty <= rx_fifo_wp == rx_fifo_rp;\n        \n        if ( rx_fifo_empty || rx_fifo_pop )\n            rx_int_timer     <= 'd0;\n        else if ( rx_int_timer != RX_INTERRUPT_COUNT )\n            rx_int_timer     <= rx_int_timer + 1'd1;\n        \n            \n        end\n    else    \n        begin\n        rx_int_timer     <= 'd0;\n        \n        if ( rx_fifo_push )\n            begin\n            rx_fifo[0]         <= rx_byte;\n            rx_fifo_empty      <= 1'd0;\n            rx_fifo_full       <= 1'd1;\n            end\n        else if ( rx_fifo_pop )\n            begin\n            rx_fifo_empty      <= 1'd1;\n            rx_fifo_full       <= 1'd0;\n            end\n        end\n    end\n\n\n\n\n\n\n\n\nalways @ ( posedge i_clk )\n    begin \n    \n    if ( wb_start_write && i_wb_adr[15:0] == AMBER_UART_ICR )\n        tx_interrupt <= 1'd0;\n\n    \n    else if  ( fifo_enable ) \n        \n        \n        tx_interrupt <= tx_fifo_half_or_less_full && uart_cr_reg[5];\n    else \n        \n        \n        tx_interrupt <= tx_fifo_empty && uart_cr_reg[5];\n    end\n\n\n\n\n\n\nalways @ ( posedge i_clk )\n    if (fifo_enable)\n        rx_interrupt <=  rx_fifo_half_or_more || rx_int_timer == RX_INTERRUPT_COUNT;\n    else    \n        rx_interrupt <=  rx_fifo_full;\n\n\nassign o_uart_int   = ( tx_interrupt & uart_cr_reg[5] )  |  \n                      ( rx_interrupt & uart_cr_reg[4] )  ;  \n\nassign fifo_enable = uart_lcrh_reg[4];\n\n\n       \n\n\n\n\nassign   o_uart_txd                 = txd;\n\nassign   tx_fifo_full               = fifo_enable ? tx_fifo_count >= 5'd16 :  tx_fifo_full_flag;\nassign   tx_fifo_empty              = fifo_enable ? tx_fifo_count == 5'd00 : !tx_fifo_full_flag;\nassign   tx_fifo_half_or_less_full  =               tx_fifo_count <= 5'd8;\nassign   tx_byte                    = fifo_enable ? tx_fifo[tx_fifo_rp[3:0]] : tx_fifo[0] ;\n\nassign   tx_fifo_push               = wb_start_write && i_wb_adr[15:0] == AMBER_UART_DR;\nassign   tx_fifo_push_not_full      = tx_fifo_push && !tx_fifo_full;\nassign   tx_fifo_pop_not_empty      = txd_state == TXD_STOP3 && tx_bit_pulse == 1'd1 && !tx_fifo_empty;\n\n        \n\nalways @( posedge i_clk )\n    begin      \n    \n    if ( fifo_enable )\n        begin\n        \n        if ( tx_fifo_push_not_full )\n            begin\n            tx_fifo[tx_fifo_wp[3:0]] <= wb_wdata32[7:0];\n            tx_fifo_wp <= tx_fifo_wp + 1'd1;\n            end\n        \n            \n        \n        if ( tx_fifo_pop_not_empty )\n            tx_fifo_rp <= tx_fifo_rp + 1'd1;\n            \n        \n        if (tx_fifo_push_not_full && !tx_fifo_pop_not_empty)\n            tx_fifo_count <= tx_fifo_count + 1'd1;\n            \n        \n        else if (tx_fifo_pop_not_empty  && !tx_fifo_push_not_full)\n            tx_fifo_count <= tx_fifo_count - 1'd1;\n        end\n        \n    \n    else  \n        begin\n        \n        tx_fifo_wp    <= 'd0;\n        tx_fifo_rp    <= 'd0;\n        tx_fifo_count <= 'd0;\n        \n        \n        if ( tx_fifo_push_not_full )\n            begin\n            tx_fifo[0]          <= wb_wdata32[7:0];\n            tx_fifo_full_flag   <= 1'd1;\n            end\n        \n        else if ( tx_fifo_pop_not_empty )\n            tx_fifo_full_flag   <= 1'd0;\n\n        end        \n    end\n\n\n\n\n\nalways @( posedge i_clk )\n    uart0_cts_n_d <= {uart0_cts_n_d[2:0], i_uart_cts_n};\n                                            \n\n\n\n\nalways @( posedge i_clk )\n    if (( tx_bit_pulse_count == (TX_BITADJUST_COUNT-1) && txd_state == TXD_STOP2 ) ||\n        ( tx_bit_pulse_count == (TX_BITPULSE_COUNT-1)  && txd_state != TXD_STOP2 )  )\n        begin\n        tx_bit_pulse_count <= 'd0;\n        tx_bit_pulse       <= 1'd1;\n        end\n    else\n        begin\n        tx_bit_pulse_count <= tx_bit_pulse_count + 1'd1;\n        tx_bit_pulse       <= 1'd0;\n        end\n\n\n\n\n\n    \n    \n    \n    \n    \n     \n    \nalways @( posedge i_clk )\n    if ( tx_bit_pulse )\n    \n        case ( txd_state )\n        \n            TXD_IDLE :\n                begin\n                txd       <= 1'd1;\n                \n                if ( uart0_cts_n_d[3:1] == 3'b000 && !tx_fifo_empty )\n                    txd_state <= TXD_START;\n                end\n                \n            TXD_START :\n                begin\n                txd       <= 1'd0;\n                txd_state <= TXD_DATA0;\n                end\n                \n            TXD_DATA0 :\n                begin\n                txd       <= tx_byte[0];\n                txd_state <= TXD_DATA1;\n                end\n                \n            TXD_DATA1 :\n                begin\n                txd       <= tx_byte[1];\n                txd_state <= TXD_DATA2;\n                end\n                \n            TXD_DATA2 :\n                begin\n                txd       <= tx_byte[2];\n                txd_state <= TXD_DATA3;\n                end\n                \n            TXD_DATA3 :\n                begin\n                txd       <= tx_byte[3];\n                txd_state <= TXD_DATA4;\n                end\n                \n            TXD_DATA4 :\n                begin\n                txd       <= tx_byte[4];\n                txd_state <= TXD_DATA5;\n                end\n                \n            TXD_DATA5 :\n                begin\n                txd       <= tx_byte[5];\n                txd_state <= TXD_DATA6;\n                end\n                \n            TXD_DATA6 :\n                begin\n                txd       <= tx_byte[6];\n                txd_state <= TXD_DATA7;\n                end\n                \n            TXD_DATA7 :\n                begin\n                txd       <= tx_byte[7];\n                txd_state <= TXD_STOP1;\n                end\n                \n            TXD_STOP1 :\n                begin\n                txd       <= 1'd1;\n                txd_state <= TXD_STOP2;\n                end\n\n            TXD_STOP2 :\n                begin\n                txd       <= 1'd1;\n                txd_state <= TXD_STOP3;\n                end\n                \n            TXD_STOP3 :\n                begin\n                txd       <= 1'd1;\n                txd_state <= TXD_IDLE;\n                end\n                \n            default :\n                begin\n                txd       <= 1'd1;\n                end\n                \n        endcase\n\n\n\n\n\n\n\n\nassign o_uart_rts_n  = ~rxen;\n\nassign rx_fifo_push  = rxd_state == RXD_STOP && rx_bit_pulse_count == 10'd0;\n\n\n\n\n\nalways @( posedge i_clk )\n    if ( restart_rx_bit_count )\n        rx_bit_pulse_count <= 'd0;\n    else\n        rx_bit_pulse_count <= rx_bit_pulse_count + 1'd1;\n\n\n\n\n\nalways @( posedge i_clk )\n    rxd_d[4:0] <= {rxd_d[3:0], i_uart_rxd};\n\nassign rx_start = rxd_d[4:3] == 2'b11 && rxd_d[1:0] == 2'b00;\n\n\n\n\n\n\nalways @( posedge i_clk )\n    case ( rxd_state )\n    \n        RXD_IDLE :\n            if ( rx_fifo_full )\n                rxen                    <= 1'd0;\n            else\n                begin\n                rxd_state               <= RXD_START;\n                rxen                    <= 1'd1;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte                 <= 'd0;\n                end\n            \n        RXD_START : \n            \n            if ( rx_start ) \n                begin\n                rxd_state               <= RXD_START_MID1;\n                restart_rx_bit_count    <= 1'd1;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n\n        \n        \n        \n        RXD_START_MID1 :\n            rxd_state               <= RXD_START_MID;\n            \n        RXD_START_MID :\n            if ( rx_bit_pulse_count == RX_HALFPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA0;\n                restart_rx_bit_count    <= 1'd1;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA0 :\n            if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA1;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[0]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA1 :\n            if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA2;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[1]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA2 :\n            if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA3;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[2]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA3 :\n            if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA4;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[3]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA4 :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA5;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[4]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA5 :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA6;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[5]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA6 :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA7;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[6]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA7 :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_STOP;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[7]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_STOP :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )  \n                begin\n                rxd_state               <= RXD_IDLE;\n                restart_rx_bit_count    <= 1'd1;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        default :\n            begin\n            rxd_state       <= RXD_IDLE;\n            end\n            \n    endcase\n\n        \n\n\n\nalways @( posedge i_clk )\n    if ( wb_start_write )\n        case ( i_wb_adr[15:0] )\n            \n            AMBER_UART_RSR:  uart_rsr_reg      <= wb_wdata32[7:0];\n            \n            AMBER_UART_LCRH: uart_lcrh_reg     <= wb_wdata32[7:0];\n            \n            AMBER_UART_LCRM: uart_lcrm_reg     <= wb_wdata32[7:0];\n            \n            AMBER_UART_LCRL: uart_lcrl_reg     <= wb_wdata32[7:0];\n            \n            AMBER_UART_CR:   uart_cr_reg       <= wb_wdata32[7:0];\n        endcase\n\n\n\n\n\nalways @( posedge i_clk )\n    if ( wb_start_read )\n        case ( i_wb_adr[15:0] )\n        \n            AMBER_UART_CID0:    wb_rdata32 <= 32'h0d;\n            AMBER_UART_CID1:    wb_rdata32 <= 32'hf0;\n            AMBER_UART_CID2:    wb_rdata32 <= 32'h05;\n            AMBER_UART_CID3:    wb_rdata32 <= 32'hb1;\n            AMBER_UART_PID0:    wb_rdata32 <= 32'h10;\n            AMBER_UART_PID1:    wb_rdata32 <= 32'h10;\n            AMBER_UART_PID2:    wb_rdata32 <= 32'h04;\n            AMBER_UART_PID3:    wb_rdata32 <= 32'h00;\n            \n            AMBER_UART_DR:      \n                    if ( fifo_enable )\n                        wb_rdata32 <= {24'd0, rx_fifo[rx_fifo_rp[3:0]]};\n                    else    \n                        wb_rdata32 <= {24'd0, rx_fifo[0]};\n                                      \n            AMBER_UART_RSR:     wb_rdata32 <= uart_rsr_reg;          \n            AMBER_UART_LCRH:    wb_rdata32 <= uart_lcrh_reg;         \n            AMBER_UART_LCRM:    wb_rdata32 <= uart_lcrm_reg;         \n            AMBER_UART_LCRL:    wb_rdata32 <= uart_lcrl_reg;         \n            AMBER_UART_CR:      wb_rdata32 <= uart_cr_reg;           \n            \n            \n            AMBER_UART_FR:      wb_rdata32 <= {tx_fifo_empty,       \n                                             rx_fifo_full,        \n                                             tx_fifo_full,        \n                                             rx_fifo_empty,       \n                                             !tx_fifo_empty,      \n                                             1'd1,                 \n                                             1'd1,                 \n                                             !uart0_cts_n_d[3]     \n                                             };                    \n            \n            \n            AMBER_UART_IIR:     wb_rdata32 <= {5'd0, \n                                             1'd0,                 \n                                             tx_interrupt,         \n                                             rx_interrupt,         \n                                             1'd0                  \n                                            };                     \n                                            \n            default:            wb_rdata32 <= 32'h00c0ffee;\n            \n        endcase\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`ifndef Veritak\n\n\ninitial\n    begin\n    if ((( TX_BITPULSE_COUNT * CLK_PERIOD ) > (UART_BIT_PERIOD * 1.03) ) ||\n        (( TX_BITPULSE_COUNT * CLK_PERIOD ) < (UART_BIT_PERIOD * 0.97) ) )\n        begin\n        `TB_ERROR_MESSAGE\n        $display(\"UART TX bit period, %.1f, is too big. UART will not work!\", TX_BITPULSE_COUNT * CLK_PERIOD);\n        $display(\"Baud rate is %f, and baud bit period is %.1f\", UART_BAUD, UART_BIT_PERIOD);\n        $display(\"Either reduce the baud rate, or increase the system clock frequency\");\n        $display(\"------\");\n        end\n    end\n`endif\n    \n\n`ifdef AMBER_UART_DEBUG\nwire            wb_read_ack;\nreg             uart0_rx_int_d1 = 'd0;\n\nassign wb_read_ack = i_wb_stb && !i_wb_we &&  o_wb_ack;\n\n`ifndef Veritak\ninitial\n    begin\n    $display(\"%m UART period = %f nS, want %f nS, %d, %d\", \n             (TX_BITPULSE_COUNT*11 + TX_BITADJUST_COUNT) * CLK_PERIOD,\n             UART_WORD_PERIOD,\n             TX_BITPULSE_COUNT, TX_BITADJUST_COUNT);\n    end\n`endif\n\n\n\nalways @ ( posedge i_clk )\n    if ( wb_start_write && i_wb_adr[15:0] == AMBER_UART_ICR )\n            ;\n    else if ( fifo_enable ) \n        begin\n        if (tx_interrupt == 1'd0 && tx_fifo_half_or_less_full && uart_cr_reg[5])\n            $display(\"%m: tx_interrupt Interrupt Set with FIFO enabled\");\n        if (tx_interrupt == 1'd1 && !(tx_fifo_half_or_less_full && uart_cr_reg[5]))\n            $display(\"%m: tx_interrupt Interrupt Cleared with FIFO enabled\");\n        end\n    else\n        begin\n        if (tx_interrupt == 1'd0 && tx_fifo_empty && uart_cr_reg[5])\n            $display(\"%m: tx_interrupt Interrupt Set with FIFO disabled\");\n        if (tx_interrupt == 1'd1 && !(tx_fifo_empty && uart_cr_reg[5]))\n            $display(\"%m: tx_interrupt Interrupt Cleared with FIFO disabled\");\n        end\n\n\n\nalways @ ( posedge i_clk )\n    begin\n    uart0_rx_int_d1 <= rx_interrupt;\n\n    if ( rx_interrupt && !uart0_rx_int_d1 )\n        begin\n        `TB_DEBUG_MESSAGE\n        $display(\"rx_interrupt Interrupt fifo_enable %d, rx_fifo_full %d\", \n                 fifo_enable, rx_fifo_full);\n        $display(\"rx_fifo_half_or_more %d, rx_int_timer 0x%08h, rx_fifo_count %d\", \n                 rx_fifo_half_or_more, rx_int_timer, rx_fifo_count);\n        end\n        \n    if ( !rx_interrupt && uart0_rx_int_d1 )\n        begin\n        `TB_DEBUG_MESSAGE\n        $display(\"rx_interrupt Interrupt Cleared fifo_enable %d, rx_fifo_full %d\", \n                 fifo_enable, rx_fifo_full);\n        $display(\"    rx_fifo_half_or_more %d, rx_int_timer 0x%08h, rx_fifo_count %d\", \n                 rx_fifo_half_or_more, rx_int_timer, rx_fifo_count);\n        end\n    end\n\n\nalways @( posedge i_clk )\n    if ( wb_read_ack || wb_start_write )\n        begin\n        `TB_DEBUG_MESSAGE\n        \n        if ( wb_start_write )\n            $write(\"Write 0x%08x to   \", wb_wdata32);\n        else\n            $write(\"Read  0x%08x from \", o_wb_dat);\n            \n        case ( i_wb_adr[15:0] )\n            AMBER_UART_PID0:    $write(\"UART PID0 register\"); \n            AMBER_UART_PID1:    $write(\"UART PID1 register\"); \n            AMBER_UART_PID2:    $write(\"UART PID2 register\"); \n            AMBER_UART_PID3:    $write(\"UART PID3 register\"); \n            AMBER_UART_CID0:    $write(\"UART CID0 register\"); \n            AMBER_UART_CID1:    $write(\"UART CID1 register\"); \n            AMBER_UART_CID2:    $write(\"UART CID2 register\"); \n            AMBER_UART_CID3:    $write(\"UART CID3 register\"); \n            AMBER_UART_DR:      $write(\"UART Tx/Rx char %c\", wb_start_write ? wb_wdata32[7:0] : o_wb_dat[7:0] );\n            AMBER_UART_RSR:     $write(\"UART (Read) Receive status, (Write) Error Clear\");\n            AMBER_UART_LCRH:    $write(\"UART Line Control High Byte\");\n            AMBER_UART_LCRM:    $write(\"UART Line Control Middle Byte\");\n            AMBER_UART_LCRL:    $write(\"UART Line Control Low Byte\");\n            AMBER_UART_CR:      $write(\"UART Control Register\");\n            AMBER_UART_FR:      $write(\"UART Flag Register\");\n            AMBER_UART_IIR:     $write(\"UART (Read) Interrupt Identification Register\");\n\n            default:\n                begin\n                `TB_ERROR_MESSAGE\n                $write(\"Unknown UART Register region\");\n                end\n        endcase\n        \n        $write(\", Address 0x%08h\\n\", i_wb_adr); \n        end\n`endif\n\n\n\n\n\nalways @ ( posedge i_clk )\n    begin\n    if ( rx_fifo_pop  && !rx_fifo_push && rx_fifo_empty )\n        begin\n        `TB_WARNING_MESSAGE\n        $write(\"UART rx FIFO underflow\\n\");\n        end\n    if ( !rx_fifo_pop  && rx_fifo_push && rx_fifo_full )\n        begin\n        `TB_WARNING_MESSAGE\n        $write(\"UART rx FIFO overflow\\n\");\n        end\n\n    if ( tx_fifo_push && tx_fifo_full )\n        begin\n        `TB_WARNING_MESSAGE\n        $display(\"UART tx FIFO overflow - char = %c\", wb_wdata32[7:0]);\n        end\n    end\n\n\n\n\n\n\nwire    [(10*8)-1:0]    xTXD_STATE;\nwire    [(14*8)-1:0]    xRXD_STATE;\n\n \nassign xTXD_STATE      = txd_state == TXD_IDLE       ? \"TXD_IDLE\"   :\n                         txd_state == TXD_START      ? \"TXD_START\"  :\n                         txd_state == TXD_DATA0      ? \"TXD_DATA0\"  :\n                         txd_state == TXD_DATA1      ? \"TXD_DATA1\"  :\n                         txd_state == TXD_DATA2      ? \"TXD_DATA2\"  :\n                         txd_state == TXD_DATA3      ? \"TXD_DATA3\"  :\n                         txd_state == TXD_DATA4      ? \"TXD_DATA4\"  :\n                         txd_state == TXD_DATA5      ? \"TXD_DATA5\"  :\n                         txd_state == TXD_DATA6      ? \"TXD_DATA6\"  :\n                         txd_state == TXD_DATA7      ? \"TXD_DATA7\"  :\n                         txd_state == TXD_STOP1      ? \"TXD_STOP1\"  :\n                         txd_state == TXD_STOP2      ? \"TXD_STOP2\"  :\n                         txd_state == TXD_STOP3      ? \"TXD_STOP3\"  :\n                                                       \"UNKNOWN\"    ;\n\nassign xRXD_STATE      = rxd_state == RXD_IDLE       ? \"RXD_IDLE\"      :\n                         rxd_state == RXD_START      ? \"RXD_START\"     :\n                         rxd_state == RXD_START_MID1 ? \"RXD_START_MID1\":\n                         rxd_state == RXD_START_MID  ? \"RXD_START_MID\" :\n                         rxd_state == RXD_DATA0      ? \"RXD_DATA0\"     :\n                         rxd_state == RXD_DATA1      ? \"RXD_DATA1\"     :\n                         rxd_state == RXD_DATA2      ? \"RXD_DATA2\"     :\n                         rxd_state == RXD_DATA3      ? \"RXD_DATA3\"     :\n                         rxd_state == RXD_DATA4      ? \"RXD_DATA4\"     :\n                         rxd_state == RXD_DATA5      ? \"RXD_DATA5\"     :\n                         rxd_state == RXD_DATA6      ? \"RXD_DATA6\"     :\n                         rxd_state == RXD_DATA7      ? \"RXD_DATA7\"     :\n                         rxd_state == RXD_STOP       ? \"RXD_STOP\"      :\n                                                       \"UNKNOWN\"       ;\n\n\n\n\nendmodule\n\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: uart. Module specification: This module implements a UART (Universal Asynchronous Receiver/Transmitter) interface with configurable baud rates, FIFO buffers, and Wishbone interface support. It handles both transmitting and receiving data serially, with features including interrupt generation, flow control (CTS/RTS), and configurable parameters like data bits and stop bits. The module has input ports for clock, Wishbone interface signals, UART CTS, and RXD, and output ports for Wishbone interface responses, UART interrupt, TXD, and RTS. Internal signals manage FIFO operations, transmit and receive state machines, and various control registers. The code is organized into sections for FIFO management, transmit and receive operations, register access, and interrupt handling. It supports both FIFO and non-FIFO modes, implements transmit and receive state machines, and includes"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: uart\n\nExplanation: This module implements a UART (Universal Asynchronous Receiver/Transmitter) interface. It handles both transmitting and receiving data serially, supporting configurable baud rates and FIFO buffers. The module includes features such as interrupt generation, flow control (CTS/RTS), and configurable parameters like data bits and stop bits. It also provides a Wishbone interface for communication with other system components. The UART supports both FIFO and non-FIFO modes, handles transmission and reception states, and includes registers for control and status information."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\ni_clk, i_wb_adr, i_wb_sel, i_wb_we, i_wb_dat, i_wb_cyc, i_wb_stb, i_uart_cts_n, i_uart_rxd\n\nExplanation:\n- i_clk: System clock input\n- i_wb_adr: Wishbone address input\n- i_wb_sel: Wishbone byte select input\n- i_wb_we: Wishbone write enable input\n- i_wb_dat: Wishbone data input\n- i_wb_cyc: Wishbone cycle input\n- i_wb_stb: Wishbone strobe input\n- i_uart_cts_n: UART Clear To Send input (active low)\n- i_uart_rxd: UART receive data input\n\nOutput ports:\no_wb_dat, o_wb_ack, o_wb_err, o_uart_int, o_uart_txd, o_uart_rts_n\n\nExplanation:\n- o_wb_dat: Wishbone data output\n- o_wb_ack: Wishbone acknowledge output\n- o_wb_err: Wishbone error output\n- o_uart_int: UART interrupt output\n- o_uart_txd: UART transmit data output\n- o_uart_rts_n: UART Ready To Send output (active low)"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\ntx_interrupt, rx_interrupt, rx_int_timer, fifo_enable, tx_fifo, tx_fifo_full, tx_fifo_empty, tx_fifo_half_or_less_full, tx_fifo_push, tx_fifo_push_not_full, tx_fifo_pop_not_empty, tx_fifo_wp, tx_fifo_rp, tx_fifo_count, tx_fifo_full_flag, rx_fifo, rx_fifo_empty, rx_fifo_full, rx_fifo_half_or_more, rx_fifo_count, rx_fifo_push, rx_fifo_push_not_full, rx_fifo_pop, rx_fifo_pop_not_empty, rx_fifo_wp, rx_fifo_rp, tx_byte, txd_state, txd, tx_bit_pulse, tx_bit_pulse_count, rx_byte, rxd_state, rx_start, rxen, rx_bit_pulse_count, restart_rx_bit_count, rxd_d, uart0_cts_n_d, uart_rsr_reg, uart_lcrh_reg, uart_lcrm_reg, uart_lcrl_reg, uart_cr_reg, wb_rdata32, wb_start_write, wb_start_read, wb_start_read_d1, wb_wdata32.\n\nExplanation:\n- tx_interrupt, rx_interrupt: Transmit and receive interrupt flags\n- rx_int_timer: Timer for receive interrupt generation\n- fifo_enable: Enable signal for FIFO mode\n- tx_fifo, rx_fifo: Transmit and receive FIFO buffers\n- tx_fifo_full, tx_fifo_empty, rx_fifo_full, rx_fifo_empty: FIFO status flags\n- tx_fifo_half_or_less_full, rx_fifo_half_or_more: FIFO level indicators\n- tx_fifo_push, rx_fifo_push: FIFO push signals\n- tx_fifo_pop_not_empty, rx_fifo_pop_not_empty: FIFO pop signals when not empty\n- tx_fifo_wp, tx_fifo_rp, rx_fifo_wp, rx_fifo_rp: FIFO write and read pointers\n- tx_fifo_count, rx_fifo_count: FIFO fill level counters\n- tx_byte, rx_byte: Transmit and receive data bytes\n- txd_state, rxd_state: State machines for transmit and receive operations\n- txd: Transmit data output\n- tx_bit_pulse, rx_bit_pulse_count: Bit timing signals\n- rxen: Receive enable signal\n- restart_rx_bit_count: Signal to restart receive bit counter\n- rxd_d: Delayed receive data input for edge detection\n- uart0_cts_n_d: Delayed CTS input\n- uart_*_reg: UART control and status registers\n- wb_rdata32: Wishbone read data\n- wb_start_write, wb_start_read: Wishbone transaction control signals\n- wb_wdata32: Wishbone write data"
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`include \"system_config_defines.vh\"\n`include \"global_defines.vh\"\n\n\n`ifndef AMBER_UART_BAUD\n`define AMBER_UART_BAUD 230400\n`endif\n\nmodule uart  #(\nparameter WB_DWIDTH  = 32,\nparameter WB_SWIDTH  = 4\n)(\ninput                       i_clk,\n\ninput       [31:0]          i_wb_adr,\ninput       [WB_SWIDTH-1:0] i_wb_sel,\ninput                       i_wb_we,\noutput      [WB_DWIDTH-1:0] o_wb_dat,\ninput       [WB_DWIDTH-1:0] i_wb_dat,\ninput                       i_wb_cyc,\ninput                       i_wb_stb,\noutput                      o_wb_ack,\noutput                      o_wb_err,\n\noutput                      o_uart_int,\n\ninput                       i_uart_cts_n,   \noutput                      o_uart_txd,     \noutput                      o_uart_rts_n,   \ninput                       i_uart_rxd      \n\n);\n\n\n`include \"register_addresses.vh\"\n\n\nlocalparam [3:0] TXD_IDLE  = 4'd0,\n                 TXD_START = 4'd1,\n                 TXD_DATA0 = 4'd2,\n                 TXD_DATA1 = 4'd3,\n                 TXD_DATA2 = 4'd4,\n                 TXD_DATA3 = 4'd5,\n                 TXD_DATA4 = 4'd6,\n                 TXD_DATA5 = 4'd7,\n                 TXD_DATA6 = 4'd8,\n                 TXD_DATA7 = 4'd9,\n                 TXD_STOP1 = 4'd10,\n                 TXD_STOP2 = 4'd11,\n                 TXD_STOP3 = 4'd12;\n                 \nlocalparam [3:0] RXD_IDLE       = 4'd0,\n                 RXD_START      = 4'd1,\n                 RXD_START_MID  = 4'd2,\n                 RXD_START_MID1 = 4'd3,\n                 RXD_DATA0      = 4'd4,\n                 RXD_DATA1      = 4'd5,\n                 RXD_DATA2      = 4'd6,\n                 RXD_DATA3      = 4'd7,\n                 RXD_DATA4      = 4'd8,\n                 RXD_DATA5      = 4'd9,\n                 RXD_DATA6      = 4'd10,\n                 RXD_DATA7      = 4'd11,\n                 RXD_STOP       = 4'd12;\n\n\nlocalparam RX_INTERRUPT_COUNT = 24'h3fffff; \n\n\n\n\n\n\n`ifndef Veritak\nlocalparam real UART_BAUD         = `AMBER_UART_BAUD;            \n\n`ifdef XILINX_VIRTEX6_FPGA\nlocalparam real CLK_FREQ          = 1200.0 / `AMBER_CLK_DIVIDER ; \n`else\nlocalparam real CLK_FREQ          = 800.0 / `AMBER_CLK_DIVIDER ; \n`endif\n\nlocalparam real UART_BIT_PERIOD   = 1000000000 / UART_BAUD;      \nlocalparam real UART_WORD_PERIOD  = ( UART_BIT_PERIOD * 12 );    \nlocalparam real CLK_PERIOD        = 1000 / CLK_FREQ;             \nlocalparam real CLKS_PER_WORD     = UART_WORD_PERIOD / CLK_PERIOD;\nlocalparam real CLKS_PER_BIT      = CLKS_PER_WORD / 12;\n\n\n\n\nlocalparam [9:0] TX_BITPULSE_COUNT         = CLKS_PER_BIT;\nlocalparam [9:0] TX_CLKS_PER_WORD          = CLKS_PER_WORD;\n`else\nlocalparam [9:0] TX_BITPULSE_COUNT         = 30;\nlocalparam [9:0] TX_CLKS_PER_WORD          = 360;\n`endif\n\nlocalparam [9:0] TX_BITADJUST_COUNT        = TX_CLKS_PER_WORD - 11*TX_BITPULSE_COUNT;\n\nlocalparam [9:0] RX_BITPULSE_COUNT         = TX_BITPULSE_COUNT-2;\nlocalparam [9:0] RX_HALFPULSE_COUNT        = TX_BITPULSE_COUNT/2 - 4;\n\n\n\n\nreg             tx_interrupt = 'd0;\nreg             rx_interrupt = 'd0;\nreg   [23:0]    rx_int_timer = 'd0;\n\nwire            fifo_enable;\n\nreg   [7:0]     tx_fifo    [0:15];\nwire            tx_fifo_full;\nwire            tx_fifo_empty;\nwire            tx_fifo_half_or_less_full;\nwire            tx_fifo_push;\nwire            tx_fifo_push_not_full;\nwire            tx_fifo_pop_not_empty;\nreg   [4:0]     tx_fifo_wp = 'd0;\nreg   [4:0]     tx_fifo_rp = 'd0;\nreg   [4:0]     tx_fifo_count = 'd0;   \nreg             tx_fifo_full_flag = 'd0;\n\nreg   [7:0]     rx_fifo    [0:15];\nreg             rx_fifo_empty = 1'd1;\nreg             rx_fifo_full = 1'd0;\nwire            rx_fifo_half_or_more;     \nreg   [4:0]     rx_fifo_count = 'd0;   \nwire            rx_fifo_push;\nwire            rx_fifo_push_not_full;\nwire            rx_fifo_pop;\nwire            rx_fifo_pop_not_empty;\nreg   [4:0]     rx_fifo_wp = 'd0;\nreg   [4:0]     rx_fifo_rp = 'd0;\n\nwire  [7:0]     tx_byte;\nreg   [3:0]     txd_state = TXD_IDLE;\nreg             txd = 1'd1;\nreg             tx_bit_pulse = 'd0;\nreg   [9:0]     tx_bit_pulse_count = 'd0;\n\nreg   [7:0]     rx_byte = 'd0;\nreg   [3:0]     rxd_state = RXD_IDLE;\nwire            rx_start;\nreg             rxen = 'd0;\nreg   [9:0]     rx_bit_pulse_count = 'd0;\nreg             restart_rx_bit_count = 'd0;\nreg   [4:0]     rxd_d = 5'h1f;\nreg   [3:0]     uart0_cts_n_d = 4'hf;\n\n\nreg  [7:0]      uart_rsr_reg = 'd0;       \nreg  [7:0]      uart_lcrh_reg = 'd0;      \nreg  [7:0]      uart_lcrm_reg = 'd0;      \nreg  [7:0]      uart_lcrl_reg = 'd0;      \nreg  [7:0]      uart_cr_reg = 'd0;        \n\n\nreg  [31:0]     wb_rdata32 = 'd0;\nwire            wb_start_write;\nwire            wb_start_read;\nreg             wb_start_read_d1 = 'd0;\nwire [31:0]     wb_wdata32;\n\ninteger         i;\n\n\n\n\n\n\n\nassign wb_start_write = i_wb_stb &&  i_wb_we && !wb_start_read_d1;\nassign wb_start_read  = i_wb_stb && !i_wb_we && !o_wb_ack;\n\nalways @( posedge i_clk )\n    wb_start_read_d1 <= wb_start_read;\n\nassign o_wb_err = 1'd0;\nassign o_wb_ack = i_wb_stb && ( wb_start_write || wb_start_read_d1 );\n\ngenerate\nif (WB_DWIDTH == 128) \n    begin : wb128\n    assign wb_wdata32   = i_wb_adr[3:2] == 2'd3 ? i_wb_dat[127:96] :\n                          i_wb_adr[3:2] == 2'd2 ? i_wb_dat[ 95:64] :\n                          i_wb_adr[3:2] == 2'd1 ? i_wb_dat[ 63:32] :\n                                                  i_wb_dat[ 31: 0] ;\n                                                                                                                                            \n    assign o_wb_dat    = {4{wb_rdata32}};\n    end\nelse\n    begin : wb32\n    assign wb_wdata32  = i_wb_dat;\n    assign o_wb_dat    = wb_rdata32;\n    end\nendgenerate\n\n        \n\n\n\n                       \nassign rx_fifo_pop           = wb_start_read && i_wb_adr[15:0] == AMBER_UART_DR;\nassign rx_fifo_push_not_full = rx_fifo_push && !rx_fifo_full;\nassign rx_fifo_pop_not_empty = rx_fifo_pop && !rx_fifo_empty;\nassign rx_fifo_half_or_more  = rx_fifo_count >= 5'd8;\n\n\nalways @ ( posedge i_clk ) \n    begin\n    if ( fifo_enable )\n        begin\n        \n        if ( rx_fifo_push_not_full )\n            begin\n            rx_fifo[rx_fifo_wp[3:0]]    <= rx_byte;                \n            rx_fifo_wp                  <= rx_fifo_wp + 1'd1;\n            end\n\n        if ( rx_fifo_pop_not_empty )\n            begin\n            rx_fifo_rp                  <= rx_fifo_rp + 1'd1;\n            end\n            \n        if ( rx_fifo_push_not_full && !rx_fifo_pop_not_empty )\n            rx_fifo_count <= rx_fifo_count + 1'd1;\n        else if ( rx_fifo_pop_not_empty  && !rx_fifo_push_not_full )\n            rx_fifo_count <= rx_fifo_count - 1'd1;\n        \n        rx_fifo_full  <= rx_fifo_wp == {~rx_fifo_rp[4], rx_fifo_rp[3:0]};\n        rx_fifo_empty <= rx_fifo_wp == rx_fifo_rp;\n        \n        if ( rx_fifo_empty || rx_fifo_pop )\n            rx_int_timer     <= 'd0;\n        else if ( rx_int_timer != RX_INTERRUPT_COUNT )\n            rx_int_timer     <= rx_int_timer + 1'd1;\n        \n            \n        end\n    else    \n        begin\n        rx_int_timer     <= 'd0;\n        \n        if ( rx_fifo_push )\n            begin\n            rx_fifo[0]         <= rx_byte;\n            rx_fifo_empty      <= 1'd0;\n            rx_fifo_full       <= 1'd1;\n            end\n        else if ( rx_fifo_pop )\n            begin\n            rx_fifo_empty      <= 1'd1;\n            rx_fifo_full       <= 1'd0;\n            end\n        end\n    end\n\n\n\n\n\n\n\n\nalways @ ( posedge i_clk )\n    begin \n    \n    if ( wb_start_write && i_wb_adr[15:0] == AMBER_UART_ICR )\n        tx_interrupt <= 1'd0;\n\n    \n    else if  ( fifo_enable ) \n        \n        \n        tx_interrupt <= tx_fifo_half_or_less_full && uart_cr_reg[5];\n    else \n        \n        \n        tx_interrupt <= tx_fifo_empty && uart_cr_reg[5];\n    end\n\n\n\n\n\n\nalways @ ( posedge i_clk )\n    if (fifo_enable)\n        rx_interrupt <=  rx_fifo_half_or_more || rx_int_timer == RX_INTERRUPT_COUNT;\n    else    \n        rx_interrupt <=  rx_fifo_full;\n\n\nassign o_uart_int   = ( tx_interrupt & uart_cr_reg[5] )  |  \n                      ( rx_interrupt & uart_cr_reg[4] )  ;  \n\nassign fifo_enable = uart_lcrh_reg[4];\n\n\n       \n\n\n\n\nassign   o_uart_txd                 = txd;\n\nassign   tx_fifo_full               = fifo_enable ? tx_fifo_count >= 5'd16 :  tx_fifo_full_flag;\nassign   tx_fifo_empty              = fifo_enable ? tx_fifo_count == 5'd00 : !tx_fifo_full_flag;\nassign   tx_fifo_half_or_less_full  =               tx_fifo_count <= 5'd8;\nassign   tx_byte                    = fifo_enable ? tx_fifo[tx_fifo_rp[3:0]] : tx_fifo[0] ;\n\nassign   tx_fifo_push               = wb_start_write && i_wb_adr[15:0] == AMBER_UART_DR;\nassign   tx_fifo_push_not_full      = tx_fifo_push && !tx_fifo_full;\nassign   tx_fifo_pop_not_empty      = txd_state == TXD_STOP3 && tx_bit_pulse == 1'd1 && !tx_fifo_empty;\n\n        \n\nalways @( posedge i_clk )\n    begin      \n    \n    if ( fifo_enable )\n        begin\n        \n        if ( tx_fifo_push_not_full )\n            begin\n            tx_fifo[tx_fifo_wp[3:0]] <= wb_wdata32[7:0];\n            tx_fifo_wp <= tx_fifo_wp + 1'd1;\n            end\n        \n            \n        \n        if ( tx_fifo_pop_not_empty )\n            tx_fifo_rp <= tx_fifo_rp + 1'd1;\n            \n        \n        if (tx_fifo_push_not_full && !tx_fifo_pop_not_empty)\n            tx_fifo_count <= tx_fifo_count + 1'd1;\n            \n        \n        else if (tx_fifo_pop_not_empty  && !tx_fifo_push_not_full)\n            tx_fifo_count <= tx_fifo_count - 1'd1;\n        end\n        \n    \n    else  \n        begin\n        \n        tx_fifo_wp    <= 'd0;\n        tx_fifo_rp    <= 'd0;\n        tx_fifo_count <= 'd0;\n        \n        \n        if ( tx_fifo_push_not_full )\n            begin\n            tx_fifo[0]          <= wb_wdata32[7:0];\n            tx_fifo_full_flag   <= 1'd1;\n            end\n        \n        else if ( tx_fifo_pop_not_empty )\n            tx_fifo_full_flag   <= 1'd0;\n\n        end        \n    end\n\n\n\n\n\nalways @( posedge i_clk )\n    uart0_cts_n_d <= {uart0_cts_n_d[2:0], i_uart_cts_n};\n                                            \n\n\n\n\nalways @( posedge i_clk )\n    if (( tx_bit_pulse_count == (TX_BITADJUST_COUNT-1) && txd_state == TXD_STOP2 ) ||\n        ( tx_bit_pulse_count == (TX_BITPULSE_COUNT-1)  && txd_state != TXD_STOP2 )  )\n        begin\n        tx_bit_pulse_count <= 'd0;\n        tx_bit_pulse       <= 1'd1;\n        end\n    else\n        begin\n        tx_bit_pulse_count <= tx_bit_pulse_count + 1'd1;\n        tx_bit_pulse       <= 1'd0;\n        end\n\n\n\n\n\n    \n    \n    \n    \n    \n     \n    \nalways @( posedge i_clk )\n    if ( tx_bit_pulse )\n    \n        case ( txd_state )\n        \n            TXD_IDLE :\n                begin\n                txd       <= 1'd1;\n                \n                if ( uart0_cts_n_d[3:1] == 3'b000 && !tx_fifo_empty )\n                    txd_state <= TXD_START;\n                end\n                \n            TXD_START :\n                begin\n                txd       <= 1'd0;\n                txd_state <= TXD_DATA0;\n                end\n                \n            TXD_DATA0 :\n                begin\n                txd       <= tx_byte[0];\n                txd_state <= TXD_DATA1;\n                end\n                \n            TXD_DATA1 :\n                begin\n                txd       <= tx_byte[1];\n                txd_state <= TXD_DATA2;\n                end\n                \n            TXD_DATA2 :\n                begin\n                txd       <= tx_byte[2];\n                txd_state <= TXD_DATA3;\n                end\n                \n            TXD_DATA3 :\n                begin\n                txd       <= tx_byte[3];\n                txd_state <= TXD_DATA4;\n                end\n                \n            TXD_DATA4 :\n                begin\n                txd       <= tx_byte[4];\n                txd_state <= TXD_DATA5;\n                end\n                \n            TXD_DATA5 :\n                begin\n                txd       <= tx_byte[5];\n                txd_state <= TXD_DATA6;\n                end\n                \n            TXD_DATA6 :\n                begin\n                txd       <= tx_byte[6];\n                txd_state <= TXD_DATA7;\n                end\n                \n            TXD_DATA7 :\n                begin\n                txd       <= tx_byte[7];\n                txd_state <= TXD_STOP1;\n                end\n                \n            TXD_STOP1 :\n                begin\n                txd       <= 1'd1;\n                txd_state <= TXD_STOP2;\n                end\n\n            TXD_STOP2 :\n                begin\n                txd       <= 1'd1;\n                txd_state <= TXD_STOP3;\n                end\n                \n            TXD_STOP3 :\n                begin\n                txd       <= 1'd1;\n                txd_state <= TXD_IDLE;\n                end\n                \n            default :\n                begin\n                txd       <= 1'd1;\n                end\n                \n        endcase\n\n\n\n\n\n\n\n\nassign o_uart_rts_n  = ~rxen;\n\nassign rx_fifo_push  = rxd_state == RXD_STOP && rx_bit_pulse_count == 10'd0;\n\n\n\n\n\nalways @( posedge i_clk )\n    if ( restart_rx_bit_count )\n        rx_bit_pulse_count <= 'd0;\n    else\n        rx_bit_pulse_count <= rx_bit_pulse_count + 1'd1;\n\n\n\n\n\nalways @( posedge i_clk )\n    rxd_d[4:0] <= {rxd_d[3:0], i_uart_rxd};\n\nassign rx_start = rxd_d[4:3] == 2'b11 && rxd_d[1:0] == 2'b00;\n\n\n\n\n\n\nalways @( posedge i_clk )\n    case ( rxd_state )\n    \n        RXD_IDLE :\n            if ( rx_fifo_full )\n                rxen                    <= 1'd0;\n            else\n                begin\n                rxd_state               <= RXD_START;\n                rxen                    <= 1'd1;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte                 <= 'd0;\n                end\n            \n        RXD_START : \n            \n            if ( rx_start ) \n                begin\n                rxd_state               <= RXD_START_MID1;\n                restart_rx_bit_count    <= 1'd1;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n\n        \n        \n        \n        RXD_START_MID1 :\n            rxd_state               <= RXD_START_MID;\n            \n        RXD_START_MID :\n            if ( rx_bit_pulse_count == RX_HALFPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA0;\n                restart_rx_bit_count    <= 1'd1;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA0 :\n            if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA1;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[0]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA1 :\n            if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA2;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[1]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA2 :\n            if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA3;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[2]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA3 :\n            if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA4;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[3]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA4 :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA5;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[4]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA5 :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA6;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[5]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA6 :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_DATA7;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[6]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_DATA7 :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n                begin\n                rxd_state               <= RXD_STOP;\n                restart_rx_bit_count    <= 1'd1;\n                rx_byte[7]              <= i_uart_rxd;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        RXD_STOP :\n            if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )  \n                begin\n                rxd_state               <= RXD_IDLE;\n                restart_rx_bit_count    <= 1'd1;\n                end\n            else    \n                restart_rx_bit_count    <= 1'd0;\n            \n        default :\n            begin\n            rxd_state       <= RXD_IDLE;\n            end\n            \n    endcase\n\n        \n\n\n\nalways @( posedge i_clk )\n    if ( wb_start_write )\n        case ( i_wb_adr[15:0] )\n            \n            AMBER_UART_RSR:  uart_rsr_reg      <= wb_wdata32[7:0];\n            \n            AMBER_UART_LCRH: uart_lcrh_reg     <= wb_wdata32[7:0];\n            \n            AMBER_UART_LCRM: uart_lcrm_reg     <= wb_wdata32[7:0];\n            \n            AMBER_UART_LCRL: uart_lcrl_reg     <= wb_wdata32[7:0];\n            \n            AMBER_UART_CR:   uart_cr_reg       <= wb_wdata32[7:0];\n        endcase\n\n\n\n\n\nalways @( posedge i_clk )\n    if ( wb_start_read )\n        case ( i_wb_adr[15:0] )\n        \n            AMBER_UART_CID0:    wb_rdata32 <= 32'h0d;\n            AMBER_UART_CID1:    wb_rdata32 <= 32'hf0;\n            AMBER_UART_CID2:    wb_rdata32 <= 32'h05;\n            AMBER_UART_CID3:    wb_rdata32 <= 32'hb1;\n            AMBER_UART_PID0:    wb_rdata32 <= 32'h10;\n            AMBER_UART_PID1:    wb_rdata32 <= 32'h10;\n            AMBER_UART_PID2:    wb_rdata32 <= 32'h04;\n            AMBER_UART_PID3:    wb_rdata32 <= 32'h00;\n            \n            AMBER_UART_DR:      \n                    if ( fifo_enable )\n                        wb_rdata32 <= {24'd0, rx_fifo[rx_fifo_rp[3:0]]};\n                    else    \n                        wb_rdata32 <= {24'd0, rx_fifo[0]};\n                                      \n            AMBER_UART_RSR:     wb_rdata32 <= uart_rsr_reg;          \n            AMBER_UART_LCRH:    wb_rdata32 <= uart_lcrh_reg;         \n            AMBER_UART_LCRM:    wb_rdata32 <= uart_lcrm_reg;         \n            AMBER_UART_LCRL:    wb_rdata32 <= uart_lcrl_reg;         \n            AMBER_UART_CR:      wb_rdata32 <= uart_cr_reg;           \n            \n            \n            AMBER_UART_FR:      wb_rdata32 <= {tx_fifo_empty,       \n                                             rx_fifo_full,        \n                                             tx_fifo_full,        \n                                             rx_fifo_empty,       \n                                             !tx_fifo_empty,      \n                                             1'd1,                 \n                                             1'd1,                 \n                                             !uart0_cts_n_d[3]     \n                                             };                    \n            \n            \n            AMBER_UART_IIR:     wb_rdata32 <= {5'd0, \n                                             1'd0,                 \n                                             tx_interrupt,         \n                                             rx_interrupt,         \n                                             1'd0                  \n                                            };                     \n                                            \n            default:            wb_rdata32 <= 32'h00c0ffee;\n            \n        endcase\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`ifndef Veritak\n\n\ninitial\n    begin\n    if ((( TX_BITPULSE_COUNT * CLK_PERIOD ) > (UART_BIT_PERIOD * 1.03) ) ||\n        (( TX_BITPULSE_COUNT * CLK_PERIOD ) < (UART_BIT_PERIOD * 0.97) ) )\n        begin\n        `TB_ERROR_MESSAGE\n        $display(\"UART TX bit period, %.1f, is too big. UART will not work!\", TX_BITPULSE_COUNT * CLK_PERIOD);\n        $display(\"Baud rate is %f, and baud bit period is %.1f\", UART_BAUD, UART_BIT_PERIOD);\n        $display(\"Either reduce the baud rate, or increase the system clock frequency\");\n        $display(\"------\");\n        end\n    end\n`endif\n    \n\n`ifdef AMBER_UART_DEBUG\nwire            wb_read_ack;\nreg             uart0_rx_int_d1 = 'd0;\n\nassign wb_read_ack = i_wb_stb && !i_wb_we &&  o_wb_ack;\n\n`ifndef Veritak\ninitial\n    begin\n    $display(\"%m UART period = %f nS, want %f nS, %d, %d\", \n             (TX_BITPULSE_COUNT*11 + TX_BITADJUST_COUNT) * CLK_PERIOD,\n             UART_WORD_PERIOD,\n             TX_BITPULSE_COUNT, TX_BITADJUST_COUNT);\n    end\n`endif\n\n\n\nalways @ ( posedge i_clk )\n    if ( wb_start_write && i_wb_adr[15:0] == AMBER_UART_ICR )\n            ;\n    else if ( fifo_enable ) \n        begin\n        if (tx_interrupt == 1'd0 && tx_fifo_half_or_less_full && uart_cr_reg[5])\n            $display(\"%m: tx_interrupt Interrupt Set with FIFO enabled\");\n        if (tx_interrupt == 1'd1 && !(tx_fifo_half_or_less_full && uart_cr_reg[5]))\n            $display(\"%m: tx_interrupt Interrupt Cleared with FIFO enabled\");\n        end\n    else\n        begin\n        if (tx_interrupt == 1'd0 && tx_fifo_empty && uart_cr_reg[5])\n            $display(\"%m: tx_interrupt Interrupt Set with FIFO disabled\");\n        if (tx_interrupt == 1'd1 && !(tx_fifo_empty && uart_cr_reg[5]))\n            $display(\"%m: tx_interrupt Interrupt Cleared with FIFO disabled\");\n        end\n\n\n\nalways @ ( posedge i_clk )\n    begin\n    uart0_rx_int_d1 <= rx_interrupt;\n\n    if ( rx_interrupt && !uart0_rx_int_d1 )\n        begin\n        `TB_DEBUG_MESSAGE\n        $display(\"rx_interrupt Interrupt fifo_enable %d, rx_fifo_full %d\", \n                 fifo_enable, rx_fifo_full);\n        $display(\"rx_fifo_half_or_more %d, rx_int_timer 0x%08h, rx_fifo_count %d\", \n                 rx_fifo_half_or_more, rx_int_timer, rx_fifo_count);\n        end\n        \n    if ( !rx_interrupt && uart0_rx_int_d1 )\n        begin\n        `TB_DEBUG_MESSAGE\n        $display(\"rx_interrupt Interrupt Cleared fifo_enable %d, rx_fifo_full %d\", \n                 fifo_enable, rx_fifo_full);\n        $display(\"    rx_fifo_half_or_more %d, rx_int_timer 0x%08h, rx_fifo_count %d\", \n                 rx_fifo_half_or_more, rx_int_timer, rx_fifo_count);\n        end\n    end\n\n\nalways @( posedge i_clk )\n    if ( wb_read_ack || wb_start_write )\n        begin\n        `TB_DEBUG_MESSAGE\n        \n        if ( wb_start_write )\n            $write(\"Write 0x%08x to   \", wb_wdata32);\n        else\n            $write(\"Read  0x%08x from \", o_wb_dat);\n            \n        case ( i_wb_adr[15:0] )\n            AMBER_UART_PID0:    $write(\"UART PID0 register\"); \n            AMBER_UART_PID1:    $write(\"UART PID1 register\"); \n            AMBER_UART_PID2:    $write(\"UART PID2 register\"); \n            AMBER_UART_PID3:    $write(\"UART PID3 register\"); \n            AMBER_UART_CID0:    $write(\"UART CID0 register\"); \n            AMBER_UART_CID1:    $write(\"UART CID1 register\"); \n            AMBER_UART_CID2:    $write(\"UART CID2 register\"); \n            AMBER_UART_CID3:    $write(\"UART CID3 register\"); \n            AMBER_UART_DR:      $write(\"UART Tx/Rx char %c\", wb_start_write ? wb_wdata32[7:0] : o_wb_dat[7:0] );\n            AMBER_UART_RSR:     $write(\"UART (Read) Receive status, (Write) Error Clear\");\n            AMBER_UART_LCRH:    $write(\"UART Line Control High Byte\");\n            AMBER_UART_LCRM:    $write(\"UART Line Control Middle Byte\");\n            AMBER_UART_LCRL:    $write(\"UART Line Control Low Byte\");\n            AMBER_UART_CR:      $write(\"UART Control Register\");\n            AMBER_UART_FR:      $write(\"UART Flag Register\");\n            AMBER_UART_IIR:     $write(\"UART (Read) Interrupt Identification Register\");\n\n            default:\n                begin\n                `TB_ERROR_MESSAGE\n                $write(\"Unknown UART Register region\");\n                end\n        endcase\n        \n        $write(\", Address 0x%08h\\n\", i_wb_adr); \n        end\n`endif\n\n\n\n\n\nalways @ ( posedge i_clk )\n    begin\n    if ( rx_fifo_pop  && !rx_fifo_push && rx_fifo_empty )\n        begin\n        `TB_WARNING_MESSAGE\n        $write(\"UART rx FIFO underflow\\n\");\n        end\n    if ( !rx_fifo_pop  && rx_fifo_push && rx_fifo_full )\n        begin\n        `TB_WARNING_MESSAGE\n        $write(\"UART rx FIFO overflow\\n\");\n        end\n\n    if ( tx_fifo_push && tx_fifo_full )\n        begin\n        `TB_WARNING_MESSAGE\n        $display(\"UART tx FIFO overflow - char = %c\", wb_wdata32[7:0]);\n        end\n    end\n\n\n\n\n\n\nwire    [(10*8)-1:0]    xTXD_STATE;\nwire    [(14*8)-1:0]    xRXD_STATE;\n\n \nassign xTXD_STATE      = txd_state == TXD_IDLE       ? \"TXD_IDLE\"   :\n                         txd_state == TXD_START      ? \"TXD_START\"  :\n                         txd_state == TXD_DATA0      ? \"TXD_DATA0\"  :\n                         txd_state == TXD_DATA1      ? \"TXD_DATA1\"  :\n                         txd_state == TXD_DATA2      ? \"TXD_DATA2\"  :\n                         txd_state == TXD_DATA3      ? \"TXD_DATA3\"  :\n                         txd_state == TXD_DATA4      ? \"TXD_DATA4\"  :\n                         txd_state == TXD_DATA5      ? \"TXD_DATA5\"  :\n                         txd_state == TXD_DATA6      ? \"TXD_DATA6\"  :\n                         txd_state == TXD_DATA7      ? \"TXD_DATA7\"  :\n                         txd_state == TXD_STOP1      ? \"TXD_STOP1\"  :\n                         txd_state == TXD_STOP2      ? \"TXD_STOP2\"  :\n                         txd_state == TXD_STOP3      ? \"TXD_STOP3\"  :\n                                                       \"UNKNOWN\"    ;\n\nassign xRXD_STATE      = rxd_state == RXD_IDLE       ? \"RXD_IDLE\"      :\n                         rxd_state == RXD_START      ? \"RXD_START\"     :\n                         rxd_state == RXD_START_MID1 ? \"RXD_START_MID1\":\n                         rxd_state == RXD_START_MID  ? \"RXD_START_MID\" :\n                         rxd_state == RXD_DATA0      ? \"RXD_DATA0\"     :\n                         rxd_state == RXD_DATA1      ? \"RXD_DATA1\"     :\n                         rxd_state == RXD_DATA2      ? \"RXD_DATA2\"     :\n                         rxd_state == RXD_DATA3      ? \"RXD_DATA3\"     :\n                         rxd_state == RXD_DATA4      ? \"RXD_DATA4\"     :\n                         rxd_state == RXD_DATA5      ? \"RXD_DATA5\"     :\n                         rxd_state == RXD_DATA6      ? \"RXD_DATA6\"     :\n                         rxd_state == RXD_DATA7      ? \"RXD_DATA7\"     :\n                         rxd_state == RXD_STOP       ? \"RXD_STOP\"      :\n                                                       \"UNKNOWN\"       ;\n\n\n\n\nendmodule\n\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: uart. Module specification: This module implements a UART (Universal Asynchronous Receiver/Transmitter) interface with configurable baud rates, FIFO buffers, and Wishbone interface support. It handles both transmitting and receiving data serially, with features including interrupt generation, flow control (CTS/RTS), and configurable parameters like data bits and stop bits. The module has input ports for clock, Wishbone interface signals, UART CTS, and RXD, and output ports for Wishbone interface responses, UART interrupt, TXD, and RTS. Internal signals manage FIFO operations, transmit and receive state machines, and various control registers. The code is organized into sections for FIFO management, transmit and receive operations, register access, and interrupt handling. It supports both FIFO and non-FIFO modes, implements transmit and receive state machines, and includes"
                }
            ]
        }
    ]
}