{
    "spec": "Module name: mcb_raw_wrapper. Module specification: This module is a wrapper for a Memory Controller Block (MCB) that interfaces with various types of DRAM (DDR, DDR2, DDR3, LPDDR). It handles the configuration and control of memory operations, including address and data management, command generation, and I/O buffer instantiation. The module supports different port configurations and memory widths, and includes features such as calibration, DQS (data strobe) management, and various timing parameters. Key input ports include clock signals (sysclk_2x, sysclk_2x_180), control signals (pll_ce_0, pll_ce_90, pll_lock, sys_rst), and multiple port-specific inputs for commands, data, and control. Output ports include memory interface signals (mcbx_dram_addr, mcbx_dram_",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: mcb_raw_wrapper\n\nExplanation: This module is a wrapper for a Memory Controller Block (MCB) that interfaces with various types of DRAM (DDR, DDR2, DDR3, LPDDR). It handles the configuration and control of memory operations, including address and data management, command generation, and I/O buffer instantiation. The module supports different port configurations and memory widths, and includes features such as calibration, DQS (data strobe) management, and various timing parameters. It acts as an intermediary between the user interface and the physical memory, managing the complex timing and signaling requirements of DRAM interfaces."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nsysclk_2x, sysclk_2x_180, pll_ce_0, pll_ce_90, pll_lock, sys_rst, p0_arb_en, p0_cmd_clk, p0_cmd_en, p0_cmd_instr, p0_cmd_bl, p0_cmd_byte_addr, p0_wr_clk, p0_wr_en, p0_wr_mask, p0_wr_data, p0_rd_clk, p0_rd_en, p1_arb_en, p1_cmd_clk, p1_cmd_en, p1_cmd_instr, p1_cmd_bl, p1_cmd_byte_addr, p1_wr_clk, p1_wr_en, p1_wr_mask, p1_wr_data, p1_rd_clk, p1_rd_en, p2_arb_en, p2_cmd_clk, p2_cmd_en, p2_cmd_instr, p2_cmd_bl, p2_cmd_byte_addr, p2_wr_clk, p2_wr_en, p2_wr_mask, p2_wr_data, p2_rd_clk, p2_rd_en, p3_arb_en, p3_cmd_clk, p3_cmd_en, p3_cmd_instr, p3_cmd_bl, p3_cmd_byte_addr, p3_wr_clk, p3_wr_en, p3_wr_mask, p3_wr_data, p3_rd_clk, p3_rd_en, p4_arb_en, p4_cmd_clk, p4_cmd_en, p4_cmd_instr, p4_cmd_bl, p4_cmd_byte_addr, p4_wr_clk, p4_wr_en, p4_wr_mask, p4_wr_data, p4_rd_clk, p4_rd_en, p5_arb_en, p5_cmd_clk, p5_cmd_en, p5_cmd_instr, p5_cmd_bl, p5_cmd_byte_addr, p5_wr_clk, p5_wr_en, p5_wr_mask, p5_wr_data, p5_rd_clk, p5_rd_en, calib_recal, ui_read, ui_add, ui_cs, ui_clk, ui_sdi, ui_addr, ui_broadcast, ui_drp_update, ui_done_cal, ui_cmd, ui_cmd_in, ui_cmd_en, ui_dqcount, ui_dq_lower_dec, ui_dq_lower_inc, ui_dq_upper_dec, ui_dq_upper_inc, ui_udqs_inc, ui_udqs_dec, ui_ldqs_inc, ui_ldqs_dec, selfrefresh_enter.\n\nExplanation: These inputs include clock signals, control signals, command inputs, data inputs, and configuration inputs for multiple ports (p0 to p5) of the memory controller. They control the operation, timing, and data flow of the memory interface.\n\nOutput ports:\np0_cmd_empty, p0_cmd_full, p0_wr_full, p0_wr_empty, p0_wr_count, p0_wr_underrun, p0_wr_error, p0_rd_data, p0_rd_full, p0_rd_empty, p0_rd_count, p0_rd_overflow, p0_rd_error, p1_cmd_empty, p1_cmd_full, p1_wr_full, p1_wr_empty, p1_wr_count, p1_wr_underrun, p1_wr_error, p1_rd_data, p1_rd_full, p1_rd_empty, p1_rd_count, p1_rd_overflow, p1_rd_error, p2_cmd_empty, p2_cmd_full, p2_wr_full, p2_wr_empty, p2_wr_count, p2_wr_underrun, p2_wr_error, p2_rd_data, p2_rd_full, p2_rd_empty, p2_rd_count, p2_rd_overflow, p2_rd_error, p3_cmd_empty, p3_cmd_full, p3_wr_full, p3_wr_empty, p3_wr_count, p3_wr_underrun, p3_wr_error, p3_rd_data, p3_rd_full, p3_rd_empty, p3_rd_count, p3_rd_overflow, p3_rd_error, p4_cmd_empty, p4_cmd_full, p4_wr_full, p4_wr_empty, p4_wr_count, p4_wr_underrun, p4_wr_error, p4_rd_data, p4_rd_full, p4_rd_empty, p4_rd_count, p4_rd_overflow, p4_rd_error, p5_cmd_empty, p5_cmd_full, p5_wr_full, p5_wr_empty, p5_wr_count, p5_wr_underrun, p5_wr_error, p5_rd_data, p5_rd_full, p5_rd_empty, p5_rd_count, p5_rd_overflow, p5_rd_error, mcbx_dram_addr, mcbx_dram_ba, mcbx_dram_ras_n, mcbx_dram_cas_n, mcbx_dram_we_n, mcbx_dram_cke, mcbx_dram_clk, mcbx_dram_clk_n, mcbx_dram_dq, mcbx_dram_dqs, mcbx_dram_dqs_n, mcbx_dram_udqs, mcbx_dram_udqs_n, mcbx_dram_udm, mcbx_dram_ldm, mcbx_dram_odt, mcbx_dram_ddr3_rst, uo_data, uo_data_valid, uo_done_cal, uo_cmd_ready_in, uo_refrsh_flag, uo_cal_start, uo_sdo, status, selfrefresh_mode.\n\nExplanation: These outputs provide status information, data output, and control signals for the memory interface. They include command status, write/read status, data output, and various control signals for the DRAM interface. The outputs are organized for multiple ports (p0 to p5) and include signals for the physical memory interface (mcbx_dram_*)."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code for the mcb_raw_wrapper module, here are the key internal signals and their explanations:\n\nInternal signals: allzero, MCB_SYSRST, ioclk0, ioclk90, mcb_ui_clk, hard_done_cal, cke_train, ioi_drp_update, aux_sdi_sdo, mcb_ui_addr, mcb_ui_dqcount, syn_uiclk_pll_lock, int_sys_rst, selfrefresh_enter_r1, selfrefresh_enter_r2, selfrefresh_enter_r3, gated_pll_lock, soft_cal_selfrefresh_req, wait_200us_counter, cke_train_reg, wait_200us_done_r1, wait_200us_done_r2, normal_operation_window.\n\nExplanation:\n1. allzero: A 128-bit register initialized to zero, used for padding and default values.\n2. MCB_SYSRST: System reset signal for the Memory Controller Block.\n3. ioclk0, ioclk90: I/O clocks at 0 and 90 degrees phase shift.\n4. mcb_ui_clk: User interface clock for the Memory Controller Block.\n5. hard_done_cal: Signal indicating completion of hard calibration.\n6. cke_train: Clock enable training signal.\n7. ioi_drp_update: I/O interface DRP (Dynamic Reconfiguration Port) update signal.\n8. aux_sdi_sdo: Auxiliary serial data input/output signals.\n9. mcb_ui_addr, mcb_ui_dqcount: User interface address and DQ count signals.\n10. syn_uiclk_pll_lock: Synchronized PLL lock signal.\n11. int_sys_rst: Internal system reset signal.\n12. selfrefresh_enter_r1/r2/r3: Self-refresh entry request signals (registered versions).\n13. gated_pll_lock: Gated PLL lock signal.\n14. soft_cal_selfrefresh_req: Soft calibration self-refresh request signal.\n15. wait_200us_counter: Counter for 200\u03bcs wait period.\n16. cke_train_reg: Registered version of cke_train signal.\n17. wait_200us_done_r1/r2: Signals indicating completion of 200\u03bcs wait period.\n18. normal_operation_window: Signal indicating normal operation mode.\n\nThese internal signals are used for various control, timing, and synchronization purposes within the memory controller wrapper, managing aspects such as resets, clocking, calibration, and self-refresh operations."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`define DEBUG\n`timescale 1ps / 1ps\n\nmodule mcb_raw_wrapper #\n \n (\n\nparameter  C_MEMCLK_PERIOD          = 2500,       \nparameter  C_PORT_ENABLE            = 6'b111111,    \n                                                  \n\nparameter  C_MEM_ADDR_ORDER             = \"BANK_ROW_COLUMN\" , \n\n\nparameter C_USR_INTERFACE_MODE       = \"NATIVE\", \n                                               \n                                               \n\n\n\n\n\n\n\nparameter  C_ARB_NUM_TIME_SLOTS     = 12,                      \nparameter  C_ARB_TIME_SLOT_0        = 18'o012345,               \nparameter  C_ARB_TIME_SLOT_1        = 18'o123450,               \nparameter  C_ARB_TIME_SLOT_2        = 18'o234501,               \nparameter  C_ARB_TIME_SLOT_3        = 18'o345012,               \nparameter  C_ARB_TIME_SLOT_4        = 18'o450123,               \nparameter  C_ARB_TIME_SLOT_5        = 18'o501234,             \nparameter  C_ARB_TIME_SLOT_6        = 18'o012345,             \nparameter  C_ARB_TIME_SLOT_7        = 18'o123450,             \nparameter  C_ARB_TIME_SLOT_8        = 18'o234501,             \nparameter  C_ARB_TIME_SLOT_9        = 18'o345012,             \nparameter  C_ARB_TIME_SLOT_10       = 18'o450123,             \nparameter  C_ARB_TIME_SLOT_11       = 18'o501234,             \n                                                               \n                                                               \n                                                               \n                                                               \n                                                               \n                                                               \nparameter  C_PORT_CONFIG               =  \"B128\",     \n\n\n\n\nparameter  C_MEM_TRAS              =   45000,            \nparameter  C_MEM_TRCD               =   12500,            \nparameter  C_MEM_TREFI              =   7800,             \nparameter  C_MEM_TRFC               =   127500,           \nparameter  C_MEM_TRP                =   12500,            \nparameter  C_MEM_TWR                =   15000,            \nparameter  C_MEM_TRTP               =   7500,             \nparameter  C_MEM_TWTR               =   7500,\n\nparameter  C_NUM_DQ_PINS               =  8,                   \nparameter  C_MEM_TYPE                  =  \"DDR3\",  \nparameter  C_MEM_DENSITY               =  \"512M\",\nparameter  C_MEM_BURST_LEN             =  8,       \n                                                   \n                                                   \n                                                   \n                                                   \n                                                   \n                                                   \n                                                   \n                                                                                           \n                                               \n                                                              \nparameter  C_MEM_CAS_LATENCY           =  4,\nparameter  C_MEM_ADDR_WIDTH            =  13,    \nparameter  C_MEM_BANKADDR_WIDTH        =  3,     \nparameter  C_MEM_NUM_COL_BITS          =  11,    \n\nparameter  C_MEM_DDR3_CAS_LATENCY      = 7,   \nparameter  C_MEM_MOBILE_PA_SR          = \"FULL\",  \nparameter  C_MEM_DDR1_2_ODS            = \"FULL\",  \nparameter  C_MEM_DDR3_ODS              = \"DIV6\",   \nparameter  C_MEM_DDR2_RTT              = \"50OHMS\",    \nparameter  C_MEM_DDR3_RTT              =  \"DIV2\",  \nparameter  C_MEM_MDDR_ODS              =  \"FULL\",   \n\nparameter  C_MEM_DDR2_DIFF_DQS_EN      =  \"YES\", \nparameter  C_MEM_DDR2_3_PA_SR          =  \"OFF\",  \nparameter  C_MEM_DDR3_CAS_WR_LATENCY   =   5,        \n                                                     \n                                                     \n                                                     \n                                                     \n\nparameter  C_MEM_DDR3_AUTO_SR         =  \"ENABLED\",\nparameter  C_MEM_DDR2_3_HIGH_TEMP_SR  =  \"NORMAL\",\nparameter  C_MEM_DDR3_DYN_WRT_ODT     =  \"OFF\",\nparameter  C_MEM_TZQINIT_MAXCNT       = 10'd512,  \n\n\nparameter  C_MC_CALIB_BYPASS        = \"NO\",\nparameter  C_MC_CALIBRATION_RA      = 15'h0000,\nparameter  C_MC_CALIBRATION_BA      = 3'h0,\n\nparameter C_CALIB_SOFT_IP           = \"TRUE\",\nparameter C_SKIP_IN_TERM_CAL = 1'b0,     \nparameter C_SKIP_DYNAMIC_CAL = 1'b0,     \nparameter C_SKIP_DYN_IN_TERM = 1'b1,     \nparameter C_SIMULATION       = \"FALSE\",  \n\n\n\n\n\nparameter LDQSP_TAP_DELAY_VAL  = 0,  \nparameter UDQSP_TAP_DELAY_VAL  = 0,  \nparameter LDQSN_TAP_DELAY_VAL  = 0,  \nparameter UDQSN_TAP_DELAY_VAL  = 0,  \nparameter DQ0_TAP_DELAY_VAL  = 0,  \nparameter DQ1_TAP_DELAY_VAL  = 0,  \nparameter DQ2_TAP_DELAY_VAL  = 0,  \nparameter DQ3_TAP_DELAY_VAL  = 0,  \nparameter DQ4_TAP_DELAY_VAL  = 0,  \nparameter DQ5_TAP_DELAY_VAL  = 0,  \nparameter DQ6_TAP_DELAY_VAL  = 0,  \nparameter DQ7_TAP_DELAY_VAL  = 0,  \nparameter DQ8_TAP_DELAY_VAL  = 0,  \nparameter DQ9_TAP_DELAY_VAL  = 0,  \nparameter DQ10_TAP_DELAY_VAL = 0,  \nparameter DQ11_TAP_DELAY_VAL = 0,  \nparameter DQ12_TAP_DELAY_VAL = 0,  \nparameter DQ13_TAP_DELAY_VAL = 0,  \nparameter DQ14_TAP_DELAY_VAL = 0,  \nparameter DQ15_TAP_DELAY_VAL = 0,  \n\n\nparameter  C_MC_CALIBRATION_CA      = 12'h000,\nparameter  C_MC_CALIBRATION_CLK_DIV     = 1,\nparameter  C_MC_CALIBRATION_MODE    = \"CALIBRATION\"     ,   \nparameter  C_MC_CALIBRATION_DELAY   = \"HALF\",   \n\nparameter C_P0_MASK_SIZE           = 4,\nparameter C_P0_DATA_PORT_SIZE      = 32,\nparameter C_P1_MASK_SIZE           = 4,\nparameter C_P1_DATA_PORT_SIZE         = 32\n\n    )\n  (\n  \n      \n      \n      input sysclk_2x,                         \n      input sysclk_2x_180,                      \n      input pll_ce_0,\n      input pll_ce_90,\n      input pll_lock,                          \n      input sys_rst,                         \n      \n\n\n\n\n\n\n      \n      \n      \n\n      input             p0_arb_en,\n      input             p0_cmd_clk,\n      input             p0_cmd_en,\n      input [2:0]       p0_cmd_instr,\n      input [5:0]       p0_cmd_bl,\n      input [29:0]      p0_cmd_byte_addr,\n      output            p0_cmd_empty,\n      output            p0_cmd_full,\n\n      \n      \n      \n      \n      \n      \n      \n      input             p0_wr_clk,\n      input             p0_wr_en,\n      input [C_P0_MASK_SIZE - 1:0]      p0_wr_mask,\n      input [C_P0_DATA_PORT_SIZE - 1:0] p0_wr_data,\n      output            p0_wr_full,        \n      output            p0_wr_empty,\n      output [6:0]      p0_wr_count,\n      output            p0_wr_underrun,\n      output            p0_wr_error,\n\n      \n      \n      \n      \n      \n      \n      \n      input             p0_rd_clk,\n      input             p0_rd_en,\n      output [C_P0_DATA_PORT_SIZE - 1:0]        p0_rd_data,\n      output            p0_rd_full,\n      output            p0_rd_empty,\n      output [6:0]      p0_rd_count,\n      output            p0_rd_overflow,\n      output            p0_rd_error,\n\n      \n      \n      \n      \n\n      input             p1_arb_en,\n      input             p1_cmd_clk,\n      input             p1_cmd_en,\n      input [2:0]       p1_cmd_instr,\n      input [5:0]       p1_cmd_bl,\n      input [29:0]      p1_cmd_byte_addr,\n      output            p1_cmd_empty,\n      output            p1_cmd_full,\n\n      \n      input             p1_wr_clk,\n      input             p1_wr_en,\n      input [C_P1_MASK_SIZE - 1:0]      p1_wr_mask,\n      input [C_P1_DATA_PORT_SIZE - 1:0] p1_wr_data,\n      output            p1_wr_full,\n      output            p1_wr_empty,\n      output [6:0]      p1_wr_count,\n      output            p1_wr_underrun,\n      output            p1_wr_error,\n\n      \n      input             p1_rd_clk,\n      input             p1_rd_en,\n      output [C_P1_DATA_PORT_SIZE - 1:0]        p1_rd_data,\n      output            p1_rd_full,\n      output            p1_rd_empty,\n      output [6:0]      p1_rd_count,\n      output            p1_rd_overflow,\n      output            p1_rd_error,\n\n      \n      \n      \n      \n      \n      \n\n      input             p2_arb_en,\n      input             p2_cmd_clk,\n      input             p2_cmd_en,\n      input [2:0]       p2_cmd_instr,\n      input [5:0]       p2_cmd_bl,\n      input [29:0]      p2_cmd_byte_addr,\n      output            p2_cmd_empty,\n      output            p2_cmd_full,\n\n      \n      \n      \n      \n      \n      input             p2_wr_clk,\n      input             p2_wr_en,\n      input [3:0]       p2_wr_mask,\n      input [31:0]      p2_wr_data,\n      output            p2_wr_full,\n      output            p2_wr_empty,\n      output [6:0]      p2_wr_count,\n      output            p2_wr_underrun,\n      output            p2_wr_error,\n\n      \n      \n      \n      \n      \n      input             p2_rd_clk,\n      input             p2_rd_en,\n      output [31:0]     p2_rd_data,\n      output            p2_rd_full,\n      output            p2_rd_empty,\n      output [6:0]      p2_rd_count,\n      output            p2_rd_overflow,\n      output            p2_rd_error,\n\n      \n      \n      \n      \n\n      input             p3_arb_en,\n      input             p3_cmd_clk,\n      input             p3_cmd_en,\n      input [2:0]       p3_cmd_instr,\n      input [5:0]       p3_cmd_bl,\n      input [29:0]      p3_cmd_byte_addr,\n      output            p3_cmd_empty,\n      output            p3_cmd_full,\n\n      \n      \n      \n      \n      input             p3_wr_clk,\n      input             p3_wr_en,\n      input [3:0]       p3_wr_mask,\n      input [31:0]      p3_wr_data,\n      output            p3_wr_full,\n      output            p3_wr_empty,\n      output [6:0]      p3_wr_count,\n      output            p3_wr_underrun,\n      output            p3_wr_error,\n\n      \n      \n      \n      \n      input             p3_rd_clk,\n      input             p3_rd_en,\n      output [31:0]     p3_rd_data,\n      output            p3_rd_full,\n      output            p3_rd_empty,\n      output [6:0]      p3_rd_count,\n      output            p3_rd_overflow,\n      output            p3_rd_error,\n      \n      \n      \n      \n\n      input             p4_arb_en,\n      input             p4_cmd_clk,\n      input             p4_cmd_en,\n      input [2:0]       p4_cmd_instr,\n      input [5:0]       p4_cmd_bl,\n      input [29:0]      p4_cmd_byte_addr,\n      output            p4_cmd_empty,\n      output            p4_cmd_full,\n\n      \n      \n      \n      input             p4_wr_clk,\n      input             p4_wr_en,\n      input [3:0]       p4_wr_mask,\n      input [31:0]      p4_wr_data,\n      output            p4_wr_full,\n      output            p4_wr_empty,\n      output [6:0]      p4_wr_count,\n      output            p4_wr_underrun,\n      output            p4_wr_error,\n\n      \n      \n      \n      input             p4_rd_clk,\n      input             p4_rd_en,\n      output [31:0]     p4_rd_data,\n      output            p4_rd_full,\n      output            p4_rd_empty,\n      output [6:0]      p4_rd_count,\n      output            p4_rd_overflow,\n      output            p4_rd_error,\n\n\n      \n      \n      \n\n      input             p5_arb_en,\n      input             p5_cmd_clk,\n      input             p5_cmd_en,\n      input [2:0]       p5_cmd_instr,\n      input [5:0]       p5_cmd_bl,\n      input [29:0]      p5_cmd_byte_addr,\n      output            p5_cmd_empty,\n      output            p5_cmd_full,\n\n      \n      input             p5_wr_clk,\n      input             p5_wr_en,\n      input [3:0]       p5_wr_mask,\n      input [31:0]      p5_wr_data,\n      output            p5_wr_full,\n      output            p5_wr_empty,\n      output [6:0]      p5_wr_count,\n      output            p5_wr_underrun,\n      output            p5_wr_error,\n\n      \n      input             p5_rd_clk,\n      input             p5_rd_en,\n      output [31:0]     p5_rd_data,\n      output            p5_rd_full,\n      output            p5_rd_empty,\n      output [6:0]      p5_rd_count,\n      output            p5_rd_overflow,\n      output            p5_rd_error,\n      \n\n      \n      output [C_MEM_ADDR_WIDTH-1:0]     mcbx_dram_addr,  \n      output [C_MEM_BANKADDR_WIDTH-1:0] mcbx_dram_ba,\n      output                            mcbx_dram_ras_n,                        \n      output                            mcbx_dram_cas_n,                        \n      output                            mcbx_dram_we_n,                         \n                                      \n      output                            mcbx_dram_cke,                          \n      output                            mcbx_dram_clk,                          \n      output                            mcbx_dram_clk_n,                        \n      inout [C_NUM_DQ_PINS-1:0]         mcbx_dram_dq,              \n      inout                             mcbx_dram_dqs,                          \n      inout                             mcbx_dram_dqs_n,                        \n      inout                             mcbx_dram_udqs,                         \n      inout                             mcbx_dram_udqs_n,                       \n      \n      output                            mcbx_dram_udm,                          \n      output                            mcbx_dram_ldm,                          \n      output                            mcbx_dram_odt,                          \n      output                            mcbx_dram_ddr3_rst,                     \n      \n      input calib_recal,              \n     \n                                \n                                \n   \n   \n                                \n      inout                             rzq,           \n      inout                             zio,           \n      \n      \n      input                             ui_read,\n      input                             ui_add,\n      input                             ui_cs,\n      input                             ui_clk,\n      input                             ui_sdi,\n      input     [4:0]                   ui_addr,\n      input                             ui_broadcast,\n      input                             ui_drp_update,\n      input                             ui_done_cal,\n      input                             ui_cmd,\n      input                             ui_cmd_in,\n      input                             ui_cmd_en,\n      input     [3:0]                   ui_dqcount,\n      input                             ui_dq_lower_dec,\n      input                             ui_dq_lower_inc,\n      input                             ui_dq_upper_dec,\n      input                             ui_dq_upper_inc,\n      input                             ui_udqs_inc,\n      input                             ui_udqs_dec,\n      input                             ui_ldqs_inc,\n      input                             ui_ldqs_dec,\n      output     [7:0]                  uo_data,\n      output                            uo_data_valid,\n      output                            uo_done_cal,\n      output                            uo_cmd_ready_in,\n      output                            uo_refrsh_flag,\n      output                            uo_cal_start,\n      output                            uo_sdo,\n      output   [31:0]                   status,\n      input                             selfrefresh_enter,              \n      output                            selfrefresh_mode\n         );\n  function integer cdiv (input integer num,\n                         input integer div); \n    begin\n      cdiv = (num/div) + (((num%div)>0) ? 1 : 0);\n    end\n  endfunction \n\n\nlocalparam C_OSERDES2_DATA_RATE_OQ = \"SDR\";           \nlocalparam C_OSERDES2_DATA_RATE_OT = \"SDR\";           \nlocalparam C_OSERDES2_SERDES_MODE_MASTER  = \"MASTER\";        \nlocalparam C_OSERDES2_SERDES_MODE_SLAVE   = \"SLAVE\";        \nlocalparam C_OSERDES2_OUTPUT_MODE_SE      = \"SINGLE_ENDED\";   \nlocalparam C_OSERDES2_OUTPUT_MODE_DIFF    = \"DIFFERENTIAL\";\n \nlocalparam C_BUFPLL_0_LOCK_SRC       = \"LOCK_TO_0\";\n\nlocalparam C_DQ_IODRP2_DATA_RATE             = \"SDR\";\nlocalparam C_DQ_IODRP2_SERDES_MODE_MASTER    = \"MASTER\";\nlocalparam C_DQ_IODRP2_SERDES_MODE_SLAVE     = \"SLAVE\";\n\nlocalparam C_DQS_IODRP2_DATA_RATE             = \"SDR\";\nlocalparam C_DQS_IODRP2_SERDES_MODE_MASTER    = \"MASTER\";\nlocalparam C_DQS_IODRP2_SERDES_MODE_SLAVE     = \"SLAVE\";\n\n\n\n     \n\n\n\nlocalparam  C_MEM_DDR3_ADD_LATENCY      =  \"OFF\";\nlocalparam  C_MEM_DDR2_ADD_LATENCY      =  0; \nlocalparam  C_MEM_MOBILE_TC_SR          =  0; \n\n     \n\n                                              \n                                              \n                                              \n                                         \n   \n   \n   \n\n\n\nlocalparam arbtimeslot0   = {C_ARB_TIME_SLOT_0   };\nlocalparam arbtimeslot1   = {C_ARB_TIME_SLOT_1   };\nlocalparam arbtimeslot2   = {C_ARB_TIME_SLOT_2   };\nlocalparam arbtimeslot3   = {C_ARB_TIME_SLOT_3   };\nlocalparam arbtimeslot4   = {C_ARB_TIME_SLOT_4   };\nlocalparam arbtimeslot5   = {C_ARB_TIME_SLOT_5   };\nlocalparam arbtimeslot6   = {C_ARB_TIME_SLOT_6   };\nlocalparam arbtimeslot7   = {C_ARB_TIME_SLOT_7   };\nlocalparam arbtimeslot8   = {C_ARB_TIME_SLOT_8   };\nlocalparam arbtimeslot9   = {C_ARB_TIME_SLOT_9   };\nlocalparam arbtimeslot10  = {C_ARB_TIME_SLOT_10  };\nlocalparam arbtimeslot11  = {C_ARB_TIME_SLOT_11  };\n\n\n\nlocalparam MEM_RAS_VAL  = ((C_MEM_TRAS + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_RCD_VAL  = ((C_MEM_TRCD  + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_REFI_VAL = ((C_MEM_TREFI + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD) - 25;\nlocalparam MEM_RFC_VAL  = ((C_MEM_TRFC  + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_RP_VAL   = ((C_MEM_TRP   + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_WR_VAL   = ((C_MEM_TWR   + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_RTP_CK    = cdiv(C_MEM_TRTP,C_MEMCLK_PERIOD);\nlocalparam MEM_RTP_VAL = (C_MEM_TYPE == \"DDR3\") ? (MEM_RTP_CK < 4) ? 4 : MEM_RTP_CK\n                                               : (MEM_RTP_CK < 2) ? 2 : MEM_RTP_CK;\nlocalparam MEM_WTR_VAL  = (C_MEM_TYPE == \"DDR\")   ? 2 :\n                          (C_MEM_TYPE == \"DDR3\")  ? 4 : \n                          (C_MEM_TYPE == \"MDDR\")  ? C_MEM_TWTR : \n                          (C_MEM_TYPE == \"LPDDR\")  ? C_MEM_TWTR : \n                          ((C_MEM_TYPE == \"DDR2\") && (((C_MEM_TWTR  + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD) > 2)) ? ((C_MEM_TWTR  + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD) : \n                          (C_MEM_TYPE == \"DDR2\")  ? 2 \n                                                  : 3 ;\nlocalparam  C_MEM_DDR2_WRT_RECOVERY = (C_MEM_TYPE != \"DDR2\") ? 5: ((C_MEM_TWR   + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam  C_MEM_DDR3_WRT_RECOVERY = (C_MEM_TYPE != \"DDR3\") ? 5: ((C_MEM_TWR   + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\n\n\n\n\n\n\n\n\n\n\n\n\nwire [31:0]  addr_in0;\nreg [127:0]  allzero = 0;\n\n\n\n\nwire       dqs_out_p;              \nwire       dqs_out_n;              \n\nwire       dqs_sys_p;              \nwire       dqs_sys_n;              \nwire       udqs_sys_p;\nwire       udqs_sys_n;\n\nwire       dqs_p;                  \nwire       dqs_n;                  \n\n\n\n\nwire dqIO_w_en_0;                \nwire dqsIO_w_en_90_p;            \nwire dqsIO_w_en_90_n;            \n\n\n\nwire [14:0]   address_90;\nwire [2:0]    ba_90;     \nwire          ras_90;\nwire          cas_90;\nwire          we_90 ;\nwire          cke_90;\nwire          odt_90;\nwire          rst_90;\n\n\nwire          ioi_drp_clk;          \nwire  [4:0]   ioi_drp_addr;         \nwire          ioi_drp_sdo;          \nwire          ioi_drp_sdi;          \nwire          ioi_drp_cs;           \nwire          ioi_drp_add;          \nwire          ioi_drp_broadcast;  \nwire          ioi_drp_train;    \n\n\n   \n   \nwire  [3:0]dqdonecount; \nwire  dq_in_p;          \nwire  dq_in_n;          \nwire  cal_done;   \n   \n\n\nwire       udqs_n;\nwire       udqs_p;\n\n\nwire            udqs_dqocal_p;\nwire            udqs_dqocal_n;\n\n\n\nwire df_en_n90  ;\n\n\n\nwire ioi_int_tmp;\n\nwire [15:0]dqo_n;  \nwire [15:0]dqo_p;  \nwire dqnlm;      \nwire dqplm;      \nwire dqnum;      \nwire dqpum;      \n\n\n\nwire  [C_MEM_ADDR_WIDTH-1:0]ioi_addr; \nwire  [C_MEM_BANKADDR_WIDTH-1:0]ioi_ba;    \nwire  ioi_cas;   \nwire  ioi_ck;    \nwire  ioi_ckn;    \nwire  ioi_cke;   \nwire  [C_NUM_DQ_PINS-1:0]ioi_dq; \nwire  ioi_dqs;   \nwire  ioi_dqsn;\nwire  ioi_udqs;\nwire  ioi_udqsn;   \nwire  ioi_odt;   \nwire  ioi_ras;   \nwire  ioi_rst;   \nwire  ioi_we;   \nwire  ioi_udm;\nwire  ioi_ldm;\n\nwire  [15:0] in_dq;\nwire  [C_NUM_DQ_PINS-1:0] in_pre_dq;\n\n\n\nwire            in_dqs;     \nwire            in_pre_dqsp;\nwire            in_pre_dqsn;\nwire            in_pre_udqsp;\nwire            in_pre_udqsn;\nwire            in_udqs;\n     \nwire  [C_MEM_ADDR_WIDTH-1:0]t_addr; \nwire  [C_MEM_BANKADDR_WIDTH-1:0]t_ba;    \nwire  t_cas;\nwire  t_ck ;\nwire  t_ckn;\nwire  t_cke;\nwire  [C_NUM_DQ_PINS-1:0]t_dq;\nwire  t_dqs;     \nwire  t_dqsn;\nwire  t_udqs;\nwire  t_udqsn;\nwire  t_odt;     \nwire  t_ras;     \nwire  t_rst;     \nwire  t_we ;     \n\n\nwire  t_udm  ;\nwire  t_ldm  ;\n\n\n\nwire             idelay_dqs_ioi_s;\nwire             idelay_dqs_ioi_m;\nwire             idelay_udqs_ioi_s;\nwire             idelay_udqs_ioi_m;\n\n\nwire  dqs_pin;\nwire  udqs_pin;\n\n\n\n\n\nwire [14:0]p0_cmd_ra;\nwire [2:0]p0_cmd_ba; \nwire [11:0]p0_cmd_ca;\nwire [14:0]p1_cmd_ra;\nwire [2:0]p1_cmd_ba; \nwire [11:0]p1_cmd_ca;\nwire [14:0]p2_cmd_ra;\nwire [2:0]p2_cmd_ba; \nwire [11:0]p2_cmd_ca;\nwire [14:0]p3_cmd_ra;\nwire [2:0]p3_cmd_ba; \nwire [11:0]p3_cmd_ca;\nwire [14:0]p4_cmd_ra;\nwire [2:0]p4_cmd_ba; \nwire [11:0]p4_cmd_ca;\nwire [14:0]p5_cmd_ra;\nwire [2:0]p5_cmd_ba; \nwire [11:0]p5_cmd_ca;\n\n   \nwire        mig_p0_arb_en;   \nwire        mig_p0_cmd_clk;    \nwire        mig_p0_cmd_en;     \nwire [14:0] mig_p0_cmd_ra;     \nwire [2:0]  mig_p0_cmd_ba;     \nwire [11:0] mig_p0_cmd_ca;     \n\nwire [2:0]  mig_p0_cmd_instr;   \nwire [5:0]  mig_p0_cmd_bl;      \nwire        mig_p0_cmd_empty;   \nwire        mig_p0_cmd_full;    \n\n\nwire        mig_p1_arb_en;   \nwire        mig_p1_cmd_clk;    \nwire        mig_p1_cmd_en;     \nwire [14:0] mig_p1_cmd_ra;     \nwire [2:0] mig_p1_cmd_ba;     \nwire [11:0] mig_p1_cmd_ca;     \n\nwire [2:0]  mig_p1_cmd_instr;   \nwire [5:0]  mig_p1_cmd_bl;      \nwire        mig_p1_cmd_empty;   \nwire        mig_p1_cmd_full;    \n\nwire        mig_p2_arb_en;   \nwire        mig_p2_cmd_clk;    \nwire        mig_p2_cmd_en;     \nwire [14:0] mig_p2_cmd_ra;     \nwire [2:0] mig_p2_cmd_ba;     \nwire [11:0] mig_p2_cmd_ca;     \n                  \nwire [2:0]  mig_p2_cmd_instr;   \nwire [5:0]  mig_p2_cmd_bl;      \nwire        mig_p2_cmd_empty;   \nwire        mig_p2_cmd_full;    \n\nwire        mig_p3_arb_en;   \nwire        mig_p3_cmd_clk;    \nwire        mig_p3_cmd_en;     \nwire [14:0] mig_p3_cmd_ra;     \nwire [2:0] mig_p3_cmd_ba;     \nwire [11:0] mig_p3_cmd_ca;     \n\nwire [2:0]  mig_p3_cmd_instr;   \nwire [5:0]  mig_p3_cmd_bl;      \nwire        mig_p3_cmd_empty;   \nwire        mig_p3_cmd_full;    \n\nwire        mig_p4_arb_en;   \nwire        mig_p4_cmd_clk;    \nwire        mig_p4_cmd_en;     \nwire [14:0] mig_p4_cmd_ra;     \nwire [2:0] mig_p4_cmd_ba;     \nwire [11:0] mig_p4_cmd_ca;     \n\nwire [2:0]  mig_p4_cmd_instr;   \nwire [5:0]  mig_p4_cmd_bl;      \nwire        mig_p4_cmd_empty;   \nwire        mig_p4_cmd_full;    \n\nwire        mig_p5_arb_en;   \nwire        mig_p5_cmd_clk;    \nwire        mig_p5_cmd_en;     \nwire [14:0] mig_p5_cmd_ra;     \nwire [2:0] mig_p5_cmd_ba;     \nwire [11:0] mig_p5_cmd_ca;     \n\nwire [2:0]  mig_p5_cmd_instr;   \nwire [5:0]  mig_p5_cmd_bl;      \nwire        mig_p5_cmd_empty;   \nwire        mig_p5_cmd_full;    \n\nwire        mig_p0_wr_clk;\nwire        mig_p0_rd_clk;\nwire        mig_p1_wr_clk;\nwire        mig_p1_rd_clk;\nwire        mig_p2_clk;\nwire        mig_p3_clk;\nwire        mig_p4_clk;\nwire        mig_p5_clk;\n\nwire       mig_p0_wr_en;\nwire       mig_p0_rd_en;\nwire       mig_p1_wr_en;\nwire       mig_p1_rd_en;\nwire       mig_p2_en;\nwire       mig_p3_en; \nwire       mig_p4_en; \nwire       mig_p5_en; \n\n\nwire [31:0]mig_p0_wr_data;\nwire [31:0]mig_p1_wr_data;\nwire [31:0]mig_p2_wr_data;\nwire [31:0]mig_p3_wr_data;\nwire [31:0]mig_p4_wr_data;\nwire [31:0]mig_p5_wr_data;\n\n\nwire  [C_P0_MASK_SIZE-1:0]mig_p0_wr_mask;\nwire  [C_P1_MASK_SIZE-1:0]mig_p1_wr_mask;\nwire  [3:0]mig_p2_wr_mask;\nwire  [3:0]mig_p3_wr_mask;\nwire  [3:0]mig_p4_wr_mask;\nwire  [3:0]mig_p5_wr_mask;\n\n\nwire  [31:0]mig_p0_rd_data; \nwire  [31:0]mig_p1_rd_data; \nwire  [31:0]mig_p2_rd_data; \nwire  [31:0]mig_p3_rd_data; \nwire  [31:0]mig_p4_rd_data; \nwire  [31:0]mig_p5_rd_data; \n\nwire  mig_p0_rd_overflow;\nwire  mig_p1_rd_overflow;\nwire  mig_p2_overflow;\nwire  mig_p3_overflow;\n\nwire  mig_p4_overflow;\nwire  mig_p5_overflow;\n\nwire  mig_p0_wr_underrun;\nwire  mig_p1_wr_underrun;\nwire  mig_p2_underrun;  \nwire  mig_p3_underrun;  \nwire  mig_p4_underrun;  \nwire  mig_p5_underrun;  \n\nwire       mig_p0_rd_error;\nwire       mig_p0_wr_error;\nwire       mig_p1_rd_error;\nwire       mig_p1_wr_error;\nwire       mig_p2_error;    \nwire       mig_p3_error;    \nwire       mig_p4_error;    \nwire       mig_p5_error;    \n\n\nwire  [6:0]mig_p0_wr_count;\nwire  [6:0]mig_p1_wr_count;\nwire  [6:0]mig_p0_rd_count;\nwire  [6:0]mig_p1_rd_count;\n\nwire  [6:0]mig_p2_count;\nwire  [6:0]mig_p3_count;\nwire  [6:0]mig_p4_count;\nwire  [6:0]mig_p5_count;\n\nwire  mig_p0_wr_full;\nwire  mig_p1_wr_full;\n\nwire mig_p0_rd_empty;\nwire mig_p1_rd_empty;\nwire mig_p0_wr_empty;\nwire mig_p1_wr_empty;\nwire mig_p0_rd_full;\nwire mig_p1_rd_full;\nwire mig_p2_full;\nwire mig_p3_full;\nwire mig_p4_full;\nwire mig_p5_full;\nwire mig_p2_empty;\nwire mig_p3_empty;\nwire mig_p4_empty;\nwire mig_p5_empty;\n\n\nwire selfrefresh_mcb_enter;\nwire selfrefresh_mcb_mode ;\n\nwire           tst_cmd_test_en;\nwire   [7:0]   tst_sel;\nwire   [15:0]  tst_in;\nwire           tst_scan_clk;\nwire           tst_scan_rst;\nwire           tst_scan_set;\nwire           tst_scan_en;\nwire           tst_scan_in;\nwire           tst_scan_mode;\n\nwire           p0w_tst_en;\nwire           p0r_tst_en;\nwire           p1w_tst_en;\nwire           p1r_tst_en;\nwire           p2_tst_en;\nwire           p3_tst_en;\nwire           p4_tst_en;\nwire           p5_tst_en;\n\nwire           p0_tst_wr_clk_en;\nwire           p0_tst_rd_clk_en;\nwire           p1_tst_wr_clk_en;\nwire           p1_tst_rd_clk_en;\nwire           p2_tst_clk_en;\nwire           p3_tst_clk_en;\nwire           p4_tst_clk_en;\nwire           p5_tst_clk_en;\n\nwire   [3:0]   p0w_tst_wr_mode;\nwire   [3:0]   p0r_tst_mode;\nwire   [3:0]   p1w_tst_wr_mode;\nwire   [3:0]   p1r_tst_mode;\nwire   [3:0]   p2_tst_mode;\nwire   [3:0]   p3_tst_mode;\nwire   [3:0]   p4_tst_mode;\nwire   [3:0]   p5_tst_mode;\n\nwire           p0r_tst_pin_en;\nwire           p0w_tst_pin_en;\nwire           p1r_tst_pin_en;\nwire           p1w_tst_pin_en;\nwire           p2_tst_pin_en;\nwire           p3_tst_pin_en;\nwire           p4_tst_pin_en;\nwire           p5_tst_pin_en;\nwire           p0w_tst_overflow;\nwire           p1w_tst_overflow;\n\nwire  [3:0]   p0r_tst_mask_o;\nwire  [3:0]   p0w_tst_mask_o;\nwire  [3:0]   p1r_tst_mask_o;\nwire  [3:0]   p1w_tst_mask_o;\nwire  [3:0]   p2_tst_mask_o;\nwire  [3:0]   p3_tst_mask_o;\nwire  [3:0]   p4_tst_mask_o;\nwire  [3:0]   p5_tst_mask_o;\nwire  [3:0]   p0r_tst_wr_mask;\n\nwire  [3:0]   p1r_tst_wr_mask;\nwire [31:0]  p1r_tst_wr_data;\nwire [31:0]  p0r_tst_wr_data;\nwire [31:0]   p0w_tst_rd_data;\nwire [31:0]   p1w_tst_rd_data;\n\nwire  [38:0]  tst_cmd_out;\nwire           MCB_SYSRST;\nwire ioclk0;\nwire ioclk90;\nwire mcb_ui_clk;                               \nwire hard_done_cal;                                \nwire cke_train;\n\nwire       ioi_drp_update;\nwire [7:0] aux_sdi_sdo;\n\nwire [4:0] mcb_ui_addr;\nwire [3:0] mcb_ui_dqcount;\nreg  syn_uiclk_pll_lock;\nreg syn1_sys_rst, syn2_sys_rst;\n\nwire int_sys_rst ;\n\n\nreg selfrefresh_enter_r1,selfrefresh_enter_r2,selfrefresh_enter_r3;\nreg gated_pll_lock;\t   \nreg soft_cal_selfrefresh_req;\nreg [15:0]    wait_200us_counter;\nreg           cke_train_reg;        \nreg           wait_200us_done_r1,wait_200us_done_r2;\nreg normal_operation_window;\n\nassign ioclk0 = sysclk_2x;\nassign ioclk90 = sysclk_2x_180;\n\n\n\n\nalways @ (posedge ui_clk)\nbegin \nif (sys_rst)   \n   normal_operation_window <= 1'b1;\nelse if (selfrefresh_enter_r2 || selfrefresh_mode)\n   normal_operation_window <= 1'b0;\nelse if (~selfrefresh_enter_r2 && ~selfrefresh_mode)\n   normal_operation_window <= 1'b1;\nelse\n   normal_operation_window <= normal_operation_window;\n\nend   \n\n\nalways @ (*)\nbegin\nif (normal_operation_window)\n   gated_pll_lock = pll_lock;\nelse\n   gated_pll_lock = syn_uiclk_pll_lock;\nend\n\n\n\nalways @ (posedge ui_clk)\nbegin \n  if (~selfrefresh_enter && ~selfrefresh_mode)\n   syn_uiclk_pll_lock <= pll_lock;\n   \nend   \n\n\n\n\nassign int_sys_rst =  sys_rst | ~gated_pll_lock;\n\n\n\n\nalways @ (posedge ui_clk)\nif (sys_rst)\n   begin\n      selfrefresh_enter_r1 <= 1'b0;\n      selfrefresh_enter_r2 <= 1'b0;\n      selfrefresh_enter_r3 <= 1'b0;\n   end\nelse\n   begin\n      selfrefresh_enter_r1 <= selfrefresh_enter;\n      selfrefresh_enter_r2 <= selfrefresh_enter_r1;\n      selfrefresh_enter_r3 <= selfrefresh_enter_r2;\n   end\n\n\n\n\n\n\nalways @ (posedge ui_clk)\nbegin \n  if (sys_rst)\n   soft_cal_selfrefresh_req <= 1'b0;\n  else if (selfrefresh_enter_r3)\n     soft_cal_selfrefresh_req <= 1'b1;\n  else if (~selfrefresh_enter_r3 && pll_lock)\n     soft_cal_selfrefresh_req <= 1'b0;\n  else\n     soft_cal_selfrefresh_req <= soft_cal_selfrefresh_req;\n  \nend   \n\n\n\n\n\n\n\n generate \n\nif(C_NUM_DQ_PINS == 16) begin : x16_Addr\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p0_cmd_ca = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p0_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                \n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p1_cmd_ca = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p1_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS  + 1], p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p2_cmd_ca = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p2_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p3_cmd_ca = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p3_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p4_cmd_ca = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p4_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p5_cmd_ca = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p5_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n\n                \n                \n                end\n                \n          else  \n              begin\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p0_cmd_ca = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p0_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p1_cmd_ca = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p1_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p2_cmd_ca = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p2_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p3_cmd_ca = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p3_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p4_cmd_ca = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p4_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p5_cmd_ca = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p5_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n         \n              end\n       \nend else if(C_NUM_DQ_PINS == 8) begin : x8_Addr\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n                 \n\n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p0_cmd_ca[11:0] = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p0_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                 \n                \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p1_cmd_ca[11:0] = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p1_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                \n                \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p2_cmd_ca[11:0] = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p2_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n\n\n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p3_cmd_ca[11:0] = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p3_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                \n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p4_cmd_ca[11:0] = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p4_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n\n              \n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p5_cmd_ca[11:0] = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p5_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                end\n               \n            else  \n              begin\n                 \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n\n\n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};                \n                                   \n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p0_cmd_ca[11:0] = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p0_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n\n                \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p1_cmd_ca[11:0] = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p1_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                \n               \n                if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                        p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS  ]};  \n      \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p2_cmd_ca[11:0] = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p2_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n              \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p3_cmd_ca[11:0] = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p3_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n   \n   \n                 \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p4_cmd_ca[11:0] = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p4_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n                 \n   \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p5_cmd_ca[11:0] = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p5_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n             \n            end\n\n              \n\nend else if(C_NUM_DQ_PINS == 4) begin : x4_Addr\n\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n\n               \n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p0_cmd_ba =  p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p0_cmd_ca = {p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p0_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n           \n              \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p1_cmd_ba =  p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p1_cmd_ca = {p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p1_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p2_cmd_ba =  p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p2_cmd_ca = {p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p2_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              \n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p3_cmd_ba =  p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p3_cmd_ca = {p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p3_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n \n\n          if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              end\n              \n              \n           end\n         else   \n            begin\n            \n               \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p0_cmd_ba =  p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p0_cmd_ca = {p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p0_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               \n           \n              \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p1_cmd_ba =  p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p1_cmd_ca = {p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p1_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p2_cmd_ba =  p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n             \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p2_cmd_ca = {p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p2_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n              \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p3_cmd_ba =  p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p3_cmd_ca = {p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p3_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n \n\n          if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n              end\n            \n            \n            \n            end\n           \nend \n\n\nendgenerate\n\n\n\ngenerate \n   \n   if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n      ) begin : u_config1_0      \n\n  \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[119:96]  == \"W32\" && p2_cmd_en == 1'b1 \n         && p2_cmd_instr[2] == 1'b0 && p2_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 2\");\n           $finish;\n          end\n  end\n              \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[119:96]  == \"R32\" && p2_cmd_en == 1'b1 \n         && p2_cmd_instr[2] == 1'b0 && p2_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 2\");\n           $finish;\n          end\n  end\n\n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[87:64]  == \"W32\" && p3_cmd_en == 1'b1 \n         && p3_cmd_instr[2] == 1'b0 && p3_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 3\");\n           $finish;\n          end\n  end\n              \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[87:64]  == \"R32\" && p3_cmd_en == 1'b1 \n         && p3_cmd_instr[2] == 1'b0  && p3_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 3\");\n           $finish;\n          end\n  end\n  \n\n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[55:32]  == \"W32\" && p4_cmd_en == 1'b1 \n         && p4_cmd_instr[2] == 1'b0 && p4_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 4\");\n           $finish;\n          end\n  end\n              \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[55:32]  == \"R32\" && p4_cmd_en == 1'b1 \n         && p4_cmd_instr[2] == 1'b0 && p4_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 4\");\n           $finish;\n          end\n  end\n\n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[23:0]  == \"W32\" && p5_cmd_en == 1'b1 \n         && p5_cmd_instr[2] == 1'b0 && p5_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 5\");\n           $finish;\n          end\n  end\n              \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[23:0]  == \"R32\" && p5_cmd_en == 1'b1 \n         && p5_cmd_instr[2] == 1'b0  && p5_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 5\");\n           $finish;\n          end\n  end  \n   \n\n\n  \n  \n  \n  \n\n               \n\n               if (C_PORT_ENABLE[0] == 1'b1)\n               begin\n\n                   assign mig_p0_arb_en      =      p0_arb_en ;\n                   assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                   assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                   assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                   assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                   assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                   assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                   assign mig_p0_cmd_bl      =      {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}  ;\n                   assign p0_cmd_empty       =      mig_p0_cmd_empty;\n                   assign p0_cmd_full        =      mig_p0_cmd_full ;\n                   \n               end else\n               begin\n               \n                   assign mig_p0_arb_en      =     'b0;\n                   assign mig_p0_cmd_clk     =     'b0;\n                   assign mig_p0_cmd_en      =     'b0;\n                   assign mig_p0_cmd_ra      =     'b0;\n                   assign mig_p0_cmd_ba      =     'b0;\n                   assign mig_p0_cmd_ca      =     'b0;\n                   assign mig_p0_cmd_instr   =     'b0;\n                   assign mig_p0_cmd_bl      =     'b0;\n                   assign p0_cmd_empty       =     'b0;\n                   assign p0_cmd_full        =     'b0;\n                   \n               end\n               \n\n               if (C_PORT_ENABLE[1] == 1'b1)\n               begin\n\n\n                   assign mig_p1_arb_en      =      p1_arb_en ;\n                   assign mig_p1_cmd_clk     =      p1_cmd_clk  ;\n                   assign mig_p1_cmd_en      =      p1_cmd_en   ;\n                   assign mig_p1_cmd_ra      =      p1_cmd_ra  ;\n                   assign mig_p1_cmd_ba      =      p1_cmd_ba   ;\n                   assign mig_p1_cmd_ca      =      p1_cmd_ca  ;\n                   assign mig_p1_cmd_instr   =      p1_cmd_instr;\n                   assign mig_p1_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n                   assign p1_cmd_empty       =      mig_p1_cmd_empty;\n                   assign p1_cmd_full        =      mig_p1_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p1_arb_en      =     'b0;\n                   assign mig_p1_cmd_clk     =     'b0;\n                   assign mig_p1_cmd_en      =     'b0;\n                   assign mig_p1_cmd_ra      =     'b0;\n                   assign mig_p1_cmd_ba      =     'b0;\n                   assign mig_p1_cmd_ca      =     'b0;\n                   assign mig_p1_cmd_instr   =     'b0;\n                   assign mig_p1_cmd_bl      =     'b0;\n                   assign p1_cmd_empty       =      'b0;\n                   assign p1_cmd_full        =      'b0;\n                   \n                   \n               end\n               \n\n               if (C_PORT_ENABLE[2] == 1'b1)\n               begin\n\n                   assign mig_p2_arb_en      =      p2_arb_en ;\n                   assign mig_p2_cmd_clk     =      p2_cmd_clk  ;\n                   assign mig_p2_cmd_en      =      p2_cmd_en   ;\n                   assign mig_p2_cmd_ra      =      p2_cmd_ra  ;\n                   assign mig_p2_cmd_ba      =      p2_cmd_ba   ;\n                   assign mig_p2_cmd_ca      =      p2_cmd_ca  ;\n                   assign mig_p2_cmd_instr   =      p2_cmd_instr;\n                   assign mig_p2_cmd_bl      =      {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}  ;\n                   assign p2_cmd_empty   =      mig_p2_cmd_empty;\n                   assign p2_cmd_full    =      mig_p2_cmd_full ;\n                   \n               end else\n               begin\n\n                   assign mig_p2_arb_en      =      'b0;\n                   assign mig_p2_cmd_clk     =      'b0;\n                   assign mig_p2_cmd_en      =      'b0;\n                   assign mig_p2_cmd_ra      =      'b0;\n                   assign mig_p2_cmd_ba      =      'b0;\n                   assign mig_p2_cmd_ca      =      'b0;\n                   assign mig_p2_cmd_instr   =      'b0;\n                   assign mig_p2_cmd_bl      =      'b0;\n                   assign p2_cmd_empty   =       'b0;\n                   assign p2_cmd_full    =       'b0;\n                   \n               end\n               \n \n\n               if (C_PORT_ENABLE[3] == 1'b1)\n               begin\n\n                   assign mig_p3_arb_en    =        p3_arb_en ;\n                   assign mig_p3_cmd_clk     =      p3_cmd_clk  ;\n                   assign mig_p3_cmd_en      =      p3_cmd_en   ;\n                   assign mig_p3_cmd_ra      =      p3_cmd_ra  ;\n                   assign mig_p3_cmd_ba      =      p3_cmd_ba   ;\n                   assign mig_p3_cmd_ca      =      p3_cmd_ca  ;\n                   assign mig_p3_cmd_instr   =      p3_cmd_instr;\n                   assign mig_p3_cmd_bl      =      {(p3_cmd_instr[2] | p3_cmd_bl[5]),p3_cmd_bl[4:0]}  ;\n                   assign p3_cmd_empty   =      mig_p3_cmd_empty;\n                   assign p3_cmd_full    =      mig_p3_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p3_arb_en    =       'b0;\n                   assign mig_p3_cmd_clk     =     'b0;\n                   assign mig_p3_cmd_en      =     'b0;\n                   assign mig_p3_cmd_ra      =     'b0;\n                   assign mig_p3_cmd_ba      =     'b0;\n                   assign mig_p3_cmd_ca      =     'b0;\n                   assign mig_p3_cmd_instr   =     'b0;\n                   assign mig_p3_cmd_bl      =     'b0;\n                   assign p3_cmd_empty   =     'b0;\n                   assign p3_cmd_full    =     'b0;\n                   \n               end\n               \n               if (C_PORT_ENABLE[4] == 1'b1)\n               begin\n\n                   assign mig_p4_arb_en    =        p4_arb_en ;\n                   assign mig_p4_cmd_clk     =      p4_cmd_clk  ;\n                   assign mig_p4_cmd_en      =      p4_cmd_en   ;\n                   assign mig_p4_cmd_ra      =      p4_cmd_ra  ;\n                   assign mig_p4_cmd_ba      =      p4_cmd_ba   ;\n                   assign mig_p4_cmd_ca      =      p4_cmd_ca  ;\n                   assign mig_p4_cmd_instr   =      p4_cmd_instr;\n                   assign mig_p4_cmd_bl      =      {(p4_cmd_instr[2] | p4_cmd_bl[5]),p4_cmd_bl[4:0]}  ;\n                   assign p4_cmd_empty   =      mig_p4_cmd_empty;\n                   assign p4_cmd_full    =      mig_p4_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p4_arb_en      =      'b0;\n                   assign mig_p4_cmd_clk     =      'b0;\n                   assign mig_p4_cmd_en      =      'b0;\n                   assign mig_p4_cmd_ra      =      'b0;\n                   assign mig_p4_cmd_ba      =      'b0;\n                   assign mig_p4_cmd_ca      =      'b0;\n                   assign mig_p4_cmd_instr   =      'b0;\n                   assign mig_p4_cmd_bl      =      'b0;\n                   assign p4_cmd_empty   =      'b0;\n                   assign p4_cmd_full    =      'b0;\n                   \n\n\n               end\n\n               if (C_PORT_ENABLE[5] == 1'b1)\n               begin\n\n                   assign  mig_p5_arb_en    =     p5_arb_en ;\n                   assign  mig_p5_cmd_clk   =     p5_cmd_clk  ;\n                   assign  mig_p5_cmd_en    =     p5_cmd_en   ;\n                   assign  mig_p5_cmd_ra    =     p5_cmd_ra  ;\n                   assign  mig_p5_cmd_ba    =     p5_cmd_ba   ;\n                   assign  mig_p5_cmd_ca    =     p5_cmd_ca  ;\n                   assign mig_p5_cmd_instr  =     p5_cmd_instr;\n                   assign mig_p5_cmd_bl     =     {(p5_cmd_instr[2] | p5_cmd_bl[5]),p5_cmd_bl[4:0]}  ;\n                   assign p5_cmd_empty   =     mig_p5_cmd_empty;\n                   assign p5_cmd_full    =     mig_p5_cmd_full ;\n                   \n               end else\n               begin\n                   assign  mig_p5_arb_en     =   'b0;\n                   assign  mig_p5_cmd_clk    =   'b0;\n                   assign  mig_p5_cmd_en     =   'b0;\n                   assign  mig_p5_cmd_ra     =   'b0;\n                   assign  mig_p5_cmd_ba     =   'b0;\n                   assign  mig_p5_cmd_ca     =   'b0;\n                   assign mig_p5_cmd_instr   =   'b0;\n                   assign mig_p5_cmd_bl      =   'b0;\n                   assign p5_cmd_empty   =     'b0;\n                   assign p5_cmd_full    =     'b0;\n                   \n               \n               end\n\n\n\n\n              \n              \n              \n               if (C_PORT_ENABLE[0] == 1'b1)\n               begin\n                assign mig_p0_wr_clk   = p0_wr_clk;\n                assign mig_p0_rd_clk   = p0_rd_clk;\n                assign mig_p0_wr_en    = p0_wr_en;\n                assign mig_p0_rd_en    = p0_rd_en;\n                assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                assign mig_p0_wr_data  = p0_wr_data[31:0];\n                assign p0_rd_data        = mig_p0_rd_data;\n                assign p0_rd_full        = mig_p0_rd_full;\n                assign p0_rd_empty       = mig_p0_rd_empty;\n                assign p0_rd_error       = mig_p0_rd_error;\n                assign p0_wr_error       = mig_p0_wr_error;\n                assign p0_rd_overflow    = mig_p0_rd_overflow;\n                assign p0_wr_underrun    = mig_p0_wr_underrun;\n                assign p0_wr_empty       = mig_p0_wr_empty;\n                assign p0_wr_full        = mig_p0_wr_full;\n                assign p0_wr_count       = mig_p0_wr_count;\n                assign p0_rd_count       = mig_p0_rd_count  ; \n                \n                \n               end\n               else\n               begin\n                assign mig_p0_wr_clk     = 'b0;\n                assign mig_p0_rd_clk     = 'b0;\n                assign mig_p0_wr_en      = 'b0;\n                assign mig_p0_rd_en      = 'b0;\n                assign mig_p0_wr_mask    = 'b0;\n                assign mig_p0_wr_data    = 'b0;\n                assign p0_rd_data        = 'b0;\n                assign p0_rd_full        = 'b0;\n                assign p0_rd_empty       = 'b0;\n                assign p0_rd_error       = 'b0;\n                assign p0_wr_error       = 'b0;\n                assign p0_rd_overflow    = 'b0;\n                assign p0_wr_underrun    = 'b0;\n                assign p0_wr_empty       = 'b0;\n                assign p0_wr_full        = 'b0;\n                assign p0_wr_count       = 'b0;\n                assign p0_rd_count       = 'b0;\n                \n                \n               end\n              \n              \n              \n               if (C_PORT_ENABLE[1] == 1'b1)\n               begin\n              \n                assign mig_p1_wr_clk   = p1_wr_clk;\n                assign mig_p1_rd_clk   = p1_rd_clk;                \n                assign mig_p1_wr_en    = p1_wr_en;\n                assign mig_p1_wr_mask  = p1_wr_mask[3:0];                \n                assign mig_p1_wr_data  = p1_wr_data[31:0];\n                assign mig_p1_rd_en    = p1_rd_en;\n                assign p1_rd_data     = mig_p1_rd_data;\n                assign p1_rd_empty    = mig_p1_rd_empty;\n                assign p1_rd_full     = mig_p1_rd_full;\n                assign p1_rd_error    = mig_p1_rd_error;\n                assign p1_wr_error    = mig_p1_wr_error;\n                assign p1_rd_overflow = mig_p1_rd_overflow;\n                assign p1_wr_underrun    = mig_p1_wr_underrun;\n                assign p1_wr_empty    = mig_p1_wr_empty;\n                assign p1_wr_full    = mig_p1_wr_full;\n                assign p1_wr_count  = mig_p1_wr_count;\n                assign p1_rd_count  = mig_p1_rd_count  ; \n                \n               end else\n               begin\n              \n                assign mig_p1_wr_clk   = 'b0;\n                assign mig_p1_rd_clk   = 'b0;            \n                assign mig_p1_wr_en    = 'b0;\n                assign mig_p1_wr_mask  = 'b0;          \n                assign mig_p1_wr_data  = 'b0;\n                assign mig_p1_rd_en    = 'b0;\n                assign p1_rd_data     =  'b0;\n                assign p1_rd_empty    =  'b0;\n                assign p1_rd_full     =  'b0;\n                assign p1_rd_error    =  'b0;\n                assign p1_wr_error    =  'b0;\n                assign p1_rd_overflow =  'b0;\n                assign p1_wr_underrun =  'b0;\n                assign p1_wr_empty    =  'b0;\n                assign p1_wr_full     =  'b0;\n                assign p1_wr_count    =  'b0;\n                assign p1_rd_count    =  'b0;\n                \n                \n               end\n                \n                \n                \n\n\n\n         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[119:96] == \"W32\") begin : u_config1_2W\n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin\n                       assign mig_p2_clk      = p2_wr_clk;\n                       assign mig_p2_wr_data  = p2_wr_data[31:0];\n                       assign mig_p2_wr_mask  = p2_wr_mask[3:0];\n                       assign mig_p2_en       = p2_wr_en; \n                       assign p2_wr_error     = mig_p2_error;                       \n                       assign p2_wr_full      = mig_p2_full;\n                       assign p2_wr_empty     = mig_p2_empty;\n                       assign p2_wr_underrun  = mig_p2_underrun;\n                       assign p2_wr_count     = mig_p2_count  ; \n                       \n                       \n                  end else\n                  begin\n                       assign mig_p2_clk      = 'b0;\n                       assign mig_p2_wr_data  = 'b0;\n                       assign mig_p2_wr_mask  = 'b0;\n                       assign mig_p2_en       = 'b0;\n                       assign p2_wr_error     = 'b0;\n                       assign p2_wr_full      = 'b0;\n                       assign p2_wr_empty     = 'b0;\n                       assign p2_wr_underrun  = 'b0;\n                       assign p2_wr_count     = 'b0;\n                                                \n                  end                           \n                   assign p2_rd_data        = 'b0;\n                   assign p2_rd_overflow    = 'b0;\n                   assign p2_rd_error       = 'b0;\n                   assign p2_rd_full        = 'b0;\n                   assign p2_rd_empty       = 'b0;\n                   assign p2_rd_count       = 'b0;\n\n                       \n                       \n                         \n         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[119:96] == \"R32\") begin : u_config1_2R\n\n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin\n                       assign mig_p2_clk        = p2_rd_clk;\n                       assign p2_rd_data        = mig_p2_rd_data;\n                       assign mig_p2_en         = p2_rd_en;  \n                       assign p2_rd_overflow    = mig_p2_overflow;\n                       assign p2_rd_error       = mig_p2_error;\n                       assign p2_rd_full        = mig_p2_full;\n                       assign p2_rd_empty       = mig_p2_empty;\n                       assign p2_rd_count       = mig_p2_count  ; \n                       \n                  end else       \n                  begin\n                       assign mig_p2_clk        = 'b0;\n                       assign p2_rd_data        = 'b0;\n                       assign mig_p2_en         = 'b0;\n                       \n                       assign p2_rd_overflow    = 'b0;\n                       assign p2_rd_error       = 'b0;\n                       assign p2_rd_full        = 'b0;\n                       assign p2_rd_empty       = 'b0;\n                       assign p2_rd_count       = 'b0;\n                       \n                  end\n                  assign mig_p2_wr_data  = 'b0;\n                  assign mig_p2_wr_mask  = 'b0;\n                  assign p2_wr_error     = 'b0;\n                  assign p2_wr_full      = 'b0;\n                  assign p2_wr_empty     = 'b0;\n                  assign p2_wr_underrun  = 'b0;\n                  assign p2_wr_count     = 'b0;\n          \n          end \n          if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[87:64]  == \"W32\") begin : u_config1_3W\n\n\n                  if (C_PORT_ENABLE[3] == 1'b1)\n                  begin\n\n                       assign mig_p3_clk   = p3_wr_clk;\n                       assign mig_p3_wr_data  = p3_wr_data[31:0];\n                       assign mig_p3_wr_mask  = p3_wr_mask[3:0];\n                       assign mig_p3_en       = p3_wr_en; \n                       assign p3_wr_full      = mig_p3_full;\n                       assign p3_wr_empty     = mig_p3_empty;\n                       assign p3_wr_underrun  = mig_p3_underrun;\n                       assign p3_wr_count     = mig_p3_count  ; \n                       assign p3_wr_error     = mig_p3_error;\n                       \n                  end else \n                  begin\n                       assign mig_p3_clk      = 'b0;\n                       assign mig_p3_wr_data  = 'b0;\n                       assign mig_p3_wr_mask  = 'b0;\n                       assign mig_p3_en       = 'b0;\n                       assign p3_wr_full      = 'b0;\n                       assign p3_wr_empty     = 'b0;\n                       assign p3_wr_underrun  = 'b0;\n                       assign p3_wr_count     = 'b0;\n                       assign p3_wr_error     = 'b0;\n                                                \n                  end\n                   assign p3_rd_overflow = 'b0;\n                   assign p3_rd_error    = 'b0;\n                   assign p3_rd_full     = 'b0;\n                   assign p3_rd_empty    = 'b0;\n                   assign p3_rd_count    = 'b0;\n                   assign p3_rd_data     = 'b0;\n       \n                       \n         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[87:64]  == \"R32\") begin : u_config1_3R\n       \n                  if (C_PORT_ENABLE[3] == 1'b1)\n                  begin\n\n                       assign mig_p3_clk     = p3_rd_clk;\n                       assign p3_rd_data     = mig_p3_rd_data;                \n                       assign mig_p3_en      = p3_rd_en;  \n                       assign p3_rd_overflow = mig_p3_overflow;\n                       assign p3_rd_error    = mig_p3_error;\n                       assign p3_rd_full     = mig_p3_full;\n                       assign p3_rd_empty    = mig_p3_empty;\n                       assign p3_rd_count    = mig_p3_count  ; \n                  end else\n                  begin \n                       assign mig_p3_clk     = 'b0;\n                       assign mig_p3_en      = 'b0;\n                       assign p3_rd_overflow = 'b0;\n                       assign p3_rd_full     = 'b0;\n                       assign p3_rd_empty    = 'b0;\n                       assign p3_rd_count    = 'b0;\n                       assign p3_rd_error    = 'b0;\n                       assign p3_rd_data     = 'b0;\n                  end                  \n                  assign p3_wr_full      = 'b0;\n                  assign p3_wr_empty     = 'b0;\n                  assign p3_wr_underrun  = 'b0;\n                  assign p3_wr_count     = 'b0;\n                  assign p3_wr_error     = 'b0;\n                  assign mig_p3_wr_data  = 'b0;\n                  assign mig_p3_wr_mask  = 'b0;\n         end \n         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[55:32]  == \"W32\") begin : u_config1_4W\n       \n\n                  if (C_PORT_ENABLE[4] == 1'b1)\n                  begin\n       \n                       assign mig_p4_clk      = p4_wr_clk;\n                       assign mig_p4_wr_data  = p4_wr_data[31:0];\n                       assign mig_p4_wr_mask  = p4_wr_mask[3:0];\n                       assign mig_p4_en       = p4_wr_en; \n                       assign p4_wr_full      = mig_p4_full;\n                       assign p4_wr_empty     = mig_p4_empty;\n                       assign p4_wr_underrun  = mig_p4_underrun;\n                       assign p4_wr_count     = mig_p4_count  ; \n                       assign p4_wr_error     = mig_p4_error;\n\n                  end else\n                  begin\n                       assign mig_p4_clk      = 'b0;\n                       assign mig_p4_wr_data  = 'b0;\n                       assign mig_p4_wr_mask  = 'b0;\n                       assign mig_p4_en       = 'b0;\n                       assign p4_wr_full      = 'b0;\n                       assign p4_wr_empty     = 'b0;\n                       assign p4_wr_underrun  = 'b0;\n                       assign p4_wr_count     = 'b0;\n                       assign p4_wr_error     = 'b0;\n                  end                           \n                   assign p4_rd_overflow    = 'b0;\n                   assign p4_rd_error       = 'b0;\n                   assign p4_rd_full        = 'b0;\n                   assign p4_rd_empty       = 'b0;\n                   assign p4_rd_count       = 'b0;\n                   assign p4_rd_data        = 'b0;\n       \n         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[55:32]  == \"R32\") begin : u_config1_4R\n                       \n                  if (C_PORT_ENABLE[4] == 1'b1)\n                  begin\n                       assign mig_p4_clk        = p4_rd_clk;\n                       assign p4_rd_data        = mig_p4_rd_data;                \n                       assign mig_p4_en         = p4_rd_en;  \n                       assign p4_rd_overflow    = mig_p4_overflow;\n                       assign p4_rd_error       = mig_p4_error;\n                       assign p4_rd_full        = mig_p4_full;\n                       assign p4_rd_empty       = mig_p4_empty;\n                       assign p4_rd_count       = mig_p4_count  ; \n                       \n                  end else\n                  begin\n                       assign mig_p4_clk        = 'b0;\n                       assign p4_rd_data        = 'b0;\n                       assign mig_p4_en         = 'b0;\n                       assign p4_rd_overflow    = 'b0;\n                       assign p4_rd_error       = 'b0;\n                       assign p4_rd_full        = 'b0;\n                       assign p4_rd_empty       = 'b0;\n                       assign p4_rd_count       = 'b0;\n                  end                  \n                  assign p4_wr_full      = 'b0;\n                  assign p4_wr_empty     = 'b0;\n                  assign p4_wr_underrun  = 'b0;\n                  assign p4_wr_count     = 'b0;\n                  assign p4_wr_error     = 'b0;\n                  assign mig_p4_wr_data  = 'b0;\n                  assign mig_p4_wr_mask  = 'b0;\n\n\n                       \n                       \n         end \n         \n         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[23:0] == \"W32\") begin : u_config1_5W\n       \n\n                       \n                  if (C_PORT_ENABLE[5] == 1'b1)\n                  begin\n                       assign mig_p5_clk   = p5_wr_clk;\n                       assign mig_p5_wr_data  = p5_wr_data[31:0];\n                       assign mig_p5_wr_mask  = p5_wr_mask[3:0];\n                       assign mig_p5_en       = p5_wr_en; \n                       assign p5_wr_full      = mig_p5_full;\n                       assign p5_wr_empty     = mig_p5_empty;\n                       assign p5_wr_underrun  = mig_p5_underrun;\n                       assign p5_wr_count     = mig_p5_count  ; \n                       assign p5_wr_error     = mig_p5_error;\n                       \n                  end else\n                  begin\n                       assign mig_p5_clk      = 'b0;\n                       assign mig_p5_wr_data  = 'b0;\n                       assign mig_p5_wr_mask  = 'b0;\n                       assign mig_p5_en       = 'b0;\n                       assign p5_wr_full      = 'b0;\n                       assign p5_wr_empty     = 'b0;\n                       assign p5_wr_underrun  = 'b0;\n                       assign p5_wr_count     = 'b0;\n                       assign p5_wr_error     = 'b0;\n                  end                           \n                   assign p5_rd_data        = 'b0;\n                   assign p5_rd_overflow    = 'b0;\n                   assign p5_rd_error       = 'b0;\n                   assign p5_rd_full        = 'b0;\n                   assign p5_rd_empty       = 'b0;\n                   assign p5_rd_count       = 'b0;\n                  \n       \n                       \n                         \n         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[23:0] == \"R32\") begin : u_config1_5R\n\n                  if (C_PORT_ENABLE[5] == 1'b1)\n                  begin\n\n                       assign mig_p5_clk        = p5_rd_clk;\n                       assign p5_rd_data        = mig_p5_rd_data;                \n                       assign mig_p5_en         = p5_rd_en;  \n                       assign p5_rd_overflow    = mig_p5_overflow;\n                       assign p5_rd_error       = mig_p5_error;\n                       assign p5_rd_full        = mig_p5_full;\n                       assign p5_rd_empty       = mig_p5_empty;\n                       assign p5_rd_count       = mig_p5_count  ; \n                       \n                 end else\n                 begin\n                       assign mig_p5_clk        = 'b0;\n                       assign p5_rd_data        = 'b0;           \n                       assign mig_p5_en         = 'b0;\n                       assign p5_rd_overflow    = 'b0;\n                       assign p5_rd_error       = 'b0;\n                       assign p5_rd_full        = 'b0;\n                       assign p5_rd_empty       = 'b0;\n                       assign p5_rd_count       = 'b0;\n                 \n                 end\n                 assign p5_wr_full      = 'b0;\n                 assign p5_wr_empty     = 'b0;\n                 assign p5_wr_underrun  = 'b0;\n                 assign p5_wr_count     = 'b0;\n                 assign p5_wr_error     = 'b0;\n                 assign mig_p5_wr_data  = 'b0;\n                 assign mig_p5_wr_mask  = 'b0;\n                       \n         end\n                \n  end else if(C_PORT_CONFIG == \"B32_B32_B32_B32\" ) begin : u_config_2\n\n           \n               \n               \n               \n                  if (C_PORT_ENABLE[0] == 1'b1)\n                  begin\n                           \n                           assign mig_p0_arb_en      =      p0_arb_en ;\n                           assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                           assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                           assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                           assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                           assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                           assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                           assign mig_p0_cmd_bl      =       {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n                           \n                           \n                           assign mig_p0_rd_en    = p0_rd_en;                            \n                           assign mig_p0_wr_clk   = p0_wr_clk;\n                           assign mig_p0_rd_clk   = p0_rd_clk;\n                           assign mig_p0_wr_en    = p0_wr_en;\n                           assign mig_p0_wr_data  = p0_wr_data[31:0]; \n                           assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                           assign p0_wr_count     = mig_p0_wr_count;\n                           assign p0_rd_count  = mig_p0_rd_count  ; \n\n                           \n                           \n                 end else\n                 begin\n                           assign mig_p0_arb_en      =       'b0;\n                           assign mig_p0_cmd_clk     =       'b0;\n                           assign mig_p0_cmd_en      =       'b0;\n                           assign mig_p0_cmd_ra      =       'b0;\n                           assign mig_p0_cmd_ba      =       'b0;\n                           assign mig_p0_cmd_ca      =       'b0;\n                           assign mig_p0_cmd_instr   =       'b0;\n                           assign mig_p0_cmd_bl      =       'b0;\n                           \n                           assign mig_p0_rd_en    = 'b0;                    \n                           assign mig_p0_wr_clk   = 'b0;\n                           assign mig_p0_rd_clk   = 'b0;\n                           assign mig_p0_wr_en    = 'b0;\n                           assign mig_p0_wr_data  = 'b0; \n                           assign mig_p0_wr_mask  = 'b0;\n                           assign p0_wr_count     = 'b0;\n                           assign p0_rd_count     = 'b0;\n\n                           \n                 end                           \n                           \n                           assign p0_cmd_empty       =      mig_p0_cmd_empty ;\n                           assign p0_cmd_full        =      mig_p0_cmd_full  ;\n                           \n                           \n                  if (C_PORT_ENABLE[1] == 1'b1)\n                  begin\n                           \n\n                           assign mig_p1_arb_en      =      p1_arb_en ;\n                           assign mig_p1_cmd_clk     =      p1_cmd_clk  ;\n                           assign mig_p1_cmd_en      =      p1_cmd_en   ;\n                           assign mig_p1_cmd_ra      =      p1_cmd_ra  ;\n                           assign mig_p1_cmd_ba      =      p1_cmd_ba   ;\n                           assign mig_p1_cmd_ca      =      p1_cmd_ca  ;\n                           assign mig_p1_cmd_instr   =      p1_cmd_instr;\n                           assign mig_p1_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n                           \n                 \n                            assign mig_p1_wr_en    = p1_wr_en;\n                            assign mig_p1_wr_clk   = p1_wr_clk;\n                            assign mig_p1_rd_en    = p1_rd_en;\n                            assign mig_p1_wr_data  = p1_wr_data[31:0];\n                            assign mig_p1_wr_mask  = p1_wr_mask[3:0];                \n                            assign mig_p1_rd_clk   = p1_rd_clk;\n                            assign p1_wr_count     = mig_p1_wr_count;\n                            assign p1_rd_count     = mig_p1_rd_count;\n                           \n                  end else\n                  begin\n\n                           assign mig_p1_arb_en      =       'b0;\n                           assign mig_p1_cmd_clk     =       'b0;\n                           assign mig_p1_cmd_en      =       'b0;\n                           assign mig_p1_cmd_ra      =       'b0;\n                           assign mig_p1_cmd_ba      =       'b0;\n                           assign mig_p1_cmd_ca      =       'b0;\n                           assign mig_p1_cmd_instr   =       'b0;\n                           assign mig_p1_cmd_bl      =       'b0;\n                           \n                           assign mig_p1_wr_en    = 'b0; \n                           assign mig_p1_wr_clk   = 'b0;\n                           assign mig_p1_rd_en    = 'b0;\n                           assign mig_p1_wr_data  = 'b0;\n                           assign mig_p1_wr_mask  = 'b0;                \n                           assign mig_p1_rd_clk   = 'b0;\n                            assign p1_wr_count     = 'b0;\n                            assign p1_rd_count     = 'b0;\n                  \n                  end\n                           \n                           \n                           assign p1_cmd_empty       =      mig_p1_cmd_empty ;\n                           assign p1_cmd_full        =      mig_p1_cmd_full  ;\n \n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin   \n                           assign mig_p2_arb_en      =      p2_arb_en ;\n                           assign mig_p2_cmd_clk     =      p2_cmd_clk  ;\n                           assign mig_p2_cmd_en      =      p2_cmd_en   ;\n                           assign mig_p2_cmd_ra      =      p2_cmd_ra  ;\n                           assign mig_p2_cmd_ba      =      p2_cmd_ba   ;\n                           assign mig_p2_cmd_ca      =      p2_cmd_ca  ;\n                           assign mig_p2_cmd_instr   =      p2_cmd_instr;\n                           assign mig_p2_cmd_bl      =      {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}   ;\n                           \n                            assign mig_p2_en       = p2_rd_en;\n                            assign mig_p2_clk      = p2_rd_clk;\n                            assign mig_p3_en       = p2_wr_en;\n                            assign mig_p3_clk      = p2_wr_clk;\n                            assign mig_p3_wr_data  = p2_wr_data[31:0];\n                            assign mig_p3_wr_mask  = p2_wr_mask[3:0];\n                            assign p2_wr_count     = mig_p3_count;\n                            assign p2_rd_count     = mig_p2_count;\n                           \n                  end else\n                  begin\n\n                           assign mig_p2_arb_en      =      'b0;\n                           assign mig_p2_cmd_clk     =      'b0;\n                           assign mig_p2_cmd_en      =      'b0;\n                           assign mig_p2_cmd_ra      =      'b0;\n                           assign mig_p2_cmd_ba      =      'b0;\n                           assign mig_p2_cmd_ca      =      'b0;\n                           assign mig_p2_cmd_instr   =      'b0;\n                           assign mig_p2_cmd_bl      =      'b0;\n\n                            assign mig_p2_en       = 'b0; \n                            assign mig_p2_clk      = 'b0;\n                            assign mig_p3_en       = 'b0;\n                            assign mig_p3_clk      = 'b0;\n                            assign mig_p3_wr_data  = 'b0; \n                            assign mig_p3_wr_mask  = 'b0;\n                            assign p2_rd_count     = 'b0;\n                            assign p2_wr_count     = 'b0;\n                           \n                 end                           \n                         \n                           assign p2_cmd_empty       =      mig_p2_cmd_empty ;\n                           assign p2_cmd_full        =      mig_p2_cmd_full  ;\n  \n                 if (C_PORT_ENABLE[3] == 1'b1)\n                  begin   \n                           assign mig_p4_arb_en      =      p3_arb_en ;\n                           assign mig_p4_cmd_clk     =      p3_cmd_clk  ;\n                           assign mig_p4_cmd_en      =      p3_cmd_en   ;\n                           assign mig_p4_cmd_ra      =      p3_cmd_ra  ;\n                           assign mig_p4_cmd_ba      =      p3_cmd_ba   ;\n                           assign mig_p4_cmd_ca      =      p3_cmd_ca  ;\n                           assign mig_p4_cmd_instr   =      p3_cmd_instr;\n                           assign mig_p4_cmd_bl      =      {(p3_cmd_instr[2] | p3_cmd_bl[5]),p3_cmd_bl[4:0]}  ;\n\n                           assign mig_p4_clk      = p3_rd_clk;\n                           assign mig_p4_en       = p3_rd_en;                            \n                           assign mig_p5_clk      = p3_wr_clk;\n                           assign mig_p5_en       = p3_wr_en; \n                           assign mig_p5_wr_data  = p3_wr_data[31:0];\n                           assign mig_p5_wr_mask  = p3_wr_mask[3:0];\n                           assign p3_rd_count     = mig_p4_count;\n                           assign p3_wr_count     = mig_p5_count;\n                           \n                           \n                  end else\n                  begin\n                           assign mig_p4_arb_en      =     'b0;\n                           assign mig_p4_cmd_clk     =     'b0;\n                           assign mig_p4_cmd_en      =     'b0;\n                           assign mig_p4_cmd_ra      =     'b0;\n                           assign mig_p4_cmd_ba      =     'b0;\n                           assign mig_p4_cmd_ca      =     'b0;\n                           assign mig_p4_cmd_instr   =     'b0;\n                           assign mig_p4_cmd_bl      =     'b0;\n                           \n                            assign mig_p4_clk      = 'b0; \n                            assign mig_p4_en       = 'b0;                   \n                            assign mig_p5_clk      = 'b0;\n                            assign mig_p5_en       = 'b0;\n                            assign mig_p5_wr_data  = 'b0; \n                            assign mig_p5_wr_mask  = 'b0;\n                            assign p3_rd_count     = 'b0;\n                            assign p3_wr_count     = 'b0;\n                           \n                          \n                           \n                  end         \n                           \n                           assign p3_cmd_empty       =      mig_p4_cmd_empty ;\n                           assign p3_cmd_full        =      mig_p4_cmd_full  ;\n                           \n                           \n                            \n                            assign p0_rd_data     = mig_p0_rd_data;\n                            assign p1_rd_data     = mig_p1_rd_data;\n                            assign p2_rd_data     = mig_p2_rd_data;\n                            assign p3_rd_data     = mig_p4_rd_data;\n\n                            assign p0_rd_empty    = mig_p0_rd_empty;\n                            assign p1_rd_empty    = mig_p1_rd_empty;\n                            assign p2_rd_empty    = mig_p2_empty;\n                            assign p3_rd_empty    = mig_p4_empty;\n\n                            assign p0_rd_full     = mig_p0_rd_full;\n                            assign p1_rd_full     = mig_p1_rd_full;\n                            assign p2_rd_full     = mig_p2_full;\n                            assign p3_rd_full     = mig_p4_full;\n\n                            assign p0_rd_error    = mig_p0_rd_error;\n                            assign p1_rd_error    = mig_p1_rd_error;\n                            assign p2_rd_error    = mig_p2_error;\n                            assign p3_rd_error    = mig_p4_error;\n                            \n                            assign p0_rd_overflow = mig_p0_rd_overflow;\n                            assign p1_rd_overflow = mig_p1_rd_overflow;\n                            assign p2_rd_overflow = mig_p2_overflow;\n                            assign p3_rd_overflow = mig_p4_overflow;\n\n                            assign p0_wr_underrun = mig_p0_wr_underrun;\n                            assign p1_wr_underrun = mig_p1_wr_underrun;\n                            assign p2_wr_underrun = mig_p3_underrun;\n                            assign p3_wr_underrun = mig_p5_underrun;\n                            \n                            assign p0_wr_empty    = mig_p0_wr_empty;\n                            assign p1_wr_empty    = mig_p1_wr_empty;\n                            assign p2_wr_empty    = mig_p3_empty; \n                            assign p3_wr_empty    = mig_p5_empty; \n \n                            assign p0_wr_full    = mig_p0_wr_full;\n                            assign p1_wr_full    = mig_p1_wr_full;\n                            assign p2_wr_full    = mig_p3_full;\n                            assign p3_wr_full    = mig_p5_full;\n\n                            assign p0_wr_error    = mig_p0_wr_error;\n                            assign p1_wr_error    = mig_p1_wr_error;\n                            assign p2_wr_error    = mig_p3_error;\n                            assign p3_wr_error    = mig_p5_error;\n\n     \n                           assign p4_cmd_empty        =     1'b0;\n                           assign p4_cmd_full         =     1'b0;\n                           assign mig_p2_wr_mask  = 'b0;\n                           assign mig_p4_wr_mask  = 'b0;\n\n                           assign mig_p2_wr_data     = 'b0;\n                           assign mig_p4_wr_data     = 'b0;\n\n                           assign p5_cmd_empty        =     1'b0;\n                           assign p5_cmd_full         =     1'b0;\n     \n \n                            assign mig_p3_cmd_clk     =      1'b0;\n                            assign mig_p3_cmd_en      =      1'b0;\n                            assign mig_p3_cmd_ra      =      15'd0;\n                            assign mig_p3_cmd_ba      =      3'd0;\n                            assign mig_p3_cmd_ca      =      12'd0;\n                            assign mig_p3_cmd_instr   =      3'd0;\n                            assign mig_p3_cmd_bl      =      6'd0;\n                            assign mig_p3_arb_en      =      1'b0;  \n                            \n                            \n                            \n                            \n                            assign mig_p5_arb_en      =      1'b0;  \n                            assign mig_p5_cmd_clk     =      1'b0;\n                            assign mig_p5_cmd_en      =      1'b0;\n                            assign mig_p5_cmd_ra      =      15'd0;\n                            assign mig_p5_cmd_ba      =      3'd0;\n                            assign mig_p5_cmd_ca      =      12'd0;\n                            assign mig_p5_cmd_instr   =      3'd0;\n                            assign mig_p5_cmd_bl      =      6'd0;\n\n\n\n      \n      \n      \n      \n      \n      \n      \n\n     \n     \n  end else if(C_PORT_CONFIG == \"B64_B32_B32\" ) begin : u_config_3\n\n               \n \n \n       if (C_PORT_ENABLE[0] == 1'b1)\n       begin\n               assign mig_p0_arb_en      =  p0_arb_en ;\n               assign mig_p0_cmd_clk     =  p0_cmd_clk  ;\n               assign mig_p0_cmd_en      =  p0_cmd_en   ;\n               assign mig_p0_cmd_ra      =  p0_cmd_ra  ;\n               assign mig_p0_cmd_ba      =  p0_cmd_ba   ;\n               assign mig_p0_cmd_ca      =  p0_cmd_ca  ;\n               assign mig_p0_cmd_instr   =  p0_cmd_instr;\n               assign mig_p0_cmd_bl      =   {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n               assign p0_cmd_empty       =  mig_p0_cmd_empty ;\n               assign p0_cmd_full        =  mig_p0_cmd_full  ;\n\n               assign mig_p0_wr_clk   = p0_wr_clk;\n               assign mig_p0_rd_clk   = p0_rd_clk;\n               assign mig_p1_wr_clk   = p0_wr_clk;\n               assign mig_p1_rd_clk   = p0_rd_clk;\n                \n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p0_wr_en    = p0_wr_en ;\n               else\n                   assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n\n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p1_wr_en    = p0_wr_en ;\n               else\n                   assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                   \n               assign mig_p0_wr_data  = p0_wr_data[31:0];\n               assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n               assign mig_p1_wr_data  = p0_wr_data[63 : 32];\n               assign mig_p1_wr_mask  = p0_wr_mask[7 : 4];     \n\n               assign p0_rd_empty       = mig_p1_rd_empty;\n               assign p0_rd_data        = {mig_p1_rd_data , mig_p0_rd_data}; \n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p0_rd_en    = p0_rd_en ;\n               else\n                   assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n\n               if (C_USR_INTERFACE_MODE == \"AXI\")               \n                   assign mig_p1_rd_en    = p0_rd_en ;\n                else\n                   assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n\n                assign p0_wr_count       = mig_p1_wr_count;  \n                assign p0_rd_count       = mig_p1_rd_count;\n                assign p0_wr_empty       = mig_p1_wr_empty;\n                assign p0_wr_error       = mig_p1_wr_error | mig_p0_wr_error;  \n                assign p0_wr_full        = mig_p1_wr_full;\n                assign p0_wr_underrun    = mig_p1_wr_underrun | mig_p0_wr_underrun; \n                assign p0_rd_overflow    = mig_p1_rd_overflow | mig_p0_rd_overflow; \n                assign p0_rd_error       = mig_p1_rd_error | mig_p0_rd_error; \n                assign p0_rd_full        = mig_p1_rd_full;\n\n \n       end else\n       begin\n       \n               assign mig_p0_arb_en      = 'b0;\n               assign mig_p0_cmd_clk     = 'b0;\n               assign mig_p0_cmd_en      = 'b0;\n               assign mig_p0_cmd_ra      = 'b0;\n               assign mig_p0_cmd_ba      = 'b0;\n               assign mig_p0_cmd_ca      = 'b0;\n               assign mig_p0_cmd_instr   = 'b0;\n               assign mig_p0_cmd_bl      = 'b0;\n               assign p0_cmd_empty       =  'b0;\n               assign p0_cmd_full        =  'b0;\n\n\n               assign mig_p0_wr_clk   = 'b0;\n               assign mig_p0_rd_clk   = 'b0;\n               assign mig_p1_wr_clk   = 'b0;\n               assign mig_p1_rd_clk   = 'b0;\n               \n               assign mig_p0_wr_en    = 'b0;\n               assign mig_p1_wr_en    = 'b0;\n               assign mig_p0_wr_data  = 'b0;\n               assign mig_p0_wr_mask  = 'b0;\n               assign mig_p1_wr_data  = 'b0;\n               assign mig_p1_wr_mask  = 'b0; \n\n               assign p0_rd_empty       = 'b0;\n               assign p0_rd_data        = 'b0;\n               assign mig_p0_rd_en      = 'b0;\n               assign mig_p1_rd_en      = 'b0;\n \n \n               assign p0_wr_count       =  'b0;\n               assign p0_rd_count       =  'b0;\n               assign p0_wr_empty       =  'b0;\n               assign p0_wr_error       =  'b0;\n               assign p0_wr_full        =  'b0;\n               assign p0_wr_underrun    =  'b0;\n               assign p0_rd_overflow    =  'b0;\n               assign p0_rd_error       =  'b0;\n               assign p0_rd_full        =  'b0;\n                                         \n\n       end       \n       \n        \n \n       if (C_PORT_ENABLE[1] == 1'b1)\n       begin\n\n               assign mig_p2_arb_en      =      p1_arb_en ;\n               assign mig_p2_cmd_clk     =      p1_cmd_clk  ;\n               assign mig_p2_cmd_en      =      p1_cmd_en   ;\n               assign mig_p2_cmd_ra      =      p1_cmd_ra  ;\n               assign mig_p2_cmd_ba      =      p1_cmd_ba   ;\n               assign mig_p2_cmd_ca      =      p1_cmd_ca  ;\n               assign mig_p2_cmd_instr   =      p1_cmd_instr;\n               assign mig_p2_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n               assign p1_cmd_empty       =      mig_p2_cmd_empty;  \n               assign p1_cmd_full        =      mig_p2_cmd_full;   \n\n               assign mig_p2_clk         = p1_rd_clk;\n               assign mig_p3_clk         = p1_wr_clk;\n\n               assign mig_p3_en       = p1_wr_en;\n               assign mig_p3_wr_data  = p1_wr_data[31:0];\n               assign mig_p3_wr_mask  = p1_wr_mask[3:0];\n               assign mig_p2_en       = p1_rd_en;\n\n               assign p1_rd_data        = mig_p2_rd_data;\n               assign p1_wr_count       = mig_p3_count;\n               assign p1_rd_count       = mig_p2_count;\n               assign p1_wr_empty       = mig_p3_empty;\n               assign p1_wr_error       = mig_p3_error;                 \n               assign p1_wr_full        = mig_p3_full;\n               assign p1_wr_underrun    = mig_p3_underrun;\n               assign p1_rd_overflow    = mig_p2_overflow; \n               assign p1_rd_error       = mig_p2_error;\n               assign p1_rd_full        = mig_p2_full;\n               assign p1_rd_empty       = mig_p2_empty;\n \n       end else\n       begin\n\n               assign mig_p2_arb_en      =     'b0; \n               assign mig_p2_cmd_clk     =     'b0; \n               assign mig_p2_cmd_en      =     'b0; \n               assign mig_p2_cmd_ra      =     'b0; \n               assign mig_p2_cmd_ba      =     'b0; \n               assign mig_p2_cmd_ca      =     'b0; \n               assign mig_p2_cmd_instr   =     'b0; \n               assign mig_p2_cmd_bl      =     'b0; \n               assign p1_cmd_empty       =     'b0; \n               assign p1_cmd_full        =     'b0; \n               assign mig_p3_en       = 'b0; \n               assign mig_p3_wr_data  = 'b0; \n               assign mig_p3_wr_mask  = 'b0; \n               assign mig_p2_en       = 'b0; \n\n               assign mig_p2_clk   = 'b0; \n               assign mig_p3_clk   = 'b0; \n               \n               assign p1_rd_data        = 'b0; \n               assign p1_wr_count       = 'b0; \n               assign p1_rd_count       = 'b0; \n               assign p1_wr_empty       = 'b0; \n               assign p1_wr_error       = 'b0;         \n               assign p1_wr_full        = 'b0; \n               assign p1_wr_underrun    = 'b0; \n               assign p1_rd_overflow    = 'b0; \n               assign p1_rd_error       = 'b0; \n               assign p1_rd_full        = 'b0; \n               assign p1_rd_empty       = 'b0; \n \n       end\n       \n       if (C_PORT_ENABLE[2] == 1'b1)\n       begin\n               assign mig_p4_arb_en      = p2_arb_en ;\n               assign mig_p4_cmd_clk     = p2_cmd_clk  ;\n               assign mig_p4_cmd_en      = p2_cmd_en   ;\n               assign mig_p4_cmd_ra      = p2_cmd_ra  ;\n               assign mig_p4_cmd_ba      = p2_cmd_ba   ;\n               assign mig_p4_cmd_ca      = p2_cmd_ca  ;\n               assign mig_p4_cmd_instr   = p2_cmd_instr;\n               assign mig_p4_cmd_bl      = {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}   ;\n               assign p2_cmd_empty       = mig_p4_cmd_empty ; \n               assign p2_cmd_full        = mig_p4_cmd_full  ; \n               assign mig_p5_en          = p2_wr_en;\n               assign mig_p5_wr_data     = p2_wr_data[31:0];\n               assign mig_p5_wr_mask     = p2_wr_mask[3:0];\n               assign mig_p4_en          = p2_rd_en;\n               \n                assign mig_p4_clk        = p2_rd_clk;\n                assign mig_p5_clk        = p2_wr_clk;\n\n                assign p2_rd_data        = mig_p4_rd_data;\n                assign p2_wr_count       = mig_p5_count;\n                assign p2_rd_count       = mig_p4_count;\n                assign p2_wr_empty       = mig_p5_empty;\n                assign p2_wr_full        = mig_p5_full;\n                assign p2_wr_error       = mig_p5_error;  \n                assign p2_wr_underrun    = mig_p5_underrun;\n                assign p2_rd_overflow    = mig_p4_overflow;    \n                assign p2_rd_error       = mig_p4_error;\n                assign p2_rd_full        = mig_p4_full;\n                assign p2_rd_empty       = mig_p4_empty;\n               \n       end else\n       begin\n               assign mig_p4_arb_en      = 'b0;   \n               assign mig_p4_cmd_clk     = 'b0;   \n               assign mig_p4_cmd_en      = 'b0;   \n               assign mig_p4_cmd_ra      = 'b0;   \n               assign mig_p4_cmd_ba      = 'b0;   \n               assign mig_p4_cmd_ca      = 'b0;   \n               assign mig_p4_cmd_instr   = 'b0;   \n               assign mig_p4_cmd_bl      = 'b0;   \n               assign p2_cmd_empty       = 'b0;   \n               assign p2_cmd_full        = 'b0;   \n               assign mig_p5_en          = 'b0; \n               assign mig_p5_wr_data     = 'b0; \n               assign mig_p5_wr_mask     = 'b0; \n               assign mig_p4_en          = 'b0; \n\n                assign mig_p4_clk        = 'b0; \n                assign mig_p5_clk        = 'b0; \n\n                assign p2_rd_data        =   'b0;   \n                assign p2_wr_count       =   'b0;   \n                assign p2_rd_count       =   'b0;   \n                assign p2_wr_empty       =   'b0;   \n                assign p2_wr_full        =   'b0;   \n                assign p2_wr_error       =   'b0;   \n                assign p2_wr_underrun    =   'b0;   \n                assign p2_rd_overflow    =   'b0;     \n                assign p2_rd_error       =   'b0;   \n                assign p2_rd_full        =   'b0;   \n                assign p2_rd_empty       =   'b0;   \n\n       end \n \n\n              \n               assign mig_p1_arb_en      =      1'b0;\n               assign mig_p1_cmd_clk     =      1'b0;\n               assign mig_p1_cmd_en      =      1'b0;\n               assign mig_p1_cmd_ra      =      15'd0;\n               assign mig_p1_cmd_ba      =      3'd0;\n               assign mig_p1_cmd_ca      =      12'd0;\n               \n               assign mig_p1_cmd_instr   =      3'd0;\n               assign mig_p1_cmd_bl      =      6'd0;\n                \n               assign mig_p3_arb_en    =      1'b0;\n               assign mig_p3_cmd_clk     =      1'b0;\n               assign mig_p3_cmd_en      =      1'b0;\n               assign mig_p3_cmd_ra      =      15'd0;\n               assign mig_p3_cmd_ba      =      3'd0;\n               assign mig_p3_cmd_ca      =      12'd0;\n               \n               assign mig_p3_cmd_instr   =      3'd0;\n               assign mig_p3_cmd_bl      =      6'd0;\n\n               assign mig_p5_arb_en    =      1'b0;\n               assign mig_p5_cmd_clk     =      1'b0;\n               assign mig_p5_cmd_en      =      1'b0;\n               assign mig_p5_cmd_ra      =      15'd0;\n               assign mig_p5_cmd_ba      =      3'd0;\n               assign mig_p5_cmd_ca      =      12'd0;\n               \n               assign mig_p5_cmd_instr   =      3'd0;\n               assign mig_p5_cmd_bl      =      6'd0;\n \n\n\nend else if(C_PORT_CONFIG == \"B64_B64\" ) begin : u_config_4\n\n               \n\n                 if (C_PORT_ENABLE[0] == 1'b1)\n                  begin\n               \n                       assign mig_p0_arb_en      =      p0_arb_en ;\n                       assign mig_p1_arb_en      =      p0_arb_en ;\n                       \n                       assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                       assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                       assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                       assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                       assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                       assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                       assign mig_p0_cmd_bl      =       {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n\n\n                        assign mig_p0_wr_clk   = p0_wr_clk;\n                        assign mig_p0_rd_clk   = p0_rd_clk;\n                        assign mig_p1_wr_clk   = p0_wr_clk;\n                        assign mig_p1_rd_clk   = p0_rd_clk;\n                        \n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p0_wr_en    = p0_wr_en ;\n                        else\n                           assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p1_wr_en    = p0_wr_en ;\n                        else\n                           assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                        \n                        \n                        assign mig_p0_wr_data  = p0_wr_data[31:0];\n                        assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                        assign mig_p1_wr_data  = p0_wr_data[63 : 32];\n                        assign mig_p1_wr_mask  = p0_wr_mask[7 : 4];    \n\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p0_rd_en    = p0_rd_en ;\n                        else\n                           assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p1_rd_en    = p0_rd_en ;\n                        else\n                           assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n                        \n                        assign p0_rd_data     = {mig_p1_rd_data , mig_p0_rd_data};\n                        \n                        assign p0_cmd_empty   =     mig_p0_cmd_empty ;\n                        assign p0_cmd_full    =     mig_p0_cmd_full  ;\n                        assign p0_wr_empty    = mig_p1_wr_empty;      \n                        assign p0_wr_full    = mig_p1_wr_full;\n                        assign p0_wr_error    = mig_p1_wr_error | mig_p0_wr_error; \n                        assign p0_wr_count    = mig_p1_wr_count;\n                        assign p0_rd_count    = mig_p1_rd_count;\n                        assign p0_wr_underrun = mig_p1_wr_underrun | mig_p0_wr_underrun; \n                        assign p0_rd_overflow = mig_p1_rd_overflow | mig_p0_rd_overflow; \n                        assign p0_rd_error    = mig_p1_rd_error | mig_p0_rd_error; \n                        assign p0_rd_full     = mig_p1_rd_full;\n                        assign p0_rd_empty    = mig_p1_rd_empty;\n                       \n                       \n                 end else\n                 begin\n                       assign mig_p0_arb_en      =      'b0;\n                       assign mig_p0_cmd_clk     =      'b0;\n                       assign mig_p0_cmd_en      =      'b0;\n                       assign mig_p0_cmd_ra      =      'b0;\n                       assign mig_p0_cmd_ba      =      'b0;\n                       assign mig_p0_cmd_ca      =      'b0;\n                       assign mig_p0_cmd_instr   =      'b0;\n                       assign mig_p0_cmd_bl      =      'b0;\n\n                        assign mig_p0_wr_clk   = 'b0;\n                        assign mig_p0_rd_clk   = 'b0;\n                        assign mig_p1_wr_clk   = 'b0;\n                        assign mig_p1_rd_clk   = 'b0;\n                        assign mig_p0_wr_en    = 'b0;\n                        assign mig_p1_wr_en    = 'b0;\n                        assign mig_p0_wr_data  = 'b0;\n                        assign mig_p0_wr_mask  = 'b0;\n                        assign mig_p1_wr_data  = 'b0;\n                        assign mig_p1_wr_mask  = 'b0;            \n                   \n                        assign mig_p0_rd_en    = 'b0;\n                        assign mig_p1_rd_en    = 'b0;\n                        assign p0_rd_data     = 'b0;\n\n\n                        assign p0_cmd_empty   = 'b0;\n                        assign p0_cmd_full    = 'b0;\n                        assign p0_wr_empty    = 'b0;\n                        assign p0_wr_full     = 'b0;\n                        assign p0_wr_error    = 'b0;\n                        assign p0_wr_count    = 'b0;\n                        assign p0_rd_count    = 'b0;\n                        assign p0_wr_underrun = 'b0;  \n                        assign p0_rd_overflow = 'b0;\n                        assign p0_rd_error    = 'b0;\n                        assign p0_rd_full     = 'b0;\n                        assign p0_rd_empty    = 'b0;\n                 \n                 \n                 end\n\n      \n\n                 if (C_PORT_ENABLE[1] == 1'b1)\n                 begin\n\n                       assign mig_p2_arb_en      =      p1_arb_en ;\n                       \n                       assign mig_p2_cmd_clk     =      p1_cmd_clk  ;\n                       assign mig_p2_cmd_en      =      p1_cmd_en   ;\n                       assign mig_p2_cmd_ra      =      p1_cmd_ra  ;\n                       assign mig_p2_cmd_ba      =      p1_cmd_ba   ;\n                       assign mig_p2_cmd_ca      =      p1_cmd_ca  ;\n                       assign mig_p2_cmd_instr   =      p1_cmd_instr;\n                       assign mig_p2_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n\n\n                        assign mig_p2_clk     = p1_rd_clk;\n                        assign mig_p3_clk     = p1_wr_clk;\n                        assign mig_p4_clk     = p1_rd_clk;\n                        assign mig_p5_clk     = p1_wr_clk;\n                         \n                        \n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p3_en    = p1_wr_en ;\n                        else\n                           assign mig_p3_en    = p1_wr_en & !p1_wr_full;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p5_en    = p1_wr_en ;\n                        else\n                           assign mig_p5_en    = p1_wr_en & !p1_wr_full;\n                        \n\n\n                        \n                        \n                        assign mig_p3_wr_data  = p1_wr_data[31:0];\n                        assign mig_p3_wr_mask  = p1_wr_mask[3:0];\n                        assign mig_p5_wr_data  = p1_wr_data[63 : 32];\n                        assign mig_p5_wr_mask  = p1_wr_mask[7 : 4];                       \n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p2_en    = p1_rd_en ;\n                        else\n                           assign mig_p2_en    = p1_rd_en & !p1_rd_empty;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p4_en    = p1_rd_en ;\n                        else\n                           assign mig_p4_en    = p1_rd_en & !p1_rd_empty;\n\n\n                        assign p1_cmd_empty       =      mig_p2_cmd_empty ;  \n                        assign p1_cmd_full        =      mig_p2_cmd_full  ;\n\n                        assign p1_wr_count    = mig_p5_count;\n                        assign p1_rd_count    = mig_p4_count;\n                        assign p1_wr_full    = mig_p5_full;\n                        assign p1_wr_error    = mig_p5_error | mig_p5_error;\n                        assign p1_wr_empty    = mig_p5_empty;\n                        assign p1_wr_underrun = mig_p3_underrun | mig_p5_underrun;\n                        assign p1_rd_overflow = mig_p4_overflow;\n                        assign p1_rd_error    = mig_p4_error;\n                        assign p1_rd_full     = mig_p4_full;\n                        assign p1_rd_empty    = mig_p4_empty;\n\n                        assign p1_rd_data     = {mig_p4_rd_data , mig_p2_rd_data};\n                       \n                       \n                 end else\n                 begin\n                       assign mig_p2_arb_en      = 'b0;\n                   \n                  \n                  \n                       \n                       assign mig_p2_cmd_clk     = 'b0;\n                       assign mig_p2_cmd_en      = 'b0;\n                       assign mig_p2_cmd_ra      = 'b0;\n                       assign mig_p2_cmd_ba      = 'b0;\n                       assign mig_p2_cmd_ca      = 'b0;\n                       assign mig_p2_cmd_instr   = 'b0;\n                       assign mig_p2_cmd_bl      = 'b0;\n                       assign mig_p2_clk      = 'b0;\n                       assign mig_p3_clk      = 'b0;\n                       assign mig_p4_clk      = 'b0;\n                       assign mig_p5_clk      = 'b0;\n                       assign mig_p3_en       = 'b0;\n                       assign mig_p5_en       = 'b0;\n                       assign mig_p3_wr_data  = 'b0;\n                       assign mig_p3_wr_mask  = 'b0;\n                       assign mig_p5_wr_data  = 'b0;\n                       assign mig_p5_wr_mask  = 'b0; \n                       assign mig_p2_en    = 'b0;\n                       assign mig_p4_en    = 'b0;\n                       assign p1_cmd_empty    = 'b0;  \n                       assign p1_cmd_full     = 'b0;  \n\n                       assign p1_wr_count    = 'b0;\n                       assign p1_rd_count    = 'b0;\n                       assign p1_wr_full     = 'b0;\n                       assign p1_wr_error    = 'b0;\n                       assign p1_wr_empty    = 'b0;\n                       assign p1_wr_underrun = 'b0;\n                       assign p1_rd_overflow = 'b0;\n                       assign p1_rd_error    = 'b0; \n                       assign p1_rd_full     = 'b0; \n                       assign p1_rd_empty    = 'b0; \n                       assign p1_rd_data     = 'b0;\n                       \n                 end               \n                \n                  \n                       assign mig_p3_arb_en      =      1'b0;\n                       assign mig_p4_arb_en      =      1'b0;\n                       assign mig_p5_arb_en      =      1'b0;\n                       \n                       assign mig_p3_cmd_clk     =      1'b0;\n                       assign mig_p3_cmd_en      =      1'b0;\n                       assign mig_p3_cmd_ra      =      15'd0;\n                       assign mig_p3_cmd_ba      =      3'd0;\n                       assign mig_p3_cmd_ca      =      12'd0;\n                       assign mig_p3_cmd_instr   =      3'd0;\n\n                       assign mig_p4_cmd_clk     =      1'b0;\n                       assign mig_p4_cmd_en      =      1'b0;\n                       assign mig_p4_cmd_ra      =      15'd0;\n                       assign mig_p4_cmd_ba      =      3'd0;\n                       assign mig_p4_cmd_ca      =      12'd0;\n                       assign mig_p4_cmd_instr   =      3'd0;\n                       assign mig_p4_cmd_bl      =      6'd0;\n\n                       assign mig_p5_cmd_clk     =      1'b0;\n                       assign mig_p5_cmd_en      =      1'b0;\n                       assign mig_p5_cmd_ra      =      15'd0;\n                       assign mig_p5_cmd_ba      =      3'd0;\n                       assign mig_p5_cmd_ca      =      12'd0;                       \n                       assign mig_p5_cmd_instr   =      3'd0;\n                       assign mig_p5_cmd_bl      =      6'd0;\n\n                \n                \n\n  end else if(C_PORT_CONFIG == \"B128\" ) begin : u_config_5\n\n\n               \n               \n               assign mig_p0_arb_en      =  p0_arb_en ;\n               assign mig_p0_cmd_clk     =  p0_cmd_clk  ;\n               assign mig_p0_cmd_en      =  p0_cmd_en   ;\n               assign mig_p0_cmd_ra      =  p0_cmd_ra  ;\n               assign mig_p0_cmd_ba      =  p0_cmd_ba   ;\n               assign mig_p0_cmd_ca      =  p0_cmd_ca  ;\n               assign mig_p0_cmd_instr   =  p0_cmd_instr;\n               assign mig_p0_cmd_bl      =   {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n               \n               assign p0_cmd_empty       =      mig_p0_cmd_empty ;\n               assign p0_cmd_full        =      mig_p0_cmd_full  ;\n               \n \n \n                \n                \n                assign mig_p0_wr_clk   = p0_wr_clk;\n                assign mig_p0_rd_clk   = p0_rd_clk;\n                assign mig_p1_wr_clk   = p0_wr_clk;\n                assign mig_p1_rd_clk   = p0_rd_clk;\n                \n                assign mig_p2_clk   = p0_rd_clk;\n                assign mig_p3_clk   = p0_wr_clk;\n                assign mig_p4_clk   = p0_rd_clk;\n                assign mig_p5_clk   = p0_wr_clk;\n                \n                \n                if (C_USR_INTERFACE_MODE == \"AXI\") begin\n                \n                   assign mig_p0_wr_en    = p0_wr_en ;\n                   assign mig_p1_wr_en    = p0_wr_en ;\n                   assign mig_p3_en       = p0_wr_en ;\n                   assign mig_p5_en       = p0_wr_en ;\n                   end\n                else begin\n                        \n                   assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n                   assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                   assign mig_p3_en       = p0_wr_en & !p0_wr_full;\n                   assign mig_p5_en       = p0_wr_en & !p0_wr_full;\n                end        \n\n                \n                \n                \n                assign mig_p0_wr_data = p0_wr_data[31:0];\n                assign mig_p0_wr_mask = p0_wr_mask[3:0];\n                assign mig_p1_wr_data = p0_wr_data[63 : 32];\n                assign mig_p1_wr_mask = p0_wr_mask[7 : 4];                \n                assign mig_p3_wr_data = p0_wr_data[95 : 64];\n                assign mig_p3_wr_mask = p0_wr_mask[11 : 8];\n                assign mig_p5_wr_data = p0_wr_data[127 : 96];\n                assign mig_p5_wr_mask = p0_wr_mask[15 : 12];\n                \n                if (C_USR_INTERFACE_MODE == \"AXI\") begin\n                    assign mig_p0_rd_en    = p0_rd_en;\n                    assign mig_p1_rd_en    = p0_rd_en;\n                    assign mig_p2_en       = p0_rd_en;\n                    assign mig_p4_en       = p0_rd_en;\n                    end\n                else begin\n                    assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n                    assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n                    assign mig_p2_en       = p0_rd_en & !p0_rd_empty;\n                    assign mig_p4_en       = p0_rd_en & !p0_rd_empty;\n                end\n                \n                \n                assign p0_rd_data     = {mig_p4_rd_data , mig_p2_rd_data , mig_p1_rd_data , mig_p0_rd_data};\n                assign p0_rd_empty    = mig_p4_empty;\n                assign p0_rd_full     = mig_p4_full;\n                assign p0_rd_error    = mig_p0_rd_error | mig_p1_rd_error | mig_p2_error | mig_p4_error;  \n                assign p0_rd_overflow    = mig_p0_rd_overflow | mig_p1_rd_overflow | mig_p2_overflow | mig_p4_overflow; \n\n                assign p0_wr_underrun    = mig_p0_wr_underrun | mig_p1_wr_underrun | mig_p3_underrun | mig_p5_underrun;      \n                assign p0_wr_empty    = mig_p5_empty;\n                assign p0_wr_full     = mig_p5_full;\n                assign p0_wr_error    = mig_p0_wr_error | mig_p1_wr_error | mig_p3_error | mig_p5_error; \n                \n                assign p0_wr_count    = mig_p5_count;\n                assign p0_rd_count    = mig_p4_count;\n\n\n               \n               \n               assign mig_p1_arb_en      =      1'b0;\n               assign mig_p1_cmd_clk     =      1'b0;\n               assign mig_p1_cmd_en      =      1'b0;\n               assign mig_p1_cmd_ra      =      15'd0;\n               assign mig_p1_cmd_ba      =      3'd0;\n               assign mig_p1_cmd_ca      =      12'd0;\n               \n               assign mig_p1_cmd_instr   =      3'd0;\n               assign mig_p1_cmd_bl      =      6'd0;\n               \n               assign mig_p2_arb_en    =      1'b0;\n               assign mig_p2_cmd_clk     =      1'b0;\n               assign mig_p2_cmd_en      =      1'b0;\n               assign mig_p2_cmd_ra      =      15'd0;\n               assign mig_p2_cmd_ba      =      3'd0;\n               assign mig_p2_cmd_ca      =      12'd0;\n               \n               assign mig_p2_cmd_instr   =      3'd0;\n               assign mig_p2_cmd_bl      =      6'd0;\n               \n               assign mig_p3_arb_en    =      1'b0;\n               assign mig_p3_cmd_clk     =      1'b0;\n               assign mig_p3_cmd_en      =      1'b0;\n               assign mig_p3_cmd_ra      =      15'd0;\n               assign mig_p3_cmd_ba      =      3'd0;\n               assign mig_p3_cmd_ca      =      12'd0;\n               \n               assign mig_p3_cmd_instr   =      3'd0;\n               assign mig_p3_cmd_bl      =      6'd0;\n               \n               assign mig_p4_arb_en    =      1'b0;\n               assign mig_p4_cmd_clk     =      1'b0;\n               assign mig_p4_cmd_en      =      1'b0;\n               assign mig_p4_cmd_ra      =      15'd0;\n               assign mig_p4_cmd_ba      =      3'd0;\n               assign mig_p4_cmd_ca      =      12'd0;\n               \n               assign mig_p4_cmd_instr   =      3'd0;\n               assign mig_p4_cmd_bl      =      6'd0;\n               \n               assign mig_p5_arb_en    =      1'b0;\n               assign mig_p5_cmd_clk     =      1'b0;\n               assign mig_p5_cmd_en      =      1'b0;\n               assign mig_p5_cmd_ra      =      15'd0;\n               assign mig_p5_cmd_ba      =      3'd0;\n               assign mig_p5_cmd_ca      =      12'd0;\n               \n               assign mig_p5_cmd_instr   =      3'd0;\n               assign mig_p5_cmd_bl      =      6'd0;\n                             \n\n                                \nend\nendgenerate\n                              \n   MCB \n   # (         .PORT_CONFIG             (C_PORT_CONFIG),                                    \n               .MEM_WIDTH              (C_NUM_DQ_PINS    ),        \n               .MEM_TYPE                (C_MEM_TYPE       ), \n               .MEM_BURST_LEN            (C_MEM_BURST_LEN  ),  \n               .MEM_ADDR_ORDER           (C_MEM_ADDR_ORDER),               \n               .MEM_CAS_LATENCY          (C_MEM_CAS_LATENCY),        \n               .MEM_DDR3_CAS_LATENCY      (C_MEM_DDR3_CAS_LATENCY   ),\n               .MEM_DDR2_WRT_RECOVERY     (C_MEM_DDR2_WRT_RECOVERY  ),\n               .MEM_DDR3_WRT_RECOVERY     (C_MEM_DDR3_WRT_RECOVERY  ),\n               .MEM_MOBILE_PA_SR          (C_MEM_MOBILE_PA_SR       ),\n               .MEM_DDR1_2_ODS              (C_MEM_DDR1_2_ODS         ),\n               .MEM_DDR3_ODS                (C_MEM_DDR3_ODS           ),\n               .MEM_DDR2_RTT                (C_MEM_DDR2_RTT           ),\n               .MEM_DDR3_RTT                (C_MEM_DDR3_RTT           ),\n               .MEM_DDR3_ADD_LATENCY        (C_MEM_DDR3_ADD_LATENCY   ),\n               .MEM_DDR2_ADD_LATENCY        (C_MEM_DDR2_ADD_LATENCY   ),\n               .MEM_MOBILE_TC_SR            (C_MEM_MOBILE_TC_SR       ),\n               .MEM_MDDR_ODS                (C_MEM_MDDR_ODS           ),\n               .MEM_DDR2_DIFF_DQS_EN        (C_MEM_DDR2_DIFF_DQS_EN   ),\n               .MEM_DDR2_3_PA_SR            (C_MEM_DDR2_3_PA_SR       ),\n               .MEM_DDR3_CAS_WR_LATENCY    (C_MEM_DDR3_CAS_WR_LATENCY),\n               .MEM_DDR3_AUTO_SR           (C_MEM_DDR3_AUTO_SR       ),\n               .MEM_DDR2_3_HIGH_TEMP_SR    (C_MEM_DDR2_3_HIGH_TEMP_SR),\n               .MEM_DDR3_DYN_WRT_ODT       (C_MEM_DDR3_DYN_WRT_ODT   ),\n               .MEM_RA_SIZE               (C_MEM_ADDR_WIDTH            ),\n               .MEM_BA_SIZE               (C_MEM_BANKADDR_WIDTH            ),\n               .MEM_CA_SIZE               (C_MEM_NUM_COL_BITS            ),\n               .MEM_RAS_VAL               (MEM_RAS_VAL            ),  \n               .MEM_RCD_VAL               (MEM_RCD_VAL            ),  \n               .MEM_REFI_VAL               (MEM_REFI_VAL           ),  \n               .MEM_RFC_VAL               (MEM_RFC_VAL            ),  \n               .MEM_RP_VAL                (MEM_RP_VAL             ),  \n               .MEM_WR_VAL                (MEM_WR_VAL             ),  \n               .MEM_RTP_VAL               (MEM_RTP_VAL            ),  \n               .MEM_WTR_VAL               (MEM_WTR_VAL            ),\n               .CAL_BYPASS        (C_MC_CALIB_BYPASS),      \n               .CAL_RA            (C_MC_CALIBRATION_RA),     \n               .CAL_BA            (C_MC_CALIBRATION_BA ),    \n               .CAL_CA            (C_MC_CALIBRATION_CA),  \n               .CAL_CLK_DIV        (C_MC_CALIBRATION_CLK_DIV),        \n               .CAL_DELAY         (C_MC_CALIBRATION_DELAY),\n               .ARB_NUM_TIME_SLOTS         (C_ARB_NUM_TIME_SLOTS),\n               .ARB_TIME_SLOT_0            (arbtimeslot0 )     ,    \n               .ARB_TIME_SLOT_1            (arbtimeslot1 )     ,    \n               .ARB_TIME_SLOT_2            (arbtimeslot2 )     ,    \n               .ARB_TIME_SLOT_3            (arbtimeslot3 )     ,    \n               .ARB_TIME_SLOT_4            (arbtimeslot4 )     ,    \n               .ARB_TIME_SLOT_5            (arbtimeslot5 )     ,    \n               .ARB_TIME_SLOT_6            (arbtimeslot6 )     ,    \n               .ARB_TIME_SLOT_7            (arbtimeslot7 )     ,    \n               .ARB_TIME_SLOT_8            (arbtimeslot8 )     ,    \n               .ARB_TIME_SLOT_9            (arbtimeslot9 )     ,    \n               .ARB_TIME_SLOT_10           (arbtimeslot10)   ,         \n               .ARB_TIME_SLOT_11           (arbtimeslot11)            \n             )  samc_0                                                \n     (                                                              \n                                                                    \n             \n             \n             .PLLCLK            ({ioclk90,ioclk0}),\n             .PLLCE              ({pll_ce_90,pll_ce_0})       ,\n\n             .PLLLOCK       (1'b1),\n             \n             \n             \n             .DQSIOIN           (idelay_dqs_ioi_s),\n             .DQSIOIP           (idelay_dqs_ioi_m),\n             .UDQSIOIN          (idelay_udqs_ioi_s),\n             .UDQSIOIP          (idelay_udqs_ioi_m),\n\n\n               \n               .DQI       (in_dq),\n             \n             .SYSRST         (MCB_SYSRST ), \n   \n            \n             .P0ARBEN            (mig_p0_arb_en),\n             .P0CMDCLK           (mig_p0_cmd_clk),\n             .P0CMDEN            (mig_p0_cmd_en),\n             .P0CMDRA            (mig_p0_cmd_ra),\n             .P0CMDBA            (mig_p0_cmd_ba),\n             .P0CMDCA            (mig_p0_cmd_ca),\n             \n             .P0CMDINSTR         (mig_p0_cmd_instr),\n             .P0CMDBL            (mig_p0_cmd_bl),\n             .P0CMDEMPTY         (mig_p0_cmd_empty),\n             .P0CMDFULL          (mig_p0_cmd_full),\n             \n             \n            \n             .P1ARBEN            (mig_p1_arb_en),\n             .P1CMDCLK           (mig_p1_cmd_clk),\n             .P1CMDEN            (mig_p1_cmd_en),\n             .P1CMDRA            (mig_p1_cmd_ra),\n             .P1CMDBA            (mig_p1_cmd_ba),\n             .P1CMDCA            (mig_p1_cmd_ca),\n             \n             .P1CMDINSTR         (mig_p1_cmd_instr),\n             .P1CMDBL            (mig_p1_cmd_bl),\n             .P1CMDEMPTY         (mig_p1_cmd_empty),\n             .P1CMDFULL          (mig_p1_cmd_full),\n\n             \n             \n             .P2ARBEN            (mig_p2_arb_en),\n             .P2CMDCLK           (mig_p2_cmd_clk),\n             .P2CMDEN            (mig_p2_cmd_en),\n             .P2CMDRA            (mig_p2_cmd_ra),\n             .P2CMDBA            (mig_p2_cmd_ba),\n             .P2CMDCA            (mig_p2_cmd_ca),\n             \n             .P2CMDINSTR         (mig_p2_cmd_instr),\n             .P2CMDBL            (mig_p2_cmd_bl),\n             .P2CMDEMPTY         (mig_p2_cmd_empty),\n             .P2CMDFULL          (mig_p2_cmd_full),\n\n             \n             \n             .P3ARBEN            (mig_p3_arb_en),\n             .P3CMDCLK           (mig_p3_cmd_clk),\n             .P3CMDEN            (mig_p3_cmd_en),\n             .P3CMDRA            (mig_p3_cmd_ra),\n             .P3CMDBA            (mig_p3_cmd_ba),\n             .P3CMDCA            (mig_p3_cmd_ca),\n                               \n             .P3CMDINSTR         (mig_p3_cmd_instr),\n             .P3CMDBL            (mig_p3_cmd_bl),\n             .P3CMDEMPTY         (mig_p3_cmd_empty),\n             .P3CMDFULL          (mig_p3_cmd_full),\n\n             \n             \n             .P4ARBEN            (mig_p4_arb_en),\n             .P4CMDCLK           (mig_p4_cmd_clk),\n             .P4CMDEN            (mig_p4_cmd_en),\n             .P4CMDRA            (mig_p4_cmd_ra),\n             .P4CMDBA            (mig_p4_cmd_ba),\n             .P4CMDCA            (mig_p4_cmd_ca),\n                               \n             .P4CMDINSTR         (mig_p4_cmd_instr),\n             .P4CMDBL            (mig_p4_cmd_bl),\n             .P4CMDEMPTY         (mig_p4_cmd_empty),\n             .P4CMDFULL          (mig_p4_cmd_full),\n\n             \n             \n             .P5ARBEN            (mig_p5_arb_en),\n             .P5CMDCLK           (mig_p5_cmd_clk),\n             .P5CMDEN            (mig_p5_cmd_en),\n             .P5CMDRA            (mig_p5_cmd_ra),\n             .P5CMDBA            (mig_p5_cmd_ba),\n             .P5CMDCA            (mig_p5_cmd_ca),\n                               \n             .P5CMDINSTR         (mig_p5_cmd_instr),\n             .P5CMDBL            (mig_p5_cmd_bl),\n             .P5CMDEMPTY         (mig_p5_cmd_empty),\n             .P5CMDFULL          (mig_p5_cmd_full),\n\n              \n             \n             \n             .DQIOWEN0        (dqIO_w_en_0),\n             .DQSIOWEN90P     (dqsIO_w_en_90_p),\n             .DQSIOWEN90N     (dqsIO_w_en_90_n),\n             \n             \n             \n             .ADDR         (address_90),  \n             .BA           (ba_90 ),      \n             .RAS         (ras_90 ),     \n             .CAS         (cas_90 ),     \n             .WE          (we_90  ),     \n             .CKE          (cke_90 ),     \n             .ODT          (odt_90 ),     \n             .RST          (rst_90 ),     \n             \n             \n             .IOIDRPCLK           (ioi_drp_clk    ),\n             .IOIDRPADDR          (ioi_drp_addr   ),\n             .IOIDRPSDO           (ioi_drp_sdo    ), \n             .IOIDRPSDI           (ioi_drp_sdi    ), \n             .IOIDRPCS            (ioi_drp_cs     ),\n             .IOIDRPADD           (ioi_drp_add    ), \n             .IOIDRPBROADCAST     (ioi_drp_broadcast  ),\n             .IOIDRPTRAIN         (ioi_drp_train    ),\n             .IOIDRPUPDATE         (ioi_drp_update) ,\n             \n             \n             \n             .RECAL               (mcb_recal    ), \n             .UIREAD               (mcb_ui_read),\n             .UIADD                (mcb_ui_add)    ,\n             .UICS                 (mcb_ui_cs)     ,\n             .UICLK                (mcb_ui_clk)    ,\n             .UISDI                (mcb_ui_sdi)    ,\n             .UIADDR               (mcb_ui_addr)   ,\n             .UIBROADCAST          (mcb_ui_broadcast) ,\n             .UIDRPUPDATE          (mcb_ui_drp_update) ,\n             .UIDONECAL            (mcb_ui_done_cal)   ,\n             .UICMD                (mcb_ui_cmd),\n             .UICMDIN              (mcb_ui_cmd_in)     ,\n             .UICMDEN              (mcb_ui_cmd_en)     ,\n             .UIDQCOUNT            (mcb_ui_dqcount)    ,\n             .UIDQLOWERDEC          (mcb_ui_dq_lower_dec),\n             .UIDQLOWERINC          (mcb_ui_dq_lower_inc),\n             .UIDQUPPERDEC          (mcb_ui_dq_upper_dec),\n             .UIDQUPPERINC          (mcb_ui_dq_upper_inc),\n             .UIUDQSDEC          (mcb_ui_udqs_dec),\n             .UIUDQSINC          (mcb_ui_udqs_inc),\n             .UILDQSDEC          (mcb_ui_ldqs_dec),\n             .UILDQSINC          (mcb_ui_ldqs_inc),\n             .UODATA             (uo_data),\n             .UODATAVALID          (uo_data_valid),\n             .UODONECAL            (hard_done_cal)  ,\n             .UOCMDREADYIN         (uo_cmd_ready_in),\n             .UOREFRSHFLAG         (uo_refrsh_flag),\n             .UOCALSTART           (uo_cal_start)   ,\n             .UOSDO                (uo_sdo),\n                                                   \n             \n              .STATUS                    (status),\n              .SELFREFRESHENTER          (selfrefresh_mcb_enter  ),\n              .SELFREFRESHMODE           (selfrefresh_mcb_mode ),  \n\n\n\n            \n              .P0RDDATA         ( mig_p0_rd_data[31:0]    ), \n              .P1RDDATA         ( mig_p1_rd_data[31:0]   ), \n              .P2RDDATA         ( mig_p2_rd_data[31:0]  ), \n              .P3RDDATA         ( mig_p3_rd_data[31:0]       ),\n              .P4RDDATA         ( mig_p4_rd_data[31:0] ), \n              .P5RDDATA         ( mig_p5_rd_data[31:0]        ), \n              .LDMN             ( dqnlm       ),\n              .UDMN             ( dqnum       ),\n              .DQON             ( dqo_n       ),\n              .DQOP             ( dqo_p       ),\n              .LDMP             ( dqplm       ),\n              .UDMP             ( dqpum       ),\n              \n              .P0RDCOUNT          ( mig_p0_rd_count ), \n              .P0WRCOUNT          ( mig_p0_wr_count ),\n              .P1RDCOUNT          ( mig_p1_rd_count ), \n              .P1WRCOUNT          ( mig_p1_wr_count ), \n              .P2COUNT           ( mig_p2_count  ), \n              .P3COUNT           ( mig_p3_count  ),\n              .P4COUNT           ( mig_p4_count  ),\n              .P5COUNT           ( mig_p5_count  ),\n              \n              \n              \n              .P0RDEMPTY        ( mig_p0_rd_empty), \n              .P0RDFULL         ( mig_p0_rd_full), \n              .P0RDOVERFLOW     ( mig_p0_rd_overflow), \n              .P0WREMPTY        ( mig_p0_wr_empty), \n              .P0WRFULL         ( mig_p0_wr_full), \n              .P0WRUNDERRUN     ( mig_p0_wr_underrun), \n              \n              .P1RDEMPTY        ( mig_p1_rd_empty), \n              .P1RDFULL         ( mig_p1_rd_full), \n              .P1RDOVERFLOW     ( mig_p1_rd_overflow),  \n              .P1WREMPTY        ( mig_p1_wr_empty), \n              .P1WRFULL         ( mig_p1_wr_full), \n              .P1WRUNDERRUN     ( mig_p1_wr_underrun),  \n              \n              \n              .P2EMPTY          ( mig_p2_empty),\n              .P2FULL           ( mig_p2_full),\n              .P2RDOVERFLOW        ( mig_p2_overflow), \n              .P2WRUNDERRUN       ( mig_p2_underrun), \n              \n              .P3EMPTY          ( mig_p3_empty ),\n              .P3FULL           ( mig_p3_full ),\n              .P3RDOVERFLOW        ( mig_p3_overflow), \n              .P3WRUNDERRUN       ( mig_p3_underrun ),\n              \n              .P4EMPTY          ( mig_p4_empty),\n              .P4FULL           ( mig_p4_full),\n              .P4RDOVERFLOW        ( mig_p4_overflow), \n              .P4WRUNDERRUN       ( mig_p4_underrun), \n              \n              .P5EMPTY          ( mig_p5_empty ),\n              .P5FULL           ( mig_p5_full ),\n              .P5RDOVERFLOW        ( mig_p5_overflow), \n              .P5WRUNDERRUN       ( mig_p5_underrun), \n              \n              \n              .P0WREN        ( mig_p0_wr_en), \n              .P0RDEN        ( mig_p0_rd_en),                         \n              .P1WREN        ( mig_p1_wr_en), \n              .P1RDEN        ( mig_p1_rd_en), \n              .P2EN          ( mig_p2_en),\n              .P3EN          ( mig_p3_en), \n              .P4EN          ( mig_p4_en), \n              .P5EN          ( mig_p5_en), \n              \n              .P0RWRMASK        ( mig_p0_wr_mask[3:0]), \n              .P1RWRMASK        ( mig_p1_wr_mask[3:0]),\n              .P2WRMASK        ( mig_p2_wr_mask[3:0]),\n              .P3WRMASK        ( mig_p3_wr_mask[3:0]), \n              .P4WRMASK        ( mig_p4_wr_mask[3:0]),\n              .P5WRMASK        ( mig_p5_wr_mask[3:0]), \n              \n              .P0WRDATA      ( mig_p0_wr_data[31:0]), \n              .P1WRDATA      ( mig_p1_wr_data[31:0]),\n              .P2WRDATA      ( mig_p2_wr_data[31:0]),\n              .P3WRDATA      ( mig_p3_wr_data[31:0]), \n              .P4WRDATA      ( mig_p4_wr_data[31:0]),\n              .P5WRDATA      ( mig_p5_wr_data[31:0]),  \n              \n              .P0WRERROR     (mig_p0_wr_error),\n              .P1WRERROR     (mig_p1_wr_error),\n              .P0RDERROR     (mig_p0_rd_error),\n              .P1RDERROR     (mig_p1_rd_error),\n              \n              .P2ERROR       (mig_p2_error),\n              .P3ERROR       (mig_p3_error),\n              .P4ERROR       (mig_p4_error),\n              .P5ERROR       (mig_p5_error),\n              \n              \n              \n              .P0WRCLK            ( mig_p0_wr_clk  ),\n              .P1WRCLK            ( mig_p1_wr_clk  ),\n              .P0RDCLK            ( mig_p0_rd_clk  ),\n              .P1RDCLK            ( mig_p1_rd_clk  ),\n              .P2CLK              ( mig_p2_clk  ),\n              .P3CLK              ( mig_p3_clk  ),\n              .P4CLK              ( mig_p4_clk  ),\n              .P5CLK              ( mig_p5_clk) \n              \n              \n              \n                            \n            \n              );\n             \n\n\n\n\nwire                          DONE_SOFTANDHARD_CAL;\n\nassign uo_done_cal = (   C_CALIB_SOFT_IP == \"TRUE\") ? DONE_SOFTANDHARD_CAL : hard_done_cal;\ngenerate   \nif ( C_CALIB_SOFT_IP == \"TRUE\") begin: gen_term_calib\n\n\n  \n\n \nmcb_soft_calibration_top  # (\n\n    .C_MEM_TZQINIT_MAXCNT (C_MEM_TZQINIT_MAXCNT),\n    .C_MC_CALIBRATION_MODE(C_MC_CALIBRATION_MODE),\n    .SKIP_IN_TERM_CAL     (C_SKIP_IN_TERM_CAL),\n    .SKIP_DYNAMIC_CAL     (C_SKIP_DYNAMIC_CAL),\n    .SKIP_DYN_IN_TERM     (C_SKIP_DYN_IN_TERM),\n    .C_SIMULATION         (C_SIMULATION),\n    .C_MEM_TYPE           (C_MEM_TYPE)\n        )\n  mcb_soft_calibration_top_inst (\n    .UI_CLK               (ui_clk),               \n    .RST                  (int_sys_rst),              \n    .IOCLK                (ioclk0),               \n    .DONE_SOFTANDHARD_CAL (DONE_SOFTANDHARD_CAL), \n    .PLL_LOCK             (gated_pll_lock),\n    \n    .SELFREFRESH_REQ      (soft_cal_selfrefresh_req),    \n    .SELFREFRESH_MCB_MODE (selfrefresh_mcb_mode), \n    .SELFREFRESH_MCB_REQ  (selfrefresh_mcb_enter),\n    .SELFREFRESH_MODE     (selfrefresh_mode),     \n    \n    \n    \n    .MCB_UIADD            (mcb_ui_add),\n    .MCB_UISDI            (mcb_ui_sdi),\n    .MCB_UOSDO            (uo_sdo),               \n    .MCB_UODONECAL        (hard_done_cal),        \n    .MCB_UOREFRSHFLAG     (uo_refrsh_flag),       \n    .MCB_UICS             (mcb_ui_cs),            \n    .MCB_UIDRPUPDATE      (mcb_ui_drp_update),    \n    .MCB_UIBROADCAST      (mcb_ui_broadcast),     \n    .MCB_UIADDR           (mcb_ui_addr),          \n    .MCB_UICMDEN          (mcb_ui_cmd_en),        \n    .MCB_UIDONECAL        (mcb_ui_done_cal),      \n    .MCB_UIDQLOWERDEC     (mcb_ui_dq_lower_dec),\n    .MCB_UIDQLOWERINC     (mcb_ui_dq_lower_inc),\n    .MCB_UIDQUPPERDEC     (mcb_ui_dq_upper_dec),\n    .MCB_UIDQUPPERINC     (mcb_ui_dq_upper_inc),\n    .MCB_UILDQSDEC        (mcb_ui_ldqs_dec),\n    .MCB_UILDQSINC        (mcb_ui_ldqs_inc),\n    .MCB_UIREAD           (mcb_ui_read),          \n    .MCB_UIUDQSDEC        (mcb_ui_udqs_dec),\n    .MCB_UIUDQSINC        (mcb_ui_udqs_inc),\n    .MCB_RECAL            (mcb_recal),\n    .MCB_SYSRST           (MCB_SYSRST),           \n    .MCB_UICMD            (mcb_ui_cmd),\n    .MCB_UICMDIN          (mcb_ui_cmd_in),\n    .MCB_UIDQCOUNT        (mcb_ui_dqcount),\n    .MCB_UODATA           (uo_data),\n    .MCB_UODATAVALID      (uo_data_valid),\n    .MCB_UOCMDREADY       (uo_cmd_ready_in),\n    .MCB_UO_CAL_START     (uo_cal_start),\n    .RZQ_Pin              (rzq),\n    .ZIO_Pin              (zio),\n    .CKE_Train            (cke_train)\n    \n     );\n\n\n\n\n\n\n        assign mcb_ui_clk = ui_clk;\nend\nendgenerate\n\ngenerate   \nif ( C_CALIB_SOFT_IP != \"TRUE\") begin: gen_no_term_calib   \n    assign DONE_SOFTANDHARD_CAL = 1'b0;\n    assign MCB_SYSRST = int_sys_rst | (~wait_200us_counter[15]);\n    assign mcb_recal = calib_recal;\n    assign mcb_ui_read = ui_read;\n    assign mcb_ui_add = ui_add;\n    assign mcb_ui_cs = ui_cs;  \n    assign mcb_ui_clk = ui_clk;\n    assign mcb_ui_sdi = ui_sdi;\n    assign mcb_ui_addr = ui_addr;\n    assign mcb_ui_broadcast = ui_broadcast;\n    assign mcb_ui_drp_update = ui_drp_update;\n    assign mcb_ui_done_cal = ui_done_cal;\n    assign mcb_ui_cmd = ui_cmd;\n    assign mcb_ui_cmd_in = ui_cmd_in;\n    assign mcb_ui_cmd_en = ui_cmd_en;\n    assign mcb_ui_dq_lower_dec = ui_dq_lower_dec;\n    assign mcb_ui_dq_lower_inc = ui_dq_lower_inc;\n    assign mcb_ui_dq_upper_dec = ui_dq_upper_dec;\n    assign mcb_ui_dq_upper_inc = ui_dq_upper_inc;\n    assign mcb_ui_udqs_inc = ui_udqs_inc;\n    assign mcb_ui_udqs_dec = ui_udqs_dec;\n    assign mcb_ui_ldqs_inc = ui_ldqs_inc;\n    assign mcb_ui_ldqs_dec = ui_ldqs_dec; \n    assign selfrefresh_mode = 1'b0;\n \n    if (C_SIMULATION == \"FALSE\") begin: init_sequence\n        always @ (posedge ui_clk, posedge int_sys_rst)\n        begin\n            if (int_sys_rst)\n                wait_200us_counter <= 'b0;\n            else \n               if (wait_200us_counter[15])  \n                   wait_200us_counter <= wait_200us_counter                        ;\n               else\n                   wait_200us_counter <= wait_200us_counter + 1'b1;\n        end \n    end \n    else begin: init_sequence_skip\n\n        initial\n        begin\n           wait_200us_counter = 16'hFFFF;\n           $display(\"The 200 us wait period required before CKE goes active has been skipped in Simulation\\n\");\n        end       \n\n    end\n   \n    \n    if( C_MEM_TYPE == \"DDR2\") begin : gen_cketrain_a\n\n        always @ ( posedge ui_clk)\n        begin \n          \n          \n          if (wait_200us_counter[14] && wait_200us_counter[13])\n             wait_200us_done_r1 <= 1'b1;\n          else\n             wait_200us_done_r1 <= 1'b0;\n          \n\n          wait_200us_done_r2 <= wait_200us_done_r1;\n        end\n        \n        always @ ( posedge ui_clk, posedge int_sys_rst)\n        begin \n        if (int_sys_rst)\n           cke_train_reg <= 1'b0;\n        else \n           if ( wait_200us_done_r1 && ~wait_200us_done_r2 )\n               cke_train_reg <= 1'b1;\n           else if ( uo_done_cal)\n               cke_train_reg <= 1'b0;\n        end\n        \n        assign cke_train = cke_train_reg;\n    end\n\n    if( C_MEM_TYPE != \"DDR2\") begin : gen_cketrain_b\n    \n        assign cke_train = 1'b0;\n    end        \n        \n        \nend \nendgenerate\n\n\n\n\n\n\n\n\n\ngenvar addr_ioi;\n   generate \n      for(addr_ioi = 0; addr_ioi < C_MEM_ADDR_WIDTH; addr_ioi = addr_ioi + 1) begin : gen_addr_oserdes2\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_addr_0  \n(\n  .OQ(ioi_addr[addr_ioi]),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ(t_addr[addr_ioi]),\n  .CLK0(ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1(address_90[addr_ioi]),\n  .D2(address_90[addr_ioi]),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE(pll_ce_0),\n  .OCE(1'b1),\n  .RST(int_sys_rst),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3(1'b0),\n  .SHIFTIN4(1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN(1'b0)\n    );\n end       \n   endgenerate\n\n\n\n\n\ngenvar ba_ioi;\n   generate \n      for(ba_ioi = 0; ba_ioi < C_MEM_BANKADDR_WIDTH; ba_ioi = ba_ioi + 1) begin : gen_ba_oserdes2\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ba_0  \n(\n  .OQ       (ioi_ba[ba_ioi]),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_ba[ba_ioi]),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (ba_90[ba_ioi]),\n  .D2       (ba_90[ba_ioi]),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\n end       \n   endgenerate\n\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_cas_0 \n(\n  .OQ       (ioi_cas),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_cas),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (cas_90),\n  .D2       (cas_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\n\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)    ,       \n  .TRAIN_PATTERN (15)\n) ioi_cke_0 \n(\n  .OQ       (ioi_cke),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_cke),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (cke_90),\n  .D2       (cke_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n  .RST      (1'b0),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (cke_train)\n    );\n\n\n\n\ngenerate\nif(C_MEM_TYPE == \"DDR3\" || C_MEM_TYPE == \"DDR2\" ) begin : gen_ioi_odt\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_odt_0 \n(\n  .OQ       (ioi_odt),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_odt),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (odt_90),\n  .D2       (odt_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\nend\nendgenerate\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ras_0 \n(\n  .OQ       (ioi_ras),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_ras),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (ras_90),\n  .D2       (ras_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1 (1'b0),\n  .T2 (1'b0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE (1'b1),\n  .TRAIN    (1'b0)\n    );\n\n\n\n\ngenerate \nif (C_MEM_TYPE == \"DDR3\"  ) begin : gen_ioi_rst\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_rst_0 \n(\n  .OQ       (ioi_rst),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_rst),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (rst_90),\n  .D2       (rst_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\nend\nendgenerate\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_we_0 \n(\n  .OQ       (ioi_we),\n  .TQ       (t_we),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (we_90),\n  .D2       (we_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ck_0 \n(\n  .OQ       (ioi_ck),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (t_ck),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b0),\n  .D2       (1'b1),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n\n  .RST      (1'b0),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwire udm_oq;\nwire udm_t;\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_udm_0 \n(\n  .OQ       (udm_oq),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (udm_t),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqpum),\n  .D2       (dqnum),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\nwire ldm_oq;\nwire ldm_t;\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ldm_0 \n(\n  .OQ       (ldm_oq),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (ldm_t),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqplm),\n  .D2       (dqnlm),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire dq_oq [C_NUM_DQ_PINS-1:0];\nwire dq_tq [C_NUM_DQ_PINS-1:0];\n\ngenvar dq;\ngenerate\n      for(dq = 0; dq < C_NUM_DQ_PINS; dq = dq + 1) begin : gen_dq\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2),           \n  .TRAIN_PATTERN (5)            \n) oserdes2_dq_0 \n(\n  .OQ       (dq_oq[dq]),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (dq_tq[dq]),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqo_p[dq]),\n  .D2       (dqo_n[dq]),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (ioi_drp_train)\n);\n\nend\nendgenerate\n\n\n\n\n\nwire dqsp_oq ;\nwire dqsp_tq ;\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) oserdes2_dqsp_0 \n(\n  .OQ       (dqsp_oq),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (dqsp_tq),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b0),\n  .D2       (1'b1),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqsIO_w_en_90_n),\n  .T2       (dqsIO_w_en_90_p),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire dqsn_oq ;\nwire dqsn_tq ;\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_SLAVE),          \n  .DATA_WIDTH    (2)           \n) oserdes2_dqsn_0 \n(\n  .OQ       (dqsn_oq),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (dqsn_tq),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b1),\n  .D2       (1'b0),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3(1'b0),\n  .SHIFTIN4(1'b0),\n  .T1       (dqsIO_w_en_90_n),\n  .T2       (dqsIO_w_en_90_p),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire udqsp_oq ;\nwire udqsp_tq ;\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) oserdes2_udqsp_0 \n(\n  .OQ       (udqsp_oq),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (udqsp_tq),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b0),\n  .D2       (1'b1),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqsIO_w_en_90_n),\n  .T2       (dqsIO_w_en_90_p),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire udqsn_oq ;\nwire udqsn_tq ;\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_SLAVE),          \n  .DATA_WIDTH    (2)           \n) oserdes2_udqsn_0 \n(\n  .OQ       (udqsn_oq),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (udqsn_tq),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b1),\n  .D2       (1'b0),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3(1'b0),\n  .SHIFTIN4(1'b0),\n  .T1       (dqsIO_w_en_90_n),\n  .T2       (dqsIO_w_en_90_p),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire aux_sdi_out_udqsp;\nwire aux_sdi_out_10;\nwire aux_sdi_out_11;\nwire aux_sdi_out_12;\nwire aux_sdi_out_14;\nwire aux_sdi_out_15;\n\n\n\n\ngenerate\nif(C_NUM_DQ_PINS == 16 ) begin : dq_15_0_data\n\n\n\n\nwire aux_sdi_out_14;\nwire aux_sdi_out_15;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ14_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (7),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n)\niodrp2_dq_14\n(\n  .AUXSDO             (aux_sdi_out_14),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[14]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[14]),\n  .SDO(),\n  .TOUT               (t_dq[14]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_15),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[14]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[14]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[14]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ15_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (7),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_15\n(\n  .AUXSDO             (aux_sdi_out_15),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[15]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[15]),\n  .SDO(),\n  .TOUT               (t_dq[15]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[15]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[15]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[15]) \n);\n\n\n\nwire aux_sdi_out_12;\nwire aux_sdi_out_13;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ12_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (6),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_12\n(\n  .AUXSDO             (aux_sdi_out_12),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[12]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[12]),\n  .SDO(),\n  .TOUT               (t_dq[12]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_13),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[12]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[12]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[12]) \n);\n\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ13_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (6),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_13\n(\n  .AUXSDO             (aux_sdi_out_13),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[13]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[13]),\n  .SDO(),\n  .TOUT               (t_dq[13]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_14),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[13]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[13]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[13]) \n);\n\n\nwire aux_sdi_out_udqsp;\nwire aux_sdi_out_udqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (UDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (14),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_udqsp_0\n(\n  .AUXSDO             (aux_sdi_out_udqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_udqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_udqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_udqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_udqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (UDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (14),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_udqsn_0\n(\n  .AUXSDO             (aux_sdi_out_udqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_udqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_udqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_12),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_udqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udqsn_tq) \n);\n\n\nwire aux_sdi_out_10;\nwire aux_sdi_out_11;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ10_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (5),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_10\n(\n  .AUXSDO             (aux_sdi_out_10),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[10]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[10]),\n  .SDO(),\n  .TOUT               (t_dq[10]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_11),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[10]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[10]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[10]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ11_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (5),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_11\n(\n  .AUXSDO             (aux_sdi_out_11),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[11]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[11]),\n  .SDO(),\n  .TOUT               (t_dq[11]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_udqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[11]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[11]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[11])\n);\n\n\n\nwire aux_sdi_out_8;\nwire aux_sdi_out_9;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ8_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (4),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_8\n(\n  .AUXSDO             (aux_sdi_out_8),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[8]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[8]),\n  .SDO(),\n  .TOUT               (t_dq[8]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_9),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[8]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[8]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[8]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ9_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (4),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_9\n(\n  .AUXSDO             (aux_sdi_out_9),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[9]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[9]),\n  .SDO(),\n  .TOUT               (t_dq[9]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_10),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[9]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[9]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[9]) \n);\n\n\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_8),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\nwire aux_sdi_out_6;\nwire aux_sdi_out_7;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ6_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_6\n(\n  .AUXSDO             (aux_sdi_out_6),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[6]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[6]),\n  .SDO(),\n  .TOUT               (t_dq[6]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_7),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[6]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[6]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[6]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ7_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_7\n(\n  .AUXSDO             (aux_sdi_out_7),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[7]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[7]),\n  .SDO(),\n  .TOUT               (t_dq[7]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[7]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[7]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[7]) \n);\n\n\n\nwire aux_sdi_out_4;\nwire aux_sdi_out_5;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ4_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_4\n(\n  .AUXSDO             (aux_sdi_out_4),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[4]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[4]),\n  .SDO(),\n  .TOUT               (t_dq[4]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_5),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[4]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[4]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[4]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ5_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_5\n(\n  .AUXSDO             (aux_sdi_out_5),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[5]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[5]),\n  .SDO(),\n  .TOUT               (t_dq[5]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_6),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[5]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[5]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[5]) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\nend\nendgenerate\n\ngenerate\nif(C_NUM_DQ_PINS == 8 ) begin : dq_7_0_data\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\nwire aux_sdi_out_6;\nwire aux_sdi_out_7;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ6_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_6\n(\n  .AUXSDO             (aux_sdi_out_6),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[6]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[6]),\n  .SDO(),\n  .TOUT               (t_dq[6]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_7),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[6]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[6]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[6]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ7_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_7\n(\n  .AUXSDO             (aux_sdi_out_7),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[7]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[7]),\n  .SDO(),\n  .TOUT               (t_dq[7]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[7]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[7]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[7]) \n);\n\n\n\nwire aux_sdi_out_4;\nwire aux_sdi_out_5;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ4_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_4\n(\n  .AUXSDO             (aux_sdi_out_4),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[4]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[4]),\n  .SDO(),\n  .TOUT               (t_dq[4]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_5),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[4]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[4]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[4]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ5_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_5\n(\n  .AUXSDO             (aux_sdi_out_5),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[5]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[5]),\n  .SDO(),\n  .TOUT               (t_dq[5]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_6),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[5]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[5]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[5]) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\nend\nendgenerate\n\ngenerate\nif(C_NUM_DQ_PINS == 4 ) begin : dq_3_0_data\n\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\n\nend\nendgenerate\n\n \n \n \n \n \n\n\n\n\ngenvar addr_i;\n   generate \n      for(addr_i = 0; addr_i < C_MEM_ADDR_WIDTH; addr_i = addr_i + 1) begin : gen_addr_obuft\n        OBUFT iob_addr_inst\n        (.I  ( ioi_addr[addr_i]), \n         .T   ( t_addr[addr_i]), \n         .O ( mcbx_dram_addr[addr_i])\n        );\n      end       \n   endgenerate\n\ngenvar ba_i;\n   generate \n      for(ba_i = 0; ba_i < C_MEM_BANKADDR_WIDTH; ba_i = ba_i + 1) begin : gen_ba_obuft\n        OBUFT iob_ba_inst\n        (.I  ( ioi_ba[ba_i]), \n         .T   ( t_ba[ba_i]), \n         .O ( mcbx_dram_ba[ba_i])\n        );\n      end       \n   endgenerate\n\n\n\n\nOBUFT iob_ras (.O(mcbx_dram_ras_n),.I(ioi_ras),.T(t_ras));\nOBUFT iob_cas (.O(mcbx_dram_cas_n),.I(ioi_cas),.T(t_cas));\nOBUFT iob_we  (.O(mcbx_dram_we_n ),.I(ioi_we ),.T(t_we ));\nOBUFT iob_cke (.O(mcbx_dram_cke),.I(ioi_cke),.T(t_cke));\n\ngenerate \nif (C_MEM_TYPE == \"DDR3\") begin : gen_ddr3_rst\nOBUFT iob_rst (.O(mcbx_dram_ddr3_rst),.I(ioi_rst),.T(t_rst));\nend\nendgenerate\ngenerate\nif((C_MEM_TYPE == \"DDR3\"  && (C_MEM_DDR3_RTT != \"OFF\" || C_MEM_DDR3_DYN_WRT_ODT != \"OFF\"))\n ||(C_MEM_TYPE == \"DDR2\" &&  C_MEM_DDR2_RTT != \"OFF\") ) begin : gen_dram_odt\nOBUFT iob_odt (.O(mcbx_dram_odt),.I(ioi_odt),.T(t_odt));\nend\nendgenerate\n\n\nOBUFTDS iob_clk  (.I(ioi_ck), .T(t_ck), .O(mcbx_dram_clk), .OB(mcbx_dram_clk_n)); \n\n\ngenvar dq_i;\ngenerate\n      for(dq_i = 0; dq_i < C_NUM_DQ_PINS; dq_i = dq_i + 1) begin : gen_dq_iobuft\n         IOBUF gen_iob_dq_inst (.IO(mcbx_dram_dq[dq_i]),.I(ioi_dq[dq_i]),.T(t_dq[dq_i]),.O(in_pre_dq[dq_i]));\n      end\nendgenerate\n\n\n\ngenerate \nif(C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) begin: gen_dqs_iobuf\nIOBUF iob_dqs  (.IO(mcbx_dram_dqs), .I(ioi_dqs),.T(t_dqs),.O(in_pre_dqsp));\nend else begin: gen_dqs_iobufds\nIOBUFDS iob_dqs  (.IO(mcbx_dram_dqs),.IOB(mcbx_dram_dqs_n), .I(ioi_dqs),.T(t_dqs),.O(in_pre_dqsp));\n\nend\nendgenerate\n\ngenerate\nif((C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) && C_NUM_DQ_PINS == 16) begin: gen_udqs_iobuf\nIOBUF iob_udqs  (.IO(mcbx_dram_udqs), .I(ioi_udqs),.T(t_udqs),.O(in_pre_udqsp));\nend else if(C_NUM_DQ_PINS == 16) begin: gen_udqs_iobufds\nIOBUFDS iob_udqs  (.IO(mcbx_dram_udqs),.IOB(mcbx_dram_udqs_n), .I(ioi_udqs),.T(t_udqs),.O(in_pre_udqsp));\n\nend\nendgenerate\n\n\ngenerate \nif(C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) begin: gen_dqs_pullupdn\nPULLDOWN dqs_pulldown (.O(mcbx_dram_dqs));\nend else begin: gen_dqs_pullupdn_ds\nPULLDOWN dqs_pulldown (.O(mcbx_dram_dqs));\nPULLUP dqs_n_pullup (.O(mcbx_dram_dqs_n));\n\nend\nendgenerate\n\n\ngenerate\nif((C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) && C_NUM_DQ_PINS == 16) begin: gen_udqs_pullupdn\nPULLDOWN udqs_pulldown (.O(mcbx_dram_udqs));\nend else if(C_NUM_DQ_PINS == 16) begin: gen_udqs_pullupdn_ds\nPULLDOWN udqs_pulldown (.O(mcbx_dram_udqs));\nPULLUP   udqs_n_pullup (.O(mcbx_dram_udqs_n));\n\nend\nendgenerate\n\n\n\n\n\n\ngenerate\nif( C_NUM_DQ_PINS == 16) begin : gen_udm\nOBUFT iob_udm (.I(ioi_udm), .T(t_udm), .O(mcbx_dram_udm)); \nend\nendgenerate\n\nOBUFT iob_ldm (.I(ioi_ldm), .T(t_ldm), .O(mcbx_dram_ldm)); \n\nendmodule\n\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: mcb_raw_wrapper. Module specification: This module is a wrapper for a Memory Controller Block (MCB) that interfaces with various types of DRAM (DDR, DDR2, DDR3, LPDDR). It handles the configuration and control of memory operations, including address and data management, command generation, and I/O buffer instantiation. The module supports different port configurations and memory widths, and includes features such as calibration, DQS (data strobe) management, and various timing parameters. Key input ports include clock signals (sysclk_2x, sysclk_2x_180), control signals (pll_ce_0, pll_ce_90, pll_lock, sys_rst), and multiple port-specific inputs for commands, data, and control. Output ports include memory interface signals (mcbx_dram_addr, mcbx_dram_"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: mcb_raw_wrapper\n\nExplanation: This module is a wrapper for a Memory Controller Block (MCB) that interfaces with various types of DRAM (DDR, DDR2, DDR3, LPDDR). It handles the configuration and control of memory operations, including address and data management, command generation, and I/O buffer instantiation. The module supports different port configurations and memory widths, and includes features such as calibration, DQS (data strobe) management, and various timing parameters. It acts as an intermediary between the user interface and the physical memory, managing the complex timing and signaling requirements of DRAM interfaces."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nsysclk_2x, sysclk_2x_180, pll_ce_0, pll_ce_90, pll_lock, sys_rst, p0_arb_en, p0_cmd_clk, p0_cmd_en, p0_cmd_instr, p0_cmd_bl, p0_cmd_byte_addr, p0_wr_clk, p0_wr_en, p0_wr_mask, p0_wr_data, p0_rd_clk, p0_rd_en, p1_arb_en, p1_cmd_clk, p1_cmd_en, p1_cmd_instr, p1_cmd_bl, p1_cmd_byte_addr, p1_wr_clk, p1_wr_en, p1_wr_mask, p1_wr_data, p1_rd_clk, p1_rd_en, p2_arb_en, p2_cmd_clk, p2_cmd_en, p2_cmd_instr, p2_cmd_bl, p2_cmd_byte_addr, p2_wr_clk, p2_wr_en, p2_wr_mask, p2_wr_data, p2_rd_clk, p2_rd_en, p3_arb_en, p3_cmd_clk, p3_cmd_en, p3_cmd_instr, p3_cmd_bl, p3_cmd_byte_addr, p3_wr_clk, p3_wr_en, p3_wr_mask, p3_wr_data, p3_rd_clk, p3_rd_en, p4_arb_en, p4_cmd_clk, p4_cmd_en, p4_cmd_instr, p4_cmd_bl, p4_cmd_byte_addr, p4_wr_clk, p4_wr_en, p4_wr_mask, p4_wr_data, p4_rd_clk, p4_rd_en, p5_arb_en, p5_cmd_clk, p5_cmd_en, p5_cmd_instr, p5_cmd_bl, p5_cmd_byte_addr, p5_wr_clk, p5_wr_en, p5_wr_mask, p5_wr_data, p5_rd_clk, p5_rd_en, calib_recal, ui_read, ui_add, ui_cs, ui_clk, ui_sdi, ui_addr, ui_broadcast, ui_drp_update, ui_done_cal, ui_cmd, ui_cmd_in, ui_cmd_en, ui_dqcount, ui_dq_lower_dec, ui_dq_lower_inc, ui_dq_upper_dec, ui_dq_upper_inc, ui_udqs_inc, ui_udqs_dec, ui_ldqs_inc, ui_ldqs_dec, selfrefresh_enter.\n\nExplanation: These inputs include clock signals, control signals, command inputs, data inputs, and configuration inputs for multiple ports (p0 to p5) of the memory controller. They control the operation, timing, and data flow of the memory interface.\n\nOutput ports:\np0_cmd_empty, p0_cmd_full, p0_wr_full, p0_wr_empty, p0_wr_count, p0_wr_underrun, p0_wr_error, p0_rd_data, p0_rd_full, p0_rd_empty, p0_rd_count, p0_rd_overflow, p0_rd_error, p1_cmd_empty, p1_cmd_full, p1_wr_full, p1_wr_empty, p1_wr_count, p1_wr_underrun, p1_wr_error, p1_rd_data, p1_rd_full, p1_rd_empty, p1_rd_count, p1_rd_overflow, p1_rd_error, p2_cmd_empty, p2_cmd_full, p2_wr_full, p2_wr_empty, p2_wr_count, p2_wr_underrun, p2_wr_error, p2_rd_data, p2_rd_full, p2_rd_empty, p2_rd_count, p2_rd_overflow, p2_rd_error, p3_cmd_empty, p3_cmd_full, p3_wr_full, p3_wr_empty, p3_wr_count, p3_wr_underrun, p3_wr_error, p3_rd_data, p3_rd_full, p3_rd_empty, p3_rd_count, p3_rd_overflow, p3_rd_error, p4_cmd_empty, p4_cmd_full, p4_wr_full, p4_wr_empty, p4_wr_count, p4_wr_underrun, p4_wr_error, p4_rd_data, p4_rd_full, p4_rd_empty, p4_rd_count, p4_rd_overflow, p4_rd_error, p5_cmd_empty, p5_cmd_full, p5_wr_full, p5_wr_empty, p5_wr_count, p5_wr_underrun, p5_wr_error, p5_rd_data, p5_rd_full, p5_rd_empty, p5_rd_count, p5_rd_overflow, p5_rd_error, mcbx_dram_addr, mcbx_dram_ba, mcbx_dram_ras_n, mcbx_dram_cas_n, mcbx_dram_we_n, mcbx_dram_cke, mcbx_dram_clk, mcbx_dram_clk_n, mcbx_dram_dq, mcbx_dram_dqs, mcbx_dram_dqs_n, mcbx_dram_udqs, mcbx_dram_udqs_n, mcbx_dram_udm, mcbx_dram_ldm, mcbx_dram_odt, mcbx_dram_ddr3_rst, uo_data, uo_data_valid, uo_done_cal, uo_cmd_ready_in, uo_refrsh_flag, uo_cal_start, uo_sdo, status, selfrefresh_mode.\n\nExplanation: These outputs provide status information, data output, and control signals for the memory interface. They include command status, write/read status, data output, and various control signals for the DRAM interface. The outputs are organized for multiple ports (p0 to p5) and include signals for the physical memory interface (mcbx_dram_*)."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code for the mcb_raw_wrapper module, here are the key internal signals and their explanations:\n\nInternal signals: allzero, MCB_SYSRST, ioclk0, ioclk90, mcb_ui_clk, hard_done_cal, cke_train, ioi_drp_update, aux_sdi_sdo, mcb_ui_addr, mcb_ui_dqcount, syn_uiclk_pll_lock, int_sys_rst, selfrefresh_enter_r1, selfrefresh_enter_r2, selfrefresh_enter_r3, gated_pll_lock, soft_cal_selfrefresh_req, wait_200us_counter, cke_train_reg, wait_200us_done_r1, wait_200us_done_r2, normal_operation_window.\n\nExplanation:\n1. allzero: A 128-bit register initialized to zero, used for padding and default values.\n2. MCB_SYSRST: System reset signal for the Memory Controller Block.\n3. ioclk0, ioclk90: I/O clocks at 0 and 90 degrees phase shift.\n4. mcb_ui_clk: User interface clock for the Memory Controller Block.\n5. hard_done_cal: Signal indicating completion of hard calibration.\n6. cke_train: Clock enable training signal.\n7. ioi_drp_update: I/O interface DRP (Dynamic Reconfiguration Port) update signal.\n8. aux_sdi_sdo: Auxiliary serial data input/output signals.\n9. mcb_ui_addr, mcb_ui_dqcount: User interface address and DQ count signals.\n10. syn_uiclk_pll_lock: Synchronized PLL lock signal.\n11. int_sys_rst: Internal system reset signal.\n12. selfrefresh_enter_r1/r2/r3: Self-refresh entry request signals (registered versions).\n13. gated_pll_lock: Gated PLL lock signal.\n14. soft_cal_selfrefresh_req: Soft calibration self-refresh request signal.\n15. wait_200us_counter: Counter for 200\u03bcs wait period.\n16. cke_train_reg: Registered version of cke_train signal.\n17. wait_200us_done_r1/r2: Signals indicating completion of 200\u03bcs wait period.\n18. normal_operation_window: Signal indicating normal operation mode.\n\nThese internal signals are used for various control, timing, and synchronization purposes within the memory controller wrapper, managing aspects such as resets, clocking, calibration, and self-refresh operations."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`define DEBUG\n`timescale 1ps / 1ps\n\nmodule mcb_raw_wrapper #\n \n (\n\nparameter  C_MEMCLK_PERIOD          = 2500,       \nparameter  C_PORT_ENABLE            = 6'b111111,    \n                                                  \n\nparameter  C_MEM_ADDR_ORDER             = \"BANK_ROW_COLUMN\" , \n\n\nparameter C_USR_INTERFACE_MODE       = \"NATIVE\", \n                                               \n                                               \n\n\n\n\n\n\n\nparameter  C_ARB_NUM_TIME_SLOTS     = 12,                      \nparameter  C_ARB_TIME_SLOT_0        = 18'o012345,               \nparameter  C_ARB_TIME_SLOT_1        = 18'o123450,               \nparameter  C_ARB_TIME_SLOT_2        = 18'o234501,               \nparameter  C_ARB_TIME_SLOT_3        = 18'o345012,               \nparameter  C_ARB_TIME_SLOT_4        = 18'o450123,               \nparameter  C_ARB_TIME_SLOT_5        = 18'o501234,             \nparameter  C_ARB_TIME_SLOT_6        = 18'o012345,             \nparameter  C_ARB_TIME_SLOT_7        = 18'o123450,             \nparameter  C_ARB_TIME_SLOT_8        = 18'o234501,             \nparameter  C_ARB_TIME_SLOT_9        = 18'o345012,             \nparameter  C_ARB_TIME_SLOT_10       = 18'o450123,             \nparameter  C_ARB_TIME_SLOT_11       = 18'o501234,             \n                                                               \n                                                               \n                                                               \n                                                               \n                                                               \n                                                               \nparameter  C_PORT_CONFIG               =  \"B128\",     \n\n\n\n\nparameter  C_MEM_TRAS              =   45000,            \nparameter  C_MEM_TRCD               =   12500,            \nparameter  C_MEM_TREFI              =   7800,             \nparameter  C_MEM_TRFC               =   127500,           \nparameter  C_MEM_TRP                =   12500,            \nparameter  C_MEM_TWR                =   15000,            \nparameter  C_MEM_TRTP               =   7500,             \nparameter  C_MEM_TWTR               =   7500,\n\nparameter  C_NUM_DQ_PINS               =  8,                   \nparameter  C_MEM_TYPE                  =  \"DDR3\",  \nparameter  C_MEM_DENSITY               =  \"512M\",\nparameter  C_MEM_BURST_LEN             =  8,       \n                                                   \n                                                   \n                                                   \n                                                   \n                                                   \n                                                   \n                                                   \n                                                                                           \n                                               \n                                                              \nparameter  C_MEM_CAS_LATENCY           =  4,\nparameter  C_MEM_ADDR_WIDTH            =  13,    \nparameter  C_MEM_BANKADDR_WIDTH        =  3,     \nparameter  C_MEM_NUM_COL_BITS          =  11,    \n\nparameter  C_MEM_DDR3_CAS_LATENCY      = 7,   \nparameter  C_MEM_MOBILE_PA_SR          = \"FULL\",  \nparameter  C_MEM_DDR1_2_ODS            = \"FULL\",  \nparameter  C_MEM_DDR3_ODS              = \"DIV6\",   \nparameter  C_MEM_DDR2_RTT              = \"50OHMS\",    \nparameter  C_MEM_DDR3_RTT              =  \"DIV2\",  \nparameter  C_MEM_MDDR_ODS              =  \"FULL\",   \n\nparameter  C_MEM_DDR2_DIFF_DQS_EN      =  \"YES\", \nparameter  C_MEM_DDR2_3_PA_SR          =  \"OFF\",  \nparameter  C_MEM_DDR3_CAS_WR_LATENCY   =   5,        \n                                                     \n                                                     \n                                                     \n                                                     \n\nparameter  C_MEM_DDR3_AUTO_SR         =  \"ENABLED\",\nparameter  C_MEM_DDR2_3_HIGH_TEMP_SR  =  \"NORMAL\",\nparameter  C_MEM_DDR3_DYN_WRT_ODT     =  \"OFF\",\nparameter  C_MEM_TZQINIT_MAXCNT       = 10'd512,  \n\n\nparameter  C_MC_CALIB_BYPASS        = \"NO\",\nparameter  C_MC_CALIBRATION_RA      = 15'h0000,\nparameter  C_MC_CALIBRATION_BA      = 3'h0,\n\nparameter C_CALIB_SOFT_IP           = \"TRUE\",\nparameter C_SKIP_IN_TERM_CAL = 1'b0,     \nparameter C_SKIP_DYNAMIC_CAL = 1'b0,     \nparameter C_SKIP_DYN_IN_TERM = 1'b1,     \nparameter C_SIMULATION       = \"FALSE\",  \n\n\n\n\n\nparameter LDQSP_TAP_DELAY_VAL  = 0,  \nparameter UDQSP_TAP_DELAY_VAL  = 0,  \nparameter LDQSN_TAP_DELAY_VAL  = 0,  \nparameter UDQSN_TAP_DELAY_VAL  = 0,  \nparameter DQ0_TAP_DELAY_VAL  = 0,  \nparameter DQ1_TAP_DELAY_VAL  = 0,  \nparameter DQ2_TAP_DELAY_VAL  = 0,  \nparameter DQ3_TAP_DELAY_VAL  = 0,  \nparameter DQ4_TAP_DELAY_VAL  = 0,  \nparameter DQ5_TAP_DELAY_VAL  = 0,  \nparameter DQ6_TAP_DELAY_VAL  = 0,  \nparameter DQ7_TAP_DELAY_VAL  = 0,  \nparameter DQ8_TAP_DELAY_VAL  = 0,  \nparameter DQ9_TAP_DELAY_VAL  = 0,  \nparameter DQ10_TAP_DELAY_VAL = 0,  \nparameter DQ11_TAP_DELAY_VAL = 0,  \nparameter DQ12_TAP_DELAY_VAL = 0,  \nparameter DQ13_TAP_DELAY_VAL = 0,  \nparameter DQ14_TAP_DELAY_VAL = 0,  \nparameter DQ15_TAP_DELAY_VAL = 0,  \n\n\nparameter  C_MC_CALIBRATION_CA      = 12'h000,\nparameter  C_MC_CALIBRATION_CLK_DIV     = 1,\nparameter  C_MC_CALIBRATION_MODE    = \"CALIBRATION\"     ,   \nparameter  C_MC_CALIBRATION_DELAY   = \"HALF\",   \n\nparameter C_P0_MASK_SIZE           = 4,\nparameter C_P0_DATA_PORT_SIZE      = 32,\nparameter C_P1_MASK_SIZE           = 4,\nparameter C_P1_DATA_PORT_SIZE         = 32\n\n    )\n  (\n  \n      \n      \n      input sysclk_2x,                         \n      input sysclk_2x_180,                      \n      input pll_ce_0,\n      input pll_ce_90,\n      input pll_lock,                          \n      input sys_rst,                         \n      \n\n\n\n\n\n\n      \n      \n      \n\n      input             p0_arb_en,\n      input             p0_cmd_clk,\n      input             p0_cmd_en,\n      input [2:0]       p0_cmd_instr,\n      input [5:0]       p0_cmd_bl,\n      input [29:0]      p0_cmd_byte_addr,\n      output            p0_cmd_empty,\n      output            p0_cmd_full,\n\n      \n      \n      \n      \n      \n      \n      \n      input             p0_wr_clk,\n      input             p0_wr_en,\n      input [C_P0_MASK_SIZE - 1:0]      p0_wr_mask,\n      input [C_P0_DATA_PORT_SIZE - 1:0] p0_wr_data,\n      output            p0_wr_full,        \n      output            p0_wr_empty,\n      output [6:0]      p0_wr_count,\n      output            p0_wr_underrun,\n      output            p0_wr_error,\n\n      \n      \n      \n      \n      \n      \n      \n      input             p0_rd_clk,\n      input             p0_rd_en,\n      output [C_P0_DATA_PORT_SIZE - 1:0]        p0_rd_data,\n      output            p0_rd_full,\n      output            p0_rd_empty,\n      output [6:0]      p0_rd_count,\n      output            p0_rd_overflow,\n      output            p0_rd_error,\n\n      \n      \n      \n      \n\n      input             p1_arb_en,\n      input             p1_cmd_clk,\n      input             p1_cmd_en,\n      input [2:0]       p1_cmd_instr,\n      input [5:0]       p1_cmd_bl,\n      input [29:0]      p1_cmd_byte_addr,\n      output            p1_cmd_empty,\n      output            p1_cmd_full,\n\n      \n      input             p1_wr_clk,\n      input             p1_wr_en,\n      input [C_P1_MASK_SIZE - 1:0]      p1_wr_mask,\n      input [C_P1_DATA_PORT_SIZE - 1:0] p1_wr_data,\n      output            p1_wr_full,\n      output            p1_wr_empty,\n      output [6:0]      p1_wr_count,\n      output            p1_wr_underrun,\n      output            p1_wr_error,\n\n      \n      input             p1_rd_clk,\n      input             p1_rd_en,\n      output [C_P1_DATA_PORT_SIZE - 1:0]        p1_rd_data,\n      output            p1_rd_full,\n      output            p1_rd_empty,\n      output [6:0]      p1_rd_count,\n      output            p1_rd_overflow,\n      output            p1_rd_error,\n\n      \n      \n      \n      \n      \n      \n\n      input             p2_arb_en,\n      input             p2_cmd_clk,\n      input             p2_cmd_en,\n      input [2:0]       p2_cmd_instr,\n      input [5:0]       p2_cmd_bl,\n      input [29:0]      p2_cmd_byte_addr,\n      output            p2_cmd_empty,\n      output            p2_cmd_full,\n\n      \n      \n      \n      \n      \n      input             p2_wr_clk,\n      input             p2_wr_en,\n      input [3:0]       p2_wr_mask,\n      input [31:0]      p2_wr_data,\n      output            p2_wr_full,\n      output            p2_wr_empty,\n      output [6:0]      p2_wr_count,\n      output            p2_wr_underrun,\n      output            p2_wr_error,\n\n      \n      \n      \n      \n      \n      input             p2_rd_clk,\n      input             p2_rd_en,\n      output [31:0]     p2_rd_data,\n      output            p2_rd_full,\n      output            p2_rd_empty,\n      output [6:0]      p2_rd_count,\n      output            p2_rd_overflow,\n      output            p2_rd_error,\n\n      \n      \n      \n      \n\n      input             p3_arb_en,\n      input             p3_cmd_clk,\n      input             p3_cmd_en,\n      input [2:0]       p3_cmd_instr,\n      input [5:0]       p3_cmd_bl,\n      input [29:0]      p3_cmd_byte_addr,\n      output            p3_cmd_empty,\n      output            p3_cmd_full,\n\n      \n      \n      \n      \n      input             p3_wr_clk,\n      input             p3_wr_en,\n      input [3:0]       p3_wr_mask,\n      input [31:0]      p3_wr_data,\n      output            p3_wr_full,\n      output            p3_wr_empty,\n      output [6:0]      p3_wr_count,\n      output            p3_wr_underrun,\n      output            p3_wr_error,\n\n      \n      \n      \n      \n      input             p3_rd_clk,\n      input             p3_rd_en,\n      output [31:0]     p3_rd_data,\n      output            p3_rd_full,\n      output            p3_rd_empty,\n      output [6:0]      p3_rd_count,\n      output            p3_rd_overflow,\n      output            p3_rd_error,\n      \n      \n      \n      \n\n      input             p4_arb_en,\n      input             p4_cmd_clk,\n      input             p4_cmd_en,\n      input [2:0]       p4_cmd_instr,\n      input [5:0]       p4_cmd_bl,\n      input [29:0]      p4_cmd_byte_addr,\n      output            p4_cmd_empty,\n      output            p4_cmd_full,\n\n      \n      \n      \n      input             p4_wr_clk,\n      input             p4_wr_en,\n      input [3:0]       p4_wr_mask,\n      input [31:0]      p4_wr_data,\n      output            p4_wr_full,\n      output            p4_wr_empty,\n      output [6:0]      p4_wr_count,\n      output            p4_wr_underrun,\n      output            p4_wr_error,\n\n      \n      \n      \n      input             p4_rd_clk,\n      input             p4_rd_en,\n      output [31:0]     p4_rd_data,\n      output            p4_rd_full,\n      output            p4_rd_empty,\n      output [6:0]      p4_rd_count,\n      output            p4_rd_overflow,\n      output            p4_rd_error,\n\n\n      \n      \n      \n\n      input             p5_arb_en,\n      input             p5_cmd_clk,\n      input             p5_cmd_en,\n      input [2:0]       p5_cmd_instr,\n      input [5:0]       p5_cmd_bl,\n      input [29:0]      p5_cmd_byte_addr,\n      output            p5_cmd_empty,\n      output            p5_cmd_full,\n\n      \n      input             p5_wr_clk,\n      input             p5_wr_en,\n      input [3:0]       p5_wr_mask,\n      input [31:0]      p5_wr_data,\n      output            p5_wr_full,\n      output            p5_wr_empty,\n      output [6:0]      p5_wr_count,\n      output            p5_wr_underrun,\n      output            p5_wr_error,\n\n      \n      input             p5_rd_clk,\n      input             p5_rd_en,\n      output [31:0]     p5_rd_data,\n      output            p5_rd_full,\n      output            p5_rd_empty,\n      output [6:0]      p5_rd_count,\n      output            p5_rd_overflow,\n      output            p5_rd_error,\n      \n\n      \n      output [C_MEM_ADDR_WIDTH-1:0]     mcbx_dram_addr,  \n      output [C_MEM_BANKADDR_WIDTH-1:0] mcbx_dram_ba,\n      output                            mcbx_dram_ras_n,                        \n      output                            mcbx_dram_cas_n,                        \n      output                            mcbx_dram_we_n,                         \n                                      \n      output                            mcbx_dram_cke,                          \n      output                            mcbx_dram_clk,                          \n      output                            mcbx_dram_clk_n,                        \n      inout [C_NUM_DQ_PINS-1:0]         mcbx_dram_dq,              \n      inout                             mcbx_dram_dqs,                          \n      inout                             mcbx_dram_dqs_n,                        \n      inout                             mcbx_dram_udqs,                         \n      inout                             mcbx_dram_udqs_n,                       \n      \n      output                            mcbx_dram_udm,                          \n      output                            mcbx_dram_ldm,                          \n      output                            mcbx_dram_odt,                          \n      output                            mcbx_dram_ddr3_rst,                     \n      \n      input calib_recal,              \n     \n                                \n                                \n   \n   \n                                \n      inout                             rzq,           \n      inout                             zio,           \n      \n      \n      input                             ui_read,\n      input                             ui_add,\n      input                             ui_cs,\n      input                             ui_clk,\n      input                             ui_sdi,\n      input     [4:0]                   ui_addr,\n      input                             ui_broadcast,\n      input                             ui_drp_update,\n      input                             ui_done_cal,\n      input                             ui_cmd,\n      input                             ui_cmd_in,\n      input                             ui_cmd_en,\n      input     [3:0]                   ui_dqcount,\n      input                             ui_dq_lower_dec,\n      input                             ui_dq_lower_inc,\n      input                             ui_dq_upper_dec,\n      input                             ui_dq_upper_inc,\n      input                             ui_udqs_inc,\n      input                             ui_udqs_dec,\n      input                             ui_ldqs_inc,\n      input                             ui_ldqs_dec,\n      output     [7:0]                  uo_data,\n      output                            uo_data_valid,\n      output                            uo_done_cal,\n      output                            uo_cmd_ready_in,\n      output                            uo_refrsh_flag,\n      output                            uo_cal_start,\n      output                            uo_sdo,\n      output   [31:0]                   status,\n      input                             selfrefresh_enter,              \n      output                            selfrefresh_mode\n         );\n  function integer cdiv (input integer num,\n                         input integer div); \n    begin\n      cdiv = (num/div) + (((num%div)>0) ? 1 : 0);\n    end\n  endfunction \n\n\nlocalparam C_OSERDES2_DATA_RATE_OQ = \"SDR\";           \nlocalparam C_OSERDES2_DATA_RATE_OT = \"SDR\";           \nlocalparam C_OSERDES2_SERDES_MODE_MASTER  = \"MASTER\";        \nlocalparam C_OSERDES2_SERDES_MODE_SLAVE   = \"SLAVE\";        \nlocalparam C_OSERDES2_OUTPUT_MODE_SE      = \"SINGLE_ENDED\";   \nlocalparam C_OSERDES2_OUTPUT_MODE_DIFF    = \"DIFFERENTIAL\";\n \nlocalparam C_BUFPLL_0_LOCK_SRC       = \"LOCK_TO_0\";\n\nlocalparam C_DQ_IODRP2_DATA_RATE             = \"SDR\";\nlocalparam C_DQ_IODRP2_SERDES_MODE_MASTER    = \"MASTER\";\nlocalparam C_DQ_IODRP2_SERDES_MODE_SLAVE     = \"SLAVE\";\n\nlocalparam C_DQS_IODRP2_DATA_RATE             = \"SDR\";\nlocalparam C_DQS_IODRP2_SERDES_MODE_MASTER    = \"MASTER\";\nlocalparam C_DQS_IODRP2_SERDES_MODE_SLAVE     = \"SLAVE\";\n\n\n\n     \n\n\n\nlocalparam  C_MEM_DDR3_ADD_LATENCY      =  \"OFF\";\nlocalparam  C_MEM_DDR2_ADD_LATENCY      =  0; \nlocalparam  C_MEM_MOBILE_TC_SR          =  0; \n\n     \n\n                                              \n                                              \n                                              \n                                         \n   \n   \n   \n\n\n\nlocalparam arbtimeslot0   = {C_ARB_TIME_SLOT_0   };\nlocalparam arbtimeslot1   = {C_ARB_TIME_SLOT_1   };\nlocalparam arbtimeslot2   = {C_ARB_TIME_SLOT_2   };\nlocalparam arbtimeslot3   = {C_ARB_TIME_SLOT_3   };\nlocalparam arbtimeslot4   = {C_ARB_TIME_SLOT_4   };\nlocalparam arbtimeslot5   = {C_ARB_TIME_SLOT_5   };\nlocalparam arbtimeslot6   = {C_ARB_TIME_SLOT_6   };\nlocalparam arbtimeslot7   = {C_ARB_TIME_SLOT_7   };\nlocalparam arbtimeslot8   = {C_ARB_TIME_SLOT_8   };\nlocalparam arbtimeslot9   = {C_ARB_TIME_SLOT_9   };\nlocalparam arbtimeslot10  = {C_ARB_TIME_SLOT_10  };\nlocalparam arbtimeslot11  = {C_ARB_TIME_SLOT_11  };\n\n\n\nlocalparam MEM_RAS_VAL  = ((C_MEM_TRAS + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_RCD_VAL  = ((C_MEM_TRCD  + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_REFI_VAL = ((C_MEM_TREFI + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD) - 25;\nlocalparam MEM_RFC_VAL  = ((C_MEM_TRFC  + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_RP_VAL   = ((C_MEM_TRP   + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_WR_VAL   = ((C_MEM_TWR   + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam MEM_RTP_CK    = cdiv(C_MEM_TRTP,C_MEMCLK_PERIOD);\nlocalparam MEM_RTP_VAL = (C_MEM_TYPE == \"DDR3\") ? (MEM_RTP_CK < 4) ? 4 : MEM_RTP_CK\n                                               : (MEM_RTP_CK < 2) ? 2 : MEM_RTP_CK;\nlocalparam MEM_WTR_VAL  = (C_MEM_TYPE == \"DDR\")   ? 2 :\n                          (C_MEM_TYPE == \"DDR3\")  ? 4 : \n                          (C_MEM_TYPE == \"MDDR\")  ? C_MEM_TWTR : \n                          (C_MEM_TYPE == \"LPDDR\")  ? C_MEM_TWTR : \n                          ((C_MEM_TYPE == \"DDR2\") && (((C_MEM_TWTR  + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD) > 2)) ? ((C_MEM_TWTR  + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD) : \n                          (C_MEM_TYPE == \"DDR2\")  ? 2 \n                                                  : 3 ;\nlocalparam  C_MEM_DDR2_WRT_RECOVERY = (C_MEM_TYPE != \"DDR2\") ? 5: ((C_MEM_TWR   + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\nlocalparam  C_MEM_DDR3_WRT_RECOVERY = (C_MEM_TYPE != \"DDR3\") ? 5: ((C_MEM_TWR   + C_MEMCLK_PERIOD -1) /C_MEMCLK_PERIOD);\n\n\n\n\n\n\n\n\n\n\n\n\nwire [31:0]  addr_in0;\nreg [127:0]  allzero = 0;\n\n\n\n\nwire       dqs_out_p;              \nwire       dqs_out_n;              \n\nwire       dqs_sys_p;              \nwire       dqs_sys_n;              \nwire       udqs_sys_p;\nwire       udqs_sys_n;\n\nwire       dqs_p;                  \nwire       dqs_n;                  \n\n\n\n\nwire dqIO_w_en_0;                \nwire dqsIO_w_en_90_p;            \nwire dqsIO_w_en_90_n;            \n\n\n\nwire [14:0]   address_90;\nwire [2:0]    ba_90;     \nwire          ras_90;\nwire          cas_90;\nwire          we_90 ;\nwire          cke_90;\nwire          odt_90;\nwire          rst_90;\n\n\nwire          ioi_drp_clk;          \nwire  [4:0]   ioi_drp_addr;         \nwire          ioi_drp_sdo;          \nwire          ioi_drp_sdi;          \nwire          ioi_drp_cs;           \nwire          ioi_drp_add;          \nwire          ioi_drp_broadcast;  \nwire          ioi_drp_train;    \n\n\n   \n   \nwire  [3:0]dqdonecount; \nwire  dq_in_p;          \nwire  dq_in_n;          \nwire  cal_done;   \n   \n\n\nwire       udqs_n;\nwire       udqs_p;\n\n\nwire            udqs_dqocal_p;\nwire            udqs_dqocal_n;\n\n\n\nwire df_en_n90  ;\n\n\n\nwire ioi_int_tmp;\n\nwire [15:0]dqo_n;  \nwire [15:0]dqo_p;  \nwire dqnlm;      \nwire dqplm;      \nwire dqnum;      \nwire dqpum;      \n\n\n\nwire  [C_MEM_ADDR_WIDTH-1:0]ioi_addr; \nwire  [C_MEM_BANKADDR_WIDTH-1:0]ioi_ba;    \nwire  ioi_cas;   \nwire  ioi_ck;    \nwire  ioi_ckn;    \nwire  ioi_cke;   \nwire  [C_NUM_DQ_PINS-1:0]ioi_dq; \nwire  ioi_dqs;   \nwire  ioi_dqsn;\nwire  ioi_udqs;\nwire  ioi_udqsn;   \nwire  ioi_odt;   \nwire  ioi_ras;   \nwire  ioi_rst;   \nwire  ioi_we;   \nwire  ioi_udm;\nwire  ioi_ldm;\n\nwire  [15:0] in_dq;\nwire  [C_NUM_DQ_PINS-1:0] in_pre_dq;\n\n\n\nwire            in_dqs;     \nwire            in_pre_dqsp;\nwire            in_pre_dqsn;\nwire            in_pre_udqsp;\nwire            in_pre_udqsn;\nwire            in_udqs;\n     \nwire  [C_MEM_ADDR_WIDTH-1:0]t_addr; \nwire  [C_MEM_BANKADDR_WIDTH-1:0]t_ba;    \nwire  t_cas;\nwire  t_ck ;\nwire  t_ckn;\nwire  t_cke;\nwire  [C_NUM_DQ_PINS-1:0]t_dq;\nwire  t_dqs;     \nwire  t_dqsn;\nwire  t_udqs;\nwire  t_udqsn;\nwire  t_odt;     \nwire  t_ras;     \nwire  t_rst;     \nwire  t_we ;     \n\n\nwire  t_udm  ;\nwire  t_ldm  ;\n\n\n\nwire             idelay_dqs_ioi_s;\nwire             idelay_dqs_ioi_m;\nwire             idelay_udqs_ioi_s;\nwire             idelay_udqs_ioi_m;\n\n\nwire  dqs_pin;\nwire  udqs_pin;\n\n\n\n\n\nwire [14:0]p0_cmd_ra;\nwire [2:0]p0_cmd_ba; \nwire [11:0]p0_cmd_ca;\nwire [14:0]p1_cmd_ra;\nwire [2:0]p1_cmd_ba; \nwire [11:0]p1_cmd_ca;\nwire [14:0]p2_cmd_ra;\nwire [2:0]p2_cmd_ba; \nwire [11:0]p2_cmd_ca;\nwire [14:0]p3_cmd_ra;\nwire [2:0]p3_cmd_ba; \nwire [11:0]p3_cmd_ca;\nwire [14:0]p4_cmd_ra;\nwire [2:0]p4_cmd_ba; \nwire [11:0]p4_cmd_ca;\nwire [14:0]p5_cmd_ra;\nwire [2:0]p5_cmd_ba; \nwire [11:0]p5_cmd_ca;\n\n   \nwire        mig_p0_arb_en;   \nwire        mig_p0_cmd_clk;    \nwire        mig_p0_cmd_en;     \nwire [14:0] mig_p0_cmd_ra;     \nwire [2:0]  mig_p0_cmd_ba;     \nwire [11:0] mig_p0_cmd_ca;     \n\nwire [2:0]  mig_p0_cmd_instr;   \nwire [5:0]  mig_p0_cmd_bl;      \nwire        mig_p0_cmd_empty;   \nwire        mig_p0_cmd_full;    \n\n\nwire        mig_p1_arb_en;   \nwire        mig_p1_cmd_clk;    \nwire        mig_p1_cmd_en;     \nwire [14:0] mig_p1_cmd_ra;     \nwire [2:0] mig_p1_cmd_ba;     \nwire [11:0] mig_p1_cmd_ca;     \n\nwire [2:0]  mig_p1_cmd_instr;   \nwire [5:0]  mig_p1_cmd_bl;      \nwire        mig_p1_cmd_empty;   \nwire        mig_p1_cmd_full;    \n\nwire        mig_p2_arb_en;   \nwire        mig_p2_cmd_clk;    \nwire        mig_p2_cmd_en;     \nwire [14:0] mig_p2_cmd_ra;     \nwire [2:0] mig_p2_cmd_ba;     \nwire [11:0] mig_p2_cmd_ca;     \n                  \nwire [2:0]  mig_p2_cmd_instr;   \nwire [5:0]  mig_p2_cmd_bl;      \nwire        mig_p2_cmd_empty;   \nwire        mig_p2_cmd_full;    \n\nwire        mig_p3_arb_en;   \nwire        mig_p3_cmd_clk;    \nwire        mig_p3_cmd_en;     \nwire [14:0] mig_p3_cmd_ra;     \nwire [2:0] mig_p3_cmd_ba;     \nwire [11:0] mig_p3_cmd_ca;     \n\nwire [2:0]  mig_p3_cmd_instr;   \nwire [5:0]  mig_p3_cmd_bl;      \nwire        mig_p3_cmd_empty;   \nwire        mig_p3_cmd_full;    \n\nwire        mig_p4_arb_en;   \nwire        mig_p4_cmd_clk;    \nwire        mig_p4_cmd_en;     \nwire [14:0] mig_p4_cmd_ra;     \nwire [2:0] mig_p4_cmd_ba;     \nwire [11:0] mig_p4_cmd_ca;     \n\nwire [2:0]  mig_p4_cmd_instr;   \nwire [5:0]  mig_p4_cmd_bl;      \nwire        mig_p4_cmd_empty;   \nwire        mig_p4_cmd_full;    \n\nwire        mig_p5_arb_en;   \nwire        mig_p5_cmd_clk;    \nwire        mig_p5_cmd_en;     \nwire [14:0] mig_p5_cmd_ra;     \nwire [2:0] mig_p5_cmd_ba;     \nwire [11:0] mig_p5_cmd_ca;     \n\nwire [2:0]  mig_p5_cmd_instr;   \nwire [5:0]  mig_p5_cmd_bl;      \nwire        mig_p5_cmd_empty;   \nwire        mig_p5_cmd_full;    \n\nwire        mig_p0_wr_clk;\nwire        mig_p0_rd_clk;\nwire        mig_p1_wr_clk;\nwire        mig_p1_rd_clk;\nwire        mig_p2_clk;\nwire        mig_p3_clk;\nwire        mig_p4_clk;\nwire        mig_p5_clk;\n\nwire       mig_p0_wr_en;\nwire       mig_p0_rd_en;\nwire       mig_p1_wr_en;\nwire       mig_p1_rd_en;\nwire       mig_p2_en;\nwire       mig_p3_en; \nwire       mig_p4_en; \nwire       mig_p5_en; \n\n\nwire [31:0]mig_p0_wr_data;\nwire [31:0]mig_p1_wr_data;\nwire [31:0]mig_p2_wr_data;\nwire [31:0]mig_p3_wr_data;\nwire [31:0]mig_p4_wr_data;\nwire [31:0]mig_p5_wr_data;\n\n\nwire  [C_P0_MASK_SIZE-1:0]mig_p0_wr_mask;\nwire  [C_P1_MASK_SIZE-1:0]mig_p1_wr_mask;\nwire  [3:0]mig_p2_wr_mask;\nwire  [3:0]mig_p3_wr_mask;\nwire  [3:0]mig_p4_wr_mask;\nwire  [3:0]mig_p5_wr_mask;\n\n\nwire  [31:0]mig_p0_rd_data; \nwire  [31:0]mig_p1_rd_data; \nwire  [31:0]mig_p2_rd_data; \nwire  [31:0]mig_p3_rd_data; \nwire  [31:0]mig_p4_rd_data; \nwire  [31:0]mig_p5_rd_data; \n\nwire  mig_p0_rd_overflow;\nwire  mig_p1_rd_overflow;\nwire  mig_p2_overflow;\nwire  mig_p3_overflow;\n\nwire  mig_p4_overflow;\nwire  mig_p5_overflow;\n\nwire  mig_p0_wr_underrun;\nwire  mig_p1_wr_underrun;\nwire  mig_p2_underrun;  \nwire  mig_p3_underrun;  \nwire  mig_p4_underrun;  \nwire  mig_p5_underrun;  \n\nwire       mig_p0_rd_error;\nwire       mig_p0_wr_error;\nwire       mig_p1_rd_error;\nwire       mig_p1_wr_error;\nwire       mig_p2_error;    \nwire       mig_p3_error;    \nwire       mig_p4_error;    \nwire       mig_p5_error;    \n\n\nwire  [6:0]mig_p0_wr_count;\nwire  [6:0]mig_p1_wr_count;\nwire  [6:0]mig_p0_rd_count;\nwire  [6:0]mig_p1_rd_count;\n\nwire  [6:0]mig_p2_count;\nwire  [6:0]mig_p3_count;\nwire  [6:0]mig_p4_count;\nwire  [6:0]mig_p5_count;\n\nwire  mig_p0_wr_full;\nwire  mig_p1_wr_full;\n\nwire mig_p0_rd_empty;\nwire mig_p1_rd_empty;\nwire mig_p0_wr_empty;\nwire mig_p1_wr_empty;\nwire mig_p0_rd_full;\nwire mig_p1_rd_full;\nwire mig_p2_full;\nwire mig_p3_full;\nwire mig_p4_full;\nwire mig_p5_full;\nwire mig_p2_empty;\nwire mig_p3_empty;\nwire mig_p4_empty;\nwire mig_p5_empty;\n\n\nwire selfrefresh_mcb_enter;\nwire selfrefresh_mcb_mode ;\n\nwire           tst_cmd_test_en;\nwire   [7:0]   tst_sel;\nwire   [15:0]  tst_in;\nwire           tst_scan_clk;\nwire           tst_scan_rst;\nwire           tst_scan_set;\nwire           tst_scan_en;\nwire           tst_scan_in;\nwire           tst_scan_mode;\n\nwire           p0w_tst_en;\nwire           p0r_tst_en;\nwire           p1w_tst_en;\nwire           p1r_tst_en;\nwire           p2_tst_en;\nwire           p3_tst_en;\nwire           p4_tst_en;\nwire           p5_tst_en;\n\nwire           p0_tst_wr_clk_en;\nwire           p0_tst_rd_clk_en;\nwire           p1_tst_wr_clk_en;\nwire           p1_tst_rd_clk_en;\nwire           p2_tst_clk_en;\nwire           p3_tst_clk_en;\nwire           p4_tst_clk_en;\nwire           p5_tst_clk_en;\n\nwire   [3:0]   p0w_tst_wr_mode;\nwire   [3:0]   p0r_tst_mode;\nwire   [3:0]   p1w_tst_wr_mode;\nwire   [3:0]   p1r_tst_mode;\nwire   [3:0]   p2_tst_mode;\nwire   [3:0]   p3_tst_mode;\nwire   [3:0]   p4_tst_mode;\nwire   [3:0]   p5_tst_mode;\n\nwire           p0r_tst_pin_en;\nwire           p0w_tst_pin_en;\nwire           p1r_tst_pin_en;\nwire           p1w_tst_pin_en;\nwire           p2_tst_pin_en;\nwire           p3_tst_pin_en;\nwire           p4_tst_pin_en;\nwire           p5_tst_pin_en;\nwire           p0w_tst_overflow;\nwire           p1w_tst_overflow;\n\nwire  [3:0]   p0r_tst_mask_o;\nwire  [3:0]   p0w_tst_mask_o;\nwire  [3:0]   p1r_tst_mask_o;\nwire  [3:0]   p1w_tst_mask_o;\nwire  [3:0]   p2_tst_mask_o;\nwire  [3:0]   p3_tst_mask_o;\nwire  [3:0]   p4_tst_mask_o;\nwire  [3:0]   p5_tst_mask_o;\nwire  [3:0]   p0r_tst_wr_mask;\n\nwire  [3:0]   p1r_tst_wr_mask;\nwire [31:0]  p1r_tst_wr_data;\nwire [31:0]  p0r_tst_wr_data;\nwire [31:0]   p0w_tst_rd_data;\nwire [31:0]   p1w_tst_rd_data;\n\nwire  [38:0]  tst_cmd_out;\nwire           MCB_SYSRST;\nwire ioclk0;\nwire ioclk90;\nwire mcb_ui_clk;                               \nwire hard_done_cal;                                \nwire cke_train;\n\nwire       ioi_drp_update;\nwire [7:0] aux_sdi_sdo;\n\nwire [4:0] mcb_ui_addr;\nwire [3:0] mcb_ui_dqcount;\nreg  syn_uiclk_pll_lock;\nreg syn1_sys_rst, syn2_sys_rst;\n\nwire int_sys_rst ;\n\n\nreg selfrefresh_enter_r1,selfrefresh_enter_r2,selfrefresh_enter_r3;\nreg gated_pll_lock;\t   \nreg soft_cal_selfrefresh_req;\nreg [15:0]    wait_200us_counter;\nreg           cke_train_reg;        \nreg           wait_200us_done_r1,wait_200us_done_r2;\nreg normal_operation_window;\n\nassign ioclk0 = sysclk_2x;\nassign ioclk90 = sysclk_2x_180;\n\n\n\n\nalways @ (posedge ui_clk)\nbegin \nif (sys_rst)   \n   normal_operation_window <= 1'b1;\nelse if (selfrefresh_enter_r2 || selfrefresh_mode)\n   normal_operation_window <= 1'b0;\nelse if (~selfrefresh_enter_r2 && ~selfrefresh_mode)\n   normal_operation_window <= 1'b1;\nelse\n   normal_operation_window <= normal_operation_window;\n\nend   \n\n\nalways @ (*)\nbegin\nif (normal_operation_window)\n   gated_pll_lock = pll_lock;\nelse\n   gated_pll_lock = syn_uiclk_pll_lock;\nend\n\n\n\nalways @ (posedge ui_clk)\nbegin \n  if (~selfrefresh_enter && ~selfrefresh_mode)\n   syn_uiclk_pll_lock <= pll_lock;\n   \nend   \n\n\n\n\nassign int_sys_rst =  sys_rst | ~gated_pll_lock;\n\n\n\n\nalways @ (posedge ui_clk)\nif (sys_rst)\n   begin\n      selfrefresh_enter_r1 <= 1'b0;\n      selfrefresh_enter_r2 <= 1'b0;\n      selfrefresh_enter_r3 <= 1'b0;\n   end\nelse\n   begin\n      selfrefresh_enter_r1 <= selfrefresh_enter;\n      selfrefresh_enter_r2 <= selfrefresh_enter_r1;\n      selfrefresh_enter_r3 <= selfrefresh_enter_r2;\n   end\n\n\n\n\n\n\nalways @ (posedge ui_clk)\nbegin \n  if (sys_rst)\n   soft_cal_selfrefresh_req <= 1'b0;\n  else if (selfrefresh_enter_r3)\n     soft_cal_selfrefresh_req <= 1'b1;\n  else if (~selfrefresh_enter_r3 && pll_lock)\n     soft_cal_selfrefresh_req <= 1'b0;\n  else\n     soft_cal_selfrefresh_req <= soft_cal_selfrefresh_req;\n  \nend   \n\n\n\n\n\n\n\n generate \n\nif(C_NUM_DQ_PINS == 16) begin : x16_Addr\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p0_cmd_ca = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p0_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                \n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p1_cmd_ca = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p1_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS  + 1], p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p2_cmd_ca = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p2_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p3_cmd_ca = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p3_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p4_cmd_ca = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p4_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p5_cmd_ca = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p5_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n\n                \n                \n                end\n                \n          else  \n              begin\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p0_cmd_ca = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p0_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p1_cmd_ca = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p1_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p2_cmd_ca = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p2_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p3_cmd_ca = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p3_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p4_cmd_ca = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p4_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p5_cmd_ca = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p5_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n         \n              end\n       \nend else if(C_NUM_DQ_PINS == 8) begin : x8_Addr\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n                 \n\n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p0_cmd_ca[11:0] = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p0_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                 \n                \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p1_cmd_ca[11:0] = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p1_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                \n                \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p2_cmd_ca[11:0] = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p2_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n\n\n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p3_cmd_ca[11:0] = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p3_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                \n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p4_cmd_ca[11:0] = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p4_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n\n              \n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p5_cmd_ca[11:0] = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p5_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                end\n               \n            else  \n              begin\n                 \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n\n\n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};                \n                                   \n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p0_cmd_ca[11:0] = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p0_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n\n                \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p1_cmd_ca[11:0] = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p1_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                \n               \n                if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                        p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS  ]};  \n      \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p2_cmd_ca[11:0] = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p2_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n              \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p3_cmd_ca[11:0] = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p3_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n   \n   \n                 \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p4_cmd_ca[11:0] = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p4_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n                 \n   \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p5_cmd_ca[11:0] = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p5_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n             \n            end\n\n              \n\nend else if(C_NUM_DQ_PINS == 4) begin : x4_Addr\n\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n\n               \n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p0_cmd_ba =  p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p0_cmd_ca = {p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p0_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n           \n              \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p1_cmd_ba =  p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p1_cmd_ca = {p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p1_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p2_cmd_ba =  p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p2_cmd_ca = {p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p2_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              \n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p3_cmd_ba =  p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p3_cmd_ca = {p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p3_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n \n\n          if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              end\n              \n              \n           end\n         else   \n            begin\n            \n               \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p0_cmd_ba =  p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p0_cmd_ca = {p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p0_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               \n           \n              \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p1_cmd_ba =  p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p1_cmd_ca = {p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p1_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p2_cmd_ba =  p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n             \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p2_cmd_ca = {p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p2_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n              \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p3_cmd_ba =  p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p3_cmd_ca = {p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p3_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n \n\n          if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n              end\n            \n            \n            \n            end\n           \nend \n\n\nendgenerate\n\n\n\ngenerate \n   \n   if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n      ) begin : u_config1_0      \n\n  \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[119:96]  == \"W32\" && p2_cmd_en == 1'b1 \n         && p2_cmd_instr[2] == 1'b0 && p2_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 2\");\n           $finish;\n          end\n  end\n              \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[119:96]  == \"R32\" && p2_cmd_en == 1'b1 \n         && p2_cmd_instr[2] == 1'b0 && p2_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 2\");\n           $finish;\n          end\n  end\n\n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[87:64]  == \"W32\" && p3_cmd_en == 1'b1 \n         && p3_cmd_instr[2] == 1'b0 && p3_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 3\");\n           $finish;\n          end\n  end\n              \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[87:64]  == \"R32\" && p3_cmd_en == 1'b1 \n         && p3_cmd_instr[2] == 1'b0  && p3_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 3\");\n           $finish;\n          end\n  end\n  \n\n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[55:32]  == \"W32\" && p4_cmd_en == 1'b1 \n         && p4_cmd_instr[2] == 1'b0 && p4_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 4\");\n           $finish;\n          end\n  end\n              \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[55:32]  == \"R32\" && p4_cmd_en == 1'b1 \n         && p4_cmd_instr[2] == 1'b0 && p4_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 4\");\n           $finish;\n          end\n  end\n\n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[23:0]  == \"W32\" && p5_cmd_en == 1'b1 \n         && p5_cmd_instr[2] == 1'b0 && p5_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 5\");\n           $finish;\n          end\n  end\n              \n  always @(*)\n  begin\n    if ( C_PORT_CONFIG[23:0]  == \"R32\" && p5_cmd_en == 1'b1 \n         && p5_cmd_instr[2] == 1'b0  && p5_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 5\");\n           $finish;\n          end\n  end  \n   \n\n\n  \n  \n  \n  \n\n               \n\n               if (C_PORT_ENABLE[0] == 1'b1)\n               begin\n\n                   assign mig_p0_arb_en      =      p0_arb_en ;\n                   assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                   assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                   assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                   assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                   assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                   assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                   assign mig_p0_cmd_bl      =      {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}  ;\n                   assign p0_cmd_empty       =      mig_p0_cmd_empty;\n                   assign p0_cmd_full        =      mig_p0_cmd_full ;\n                   \n               end else\n               begin\n               \n                   assign mig_p0_arb_en      =     'b0;\n                   assign mig_p0_cmd_clk     =     'b0;\n                   assign mig_p0_cmd_en      =     'b0;\n                   assign mig_p0_cmd_ra      =     'b0;\n                   assign mig_p0_cmd_ba      =     'b0;\n                   assign mig_p0_cmd_ca      =     'b0;\n                   assign mig_p0_cmd_instr   =     'b0;\n                   assign mig_p0_cmd_bl      =     'b0;\n                   assign p0_cmd_empty       =     'b0;\n                   assign p0_cmd_full        =     'b0;\n                   \n               end\n               \n\n               if (C_PORT_ENABLE[1] == 1'b1)\n               begin\n\n\n                   assign mig_p1_arb_en      =      p1_arb_en ;\n                   assign mig_p1_cmd_clk     =      p1_cmd_clk  ;\n                   assign mig_p1_cmd_en      =      p1_cmd_en   ;\n                   assign mig_p1_cmd_ra      =      p1_cmd_ra  ;\n                   assign mig_p1_cmd_ba      =      p1_cmd_ba   ;\n                   assign mig_p1_cmd_ca      =      p1_cmd_ca  ;\n                   assign mig_p1_cmd_instr   =      p1_cmd_instr;\n                   assign mig_p1_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n                   assign p1_cmd_empty       =      mig_p1_cmd_empty;\n                   assign p1_cmd_full        =      mig_p1_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p1_arb_en      =     'b0;\n                   assign mig_p1_cmd_clk     =     'b0;\n                   assign mig_p1_cmd_en      =     'b0;\n                   assign mig_p1_cmd_ra      =     'b0;\n                   assign mig_p1_cmd_ba      =     'b0;\n                   assign mig_p1_cmd_ca      =     'b0;\n                   assign mig_p1_cmd_instr   =     'b0;\n                   assign mig_p1_cmd_bl      =     'b0;\n                   assign p1_cmd_empty       =      'b0;\n                   assign p1_cmd_full        =      'b0;\n                   \n                   \n               end\n               \n\n               if (C_PORT_ENABLE[2] == 1'b1)\n               begin\n\n                   assign mig_p2_arb_en      =      p2_arb_en ;\n                   assign mig_p2_cmd_clk     =      p2_cmd_clk  ;\n                   assign mig_p2_cmd_en      =      p2_cmd_en   ;\n                   assign mig_p2_cmd_ra      =      p2_cmd_ra  ;\n                   assign mig_p2_cmd_ba      =      p2_cmd_ba   ;\n                   assign mig_p2_cmd_ca      =      p2_cmd_ca  ;\n                   assign mig_p2_cmd_instr   =      p2_cmd_instr;\n                   assign mig_p2_cmd_bl      =      {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}  ;\n                   assign p2_cmd_empty   =      mig_p2_cmd_empty;\n                   assign p2_cmd_full    =      mig_p2_cmd_full ;\n                   \n               end else\n               begin\n\n                   assign mig_p2_arb_en      =      'b0;\n                   assign mig_p2_cmd_clk     =      'b0;\n                   assign mig_p2_cmd_en      =      'b0;\n                   assign mig_p2_cmd_ra      =      'b0;\n                   assign mig_p2_cmd_ba      =      'b0;\n                   assign mig_p2_cmd_ca      =      'b0;\n                   assign mig_p2_cmd_instr   =      'b0;\n                   assign mig_p2_cmd_bl      =      'b0;\n                   assign p2_cmd_empty   =       'b0;\n                   assign p2_cmd_full    =       'b0;\n                   \n               end\n               \n \n\n               if (C_PORT_ENABLE[3] == 1'b1)\n               begin\n\n                   assign mig_p3_arb_en    =        p3_arb_en ;\n                   assign mig_p3_cmd_clk     =      p3_cmd_clk  ;\n                   assign mig_p3_cmd_en      =      p3_cmd_en   ;\n                   assign mig_p3_cmd_ra      =      p3_cmd_ra  ;\n                   assign mig_p3_cmd_ba      =      p3_cmd_ba   ;\n                   assign mig_p3_cmd_ca      =      p3_cmd_ca  ;\n                   assign mig_p3_cmd_instr   =      p3_cmd_instr;\n                   assign mig_p3_cmd_bl      =      {(p3_cmd_instr[2] | p3_cmd_bl[5]),p3_cmd_bl[4:0]}  ;\n                   assign p3_cmd_empty   =      mig_p3_cmd_empty;\n                   assign p3_cmd_full    =      mig_p3_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p3_arb_en    =       'b0;\n                   assign mig_p3_cmd_clk     =     'b0;\n                   assign mig_p3_cmd_en      =     'b0;\n                   assign mig_p3_cmd_ra      =     'b0;\n                   assign mig_p3_cmd_ba      =     'b0;\n                   assign mig_p3_cmd_ca      =     'b0;\n                   assign mig_p3_cmd_instr   =     'b0;\n                   assign mig_p3_cmd_bl      =     'b0;\n                   assign p3_cmd_empty   =     'b0;\n                   assign p3_cmd_full    =     'b0;\n                   \n               end\n               \n               if (C_PORT_ENABLE[4] == 1'b1)\n               begin\n\n                   assign mig_p4_arb_en    =        p4_arb_en ;\n                   assign mig_p4_cmd_clk     =      p4_cmd_clk  ;\n                   assign mig_p4_cmd_en      =      p4_cmd_en   ;\n                   assign mig_p4_cmd_ra      =      p4_cmd_ra  ;\n                   assign mig_p4_cmd_ba      =      p4_cmd_ba   ;\n                   assign mig_p4_cmd_ca      =      p4_cmd_ca  ;\n                   assign mig_p4_cmd_instr   =      p4_cmd_instr;\n                   assign mig_p4_cmd_bl      =      {(p4_cmd_instr[2] | p4_cmd_bl[5]),p4_cmd_bl[4:0]}  ;\n                   assign p4_cmd_empty   =      mig_p4_cmd_empty;\n                   assign p4_cmd_full    =      mig_p4_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p4_arb_en      =      'b0;\n                   assign mig_p4_cmd_clk     =      'b0;\n                   assign mig_p4_cmd_en      =      'b0;\n                   assign mig_p4_cmd_ra      =      'b0;\n                   assign mig_p4_cmd_ba      =      'b0;\n                   assign mig_p4_cmd_ca      =      'b0;\n                   assign mig_p4_cmd_instr   =      'b0;\n                   assign mig_p4_cmd_bl      =      'b0;\n                   assign p4_cmd_empty   =      'b0;\n                   assign p4_cmd_full    =      'b0;\n                   \n\n\n               end\n\n               if (C_PORT_ENABLE[5] == 1'b1)\n               begin\n\n                   assign  mig_p5_arb_en    =     p5_arb_en ;\n                   assign  mig_p5_cmd_clk   =     p5_cmd_clk  ;\n                   assign  mig_p5_cmd_en    =     p5_cmd_en   ;\n                   assign  mig_p5_cmd_ra    =     p5_cmd_ra  ;\n                   assign  mig_p5_cmd_ba    =     p5_cmd_ba   ;\n                   assign  mig_p5_cmd_ca    =     p5_cmd_ca  ;\n                   assign mig_p5_cmd_instr  =     p5_cmd_instr;\n                   assign mig_p5_cmd_bl     =     {(p5_cmd_instr[2] | p5_cmd_bl[5]),p5_cmd_bl[4:0]}  ;\n                   assign p5_cmd_empty   =     mig_p5_cmd_empty;\n                   assign p5_cmd_full    =     mig_p5_cmd_full ;\n                   \n               end else\n               begin\n                   assign  mig_p5_arb_en     =   'b0;\n                   assign  mig_p5_cmd_clk    =   'b0;\n                   assign  mig_p5_cmd_en     =   'b0;\n                   assign  mig_p5_cmd_ra     =   'b0;\n                   assign  mig_p5_cmd_ba     =   'b0;\n                   assign  mig_p5_cmd_ca     =   'b0;\n                   assign mig_p5_cmd_instr   =   'b0;\n                   assign mig_p5_cmd_bl      =   'b0;\n                   assign p5_cmd_empty   =     'b0;\n                   assign p5_cmd_full    =     'b0;\n                   \n               \n               end\n\n\n\n\n              \n              \n              \n               if (C_PORT_ENABLE[0] == 1'b1)\n               begin\n                assign mig_p0_wr_clk   = p0_wr_clk;\n                assign mig_p0_rd_clk   = p0_rd_clk;\n                assign mig_p0_wr_en    = p0_wr_en;\n                assign mig_p0_rd_en    = p0_rd_en;\n                assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                assign mig_p0_wr_data  = p0_wr_data[31:0];\n                assign p0_rd_data        = mig_p0_rd_data;\n                assign p0_rd_full        = mig_p0_rd_full;\n                assign p0_rd_empty       = mig_p0_rd_empty;\n                assign p0_rd_error       = mig_p0_rd_error;\n                assign p0_wr_error       = mig_p0_wr_error;\n                assign p0_rd_overflow    = mig_p0_rd_overflow;\n                assign p0_wr_underrun    = mig_p0_wr_underrun;\n                assign p0_wr_empty       = mig_p0_wr_empty;\n                assign p0_wr_full        = mig_p0_wr_full;\n                assign p0_wr_count       = mig_p0_wr_count;\n                assign p0_rd_count       = mig_p0_rd_count  ; \n                \n                \n               end\n               else\n               begin\n                assign mig_p0_wr_clk     = 'b0;\n                assign mig_p0_rd_clk     = 'b0;\n                assign mig_p0_wr_en      = 'b0;\n                assign mig_p0_rd_en      = 'b0;\n                assign mig_p0_wr_mask    = 'b0;\n                assign mig_p0_wr_data    = 'b0;\n                assign p0_rd_data        = 'b0;\n                assign p0_rd_full        = 'b0;\n                assign p0_rd_empty       = 'b0;\n                assign p0_rd_error       = 'b0;\n                assign p0_wr_error       = 'b0;\n                assign p0_rd_overflow    = 'b0;\n                assign p0_wr_underrun    = 'b0;\n                assign p0_wr_empty       = 'b0;\n                assign p0_wr_full        = 'b0;\n                assign p0_wr_count       = 'b0;\n                assign p0_rd_count       = 'b0;\n                \n                \n               end\n              \n              \n              \n               if (C_PORT_ENABLE[1] == 1'b1)\n               begin\n              \n                assign mig_p1_wr_clk   = p1_wr_clk;\n                assign mig_p1_rd_clk   = p1_rd_clk;                \n                assign mig_p1_wr_en    = p1_wr_en;\n                assign mig_p1_wr_mask  = p1_wr_mask[3:0];                \n                assign mig_p1_wr_data  = p1_wr_data[31:0];\n                assign mig_p1_rd_en    = p1_rd_en;\n                assign p1_rd_data     = mig_p1_rd_data;\n                assign p1_rd_empty    = mig_p1_rd_empty;\n                assign p1_rd_full     = mig_p1_rd_full;\n                assign p1_rd_error    = mig_p1_rd_error;\n                assign p1_wr_error    = mig_p1_wr_error;\n                assign p1_rd_overflow = mig_p1_rd_overflow;\n                assign p1_wr_underrun    = mig_p1_wr_underrun;\n                assign p1_wr_empty    = mig_p1_wr_empty;\n                assign p1_wr_full    = mig_p1_wr_full;\n                assign p1_wr_count  = mig_p1_wr_count;\n                assign p1_rd_count  = mig_p1_rd_count  ; \n                \n               end else\n               begin\n              \n                assign mig_p1_wr_clk   = 'b0;\n                assign mig_p1_rd_clk   = 'b0;            \n                assign mig_p1_wr_en    = 'b0;\n                assign mig_p1_wr_mask  = 'b0;          \n                assign mig_p1_wr_data  = 'b0;\n                assign mig_p1_rd_en    = 'b0;\n                assign p1_rd_data     =  'b0;\n                assign p1_rd_empty    =  'b0;\n                assign p1_rd_full     =  'b0;\n                assign p1_rd_error    =  'b0;\n                assign p1_wr_error    =  'b0;\n                assign p1_rd_overflow =  'b0;\n                assign p1_wr_underrun =  'b0;\n                assign p1_wr_empty    =  'b0;\n                assign p1_wr_full     =  'b0;\n                assign p1_wr_count    =  'b0;\n                assign p1_rd_count    =  'b0;\n                \n                \n               end\n                \n                \n                \n\n\n\n         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[119:96] == \"W32\") begin : u_config1_2W\n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin\n                       assign mig_p2_clk      = p2_wr_clk;\n                       assign mig_p2_wr_data  = p2_wr_data[31:0];\n                       assign mig_p2_wr_mask  = p2_wr_mask[3:0];\n                       assign mig_p2_en       = p2_wr_en; \n                       assign p2_wr_error     = mig_p2_error;                       \n                       assign p2_wr_full      = mig_p2_full;\n                       assign p2_wr_empty     = mig_p2_empty;\n                       assign p2_wr_underrun  = mig_p2_underrun;\n                       assign p2_wr_count     = mig_p2_count  ; \n                       \n                       \n                  end else\n                  begin\n                       assign mig_p2_clk      = 'b0;\n                       assign mig_p2_wr_data  = 'b0;\n                       assign mig_p2_wr_mask  = 'b0;\n                       assign mig_p2_en       = 'b0;\n                       assign p2_wr_error     = 'b0;\n                       assign p2_wr_full      = 'b0;\n                       assign p2_wr_empty     = 'b0;\n                       assign p2_wr_underrun  = 'b0;\n                       assign p2_wr_count     = 'b0;\n                                                \n                  end                           \n                   assign p2_rd_data        = 'b0;\n                   assign p2_rd_overflow    = 'b0;\n                   assign p2_rd_error       = 'b0;\n                   assign p2_rd_full        = 'b0;\n                   assign p2_rd_empty       = 'b0;\n                   assign p2_rd_count       = 'b0;\n\n                       \n                       \n                         \n         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[119:96] == \"R32\") begin : u_config1_2R\n\n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin\n                       assign mig_p2_clk        = p2_rd_clk;\n                       assign p2_rd_data        = mig_p2_rd_data;\n                       assign mig_p2_en         = p2_rd_en;  \n                       assign p2_rd_overflow    = mig_p2_overflow;\n                       assign p2_rd_error       = mig_p2_error;\n                       assign p2_rd_full        = mig_p2_full;\n                       assign p2_rd_empty       = mig_p2_empty;\n                       assign p2_rd_count       = mig_p2_count  ; \n                       \n                  end else       \n                  begin\n                       assign mig_p2_clk        = 'b0;\n                       assign p2_rd_data        = 'b0;\n                       assign mig_p2_en         = 'b0;\n                       \n                       assign p2_rd_overflow    = 'b0;\n                       assign p2_rd_error       = 'b0;\n                       assign p2_rd_full        = 'b0;\n                       assign p2_rd_empty       = 'b0;\n                       assign p2_rd_count       = 'b0;\n                       \n                  end\n                  assign mig_p2_wr_data  = 'b0;\n                  assign mig_p2_wr_mask  = 'b0;\n                  assign p2_wr_error     = 'b0;\n                  assign p2_wr_full      = 'b0;\n                  assign p2_wr_empty     = 'b0;\n                  assign p2_wr_underrun  = 'b0;\n                  assign p2_wr_count     = 'b0;\n          \n          end \n          if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[87:64]  == \"W32\") begin : u_config1_3W\n\n\n                  if (C_PORT_ENABLE[3] == 1'b1)\n                  begin\n\n                       assign mig_p3_clk   = p3_wr_clk;\n                       assign mig_p3_wr_data  = p3_wr_data[31:0];\n                       assign mig_p3_wr_mask  = p3_wr_mask[3:0];\n                       assign mig_p3_en       = p3_wr_en; \n                       assign p3_wr_full      = mig_p3_full;\n                       assign p3_wr_empty     = mig_p3_empty;\n                       assign p3_wr_underrun  = mig_p3_underrun;\n                       assign p3_wr_count     = mig_p3_count  ; \n                       assign p3_wr_error     = mig_p3_error;\n                       \n                  end else \n                  begin\n                       assign mig_p3_clk      = 'b0;\n                       assign mig_p3_wr_data  = 'b0;\n                       assign mig_p3_wr_mask  = 'b0;\n                       assign mig_p3_en       = 'b0;\n                       assign p3_wr_full      = 'b0;\n                       assign p3_wr_empty     = 'b0;\n                       assign p3_wr_underrun  = 'b0;\n                       assign p3_wr_count     = 'b0;\n                       assign p3_wr_error     = 'b0;\n                                                \n                  end\n                   assign p3_rd_overflow = 'b0;\n                   assign p3_rd_error    = 'b0;\n                   assign p3_rd_full     = 'b0;\n                   assign p3_rd_empty    = 'b0;\n                   assign p3_rd_count    = 'b0;\n                   assign p3_rd_data     = 'b0;\n       \n                       \n         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[87:64]  == \"R32\") begin : u_config1_3R\n       \n                  if (C_PORT_ENABLE[3] == 1'b1)\n                  begin\n\n                       assign mig_p3_clk     = p3_rd_clk;\n                       assign p3_rd_data     = mig_p3_rd_data;                \n                       assign mig_p3_en      = p3_rd_en;  \n                       assign p3_rd_overflow = mig_p3_overflow;\n                       assign p3_rd_error    = mig_p3_error;\n                       assign p3_rd_full     = mig_p3_full;\n                       assign p3_rd_empty    = mig_p3_empty;\n                       assign p3_rd_count    = mig_p3_count  ; \n                  end else\n                  begin \n                       assign mig_p3_clk     = 'b0;\n                       assign mig_p3_en      = 'b0;\n                       assign p3_rd_overflow = 'b0;\n                       assign p3_rd_full     = 'b0;\n                       assign p3_rd_empty    = 'b0;\n                       assign p3_rd_count    = 'b0;\n                       assign p3_rd_error    = 'b0;\n                       assign p3_rd_data     = 'b0;\n                  end                  \n                  assign p3_wr_full      = 'b0;\n                  assign p3_wr_empty     = 'b0;\n                  assign p3_wr_underrun  = 'b0;\n                  assign p3_wr_count     = 'b0;\n                  assign p3_wr_error     = 'b0;\n                  assign mig_p3_wr_data  = 'b0;\n                  assign mig_p3_wr_mask  = 'b0;\n         end \n         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[55:32]  == \"W32\") begin : u_config1_4W\n       \n\n                  if (C_PORT_ENABLE[4] == 1'b1)\n                  begin\n       \n                       assign mig_p4_clk      = p4_wr_clk;\n                       assign mig_p4_wr_data  = p4_wr_data[31:0];\n                       assign mig_p4_wr_mask  = p4_wr_mask[3:0];\n                       assign mig_p4_en       = p4_wr_en; \n                       assign p4_wr_full      = mig_p4_full;\n                       assign p4_wr_empty     = mig_p4_empty;\n                       assign p4_wr_underrun  = mig_p4_underrun;\n                       assign p4_wr_count     = mig_p4_count  ; \n                       assign p4_wr_error     = mig_p4_error;\n\n                  end else\n                  begin\n                       assign mig_p4_clk      = 'b0;\n                       assign mig_p4_wr_data  = 'b0;\n                       assign mig_p4_wr_mask  = 'b0;\n                       assign mig_p4_en       = 'b0;\n                       assign p4_wr_full      = 'b0;\n                       assign p4_wr_empty     = 'b0;\n                       assign p4_wr_underrun  = 'b0;\n                       assign p4_wr_count     = 'b0;\n                       assign p4_wr_error     = 'b0;\n                  end                           \n                   assign p4_rd_overflow    = 'b0;\n                   assign p4_rd_error       = 'b0;\n                   assign p4_rd_full        = 'b0;\n                   assign p4_rd_empty       = 'b0;\n                   assign p4_rd_count       = 'b0;\n                   assign p4_rd_data        = 'b0;\n       \n         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[55:32]  == \"R32\") begin : u_config1_4R\n                       \n                  if (C_PORT_ENABLE[4] == 1'b1)\n                  begin\n                       assign mig_p4_clk        = p4_rd_clk;\n                       assign p4_rd_data        = mig_p4_rd_data;                \n                       assign mig_p4_en         = p4_rd_en;  \n                       assign p4_rd_overflow    = mig_p4_overflow;\n                       assign p4_rd_error       = mig_p4_error;\n                       assign p4_rd_full        = mig_p4_full;\n                       assign p4_rd_empty       = mig_p4_empty;\n                       assign p4_rd_count       = mig_p4_count  ; \n                       \n                  end else\n                  begin\n                       assign mig_p4_clk        = 'b0;\n                       assign p4_rd_data        = 'b0;\n                       assign mig_p4_en         = 'b0;\n                       assign p4_rd_overflow    = 'b0;\n                       assign p4_rd_error       = 'b0;\n                       assign p4_rd_full        = 'b0;\n                       assign p4_rd_empty       = 'b0;\n                       assign p4_rd_count       = 'b0;\n                  end                  \n                  assign p4_wr_full      = 'b0;\n                  assign p4_wr_empty     = 'b0;\n                  assign p4_wr_underrun  = 'b0;\n                  assign p4_wr_count     = 'b0;\n                  assign p4_wr_error     = 'b0;\n                  assign mig_p4_wr_data  = 'b0;\n                  assign mig_p4_wr_mask  = 'b0;\n\n\n                       \n                       \n         end \n         \n         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[23:0] == \"W32\") begin : u_config1_5W\n       \n\n                       \n                  if (C_PORT_ENABLE[5] == 1'b1)\n                  begin\n                       assign mig_p5_clk   = p5_wr_clk;\n                       assign mig_p5_wr_data  = p5_wr_data[31:0];\n                       assign mig_p5_wr_mask  = p5_wr_mask[3:0];\n                       assign mig_p5_en       = p5_wr_en; \n                       assign p5_wr_full      = mig_p5_full;\n                       assign p5_wr_empty     = mig_p5_empty;\n                       assign p5_wr_underrun  = mig_p5_underrun;\n                       assign p5_wr_count     = mig_p5_count  ; \n                       assign p5_wr_error     = mig_p5_error;\n                       \n                  end else\n                  begin\n                       assign mig_p5_clk      = 'b0;\n                       assign mig_p5_wr_data  = 'b0;\n                       assign mig_p5_wr_mask  = 'b0;\n                       assign mig_p5_en       = 'b0;\n                       assign p5_wr_full      = 'b0;\n                       assign p5_wr_empty     = 'b0;\n                       assign p5_wr_underrun  = 'b0;\n                       assign p5_wr_count     = 'b0;\n                       assign p5_wr_error     = 'b0;\n                  end                           \n                   assign p5_rd_data        = 'b0;\n                   assign p5_rd_overflow    = 'b0;\n                   assign p5_rd_error       = 'b0;\n                   assign p5_rd_full        = 'b0;\n                   assign p5_rd_empty       = 'b0;\n                   assign p5_rd_count       = 'b0;\n                  \n       \n                       \n                         \n         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[23:0] == \"R32\") begin : u_config1_5R\n\n                  if (C_PORT_ENABLE[5] == 1'b1)\n                  begin\n\n                       assign mig_p5_clk        = p5_rd_clk;\n                       assign p5_rd_data        = mig_p5_rd_data;                \n                       assign mig_p5_en         = p5_rd_en;  \n                       assign p5_rd_overflow    = mig_p5_overflow;\n                       assign p5_rd_error       = mig_p5_error;\n                       assign p5_rd_full        = mig_p5_full;\n                       assign p5_rd_empty       = mig_p5_empty;\n                       assign p5_rd_count       = mig_p5_count  ; \n                       \n                 end else\n                 begin\n                       assign mig_p5_clk        = 'b0;\n                       assign p5_rd_data        = 'b0;           \n                       assign mig_p5_en         = 'b0;\n                       assign p5_rd_overflow    = 'b0;\n                       assign p5_rd_error       = 'b0;\n                       assign p5_rd_full        = 'b0;\n                       assign p5_rd_empty       = 'b0;\n                       assign p5_rd_count       = 'b0;\n                 \n                 end\n                 assign p5_wr_full      = 'b0;\n                 assign p5_wr_empty     = 'b0;\n                 assign p5_wr_underrun  = 'b0;\n                 assign p5_wr_count     = 'b0;\n                 assign p5_wr_error     = 'b0;\n                 assign mig_p5_wr_data  = 'b0;\n                 assign mig_p5_wr_mask  = 'b0;\n                       \n         end\n                \n  end else if(C_PORT_CONFIG == \"B32_B32_B32_B32\" ) begin : u_config_2\n\n           \n               \n               \n               \n                  if (C_PORT_ENABLE[0] == 1'b1)\n                  begin\n                           \n                           assign mig_p0_arb_en      =      p0_arb_en ;\n                           assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                           assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                           assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                           assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                           assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                           assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                           assign mig_p0_cmd_bl      =       {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n                           \n                           \n                           assign mig_p0_rd_en    = p0_rd_en;                            \n                           assign mig_p0_wr_clk   = p0_wr_clk;\n                           assign mig_p0_rd_clk   = p0_rd_clk;\n                           assign mig_p0_wr_en    = p0_wr_en;\n                           assign mig_p0_wr_data  = p0_wr_data[31:0]; \n                           assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                           assign p0_wr_count     = mig_p0_wr_count;\n                           assign p0_rd_count  = mig_p0_rd_count  ; \n\n                           \n                           \n                 end else\n                 begin\n                           assign mig_p0_arb_en      =       'b0;\n                           assign mig_p0_cmd_clk     =       'b0;\n                           assign mig_p0_cmd_en      =       'b0;\n                           assign mig_p0_cmd_ra      =       'b0;\n                           assign mig_p0_cmd_ba      =       'b0;\n                           assign mig_p0_cmd_ca      =       'b0;\n                           assign mig_p0_cmd_instr   =       'b0;\n                           assign mig_p0_cmd_bl      =       'b0;\n                           \n                           assign mig_p0_rd_en    = 'b0;                    \n                           assign mig_p0_wr_clk   = 'b0;\n                           assign mig_p0_rd_clk   = 'b0;\n                           assign mig_p0_wr_en    = 'b0;\n                           assign mig_p0_wr_data  = 'b0; \n                           assign mig_p0_wr_mask  = 'b0;\n                           assign p0_wr_count     = 'b0;\n                           assign p0_rd_count     = 'b0;\n\n                           \n                 end                           \n                           \n                           assign p0_cmd_empty       =      mig_p0_cmd_empty ;\n                           assign p0_cmd_full        =      mig_p0_cmd_full  ;\n                           \n                           \n                  if (C_PORT_ENABLE[1] == 1'b1)\n                  begin\n                           \n\n                           assign mig_p1_arb_en      =      p1_arb_en ;\n                           assign mig_p1_cmd_clk     =      p1_cmd_clk  ;\n                           assign mig_p1_cmd_en      =      p1_cmd_en   ;\n                           assign mig_p1_cmd_ra      =      p1_cmd_ra  ;\n                           assign mig_p1_cmd_ba      =      p1_cmd_ba   ;\n                           assign mig_p1_cmd_ca      =      p1_cmd_ca  ;\n                           assign mig_p1_cmd_instr   =      p1_cmd_instr;\n                           assign mig_p1_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n                           \n                 \n                            assign mig_p1_wr_en    = p1_wr_en;\n                            assign mig_p1_wr_clk   = p1_wr_clk;\n                            assign mig_p1_rd_en    = p1_rd_en;\n                            assign mig_p1_wr_data  = p1_wr_data[31:0];\n                            assign mig_p1_wr_mask  = p1_wr_mask[3:0];                \n                            assign mig_p1_rd_clk   = p1_rd_clk;\n                            assign p1_wr_count     = mig_p1_wr_count;\n                            assign p1_rd_count     = mig_p1_rd_count;\n                           \n                  end else\n                  begin\n\n                           assign mig_p1_arb_en      =       'b0;\n                           assign mig_p1_cmd_clk     =       'b0;\n                           assign mig_p1_cmd_en      =       'b0;\n                           assign mig_p1_cmd_ra      =       'b0;\n                           assign mig_p1_cmd_ba      =       'b0;\n                           assign mig_p1_cmd_ca      =       'b0;\n                           assign mig_p1_cmd_instr   =       'b0;\n                           assign mig_p1_cmd_bl      =       'b0;\n                           \n                           assign mig_p1_wr_en    = 'b0; \n                           assign mig_p1_wr_clk   = 'b0;\n                           assign mig_p1_rd_en    = 'b0;\n                           assign mig_p1_wr_data  = 'b0;\n                           assign mig_p1_wr_mask  = 'b0;                \n                           assign mig_p1_rd_clk   = 'b0;\n                            assign p1_wr_count     = 'b0;\n                            assign p1_rd_count     = 'b0;\n                  \n                  end\n                           \n                           \n                           assign p1_cmd_empty       =      mig_p1_cmd_empty ;\n                           assign p1_cmd_full        =      mig_p1_cmd_full  ;\n \n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin   \n                           assign mig_p2_arb_en      =      p2_arb_en ;\n                           assign mig_p2_cmd_clk     =      p2_cmd_clk  ;\n                           assign mig_p2_cmd_en      =      p2_cmd_en   ;\n                           assign mig_p2_cmd_ra      =      p2_cmd_ra  ;\n                           assign mig_p2_cmd_ba      =      p2_cmd_ba   ;\n                           assign mig_p2_cmd_ca      =      p2_cmd_ca  ;\n                           assign mig_p2_cmd_instr   =      p2_cmd_instr;\n                           assign mig_p2_cmd_bl      =      {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}   ;\n                           \n                            assign mig_p2_en       = p2_rd_en;\n                            assign mig_p2_clk      = p2_rd_clk;\n                            assign mig_p3_en       = p2_wr_en;\n                            assign mig_p3_clk      = p2_wr_clk;\n                            assign mig_p3_wr_data  = p2_wr_data[31:0];\n                            assign mig_p3_wr_mask  = p2_wr_mask[3:0];\n                            assign p2_wr_count     = mig_p3_count;\n                            assign p2_rd_count     = mig_p2_count;\n                           \n                  end else\n                  begin\n\n                           assign mig_p2_arb_en      =      'b0;\n                           assign mig_p2_cmd_clk     =      'b0;\n                           assign mig_p2_cmd_en      =      'b0;\n                           assign mig_p2_cmd_ra      =      'b0;\n                           assign mig_p2_cmd_ba      =      'b0;\n                           assign mig_p2_cmd_ca      =      'b0;\n                           assign mig_p2_cmd_instr   =      'b0;\n                           assign mig_p2_cmd_bl      =      'b0;\n\n                            assign mig_p2_en       = 'b0; \n                            assign mig_p2_clk      = 'b0;\n                            assign mig_p3_en       = 'b0;\n                            assign mig_p3_clk      = 'b0;\n                            assign mig_p3_wr_data  = 'b0; \n                            assign mig_p3_wr_mask  = 'b0;\n                            assign p2_rd_count     = 'b0;\n                            assign p2_wr_count     = 'b0;\n                           \n                 end                           \n                         \n                           assign p2_cmd_empty       =      mig_p2_cmd_empty ;\n                           assign p2_cmd_full        =      mig_p2_cmd_full  ;\n  \n                 if (C_PORT_ENABLE[3] == 1'b1)\n                  begin   \n                           assign mig_p4_arb_en      =      p3_arb_en ;\n                           assign mig_p4_cmd_clk     =      p3_cmd_clk  ;\n                           assign mig_p4_cmd_en      =      p3_cmd_en   ;\n                           assign mig_p4_cmd_ra      =      p3_cmd_ra  ;\n                           assign mig_p4_cmd_ba      =      p3_cmd_ba   ;\n                           assign mig_p4_cmd_ca      =      p3_cmd_ca  ;\n                           assign mig_p4_cmd_instr   =      p3_cmd_instr;\n                           assign mig_p4_cmd_bl      =      {(p3_cmd_instr[2] | p3_cmd_bl[5]),p3_cmd_bl[4:0]}  ;\n\n                           assign mig_p4_clk      = p3_rd_clk;\n                           assign mig_p4_en       = p3_rd_en;                            \n                           assign mig_p5_clk      = p3_wr_clk;\n                           assign mig_p5_en       = p3_wr_en; \n                           assign mig_p5_wr_data  = p3_wr_data[31:0];\n                           assign mig_p5_wr_mask  = p3_wr_mask[3:0];\n                           assign p3_rd_count     = mig_p4_count;\n                           assign p3_wr_count     = mig_p5_count;\n                           \n                           \n                  end else\n                  begin\n                           assign mig_p4_arb_en      =     'b0;\n                           assign mig_p4_cmd_clk     =     'b0;\n                           assign mig_p4_cmd_en      =     'b0;\n                           assign mig_p4_cmd_ra      =     'b0;\n                           assign mig_p4_cmd_ba      =     'b0;\n                           assign mig_p4_cmd_ca      =     'b0;\n                           assign mig_p4_cmd_instr   =     'b0;\n                           assign mig_p4_cmd_bl      =     'b0;\n                           \n                            assign mig_p4_clk      = 'b0; \n                            assign mig_p4_en       = 'b0;                   \n                            assign mig_p5_clk      = 'b0;\n                            assign mig_p5_en       = 'b0;\n                            assign mig_p5_wr_data  = 'b0; \n                            assign mig_p5_wr_mask  = 'b0;\n                            assign p3_rd_count     = 'b0;\n                            assign p3_wr_count     = 'b0;\n                           \n                          \n                           \n                  end         \n                           \n                           assign p3_cmd_empty       =      mig_p4_cmd_empty ;\n                           assign p3_cmd_full        =      mig_p4_cmd_full  ;\n                           \n                           \n                            \n                            assign p0_rd_data     = mig_p0_rd_data;\n                            assign p1_rd_data     = mig_p1_rd_data;\n                            assign p2_rd_data     = mig_p2_rd_data;\n                            assign p3_rd_data     = mig_p4_rd_data;\n\n                            assign p0_rd_empty    = mig_p0_rd_empty;\n                            assign p1_rd_empty    = mig_p1_rd_empty;\n                            assign p2_rd_empty    = mig_p2_empty;\n                            assign p3_rd_empty    = mig_p4_empty;\n\n                            assign p0_rd_full     = mig_p0_rd_full;\n                            assign p1_rd_full     = mig_p1_rd_full;\n                            assign p2_rd_full     = mig_p2_full;\n                            assign p3_rd_full     = mig_p4_full;\n\n                            assign p0_rd_error    = mig_p0_rd_error;\n                            assign p1_rd_error    = mig_p1_rd_error;\n                            assign p2_rd_error    = mig_p2_error;\n                            assign p3_rd_error    = mig_p4_error;\n                            \n                            assign p0_rd_overflow = mig_p0_rd_overflow;\n                            assign p1_rd_overflow = mig_p1_rd_overflow;\n                            assign p2_rd_overflow = mig_p2_overflow;\n                            assign p3_rd_overflow = mig_p4_overflow;\n\n                            assign p0_wr_underrun = mig_p0_wr_underrun;\n                            assign p1_wr_underrun = mig_p1_wr_underrun;\n                            assign p2_wr_underrun = mig_p3_underrun;\n                            assign p3_wr_underrun = mig_p5_underrun;\n                            \n                            assign p0_wr_empty    = mig_p0_wr_empty;\n                            assign p1_wr_empty    = mig_p1_wr_empty;\n                            assign p2_wr_empty    = mig_p3_empty; \n                            assign p3_wr_empty    = mig_p5_empty; \n \n                            assign p0_wr_full    = mig_p0_wr_full;\n                            assign p1_wr_full    = mig_p1_wr_full;\n                            assign p2_wr_full    = mig_p3_full;\n                            assign p3_wr_full    = mig_p5_full;\n\n                            assign p0_wr_error    = mig_p0_wr_error;\n                            assign p1_wr_error    = mig_p1_wr_error;\n                            assign p2_wr_error    = mig_p3_error;\n                            assign p3_wr_error    = mig_p5_error;\n\n     \n                           assign p4_cmd_empty        =     1'b0;\n                           assign p4_cmd_full         =     1'b0;\n                           assign mig_p2_wr_mask  = 'b0;\n                           assign mig_p4_wr_mask  = 'b0;\n\n                           assign mig_p2_wr_data     = 'b0;\n                           assign mig_p4_wr_data     = 'b0;\n\n                           assign p5_cmd_empty        =     1'b0;\n                           assign p5_cmd_full         =     1'b0;\n     \n \n                            assign mig_p3_cmd_clk     =      1'b0;\n                            assign mig_p3_cmd_en      =      1'b0;\n                            assign mig_p3_cmd_ra      =      15'd0;\n                            assign mig_p3_cmd_ba      =      3'd0;\n                            assign mig_p3_cmd_ca      =      12'd0;\n                            assign mig_p3_cmd_instr   =      3'd0;\n                            assign mig_p3_cmd_bl      =      6'd0;\n                            assign mig_p3_arb_en      =      1'b0;  \n                            \n                            \n                            \n                            \n                            assign mig_p5_arb_en      =      1'b0;  \n                            assign mig_p5_cmd_clk     =      1'b0;\n                            assign mig_p5_cmd_en      =      1'b0;\n                            assign mig_p5_cmd_ra      =      15'd0;\n                            assign mig_p5_cmd_ba      =      3'd0;\n                            assign mig_p5_cmd_ca      =      12'd0;\n                            assign mig_p5_cmd_instr   =      3'd0;\n                            assign mig_p5_cmd_bl      =      6'd0;\n\n\n\n      \n      \n      \n      \n      \n      \n      \n\n     \n     \n  end else if(C_PORT_CONFIG == \"B64_B32_B32\" ) begin : u_config_3\n\n               \n \n \n       if (C_PORT_ENABLE[0] == 1'b1)\n       begin\n               assign mig_p0_arb_en      =  p0_arb_en ;\n               assign mig_p0_cmd_clk     =  p0_cmd_clk  ;\n               assign mig_p0_cmd_en      =  p0_cmd_en   ;\n               assign mig_p0_cmd_ra      =  p0_cmd_ra  ;\n               assign mig_p0_cmd_ba      =  p0_cmd_ba   ;\n               assign mig_p0_cmd_ca      =  p0_cmd_ca  ;\n               assign mig_p0_cmd_instr   =  p0_cmd_instr;\n               assign mig_p0_cmd_bl      =   {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n               assign p0_cmd_empty       =  mig_p0_cmd_empty ;\n               assign p0_cmd_full        =  mig_p0_cmd_full  ;\n\n               assign mig_p0_wr_clk   = p0_wr_clk;\n               assign mig_p0_rd_clk   = p0_rd_clk;\n               assign mig_p1_wr_clk   = p0_wr_clk;\n               assign mig_p1_rd_clk   = p0_rd_clk;\n                \n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p0_wr_en    = p0_wr_en ;\n               else\n                   assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n\n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p1_wr_en    = p0_wr_en ;\n               else\n                   assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                   \n               assign mig_p0_wr_data  = p0_wr_data[31:0];\n               assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n               assign mig_p1_wr_data  = p0_wr_data[63 : 32];\n               assign mig_p1_wr_mask  = p0_wr_mask[7 : 4];     \n\n               assign p0_rd_empty       = mig_p1_rd_empty;\n               assign p0_rd_data        = {mig_p1_rd_data , mig_p0_rd_data}; \n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p0_rd_en    = p0_rd_en ;\n               else\n                   assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n\n               if (C_USR_INTERFACE_MODE == \"AXI\")               \n                   assign mig_p1_rd_en    = p0_rd_en ;\n                else\n                   assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n\n                assign p0_wr_count       = mig_p1_wr_count;  \n                assign p0_rd_count       = mig_p1_rd_count;\n                assign p0_wr_empty       = mig_p1_wr_empty;\n                assign p0_wr_error       = mig_p1_wr_error | mig_p0_wr_error;  \n                assign p0_wr_full        = mig_p1_wr_full;\n                assign p0_wr_underrun    = mig_p1_wr_underrun | mig_p0_wr_underrun; \n                assign p0_rd_overflow    = mig_p1_rd_overflow | mig_p0_rd_overflow; \n                assign p0_rd_error       = mig_p1_rd_error | mig_p0_rd_error; \n                assign p0_rd_full        = mig_p1_rd_full;\n\n \n       end else\n       begin\n       \n               assign mig_p0_arb_en      = 'b0;\n               assign mig_p0_cmd_clk     = 'b0;\n               assign mig_p0_cmd_en      = 'b0;\n               assign mig_p0_cmd_ra      = 'b0;\n               assign mig_p0_cmd_ba      = 'b0;\n               assign mig_p0_cmd_ca      = 'b0;\n               assign mig_p0_cmd_instr   = 'b0;\n               assign mig_p0_cmd_bl      = 'b0;\n               assign p0_cmd_empty       =  'b0;\n               assign p0_cmd_full        =  'b0;\n\n\n               assign mig_p0_wr_clk   = 'b0;\n               assign mig_p0_rd_clk   = 'b0;\n               assign mig_p1_wr_clk   = 'b0;\n               assign mig_p1_rd_clk   = 'b0;\n               \n               assign mig_p0_wr_en    = 'b0;\n               assign mig_p1_wr_en    = 'b0;\n               assign mig_p0_wr_data  = 'b0;\n               assign mig_p0_wr_mask  = 'b0;\n               assign mig_p1_wr_data  = 'b0;\n               assign mig_p1_wr_mask  = 'b0; \n\n               assign p0_rd_empty       = 'b0;\n               assign p0_rd_data        = 'b0;\n               assign mig_p0_rd_en      = 'b0;\n               assign mig_p1_rd_en      = 'b0;\n \n \n               assign p0_wr_count       =  'b0;\n               assign p0_rd_count       =  'b0;\n               assign p0_wr_empty       =  'b0;\n               assign p0_wr_error       =  'b0;\n               assign p0_wr_full        =  'b0;\n               assign p0_wr_underrun    =  'b0;\n               assign p0_rd_overflow    =  'b0;\n               assign p0_rd_error       =  'b0;\n               assign p0_rd_full        =  'b0;\n                                         \n\n       end       \n       \n        \n \n       if (C_PORT_ENABLE[1] == 1'b1)\n       begin\n\n               assign mig_p2_arb_en      =      p1_arb_en ;\n               assign mig_p2_cmd_clk     =      p1_cmd_clk  ;\n               assign mig_p2_cmd_en      =      p1_cmd_en   ;\n               assign mig_p2_cmd_ra      =      p1_cmd_ra  ;\n               assign mig_p2_cmd_ba      =      p1_cmd_ba   ;\n               assign mig_p2_cmd_ca      =      p1_cmd_ca  ;\n               assign mig_p2_cmd_instr   =      p1_cmd_instr;\n               assign mig_p2_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n               assign p1_cmd_empty       =      mig_p2_cmd_empty;  \n               assign p1_cmd_full        =      mig_p2_cmd_full;   \n\n               assign mig_p2_clk         = p1_rd_clk;\n               assign mig_p3_clk         = p1_wr_clk;\n\n               assign mig_p3_en       = p1_wr_en;\n               assign mig_p3_wr_data  = p1_wr_data[31:0];\n               assign mig_p3_wr_mask  = p1_wr_mask[3:0];\n               assign mig_p2_en       = p1_rd_en;\n\n               assign p1_rd_data        = mig_p2_rd_data;\n               assign p1_wr_count       = mig_p3_count;\n               assign p1_rd_count       = mig_p2_count;\n               assign p1_wr_empty       = mig_p3_empty;\n               assign p1_wr_error       = mig_p3_error;                 \n               assign p1_wr_full        = mig_p3_full;\n               assign p1_wr_underrun    = mig_p3_underrun;\n               assign p1_rd_overflow    = mig_p2_overflow; \n               assign p1_rd_error       = mig_p2_error;\n               assign p1_rd_full        = mig_p2_full;\n               assign p1_rd_empty       = mig_p2_empty;\n \n       end else\n       begin\n\n               assign mig_p2_arb_en      =     'b0; \n               assign mig_p2_cmd_clk     =     'b0; \n               assign mig_p2_cmd_en      =     'b0; \n               assign mig_p2_cmd_ra      =     'b0; \n               assign mig_p2_cmd_ba      =     'b0; \n               assign mig_p2_cmd_ca      =     'b0; \n               assign mig_p2_cmd_instr   =     'b0; \n               assign mig_p2_cmd_bl      =     'b0; \n               assign p1_cmd_empty       =     'b0; \n               assign p1_cmd_full        =     'b0; \n               assign mig_p3_en       = 'b0; \n               assign mig_p3_wr_data  = 'b0; \n               assign mig_p3_wr_mask  = 'b0; \n               assign mig_p2_en       = 'b0; \n\n               assign mig_p2_clk   = 'b0; \n               assign mig_p3_clk   = 'b0; \n               \n               assign p1_rd_data        = 'b0; \n               assign p1_wr_count       = 'b0; \n               assign p1_rd_count       = 'b0; \n               assign p1_wr_empty       = 'b0; \n               assign p1_wr_error       = 'b0;         \n               assign p1_wr_full        = 'b0; \n               assign p1_wr_underrun    = 'b0; \n               assign p1_rd_overflow    = 'b0; \n               assign p1_rd_error       = 'b0; \n               assign p1_rd_full        = 'b0; \n               assign p1_rd_empty       = 'b0; \n \n       end\n       \n       if (C_PORT_ENABLE[2] == 1'b1)\n       begin\n               assign mig_p4_arb_en      = p2_arb_en ;\n               assign mig_p4_cmd_clk     = p2_cmd_clk  ;\n               assign mig_p4_cmd_en      = p2_cmd_en   ;\n               assign mig_p4_cmd_ra      = p2_cmd_ra  ;\n               assign mig_p4_cmd_ba      = p2_cmd_ba   ;\n               assign mig_p4_cmd_ca      = p2_cmd_ca  ;\n               assign mig_p4_cmd_instr   = p2_cmd_instr;\n               assign mig_p4_cmd_bl      = {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}   ;\n               assign p2_cmd_empty       = mig_p4_cmd_empty ; \n               assign p2_cmd_full        = mig_p4_cmd_full  ; \n               assign mig_p5_en          = p2_wr_en;\n               assign mig_p5_wr_data     = p2_wr_data[31:0];\n               assign mig_p5_wr_mask     = p2_wr_mask[3:0];\n               assign mig_p4_en          = p2_rd_en;\n               \n                assign mig_p4_clk        = p2_rd_clk;\n                assign mig_p5_clk        = p2_wr_clk;\n\n                assign p2_rd_data        = mig_p4_rd_data;\n                assign p2_wr_count       = mig_p5_count;\n                assign p2_rd_count       = mig_p4_count;\n                assign p2_wr_empty       = mig_p5_empty;\n                assign p2_wr_full        = mig_p5_full;\n                assign p2_wr_error       = mig_p5_error;  \n                assign p2_wr_underrun    = mig_p5_underrun;\n                assign p2_rd_overflow    = mig_p4_overflow;    \n                assign p2_rd_error       = mig_p4_error;\n                assign p2_rd_full        = mig_p4_full;\n                assign p2_rd_empty       = mig_p4_empty;\n               \n       end else\n       begin\n               assign mig_p4_arb_en      = 'b0;   \n               assign mig_p4_cmd_clk     = 'b0;   \n               assign mig_p4_cmd_en      = 'b0;   \n               assign mig_p4_cmd_ra      = 'b0;   \n               assign mig_p4_cmd_ba      = 'b0;   \n               assign mig_p4_cmd_ca      = 'b0;   \n               assign mig_p4_cmd_instr   = 'b0;   \n               assign mig_p4_cmd_bl      = 'b0;   \n               assign p2_cmd_empty       = 'b0;   \n               assign p2_cmd_full        = 'b0;   \n               assign mig_p5_en          = 'b0; \n               assign mig_p5_wr_data     = 'b0; \n               assign mig_p5_wr_mask     = 'b0; \n               assign mig_p4_en          = 'b0; \n\n                assign mig_p4_clk        = 'b0; \n                assign mig_p5_clk        = 'b0; \n\n                assign p2_rd_data        =   'b0;   \n                assign p2_wr_count       =   'b0;   \n                assign p2_rd_count       =   'b0;   \n                assign p2_wr_empty       =   'b0;   \n                assign p2_wr_full        =   'b0;   \n                assign p2_wr_error       =   'b0;   \n                assign p2_wr_underrun    =   'b0;   \n                assign p2_rd_overflow    =   'b0;     \n                assign p2_rd_error       =   'b0;   \n                assign p2_rd_full        =   'b0;   \n                assign p2_rd_empty       =   'b0;   \n\n       end \n \n\n              \n               assign mig_p1_arb_en      =      1'b0;\n               assign mig_p1_cmd_clk     =      1'b0;\n               assign mig_p1_cmd_en      =      1'b0;\n               assign mig_p1_cmd_ra      =      15'd0;\n               assign mig_p1_cmd_ba      =      3'd0;\n               assign mig_p1_cmd_ca      =      12'd0;\n               \n               assign mig_p1_cmd_instr   =      3'd0;\n               assign mig_p1_cmd_bl      =      6'd0;\n                \n               assign mig_p3_arb_en    =      1'b0;\n               assign mig_p3_cmd_clk     =      1'b0;\n               assign mig_p3_cmd_en      =      1'b0;\n               assign mig_p3_cmd_ra      =      15'd0;\n               assign mig_p3_cmd_ba      =      3'd0;\n               assign mig_p3_cmd_ca      =      12'd0;\n               \n               assign mig_p3_cmd_instr   =      3'd0;\n               assign mig_p3_cmd_bl      =      6'd0;\n\n               assign mig_p5_arb_en    =      1'b0;\n               assign mig_p5_cmd_clk     =      1'b0;\n               assign mig_p5_cmd_en      =      1'b0;\n               assign mig_p5_cmd_ra      =      15'd0;\n               assign mig_p5_cmd_ba      =      3'd0;\n               assign mig_p5_cmd_ca      =      12'd0;\n               \n               assign mig_p5_cmd_instr   =      3'd0;\n               assign mig_p5_cmd_bl      =      6'd0;\n \n\n\nend else if(C_PORT_CONFIG == \"B64_B64\" ) begin : u_config_4\n\n               \n\n                 if (C_PORT_ENABLE[0] == 1'b1)\n                  begin\n               \n                       assign mig_p0_arb_en      =      p0_arb_en ;\n                       assign mig_p1_arb_en      =      p0_arb_en ;\n                       \n                       assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                       assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                       assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                       assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                       assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                       assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                       assign mig_p0_cmd_bl      =       {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n\n\n                        assign mig_p0_wr_clk   = p0_wr_clk;\n                        assign mig_p0_rd_clk   = p0_rd_clk;\n                        assign mig_p1_wr_clk   = p0_wr_clk;\n                        assign mig_p1_rd_clk   = p0_rd_clk;\n                        \n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p0_wr_en    = p0_wr_en ;\n                        else\n                           assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p1_wr_en    = p0_wr_en ;\n                        else\n                           assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                        \n                        \n                        assign mig_p0_wr_data  = p0_wr_data[31:0];\n                        assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                        assign mig_p1_wr_data  = p0_wr_data[63 : 32];\n                        assign mig_p1_wr_mask  = p0_wr_mask[7 : 4];    \n\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p0_rd_en    = p0_rd_en ;\n                        else\n                           assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p1_rd_en    = p0_rd_en ;\n                        else\n                           assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n                        \n                        assign p0_rd_data     = {mig_p1_rd_data , mig_p0_rd_data};\n                        \n                        assign p0_cmd_empty   =     mig_p0_cmd_empty ;\n                        assign p0_cmd_full    =     mig_p0_cmd_full  ;\n                        assign p0_wr_empty    = mig_p1_wr_empty;      \n                        assign p0_wr_full    = mig_p1_wr_full;\n                        assign p0_wr_error    = mig_p1_wr_error | mig_p0_wr_error; \n                        assign p0_wr_count    = mig_p1_wr_count;\n                        assign p0_rd_count    = mig_p1_rd_count;\n                        assign p0_wr_underrun = mig_p1_wr_underrun | mig_p0_wr_underrun; \n                        assign p0_rd_overflow = mig_p1_rd_overflow | mig_p0_rd_overflow; \n                        assign p0_rd_error    = mig_p1_rd_error | mig_p0_rd_error; \n                        assign p0_rd_full     = mig_p1_rd_full;\n                        assign p0_rd_empty    = mig_p1_rd_empty;\n                       \n                       \n                 end else\n                 begin\n                       assign mig_p0_arb_en      =      'b0;\n                       assign mig_p0_cmd_clk     =      'b0;\n                       assign mig_p0_cmd_en      =      'b0;\n                       assign mig_p0_cmd_ra      =      'b0;\n                       assign mig_p0_cmd_ba      =      'b0;\n                       assign mig_p0_cmd_ca      =      'b0;\n                       assign mig_p0_cmd_instr   =      'b0;\n                       assign mig_p0_cmd_bl      =      'b0;\n\n                        assign mig_p0_wr_clk   = 'b0;\n                        assign mig_p0_rd_clk   = 'b0;\n                        assign mig_p1_wr_clk   = 'b0;\n                        assign mig_p1_rd_clk   = 'b0;\n                        assign mig_p0_wr_en    = 'b0;\n                        assign mig_p1_wr_en    = 'b0;\n                        assign mig_p0_wr_data  = 'b0;\n                        assign mig_p0_wr_mask  = 'b0;\n                        assign mig_p1_wr_data  = 'b0;\n                        assign mig_p1_wr_mask  = 'b0;            \n                   \n                        assign mig_p0_rd_en    = 'b0;\n                        assign mig_p1_rd_en    = 'b0;\n                        assign p0_rd_data     = 'b0;\n\n\n                        assign p0_cmd_empty   = 'b0;\n                        assign p0_cmd_full    = 'b0;\n                        assign p0_wr_empty    = 'b0;\n                        assign p0_wr_full     = 'b0;\n                        assign p0_wr_error    = 'b0;\n                        assign p0_wr_count    = 'b0;\n                        assign p0_rd_count    = 'b0;\n                        assign p0_wr_underrun = 'b0;  \n                        assign p0_rd_overflow = 'b0;\n                        assign p0_rd_error    = 'b0;\n                        assign p0_rd_full     = 'b0;\n                        assign p0_rd_empty    = 'b0;\n                 \n                 \n                 end\n\n      \n\n                 if (C_PORT_ENABLE[1] == 1'b1)\n                 begin\n\n                       assign mig_p2_arb_en      =      p1_arb_en ;\n                       \n                       assign mig_p2_cmd_clk     =      p1_cmd_clk  ;\n                       assign mig_p2_cmd_en      =      p1_cmd_en   ;\n                       assign mig_p2_cmd_ra      =      p1_cmd_ra  ;\n                       assign mig_p2_cmd_ba      =      p1_cmd_ba   ;\n                       assign mig_p2_cmd_ca      =      p1_cmd_ca  ;\n                       assign mig_p2_cmd_instr   =      p1_cmd_instr;\n                       assign mig_p2_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n\n\n                        assign mig_p2_clk     = p1_rd_clk;\n                        assign mig_p3_clk     = p1_wr_clk;\n                        assign mig_p4_clk     = p1_rd_clk;\n                        assign mig_p5_clk     = p1_wr_clk;\n                         \n                        \n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p3_en    = p1_wr_en ;\n                        else\n                           assign mig_p3_en    = p1_wr_en & !p1_wr_full;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p5_en    = p1_wr_en ;\n                        else\n                           assign mig_p5_en    = p1_wr_en & !p1_wr_full;\n                        \n\n\n                        \n                        \n                        assign mig_p3_wr_data  = p1_wr_data[31:0];\n                        assign mig_p3_wr_mask  = p1_wr_mask[3:0];\n                        assign mig_p5_wr_data  = p1_wr_data[63 : 32];\n                        assign mig_p5_wr_mask  = p1_wr_mask[7 : 4];                       \n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p2_en    = p1_rd_en ;\n                        else\n                           assign mig_p2_en    = p1_rd_en & !p1_rd_empty;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p4_en    = p1_rd_en ;\n                        else\n                           assign mig_p4_en    = p1_rd_en & !p1_rd_empty;\n\n\n                        assign p1_cmd_empty       =      mig_p2_cmd_empty ;  \n                        assign p1_cmd_full        =      mig_p2_cmd_full  ;\n\n                        assign p1_wr_count    = mig_p5_count;\n                        assign p1_rd_count    = mig_p4_count;\n                        assign p1_wr_full    = mig_p5_full;\n                        assign p1_wr_error    = mig_p5_error | mig_p5_error;\n                        assign p1_wr_empty    = mig_p5_empty;\n                        assign p1_wr_underrun = mig_p3_underrun | mig_p5_underrun;\n                        assign p1_rd_overflow = mig_p4_overflow;\n                        assign p1_rd_error    = mig_p4_error;\n                        assign p1_rd_full     = mig_p4_full;\n                        assign p1_rd_empty    = mig_p4_empty;\n\n                        assign p1_rd_data     = {mig_p4_rd_data , mig_p2_rd_data};\n                       \n                       \n                 end else\n                 begin\n                       assign mig_p2_arb_en      = 'b0;\n                   \n                  \n                  \n                       \n                       assign mig_p2_cmd_clk     = 'b0;\n                       assign mig_p2_cmd_en      = 'b0;\n                       assign mig_p2_cmd_ra      = 'b0;\n                       assign mig_p2_cmd_ba      = 'b0;\n                       assign mig_p2_cmd_ca      = 'b0;\n                       assign mig_p2_cmd_instr   = 'b0;\n                       assign mig_p2_cmd_bl      = 'b0;\n                       assign mig_p2_clk      = 'b0;\n                       assign mig_p3_clk      = 'b0;\n                       assign mig_p4_clk      = 'b0;\n                       assign mig_p5_clk      = 'b0;\n                       assign mig_p3_en       = 'b0;\n                       assign mig_p5_en       = 'b0;\n                       assign mig_p3_wr_data  = 'b0;\n                       assign mig_p3_wr_mask  = 'b0;\n                       assign mig_p5_wr_data  = 'b0;\n                       assign mig_p5_wr_mask  = 'b0; \n                       assign mig_p2_en    = 'b0;\n                       assign mig_p4_en    = 'b0;\n                       assign p1_cmd_empty    = 'b0;  \n                       assign p1_cmd_full     = 'b0;  \n\n                       assign p1_wr_count    = 'b0;\n                       assign p1_rd_count    = 'b0;\n                       assign p1_wr_full     = 'b0;\n                       assign p1_wr_error    = 'b0;\n                       assign p1_wr_empty    = 'b0;\n                       assign p1_wr_underrun = 'b0;\n                       assign p1_rd_overflow = 'b0;\n                       assign p1_rd_error    = 'b0; \n                       assign p1_rd_full     = 'b0; \n                       assign p1_rd_empty    = 'b0; \n                       assign p1_rd_data     = 'b0;\n                       \n                 end               \n                \n                  \n                       assign mig_p3_arb_en      =      1'b0;\n                       assign mig_p4_arb_en      =      1'b0;\n                       assign mig_p5_arb_en      =      1'b0;\n                       \n                       assign mig_p3_cmd_clk     =      1'b0;\n                       assign mig_p3_cmd_en      =      1'b0;\n                       assign mig_p3_cmd_ra      =      15'd0;\n                       assign mig_p3_cmd_ba      =      3'd0;\n                       assign mig_p3_cmd_ca      =      12'd0;\n                       assign mig_p3_cmd_instr   =      3'd0;\n\n                       assign mig_p4_cmd_clk     =      1'b0;\n                       assign mig_p4_cmd_en      =      1'b0;\n                       assign mig_p4_cmd_ra      =      15'd0;\n                       assign mig_p4_cmd_ba      =      3'd0;\n                       assign mig_p4_cmd_ca      =      12'd0;\n                       assign mig_p4_cmd_instr   =      3'd0;\n                       assign mig_p4_cmd_bl      =      6'd0;\n\n                       assign mig_p5_cmd_clk     =      1'b0;\n                       assign mig_p5_cmd_en      =      1'b0;\n                       assign mig_p5_cmd_ra      =      15'd0;\n                       assign mig_p5_cmd_ba      =      3'd0;\n                       assign mig_p5_cmd_ca      =      12'd0;                       \n                       assign mig_p5_cmd_instr   =      3'd0;\n                       assign mig_p5_cmd_bl      =      6'd0;\n\n                \n                \n\n  end else if(C_PORT_CONFIG == \"B128\" ) begin : u_config_5\n\n\n               \n               \n               assign mig_p0_arb_en      =  p0_arb_en ;\n               assign mig_p0_cmd_clk     =  p0_cmd_clk  ;\n               assign mig_p0_cmd_en      =  p0_cmd_en   ;\n               assign mig_p0_cmd_ra      =  p0_cmd_ra  ;\n               assign mig_p0_cmd_ba      =  p0_cmd_ba   ;\n               assign mig_p0_cmd_ca      =  p0_cmd_ca  ;\n               assign mig_p0_cmd_instr   =  p0_cmd_instr;\n               assign mig_p0_cmd_bl      =   {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n               \n               assign p0_cmd_empty       =      mig_p0_cmd_empty ;\n               assign p0_cmd_full        =      mig_p0_cmd_full  ;\n               \n \n \n                \n                \n                assign mig_p0_wr_clk   = p0_wr_clk;\n                assign mig_p0_rd_clk   = p0_rd_clk;\n                assign mig_p1_wr_clk   = p0_wr_clk;\n                assign mig_p1_rd_clk   = p0_rd_clk;\n                \n                assign mig_p2_clk   = p0_rd_clk;\n                assign mig_p3_clk   = p0_wr_clk;\n                assign mig_p4_clk   = p0_rd_clk;\n                assign mig_p5_clk   = p0_wr_clk;\n                \n                \n                if (C_USR_INTERFACE_MODE == \"AXI\") begin\n                \n                   assign mig_p0_wr_en    = p0_wr_en ;\n                   assign mig_p1_wr_en    = p0_wr_en ;\n                   assign mig_p3_en       = p0_wr_en ;\n                   assign mig_p5_en       = p0_wr_en ;\n                   end\n                else begin\n                        \n                   assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n                   assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                   assign mig_p3_en       = p0_wr_en & !p0_wr_full;\n                   assign mig_p5_en       = p0_wr_en & !p0_wr_full;\n                end        \n\n                \n                \n                \n                assign mig_p0_wr_data = p0_wr_data[31:0];\n                assign mig_p0_wr_mask = p0_wr_mask[3:0];\n                assign mig_p1_wr_data = p0_wr_data[63 : 32];\n                assign mig_p1_wr_mask = p0_wr_mask[7 : 4];                \n                assign mig_p3_wr_data = p0_wr_data[95 : 64];\n                assign mig_p3_wr_mask = p0_wr_mask[11 : 8];\n                assign mig_p5_wr_data = p0_wr_data[127 : 96];\n                assign mig_p5_wr_mask = p0_wr_mask[15 : 12];\n                \n                if (C_USR_INTERFACE_MODE == \"AXI\") begin\n                    assign mig_p0_rd_en    = p0_rd_en;\n                    assign mig_p1_rd_en    = p0_rd_en;\n                    assign mig_p2_en       = p0_rd_en;\n                    assign mig_p4_en       = p0_rd_en;\n                    end\n                else begin\n                    assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n                    assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n                    assign mig_p2_en       = p0_rd_en & !p0_rd_empty;\n                    assign mig_p4_en       = p0_rd_en & !p0_rd_empty;\n                end\n                \n                \n                assign p0_rd_data     = {mig_p4_rd_data , mig_p2_rd_data , mig_p1_rd_data , mig_p0_rd_data};\n                assign p0_rd_empty    = mig_p4_empty;\n                assign p0_rd_full     = mig_p4_full;\n                assign p0_rd_error    = mig_p0_rd_error | mig_p1_rd_error | mig_p2_error | mig_p4_error;  \n                assign p0_rd_overflow    = mig_p0_rd_overflow | mig_p1_rd_overflow | mig_p2_overflow | mig_p4_overflow; \n\n                assign p0_wr_underrun    = mig_p0_wr_underrun | mig_p1_wr_underrun | mig_p3_underrun | mig_p5_underrun;      \n                assign p0_wr_empty    = mig_p5_empty;\n                assign p0_wr_full     = mig_p5_full;\n                assign p0_wr_error    = mig_p0_wr_error | mig_p1_wr_error | mig_p3_error | mig_p5_error; \n                \n                assign p0_wr_count    = mig_p5_count;\n                assign p0_rd_count    = mig_p4_count;\n\n\n               \n               \n               assign mig_p1_arb_en      =      1'b0;\n               assign mig_p1_cmd_clk     =      1'b0;\n               assign mig_p1_cmd_en      =      1'b0;\n               assign mig_p1_cmd_ra      =      15'd0;\n               assign mig_p1_cmd_ba      =      3'd0;\n               assign mig_p1_cmd_ca      =      12'd0;\n               \n               assign mig_p1_cmd_instr   =      3'd0;\n               assign mig_p1_cmd_bl      =      6'd0;\n               \n               assign mig_p2_arb_en    =      1'b0;\n               assign mig_p2_cmd_clk     =      1'b0;\n               assign mig_p2_cmd_en      =      1'b0;\n               assign mig_p2_cmd_ra      =      15'd0;\n               assign mig_p2_cmd_ba      =      3'd0;\n               assign mig_p2_cmd_ca      =      12'd0;\n               \n               assign mig_p2_cmd_instr   =      3'd0;\n               assign mig_p2_cmd_bl      =      6'd0;\n               \n               assign mig_p3_arb_en    =      1'b0;\n               assign mig_p3_cmd_clk     =      1'b0;\n               assign mig_p3_cmd_en      =      1'b0;\n               assign mig_p3_cmd_ra      =      15'd0;\n               assign mig_p3_cmd_ba      =      3'd0;\n               assign mig_p3_cmd_ca      =      12'd0;\n               \n               assign mig_p3_cmd_instr   =      3'd0;\n               assign mig_p3_cmd_bl      =      6'd0;\n               \n               assign mig_p4_arb_en    =      1'b0;\n               assign mig_p4_cmd_clk     =      1'b0;\n               assign mig_p4_cmd_en      =      1'b0;\n               assign mig_p4_cmd_ra      =      15'd0;\n               assign mig_p4_cmd_ba      =      3'd0;\n               assign mig_p4_cmd_ca      =      12'd0;\n               \n               assign mig_p4_cmd_instr   =      3'd0;\n               assign mig_p4_cmd_bl      =      6'd0;\n               \n               assign mig_p5_arb_en    =      1'b0;\n               assign mig_p5_cmd_clk     =      1'b0;\n               assign mig_p5_cmd_en      =      1'b0;\n               assign mig_p5_cmd_ra      =      15'd0;\n               assign mig_p5_cmd_ba      =      3'd0;\n               assign mig_p5_cmd_ca      =      12'd0;\n               \n               assign mig_p5_cmd_instr   =      3'd0;\n               assign mig_p5_cmd_bl      =      6'd0;\n                             \n\n                                \nend\nendgenerate\n                              \n   MCB \n   # (         .PORT_CONFIG             (C_PORT_CONFIG),                                    \n               .MEM_WIDTH              (C_NUM_DQ_PINS    ),        \n               .MEM_TYPE                (C_MEM_TYPE       ), \n               .MEM_BURST_LEN            (C_MEM_BURST_LEN  ),  \n               .MEM_ADDR_ORDER           (C_MEM_ADDR_ORDER),               \n               .MEM_CAS_LATENCY          (C_MEM_CAS_LATENCY),        \n               .MEM_DDR3_CAS_LATENCY      (C_MEM_DDR3_CAS_LATENCY   ),\n               .MEM_DDR2_WRT_RECOVERY     (C_MEM_DDR2_WRT_RECOVERY  ),\n               .MEM_DDR3_WRT_RECOVERY     (C_MEM_DDR3_WRT_RECOVERY  ),\n               .MEM_MOBILE_PA_SR          (C_MEM_MOBILE_PA_SR       ),\n               .MEM_DDR1_2_ODS              (C_MEM_DDR1_2_ODS         ),\n               .MEM_DDR3_ODS                (C_MEM_DDR3_ODS           ),\n               .MEM_DDR2_RTT                (C_MEM_DDR2_RTT           ),\n               .MEM_DDR3_RTT                (C_MEM_DDR3_RTT           ),\n               .MEM_DDR3_ADD_LATENCY        (C_MEM_DDR3_ADD_LATENCY   ),\n               .MEM_DDR2_ADD_LATENCY        (C_MEM_DDR2_ADD_LATENCY   ),\n               .MEM_MOBILE_TC_SR            (C_MEM_MOBILE_TC_SR       ),\n               .MEM_MDDR_ODS                (C_MEM_MDDR_ODS           ),\n               .MEM_DDR2_DIFF_DQS_EN        (C_MEM_DDR2_DIFF_DQS_EN   ),\n               .MEM_DDR2_3_PA_SR            (C_MEM_DDR2_3_PA_SR       ),\n               .MEM_DDR3_CAS_WR_LATENCY    (C_MEM_DDR3_CAS_WR_LATENCY),\n               .MEM_DDR3_AUTO_SR           (C_MEM_DDR3_AUTO_SR       ),\n               .MEM_DDR2_3_HIGH_TEMP_SR    (C_MEM_DDR2_3_HIGH_TEMP_SR),\n               .MEM_DDR3_DYN_WRT_ODT       (C_MEM_DDR3_DYN_WRT_ODT   ),\n               .MEM_RA_SIZE               (C_MEM_ADDR_WIDTH            ),\n               .MEM_BA_SIZE               (C_MEM_BANKADDR_WIDTH            ),\n               .MEM_CA_SIZE               (C_MEM_NUM_COL_BITS            ),\n               .MEM_RAS_VAL               (MEM_RAS_VAL            ),  \n               .MEM_RCD_VAL               (MEM_RCD_VAL            ),  \n               .MEM_REFI_VAL               (MEM_REFI_VAL           ),  \n               .MEM_RFC_VAL               (MEM_RFC_VAL            ),  \n               .MEM_RP_VAL                (MEM_RP_VAL             ),  \n               .MEM_WR_VAL                (MEM_WR_VAL             ),  \n               .MEM_RTP_VAL               (MEM_RTP_VAL            ),  \n               .MEM_WTR_VAL               (MEM_WTR_VAL            ),\n               .CAL_BYPASS        (C_MC_CALIB_BYPASS),      \n               .CAL_RA            (C_MC_CALIBRATION_RA),     \n               .CAL_BA            (C_MC_CALIBRATION_BA ),    \n               .CAL_CA            (C_MC_CALIBRATION_CA),  \n               .CAL_CLK_DIV        (C_MC_CALIBRATION_CLK_DIV),        \n               .CAL_DELAY         (C_MC_CALIBRATION_DELAY),\n               .ARB_NUM_TIME_SLOTS         (C_ARB_NUM_TIME_SLOTS),\n               .ARB_TIME_SLOT_0            (arbtimeslot0 )     ,    \n               .ARB_TIME_SLOT_1            (arbtimeslot1 )     ,    \n               .ARB_TIME_SLOT_2            (arbtimeslot2 )     ,    \n               .ARB_TIME_SLOT_3            (arbtimeslot3 )     ,    \n               .ARB_TIME_SLOT_4            (arbtimeslot4 )     ,    \n               .ARB_TIME_SLOT_5            (arbtimeslot5 )     ,    \n               .ARB_TIME_SLOT_6            (arbtimeslot6 )     ,    \n               .ARB_TIME_SLOT_7            (arbtimeslot7 )     ,    \n               .ARB_TIME_SLOT_8            (arbtimeslot8 )     ,    \n               .ARB_TIME_SLOT_9            (arbtimeslot9 )     ,    \n               .ARB_TIME_SLOT_10           (arbtimeslot10)   ,         \n               .ARB_TIME_SLOT_11           (arbtimeslot11)            \n             )  samc_0                                                \n     (                                                              \n                                                                    \n             \n             \n             .PLLCLK            ({ioclk90,ioclk0}),\n             .PLLCE              ({pll_ce_90,pll_ce_0})       ,\n\n             .PLLLOCK       (1'b1),\n             \n             \n             \n             .DQSIOIN           (idelay_dqs_ioi_s),\n             .DQSIOIP           (idelay_dqs_ioi_m),\n             .UDQSIOIN          (idelay_udqs_ioi_s),\n             .UDQSIOIP          (idelay_udqs_ioi_m),\n\n\n               \n               .DQI       (in_dq),\n             \n             .SYSRST         (MCB_SYSRST ), \n   \n            \n             .P0ARBEN            (mig_p0_arb_en),\n             .P0CMDCLK           (mig_p0_cmd_clk),\n             .P0CMDEN            (mig_p0_cmd_en),\n             .P0CMDRA            (mig_p0_cmd_ra),\n             .P0CMDBA            (mig_p0_cmd_ba),\n             .P0CMDCA            (mig_p0_cmd_ca),\n             \n             .P0CMDINSTR         (mig_p0_cmd_instr),\n             .P0CMDBL            (mig_p0_cmd_bl),\n             .P0CMDEMPTY         (mig_p0_cmd_empty),\n             .P0CMDFULL          (mig_p0_cmd_full),\n             \n             \n            \n             .P1ARBEN            (mig_p1_arb_en),\n             .P1CMDCLK           (mig_p1_cmd_clk),\n             .P1CMDEN            (mig_p1_cmd_en),\n             .P1CMDRA            (mig_p1_cmd_ra),\n             .P1CMDBA            (mig_p1_cmd_ba),\n             .P1CMDCA            (mig_p1_cmd_ca),\n             \n             .P1CMDINSTR         (mig_p1_cmd_instr),\n             .P1CMDBL            (mig_p1_cmd_bl),\n             .P1CMDEMPTY         (mig_p1_cmd_empty),\n             .P1CMDFULL          (mig_p1_cmd_full),\n\n             \n             \n             .P2ARBEN            (mig_p2_arb_en),\n             .P2CMDCLK           (mig_p2_cmd_clk),\n             .P2CMDEN            (mig_p2_cmd_en),\n             .P2CMDRA            (mig_p2_cmd_ra),\n             .P2CMDBA            (mig_p2_cmd_ba),\n             .P2CMDCA            (mig_p2_cmd_ca),\n             \n             .P2CMDINSTR         (mig_p2_cmd_instr),\n             .P2CMDBL            (mig_p2_cmd_bl),\n             .P2CMDEMPTY         (mig_p2_cmd_empty),\n             .P2CMDFULL          (mig_p2_cmd_full),\n\n             \n             \n             .P3ARBEN            (mig_p3_arb_en),\n             .P3CMDCLK           (mig_p3_cmd_clk),\n             .P3CMDEN            (mig_p3_cmd_en),\n             .P3CMDRA            (mig_p3_cmd_ra),\n             .P3CMDBA            (mig_p3_cmd_ba),\n             .P3CMDCA            (mig_p3_cmd_ca),\n                               \n             .P3CMDINSTR         (mig_p3_cmd_instr),\n             .P3CMDBL            (mig_p3_cmd_bl),\n             .P3CMDEMPTY         (mig_p3_cmd_empty),\n             .P3CMDFULL          (mig_p3_cmd_full),\n\n             \n             \n             .P4ARBEN            (mig_p4_arb_en),\n             .P4CMDCLK           (mig_p4_cmd_clk),\n             .P4CMDEN            (mig_p4_cmd_en),\n             .P4CMDRA            (mig_p4_cmd_ra),\n             .P4CMDBA            (mig_p4_cmd_ba),\n             .P4CMDCA            (mig_p4_cmd_ca),\n                               \n             .P4CMDINSTR         (mig_p4_cmd_instr),\n             .P4CMDBL            (mig_p4_cmd_bl),\n             .P4CMDEMPTY         (mig_p4_cmd_empty),\n             .P4CMDFULL          (mig_p4_cmd_full),\n\n             \n             \n             .P5ARBEN            (mig_p5_arb_en),\n             .P5CMDCLK           (mig_p5_cmd_clk),\n             .P5CMDEN            (mig_p5_cmd_en),\n             .P5CMDRA            (mig_p5_cmd_ra),\n             .P5CMDBA            (mig_p5_cmd_ba),\n             .P5CMDCA            (mig_p5_cmd_ca),\n                               \n             .P5CMDINSTR         (mig_p5_cmd_instr),\n             .P5CMDBL            (mig_p5_cmd_bl),\n             .P5CMDEMPTY         (mig_p5_cmd_empty),\n             .P5CMDFULL          (mig_p5_cmd_full),\n\n              \n             \n             \n             .DQIOWEN0        (dqIO_w_en_0),\n             .DQSIOWEN90P     (dqsIO_w_en_90_p),\n             .DQSIOWEN90N     (dqsIO_w_en_90_n),\n             \n             \n             \n             .ADDR         (address_90),  \n             .BA           (ba_90 ),      \n             .RAS         (ras_90 ),     \n             .CAS         (cas_90 ),     \n             .WE          (we_90  ),     \n             .CKE          (cke_90 ),     \n             .ODT          (odt_90 ),     \n             .RST          (rst_90 ),     \n             \n             \n             .IOIDRPCLK           (ioi_drp_clk    ),\n             .IOIDRPADDR          (ioi_drp_addr   ),\n             .IOIDRPSDO           (ioi_drp_sdo    ), \n             .IOIDRPSDI           (ioi_drp_sdi    ), \n             .IOIDRPCS            (ioi_drp_cs     ),\n             .IOIDRPADD           (ioi_drp_add    ), \n             .IOIDRPBROADCAST     (ioi_drp_broadcast  ),\n             .IOIDRPTRAIN         (ioi_drp_train    ),\n             .IOIDRPUPDATE         (ioi_drp_update) ,\n             \n             \n             \n             .RECAL               (mcb_recal    ), \n             .UIREAD               (mcb_ui_read),\n             .UIADD                (mcb_ui_add)    ,\n             .UICS                 (mcb_ui_cs)     ,\n             .UICLK                (mcb_ui_clk)    ,\n             .UISDI                (mcb_ui_sdi)    ,\n             .UIADDR               (mcb_ui_addr)   ,\n             .UIBROADCAST          (mcb_ui_broadcast) ,\n             .UIDRPUPDATE          (mcb_ui_drp_update) ,\n             .UIDONECAL            (mcb_ui_done_cal)   ,\n             .UICMD                (mcb_ui_cmd),\n             .UICMDIN              (mcb_ui_cmd_in)     ,\n             .UICMDEN              (mcb_ui_cmd_en)     ,\n             .UIDQCOUNT            (mcb_ui_dqcount)    ,\n             .UIDQLOWERDEC          (mcb_ui_dq_lower_dec),\n             .UIDQLOWERINC          (mcb_ui_dq_lower_inc),\n             .UIDQUPPERDEC          (mcb_ui_dq_upper_dec),\n             .UIDQUPPERINC          (mcb_ui_dq_upper_inc),\n             .UIUDQSDEC          (mcb_ui_udqs_dec),\n             .UIUDQSINC          (mcb_ui_udqs_inc),\n             .UILDQSDEC          (mcb_ui_ldqs_dec),\n             .UILDQSINC          (mcb_ui_ldqs_inc),\n             .UODATA             (uo_data),\n             .UODATAVALID          (uo_data_valid),\n             .UODONECAL            (hard_done_cal)  ,\n             .UOCMDREADYIN         (uo_cmd_ready_in),\n             .UOREFRSHFLAG         (uo_refrsh_flag),\n             .UOCALSTART           (uo_cal_start)   ,\n             .UOSDO                (uo_sdo),\n                                                   \n             \n              .STATUS                    (status),\n              .SELFREFRESHENTER          (selfrefresh_mcb_enter  ),\n              .SELFREFRESHMODE           (selfrefresh_mcb_mode ),  \n\n\n\n            \n              .P0RDDATA         ( mig_p0_rd_data[31:0]    ), \n              .P1RDDATA         ( mig_p1_rd_data[31:0]   ), \n              .P2RDDATA         ( mig_p2_rd_data[31:0]  ), \n              .P3RDDATA         ( mig_p3_rd_data[31:0]       ),\n              .P4RDDATA         ( mig_p4_rd_data[31:0] ), \n              .P5RDDATA         ( mig_p5_rd_data[31:0]        ), \n              .LDMN             ( dqnlm       ),\n              .UDMN             ( dqnum       ),\n              .DQON             ( dqo_n       ),\n              .DQOP             ( dqo_p       ),\n              .LDMP             ( dqplm       ),\n              .UDMP             ( dqpum       ),\n              \n              .P0RDCOUNT          ( mig_p0_rd_count ), \n              .P0WRCOUNT          ( mig_p0_wr_count ),\n              .P1RDCOUNT          ( mig_p1_rd_count ), \n              .P1WRCOUNT          ( mig_p1_wr_count ), \n              .P2COUNT           ( mig_p2_count  ), \n              .P3COUNT           ( mig_p3_count  ),\n              .P4COUNT           ( mig_p4_count  ),\n              .P5COUNT           ( mig_p5_count  ),\n              \n              \n              \n              .P0RDEMPTY        ( mig_p0_rd_empty), \n              .P0RDFULL         ( mig_p0_rd_full), \n              .P0RDOVERFLOW     ( mig_p0_rd_overflow), \n              .P0WREMPTY        ( mig_p0_wr_empty), \n              .P0WRFULL         ( mig_p0_wr_full), \n              .P0WRUNDERRUN     ( mig_p0_wr_underrun), \n              \n              .P1RDEMPTY        ( mig_p1_rd_empty), \n              .P1RDFULL         ( mig_p1_rd_full), \n              .P1RDOVERFLOW     ( mig_p1_rd_overflow),  \n              .P1WREMPTY        ( mig_p1_wr_empty), \n              .P1WRFULL         ( mig_p1_wr_full), \n              .P1WRUNDERRUN     ( mig_p1_wr_underrun),  \n              \n              \n              .P2EMPTY          ( mig_p2_empty),\n              .P2FULL           ( mig_p2_full),\n              .P2RDOVERFLOW        ( mig_p2_overflow), \n              .P2WRUNDERRUN       ( mig_p2_underrun), \n              \n              .P3EMPTY          ( mig_p3_empty ),\n              .P3FULL           ( mig_p3_full ),\n              .P3RDOVERFLOW        ( mig_p3_overflow), \n              .P3WRUNDERRUN       ( mig_p3_underrun ),\n              \n              .P4EMPTY          ( mig_p4_empty),\n              .P4FULL           ( mig_p4_full),\n              .P4RDOVERFLOW        ( mig_p4_overflow), \n              .P4WRUNDERRUN       ( mig_p4_underrun), \n              \n              .P5EMPTY          ( mig_p5_empty ),\n              .P5FULL           ( mig_p5_full ),\n              .P5RDOVERFLOW        ( mig_p5_overflow), \n              .P5WRUNDERRUN       ( mig_p5_underrun), \n              \n              \n              .P0WREN        ( mig_p0_wr_en), \n              .P0RDEN        ( mig_p0_rd_en),                         \n              .P1WREN        ( mig_p1_wr_en), \n              .P1RDEN        ( mig_p1_rd_en), \n              .P2EN          ( mig_p2_en),\n              .P3EN          ( mig_p3_en), \n              .P4EN          ( mig_p4_en), \n              .P5EN          ( mig_p5_en), \n              \n              .P0RWRMASK        ( mig_p0_wr_mask[3:0]), \n              .P1RWRMASK        ( mig_p1_wr_mask[3:0]),\n              .P2WRMASK        ( mig_p2_wr_mask[3:0]),\n              .P3WRMASK        ( mig_p3_wr_mask[3:0]), \n              .P4WRMASK        ( mig_p4_wr_mask[3:0]),\n              .P5WRMASK        ( mig_p5_wr_mask[3:0]), \n              \n              .P0WRDATA      ( mig_p0_wr_data[31:0]), \n              .P1WRDATA      ( mig_p1_wr_data[31:0]),\n              .P2WRDATA      ( mig_p2_wr_data[31:0]),\n              .P3WRDATA      ( mig_p3_wr_data[31:0]), \n              .P4WRDATA      ( mig_p4_wr_data[31:0]),\n              .P5WRDATA      ( mig_p5_wr_data[31:0]),  \n              \n              .P0WRERROR     (mig_p0_wr_error),\n              .P1WRERROR     (mig_p1_wr_error),\n              .P0RDERROR     (mig_p0_rd_error),\n              .P1RDERROR     (mig_p1_rd_error),\n              \n              .P2ERROR       (mig_p2_error),\n              .P3ERROR       (mig_p3_error),\n              .P4ERROR       (mig_p4_error),\n              .P5ERROR       (mig_p5_error),\n              \n              \n              \n              .P0WRCLK            ( mig_p0_wr_clk  ),\n              .P1WRCLK            ( mig_p1_wr_clk  ),\n              .P0RDCLK            ( mig_p0_rd_clk  ),\n              .P1RDCLK            ( mig_p1_rd_clk  ),\n              .P2CLK              ( mig_p2_clk  ),\n              .P3CLK              ( mig_p3_clk  ),\n              .P4CLK              ( mig_p4_clk  ),\n              .P5CLK              ( mig_p5_clk) \n              \n              \n              \n                            \n            \n              );\n             \n\n\n\n\nwire                          DONE_SOFTANDHARD_CAL;\n\nassign uo_done_cal = (   C_CALIB_SOFT_IP == \"TRUE\") ? DONE_SOFTANDHARD_CAL : hard_done_cal;\ngenerate   \nif ( C_CALIB_SOFT_IP == \"TRUE\") begin: gen_term_calib\n\n\n  \n\n \nmcb_soft_calibration_top  # (\n\n    .C_MEM_TZQINIT_MAXCNT (C_MEM_TZQINIT_MAXCNT),\n    .C_MC_CALIBRATION_MODE(C_MC_CALIBRATION_MODE),\n    .SKIP_IN_TERM_CAL     (C_SKIP_IN_TERM_CAL),\n    .SKIP_DYNAMIC_CAL     (C_SKIP_DYNAMIC_CAL),\n    .SKIP_DYN_IN_TERM     (C_SKIP_DYN_IN_TERM),\n    .C_SIMULATION         (C_SIMULATION),\n    .C_MEM_TYPE           (C_MEM_TYPE)\n        )\n  mcb_soft_calibration_top_inst (\n    .UI_CLK               (ui_clk),               \n    .RST                  (int_sys_rst),              \n    .IOCLK                (ioclk0),               \n    .DONE_SOFTANDHARD_CAL (DONE_SOFTANDHARD_CAL), \n    .PLL_LOCK             (gated_pll_lock),\n    \n    .SELFREFRESH_REQ      (soft_cal_selfrefresh_req),    \n    .SELFREFRESH_MCB_MODE (selfrefresh_mcb_mode), \n    .SELFREFRESH_MCB_REQ  (selfrefresh_mcb_enter),\n    .SELFREFRESH_MODE     (selfrefresh_mode),     \n    \n    \n    \n    .MCB_UIADD            (mcb_ui_add),\n    .MCB_UISDI            (mcb_ui_sdi),\n    .MCB_UOSDO            (uo_sdo),               \n    .MCB_UODONECAL        (hard_done_cal),        \n    .MCB_UOREFRSHFLAG     (uo_refrsh_flag),       \n    .MCB_UICS             (mcb_ui_cs),            \n    .MCB_UIDRPUPDATE      (mcb_ui_drp_update),    \n    .MCB_UIBROADCAST      (mcb_ui_broadcast),     \n    .MCB_UIADDR           (mcb_ui_addr),          \n    .MCB_UICMDEN          (mcb_ui_cmd_en),        \n    .MCB_UIDONECAL        (mcb_ui_done_cal),      \n    .MCB_UIDQLOWERDEC     (mcb_ui_dq_lower_dec),\n    .MCB_UIDQLOWERINC     (mcb_ui_dq_lower_inc),\n    .MCB_UIDQUPPERDEC     (mcb_ui_dq_upper_dec),\n    .MCB_UIDQUPPERINC     (mcb_ui_dq_upper_inc),\n    .MCB_UILDQSDEC        (mcb_ui_ldqs_dec),\n    .MCB_UILDQSINC        (mcb_ui_ldqs_inc),\n    .MCB_UIREAD           (mcb_ui_read),          \n    .MCB_UIUDQSDEC        (mcb_ui_udqs_dec),\n    .MCB_UIUDQSINC        (mcb_ui_udqs_inc),\n    .MCB_RECAL            (mcb_recal),\n    .MCB_SYSRST           (MCB_SYSRST),           \n    .MCB_UICMD            (mcb_ui_cmd),\n    .MCB_UICMDIN          (mcb_ui_cmd_in),\n    .MCB_UIDQCOUNT        (mcb_ui_dqcount),\n    .MCB_UODATA           (uo_data),\n    .MCB_UODATAVALID      (uo_data_valid),\n    .MCB_UOCMDREADY       (uo_cmd_ready_in),\n    .MCB_UO_CAL_START     (uo_cal_start),\n    .RZQ_Pin              (rzq),\n    .ZIO_Pin              (zio),\n    .CKE_Train            (cke_train)\n    \n     );\n\n\n\n\n\n\n        assign mcb_ui_clk = ui_clk;\nend\nendgenerate\n\ngenerate   \nif ( C_CALIB_SOFT_IP != \"TRUE\") begin: gen_no_term_calib   \n    assign DONE_SOFTANDHARD_CAL = 1'b0;\n    assign MCB_SYSRST = int_sys_rst | (~wait_200us_counter[15]);\n    assign mcb_recal = calib_recal;\n    assign mcb_ui_read = ui_read;\n    assign mcb_ui_add = ui_add;\n    assign mcb_ui_cs = ui_cs;  \n    assign mcb_ui_clk = ui_clk;\n    assign mcb_ui_sdi = ui_sdi;\n    assign mcb_ui_addr = ui_addr;\n    assign mcb_ui_broadcast = ui_broadcast;\n    assign mcb_ui_drp_update = ui_drp_update;\n    assign mcb_ui_done_cal = ui_done_cal;\n    assign mcb_ui_cmd = ui_cmd;\n    assign mcb_ui_cmd_in = ui_cmd_in;\n    assign mcb_ui_cmd_en = ui_cmd_en;\n    assign mcb_ui_dq_lower_dec = ui_dq_lower_dec;\n    assign mcb_ui_dq_lower_inc = ui_dq_lower_inc;\n    assign mcb_ui_dq_upper_dec = ui_dq_upper_dec;\n    assign mcb_ui_dq_upper_inc = ui_dq_upper_inc;\n    assign mcb_ui_udqs_inc = ui_udqs_inc;\n    assign mcb_ui_udqs_dec = ui_udqs_dec;\n    assign mcb_ui_ldqs_inc = ui_ldqs_inc;\n    assign mcb_ui_ldqs_dec = ui_ldqs_dec; \n    assign selfrefresh_mode = 1'b0;\n \n    if (C_SIMULATION == \"FALSE\") begin: init_sequence\n        always @ (posedge ui_clk, posedge int_sys_rst)\n        begin\n            if (int_sys_rst)\n                wait_200us_counter <= 'b0;\n            else \n               if (wait_200us_counter[15])  \n                   wait_200us_counter <= wait_200us_counter                        ;\n               else\n                   wait_200us_counter <= wait_200us_counter + 1'b1;\n        end \n    end \n    else begin: init_sequence_skip\n\n        initial\n        begin\n           wait_200us_counter = 16'hFFFF;\n           $display(\"The 200 us wait period required before CKE goes active has been skipped in Simulation\\n\");\n        end       \n\n    end\n   \n    \n    if( C_MEM_TYPE == \"DDR2\") begin : gen_cketrain_a\n\n        always @ ( posedge ui_clk)\n        begin \n          \n          \n          if (wait_200us_counter[14] && wait_200us_counter[13])\n             wait_200us_done_r1 <= 1'b1;\n          else\n             wait_200us_done_r1 <= 1'b0;\n          \n\n          wait_200us_done_r2 <= wait_200us_done_r1;\n        end\n        \n        always @ ( posedge ui_clk, posedge int_sys_rst)\n        begin \n        if (int_sys_rst)\n           cke_train_reg <= 1'b0;\n        else \n           if ( wait_200us_done_r1 && ~wait_200us_done_r2 )\n               cke_train_reg <= 1'b1;\n           else if ( uo_done_cal)\n               cke_train_reg <= 1'b0;\n        end\n        \n        assign cke_train = cke_train_reg;\n    end\n\n    if( C_MEM_TYPE != \"DDR2\") begin : gen_cketrain_b\n    \n        assign cke_train = 1'b0;\n    end        \n        \n        \nend \nendgenerate\n\n\n\n\n\n\n\n\n\ngenvar addr_ioi;\n   generate \n      for(addr_ioi = 0; addr_ioi < C_MEM_ADDR_WIDTH; addr_ioi = addr_ioi + 1) begin : gen_addr_oserdes2\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_addr_0  \n(\n  .OQ(ioi_addr[addr_ioi]),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ(t_addr[addr_ioi]),\n  .CLK0(ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1(address_90[addr_ioi]),\n  .D2(address_90[addr_ioi]),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE(pll_ce_0),\n  .OCE(1'b1),\n  .RST(int_sys_rst),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3(1'b0),\n  .SHIFTIN4(1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN(1'b0)\n    );\n end       \n   endgenerate\n\n\n\n\n\ngenvar ba_ioi;\n   generate \n      for(ba_ioi = 0; ba_ioi < C_MEM_BANKADDR_WIDTH; ba_ioi = ba_ioi + 1) begin : gen_ba_oserdes2\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ba_0  \n(\n  .OQ       (ioi_ba[ba_ioi]),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_ba[ba_ioi]),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (ba_90[ba_ioi]),\n  .D2       (ba_90[ba_ioi]),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\n end       \n   endgenerate\n\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_cas_0 \n(\n  .OQ       (ioi_cas),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_cas),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (cas_90),\n  .D2       (cas_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\n\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)    ,       \n  .TRAIN_PATTERN (15)\n) ioi_cke_0 \n(\n  .OQ       (ioi_cke),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_cke),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (cke_90),\n  .D2       (cke_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n  .RST      (1'b0),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (cke_train)\n    );\n\n\n\n\ngenerate\nif(C_MEM_TYPE == \"DDR3\" || C_MEM_TYPE == \"DDR2\" ) begin : gen_ioi_odt\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_odt_0 \n(\n  .OQ       (ioi_odt),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_odt),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (odt_90),\n  .D2       (odt_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\nend\nendgenerate\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ras_0 \n(\n  .OQ       (ioi_ras),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_ras),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (ras_90),\n  .D2       (ras_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1 (1'b0),\n  .T2 (1'b0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE (1'b1),\n  .TRAIN    (1'b0)\n    );\n\n\n\n\ngenerate \nif (C_MEM_TYPE == \"DDR3\"  ) begin : gen_ioi_rst\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_rst_0 \n(\n  .OQ       (ioi_rst),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_rst),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (rst_90),\n  .D2       (rst_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\nend\nendgenerate\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_we_0 \n(\n  .OQ       (ioi_we),\n  .TQ       (t_we),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (we_90),\n  .D2       (we_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ck_0 \n(\n  .OQ       (ioi_ck),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (t_ck),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b0),\n  .D2       (1'b1),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n\n  .RST      (1'b0),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwire udm_oq;\nwire udm_t;\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_udm_0 \n(\n  .OQ       (udm_oq),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (udm_t),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqpum),\n  .D2       (dqnum),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\nwire ldm_oq;\nwire ldm_t;\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ldm_0 \n(\n  .OQ       (ldm_oq),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (ldm_t),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqplm),\n  .D2       (dqnlm),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire dq_oq [C_NUM_DQ_PINS-1:0];\nwire dq_tq [C_NUM_DQ_PINS-1:0];\n\ngenvar dq;\ngenerate\n      for(dq = 0; dq < C_NUM_DQ_PINS; dq = dq + 1) begin : gen_dq\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2),           \n  .TRAIN_PATTERN (5)            \n) oserdes2_dq_0 \n(\n  .OQ       (dq_oq[dq]),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (dq_tq[dq]),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqo_p[dq]),\n  .D2       (dqo_n[dq]),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (ioi_drp_train)\n);\n\nend\nendgenerate\n\n\n\n\n\nwire dqsp_oq ;\nwire dqsp_tq ;\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) oserdes2_dqsp_0 \n(\n  .OQ       (dqsp_oq),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (dqsp_tq),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b0),\n  .D2       (1'b1),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqsIO_w_en_90_n),\n  .T2       (dqsIO_w_en_90_p),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire dqsn_oq ;\nwire dqsn_tq ;\n\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_SLAVE),          \n  .DATA_WIDTH    (2)           \n) oserdes2_dqsn_0 \n(\n  .OQ       (dqsn_oq),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (dqsn_tq),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b1),\n  .D2       (1'b0),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3(1'b0),\n  .SHIFTIN4(1'b0),\n  .T1       (dqsIO_w_en_90_n),\n  .T2       (dqsIO_w_en_90_p),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire udqsp_oq ;\nwire udqsp_tq ;\n\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) oserdes2_udqsp_0 \n(\n  .OQ       (udqsp_oq),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (udqsp_tq),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b0),\n  .D2       (1'b1),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqsIO_w_en_90_n),\n  .T2       (dqsIO_w_en_90_p),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire udqsn_oq ;\nwire udqsn_tq ;\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_SLAVE),          \n  .DATA_WIDTH    (2)           \n) oserdes2_udqsn_0 \n(\n  .OQ       (udqsn_oq),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (udqsn_tq),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b1),\n  .D2       (1'b0),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3(1'b0),\n  .SHIFTIN4(1'b0),\n  .T1       (dqsIO_w_en_90_n),\n  .T2       (dqsIO_w_en_90_p),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n\n\n\n\n\nwire aux_sdi_out_udqsp;\nwire aux_sdi_out_10;\nwire aux_sdi_out_11;\nwire aux_sdi_out_12;\nwire aux_sdi_out_14;\nwire aux_sdi_out_15;\n\n\n\n\ngenerate\nif(C_NUM_DQ_PINS == 16 ) begin : dq_15_0_data\n\n\n\n\nwire aux_sdi_out_14;\nwire aux_sdi_out_15;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ14_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (7),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n)\niodrp2_dq_14\n(\n  .AUXSDO             (aux_sdi_out_14),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[14]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[14]),\n  .SDO(),\n  .TOUT               (t_dq[14]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_15),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[14]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[14]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[14]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ15_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (7),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_15\n(\n  .AUXSDO             (aux_sdi_out_15),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[15]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[15]),\n  .SDO(),\n  .TOUT               (t_dq[15]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[15]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[15]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[15]) \n);\n\n\n\nwire aux_sdi_out_12;\nwire aux_sdi_out_13;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ12_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (6),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_12\n(\n  .AUXSDO             (aux_sdi_out_12),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[12]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[12]),\n  .SDO(),\n  .TOUT               (t_dq[12]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_13),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[12]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[12]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[12]) \n);\n\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ13_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (6),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_13\n(\n  .AUXSDO             (aux_sdi_out_13),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[13]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[13]),\n  .SDO(),\n  .TOUT               (t_dq[13]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_14),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[13]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[13]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[13]) \n);\n\n\nwire aux_sdi_out_udqsp;\nwire aux_sdi_out_udqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (UDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (14),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_udqsp_0\n(\n  .AUXSDO             (aux_sdi_out_udqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_udqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_udqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_udqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_udqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (UDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (14),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_udqsn_0\n(\n  .AUXSDO             (aux_sdi_out_udqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_udqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_udqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_12),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_udqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udqsn_tq) \n);\n\n\nwire aux_sdi_out_10;\nwire aux_sdi_out_11;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ10_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (5),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_10\n(\n  .AUXSDO             (aux_sdi_out_10),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[10]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[10]),\n  .SDO(),\n  .TOUT               (t_dq[10]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_11),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[10]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[10]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[10]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ11_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (5),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_11\n(\n  .AUXSDO             (aux_sdi_out_11),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[11]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[11]),\n  .SDO(),\n  .TOUT               (t_dq[11]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_udqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[11]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[11]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[11])\n);\n\n\n\nwire aux_sdi_out_8;\nwire aux_sdi_out_9;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ8_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (4),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_8\n(\n  .AUXSDO             (aux_sdi_out_8),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[8]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[8]),\n  .SDO(),\n  .TOUT               (t_dq[8]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_9),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[8]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[8]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[8]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ9_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (4),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_9\n(\n  .AUXSDO             (aux_sdi_out_9),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[9]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[9]),\n  .SDO(),\n  .TOUT               (t_dq[9]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_10),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[9]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[9]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[9]) \n);\n\n\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_8),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\nwire aux_sdi_out_6;\nwire aux_sdi_out_7;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ6_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_6\n(\n  .AUXSDO             (aux_sdi_out_6),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[6]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[6]),\n  .SDO(),\n  .TOUT               (t_dq[6]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_7),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[6]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[6]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[6]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ7_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_7\n(\n  .AUXSDO             (aux_sdi_out_7),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[7]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[7]),\n  .SDO(),\n  .TOUT               (t_dq[7]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[7]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[7]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[7]) \n);\n\n\n\nwire aux_sdi_out_4;\nwire aux_sdi_out_5;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ4_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_4\n(\n  .AUXSDO             (aux_sdi_out_4),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[4]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[4]),\n  .SDO(),\n  .TOUT               (t_dq[4]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_5),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[4]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[4]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[4]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ5_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_5\n(\n  .AUXSDO             (aux_sdi_out_5),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[5]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[5]),\n  .SDO(),\n  .TOUT               (t_dq[5]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_6),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[5]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[5]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[5]) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\nend\nendgenerate\n\ngenerate\nif(C_NUM_DQ_PINS == 8 ) begin : dq_7_0_data\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\nwire aux_sdi_out_6;\nwire aux_sdi_out_7;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ6_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_6\n(\n  .AUXSDO             (aux_sdi_out_6),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[6]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[6]),\n  .SDO(),\n  .TOUT               (t_dq[6]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_7),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[6]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[6]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[6]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ7_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_7\n(\n  .AUXSDO             (aux_sdi_out_7),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[7]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[7]),\n  .SDO(),\n  .TOUT               (t_dq[7]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[7]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[7]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[7]) \n);\n\n\n\nwire aux_sdi_out_4;\nwire aux_sdi_out_5;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ4_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_4\n(\n  .AUXSDO             (aux_sdi_out_4),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[4]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[4]),\n  .SDO(),\n  .TOUT               (t_dq[4]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_5),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[4]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[4]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[4]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ5_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_5\n(\n  .AUXSDO             (aux_sdi_out_5),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[5]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[5]),\n  .SDO(),\n  .TOUT               (t_dq[5]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_6),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[5]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[5]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[5]) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\nend\nendgenerate\n\ngenerate\nif(C_NUM_DQ_PINS == 4 ) begin : dq_3_0_data\n\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\n\nend\nendgenerate\n\n \n \n \n \n \n\n\n\n\ngenvar addr_i;\n   generate \n      for(addr_i = 0; addr_i < C_MEM_ADDR_WIDTH; addr_i = addr_i + 1) begin : gen_addr_obuft\n        OBUFT iob_addr_inst\n        (.I  ( ioi_addr[addr_i]), \n         .T   ( t_addr[addr_i]), \n         .O ( mcbx_dram_addr[addr_i])\n        );\n      end       \n   endgenerate\n\ngenvar ba_i;\n   generate \n      for(ba_i = 0; ba_i < C_MEM_BANKADDR_WIDTH; ba_i = ba_i + 1) begin : gen_ba_obuft\n        OBUFT iob_ba_inst\n        (.I  ( ioi_ba[ba_i]), \n         .T   ( t_ba[ba_i]), \n         .O ( mcbx_dram_ba[ba_i])\n        );\n      end       \n   endgenerate\n\n\n\n\nOBUFT iob_ras (.O(mcbx_dram_ras_n),.I(ioi_ras),.T(t_ras));\nOBUFT iob_cas (.O(mcbx_dram_cas_n),.I(ioi_cas),.T(t_cas));\nOBUFT iob_we  (.O(mcbx_dram_we_n ),.I(ioi_we ),.T(t_we ));\nOBUFT iob_cke (.O(mcbx_dram_cke),.I(ioi_cke),.T(t_cke));\n\ngenerate \nif (C_MEM_TYPE == \"DDR3\") begin : gen_ddr3_rst\nOBUFT iob_rst (.O(mcbx_dram_ddr3_rst),.I(ioi_rst),.T(t_rst));\nend\nendgenerate\ngenerate\nif((C_MEM_TYPE == \"DDR3\"  && (C_MEM_DDR3_RTT != \"OFF\" || C_MEM_DDR3_DYN_WRT_ODT != \"OFF\"))\n ||(C_MEM_TYPE == \"DDR2\" &&  C_MEM_DDR2_RTT != \"OFF\") ) begin : gen_dram_odt\nOBUFT iob_odt (.O(mcbx_dram_odt),.I(ioi_odt),.T(t_odt));\nend\nendgenerate\n\n\nOBUFTDS iob_clk  (.I(ioi_ck), .T(t_ck), .O(mcbx_dram_clk), .OB(mcbx_dram_clk_n)); \n\n\ngenvar dq_i;\ngenerate\n      for(dq_i = 0; dq_i < C_NUM_DQ_PINS; dq_i = dq_i + 1) begin : gen_dq_iobuft\n         IOBUF gen_iob_dq_inst (.IO(mcbx_dram_dq[dq_i]),.I(ioi_dq[dq_i]),.T(t_dq[dq_i]),.O(in_pre_dq[dq_i]));\n      end\nendgenerate\n\n\n\ngenerate \nif(C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) begin: gen_dqs_iobuf\nIOBUF iob_dqs  (.IO(mcbx_dram_dqs), .I(ioi_dqs),.T(t_dqs),.O(in_pre_dqsp));\nend else begin: gen_dqs_iobufds\nIOBUFDS iob_dqs  (.IO(mcbx_dram_dqs),.IOB(mcbx_dram_dqs_n), .I(ioi_dqs),.T(t_dqs),.O(in_pre_dqsp));\n\nend\nendgenerate\n\ngenerate\nif((C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) && C_NUM_DQ_PINS == 16) begin: gen_udqs_iobuf\nIOBUF iob_udqs  (.IO(mcbx_dram_udqs), .I(ioi_udqs),.T(t_udqs),.O(in_pre_udqsp));\nend else if(C_NUM_DQ_PINS == 16) begin: gen_udqs_iobufds\nIOBUFDS iob_udqs  (.IO(mcbx_dram_udqs),.IOB(mcbx_dram_udqs_n), .I(ioi_udqs),.T(t_udqs),.O(in_pre_udqsp));\n\nend\nendgenerate\n\n\ngenerate \nif(C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) begin: gen_dqs_pullupdn\nPULLDOWN dqs_pulldown (.O(mcbx_dram_dqs));\nend else begin: gen_dqs_pullupdn_ds\nPULLDOWN dqs_pulldown (.O(mcbx_dram_dqs));\nPULLUP dqs_n_pullup (.O(mcbx_dram_dqs_n));\n\nend\nendgenerate\n\n\ngenerate\nif((C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) && C_NUM_DQ_PINS == 16) begin: gen_udqs_pullupdn\nPULLDOWN udqs_pulldown (.O(mcbx_dram_udqs));\nend else if(C_NUM_DQ_PINS == 16) begin: gen_udqs_pullupdn_ds\nPULLDOWN udqs_pulldown (.O(mcbx_dram_udqs));\nPULLUP   udqs_n_pullup (.O(mcbx_dram_udqs_n));\n\nend\nendgenerate\n\n\n\n\n\n\ngenerate\nif( C_NUM_DQ_PINS == 16) begin : gen_udm\nOBUFT iob_udm (.I(ioi_udm), .T(t_udm), .O(mcbx_dram_udm)); \nend\nendgenerate\n\nOBUFT iob_ldm (.I(ioi_ldm), .T(t_ldm), .O(mcbx_dram_ldm)); \n\nendmodule\n\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: mcb_raw_wrapper. Module specification: This module is a wrapper for a Memory Controller Block (MCB) that interfaces with various types of DRAM (DDR, DDR2, DDR3, LPDDR). It handles the configuration and control of memory operations, including address and data management, command generation, and I/O buffer instantiation. The module supports different port configurations and memory widths, and includes features such as calibration, DQS (data strobe) management, and various timing parameters. Key input ports include clock signals (sysclk_2x, sysclk_2x_180), control signals (pll_ce_0, pll_ce_90, pll_lock, sys_rst), and multiple port-specific inputs for commands, data, and control. Output ports include memory interface signals (mcbx_dram_addr, mcbx_dram_"
                }
            ]
        }
    ]
}