{
    "line_num": [
        [
            254,
            255
        ],
        [
            222,
            253
        ],
        [
            207,
            220
        ],
        [
            186,
            206
        ],
        [
            182,
            184
        ],
        [
            164,
            181
        ],
        [
            154,
            159
        ],
        [
            135,
            148
        ]
    ],
    "blocks": [
        "defparam\n\tI2C_Controller.I2C_BUS_MODE\t= I2C_BUS_MODE;",
        "Altera_UP_I2C I2C_Controller (\n\t\n\t.clk\t\t\t\t\t(CLOCK_50),\n\t.reset\t\t\t\t\t(reset),\n\n\t.clear_ack\t\t\t\t(1'b1),\n\n\t.clk_400KHz\t\t\t\t(clk_400KHz),\n\t.start_and_stop_en\t\t(start_and_stop_en),\n\t.change_output_bit_en\t(change_output_bit_en),\n\n\t.send_start_bit\t\t\t(send_start_bit),\n\t.send_stop_bit\t\t\t(send_stop_bit),\n\n\t.data_in\t\t\t\t(data_to_transfer),\n\t.transfer_data\t\t\t(transfer_data),\n\t.read_byte\t\t\t\t(1'b0),\n\t.num_bits_to_transfer\t(num_bits_to_transfer),\n\n\t\n\t.i2c_sdata\t\t\t\t(I2C_SDAT),\n\n\t\n\t.i2c_sclk\t\t\t\t(I2C_SCLK),\n\t.i2c_scen\t\t\t\t(),\n\n\t.enable_clk\t\t\t\t(enable_clk),\n\n\t.ack\t\t\t\t\t(i2c_ack),\n\t.data_from_i2c\t\t\t(i2c_received_data),\n\t.transfer_complete\t\t(transfer_complete)\n);",
        "defparam\n\tAuto_Initialize.MIN_ROM_ADDRESS\t= MIN_ROM_ADDRESS,\n\tAuto_Initialize.MAX_ROM_ADDRESS\t= MAX_ROM_ADDRESS,\n\n\tAuto_Initialize.AUD_LINE_IN_LC\t= AUD_LINE_IN_LC,\n\tAuto_Initialize.AUD_LINE_IN_RC\t= AUD_LINE_IN_RC,\n\tAuto_Initialize.AUD_LINE_OUT_LC\t= AUD_LINE_OUT_LC,\n\tAuto_Initialize.AUD_LINE_OUT_RC\t= AUD_LINE_OUT_RC,\n\tAuto_Initialize.AUD_ADC_PATH\t= AUD_ADC_PATH,\n\tAuto_Initialize.AUD_DAC_PATH\t= AUD_DAC_PATH,\n\tAuto_Initialize.AUD_POWER\t\t= AUD_POWER,\n\tAuto_Initialize.AUD_DATA_FORMAT\t= AUD_DATA_FORMAT,\n\tAuto_Initialize.AUD_SAMPLE_CTRL\t= AUD_SAMPLE_CTRL,\n\tAuto_Initialize.AUD_SET_ACTIVE\t= AUD_SET_ACTIVE;",
        "Altera_UP_I2C_AV_Auto_Initialize Auto_Initialize (\n\t\n\t.clk\t\t\t\t(CLOCK_50),\n\t.reset\t\t\t\t(reset),\n\n\t.clear_error\t\t(1'b1),\n\n\t.ack\t\t\t\t(i2c_ack),\n\t.transfer_complete\t(transfer_complete),\n\n\t\n\n\t\n\t.data_out\t\t\t(auto_init_data),\n\t.transfer_data\t\t(auto_init_transfer_data),\n\t.send_start_bit\t\t(auto_init_start_bit),\n\t.send_stop_bit\t\t(auto_init_stop_bit),\n\n\t.auto_init_complete\t(auto_init_complete),\n\t.auto_init_error\t(auto_init_error)\n);",
        "defparam\n\tClock_Generator_400KHz.COUNTER_BITS\t= 10, \n\tClock_Generator_400KHz.COUNTER_INC\t= 10'h001; ",
        "Altera_UP_Slow_Clock_Generator Clock_Generator_400KHz (\n\t\n\t.clk\t\t\t\t\t(CLOCK_50),\n\t.reset\t\t\t\t\t(reset),\n\n\t.enable_clk\t\t\t\t(enable_clk),\n\t\n\t\n\n\t\n\t.new_clk\t\t\t\t(clk_400KHz),\n\n\t.rising_edge\t\t\t(),\n\t.falling_edge\t\t\t(),\n\n\t.middle_of_high_level\t\t(start_and_stop_en),\n\t.middle_of_low_level\t\t(change_output_bit_en)\n);",
        "assign transfer_data = auto_init_transfer_data;\n\nassign send_start_bit = auto_init_start_bit;\n\nassign send_stop_bit = auto_init_stop_bit;\n",
        "always @(posedge CLOCK_50)\nbegin\n\tif (reset)\n\tbegin\n\t\tdata_to_transfer\t\t<= 8'h00;\n\t\tnum_bits_to_transfer\t<= 3'h0;\n\tend\n\telse\n\t\tif (auto_init_complete == 1'b0)\n\t\tbegin\n\t\t\tdata_to_transfer\t\t<= auto_init_data;\n\t\t\tnum_bits_to_transfer\t<= 3'h7;\n\t\tend\nend"
    ]
}