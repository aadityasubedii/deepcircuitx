{
    "line_num": [
        [
            363,
            467
        ],
        [
            241,
            348
        ],
        [
            227,
            237
        ],
        [
            182,
            212
        ],
        [
            180,
            180
        ],
        [
            169,
            178
        ],
        [
            147,
            157
        ],
        [
            145,
            145
        ],
        [
            90,
            139
        ],
        [
            80,
            88
        ],
        [
            78,
            78
        ],
        [
            58,
            76
        ],
        [
            54,
            56
        ],
        [
            15,
            15
        ],
        [
            8,
            11
        ]
    ],
    "blocks": [
        "    initial begin\n\n        $display(\"start i2s tx 32 tests\");\n\n        left_tx_32 <= 16'hdead;\n        right_tx_32 <= 16'hface;\n\n        wait(!rst);\n        @(posedge ck);\n\n        \n        wait(frame_posn == 'h0);\n        @(posedge ck);\n        wait(frame_posn == 'h1);\n        @(posedge ck);\n        \n        wait(frame_posn == 'h0);\n        \n        wait_sample(sample);\n\n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n\n        \n        \n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx_32 == 1'b1);\n\n    end",
        "    initial begin\n\n        $display(\"start i2s tx tests\");\n\n        left_tx <= 16'h1234;\n        right_tx <= 16'habcd;\n\n        wait(!rst);\n        @(posedge ck);\n\n        \n        wait(frame_posn == 'h0);\n        @(posedge ck);\n        wait(frame_posn == 'h1);\n        @(posedge ck);\n        \n        wait(frame_posn == 'h0);\n        \n        wait_sample(sample);\n\n        \n        \n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        \n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        \n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        \n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n\n        \n        for (i = 0; i < 16; i = i + 1) begin\n            wait_sample(sample);\n            tb_assert(tx == 1'b0);\n        end\n\n        \n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        \n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        \n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        \n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n        wait_sample(sample);\n        tb_assert(tx == 1'b0);\n        wait_sample(sample);\n        tb_assert(tx == 1'b1);\n\n        \n        for (i = 0; i < 16; i = i + 1) begin\n            wait_sample(sample);\n            tb_assert(tx == 1'b0);\n        end\n\n    end",
        "    task wait_sample(input signal);\n\n        begin\n            @(posedge ck);\n            wait(sample);\n            @(posedge ck);\n            wait(!sample);\n            @(posedge ck);\n        end\n\n    endtask",
        "    initial begin\n\n        $display(\"start i2s 32-bit rx tests\");\n\n        wait(!rst);\n        @(posedge ck);\n\n        send_32(16'hface, 16'h1234);\n        wait(frame == 18);\n        tb_assert(left_32 == 16'hface);\n        wait(frame == 2);\n        tb_assert(right_32 == 16'h1234);\n\n        send_32(16'hffff, 16'h0000);\n        wait(frame == 18);\n        tb_assert(left_32 == 16'hffff);\n        wait(frame == 2);\n        tb_assert(right_32 == 16'h0000);\n\n        send_32(16'h0000, 16'hffff);\n        wait(frame == 18);\n        tb_assert(left_32 == 16'h0000);\n        wait(frame == 2);\n        tb_assert(right_32 == 16'hffff);\n\n        send_32(16'haaaa, 16'h5555);\n        wait(frame == 18);\n        tb_assert(left_32 == 16'haaaa);\n        wait(frame == 2);\n        tb_assert(right_32 == 16'h5555);\n    end",
        "    assign frame = frame_posn[4:0];",
        "    task send_32(input [15:0] l, input [15:0] r);\n\n        begin\n            wait((frame_posn == 1) && tx_en);\n            tx_shift_32 <= { l, r };\n            wait(frame_posn == 2);\n        end\n\n    endtask\n",
        "    always @(posedge ck) begin\n\n        if (rst) begin\n            tx_shift_32 <= 0;\n        end else begin\n            if (frame_en) begin\n                tx_shift_32 <= { tx_shift_32[30:0], 1'b0 };\n            end\n        end\n\n    end",
        "    assign sd_32 = tx_shift_32[31];",
        "    initial begin\n\n        $display(\"start i2s rx tests\");\n\n        wait(!rst);\n        @(posedge ck);\n\n        \n        wait(frame_posn == 5);\n        send(24'hf0f0f0, 24'hcafedb);\n\n        wait(frame_posn == 0);\n        tb_assert(left == 24'hf0f0f0);\n        tb_assert(right == 24'hcafedb);\n        tb_assert(left_16 == 24'hf0f0);\n        tb_assert(right_16 == 24'hcafe);\n\n        \n        wait(frame_posn == 5);\n        send(24'h123456, 24'hFFFFFF);\n\n        wait(frame_posn == 0);\n        tb_assert(left == 24'h123456);\n        tb_assert(right == 24'hFFFFFF);\n        tb_assert(left_16 == 24'h1234);\n        tb_assert(right_16 == 24'hFFFF);\n\n        \n        wait(frame_posn == 5);\n        send(24'h000000, 24'haaaaaa);\n\n        wait(frame_posn == 0);\n        tb_assert(left == 24'h000000);\n        tb_assert(right == 24'haaaaaa);\n        tb_assert(left_16 == 24'h0000);\n        tb_assert(right_16 == 24'haaaa);\n\n        \n        wait(frame_posn == 5);\n        send(24'h555555, 24'h123456);\n\n        wait(frame_posn == 0);\n        tb_assert(left == 24'h555555);\n        tb_assert(right == 24'h123456);\n        tb_assert(left_16 == 24'h5555);\n        tb_assert(right_16 == 24'h1234);\n\n        $display(\"done\");\n        $finish;\n    end",
        "    task send(input [23:0] l, input [23:0] r);\n\n        begin\n            wait((frame_posn == 1) && tx_en);\n            tx_shift <= { l, 8'h0, r, 8'h0 };\n            wait(frame_posn == 2);\n        end\n\n    endtask",
        "    assign sd = tx_shift[63];",
        "    always @(posedge ck) begin\n\n        if(rst) begin\n            prescale <= 0;\n            tx_shift <= 0;\n        end else begin\n\n            prescale <= prescale + 1;\n            if (frame_en) begin\n                frame_posn <= frame_posn + 1;\n            end\n    \n            if (frame_en) begin\n                tx_shift <= { tx_shift[62:0], 1'b0 };\n            end\n\n        end\n\n    end",
        "    assign frame_en = prescale == 6;\n    assign tx_en = prescale == 8;\n    assign sample = prescale == 12;",
        "    always #42 ck <= !ck;",
        "    initial begin\n        $dumpfile(\"dsp.vcd\");\n        $dumpvars(0, tb);\n    end"
    ]
}