{
    "line_num": [
        [
            553,
            573
        ],
        [
            548,
            550
        ],
        [
            530,
            543
        ],
        [
            485,
            516
        ],
        [
            445,
            481
        ],
        [
            421,
            438
        ],
        [
            399,
            413
        ],
        [
            371,
            386
        ],
        [
            350,
            353
        ],
        [
            335,
            346
        ],
        [
            313,
            327
        ],
        [
            286,
            302
        ],
        [
            274,
            278
        ],
        [
            266,
            270
        ],
        [
            235,
            271
        ],
        [
            219,
            227
        ],
        [
            209,
            217
        ],
        [
            190,
            203
        ],
        [
            108,
            110
        ],
        [
            107,
            107
        ],
        [
            103,
            105
        ],
        [
            99,
            102
        ],
        [
            85,
            85
        ],
        [
            81,
            83
        ],
        [
            76,
            80
        ]
    ],
    "blocks": [
        "    parameter with_csr = 1;\n\n    serv_rf_top #(.RESET_PC(RESET_PC), .WITH_CSR(with_csr))\n    cpu (\n        .clk(wb_clk),\n        .i_rst(wb_rst),\n        .i_timer_irq(soc_irq),\n        \n        .o_ibus_adr(wb_ibus_adr),\n        .o_ibus_cyc(wb_ibus_cyc),\n        .i_ibus_rdt(wb_ibus_rdt),\n        .i_ibus_ack(wb_ibus_ack),\n        \n        .o_dbus_adr(wb_dbus_adr),\n        .o_dbus_dat(wb_dbus_dat),\n        .o_dbus_sel(wb_dbus_sel),\n        .o_dbus_we(wb_dbus_we),\n        .o_dbus_cyc(wb_dbus_cyc),\n        .i_dbus_rdt(wb_dbus_rdt),\n        .i_dbus_ack(wb_dbus_ack)\n    );",
        "    assign wb_dbus_rdt = irq_rdt | timer_rdt | ram_rdt | uart_rdt | gpio_rdt | flash_rdt | engine_rdt;\n    assign wb_dbus_ack = irq_ack | timer_ack | ram_ack | uart_ack | gpio_ack | flash_ack | engine_ack | led_ack;\n",
        "    irq_reg #(.ADDR(IRQ_ADDR), .ADDR_W(8), .REG_WIDTH(3))\n    irq_reg \n    (\n        .wb_clk(wb_clk),\n        .wb_rst(wb_rst),\n        .wb_dbus_adr(wb_dbus_adr),\n        .wb_dbus_dat(wb_dbus_dat),\n        .wb_dbus_we(wb_dbus_we),\n        .wb_dbus_cyc(wb_dbus_cyc),\n        .ack(irq_ack),\n        .rdt(irq_rdt),\n        .irq_in(irqs),\n        .irq(soc_irq)\n    );",
        "        .sd_in0(sd_in0),\n        .sd_in1(sd_in1),\n        .sd_in2(sd_in2),\n        .sd_in3(sd_in3),\n\n        .ext_sck(ext_sck),\n        .ext_ws(ext_ws),\n\n        .ready(audio_ready),\n        .test(test)\n    );\n\n`else\n\n    wire dma_match;\n    wire dma_done;\n    wire engine_ack;\n    wire [31:0] engine_rdt;\n\n    assign engine_ack = 0;\n    assign engine_rdt = 0;\n    assign dma_done = 0;\n    assign dma_match = 0;\n\n    \n    assign test = 0;\n    assign sck = 0;\n    assign ws = 0;\n    assign o_sck = 0;\n    assign o_ws = 0;\n    assign o_sd = 0;\n    assign ext_sd = 0;",
        "`ifdef USE_AUDIO_ENGINE\n\n    wire engine_ack;\n    wire [31:0] engine_rdt;\n\n    \n    wire audio_ready;\n    \n    wire dma_done;\n    wire dma_match;\n\n    assign o_sck = sck;\n    assign o_ws = ws;\n    assign ext_sd = o_sd0;\n\n    audio_engine #(.CK_HZ(CK_HZ)) audio_engine(\n        .ck(ck),\n        .wb_rst(wb_rst),\n        .wb_dbus_cyc(wb_dbus_cyc),\n        .wb_dbus_sel(wb_dbus_sel),\n        .wb_dbus_we(wb_dbus_we),\n        .wb_dbus_adr(wb_dbus_adr),\n        .wb_dbus_dat(wb_dbus_dat),\n        .ack(engine_ack),\n        .rdt(engine_rdt),\n\n        .dma_cyc(dma_cyc),\n        .dma_we(dma_we),\n        .dma_sel(dma_sel),\n        .dma_adr(dma_adr),\n        .dma_dat(dma_dat),\n        .dma_ack(dma_ack),\n        .dma_rdt(dma_rdt),\n        .dma_done(dma_done),\n        .dma_match(dma_match),\n\n        .sck(sck),",
        "    bus_arb ibus_arb(\n        .wb_clk(ck),\n        \n        .a_cyc(wb_ibus_cyc),\n        .a_adr(wb_ibus_adr),\n        .a_ack(wb_ibus_ack),\n        .a_rdt(wb_ibus_rdt),\n        \n        .b_cyc(f_cyc),\n        .b_adr(f_adr),\n        .b_ack(f_ack),\n        .b_rdt(f_rdt),\n        \n        .x_cyc(s_cyc),\n        .x_adr(s_adr),\n        .x_ack(s_ack),\n        .x_rdt(s_rdt),\n        .busy(arb_busy)",
        "    ibus ibus (\n        .wb_clk(ck),\n        .wb_rst(rst),\n        \n        .wb_ibus_adr(s_adr),\n        .wb_ibus_rdt(s_rdt),\n        .wb_ibus_cyc(s_cyc),\n        .wb_ibus_ack(s_ack),\n        \n        .spi_cs(spi_cs),\n        .spi_sck(spi_sck),\n        .spi_miso(spi_miso),\n        .spi_mosi(spi_mosi),\n        .ready(ibus_ready)\n    );",
        "    ibus_read #(.ADDR(FLASH_ADDR))\n    flash_read (\n        .wb_clk(wb_clk),\n        .wb_rst(wb_rst),\n        .wb_dbus_cyc(wb_dbus_cyc),\n        .wb_dbus_we(wb_dbus_we),\n        .wb_dbus_adr(wb_dbus_adr),\n        .wb_dbus_dat(wb_dbus_dat),\n        .wb_dbus_ack(flash_ack),\n        .wb_dbus_rdt(flash_rdt),\n        .wb_ibus_cyc(f_cyc),\n        .wb_ibus_adr(f_adr),\n        .wb_ibus_ack(f_ack),\n        .wb_ibus_rdt(f_rdt),\n        .dev_busy(flash_busy)\n    );",
        "    wire led_ack;\n    assign led_ack = 0;\n    assign led_ck = 0;\n    assign led_data = 0;",
        "    sk9822_peripheral #(.ADDR(LED_ADDR))\n    sk9822_peripheral(\n        .wb_clk(wb_clk),\n        .wb_rst(wb_rst),\n        .wb_dbus_cyc(wb_dbus_cyc),\n        .wb_dbus_we(wb_dbus_we),\n        .wb_dbus_adr(wb_dbus_adr),\n        .wb_dbus_dat(wb_dbus_dat),\n        .ack(led_ack),\n        .led_ck(led_ck),\n        .led_data(led_data)\n    );",
        "    gpio #(.ADDR(GPIO_ADDR), .AWIDTH(8))\n    gpio_io (\n        \n        .wb_clk(wb_clk),\n        .wb_rst(wb_rst),\n        .wb_dbus_adr(wb_dbus_adr),\n        .wb_dbus_dat(wb_dbus_dat),\n        .wb_dbus_sel(wb_dbus_sel),\n        .wb_dbus_we(wb_dbus_we),\n        .wb_dbus_cyc(wb_dbus_cyc),\n        .rdt(gpio_rdt),\n        .ack(gpio_ack),\n        \n        .gpio(gpio_reg)\n    );",
        "    uart #(.ADDR(UART_ADDR), .AWIDTH(8))\n    uart_io (\n        \n        .wb_clk(wb_clk),\n        .wb_rst(wb_rst),\n        .wb_dbus_adr(wb_dbus_adr),\n        .wb_dbus_dat(wb_dbus_dat),\n        .wb_dbus_sel(wb_dbus_sel),\n        .wb_dbus_we(wb_dbus_we),\n        .wb_dbus_cyc(wb_dbus_cyc),\n        .rdt(uart_rdt),\n        .ack(uart_ack),\n        \n        .baud_en(baud_en),\n        .tx(tx),\n        .busy(tx_busy)\n    );",
        "\n    wire baud_en;\n\n    localparam BAUD = CK_HZ / 115200;\n    uart_baud #(.DIVIDE(BAUD)) uart_clock (.ck(wb_clk), .baud_ck(baud_en));",
        "            assign timer_ack = 0;\n            assign timer_irq = 0;\n            assign timer_rdt = 0;\n\n        end",
        "    generate\n\n        if (TIMER_ENABLED) begin\n\n            wire timer_cyc;\n\n            chip_select #(.ADDR(TIMER_ADDR), .WIDTH(8))\n            cs_timer (\n                .wb_ck(wb_clk),\n                .addr(wb_dbus_adr[31:24]),\n                .wb_cyc(wb_dbus_cyc),\n                .wb_rst(wb_rst),\n                .ack(timer_ack),\n                .cyc(timer_cyc)\n            );\n\n            timer timer (\n                .wb_clk(wb_clk),\n                .wb_rst(wb_rst),\n                .ck_en(1'b1), \n                .wb_dbus_dat(wb_dbus_dat),\n                .wb_dbus_adr(wb_dbus_adr),\n                .wb_dbus_we(wb_dbus_we),\n                .cyc(timer_cyc),\n                .irq(timer_irq),\n                .rdt(timer_rdt)\n            );\n\n        end else begin\n\n            \n            assign timer_ack = 0;\n            assign timer_irq = 0;\n            assign timer_rdt = 0;\n\n        end\n    endgenerate",
        "    sp_ram ram (\n        .ck(wb_clk),\n        .addr(x_adr),\n        .cyc(ram_cs),\n        .we(x_we),\n        .sel(x_sel),\n        .wdata(x_dat),\n        .rdata(x_rdt)\n    );",
        "    chip_select #(.ADDR(0), .WIDTH(8))\n    cs_ram (\n        .wb_ck(wb_clk),\n        .addr(x_adr[31:24]),\n        .wb_cyc(x_cyc),\n        .wb_rst(wb_rst),\n        .ack(x_ack),\n        .cyc(ram_cs)\n    );",
        "`else   \n\n    assign ram_ack = x_ack;\n    assign ram_rdt = x_rdt;\n    assign dma_ack = 0;\n    assign dma_rdt = 0;\n    assign x_cyc = wb_dbus_cyc;\n    assign x_we = wb_dbus_we;\n    assign x_sel = wb_dbus_sel;\n    assign x_adr = wb_dbus_adr;\n    assign x_dat = wb_dbus_dat;\n    \n\n`endif ",
        "        end else begin\n            assign reset_req = 0;\n        end",
        "            assign reset_req = reseter == 0;",
        "            always @(posedge ck) begin\n                reseter <= reseter + 1;\n            end",
        "    generate \n        if (RESET_LOOP) begin\n            reg [(RUN_SLOW ? 21 : 24):0] reseter = 0;\n",
        "        assign ck = scale[3];",
        "            always @(posedge pll_ck) begin\n                scale <= scale + 1;\n            end",
        "    generate\n        wire ck;\n        if (RUN_SLOW) begin\n            reg [3:0] scale = 0;\n"
    ]
}