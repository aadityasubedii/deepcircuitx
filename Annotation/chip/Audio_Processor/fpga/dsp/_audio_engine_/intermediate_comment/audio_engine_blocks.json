{
    "line_num": [
        [
            668,
            684
        ],
        [
            663,
            665
        ],
        [
            653,
            659
        ],
        [
            626,
            650
        ],
        [
            602,
            652
        ],
        [
            598,
            598
        ],
        [
            596,
            598
        ],
        [
            584,
            594
        ],
        [
            576,
            582
        ],
        [
            544,
            574
        ],
        [
            540,
            542
        ],
        [
            526,
            535
        ],
        [
            514,
            514
        ],
        [
            502,
            511
        ],
        [
            490,
            499
        ],
        [
            486,
            488
        ],
        [
            470,
            470
        ],
        [
            456,
            468
        ],
        [
            451,
            455
        ],
        [
            432,
            447
        ],
        [
            413,
            421
        ],
        [
            389,
            397
        ],
        [
            372,
            381
        ],
        [
            341,
            341
        ],
        [
            313,
            336
        ],
        [
            294,
            309
        ],
        [
            264,
            288
        ],
        [
            248,
            256
        ],
        [
            234,
            247
        ],
        [
            222,
            231
        ],
        [
            219,
            222
        ],
        [
            212,
            218
        ],
        [
            204,
            211
        ],
        [
            191,
            203
        ],
        [
            179,
            186
        ],
        [
            177,
            177
        ],
        [
            166,
            176
        ],
        [
            161,
            162
        ],
        [
            148,
            160
        ],
        [
            138,
            141
        ],
        [
            131,
            132
        ],
        [
            124,
            129
        ],
        [
            120,
            120
        ],
        [
            118,
            118
        ],
        [
            107,
            116
        ],
        [
            104,
            106
        ],
        [
            90,
            100
        ],
        [
            82,
            88
        ],
        [
            80,
            80
        ],
        [
            34,
            78
        ],
        [
            25,
            25
        ],
        [
            15,
            23
        ]
    ],
    "blocks": [
        "`endif \n    \n    \n\n    assign ack = result_ack | status_ack | dma_dbus_ack | coef_ack | input_ack;\n    assign rdt = result_rdt | status_rdt | dma_dbus_rdt;\n    assign ready = done;\n\n    \n\n    assign test[0] = sck;\n    assign test[1] = ws;\n    assign test[2] = sd_in0;\n    assign test[3] = sd_in1;\n    assign test[4] = ext_sck; \n    assign test[5] = ext_ws; \n    assign test[6] = i2s_external;",
        "    assign dma_dbus_rdt = 0;\n    assign dma_dbus_ack = 0;\n    assign dma_done = 0;",
        "    initial begin\n        dma_cyc = 0;\n        dma_we = 0;\n        dma_sel = 0;\n        dma_dat = 0;\n        dma_adr = 0;\n    end",
        "    dma #(.ADDR(ADDR_DMA), .WIDTH(8), .XFER_ADDR_W(XFER_ADDR_W))\n    dma (\n        .wb_clk(ck),\n        .wb_rst(wb_rst),\n        .wb_dbus_cyc(wb_dbus_cyc),\n        .wb_dbus_we(wb_dbus_we),\n        .wb_dbus_adr(wb_dbus_adr),\n        .wb_dbus_dat(wb_dbus_dat),\n        .dbus_rdt(dma_dbus_rdt),\n        .dbus_ack(dma_dbus_ack),\n        .xfer_block(xfer_block),\n        .block_done(block_done),\n        .xfer_done(xfer_done),\n        .xfer_match(xfer_match),\n        .xfer_adr(xfer_adr),\n        .xfer_re(xfer_re),\n        .xfer_dat(xfer_dat),\n        .dma_cyc(dma_cyc),\n        .dma_we(dma_we),\n        .dma_sel(dma_sel),\n        .dma_adr(dma_adr),\n        .dma_dat(dma_dat),\n        .dma_ack(dma_ack),\n        .dma_rdt(dma_rdt)\n    );",
        "`ifdef USE_DMA\n\n    localparam XFER_ADDR_W = 3;\n    localparam XFER_DATA_W = 16;\n\n    wire [31:0] dma_dbus_rdt;\n    wire dma_dbus_ack;\n    wire xfer_done;\n    wire [XFER_ADDR_W-1:0] xfer_adr;\n    \n    wire block_done;\n    wire xfer_re;\n    \n    wire xfer_match;\n\n    assign dma_done = xfer_done;\n    assign dma_match = xfer_match;\n\n    wire [15:0] xfer_dat;\n    assign xfer_dat = mic_source(xfer_adr);\n\n    wire xfer_block;\n    assign xfer_block = start_of_frame; \n\n    dma #(.ADDR(ADDR_DMA), .WIDTH(8), .XFER_ADDR_W(XFER_ADDR_W))\n    dma (\n        .wb_clk(ck),\n        .wb_rst(wb_rst),\n        .wb_dbus_cyc(wb_dbus_cyc),\n        .wb_dbus_we(wb_dbus_we),\n        .wb_dbus_adr(wb_dbus_adr),\n        .wb_dbus_dat(wb_dbus_dat),\n        .dbus_rdt(dma_dbus_rdt),\n        .dbus_ack(dma_dbus_ack),\n        .xfer_block(xfer_block),\n        .block_done(block_done),\n        .xfer_done(xfer_done),\n        .xfer_match(xfer_match),\n        .xfer_adr(xfer_adr),\n        .xfer_re(xfer_re),\n        .xfer_dat(xfer_dat),\n        .dma_cyc(dma_cyc),\n        .dma_we(dma_we),\n        .dma_sel(dma_sel),\n        .dma_adr(dma_adr),\n        .dma_dat(dma_dat),\n        .dma_ack(dma_ack),\n        .dma_rdt(dma_rdt)\n    );\n`else   \n",
        "    assign status_rdt = status_re ? sreg_rdt(status_addr) : 0;",
        "    wire [31:0] status_rdt;\n\n    assign status_rdt = status_re ? sreg_rdt(status_addr) : 0;",
        "    function [31:0] sreg_rdt(input [2:0] s_addr);\n\n        case (s_addr)\n            0   :   sreg_rdt = control_reg;\n            1   :   sreg_rdt = { 29'h0, bank_done, error, done };\n            2   :   sreg_rdt = capture;\n            3   :   sreg_rdt = 32'h0;\n            4   :   sreg_rdt = { 24'h0, i2s_out_offset, i2s_in_offset };\n        endcase\n\n    endfunction",
        "    wire [31:0] control_reg;\n    assign control_reg =  { \n        { (32-(FRAME_W+2)){ 1'b0 } }, \n        control_reg_frame, \n        i2s_external, \n        allow_audio_writes \n    };",
        "    always @(posedge ck) begin\n\n        if (status_we & (status_addr == 0)) begin\n            allow_audio_writes <= wb_dbus_dat[0];\n            control_reg_frame <= wb_dbus_dat[FRAME_W+2-1:2];\n        end\n\n        if (status_we & (status_addr == 3)) begin\n            \n            bank_done <= 0;\n            if (allow_audio_writes) begin\n                reset_req <= 1;\n            end\n        end\n\n        if (status_we & (status_addr == 4)) begin\n            i2s_in_offset  <= wb_dbus_dat[3:0];\n            i2s_out_offset <= wb_dbus_dat[7:4];\n        end\n\n        if (reset & !bank_done) begin\n            \n            bank_done <= 1;\n            bank_addr <= !bank_addr; \n        end\n\n        if (reset_req) begin\n            reset_req <= 0;\n        end\n\n    end",
        "    assign status_addr = wb_dbus_adr[4:2];\n    assign status_we = status_cyc & wb_dbus_we;\n    assign status_re = status_cyc & !wb_dbus_we;",
        "    chip_select #(.ADDR(ADDR_STATUS)) \n    cs_status(\n        .wb_ck(ck),\n        .addr(cs_adr),\n        .wb_cyc(wb_dbus_cyc),\n        .wb_rst(wb_rst),\n        .ack(status_ack),\n        .cyc(status_cyc)\n    );\n",
        "    assign result_rdt = (result_cyc & !wb_dbus_we) ? { 16'h0, result_out } : 0;",
        "    dpram #(.BITS(16), .SIZE(CHANNELS*2)) \n    audio_out (.ck(ck),\n        .we(result_we), \n        .waddr(result_waddr), \n        .wdata(result_wdata),\n        .re(!wb_dbus_we), \n        .raddr(result_raddr), \n        .rdata(result_out)\n    );\n",
        "    chip_select #(.ADDR(ADDR_RESULT)) \n    cs_result(\n        .wb_ck(ck),\n        .addr(cs_adr),\n        .wb_cyc(wb_dbus_cyc),\n        .wb_rst(wb_rst),\n        .ack(result_ack),\n        .cyc(result_cyc)\n    );\n",
        "    assign result_we = seq_we;\n    assign result_waddr = { 1'b0, seq_wr_addr };\n    assign result_wdata = seq_audio;",
        "    assign done = seq_done;",
        "    always @(posedge ck) begin\n        if (seq_we) begin\n\n            case (seq_wr_addr[1:0])\n                LCHAN_0 :   left_0  <= seq_audio;\n                RCHAN_0 :   right_0 <= seq_audio;\n                LCHAN_1 :   left_1  <= seq_audio;\n                RCHAN_1 :   right_1 <= seq_audio;\n            endcase\n\n        end\n    end\n",
        "    localparam LCHAN_0 = 0;\n    localparam RCHAN_0 = 1;\n    localparam LCHAN_1 = 2;\n    localparam RCHAN_1 = 3;\n",
        "    sequencer #(.CHAN_W(CHAN_W), .FRAME_W(FRAME_W), .AUDIO_W(AUDIO_W), .CODE_W(CODE_W))\n    seq (\n        .ck(ck),\n        .rst(reset),\n        .frame(frame),\n        .coef_addr(code_raddr),\n        .coef_data(coef_rdata), \n        .audio_raddr(audio_raddr),\n        .audio_in(audio_rdata),\n        .out_addr(seq_wr_addr),\n        .out_audio(seq_audio),\n        .out_we(seq_we),\n        .done(seq_done),\n        .error(error), \n        .capture_out(capture)\n    );",
        "    dpram #(.BITS(16), .SIZE(AUDIO)) \n    audio_in (.ck(ck),\n        .we(audio_we), \n        .waddr(audio_waddr), \n        .wdata(audio_wdata),\n        .re(1'h1), \n        .raddr(audio_raddr), \n        .rdata(audio_rdata)\n    );",
        "    chip_select #(.ADDR(ADDR_INPUT)) \n    cs_input(\n        .wb_ck(ck),\n        .addr(cs_adr),\n        .wb_cyc(wb_dbus_cyc),\n        .wb_rst(wb_rst),\n        .ack(input_ack),\n        .cyc(input_cyc)\n    );",
        "    dpram #(.BITS(32), .SIZE(CODE*2))\n    coef (\n        .ck(ck),\n        .we(coef_we),\n        .waddr(coef_waddr),\n        .wdata(wb_dbus_dat),\n        .re(1'h1),\n        .raddr(coef_raddr),\n        .rdata(coef_rdata)\n    );",
        "    assign cs_adr = wb_dbus_adr[31:24];",
        "    always @(posedge ck) begin\n        \n        if (!allow_audio_writes) begin\n\n            if (start_of_frame) begin\n                chan_addr <= 0;\n                writing <= 1;\n                frame_counter <= frame_counter - 1;\n            end else begin\n                chan_addr <= chan_addr + 1;\n            end\n\n            \n            if (writing && (chan_addr == (CHANNELS-1))) begin\n                writing <= 0;\n                frame_reset_req <= 1;\n            end\n            \n\n            if (frame_reset_req)\n                frame_reset_req <= 0;\n\n        end\n    end",
        "    function [15:0] mic_source(input [(CHAN_W-1):0] chan);\n \n        begin\n            mic_source = get_source(chan,\n                mic_0[MIC_HI:MIC_LO],\n                mic_1[MIC_HI:MIC_LO],\n                mic_2[MIC_HI:MIC_LO],\n                mic_3[MIC_HI:MIC_LO],\n                mic_4[MIC_HI:MIC_LO],\n                mic_5[MIC_HI:MIC_LO],\n                mic_6[MIC_HI:MIC_LO],\n                mic_7[MIC_HI:MIC_LO]\n            );\n        end\n\n    endfunction",
        "    function [15:0] get_source(input [2:0] chan,\n        input [15:0] s0,\n        input [15:0] s1,\n        input [15:0] s2,\n        input [15:0] s3,\n        input [15:0] s4,\n        input [15:0] s5,\n        input [15:0] s6,\n        input [15:0] s7\n    );\n \n        begin\n            case (chan)\n                0   :   get_source = s0;\n                1   :   get_source = s1;\n                2   :   get_source = s2;\n                3   :   get_source = s3;\n                4   :   get_source = s4;\n                5   :   get_source = s5;\n                6   :   get_source = s6;\n                7   :   get_source = s7;\n            endcase\n        end\n\n    endfunction",
        "    i2s_tx #(.CLOCKS(I2S_BITS)) tx_1(\n        .ck(ck),\n        .en(i2s_out_sample),\n        .frame_posn(frame_posn),\n        .left(left_1),\n        .right(right_1),\n        .sd(sd_out1)\n    );\n",
        "    reg [15:0] left_0 = 0;\n    reg [15:0] right_0 = 0;\n    reg [15:0] left_1 = 0;\n    reg [15:0] right_1 = 0;\n\n    i2s_tx #(.CLOCKS(I2S_BITS)) tx_0(\n        .ck(ck),\n        .en(i2s_out_sample),\n        .frame_posn(frame_posn),\n        .left(left_0),\n        .right(right_0),\n        .sd(sd_out0)\n    );\n",
        "    i2s_rx #(.BITS(MIC_W), .CLOCKS(I2S_BITS))\n    rx_1(.ck(ck), .sample(i2s_in_sample), \n            .frame_posn(frame_posn), .sd(sd_in1), .left(mic_2), .right(mic_3));\n    i2s_rx #(.BITS(MIC_W), .CLOCKS(I2S_BITS))\n    rx_2(.ck(ck), .sample(i2s_in_sample), \n            .frame_posn(frame_posn), .sd(sd_in2), .left(mic_4), .right(mic_5));\n    i2s_rx #(.BITS(MIC_W), .CLOCKS(I2S_BITS))\n    rx_3(.ck(ck), .sample(i2s_in_sample), \n            .frame_posn(frame_posn), .sd(sd_in3), .left(mic_6), .right(mic_7));\n",
        "    i2s_rx #(.BITS(MIC_W), .CLOCKS(I2S_BITS)) \n    rx_0(.ck(ck), .sample(i2s_in_sample), \n            .frame_posn(frame_posn), .sd(sd_in0), .left(mic_0), .right(mic_1));\n    i2s_rx #(.BITS(MIC_W), .CLOCKS(I2S_BITS))",
        "    `ifdef MAKE_HIFI\n        localparam I2S_BITS = 32;\n    `endif\n    `ifdef MAKE_DSP\n        localparam I2S_BITS = 64;\n    `endif\n",
        "    i2s_offset #(.WIDTH(4))\n    i2s_offset_out(\n        .ck(ck),\n        .i2s_en(i2s_en),\n        .offset(i2s_out_offset),\n        .en(i2s_out_sample)\n    );\n",
        "    wire i2s_in_sample;\n    wire i2s_out_sample;\n    reg [3:0] i2s_in_offset = 0;\n    reg [3:0] i2s_out_offset = 0;\n\n    i2s_offset #(.WIDTH(4))\n    i2s_offset_in(\n        .ck(ck),\n        .i2s_en(i2s_en),\n        .offset(i2s_in_offset),\n        .en(i2s_in_sample)\n    );\n",
        "    \n    wire [MIC_W-1:0] mic_0;\n    wire [MIC_W-1:0] mic_1;\n    wire [MIC_W-1:0] mic_2;\n    wire [MIC_W-1:0] mic_3;\n    wire [MIC_W-1:0] mic_4;\n    wire [MIC_W-1:0] mic_5;\n    wire [MIC_W-1:0] mic_6;",
        "    localparam MIC_W = 24;",
        "    reg writing = 0;\n    reg frame_reset_req = 0;\n    reg [(CHAN_W-1):0] chan_addr = 0;\n    wire [(AUDIO_W-1):0] write_addr;\n    wire write_en;\n    wire [15:0] write_data;\n\n    assign write_addr = { chan_addr, frame_counter };\n    assign write_data = writing ? mic_source(chan_addr) : 0;\n    assign write_en = writing;\n",
        "    wire start_of_frame;\n    assign start_of_frame = ws & (frame_posn == 0);",
        "    i2s_dual #(.DIVIDER(I2S_DIVIDER))\n    i2s_dual(\n        .ck(i2s_clock),\n        .rst(wb_rst),\n        .ext_sck(ext_sck),\n        .ext_ws(ext_ws),\n        .en(i2s_en),\n        .sck(sck),\n        .ws(ws),\n        .frame_posn(frame_posn),\n        .external(i2s_external)\n    );\n",
        "`ifdef MAKE_HIFI\n    localparam [5:0] I2S_DIVIDER = 20; \n`endif\n    ",
        "\n    wire i2s_clock;",
        "\n    reg [FRAME_W-1:0] control_reg_frame = 0;\n    reg allow_audio_writes = 0;\n\n    assign frame = allow_audio_writes ? control_reg_frame : frame_counter;\n",
        "    reg [(FRAME_W-1):0] frame_counter = 0;",
        "    assign reset = !((!wb_rst) && (resetx == 2'b10));",
        "    always @(posedge ck) begin\n        if (reset_req || frame_reset_req) begin\n            resetx <= 0;\n        end else begin\n            if (resetx != 2'b10) begin\n                resetx <= resetx + 1;\n            end\n        end\n    end\n",
        "    reg [1:0] resetx = 0;\n    reg reset_req = 0;\n",
        "    localparam CHANNELS = 8;\n    localparam FRAMES = 256;\n\n    localparam CODE = 256; \n    localparam CODE_W = $clog2(CODE);\n    localparam COEF_W = CODE_W + 1; \n\n    localparam CHAN_W = $clog2(CHANNELS);\n    localparam FRAME_W = $clog2(FRAMES);\n    localparam AUDIO = CHANNELS * FRAMES;\n    localparam AUDIO_W = $clog2(AUDIO);",
        "    parameter                ADDR = 8'h60;\n\n    localparam ADDR_COEF   = ADDR;\n    localparam ADDR_RESULT = ADDR + 8'h01;\n    localparam ADDR_STATUS = ADDR + 8'h02;\n    localparam ADDR_INPUT  = ADDR + 8'h04;\n    localparam ADDR_DMA    = ADDR + 8'h05;",
        "    parameter CK_HZ = 32000000;",
        "module audio_engine (\n    input wire ck,\n\n    \n    input wire wb_rst,\n    input wire wb_dbus_cyc,\n    output wire ack,\n    input wire wb_dbus_we,\n    \n    input wire [3:0] wb_dbus_sel,\n    input wire [31:0] wb_dbus_adr,\n    \n    input wire [31:0] wb_dbus_dat,\n    output wire [31:0] rdt,\n\n    \n    output reg dma_cyc,\n    output reg dma_we,\n    output reg [3:0] dma_sel,\n    output reg [31:0] dma_adr,\n    output reg [31:0] dma_dat,\n    \n    input wire dma_ack,\n    input wire [31:0] dma_rdt,\n    \n    \n    output wire dma_done,\n    output wire dma_match,\n\n    \n    output wire sck,    \n    output wire ws,     \n    output wire sd_out0, \n    output wire sd_out1, \n    input wire sd_in0,  \n    input wire sd_in1,  \n    input wire sd_in2,  \n    input wire sd_in3,  \n\n    input wire ext_sck, \n    input wire ext_ws,  \n\n    output wire ready,\n    output wire [7:0] test\n);",
        "    assign en = offset == counter;",
        "    always @(posedge ck) begin\n\n        if (i2s_en) begin\n            counter <= 0;\n        end else begin\n            counter <= counter + 1;\n        end\n\n    end"
    ]
}