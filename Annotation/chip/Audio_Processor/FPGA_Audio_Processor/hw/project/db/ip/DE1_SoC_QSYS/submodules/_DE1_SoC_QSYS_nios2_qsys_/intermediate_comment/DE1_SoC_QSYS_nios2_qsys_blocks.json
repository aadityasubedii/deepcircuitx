{
    "line_num": [
        [
            5738,
            5738
        ],
        [
            5737,
            5737
        ],
        [
            5736,
            5736
        ],
        [
            5735,
            5735
        ],
        [
            5734,
            5734
        ],
        [
            5646,
            5732
        ],
        [
            5558,
            5644
        ],
        [
            5544,
            5550
        ],
        [
            5543,
            5543
        ],
        [
            5524,
            5541
        ],
        [
            5515,
            5521
        ],
        [
            5514,
            5514
        ],
        [
            5495,
            5512
        ],
        [
            5486,
            5492
        ],
        [
            5485,
            5485
        ],
        [
            5484,
            5484
        ],
        [
            5475,
            5481
        ],
        [
            5474,
            5474
        ],
        [
            5473,
            5473
        ],
        [
            5464,
            5470
        ],
        [
            5463,
            5463
        ],
        [
            5407,
            5461
        ],
        [
            5398,
            5404
        ],
        [
            5397,
            5397
        ],
        [
            5372,
            5395
        ],
        [
            5363,
            5369
        ],
        [
            5362,
            5362
        ],
        [
            5322,
            5360
        ],
        [
            5313,
            5319
        ],
        [
            5312,
            5312
        ],
        [
            5311,
            5311
        ],
        [
            5302,
            5308
        ],
        [
            5301,
            5301
        ],
        [
            5292,
            5299
        ],
        [
            5283,
            5289
        ],
        [
            5282,
            5282
        ],
        [
            5281,
            5281
        ],
        [
            5272,
            5278
        ],
        [
            5271,
            5271
        ],
        [
            5258,
            5269
        ],
        [
            5249,
            5255
        ],
        [
            5248,
            5248
        ],
        [
            5239,
            5246
        ],
        [
            5230,
            5236
        ],
        [
            5229,
            5229
        ],
        [
            5206,
            5227
        ],
        [
            5197,
            5203
        ],
        [
            5196,
            5196
        ],
        [
            5195,
            5195
        ],
        [
            5186,
            5192
        ],
        [
            5185,
            5185
        ],
        [
            5168,
            5183
        ],
        [
            5159,
            5165
        ],
        [
            5158,
            5158
        ],
        [
            5149,
            5156
        ],
        [
            5140,
            5146
        ],
        [
            5139,
            5139
        ],
        [
            5138,
            5138
        ],
        [
            5129,
            5135
        ],
        [
            5128,
            5128
        ],
        [
            5114,
            5126
        ],
        [
            5105,
            5111
        ],
        [
            5104,
            5104
        ],
        [
            5103,
            5103
        ],
        [
            5094,
            5100
        ],
        [
            5093,
            5093
        ],
        [
            5082,
            5091
        ],
        [
            5073,
            5079
        ],
        [
            5072,
            5072
        ],
        [
            5055,
            5070
        ],
        [
            5046,
            5052
        ],
        [
            5045,
            5045
        ],
        [
            5036,
            5043
        ],
        [
            5027,
            5033
        ],
        [
            5026,
            5026
        ],
        [
            5025,
            5025
        ],
        [
            5016,
            5022
        ],
        [
            5015,
            5015
        ],
        [
            5014,
            5014
        ],
        [
            5005,
            5011
        ],
        [
            5004,
            5004
        ],
        [
            5003,
            5003
        ],
        [
            4994,
            5000
        ],
        [
            4993,
            4993
        ],
        [
            4975,
            4991
        ],
        [
            4966,
            4972
        ],
        [
            4965,
            4965
        ],
        [
            4954,
            4963
        ],
        [
            4945,
            4951
        ],
        [
            4944,
            4944
        ],
        [
            4943,
            4943
        ],
        [
            4934,
            4940
        ],
        [
            4933,
            4933
        ],
        [
            4932,
            4932
        ],
        [
            4923,
            4929
        ],
        [
            4922,
            4922
        ],
        [
            4910,
            4920
        ],
        [
            4901,
            4907
        ],
        [
            4900,
            4900
        ],
        [
            4899,
            4899
        ],
        [
            4890,
            4896
        ],
        [
            4889,
            4889
        ],
        [
            4888,
            4888
        ],
        [
            4879,
            4885
        ],
        [
            4878,
            4878
        ],
        [
            4877,
            4877
        ],
        [
            4868,
            4874
        ],
        [
            4867,
            4867
        ],
        [
            4858,
            4865
        ],
        [
            4849,
            4855
        ],
        [
            4848,
            4848
        ],
        [
            4847,
            4847
        ],
        [
            4838,
            4844
        ],
        [
            4837,
            4837
        ],
        [
            4836,
            4836
        ],
        [
            4835,
            4835
        ],
        [
            4834,
            4834
        ],
        [
            4791,
            4797
        ],
        [
            4782,
            4788
        ],
        [
            4781,
            4781
        ],
        [
            4778,
            4779
        ],
        [
            4777,
            4777
        ],
        [
            4773,
            4775
        ],
        [
            4772,
            4772
        ],
        [
            4767,
            4770
        ],
        [
            4766,
            4766
        ],
        [
            4760,
            4764
        ],
        [
            4757,
            4758
        ],
        [
            4754,
            4755
        ],
        [
            4751,
            4752
        ],
        [
            4748,
            4749
        ],
        [
            4747,
            4747
        ],
        [
            4746,
            4746
        ],
        [
            4745,
            4745
        ],
        [
            4744,
            4744
        ],
        [
            4740,
            4742
        ],
        [
            4739,
            4739
        ],
        [
            4730,
            4736
        ],
        [
            4721,
            4727
        ],
        [
            4712,
            4718
        ],
        [
            4703,
            4709
        ],
        [
            4694,
            4700
        ],
        [
            4685,
            4691
        ],
        [
            4676,
            4682
        ],
        [
            4667,
            4673
        ],
        [
            4658,
            4664
        ],
        [
            4649,
            4655
        ],
        [
            4640,
            4646
        ],
        [
            4631,
            4637
        ],
        [
            4622,
            4628
        ],
        [
            4613,
            4619
        ],
        [
            4604,
            4610
        ],
        [
            4595,
            4601
        ],
        [
            4594,
            4594
        ],
        [
            4593,
            4593
        ],
        [
            4590,
            4591
        ],
        [
            4589,
            4589
        ],
        [
            4585,
            4587
        ],
        [
            4581,
            4583
        ],
        [
            4577,
            4579
        ],
        [
            4573,
            4575
        ],
        [
            4572,
            4572
        ],
        [
            4569,
            4570
        ],
        [
            4568,
            4568
        ],
        [
            4564,
            4566
        ],
        [
            4560,
            4562
        ],
        [
            4559,
            4559
        ],
        [
            4558,
            4558
        ],
        [
            4549,
            4555
        ],
        [
            4540,
            4546
        ],
        [
            4531,
            4537
        ],
        [
            4530,
            4530
        ],
        [
            4529,
            4529
        ],
        [
            4528,
            4528
        ],
        [
            4527,
            4527
        ],
        [
            4526,
            4526
        ],
        [
            4525,
            4525
        ],
        [
            4515,
            4523
        ],
        [
            4511,
            4513
        ],
        [
            4510,
            4510
        ],
        [
            4509,
            4509
        ],
        [
            4503,
            4507
        ],
        [
            4496,
            4501
        ],
        [
            4487,
            4493
        ],
        [
            4478,
            4484
        ],
        [
            4474,
            4476
        ],
        [
            4470,
            4472
        ],
        [
            4469,
            4469
        ],
        [
            4468,
            4468
        ],
        [
            4467,
            4467
        ],
        [
            4462,
            4465
        ],
        [
            4461,
            4461
        ],
        [
            4460,
            4460
        ],
        [
            4459,
            4459
        ],
        [
            4454,
            4457
        ],
        [
            4453,
            4453
        ],
        [
            4449,
            4451
        ],
        [
            4446,
            4447
        ],
        [
            4443,
            4444
        ],
        [
            4442,
            4442
        ],
        [
            4433,
            4439
        ],
        [
            4424,
            4430
        ],
        [
            4415,
            4421
        ],
        [
            4406,
            4412
        ],
        [
            4397,
            4403
        ],
        [
            4388,
            4394
        ],
        [
            4387,
            4387
        ],
        [
            4382,
            4385
        ],
        [
            4378,
            4380
        ],
        [
            4374,
            4376
        ],
        [
            4331,
            4331
        ],
        [
            4330,
            4330
        ],
        [
            4321,
            4327
        ],
        [
            4312,
            4318
        ],
        [
            4303,
            4309
        ],
        [
            4294,
            4300
        ],
        [
            4285,
            4291
        ],
        [
            4276,
            4282
        ],
        [
            4275,
            4275
        ],
        [
            4272,
            4273
        ],
        [
            4271,
            4271
        ],
        [
            4268,
            4269
        ],
        [
            4267,
            4267
        ],
        [
            4262,
            4265
        ],
        [
            4253,
            4259
        ],
        [
            4244,
            4250
        ],
        [
            4239,
            4242
        ],
        [
            4238,
            4238
        ],
        [
            4237,
            4237
        ],
        [
            4228,
            4234
        ],
        [
            4219,
            4225
        ],
        [
            4216,
            4217
        ],
        [
            4215,
            4215
        ],
        [
            4214,
            4214
        ],
        [
            4205,
            4211
        ],
        [
            4204,
            4204
        ],
        [
            4203,
            4203
        ],
        [
            4202,
            4202
        ],
        [
            4201,
            4201
        ],
        [
            4200,
            4200
        ],
        [
            4191,
            4197
        ],
        [
            3175,
            3175
        ],
        [
            3174,
            3174
        ],
        [
            3169,
            3172
        ],
        [
            3119,
            3125
        ],
        [
            3110,
            3116
        ],
        [
            3101,
            3107
        ],
        [
            3092,
            3098
        ],
        [
            3083,
            3089
        ],
        [
            3074,
            3080
        ],
        [
            3065,
            3071
        ],
        [
            2649,
            2649
        ],
        [
            2648,
            2648
        ],
        [
            2647,
            2647
        ],
        [
            2646,
            2646
        ],
        [
            2645,
            2645
        ],
        [
            2644,
            2644
        ],
        [
            2643,
            2643
        ],
        [
            2629,
            2640
        ],
        [
            2600,
            2626
        ],
        [
            2599,
            2599
        ],
        [
            2532,
            2532
        ],
        [
            2531,
            2531
        ],
        [
            2514,
            2528
        ],
        [
            2505,
            2511
        ],
        [
            2447,
            2462
        ],
        [
            2446,
            2446
        ],
        [
            2445,
            2445
        ],
        [
            2444,
            2444
        ],
        [
            2443,
            2443
        ],
        [
            2442,
            2442
        ],
        [
            2434,
            2440
        ],
        [
            2425,
            2431
        ],
        [
            2424,
            2424
        ],
        [
            2416,
            2422
        ],
        [
            2407,
            2413
        ],
        [
            2406,
            2406
        ],
        [
            2398,
            2404
        ],
        [
            2389,
            2395
        ],
        [
            2388,
            2388
        ],
        [
            2380,
            2386
        ],
        [
            2371,
            2377
        ],
        [
            2370,
            2370
        ],
        [
            2362,
            2368
        ],
        [
            2353,
            2359
        ],
        [
            2352,
            2352
        ],
        [
            2344,
            2350
        ],
        [
            2335,
            2341
        ],
        [
            2334,
            2334
        ],
        [
            2326,
            2332
        ],
        [
            2317,
            2323
        ],
        [
            2316,
            2316
        ],
        [
            2308,
            2314
        ],
        [
            2299,
            2305
        ],
        [
            2298,
            2298
        ],
        [
            2290,
            2296
        ],
        [
            2281,
            2287
        ],
        [
            2280,
            2280
        ],
        [
            2272,
            2278
        ],
        [
            2263,
            2269
        ],
        [
            2262,
            2262
        ],
        [
            2254,
            2260
        ],
        [
            2245,
            2251
        ],
        [
            2244,
            2244
        ],
        [
            2236,
            2242
        ],
        [
            2227,
            2233
        ],
        [
            2226,
            2226
        ],
        [
            2218,
            2224
        ],
        [
            2209,
            2215
        ],
        [
            2208,
            2208
        ],
        [
            2200,
            2206
        ],
        [
            2191,
            2197
        ],
        [
            2190,
            2190
        ],
        [
            2182,
            2188
        ],
        [
            2173,
            2179
        ],
        [
            2172,
            2172
        ],
        [
            2164,
            2170
        ],
        [
            2155,
            2161
        ],
        [
            2154,
            2154
        ],
        [
            2153,
            2153
        ],
        [
            2152,
            2152
        ],
        [
            2129,
            2149
        ],
        [
            2103,
            2103
        ],
        [
            2094,
            2094
        ],
        [
            2093,
            2093
        ],
        [
            2092,
            2092
        ],
        [
            2091,
            2091
        ],
        [
            2090,
            2090
        ],
        [
            2089,
            2089
        ],
        [
            2088,
            2088
        ],
        [
            2087,
            2087
        ],
        [
            2086,
            2086
        ],
        [
            1947,
            1959
        ],
        [
            1902,
            1912
        ],
        [
            1832,
            1869
        ],
        [
            1831,
            1831
        ],
        [
            1770,
            1797
        ],
        [
            1768,
            1769
        ],
        [
            1760,
            1760
        ],
        [
            1759,
            1759
        ],
        [
            1758,
            1758
        ],
        [
            1665,
            1702
        ],
        [
            1649,
            1664
        ],
        [
            1636,
            1636
        ],
        [
            1635,
            1635
        ],
        [
            1596,
            1632
        ],
        [
            1437,
            1593
        ],
        [
            1426,
            1434
        ],
        [
            1425,
            1425
        ],
        [
            1424,
            1424
        ],
        [
            1423,
            1423
        ],
        [
            1422,
            1422
        ],
        [
            1421,
            1421
        ],
        [
            1420,
            1420
        ],
        [
            1419,
            1419
        ],
        [
            1418,
            1418
        ],
        [
            1417,
            1417
        ],
        [
            1416,
            1416
        ],
        [
            1415,
            1415
        ],
        [
            1414,
            1414
        ],
        [
            1413,
            1413
        ],
        [
            1412,
            1412
        ],
        [
            1411,
            1411
        ],
        [
            1410,
            1410
        ],
        [
            1409,
            1409
        ],
        [
            1408,
            1408
        ],
        [
            1407,
            1407
        ],
        [
            1406,
            1406
        ],
        [
            1405,
            1405
        ],
        [
            1288,
            1310
        ],
        [
            1287,
            1287
        ],
        [
            1286,
            1286
        ],
        [
            1285,
            1285
        ],
        [
            1284,
            1284
        ],
        [
            1283,
            1283
        ],
        [
            1282,
            1282
        ],
        [
            1281,
            1281
        ],
        [
            1280,
            1280
        ],
        [
            1279,
            1279
        ],
        [
            1278,
            1278
        ],
        [
            1277,
            1277
        ],
        [
            1276,
            1276
        ],
        [
            1275,
            1275
        ],
        [
            1274,
            1274
        ],
        [
            1273,
            1273
        ],
        [
            1272,
            1272
        ],
        [
            1271,
            1271
        ],
        [
            1270,
            1270
        ],
        [
            1269,
            1269
        ],
        [
            1268,
            1268
        ],
        [
            1267,
            1267
        ],
        [
            1266,
            1266
        ],
        [
            1265,
            1265
        ],
        [
            1264,
            1264
        ],
        [
            1263,
            1263
        ],
        [
            1262,
            1262
        ],
        [
            1261,
            1261
        ],
        [
            1260,
            1260
        ],
        [
            1259,
            1259
        ],
        [
            1258,
            1258
        ],
        [
            1257,
            1257
        ],
        [
            1256,
            1256
        ],
        [
            1245,
            1253
        ],
        [
            1244,
            1244
        ],
        [
            1243,
            1243
        ],
        [
            1242,
            1242
        ],
        [
            1241,
            1241
        ],
        [
            1240,
            1240
        ],
        [
            1239,
            1239
        ],
        [
            1238,
            1238
        ],
        [
            1123,
            1124
        ],
        [
            1120,
            1121
        ],
        [
            1117,
            1118
        ],
        [
            1114,
            1115
        ],
        [
            1113,
            1113
        ],
        [
            1112,
            1112
        ],
        [
            1111,
            1111
        ],
        [
            1110,
            1110
        ],
        [
            1109,
            1109
        ],
        [
            1100,
            1106
        ],
        [
            1091,
            1097
        ],
        [
            1082,
            1088
        ],
        [
            1073,
            1079
        ],
        [
            1064,
            1070
        ],
        [
            1055,
            1061
        ],
        [
            1054,
            1054
        ],
        [
            1053,
            1053
        ],
        [
            1052,
            1052
        ],
        [
            1051,
            1051
        ],
        [
            1050,
            1050
        ],
        [
            1049,
            1049
        ],
        [
            1048,
            1048
        ],
        [
            1047,
            1047
        ],
        [
            1046,
            1046
        ],
        [
            1045,
            1045
        ],
        [
            1044,
            1044
        ],
        [
            1043,
            1043
        ],
        [
            1042,
            1042
        ],
        [
            1041,
            1041
        ],
        [
            1040,
            1040
        ],
        [
            1039,
            1039
        ],
        [
            1038,
            1038
        ],
        [
            1037,
            1037
        ],
        [
            1036,
            1036
        ],
        [
            1035,
            1035
        ],
        [
            1034,
            1034
        ],
        [
            1033,
            1033
        ],
        [
            1032,
            1032
        ],
        [
            1031,
            1031
        ],
        [
            1030,
            1030
        ],
        [
            1029,
            1029
        ],
        [
            1028,
            1028
        ],
        [
            1027,
            1027
        ],
        [
            1026,
            1026
        ],
        [
            1025,
            1025
        ],
        [
            1024,
            1024
        ],
        [
            1023,
            1023
        ],
        [
            1022,
            1022
        ],
        [
            918,
            918
        ],
        [
            917,
            917
        ],
        [
            906,
            914
        ],
        [
            819,
            903
        ],
        [
            818,
            818
        ],
        [
            817,
            817
        ],
        [
            816,
            816
        ],
        [
            815,
            815
        ],
        [
            814,
            814
        ],
        [
            813,
            813
        ],
        [
            812,
            812
        ],
        [
            811,
            811
        ],
        [
            810,
            810
        ],
        [
            809,
            809
        ],
        [
            808,
            808
        ],
        [
            807,
            807
        ],
        [
            806,
            806
        ],
        [
            805,
            805
        ],
        [
            804,
            804
        ],
        [
            803,
            803
        ],
        [
            736,
            800
        ],
        [
            730,
            735
        ],
        [
            615,
            621
        ],
        [
            606,
            612
        ],
        [
            600,
            600
        ],
        [
            599,
            599
        ],
        [
            598,
            598
        ],
        [
            597,
            597
        ],
        [
            596,
            596
        ],
        [
            595,
            595
        ],
        [
            594,
            594
        ],
        [
            593,
            593
        ],
        [
            522,
            529
        ],
        [
            499,
            499
        ],
        [
            498,
            498
        ],
        [
            497,
            497
        ],
        [
            496,
            496
        ],
        [
            495,
            495
        ],
        [
            494,
            494
        ],
        [
            493,
            493
        ],
        [
            492,
            492
        ],
        [
            420,
            489
        ],
        [
            282,
            282
        ],
        [
            281,
            281
        ],
        [
            255,
            278
        ],
        [
            224,
            252
        ]
    ],
    "blocks": [
        "  assign W_vinst = W_valid ? D_inst : {7{8'h2d}};",
        "  assign E_vinst = E_valid ? D_inst : {7{8'h2d}};",
        "  assign R_vinst = R_valid ? D_inst : {7{8'h2d}};",
        "  assign D_vinst = D_valid ? D_inst : {7{8'h2d}};",
        "  assign F_vinst = F_valid ? F_inst : {7{8'h2d}};",
        "  assign D_inst = (D_op_call)? 56'h20202063616c6c :\n    (D_op_jmpi)? 56'h2020206a6d7069 :\n    (D_op_ldbu)? 56'h2020206c646275 :\n    (D_op_addi)? 56'h20202061646469 :\n    (D_op_stb)? 56'h20202020737462 :\n    (D_op_br)? 56'h20202020206272 :\n    (D_op_ldb)? 56'h202020206c6462 :\n    (D_op_cmpgei)? 56'h20636d70676569 :\n    (D_op_ldhu)? 56'h2020206c646875 :\n    (D_op_andi)? 56'h202020616e6469 :\n    (D_op_sth)? 56'h20202020737468 :\n    (D_op_bge)? 56'h20202020626765 :\n    (D_op_ldh)? 56'h202020206c6468 :\n    (D_op_cmplti)? 56'h20636d706c7469 :\n    (D_op_initda)? 56'h20696e69746461 :\n    (D_op_ori)? 56'h202020206f7269 :\n    (D_op_stw)? 56'h20202020737477 :\n    (D_op_blt)? 56'h20202020626c74 :\n    (D_op_ldw)? 56'h202020206c6477 :\n    (D_op_cmpnei)? 56'h20636d706e6569 :\n    (D_op_flushda)? 56'h666c7573686461 :\n    (D_op_xori)? 56'h202020786f7269 :\n    (D_op_bne)? 56'h20202020626e65 :\n    (D_op_cmpeqi)? 56'h20636d70657169 :\n    (D_op_ldbuio)? 56'h206c646275696f :\n    (D_op_muli)? 56'h2020206d756c69 :\n    (D_op_stbio)? 56'h2020737462696f :\n    (D_op_beq)? 56'h20202020626571 :\n    (D_op_ldbio)? 56'h20206c6462696f :\n    (D_op_cmpgeui)? 56'h636d7067657569 :\n    (D_op_ldhuio)? 56'h206c646875696f :\n    (D_op_andhi)? 56'h2020616e646869 :\n    (D_op_sthio)? 56'h2020737468696f :\n    (D_op_bgeu)? 56'h20202062676575 :\n    (D_op_ldhio)? 56'h20206c6468696f :\n    (D_op_cmpltui)? 56'h636d706c747569 :\n    (D_op_initd)? 56'h2020696e697464 :\n    (D_op_orhi)? 56'h2020206f726869 :\n    (D_op_stwio)? 56'h2020737477696f :\n    (D_op_bltu)? 56'h202020626c7475 :\n    (D_op_ldwio)? 56'h20206c6477696f :\n    (D_op_flushd)? 56'h20666c75736864 :\n    (D_op_xorhi)? 56'h2020786f726869 :\n    (D_op_eret)? 56'h20202065726574 :\n    (D_op_roli)? 56'h202020726f6c69 :\n    (D_op_rol)? 56'h20202020726f6c :\n    (D_op_flushp)? 56'h20666c75736870 :\n    (D_op_ret)? 56'h20202020726574 :\n    (D_op_nor)? 56'h202020206e6f72 :\n    (D_op_mulxuu)? 56'h206d756c787575 :\n    (D_op_cmpge)? 56'h2020636d706765 :\n    (D_op_bret)? 56'h20202062726574 :\n    (D_op_ror)? 56'h20202020726f72 :\n    (D_op_flushi)? 56'h20666c75736869 :\n    (D_op_jmp)? 56'h202020206a6d70 :\n    (D_op_and)? 56'h20202020616e64 :\n    (D_op_cmplt)? 56'h2020636d706c74 :\n    (D_op_slli)? 56'h202020736c6c69 :\n    (D_op_sll)? 56'h20202020736c6c :\n    (D_op_or)? 56'h20202020206f72 :\n    (D_op_mulxsu)? 56'h206d756c787375 :\n    (D_op_cmpne)? 56'h2020636d706e65 :\n    (D_op_srli)? 56'h20202073726c69 :\n    (D_op_srl)? 56'h2020202073726c :\n    (D_op_nextpc)? 56'h206e6578747063 :\n    (D_op_callr)? 56'h202063616c6c72 :\n    (D_op_xor)? 56'h20202020786f72 :\n    (D_op_mulxss)? 56'h206d756c787373 :\n    (D_op_cmpeq)? 56'h2020636d706571 :\n    (D_op_divu)? 56'h20202064697675 :\n    (D_op_div)? 56'h20202020646976 :\n    (D_op_rdctl)? 56'h2020726463746c :\n    (D_op_mul)? 56'h202020206d756c :\n    (D_op_cmpgeu)? 56'h20636d70676575 :\n    (D_op_initi)? 56'h2020696e697469 :\n    (D_op_trap)? 56'h20202074726170 :\n    (D_op_wrctl)? 56'h2020777263746c :\n    (D_op_cmpltu)? 56'h20636d706c7475 :\n    (D_op_add)? 56'h20202020616464 :\n    (D_op_break)? 56'h2020627265616b :\n    (D_op_hbreak)? 56'h2068627265616b :\n    (D_op_sync)? 56'h20202073796e63 :\n    (D_op_sub)? 56'h20202020737562 :\n    (D_op_srai)? 56'h20202073726169 :\n    (D_op_sra)? 56'h20202020737261 :\n    (D_op_intr)? 56'h202020696e7472 :\n    56'h20202020424144;",
        "  assign F_inst = (F_op_call)? 56'h20202063616c6c :\n    (F_op_jmpi)? 56'h2020206a6d7069 :\n    (F_op_ldbu)? 56'h2020206c646275 :\n    (F_op_addi)? 56'h20202061646469 :\n    (F_op_stb)? 56'h20202020737462 :\n    (F_op_br)? 56'h20202020206272 :\n    (F_op_ldb)? 56'h202020206c6462 :\n    (F_op_cmpgei)? 56'h20636d70676569 :\n    (F_op_ldhu)? 56'h2020206c646875 :\n    (F_op_andi)? 56'h202020616e6469 :\n    (F_op_sth)? 56'h20202020737468 :\n    (F_op_bge)? 56'h20202020626765 :\n    (F_op_ldh)? 56'h202020206c6468 :\n    (F_op_cmplti)? 56'h20636d706c7469 :\n    (F_op_initda)? 56'h20696e69746461 :\n    (F_op_ori)? 56'h202020206f7269 :\n    (F_op_stw)? 56'h20202020737477 :\n    (F_op_blt)? 56'h20202020626c74 :\n    (F_op_ldw)? 56'h202020206c6477 :\n    (F_op_cmpnei)? 56'h20636d706e6569 :\n    (F_op_flushda)? 56'h666c7573686461 :\n    (F_op_xori)? 56'h202020786f7269 :\n    (F_op_bne)? 56'h20202020626e65 :\n    (F_op_cmpeqi)? 56'h20636d70657169 :\n    (F_op_ldbuio)? 56'h206c646275696f :\n    (F_op_muli)? 56'h2020206d756c69 :\n    (F_op_stbio)? 56'h2020737462696f :\n    (F_op_beq)? 56'h20202020626571 :\n    (F_op_ldbio)? 56'h20206c6462696f :\n    (F_op_cmpgeui)? 56'h636d7067657569 :\n    (F_op_ldhuio)? 56'h206c646875696f :\n    (F_op_andhi)? 56'h2020616e646869 :\n    (F_op_sthio)? 56'h2020737468696f :\n    (F_op_bgeu)? 56'h20202062676575 :\n    (F_op_ldhio)? 56'h20206c6468696f :\n    (F_op_cmpltui)? 56'h636d706c747569 :\n    (F_op_initd)? 56'h2020696e697464 :\n    (F_op_orhi)? 56'h2020206f726869 :\n    (F_op_stwio)? 56'h2020737477696f :\n    (F_op_bltu)? 56'h202020626c7475 :\n    (F_op_ldwio)? 56'h20206c6477696f :\n    (F_op_flushd)? 56'h20666c75736864 :\n    (F_op_xorhi)? 56'h2020786f726869 :\n    (F_op_eret)? 56'h20202065726574 :\n    (F_op_roli)? 56'h202020726f6c69 :\n    (F_op_rol)? 56'h20202020726f6c :\n    (F_op_flushp)? 56'h20666c75736870 :\n    (F_op_ret)? 56'h20202020726574 :\n    (F_op_nor)? 56'h202020206e6f72 :\n    (F_op_mulxuu)? 56'h206d756c787575 :\n    (F_op_cmpge)? 56'h2020636d706765 :\n    (F_op_bret)? 56'h20202062726574 :\n    (F_op_ror)? 56'h20202020726f72 :\n    (F_op_flushi)? 56'h20666c75736869 :\n    (F_op_jmp)? 56'h202020206a6d70 :\n    (F_op_and)? 56'h20202020616e64 :\n    (F_op_cmplt)? 56'h2020636d706c74 :\n    (F_op_slli)? 56'h202020736c6c69 :\n    (F_op_sll)? 56'h20202020736c6c :\n    (F_op_or)? 56'h20202020206f72 :\n    (F_op_mulxsu)? 56'h206d756c787375 :\n    (F_op_cmpne)? 56'h2020636d706e65 :\n    (F_op_srli)? 56'h20202073726c69 :\n    (F_op_srl)? 56'h2020202073726c :\n    (F_op_nextpc)? 56'h206e6578747063 :\n    (F_op_callr)? 56'h202063616c6c72 :\n    (F_op_xor)? 56'h20202020786f72 :\n    (F_op_mulxss)? 56'h206d756c787373 :\n    (F_op_cmpeq)? 56'h2020636d706571 :\n    (F_op_divu)? 56'h20202064697675 :\n    (F_op_div)? 56'h20202020646976 :\n    (F_op_rdctl)? 56'h2020726463746c :\n    (F_op_mul)? 56'h202020206d756c :\n    (F_op_cmpgeu)? 56'h20636d70676575 :\n    (F_op_initi)? 56'h2020696e697469 :\n    (F_op_trap)? 56'h20202074726170 :\n    (F_op_wrctl)? 56'h2020777263746c :\n    (F_op_cmpltu)? 56'h20636d706c7475 :\n    (F_op_add)? 56'h20202020616464 :\n    (F_op_break)? 56'h2020627265616b :\n    (F_op_hbreak)? 56'h2068627265616b :\n    (F_op_sync)? 56'h20202073796e63 :\n    (F_op_sub)? 56'h20202020737562 :\n    (F_op_srai)? 56'h20202073726169 :\n    (F_op_sra)? 56'h20202020737261 :\n    (F_op_intr)? 56'h202020696e7472 :\n    56'h20202020424144;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_alu_force_xor <= 0;\n      else if (R_en)\n          R_ctrl_alu_force_xor <= R_ctrl_alu_force_xor_nxt;\n    end",
        "  assign R_ctrl_alu_force_xor_nxt = D_ctrl_alu_force_xor;",
        "  assign D_ctrl_alu_force_xor = D_op_cmpgei|\n    D_op_cmpgeui|\n    D_op_cmpeqi|\n    D_op_cmpge|\n    D_op_cmpgeu|\n    D_op_cmpeq|\n    D_op_cmpnei|\n    D_op_cmpne|\n    D_op_bge|\n    D_op_rsv10|\n    D_op_bgeu|\n    D_op_rsv42|\n    D_op_beq|\n    D_op_rsv34|\n    D_op_bne|\n    D_op_rsv62|\n    D_op_br|\n    D_op_rsv02;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_force_src2_zero <= 0;\n      else if (R_en)\n          R_ctrl_force_src2_zero <= R_ctrl_force_src2_zero_nxt;\n    end",
        "  assign R_ctrl_force_src2_zero_nxt = D_ctrl_force_src2_zero;",
        "  assign D_ctrl_force_src2_zero = D_op_call|\n    D_op_rsv02|\n    D_op_nextpc|\n    D_op_callr|\n    D_op_trap|\n    D_op_rsvx44|\n    D_op_intr|\n    D_op_rsvx60|\n    D_op_break|\n    D_op_hbreak|\n    D_op_eret|\n    D_op_bret|\n    D_op_rsvx17|\n    D_op_rsvx25|\n    D_op_ret|\n    D_op_jmp|\n    D_op_rsvx21|\n    D_op_jmpi;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_rdctl_inst <= 0;\n      else if (R_en)\n          R_ctrl_rdctl_inst <= R_ctrl_rdctl_inst_nxt;\n    end",
        "  assign R_ctrl_rdctl_inst_nxt = D_ctrl_rdctl_inst;",
        "  assign D_ctrl_rdctl_inst = D_op_rdctl;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_wrctl_inst <= 0;\n      else if (R_en)\n          R_ctrl_wrctl_inst <= R_ctrl_wrctl_inst_nxt;\n    end",
        "  assign R_ctrl_wrctl_inst_nxt = D_ctrl_wrctl_inst;",
        "  assign D_ctrl_wrctl_inst = D_op_wrctl;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_src2_choose_imm <= 0;\n      else if (R_en)\n          R_ctrl_src2_choose_imm <= R_ctrl_src2_choose_imm_nxt;\n    end",
        "  assign R_ctrl_src2_choose_imm_nxt = D_ctrl_src2_choose_imm;",
        "  assign D_ctrl_src2_choose_imm = D_op_addi|\n    D_op_andhi|\n    D_op_orhi|\n    D_op_xorhi|\n    D_op_andi|\n    D_op_ori|\n    D_op_xori|\n    D_op_call|\n    D_op_rdprs|\n    D_op_cmpgei|\n    D_op_cmplti|\n    D_op_cmpnei|\n    D_op_cmpgeui|\n    D_op_cmpltui|\n    D_op_cmpeqi|\n    D_op_jmpi|\n    D_op_rsv09|\n    D_op_rsv17|\n    D_op_rsv25|\n    D_op_rsv33|\n    D_op_rsv41|\n    D_op_rsv49|\n    D_op_rsv57|\n    D_op_ldb|\n    D_op_ldh|\n    D_op_ldl|\n    D_op_ldw|\n    D_op_ldbio|\n    D_op_ldhio|\n    D_op_ldwio|\n    D_op_rsv63|\n    D_op_ldbu|\n    D_op_ldhu|\n    D_op_ldbuio|\n    D_op_ldhuio|\n    D_op_initd|\n    D_op_initda|\n    D_op_flushd|\n    D_op_flushda|\n    D_op_stb|\n    D_op_sth|\n    D_op_stw|\n    D_op_stc|\n    D_op_stbio|\n    D_op_sthio|\n    D_op_stwio|\n    D_op_rsv61|\n    D_op_roli|\n    D_op_rsvx10|\n    D_op_slli|\n    D_op_srli|\n    D_op_rsvx34|\n    D_op_rsvx42|\n    D_op_rsvx50|\n    D_op_srai;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_ignore_dst <= 0;\n      else if (R_en)\n          R_ctrl_ignore_dst <= R_ctrl_ignore_dst_nxt;\n    end",
        "  assign R_ctrl_ignore_dst_nxt = D_ctrl_ignore_dst;",
        "  assign D_ctrl_ignore_dst = D_op_br|\n    D_op_bge|\n    D_op_blt|\n    D_op_bne|\n    D_op_beq|\n    D_op_bgeu|\n    D_op_bltu|\n    D_op_rsv62|\n    D_op_stb|\n    D_op_sth|\n    D_op_stw|\n    D_op_stc|\n    D_op_stbio|\n    D_op_sthio|\n    D_op_stwio|\n    D_op_rsv61|\n    D_op_jmpi|\n    D_op_rsv09|\n    D_op_rsv17|\n    D_op_rsv25|\n    D_op_rsv33|\n    D_op_rsv41|\n    D_op_rsv49|\n    D_op_rsv57;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_b_is_dst <= 0;\n      else if (R_en)\n          R_ctrl_b_is_dst <= R_ctrl_b_is_dst_nxt;\n    end",
        "  assign R_ctrl_b_is_dst_nxt = D_ctrl_b_is_dst;",
        "  assign D_ctrl_b_is_dst = D_op_addi|\n    D_op_andhi|\n    D_op_orhi|\n    D_op_xorhi|\n    D_op_andi|\n    D_op_ori|\n    D_op_xori|\n    D_op_call|\n    D_op_rdprs|\n    D_op_cmpgei|\n    D_op_cmplti|\n    D_op_cmpnei|\n    D_op_cmpgeui|\n    D_op_cmpltui|\n    D_op_cmpeqi|\n    D_op_jmpi|\n    D_op_rsv09|\n    D_op_rsv17|\n    D_op_rsv25|\n    D_op_rsv33|\n    D_op_rsv41|\n    D_op_rsv49|\n    D_op_rsv57|\n    D_op_ldb|\n    D_op_ldh|\n    D_op_ldl|\n    D_op_ldw|\n    D_op_ldbio|\n    D_op_ldhio|\n    D_op_ldwio|\n    D_op_rsv63|\n    D_op_ldbu|\n    D_op_ldhu|\n    D_op_ldbuio|\n    D_op_ldhuio|\n    D_op_initd|\n    D_op_initda|\n    D_op_flushd|\n    D_op_flushda;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_ld_io <= 0;\n      else if (R_en)\n          R_ctrl_ld_io <= R_ctrl_ld_io_nxt;\n    end",
        "  assign R_ctrl_ld_io_nxt = D_ctrl_ld_io;",
        "  assign D_ctrl_ld_io = D_op_ldbuio|D_op_ldhuio|D_op_ldbio|D_op_ldhio|D_op_ldwio|D_op_rsv63;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_st <= 0;\n      else if (R_en)\n          R_ctrl_st <= R_ctrl_st_nxt;\n    end",
        "  assign R_ctrl_st_nxt = D_ctrl_st;",
        "  assign D_ctrl_st = D_op_stb|\n    D_op_sth|\n    D_op_stw|\n    D_op_stc|\n    D_op_stbio|\n    D_op_sthio|\n    D_op_stwio|\n    D_op_rsv61;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_ld_non_io <= 0;\n      else if (R_en)\n          R_ctrl_ld_non_io <= R_ctrl_ld_non_io_nxt;\n    end",
        "  assign R_ctrl_ld_non_io_nxt = D_ctrl_ld_non_io;",
        "  assign D_ctrl_ld_non_io = D_op_ldbu|D_op_ldhu|D_op_ldb|D_op_ldh|D_op_ldw|D_op_ldl;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_ld <= 0;\n      else if (R_en)\n          R_ctrl_ld <= R_ctrl_ld_nxt;\n    end",
        "  assign R_ctrl_ld_nxt = D_ctrl_ld;",
        "  assign D_ctrl_ld = D_op_ldb|\n    D_op_ldh|\n    D_op_ldl|\n    D_op_ldw|\n    D_op_ldbio|\n    D_op_ldhio|\n    D_op_ldwio|\n    D_op_rsv63|\n    D_op_ldbu|\n    D_op_ldhu|\n    D_op_ldbuio|\n    D_op_ldhuio;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_ld_signed <= 0;\n      else if (R_en)\n          R_ctrl_ld_signed <= R_ctrl_ld_signed_nxt;\n    end",
        "  assign R_ctrl_ld_signed_nxt = D_ctrl_ld_signed;",
        "  assign D_ctrl_ld_signed = D_op_ldb|\n    D_op_ldh|\n    D_op_ldl|\n    D_op_ldw|\n    D_op_ldbio|\n    D_op_ldhio|\n    D_op_ldwio|\n    D_op_rsv63;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_br_cmp <= 0;\n      else if (R_en)\n          R_ctrl_br_cmp <= R_ctrl_br_cmp_nxt;\n    end",
        "  assign R_ctrl_br_cmp_nxt = D_ctrl_br_cmp;",
        "  assign D_ctrl_br_cmp = D_op_br|\n    D_op_bge|\n    D_op_blt|\n    D_op_bne|\n    D_op_beq|\n    D_op_bgeu|\n    D_op_bltu|\n    D_op_rsv62|\n    D_op_cmpgei|\n    D_op_cmplti|\n    D_op_cmpnei|\n    D_op_cmpgeui|\n    D_op_cmpltui|\n    D_op_cmpeqi|\n    D_op_rsvx00|\n    D_op_cmpge|\n    D_op_cmplt|\n    D_op_cmpne|\n    D_op_cmpgeu|\n    D_op_cmpltu|\n    D_op_cmpeq|\n    D_op_rsvx56;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_alu_signed_comparison <= 0;\n      else if (R_en)\n          R_ctrl_alu_signed_comparison <= R_ctrl_alu_signed_comparison_nxt;\n    end",
        "  assign R_ctrl_alu_signed_comparison_nxt = D_ctrl_alu_signed_comparison;",
        "  assign D_ctrl_alu_signed_comparison = D_op_cmpge|D_op_cmpgei|D_op_cmplt|D_op_cmplti|D_op_bge|D_op_blt;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_alu_subtract <= 0;\n      else if (R_en)\n          R_ctrl_alu_subtract <= R_ctrl_alu_subtract_nxt;\n    end",
        "  assign R_ctrl_alu_subtract_nxt = D_ctrl_alu_subtract;",
        "  assign D_ctrl_alu_subtract = D_op_sub|\n    D_op_rsvx25|\n    D_op_cmplti|\n    D_op_cmpltui|\n    D_op_cmplt|\n    D_op_cmpltu|\n    D_op_blt|\n    D_op_bltu|\n    D_op_cmpgei|\n    D_op_cmpgeui|\n    D_op_cmpge|\n    D_op_cmpgeu|\n    D_op_bge|\n    D_op_rsv10|\n    D_op_bgeu|\n    D_op_rsv42;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_br <= 0;\n      else if (R_en)\n          R_ctrl_br <= R_ctrl_br_nxt;\n    end",
        "  assign R_ctrl_br_nxt = D_ctrl_br;",
        "  assign D_ctrl_br = D_op_br|\n    D_op_bge|\n    D_op_blt|\n    D_op_bne|\n    D_op_beq|\n    D_op_bgeu|\n    D_op_bltu|\n    D_op_rsv62;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_br_uncond <= 0;\n      else if (R_en)\n          R_ctrl_br_uncond <= R_ctrl_br_uncond_nxt;\n    end",
        "  assign R_ctrl_br_uncond_nxt = D_ctrl_br_uncond;",
        "  assign D_ctrl_br_uncond = D_op_br|D_op_rsv02;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_unsigned_lo_imm16 <= 0;\n      else if (R_en)\n          R_ctrl_unsigned_lo_imm16 <= R_ctrl_unsigned_lo_imm16_nxt;\n    end",
        "  assign R_ctrl_unsigned_lo_imm16_nxt = D_ctrl_unsigned_lo_imm16;",
        "  assign D_ctrl_unsigned_lo_imm16 = D_op_cmpgeui|\n    D_op_cmpltui|\n    D_op_andi|\n    D_op_ori|\n    D_op_xori|\n    D_op_roli|\n    D_op_rsvx10|\n    D_op_slli|\n    D_op_srli|\n    D_op_rsvx34|\n    D_op_rsvx42|\n    D_op_rsvx50|\n    D_op_srai;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_hi_imm16 <= 0;\n      else if (R_en)\n          R_ctrl_hi_imm16 <= R_ctrl_hi_imm16_nxt;\n    end",
        "  assign R_ctrl_hi_imm16_nxt = D_ctrl_hi_imm16;",
        "  assign D_ctrl_hi_imm16 = D_op_andhi|D_op_orhi|D_op_xorhi;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_logic <= 0;\n      else if (R_en)\n          R_ctrl_logic <= R_ctrl_logic_nxt;\n    end",
        "  assign R_ctrl_logic_nxt = D_ctrl_logic;",
        "  assign D_ctrl_logic = D_op_and|\n    D_op_or|\n    D_op_xor|\n    D_op_nor|\n    D_op_andhi|\n    D_op_orhi|\n    D_op_xorhi|\n    D_op_andi|\n    D_op_ori|\n    D_op_xori;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_shift_rot <= 0;\n      else if (R_en)\n          R_ctrl_shift_rot <= R_ctrl_shift_rot_nxt;\n    end",
        "  assign R_ctrl_shift_rot_nxt = D_ctrl_shift_rot;",
        "  assign D_ctrl_shift_rot = D_op_slli|\n    D_op_rsvx50|\n    D_op_sll|\n    D_op_rsvx51|\n    D_op_roli|\n    D_op_rsvx34|\n    D_op_rol|\n    D_op_rsvx35|\n    D_op_srli|\n    D_op_srl|\n    D_op_srai|\n    D_op_sra|\n    D_op_rsvx10|\n    D_op_ror|\n    D_op_rsvx42|\n    D_op_rsvx43;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_shift_rot_right <= 0;\n      else if (R_en)\n          R_ctrl_shift_rot_right <= R_ctrl_shift_rot_right_nxt;\n    end",
        "  assign R_ctrl_shift_rot_right_nxt = D_ctrl_shift_rot_right;",
        "  assign D_ctrl_shift_rot_right = D_op_srli|\n    D_op_srl|\n    D_op_srai|\n    D_op_sra|\n    D_op_rsvx10|\n    D_op_ror|\n    D_op_rsvx42|\n    D_op_rsvx43;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_rot_right <= 0;\n      else if (R_en)\n          R_ctrl_rot_right <= R_ctrl_rot_right_nxt;\n    end",
        "  assign R_ctrl_rot_right_nxt = D_ctrl_rot_right;",
        "  assign D_ctrl_rot_right = D_op_rsvx10|D_op_ror|D_op_rsvx42|D_op_rsvx43;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_shift_right_arith <= 0;\n      else if (R_en)\n          R_ctrl_shift_right_arith <= R_ctrl_shift_right_arith_nxt;\n    end",
        "  assign R_ctrl_shift_right_arith_nxt = D_ctrl_shift_right_arith;",
        "  assign D_ctrl_shift_right_arith = D_op_srai|D_op_sra;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_shift_logical <= 0;\n      else if (R_en)\n          R_ctrl_shift_logical <= R_ctrl_shift_logical_nxt;\n    end",
        "  assign R_ctrl_shift_logical_nxt = D_ctrl_shift_logical;",
        "  assign D_ctrl_shift_logical = D_op_slli|D_op_sll|D_op_srli|D_op_srl;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_retaddr <= 0;\n      else if (R_en)\n          R_ctrl_retaddr <= R_ctrl_retaddr_nxt;\n    end",
        "  assign R_ctrl_retaddr_nxt = D_ctrl_retaddr;",
        "  assign D_ctrl_retaddr = D_op_call|\n    D_op_rsv02|\n    D_op_nextpc|\n    D_op_callr|\n    D_op_trap|\n    D_op_rsvx44|\n    D_op_div|\n    D_op_divu|\n    D_op_mul|\n    D_op_muli|\n    D_op_mulxss|\n    D_op_mulxsu|\n    D_op_mulxuu|\n    D_op_intr|\n    D_op_rsvx60|\n    D_op_break|\n    D_op_hbreak;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_uncond_cti_non_br <= 0;\n      else if (R_en)\n          R_ctrl_uncond_cti_non_br <= R_ctrl_uncond_cti_non_br_nxt;\n    end",
        "  assign R_ctrl_uncond_cti_non_br_nxt = D_ctrl_uncond_cti_non_br;",
        "  assign D_ctrl_uncond_cti_non_br = D_op_call|\n    D_op_jmpi|\n    D_op_eret|\n    D_op_bret|\n    D_op_rsvx17|\n    D_op_rsvx25|\n    D_op_ret|\n    D_op_jmp|\n    D_op_rsvx21|\n    D_op_callr;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_crst <= 0;\n      else if (R_en)\n          R_ctrl_crst <= R_ctrl_crst_nxt;\n    end",
        "  assign R_ctrl_crst_nxt = D_ctrl_crst;",
        "  assign D_ctrl_crst = D_op_crst|D_op_rsvx63;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_break <= 0;\n      else if (R_en)\n          R_ctrl_break <= R_ctrl_break_nxt;\n    end",
        "  assign R_ctrl_break_nxt = D_ctrl_break;",
        "  assign D_ctrl_break = D_op_break|D_op_hbreak;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_exception <= 0;\n      else if (R_en)\n          R_ctrl_exception <= R_ctrl_exception_nxt;\n    end",
        "  assign R_ctrl_exception_nxt = D_ctrl_exception;",
        "  assign D_ctrl_exception = D_op_trap|\n    D_op_rsvx44|\n    D_op_div|\n    D_op_divu|\n    D_op_mul|\n    D_op_muli|\n    D_op_mulxss|\n    D_op_mulxsu|\n    D_op_mulxuu|\n    D_op_intr|\n    D_op_rsvx60;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_implicit_dst_eretaddr <= 0;\n      else if (R_en)\n          R_ctrl_implicit_dst_eretaddr <= R_ctrl_implicit_dst_eretaddr_nxt;\n    end",
        "  assign R_ctrl_implicit_dst_eretaddr_nxt = D_ctrl_implicit_dst_eretaddr;",
        "  assign D_ctrl_implicit_dst_eretaddr = D_op_div|D_op_divu|D_op_mul|D_op_muli|D_op_mulxss|D_op_mulxsu|D_op_mulxuu;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_implicit_dst_retaddr <= 0;\n      else if (R_en)\n          R_ctrl_implicit_dst_retaddr <= R_ctrl_implicit_dst_retaddr_nxt;\n    end",
        "  assign R_ctrl_implicit_dst_retaddr_nxt = D_ctrl_implicit_dst_retaddr;",
        "  assign D_ctrl_implicit_dst_retaddr = D_op_call|D_op_rsv02;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_jmp_direct <= 0;\n      else if (R_en)\n          R_ctrl_jmp_direct <= R_ctrl_jmp_direct_nxt;\n    end",
        "  assign R_ctrl_jmp_direct_nxt = D_ctrl_jmp_direct;",
        "  assign D_ctrl_jmp_direct = D_op_call|D_op_jmpi;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_jmp_indirect <= 0;\n      else if (R_en)\n          R_ctrl_jmp_indirect <= R_ctrl_jmp_indirect_nxt;\n    end",
        "  assign R_ctrl_jmp_indirect_nxt = D_ctrl_jmp_indirect;",
        "  assign D_ctrl_jmp_indirect = D_op_eret|\n    D_op_bret|\n    D_op_rsvx17|\n    D_op_rsvx25|\n    D_op_ret|\n    D_op_jmp|\n    D_op_rsvx21|\n    D_op_callr;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_custom_multi <= 0;\n      else if (R_en)\n          R_ctrl_custom_multi <= R_ctrl_custom_multi_nxt;\n    end",
        "  assign R_ctrl_custom_multi_nxt = D_ctrl_custom_multi;",
        "  assign D_ctrl_custom_multi = 1'b0;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_ctrl_custom <= 0;\n      else if (R_en)\n          R_ctrl_custom <= R_ctrl_custom_nxt;\n    end",
        "  assign R_ctrl_custom_nxt = D_ctrl_custom;",
        "  assign D_ctrl_custom = 1'b0;",
        "  assign jtag_debug_module_reset = ~reset_n;",
        "  assign jtag_debug_module_clk = clk;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          d_write <= 0;\n      else \n        d_write <= d_write_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          hbreak_enabled <= 1'b1;\n      else if (E_valid)\n          hbreak_enabled <= R_ctrl_break ? 1'b0 : D_op_bret ? 1'b1 : hbreak_enabled;\n    end",
        "  assign W_ipending_reg_nxt = iactive & W_ienable_reg & oci_ienable & 32'b00000000000000000000000000111111;",
        "  assign W_ienable_reg_nxt = ((E_wrctl_ienable & E_valid) ? \n    E_src1[31 : 0] : W_ienable_reg) & 32'b00000000000000000000000000111111;",
        "  assign W_bstatus_reg_nxt = E_valid ? W_bstatus_reg_inst_nxt : W_bstatus_reg;",
        "  assign W_bstatus_reg_inst_nxt = (R_ctrl_break)       ? W_status_reg :\n    (E_wrctl_bstatus)    ? E_src1[0] :\n    W_bstatus_reg;",
        "  assign W_estatus_reg_nxt = E_valid ? W_estatus_reg_inst_nxt : W_estatus_reg;",
        "  assign W_estatus_reg_inst_nxt = (R_ctrl_crst)        ? 0 :\n    (R_ctrl_exception)   ? W_status_reg :\n    (E_wrctl_estatus)    ? E_src1[0] :\n    W_estatus_reg;",
        "  assign W_status_reg_pie_nxt = E_valid ? W_status_reg_pie_inst_nxt : W_status_reg_pie;",
        "  assign W_status_reg_pie_inst_nxt = (R_ctrl_exception | R_ctrl_break | R_ctrl_crst) ? 1'b0 :\n    (D_op_eret)                     ? W_estatus_reg :\n    (D_op_bret)                     ? W_bstatus_reg :\n    (E_wrctl_status)                ? E_src1[0] :\n    W_status_reg_pie;",
        "  assign E_wrctl_ienable = R_ctrl_wrctl_inst & \n    (D_iw_control_regnum == 3'd3);",
        "  assign E_wrctl_bstatus = R_ctrl_wrctl_inst & \n    (D_iw_control_regnum == 3'd2);",
        "  assign E_wrctl_estatus = R_ctrl_wrctl_inst & \n    (D_iw_control_regnum == 3'd1);",
        "  assign E_wrctl_status = R_ctrl_wrctl_inst & \n    (D_iw_control_regnum == 3'd0);",
        "  assign W_status_reg = W_status_reg_pie;",
        "  assign W_mem_baddr = W_alu_result[26 : 0];",
        "  assign W_br_taken = R_ctrl_br & W_cmp_result;",
        "  assign W_wr_data = W_wr_data_non_zero;",
        "  assign W_wr_data_non_zero = R_ctrl_br_cmp ? W_cmp_result :\n    R_ctrl_rdctl_inst       ? W_control_rd_data :\n    W_alu_result[31 : 0];",
        "  assign W_cpuid_reg = 0;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_ipending_reg <= 0;\n      else \n        W_ipending_reg <= W_ipending_reg_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_ienable_reg <= 0;\n      else \n        W_ienable_reg <= W_ienable_reg_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_bstatus_reg <= 0;\n      else \n        W_bstatus_reg <= W_bstatus_reg_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_estatus_reg <= 0;\n      else \n        W_estatus_reg <= W_estatus_reg_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_status_reg_pie <= 0;\n      else \n        W_status_reg_pie <= W_status_reg_pie_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_alu_result <= 0;\n      else \n        W_alu_result <= E_alu_result;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_cmp_result <= 0;\n      else \n        W_cmp_result <= E_cmp_result;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_control_rd_data <= 0;\n      else \n        W_control_rd_data <= E_control_rd_data;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          W_valid <= 0;\n      else \n        W_valid <= E_valid & ~E_stall;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          av_ld_byte3_data <= 0;\n      else \n        av_ld_byte3_data <= av_ld_byte3_data_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          av_ld_byte2_data <= 0;\n      else \n        av_ld_byte2_data <= av_ld_byte2_data_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          av_ld_byte1_data <= 0;\n      else if (av_ld_byte1_data_en)\n          av_ld_byte1_data <= av_ld_byte1_data_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          av_ld_byte0_data <= 0;\n      else \n        av_ld_byte0_data <= av_ld_byte0_data_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          av_ld_aligning_data <= 0;\n      else \n        av_ld_aligning_data <= av_ld_aligning_data_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          av_ld_waiting_for_data <= 0;\n      else \n        av_ld_waiting_for_data <= av_ld_waiting_for_data_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          av_ld_align_cycle <= 0;\n      else \n        av_ld_align_cycle <= av_ld_align_cycle_nxt;\n    end",
        "  assign av_fill_bit = av_sign_bit & R_ctrl_ld_signed;",
        "  assign av_sign_bit = D_mem16 ? av_ld_byte1_data[7] : av_ld_byte0_data[7];",
        "  assign av_ld_data_aligned_unfiltered = {av_ld_byte3_data, av_ld_byte2_data, \n    av_ld_byte1_data, av_ld_byte0_data};",
        "  assign av_ld_byte1_data_en = ~(av_ld_extend & D_mem16 & ~av_ld_rshift8);",
        "  assign av_ld_byte3_data_nxt = av_ld_rshift8      ? av_ld_byte3_data :\n    av_ld_extend       ? {8 {av_fill_bit}} :\n    d_readdata[31 : 24];",
        "  assign av_ld_byte2_data_nxt = av_ld_rshift8      ? av_ld_byte3_data :\n    av_ld_extend       ? {8 {av_fill_bit}} :\n    d_readdata[23 : 16];",
        "  assign av_ld_byte1_data_nxt = av_ld_rshift8      ? av_ld_byte2_data :\n    av_ld_extend       ? {8 {av_fill_bit}} :\n    d_readdata[15 : 8];",
        "  assign av_ld_byte0_data_nxt = av_ld_rshift8      ? av_ld_byte1_data :\n    av_ld_extend       ? av_ld_byte0_data :\n    d_readdata[7 : 0];",
        "  assign av_ld_extend = av_ld_aligning_data;",
        "  assign av_ld_rshift8 = av_ld_aligning_data & \n    (av_ld_align_cycle < (W_mem_baddr[1 : 0]));",
        "  assign av_ld_done = ~av_ld_waiting_for_data_nxt & (D_mem32 | ~av_ld_aligning_data_nxt);",
        "  assign av_ld_waiting_for_data_nxt = av_ld_waiting_for_data ? \n    ~av_ld_getting_data : \n    (R_ctrl_ld & E_new_inst);",
        "  assign av_ld_aligning_data_nxt = av_ld_aligning_data ? \n    ~av_ld_align_one_more_cycle : \n    (~D_mem32 & av_ld_getting_data);",
        "  assign av_ld_align_one_more_cycle = av_ld_align_cycle == (D_mem16 ? 2 : 3);",
        "  assign av_ld_align_cycle_nxt = av_ld_getting_data ? 0 : (av_ld_align_cycle+1);",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          d_byteenable <= 0;\n      else \n        d_byteenable <= E_mem_byte_en;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          d_writedata <= 0;\n      else \n        d_writedata <= E_st_data;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          d_read <= 0;\n      else \n        d_read <= d_read_nxt;\n    end",
        "  assign av_ld_getting_data = d_read & ~d_waitrequest;",
        "  assign d_address = W_mem_baddr;",
        "  assign E_st_stall = d_write_nxt;",
        "  assign d_write_nxt = (R_ctrl_st & E_new_inst) | (d_write & d_waitrequest);",
        "  assign E_ld_stall = R_ctrl_ld & ((E_valid & ~av_ld_done) | E_new_inst);",
        "  assign d_read_nxt = (R_ctrl_ld & E_new_inst) | (d_read & d_waitrequest);",
        "  assign E_mem_byte_en = ({D_iw_memsz, E_mem_baddr[1 : 0]} == {2'b00, 2'b00})? 4'b0001 :\n    ({D_iw_memsz, E_mem_baddr[1 : 0]} == {2'b00, 2'b01})? 4'b0010 :\n    ({D_iw_memsz, E_mem_baddr[1 : 0]} == {2'b00, 2'b10})? 4'b0100 :\n    ({D_iw_memsz, E_mem_baddr[1 : 0]} == {2'b00, 2'b11})? 4'b1000 :\n    ({D_iw_memsz, E_mem_baddr[1 : 0]} == {2'b01, 2'b00})? 4'b0011 :\n    ({D_iw_memsz, E_mem_baddr[1 : 0]} == {2'b01, 2'b01})? 4'b0011 :\n    ({D_iw_memsz, E_mem_baddr[1 : 0]} == {2'b01, 2'b10})? 4'b1100 :\n    ({D_iw_memsz, E_mem_baddr[1 : 0]} == {2'b01, 2'b11})? 4'b1100 :\n    4'b1111;",
        "  assign E_st_data = (D_mem8)? {R_stb_data, R_stb_data, R_stb_data, R_stb_data} :\n    (D_mem16)? {R_sth_data, R_sth_data} :\n    R_rf_b;",
        "  assign R_sth_data = R_rf_b[15 : 0];",
        "  assign R_stb_data = R_rf_b[7 : 0];",
        "  assign E_alu_result = ((R_ctrl_br_cmp | R_ctrl_rdctl_inst))? 0 :\n    (R_ctrl_shift_rot)? E_shift_rot_result :\n    (R_ctrl_logic)? E_logic_result :\n    (R_ctrl_custom)? E_ci_result :\n    E_arith_result;",
        "  assign E_control_rd_data = (D_iw_control_regnum == 3'd0)? W_status_reg :\n    (D_iw_control_regnum == 3'd1)? W_estatus_reg :\n    (D_iw_control_regnum == 3'd2)? W_bstatus_reg :\n    (D_iw_control_regnum == 3'd3)? W_ienable_reg :\n    (D_iw_control_regnum == 3'd4)? W_ipending_reg :\n    W_cpuid_reg;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_shift_rot_cnt <= 0;\n      else \n        E_shift_rot_cnt <= E_shift_rot_cnt_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_shift_rot_result <= 0;\n      else \n        E_shift_rot_result <= E_shift_rot_result_nxt;\n    end",
        "  assign E_shift_rot_result_nxt = (E_new_inst)? E_src1 :\n    (R_ctrl_shift_rot_right)? {E_shift_rot_fill_bit, E_shift_rot_result[31 : 1]} :\n    {E_shift_rot_result[30 : 0], E_shift_rot_fill_bit};",
        "  assign E_shift_rot_fill_bit = R_ctrl_shift_logical ? 1'b0 :\n    (R_ctrl_rot_right ? E_shift_rot_result[0] : \n    E_shift_rot_result[31]);",
        "  assign E_shift_rot_stall = R_ctrl_shift_rot & E_valid & ~E_shift_rot_done;",
        "  assign E_shift_rot_done = (E_shift_rot_cnt == 0) & ~E_new_inst;",
        "  assign E_shift_rot_cnt_nxt = E_new_inst ? E_src2[4 : 0] : E_shift_rot_cnt-1;",
        "  assign E_cmp_result = (R_compare_op == 2'b00)? E_eq :\n    (R_compare_op == 2'b01)? ~E_lt :\n    (R_compare_op == 2'b10)? E_lt :\n    ~E_eq;",
        "  assign E_lt = E_arith_result[32];",
        "  assign E_eq = E_logic_result_is_0;",
        "  assign E_logic_result_is_0 = E_logic_result == 0;",
        "  assign E_logic_result = (R_logic_op == 2'b00)? (~(E_src1 | E_src2)) :\n    (R_logic_op == 2'b01)? (E_src1 & E_src2) :\n    (R_logic_op == 2'b10)? (E_src1 | E_src2) :\n    (E_src1 ^ E_src2);",
        "  assign E_mem_baddr = E_arith_result[26 : 0];",
        "  assign E_arith_result = E_alu_sub ?\n    E_arith_src1 - E_arith_src2 :\n    E_arith_src1 + E_arith_src2;",
        "  assign E_arith_src2 = { E_src2[31] ^ E_invert_arith_src_msb, \n    E_src2[30 : 0]};",
        "  assign E_arith_src1 = { E_src1[31] ^ E_invert_arith_src_msb, \n    E_src1[30 : 0]};",
        "  assign E_stall = E_shift_rot_stall | E_ld_stall | E_st_stall | E_ci_multi_stall;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_alu_sub <= 0;\n      else \n        E_alu_sub <= D_ctrl_alu_subtract & R_valid;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_invert_arith_src_msb <= 0;\n      else \n        E_invert_arith_src_msb <= D_ctrl_alu_signed_comparison & R_valid;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_src2 <= 0;\n      else \n        E_src2 <= R_src2;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_src1 <= 0;\n      else \n        E_src1 <= R_src1;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_new_inst <= 0;\n      else \n        E_new_inst <= R_valid;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_valid <= 0;\n      else \n        E_valid <= R_valid | E_stall;\n    end",
        "  assign R_src2 = {R_src2_hi, R_src2_lo};",
        "  assign R_src2_hi = ((R_ctrl_force_src2_zero|R_ctrl_unsigned_lo_imm16))? 16'b0 :\n    (R_ctrl_hi_imm16)? D_iw_imm16 :\n    (R_src2_use_imm)? {16 {D_iw_imm16[15]}} :\n    R_rf_b[31 : 16];",
        "  assign R_src2_lo = ((R_ctrl_force_src2_zero|R_ctrl_hi_imm16))? 16'b0 :\n    (R_src2_use_imm)? D_iw_imm16 :\n    R_rf_b[15 : 0];",
        "  assign R_src1 = (((R_ctrl_br & E_valid) | (R_ctrl_retaddr & R_valid)))? {F_pc_plus_one, 2'b00} :\n    ((R_ctrl_jmp_direct & E_valid))? {D_jmp_direct_target_waddr, 2'b00} :\n    R_rf_a;",
        "  assign W_rf_wr_data = R_ctrl_ld ? av_ld_data_aligned_filtered : W_wr_data;",
        "  assign W_rf_wren = (R_wr_dst_reg & W_valid) | ~reset_n;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_src2_use_imm <= 0;\n      else \n        R_src2_use_imm <= D_ctrl_src2_choose_imm | (D_ctrl_br & R_valid);\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_compare_op <= 0;\n      else \n        R_compare_op <= D_compare_op;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_logic_op <= 0;\n      else \n        R_logic_op <= D_logic_op;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_dst_regnum <= 0;\n      else \n        R_dst_regnum <= D_dst_regnum;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_wr_dst_reg <= 0;\n      else \n        R_wr_dst_reg <= D_wr_dst_reg;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          R_valid <= 0;\n      else \n        R_valid <= D_valid;\n    end",
        "  assign D_jmp_direct_target_waddr = D_iw[31 : 6];",
        "  assign D_compare_op = D_op_opx ? D_iw_opx[4 : 3] : \n    D_iw_op[4 : 3];",
        "  assign D_logic_op = D_ctrl_alu_force_xor ? 2'b11 : D_logic_op_raw;",
        "  assign D_logic_op_raw = D_op_opx ? D_iw_opx[4 : 3] : \n    D_iw_op[4 : 3];",
        "  assign D_wr_dst_reg = (D_dst_regnum != 0) & ~D_ctrl_ignore_dst;",
        "  assign D_dst_regnum = D_ctrl_implicit_dst_retaddr    ? 5'd31 : \n    D_ctrl_implicit_dst_eretaddr   ? 5'd29 : \n    D_ctrl_b_is_dst                ? D_iw_b :\n    D_iw_c;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          D_valid <= 0;\n      else \n        D_valid <= F_valid;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          D_iw <= 0;\n      else if (F_valid)\n          D_iw <= F_iw;\n    end",
        "  assign F_iw = hbreak_req     ? 4040762 :\n    1'b0   ? 127034 :\n    intr_req       ? 3926074 : \n    F_av_iw;",
        "  assign F_av_iw = i_readdata;",
        "  assign intr_req = W_status_reg_pie & (W_ipending_reg != 0);",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          hbreak_pending <= 1'b0;\n      else \n        hbreak_pending <= hbreak_pending_nxt;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          wait_for_one_post_bret_inst <= 1'b0;\n      else \n        wait_for_one_post_bret_inst <= (~hbreak_enabled & oci_single_step_mode) ? 1'b1  : (F_valid | ~oci_single_step_mode) ? 1'b0  : wait_for_one_post_bret_inst;\n    end",
        "  assign hbreak_pending_nxt = hbreak_pending ? hbreak_enabled \n    : hbreak_req;",
        "  assign hbreak_req = (oci_tb_hbreak_req | hbreak_pending) & hbreak_enabled &  ~(wait_for_one_post_bret_inst & ~W_valid);",
        "  assign oci_tb_hbreak_req = oci_hbreak_req;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          i_read <= 1'b1;\n      else \n        i_read <= i_read_nxt;\n    end",
        "  assign i_address = {F_pc, 2'b00};",
        "  assign i_read_nxt = W_valid | (i_read & i_waitrequest);",
        "  assign F_valid = i_read & ~i_waitrequest;",
        "  assign F_pcb_plus_four = {F_pc_plus_one, 2'b00};",
        "  assign F_pcb = {F_pc, 2'b00};",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          F_pc <= 16809984;\n      else if (F_pc_en)\n          F_pc <= F_pc_nxt;\n    end",
        "  assign clkx2 = 0;",
        "  assign debugreq = 0;",
        "  assign dummy_sink = tr_clk |\n    tr_data |\n    trigout |\n    debugack;",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          readdata <= 0;\n      else \n        readdata <= address[8] ? oci_reg_readdata : ociram_readdata;\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          write <= 0;\n      else \n        write <= write ? waitrequest : write_nxt;\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          read <= 0;\n      else \n        read <= read ? waitrequest : read_nxt;\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          debugaccess <= 0;\n      else \n        debugaccess <= debugaccess_nxt;\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          writedata <= 0;\n      else \n        writedata <= writedata_nxt;\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          byteenable <= 0;\n      else \n        byteenable <= byteenable_nxt;\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          address <= 0;\n      else \n        address <= address_nxt;\n    end",
        "  assign tracemem_trcdata = 0;",
        "  assign tracemem_on = trc_enb;",
        "  assign tracemem_tw = trc_wrap;",
        "  assign xbrk_wrap_traceoff = trc_ctrl[10] & trc_wrap;",
        "  assign tw_valid = |trc_im_data[35 : 32];",
        "  assign trc_on_chip = ~trc_ctrl[8];",
        "  assign trc_enb = trc_ctrl[0];",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          trc_jtag_addr <= 0;\n      else if (take_action_tracemem_a ||\n                take_no_action_tracemem_a || \n                take_action_tracemem_b)\n          trc_jtag_addr <= take_action_tracemem_a ? \n                    jdo[35 : 19] : \n                    trc_jtag_addr + 1;\n\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          trc_im_addr <= 0;\n          trc_wrap <= 0;\n        end\n      else if (!0)\n        begin\n          trc_im_addr <= 0;\n          trc_wrap <= 0;\n        end\n      else if (take_action_tracectrl && \n                      (jdo[4] | jdo[3]))\n        begin\n          if (jdo[4])\n              trc_im_addr <= 0;\n          if (jdo[3])\n              trc_wrap <= 0;\n        end\n      else if (trc_enb & trc_on_chip & tw_valid)\n        begin\n          trc_im_addr <= trc_im_addr+1;\n          if (&trc_im_addr)\n              trc_wrap <= 1;\n        end\n    end",
        "  assign trc_im_data = tw;",
        "  assign tr_data = 0 ? tr_data_reg : 0;",
        "  assign tr_clk = 0 ? tr_clk_reg : 0;",
        "  always @(posedge clkx2 or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          x2 <= 0;\n          tr_clk_reg <= 0;\n          tr_data_reg <= 0;\n        end\n      else \n        begin\n          x2 <= x1;\n          tr_clk_reg <= ~phase;\n          tr_data_reg <= phase ?   tw[17 : 0] :   tw[35 : 18];\n        end\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          x1 <= 0;\n      else \n        x1 <= ~x1;\n    end",
        "  assign fifo_read_mux = (fifo_rdptr == 4'd0)? fifo_0 :\n    (fifo_rdptr == 4'd1)? fifo_1 :\n    (fifo_rdptr == 4'd2)? fifo_2 :\n    (fifo_rdptr == 4'd3)? fifo_3 :\n    (fifo_rdptr == 4'd4)? fifo_4 :\n    (fifo_rdptr == 4'd5)? fifo_5 :\n    (fifo_rdptr == 4'd6)? fifo_6 :\n    (fifo_rdptr == 4'd7)? fifo_7 :\n    (fifo_rdptr == 4'd8)? fifo_8 :\n    (fifo_rdptr == 4'd9)? fifo_9 :\n    (fifo_rdptr == 4'd10)? fifo_10 :\n    (fifo_rdptr == 4'd11)? fifo_11 :\n    (fifo_rdptr == 4'd12)? fifo_12 :\n    (fifo_rdptr == 4'd13)? fifo_13 :\n    (fifo_rdptr == 4'd14)? fifo_14 :\n    fifo_15;",
        "  assign overflow_pending_dtm = {overflow_pending, dtm[34 : 0]};",
        "  assign overflow_pending_atm = {overflow_pending, atm[34 : 0]};",
        "  assign input_ge3 = &input_tm_cnt;",
        "  assign input_ge2 = input_tm_cnt[1];",
        "  assign input_ge1 = |input_tm_cnt;",
        "  assign fifo_15_mux = (((fifo_wrptr == 4'd15) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd15) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd15) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd15) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd15) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd15) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_15 <= 0;\n      else if (fifo_15_enable)\n          fifo_15 <= fifo_15_mux;\n    end",
        "  assign fifo_15_enable = ((fifo_wrptr == 4'd15) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd15) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd15) && input_ge3);",
        "  assign fifo_14_mux = (((fifo_wrptr == 4'd14) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd14) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd14) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd14) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd14) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd14) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_14 <= 0;\n      else if (fifo_14_enable)\n          fifo_14 <= fifo_14_mux;\n    end",
        "  assign fifo_14_enable = ((fifo_wrptr == 4'd14) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd14) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd14) && input_ge3);",
        "  assign fifo_13_mux = (((fifo_wrptr == 4'd13) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd13) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd13) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd13) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd13) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd13) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_13 <= 0;\n      else if (fifo_13_enable)\n          fifo_13 <= fifo_13_mux;\n    end",
        "  assign fifo_13_enable = ((fifo_wrptr == 4'd13) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd13) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd13) && input_ge3);",
        "  assign fifo_12_mux = (((fifo_wrptr == 4'd12) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd12) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd12) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd12) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd12) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd12) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_12 <= 0;\n      else if (fifo_12_enable)\n          fifo_12 <= fifo_12_mux;\n    end",
        "  assign fifo_12_enable = ((fifo_wrptr == 4'd12) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd12) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd12) && input_ge3);",
        "  assign fifo_11_mux = (((fifo_wrptr == 4'd11) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd11) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd11) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd11) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd11) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd11) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_11 <= 0;\n      else if (fifo_11_enable)\n          fifo_11 <= fifo_11_mux;\n    end",
        "  assign fifo_11_enable = ((fifo_wrptr == 4'd11) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd11) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd11) && input_ge3);",
        "  assign fifo_10_mux = (((fifo_wrptr == 4'd10) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd10) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd10) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd10) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd10) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd10) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_10 <= 0;\n      else if (fifo_10_enable)\n          fifo_10 <= fifo_10_mux;\n    end",
        "  assign fifo_10_enable = ((fifo_wrptr == 4'd10) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd10) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd10) && input_ge3);",
        "  assign fifo_9_mux = (((fifo_wrptr == 4'd9) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd9) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd9) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd9) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd9) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd9) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_9 <= 0;\n      else if (fifo_9_enable)\n          fifo_9 <= fifo_9_mux;\n    end",
        "  assign fifo_9_enable = ((fifo_wrptr == 4'd9) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd9) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd9) && input_ge3);",
        "  assign fifo_8_mux = (((fifo_wrptr == 4'd8) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd8) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd8) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd8) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd8) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd8) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_8 <= 0;\n      else if (fifo_8_enable)\n          fifo_8 <= fifo_8_mux;\n    end",
        "  assign fifo_8_enable = ((fifo_wrptr == 4'd8) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd8) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd8) && input_ge3);",
        "  assign fifo_7_mux = (((fifo_wrptr == 4'd7) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd7) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd7) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd7) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd7) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd7) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_7 <= 0;\n      else if (fifo_7_enable)\n          fifo_7 <= fifo_7_mux;\n    end",
        "  assign fifo_7_enable = ((fifo_wrptr == 4'd7) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd7) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd7) && input_ge3);",
        "  assign fifo_6_mux = (((fifo_wrptr == 4'd6) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd6) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd6) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd6) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd6) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd6) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_6 <= 0;\n      else if (fifo_6_enable)\n          fifo_6 <= fifo_6_mux;\n    end",
        "  assign fifo_6_enable = ((fifo_wrptr == 4'd6) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd6) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd6) && input_ge3);",
        "  assign fifo_5_mux = (((fifo_wrptr == 4'd5) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd5) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd5) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd5) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd5) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd5) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_5 <= 0;\n      else if (fifo_5_enable)\n          fifo_5 <= fifo_5_mux;\n    end",
        "  assign fifo_5_enable = ((fifo_wrptr == 4'd5) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd5) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd5) && input_ge3);",
        "  assign fifo_4_mux = (((fifo_wrptr == 4'd4) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd4) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd4) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd4) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd4) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd4) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_4 <= 0;\n      else if (fifo_4_enable)\n          fifo_4 <= fifo_4_mux;\n    end",
        "  assign fifo_4_enable = ((fifo_wrptr == 4'd4) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd4) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd4) && input_ge3);",
        "  assign fifo_3_mux = (((fifo_wrptr == 4'd3) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd3) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd3) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd3) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd3) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd3) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_3 <= 0;\n      else if (fifo_3_enable)\n          fifo_3 <= fifo_3_mux;\n    end",
        "  assign fifo_3_enable = ((fifo_wrptr == 4'd3) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd3) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd3) && input_ge3);",
        "  assign fifo_2_mux = (((fifo_wrptr == 4'd2) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd2) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd2) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd2) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd2) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd2) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_2 <= 0;\n      else if (fifo_2_enable)\n          fifo_2 <= fifo_2_mux;\n    end",
        "  assign fifo_2_enable = ((fifo_wrptr == 4'd2) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd2) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd2) && input_ge3);",
        "  assign fifo_1_mux = (((fifo_wrptr == 4'd1) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd1) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd1) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd1) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd1) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd1) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_1 <= 0;\n      else if (fifo_1_enable)\n          fifo_1 <= fifo_1_mux;\n    end",
        "  assign fifo_1_enable = ((fifo_wrptr == 4'd1) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd1) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd1) && input_ge3);",
        "  assign fifo_0_mux = (((fifo_wrptr == 4'd0) && itm_valid))? itm :\n    (((fifo_wrptr == 4'd0) && atm_valid))? overflow_pending_atm :\n    (((fifo_wrptr == 4'd0) && dtm_valid))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd0) && (ge2_free & itm_valid & atm_valid)))? overflow_pending_atm :\n    (((fifo_wrptr_plus1 == 4'd0) && (ge2_free & itm_valid & dtm_valid)))? overflow_pending_dtm :\n    (((fifo_wrptr_plus1 == 4'd0) && (ge2_free & atm_valid & dtm_valid)))? overflow_pending_dtm :\n    overflow_pending_dtm;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          fifo_0 <= 0;\n      else if (fifo_0_enable)\n          fifo_0 <= fifo_0_mux;\n    end",
        "  assign fifo_0_enable = ((fifo_wrptr == 4'd0) && input_ge1)  || (ge2_free && (fifo_wrptr_plus1== 4'd0) && input_ge2)  ||(ge3_free && (fifo_wrptr_plus2== 4'd0) && input_ge3);",
        "  assign tw = 0 ?  { (empty ? 4'h0 : fifo_head[35 : 32]),   fifo_head[31 : 0]}  : itm;",
        "  assign fifo_head = fifo_read_mux;",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          fifo_rdptr <= 0;\n          fifo_wrptr <= 0;\n          fifo_cnt <= 0;\n          overflow_pending <= 1;\n        end\n      else \n        begin\n          fifo_wrptr <= fifo_wrptr + fifo_wrptr_inc;\n          fifo_cnt <= fifo_cnt + fifo_cnt_inc;\n          if (~empty)\n              fifo_rdptr <= fifo_rdptr + 1;\n          if (~trc_this || (~ge2_free & input_ge2) || (~ge3_free & input_ge3))\n              overflow_pending <= 1;\n          else if (atm_valid | dtm_valid)\n              overflow_pending <= 0;\n        end\n    end",
        "  assign input_tm_cnt = compute_input_tm_cnt;",
        "  assign fifo_wrptr_plus2 = fifo_wrptr + 2;",
        "  assign fifo_wrptr_plus1 = fifo_wrptr + 1;",
        "  assign empty = ~|fifo_cnt;",
        "  assign ge3_free = ge2_free & ~&fifo_cnt[3 : 0];",
        "  assign ge2_free = ~fifo_cnt[4];",
        "  assign dtm_valid = |dtm[35 : 32] & trc_this;",
        "  assign atm_valid = |atm[35 : 32] & trc_this;",
        "  assign itm_valid = |itm[35 : 32];",
        "  assign trc_this = trc_on | (dbrk_traceon & ~dbrk_traceoff) | dbrk_traceme;",
        "  always @(empty or ge2_free or ge3_free or input_tm_cnt)\n    begin\n      if (empty)\n          fifo_cnt_inc = input_tm_cnt[1 : 0];\n      else if (ge3_free & (input_tm_cnt == 3))\n          fifo_cnt_inc = 2;\n      else if (ge2_free & (input_tm_cnt >= 2))\n          fifo_cnt_inc = 1;\n      else if (input_tm_cnt >= 1)\n          fifo_cnt_inc = 0;\n      else \n        fifo_cnt_inc = {5{1'b1}};\n    end",
        "  always @(ge2_free or ge3_free or input_tm_cnt)\n    begin\n      if (ge3_free & (input_tm_cnt == 3))\n          fifo_wrptr_inc = 3;\n      else if (ge2_free & (input_tm_cnt >= 2))\n          fifo_wrptr_inc = 2;\n      else if (input_tm_cnt >= 1)\n          fifo_wrptr_inc = 1;\n      else \n        fifo_wrptr_inc = 0;\n    end",
        "  always @(switch_for_mux)\n    begin\n      case (switch_for_mux)\n      \n          3'b000: begin\n              compute_input_tm_cnt = 0;\n          end \n      \n          3'b001: begin\n              compute_input_tm_cnt = 1;\n          end \n      \n          3'b010: begin\n              compute_input_tm_cnt = 1;\n          end \n      \n          3'b011: begin\n              compute_input_tm_cnt = 2;\n          end \n      \n          3'b100: begin\n              compute_input_tm_cnt = 1;\n          end \n      \n          3'b101: begin\n              compute_input_tm_cnt = 2;\n          end \n      \n          3'b110: begin\n              compute_input_tm_cnt = 2;\n          end \n      \n          3'b111: begin\n              compute_input_tm_cnt = 3;\n          end \n      \n      endcase \n    end",
        "  assign switch_for_mux = {itm_valid, atm_valid, dtm_valid};",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          atm <= 0;\n          dtm <= 0;\n        end\n      else if (0)\n        begin\n          if (cpu_d_write & ~cpu_d_wait & record_store_addr)\n              atm <= {4'b0101, cpu_d_address_0_padded};\n          else if (cpu_d_read & ~cpu_d_wait & record_load_addr)\n              atm <= {4'b0100, cpu_d_address_0_padded};\n          else \n            atm <= {4'b0000, cpu_d_address_0_padded};\n          if (cpu_d_write & ~cpu_d_wait & record_store_data)\n              dtm <= {4'b0111, cpu_d_writedata_0_padded};\n          else if (cpu_d_read & ~cpu_d_wait & record_load_data)\n              dtm <= {4'b0110, cpu_d_readdata_0_padded};\n          else \n            dtm <= {4'b0000, cpu_d_readdata_0_padded};\n        end\n      else \n        begin\n          atm <= 0;\n          dtm <= 0;\n        end\n    end",
        "  assign {record_load_addr, record_store_addr,\n         record_load_data, record_store_data} = td_mode_trc_ctrl;",
        "  assign cpu_d_address_0_padded = cpu_d_address | 32'b0;",
        "  assign cpu_d_readdata_0_padded = cpu_d_readdata | 32'b0;",
        "  assign cpu_d_writedata_0_padded = cpu_d_writedata | 32'b0;",
        "  always @(ctrl_bits_for_mux)\n    begin\n      case (ctrl_bits_for_mux)\n      \n          3'b000: begin\n              td_mode = 4'b0000;\n          end \n      \n          3'b001: begin\n              td_mode = 4'b1000;\n          end \n      \n          3'b010: begin\n              td_mode = 4'b0100;\n          end \n      \n          3'b011: begin\n              td_mode = 4'b1100;\n          end \n      \n          3'b100: begin\n              td_mode = 4'b0010;\n          end \n      \n          3'b101: begin\n              td_mode = 4'b1010;\n          end \n      \n          3'b110: begin\n              td_mode = 4'b0101;\n          end \n      \n          3'b111: begin\n              td_mode = 4'b1111;\n          end \n      \n      endcase \n    end",
        "module DE1_SoC_QSYS_nios2_qsys_nios2_oci_td_mode (\n                                                   \n                                                    ctrl,\n\n                                                   \n                                                    td_mode\n                                                 )\n;\n\n  output  [  3: 0] td_mode;\n  input   [  8: 0] ctrl;\n\n\nwire    [  2: 0] ctrl_bits_for_mux;\nreg     [  3: 0] td_mode;\n  assign ctrl_bits_for_mux = ctrl[7 : 5];",
        "  assign trc_on = trc_ctrl[1] & (trc_ctrl[9] | not_in_debug_mode);",
        "  assign trc_ctrl = (0 || 0) ? {6'b000000, trc_ctrl_reg} : 0;",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          trc_ctrl_reg[0] <= 1'b0;\n          trc_ctrl_reg[1] <= 1'b0;\n          trc_ctrl_reg[3 : 2] <= 2'b00;\n          trc_ctrl_reg[4] <= 1'b0;\n          trc_ctrl_reg[7 : 5] <= 3'b000;\n          trc_ctrl_reg[8] <= 0;\n          trc_ctrl_reg[9] <= 1'b0;\n          trc_ctrl_reg[10] <= 1'b0;\n        end\n      else if (take_action_tracectrl)\n        begin\n          trc_ctrl_reg[0] <= jdo[5];\n          trc_ctrl_reg[1] <= jdo[6];\n          trc_ctrl_reg[3 : 2] <= jdo[8 : 7];\n          trc_ctrl_reg[4] <= jdo[9];\n          trc_ctrl_reg[9] <= jdo[14];\n          trc_ctrl_reg[10] <= jdo[2];\n          if (0)\n              trc_ctrl_reg[7 : 5] <= jdo[12 : 10];\n          if (0 & 0)\n              trc_ctrl_reg[8] <= jdo[13];\n        end\n      else if (xbrk_wrap_traceoff)\n        begin\n          trc_ctrl_reg[1] <= 0;\n          trc_ctrl_reg[0] <= 0;\n        end\n      else if (dbrk_traceoff | xbrk_traceoff)\n          trc_ctrl_reg[1] <= 0;\n      else if (trc_ctrl_reg[0] & \n                                  (dbrk_traceon | xbrk_traceon))\n          trc_ctrl_reg[1] <= 1;\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          itm <= 0;\n          dct_buffer <= 0;\n          dct_count <= 0;\n          sync_timer <= 0;\n          pending_frametype <= 4'b0000;\n          pending_exc <= 0;\n          pending_exc_addr <= 0;\n          pending_exc_handler <= 0;\n          pending_exc_record_handler <= 0;\n          prev_pid <= 0;\n          prev_pid_valid <= 0;\n          snapped_pid <= 0;\n          snapped_curr_pid <= 0;\n          snapped_prev_pid <= 0;\n          pending_curr_pid <= 0;\n          pending_prev_pid <= 0;\n        end\n      else if (trc_clear || (!0 && !0))\n        begin\n          itm <= 0;\n          dct_buffer <= 0;\n          dct_count <= 0;\n          sync_timer <= 0;\n          pending_frametype <= 4'b0000;\n          pending_exc <= 0;\n          pending_exc_addr <= 0;\n          pending_exc_handler <= 0;\n          pending_exc_record_handler <= 0;\n          prev_pid <= 0;\n          prev_pid_valid <= 0;\n          snapped_pid <= 0;\n          snapped_curr_pid <= 0;\n          snapped_prev_pid <= 0;\n          pending_curr_pid <= 0;\n          pending_prev_pid <= 0;\n        end\n      else \n        begin\n          if (!prev_pid_valid)\n            begin\n              prev_pid <= curr_pid;\n              prev_pid_valid <= 1;\n            end\n          if ((curr_pid != prev_pid) & prev_pid_valid & !snapped_pid)\n            begin\n              snapped_pid <= 1;\n              snapped_curr_pid <= curr_pid;\n              snapped_prev_pid <= prev_pid;\n              prev_pid <= curr_pid;\n              prev_pid_valid <= 1;\n            end\n          if (instr_retired | advanced_exc_occured)\n            begin\n              if (~record_itrace)\n                  pending_frametype <= 4'b1010;\n              else if (is_exception_no_break)\n                begin\n                  pending_exc <= 1;\n                  pending_exc_addr <= exc_addr;\n                  pending_exc_record_handler <= 0;\n                  if (is_external_interrupt)\n                      pending_exc_handler <= eic_addr;\n                  else if (is_fast_tlb_miss_exception)\n                      pending_exc_handler <= 32'h0;\n                  else \n                    pending_exc_handler <= 32'h4020020;\n                  pending_frametype <= 4'b0000;\n                end\n              else if (is_idct)\n                  pending_frametype <= 4'b1001;\n              else if (record_dct_outcome_in_sync)\n                  pending_frametype <= 4'b1000;\n              else if (!is_dct & snapped_pid)\n                begin\n                  pending_frametype <= 4'b0011;\n                  pending_curr_pid <= snapped_curr_pid;\n                  pending_prev_pid <= snapped_prev_pid;\n                  snapped_pid <= 0;\n                end\n              else \n                pending_frametype <= 4'b0000;\n              if ((dct_count != 0) & \n             (~record_itrace | \n              is_exception_no_break |\n              is_idct |\n              record_dct_outcome_in_sync |\n              (!is_dct & snapped_pid)))\n                begin\n                  itm <= {4'b0001, dct_buffer, 2'b00};\n                  dct_buffer <= 0;\n                  dct_count <= 0;\n                  sync_timer <= sync_timer_next;\n                end\n              else \n                begin\n                  if (record_itrace & (is_dct & (dct_count != 4'd15)) & ~record_dct_outcome_in_sync & ~advanced_exc_occured)\n                    begin\n                      dct_buffer <= {dct_code, dct_buffer[29 : 2]};\n                      dct_count <= dct_count + 1;\n                    end\n                  if (record_itrace & (\n                  (pending_frametype == 4'b1000) |\n                  (pending_frametype == 4'b1010) |\n                  (pending_frametype == 4'b1001)))\n                    begin\n                      itm <= {pending_frametype, retired_pcb};\n                      sync_timer <= sync_interval;\n                      if (0 &\n                      ((pending_frametype == 4'b1000) | (pending_frametype == 4'b1010)) &\n                      !snapped_pid & prev_pid_valid)\n                        begin\n                          snapped_pid <= 1;\n                          snapped_curr_pid <= curr_pid;\n                          snapped_prev_pid <= prev_pid;\n                        end\n                    end\n                  else if (record_itrace & \n                  0 & (pending_frametype == 4'b0011))\n                      itm <= {4'b0011, 2'b00, pending_prev_pid, 2'b00, pending_curr_pid};\n                  else if (record_itrace & is_dct)\n                    begin\n                      if (dct_count == 4'd15)\n                        begin\n                          itm <= {4'b0001, dct_code, dct_buffer};\n                          dct_buffer <= 0;\n                          dct_count <= 0;\n                          sync_timer <= sync_timer_next;\n                        end\n                      else \n                        itm <= 4'b0000;\n                    end\n                  else \n                    itm <= {4'b0000, 32'b0};\n                end\n            end\n          else if (record_itrace & pending_exc)\n            begin\n              if (pending_exc_record_handler)\n                begin\n                  itm <= {4'b0010, pending_exc_handler[31 : 1], 1'b1};\n                  pending_exc <= 1'b0;\n                  pending_exc_record_handler <= 1'b0;\n                end\n              else \n                begin\n                  itm <= {4'b0010, pending_exc_addr[31 : 1], 1'b0};\n                  pending_exc_record_handler <= 1'b1;\n                end\n            end\n          else \n            itm <= {4'b0000, 32'b0};\n        end\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          trc_clear <= 0;\n      else \n        trc_clear <= ~trc_enb & \n                take_action_tracectrl & jdo[4];\n\n    end",
        "  assign dct_code = {is_cond_dct, dct_is_taken};",
        "  assign record_itrace = trc_on & trc_ctrl[4];",
        "  assign sync_timer_next = sync_timer_reached_zero ? sync_timer : (sync_timer - 1);",
        "  assign record_dct_outcome_in_sync = dct_is_taken & sync_timer_reached_zero;",
        "  assign sync_timer_reached_zero = sync_timer == 0;",
        "  assign sync_interval = { sync_code[1] & sync_code[0], 1'b0, sync_code[1] & ~sync_code[0], 1'b0, ~sync_code[1] & sync_code[0], 2'b00 };",
        "  assign sync_code = trc_ctrl[3 : 2];",
        "  assign eic_addr = 32'b0;",
        "  assign exc_addr = 32'b0;",
        "  assign curr_pid = 1'b0;",
        "  assign is_fast_tlb_miss_exception = 1'b0;",
        "  assign is_external_interrupt = 1'b0;",
        "  assign is_exception_no_break = 1'b0;",
        "  assign advanced_exc_occured = 1'b0;",
        "  assign instr_retired = 1'b0;",
        "  assign not_in_debug_mode = 1'b0;",
        "  assign retired_pcb = 32'b0;",
        "  assign is_idct = 1'b0;",
        "  assign dct_is_taken = 1'b0;",
        "  assign is_dct = 1'b0;",
        "  assign is_cond_dct = 1'b0;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n        begin\n          dbrk_trigout <= 0;\n          dbrk_break_pulse <= 0;\n          dbrk_traceoff <= 0;\n          dbrk_traceon <= 0;\n          dbrk_traceme <= 0;\n          dbrk_goto0 <= 0;\n          dbrk_goto1 <= 0;\n        end\n      else \n        begin\n          dbrk_trigout <= dbrk0_trigout | dbrk1_trigout | dbrk2_trigout | dbrk3_trigout;\n          dbrk_break_pulse <= dbrk0_break_pulse | dbrk1_break_pulse | dbrk2_break_pulse | dbrk3_break_pulse;\n          dbrk_traceoff <= dbrk0_traceoff | dbrk1_traceoff | dbrk2_traceoff | dbrk3_traceoff;\n          dbrk_traceon <= dbrk0_traceon | dbrk1_traceon | dbrk2_traceon | dbrk3_traceon;\n          dbrk_traceme <= dbrk0_traceme | dbrk1_traceme | dbrk2_traceme | dbrk3_traceme;\n          dbrk_goto0 <= dbrk0_goto0 | dbrk1_goto0 | dbrk2_goto0 | dbrk3_goto0;\n          dbrk_goto1 <= dbrk0_goto1 | dbrk1_goto1 | dbrk2_goto1 | dbrk3_goto1;\n        end\n    end",
        "  assign dbrk3_goto1 = 1'b0;",
        "  assign dbrk3_goto0 = 1'b0;",
        "  assign dbrk3_traceme = 1'b0;",
        "  assign dbrk3_traceon = 1'b0;",
        "  assign dbrk3_traceoff = 1'b0;",
        "  assign dbrk3_break_pulse = 1'b0;",
        "  assign dbrk3_trigout = 1'b0;",
        "  assign dbrk3_armed = 1'b0;",
        "  assign dbrk2_goto1 = 1'b0;",
        "  assign dbrk2_goto0 = 1'b0;",
        "  assign dbrk2_traceme = 1'b0;",
        "  assign dbrk2_traceon = 1'b0;",
        "  assign dbrk2_traceoff = 1'b0;",
        "  assign dbrk2_break_pulse = 1'b0;",
        "  assign dbrk2_trigout = 1'b0;",
        "  assign dbrk2_armed = 1'b0;",
        "  assign dbrk1_goto1 = 1'b0;",
        "  assign dbrk1_goto0 = 1'b0;",
        "  assign dbrk1_traceme = 1'b0;",
        "  assign dbrk1_traceon = 1'b0;",
        "  assign dbrk1_traceoff = 1'b0;",
        "  assign dbrk1_break_pulse = 1'b0;",
        "  assign dbrk1_trigout = 1'b0;",
        "  assign dbrk1_armed = 1'b0;",
        "  assign dbrk0_goto1 = 1'b0;",
        "  assign dbrk0_goto0 = 1'b0;",
        "  assign dbrk0_traceme = 1'b0;",
        "  assign dbrk0_traceon = 1'b0;",
        "  assign dbrk0_traceoff = 1'b0;",
        "  assign dbrk0_break_pulse = 1'b0;",
        "  assign dbrk0_trigout = 1'b0;",
        "  assign dbrk0_armed = 1'b0;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          dbrk_break <= 0;\n      else \n        dbrk_break <= dbrk_break   ? ~debugack   \n                : dbrk_break_pulse;\n\n    end",
        "  assign dbrk_data = cpu_d_write ? cpu_d_writedata : cpu_d_readdata;",
        "  assign cpu_d_wait = d_waitrequest;",
        "  assign cpu_d_write = d_write;",
        "  assign cpu_d_writedata = E_st_data;",
        "  assign cpu_d_read = d_read;",
        "  assign cpu_d_readdata = av_ld_data_aligned_filtered;",
        "  assign cpu_d_address = d_address;",
        "  assign xbrk3_armed = (xbrk_ctrl3[4] & trigger_state_0) ||\n    (xbrk_ctrl3[5] & trigger_state_1);",
        "  assign xbrk2_armed = (xbrk_ctrl2[4] & trigger_state_0) ||\n    (xbrk_ctrl2[5] & trigger_state_1);",
        "  assign xbrk1_armed = (xbrk_ctrl1[4] & trigger_state_0) ||\n    (xbrk_ctrl1[5] & trigger_state_1);",
        "  assign xbrk0_armed = (xbrk_ctrl0[4] & trigger_state_0) ||\n    (xbrk_ctrl0[5] & trigger_state_1);",
        "  assign xbrk_goto1 = 1'b0;",
        "  assign xbrk_goto0 = 1'b0;",
        "  assign xbrk_trigout = 1'b0;",
        "  assign xbrk_traceoff = 1'b0;",
        "  assign xbrk_traceon = 1'b0;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_xbrk_goto1 <= 0;\n      else if (E_cpu_addr_en)\n          E_xbrk_goto1 <= xbrk_goto1_hit;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_xbrk_goto0 <= 0;\n      else if (E_cpu_addr_en)\n          E_xbrk_goto0 <= xbrk_goto0_hit;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_xbrk_trigout <= 0;\n      else if (E_cpu_addr_en)\n          E_xbrk_trigout <= xbrk_tout_hit;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_xbrk_traceoff <= 0;\n      else if (E_cpu_addr_en)\n          E_xbrk_traceoff <= xbrk_toff_hit;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          E_xbrk_traceon <= 0;\n      else if (E_cpu_addr_en)\n          E_xbrk_traceon <= xbrk_ton_hit;\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          xbrk_break <= 0;\n      else if (E_cpu_addr_en)\n          xbrk_break <= xbrk_break_hit;\n    end",
        "  assign xbrk_goto1_hit = (xbrk0_goto1_hit) | (xbrk1_goto1_hit) | (xbrk2_goto1_hit) | (xbrk3_goto1_hit);",
        "  assign xbrk_goto0_hit = (xbrk0_goto0_hit) | (xbrk1_goto0_hit) | (xbrk2_goto0_hit) | (xbrk3_goto0_hit);",
        "  assign xbrk_tout_hit = (xbrk0_tout_hit) | (xbrk1_tout_hit) | (xbrk2_tout_hit) | (xbrk3_tout_hit);",
        "  assign xbrk_toff_hit = (xbrk0_toff_hit) | (xbrk1_toff_hit) | (xbrk2_toff_hit) | (xbrk3_toff_hit);",
        "  assign xbrk_ton_hit = (xbrk0_ton_hit) | (xbrk1_ton_hit) | (xbrk2_ton_hit) | (xbrk3_ton_hit);",
        "  assign xbrk_break_hit = (xbrk0_break_hit) | (xbrk1_break_hit) | (xbrk2_break_hit) | (xbrk3_break_hit);",
        "  assign xbrk3_goto1_hit = 0;",
        "  assign xbrk3_goto0_hit = 0;",
        "  assign xbrk3_tout_hit = 0;",
        "  assign xbrk3_toff_hit = 0;",
        "  assign xbrk3_ton_hit = 0;",
        "  assign xbrk3_break_hit = 0;",
        "  assign xbrk2_goto1_hit = 0;",
        "  assign xbrk2_goto0_hit = 0;",
        "  assign xbrk2_tout_hit = 0;",
        "  assign xbrk2_toff_hit = 0;",
        "  assign xbrk2_ton_hit = 0;",
        "  assign xbrk2_break_hit = 0;",
        "  assign xbrk1_goto1_hit = 0;",
        "  assign xbrk1_goto0_hit = 0;",
        "  assign xbrk1_tout_hit = 0;",
        "  assign xbrk1_toff_hit = 0;",
        "  assign xbrk1_ton_hit = 0;",
        "  assign xbrk1_break_hit = 0;",
        "  assign xbrk0_goto1_hit = 0;",
        "  assign xbrk0_goto0_hit = 0;",
        "  assign xbrk0_tout_hit = 0;",
        "  assign xbrk0_toff_hit = 0;",
        "  assign xbrk0_ton_hit = 0;",
        "  assign xbrk0_break_hit = 0;",
        "  assign E_cpu_addr_en = E_valid;",
        "  assign D_cpu_addr_en = D_valid;",
        "  assign cpu_i_address = {F_pc, 2'b00};",
        "  assign trigger_state_1 = trigger_state;",
        "  assign trigger_state_0 = ~trigger_state;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          trigger_state <= 0;\n      else if (trigger_state_1 & (xbrk_goto0 | dbrk_goto0))\n          trigger_state <= 0;\n      else if (trigger_state_0 & (xbrk_goto1 | dbrk_goto1))\n          trigger_state <= -1;\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n          break_readreg <= 32'b0;\n      else if (take_action_any_break)\n          break_readreg <= jdo[31 : 0];\n      else if (take_no_action_break_a)\n          case (break_a_wpr_high_bits)\n          \n              2'd0: begin\n                  case (break_a_wpr_low_bits) \n                  \n                      2'd0: begin\n                          break_readreg <= xbrk0_value;\n                      end \n                  \n                      2'd1: begin\n                          break_readreg <= xbrk1_value;\n                      end \n                  \n                      2'd2: begin\n                          break_readreg <= xbrk2_value;\n                      end \n                  \n                      2'd3: begin\n                          break_readreg <= xbrk3_value;\n                      end \n                  \n                  endcase \n              end \n          \n              2'd1: begin\n                  break_readreg <= 32'b0;\n              end \n          \n              2'd2: begin\n                  case (break_a_wpr_low_bits) \n                  \n                      2'd0: begin\n                          break_readreg <= dbrk0_low_value;\n                      end \n                  \n                      2'd1: begin\n                          break_readreg <= dbrk1_low_value;\n                      end \n                  \n                      2'd2: begin\n                          break_readreg <= dbrk2_low_value;\n                      end \n                  \n                      2'd3: begin\n                          break_readreg <= dbrk3_low_value;\n                      end \n                  \n                  endcase \n              end \n          \n              2'd3: begin\n                  case (break_a_wpr_low_bits) \n                  \n                      2'd0: begin\n                          break_readreg <= dbrk0_high_value;\n                      end \n                  \n                      2'd1: begin\n                          break_readreg <= dbrk1_high_value;\n                      end \n                  \n                      2'd2: begin\n                          break_readreg <= dbrk2_high_value;\n                      end \n                  \n                      2'd3: begin\n                          break_readreg <= dbrk3_high_value;\n                      end \n                  \n                  endcase \n              end \n          \n          endcase \n      else if (take_no_action_break_b)\n          break_readreg <= jdo[31 : 0];\n      else if (take_no_action_break_c)\n          break_readreg <= jdo[31 : 0];\n    end",
        "  assign xbrk3_value = 32'b0;",
        "  assign xbrk2_value = 32'b0;",
        "  assign xbrk1_value = 32'b0;",
        "  assign xbrk0_value = 32'b0;",
        "  assign dbrk3_high_value = 0;",
        "  assign dbrk3_low_value = 0;",
        "  assign dbrk_hit3_latch = 1'b0;",
        "  assign dbrk2_high_value = 0;",
        "  assign dbrk2_low_value = 0;",
        "  assign dbrk_hit2_latch = 1'b0;",
        "  assign dbrk1_high_value = 0;",
        "  assign dbrk1_low_value = 0;",
        "  assign dbrk_hit1_latch = 1'b0;",
        "  assign dbrk0_high_value = 0;",
        "  assign dbrk0_low_value = 0;",
        "  assign dbrk_hit0_latch = 1'b0;",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          xbrk_ctrl0 <= 0;\n          xbrk_ctrl1 <= 0;\n          xbrk_ctrl2 <= 0;\n          xbrk_ctrl3 <= 0;\n          trigbrktype <= 0;\n        end\n      else \n        begin\n          if (take_action_any_break)\n              trigbrktype <= 0;\n          else if (dbrk_break)\n              trigbrktype <= 1;\n          if (take_action_break_b)\n            begin\n              if ((break_b_rr == 2'b00) && (0 >= 1))\n                begin\n                  xbrk_ctrl0[0] <= jdo[27];\n                  xbrk_ctrl0[1] <= jdo[28];\n                  xbrk_ctrl0[2] <= jdo[29];\n                  xbrk_ctrl0[3] <= jdo[30];\n                  xbrk_ctrl0[4] <= jdo[21];\n                  xbrk_ctrl0[5] <= jdo[20];\n                  xbrk_ctrl0[6] <= jdo[19];\n                  xbrk_ctrl0[7] <= jdo[18];\n                end\n              if ((break_b_rr == 2'b01) && (0 >= 2))\n                begin\n                  xbrk_ctrl1[0] <= jdo[27];\n                  xbrk_ctrl1[1] <= jdo[28];\n                  xbrk_ctrl1[2] <= jdo[29];\n                  xbrk_ctrl1[3] <= jdo[30];\n                  xbrk_ctrl1[4] <= jdo[21];\n                  xbrk_ctrl1[5] <= jdo[20];\n                  xbrk_ctrl1[6] <= jdo[19];\n                  xbrk_ctrl1[7] <= jdo[18];\n                end\n              if ((break_b_rr == 2'b10) && (0 >= 3))\n                begin\n                  xbrk_ctrl2[0] <= jdo[27];\n                  xbrk_ctrl2[1] <= jdo[28];\n                  xbrk_ctrl2[2] <= jdo[29];\n                  xbrk_ctrl2[3] <= jdo[30];\n                  xbrk_ctrl2[4] <= jdo[21];\n                  xbrk_ctrl2[5] <= jdo[20];\n                  xbrk_ctrl2[6] <= jdo[19];\n                  xbrk_ctrl2[7] <= jdo[18];\n                end\n              if ((break_b_rr == 2'b11) && (0 >= 4))\n                begin\n                  xbrk_ctrl3[0] <= jdo[27];\n                  xbrk_ctrl3[1] <= jdo[28];\n                  xbrk_ctrl3[2] <= jdo[29];\n                  xbrk_ctrl3[3] <= jdo[30];\n                  xbrk_ctrl3[4] <= jdo[21];\n                  xbrk_ctrl3[5] <= jdo[20];\n                  xbrk_ctrl3[6] <= jdo[19];\n                  xbrk_ctrl3[7] <= jdo[18];\n                end\n            end\n        end\n    end",
        "  assign break_a_wpr = jdo[35 : 32];\n  assign break_a_wpr_high_bits = break_a_wpr[3 : 2];\n  assign break_a_wpr_low_bits = break_a_wpr[1 : 0];\n  assign break_b_rr = jdo[33 : 32];\n  assign break_c_rr = jdo[33 : 32];\n  assign take_action_any_break = take_action_break_a | take_action_break_b | take_action_break_c;",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          oci_ienable <= 32'b00000000000000000000000000111111;\n      else if (take_action_oci_intr_mask_reg)\n          oci_ienable <= writedata | ~(32'b00000000000000000000000000111111);\n    end",
        "  always @(posedge clk or negedge reset_n)\n    begin\n      if (reset_n == 0)\n          oci_single_step_mode <= 1'b0;\n      else if (take_action_ocireg)\n          oci_single_step_mode <= ocireg_sstep;\n    end",
        "  assign ocireg_sstep = writedata[3];",
        "  assign ocireg_mrs = writedata[0];",
        "  assign ocireg_ers = writedata[1];",
        "  assign take_action_oci_intr_mask_reg = write_strobe & oci_reg_01_addressed;",
        "  assign take_action_ocireg = write_strobe & oci_reg_00_addressed;",
        "  assign write_strobe = write & debugaccess;",
        "  assign oci_reg_01_addressed = address == 9'h101;",
        "  assign oci_reg_00_addressed = address == 9'h100;",
        "  assign cfgrom_readdata = (MonAReg[4 : 2] == 3'd0)? 32'h04020020 :\n    (MonAReg[4 : 2] == 3'd1)? 32'h00001b1b :\n    (MonAReg[4 : 2] == 3'd2)? 32'h00040000 :\n    (MonAReg[4 : 2] == 3'd3)? 32'h00000100 :\n    (MonAReg[4 : 2] == 3'd4)? 32'h20000000 :\n    (MonAReg[4 : 2] == 3'd5)? 32'h04020000 :\n    (MonAReg[4 : 2] == 3'd6)? 32'h00000000 :\n    32'h00000000;",
        "  assign ociram_reset_req = reset_req & ~jtag_ram_access;",
        "  assign ociram_wr_en = jtag_ram_access ? jtag_ram_wr : avalon_ram_wr;",
        "  assign ociram_byteenable = jtag_ram_access ? 4'b1111 : byteenable;",
        "  assign ociram_wr_data = jtag_ram_access ? MonDReg[31 : 0] : writedata;",
        "  assign ociram_addr = jtag_ram_access ? MonAReg[9 : 2] : address[7 : 0];",
        "  assign avalon_ram_wr = write & ~address[8] & debugaccess;",
        "  assign MonARegAddrIncAccessingRAM = ~MonARegAddrInc[8];",
        "  assign MonARegAddrInc = MonAReg[10 : 2]+1;",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          jtag_rd <= 1'b0;\n          jtag_rd_d1 <= 1'b0;\n          jtag_ram_wr <= 1'b0;\n          jtag_ram_rd <= 1'b0;\n          jtag_ram_rd_d1 <= 1'b0;\n          jtag_ram_access <= 1'b0;\n          MonAReg <= 0;\n          MonDReg <= 0;\n          waitrequest <= 1'b1;\n          avalon_ociram_readdata_ready <= 1'b0;\n        end\n      else \n        begin\n          if (take_no_action_ocimem_a)\n            begin\n              MonAReg[10 : 2] <= MonARegAddrInc;\n              jtag_rd <= 1'b1;\n              jtag_ram_rd <= MonARegAddrIncAccessingRAM;\n              jtag_ram_access <= MonARegAddrIncAccessingRAM;\n            end\n          else if (take_action_ocimem_a)\n            begin\n              MonAReg[10 : 2] <= { jdo[17],\n                            jdo[33 : 26] };\n\n              jtag_rd <= 1'b1;\n              jtag_ram_rd <= ~jdo[17];\n              jtag_ram_access <= ~jdo[17];\n            end\n          else if (take_action_ocimem_b)\n            begin\n              MonAReg[10 : 2] <= MonARegAddrInc;\n              MonDReg <= jdo[34 : 3];\n              jtag_ram_wr <= MonARegAddrIncAccessingRAM;\n              jtag_ram_access <= MonARegAddrIncAccessingRAM;\n            end\n          else \n            begin\n              jtag_rd <= 0;\n              jtag_ram_wr <= 0;\n              jtag_ram_rd <= 0;\n              jtag_ram_access <= 0;\n              if (jtag_rd_d1)\n                  MonDReg <= jtag_ram_rd_d1 ? ociram_readdata : cfgrom_readdata;\n            end\n          jtag_rd_d1 <= jtag_rd;\n          jtag_ram_rd_d1 <= jtag_ram_rd;\n          if (~waitrequest)\n            begin\n              waitrequest <= 1'b1;\n              avalon_ociram_readdata_ready <= 1'b0;\n            end\n          else if (write)\n              waitrequest <= ~address[8] & jtag_ram_access;\n          else if (read)\n            begin\n              avalon_ociram_readdata_ready <= ~(~address[8] & jtag_ram_access);\n              waitrequest <= ~avalon_ociram_readdata_ready;\n            end\n          else \n            begin\n              waitrequest <= 1'b1;\n              avalon_ociram_readdata_ready <= 1'b0;\n            end\n        end\n    end",
        "  assign debugack = ~hbreak_enabled;",
        "  assign oci_hbreak_req = jtag_break | dbrk_break | xbrk_break | debugreq;",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          monitor_ready <= 1'b0;\n          monitor_error <= 1'b0;\n          monitor_go <= 1'b0;\n        end\n      else \n        begin\n          if (take_action_ocimem_a && jdo[25])\n              monitor_ready <= 1'b0;\n          else if (take_action_ocireg && ocireg_mrs)\n              monitor_ready <= 1'b1;\n          if (take_action_ocimem_a && jdo[25])\n              monitor_error <= 1'b0;\n          else if (take_action_ocireg && ocireg_ers)\n              monitor_error <= 1'b1;\n          if (take_action_ocimem_a && jdo[23])\n              monitor_go <= 1'b1;\n          else if (st_ready_test_idle)\n              monitor_go <= 1'b0;\n        end\n    end",
        "  always @(posedge clk or negedge jrst_n)\n    begin\n      if (jrst_n == 0)\n        begin\n          break_on_reset <= 1'b0;\n          resetrequest <= 1'b0;\n          jtag_break <= 1'b0;\n        end\n      else if (take_action_ocimem_a)\n        begin\n          resetrequest <= jdo[22];\n          jtag_break <= jdo[21]     ? 1 \n                    : jdo[20]  ? 0 \n                    : jtag_break;\n\n          break_on_reset <= jdo[19]     ? 1\n                    : jdo[18]  ? 0\n                    :  break_on_reset;\n\n          resetlatch <= jdo[24] ? 0 : resetlatch;\n        end\n      else if (reset_sync)\n        begin\n          jtag_break <= break_on_reset;\n          resetlatch <= 1;\n        end\n      else if (debugreq & ~debugack & break_on_reset)\n          jtag_break <= 1'b1;\n    end"
    ]
}