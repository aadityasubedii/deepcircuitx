{
    "line_num": [
        [
            340,
            349
        ],
        [
            336,
            336
        ],
        [
            330,
            334
        ],
        [
            320,
            327
        ],
        [
            318,
            320
        ],
        [
            316,
            316
        ],
        [
            294,
            306
        ],
        [
            276,
            292
        ],
        [
            211,
            274
        ],
        [
            206,
            206
        ],
        [
            204,
            204
        ],
        [
            177,
            208
        ],
        [
            163,
            163
        ],
        [
            159,
            159
        ],
        [
            151,
            160
        ]
    ],
    "blocks": [
        "  generate\n    if (REF_CLK_MMCM_IODELAY_CTRL == \"TRUE\") begin: idelayctrl_gen_1\n      (* IODELAY_GROUP = IODELAY_GRP1 *) IDELAYCTRL u_idelayctrl_300_400\n        (\n         .RDY    (iodelay_ctrl_rdy[1]),\n         .REFCLK (clk_ref[1]),\n         .RST    (rst_ref[1])\n         );\n    end\n  endgenerate",
        "  assign rst_ref[0]  = rst_ref_sync_r[0][RST_SYNC_NUM-1];",
        "  always @(posedge clk_ref[0] or posedge rst_tmp_idelay)\n    if (rst_tmp_idelay)\n      rst_ref_sync_r[0] <= #TCQ {RST_SYNC_NUM{1'b1}};\n    else\n      rst_ref_sync_r[0] <= #TCQ rst_ref_sync_r[0] << 1;",
        "      always @(posedge clk_ref[1] or posedge rst_tmp_idelay)\n        if (rst_tmp_idelay)\n          rst_ref_sync_r[1] <= #TCQ {RST_SYNC_NUM{1'b1}};\n        else\n          rst_ref_sync_r[1] <= #TCQ rst_ref_sync_r[1] << 1;\n \n      assign rst_ref[1]  = rst_ref_sync_r[1][RST_SYNC_NUM-1];\n    end",
        "  generate\n    if (REF_CLK_MMCM_IODELAY_CTRL == \"TRUE\") begin: rst_ref_gen_1\n      always @(posedge clk_ref[1] or posedge rst_tmp_idelay)",
        "  assign rst_tmp_idelay = sys_rst_act_hi;",
        "  generate\n    if ((REFCLK_TYPE == \"DIFFERENTIAL\") || \n        (REFCLK_TYPE == \"SINGLE_ENDED\") ||\n        (REFCLK_TYPE == \"USE_SYSTEM_CLOCK\" && SYSCLK_TYPE != \"NO_BUFFER\")) begin: clk_ref_200\n      BUFG u_bufg_clk_ref\n       (\n        .O (clk_ref[0]),\n        .I (clk_ref_ibufg)\n        );\n    end else begin: clk_ref_200_no_buffer\n      assign clk_ref[0] = clk_ref_i;\n    end\n  endgenerate",
        "  generate\n    if (REF_CLK_MMCM_IODELAY_CTRL == \"TRUE\") begin : clk_ref_300_400_en\n      if(FPGA_SPEED_GRADE == 1) begin: clk_ref_300\n        BUFG u_bufg_clk_ref_300\n          (\n           .O (clk_ref[1]),\n           .I (clk_ref_mmcm_300)\n           );\n      end else if (FPGA_SPEED_GRADE == 2 || FPGA_SPEED_GRADE == 3) begin: clk_ref_400\n        BUFG u_bufg_clk_ref_400\n          (\n           .O (clk_ref[1]),\n           .I (clk_ref_mmcm_400)\n           );\n      end\n    end\n  endgenerate",
        "  generate\n    if (REF_CLK_MMCM_IODELAY_CTRL == \"TRUE\") begin: clk_ref_mmcm_gen\n\n      MMCME2_ADV\n      #(.BANDWIDTH            (\"HIGH\"),\n        .CLKOUT4_CASCADE      (\"FALSE\"),\n        .COMPENSATION         (\"INTERNAL\"),\n        .STARTUP_WAIT         (\"FALSE\"),\n        .DIVCLK_DIVIDE        (1),\n        .CLKFBOUT_MULT_F      (6),\n        .CLKFBOUT_PHASE       (0.000),\n        .CLKFBOUT_USE_FINE_PS (\"FALSE\"),\n        .CLKOUT0_DIVIDE_F     (4),\n        .CLKOUT0_PHASE        (0.000),\n        .CLKOUT0_DUTY_CYCLE   (0.500),\n        .CLKOUT0_USE_FINE_PS  (\"FALSE\"),\n        .CLKOUT1_DIVIDE       (3),\n        .CLKOUT1_PHASE        (0.000),\n        .CLKOUT1_DUTY_CYCLE   (0.500),\n        .CLKOUT1_USE_FINE_PS  (\"FALSE\"),\n        .CLKIN1_PERIOD        (5),\n        .REF_JITTER1          (0.000))\n      mmcm_i\n        \n       (.CLKFBOUT            (mmcm_clkfbout),\n        .CLKFBOUTB           (),\n        .CLKOUT0             (clk_ref_mmcm_300),\n        .CLKOUT0B            (),\n        .CLKOUT1             (clk_ref_mmcm_400),\n        .CLKOUT1B            (),\n        .CLKOUT2             (),\n        .CLKOUT2B            (),\n        .CLKOUT3             (),\n        .CLKOUT3B            (),\n        .CLKOUT4             (),\n        .CLKOUT5             (),\n        .CLKOUT6             (),\n         \n        .CLKFBIN             (mmcm_clkfbout),\n        .CLKIN1              (clk_ref_ibufg),\n        .CLKIN2              (1'b0),\n         \n        .CLKINSEL            (1'b1),\n        \n        .DADDR               (7'h0),\n        .DCLK                (1'b0),\n        .DEN                 (1'b0),\n        .DI                  (16'h0),\n        .DO                  (),\n        .DRDY                (),\n        .DWE                 (1'b0),\n        \n        .PSCLK               (1'b0),\n        .PSEN                (1'b0),\n        .PSINCDEC            (1'b0),\n        .PSDONE              (),\n        \n        .LOCKED              (mmcm_Locked),\n        .CLKINSTOPPED        (),\n        .CLKFBSTOPPED        (),\n        .PWRDWN              (1'b0),\n        .RST                 (sys_rst_act_hi));\n    end\n  endgenerate",
        "      assign clk_ref_ibufg = clk_ref_i;",
        "      assign clk_ref_ibufg = clk_ref_i;",
        "  generate\n    if (REFCLK_TYPE == \"DIFFERENTIAL\") begin: diff_clk_ref\n      IBUFGDS #\n        (\n         .DIFF_TERM    (DIFF_TERM_REFCLK),\n         .IBUF_LOW_PWR (\"FALSE\")\n         )\n        u_ibufg_clk_ref\n          (\n           .I  (clk_ref_p),\n           .IB (clk_ref_n),\n           .O  (clk_ref_ibufg)\n           );\n\n    end else if (REFCLK_TYPE == \"SINGLE_ENDED\") begin : se_clk_ref\n      IBUFG #\n        (\n         .IBUF_LOW_PWR (\"FALSE\")\n         )\n        u_ibufg_clk_ref\n          (\n           .I (clk_ref_i),\n           .O (clk_ref_ibufg)\n           );\n\n    end else if ((REFCLK_TYPE == \"NO_BUFFER\") ||\n                 (REFCLK_TYPE == \"USE_SYSTEM_CLOCK\" && SYSCLK_TYPE == \"NO_BUFFER\")) begin : clk_ref_noibuf_nobuf\n      assign clk_ref_ibufg = clk_ref_i;\n    end else if (REFCLK_TYPE == \"USE_SYSTEM_CLOCK\" && SYSCLK_TYPE != \"NO_BUFFER\") begin : clk_ref_noibuf\n      assign clk_ref_ibufg = clk_ref_i;\n    end\n  endgenerate",
        "  assign  sys_rst_act_hi = RST_ACT_LOW ? ~sys_rst_i: sys_rst_i;",
        "      assign sys_rst_i = sys_rst;",
        "  generate\n    if (SYS_RST_PORT == \"TRUE\")\n      IBUF u_sys_rst_ibuf\n        (\n         .I (sys_rst),\n         .O (sys_rst_i)\n         );\n    else\n      assign sys_rst_i = sys_rst;\n  endgenerate"
    ]
}