{
    "line_num": [
        [
            572,
            576
        ],
        [
            559,
            569
        ],
        [
            540,
            553
        ],
        [
            536,
            538
        ],
        [
            533,
            535
        ],
        [
            529,
            529
        ],
        [
            528,
            528
        ],
        [
            525,
            525
        ],
        [
            524,
            524
        ],
        [
            512,
            521
        ],
        [
            494,
            508
        ],
        [
            220,
            490
        ],
        [
            190,
            192
        ],
        [
            170,
            188
        ],
        [
            153,
            168
        ],
        [
            144,
            146
        ],
        [
            124,
            130
        ]
    ],
    "blocks": [
        "  assign prbs_o = {dout_fall3, dout_rise3, dout_fall2, dout_rise2, dout_fall1, dout_rise1, dout_fall0, dout_rise0};\n  \n  assign dbg_prbs_gen[9] = phy_if_empty_r;\n  assign dbg_prbs_gen[8] = clk_en_i;\n  assign dbg_prbs_gen[7:0] = rd_addr[7:0];",
        "always @(*)\n  for (i = 0; i < DQ_WIDTH; i = i+1) begin\n    dout_rise0[i] = (dout_o[7]&&sel[i] || dout_o[15]&&~sel[i]);\n    dout_fall0[i] = (dout_o[6]&&sel[i] || dout_o[14]&&~sel[i]);\n    dout_rise1[i] = (dout_o[5]&&sel[i] || dout_o[13]&&~sel[i]);\n    dout_fall1[i] = (dout_o[4]&&sel[i] || dout_o[12]&&~sel[i]);\n    dout_rise2[i] = (dout_o[3]&&sel[i] || dout_o[11]&&~sel[i]);\n    dout_fall2[i] = (dout_o[2]&&sel[i] || dout_o[10]&&~sel[i]);\n    dout_rise3[i] = (dout_o[1]&&sel[i] || dout_o[9]&&~sel[i]);\n    dout_fall3[i] = (dout_o[0]&&sel[i] || dout_o[8]&&~sel[i]);\n  end",
        "    always @(posedge clk_i)\n      if (rst_i)\n        sel   <= #TCQ 'd0;\n      else begin  \n\t    for (i = 0; i < DQ_WIDTH/8; i = i+1) begin\n\t      for (j=0; j <8 ; j = j+1) begin\n\t        if (j == victim_sel)\n\t\t      sel[i*8+j] <= #TCQ 1'b1;\n\t\t    else \n\t\t      sel[i*8+j] <= #TCQ 1'b0;\n\t\t    end   \t\n\t     end\n      end\n  end",
        "    always @(posedge clk_i)\n      sel   <= #TCQ {DQ_WIDTH/8{8'h08}};\n  end else begin: victim_sel_rotate",
        "generate\n  if (FIXED_VICTIM == \"TRUE\") begin: victim_sel_fixed\n    ",
        "assign prbs_ignore_last_bytes = prbs_ignore_last_bytes_r;",
        "always @(posedge clk_i) prbs_ignore_last_bytes_r <= #TCQ mem_out[17];",
        "assign prbs_ignore_first_byte = prbs_ignore_first_byte_r;",
        "always @(posedge clk_i) prbs_ignore_first_byte_r <= #TCQ mem_out[16];",
        "always @ (posedge clk_i) begin\n  if ((rd_addr < 42) && VCCO_PAT_EN)\n    dout_o <= #TCQ mem_out[BRAM_DATA_WIDTH-3:0];\n  else if ((rd_addr < 127) && VCCAUX_PAT_EN)\n    dout_o <= #TCQ mem_out[BRAM_DATA_WIDTH-3:0];\n  else if (ISI_PAT_EN && (rd_addr > 126))\n    dout_o <= #TCQ mem_out[BRAM_DATA_WIDTH-3:0];\n  else\n    dout_o <= #TCQ 'd0;\nend",
        "always @ (posedge clk_i) begin\n  if (rst_i | reset_rd_addr)\n    rd_addr <= #TCQ 'b0;\n  \n  else if (clk_en_i && prbs_rdlvl_done && (~phy_if_empty_r || ~complex_wr_done)) begin\n    if (rd_addr == 'd156) rd_addr <= #TCQ 'b0;\n    else rd_addr <= #TCQ rd_addr + 1;\n  end\n  \n  else  if (clk_en_i && (~phy_if_empty_r || (~prbs_rdlvl_start && ~complex_wr_done))) begin\n    if (rd_addr == 'd148) rd_addr <= #TCQ 'b0;\n    else rd_addr <= #TCQ rd_addr+1;    \n  end\n\nend",
        "always @ (rd_addr) begin\n  case (rd_addr)\n    8'd0    :   mem_out = {2'b11, 8'b10101010,8'b10101010}; \n    8'd1    :   mem_out = {2'b01, 8'b11001100,8'b11001100}; \n    8'd2    :   mem_out = {2'b10, 8'b11001100,8'b11001100}; \n    8'd3    :   mem_out = {2'b01, 8'b11100011,8'b11100011}; \n    8'd4    :   mem_out = {2'b00, 8'b10001110,8'b10001110}; \n    8'd5    :   mem_out = {2'b10, 8'b00111000,8'b00111000}; \n    8'd6    :   mem_out = {2'b01, 8'b11110000,8'b11110000}; \n    8'd7    :   mem_out = {2'b00, 8'b11110000,8'b11110000}; \n    8'd8    :   mem_out = {2'b00, 8'b11110000,8'b11110000}; \n    8'd9    :   mem_out = {2'b10, 8'b11110000,8'b11110000}; \n    8'd10   :   mem_out = {2'b01, 8'b11111000,8'b11111000}; \n    8'd11   :   mem_out = {2'b00, 8'b00111110,8'b00111110}; \n    8'd12   :   mem_out = {2'b00, 8'b00001111,8'b00001111}; \n    8'd13   :   mem_out = {2'b00, 8'b10000011,8'b10000011}; \n    8'd14   :   mem_out = {2'b10, 8'b11100000,8'b11100000}; \n    8'd15   :   mem_out = {2'b01, 8'b11111100,8'b11111100}; \n    8'd16   :   mem_out = {2'b00, 8'b00001111,8'b00001111}; \n    8'd17   :   mem_out = {2'b00, 8'b11000000,8'b11000000}; \n    8'd18   :   mem_out = {2'b00, 8'b11111100,8'b11111100}; \n    8'd19   :   mem_out = {2'b00, 8'b00001111,8'b00001111}; \n    8'd20   :   mem_out = {2'b10, 8'b11000000,8'b11000000}; \n     \n     \n     \n    8'd21   :   mem_out = {2'b11, 8'b10101010,8'b01010101}; \n    8'd22   :   mem_out = {2'b01, 8'b11001100,8'b00110011}; \n    8'd23   :   mem_out = {2'b10, 8'b11001100,8'b00110011}; \n    8'd24   :   mem_out = {2'b01, 8'b11100011,8'b00011100}; \n    8'd25   :   mem_out = {2'b00, 8'b10001110,8'b01110001}; \n    8'd26   :   mem_out = {2'b10, 8'b00111000,8'b11000111}; \n    8'd27   :   mem_out = {2'b01, 8'b11110000,8'b00001111}; \n    8'd28   :   mem_out = {2'b00, 8'b11110000,8'b00001111}; \n    8'd29   :   mem_out = {2'b00, 8'b11110000,8'b00001111}; \n    8'd30   :   mem_out = {2'b10, 8'b11110000,8'b00001111}; \n    8'd31   :   mem_out = {2'b01, 8'b11111000,8'b00000111}; \n    8'd32   :   mem_out = {2'b00, 8'b00111110,8'b11000001}; \n    8'd33   :   mem_out = {2'b00, 8'b00001111,8'b11110000}; \n    8'd34   :   mem_out = {2'b00, 8'b10000011,8'b01111100}; \n    8'd35   :   mem_out = {2'b10, 8'b11100000,8'b00011111}; \n    8'd36   :   mem_out = {2'b01, 8'b11111100,8'b00000011}; \n    8'd37   :   mem_out = {2'b00, 8'b00001111,8'b11110000}; \n    8'd38   :   mem_out = {2'b00, 8'b11000000,8'b00111111}; \n    8'd39   :   mem_out = {2'b00, 8'b11111100,8'b00000011}; \n    8'd40   :   mem_out = {2'b00, 8'b00001111,8'b11110000}; \n    8'd41   :   mem_out = {2'b10, 8'b11000000,8'b00111111}; \n    \n    \n    \n    8'd42   :   mem_out = {2'b01, 8'b10110100,8'b01010111}; \n    8'd43   :   mem_out = {2'b00, 8'b10110100,8'b01101111}; \n    8'd44   :   mem_out = {2'b10, 8'b10110100,8'b11000000}; \n    8'd45   :   mem_out = {2'b01, 8'b10100010,8'b10000100}; \n    8'd46   :   mem_out = {2'b00, 8'b10001010,8'b00110001}; \n    8'd47   :   mem_out = {2'b00, 8'b00101000,8'b01000111}; \n    8'd48   :   mem_out = {2'b10, 8'b10100010,8'b00100101}; \n    8'd49   :   mem_out = {2'b01, 8'b10101111,8'b10011010}; \n    8'd50   :   mem_out = {2'b00, 8'b01010000,8'b01111010}; \n    8'd51   :   mem_out = {2'b00, 8'b10101111,8'b10010101}; \n    8'd52   :   mem_out = {2'b00, 8'b01010000,8'b11011011}; \n    8'd53   :   mem_out = {2'b10, 8'b10101111,8'b11110000}; \n    8'd54   :   mem_out = {2'b01, 8'b10101000,8'b00100001}; \n    8'd55   :   mem_out = {2'b00, 8'b00101010,8'b10001010}; \n    8'd56   :   mem_out = {2'b00, 8'b00001010,8'b00100101}; \n    8'd57   :   mem_out = {2'b00, 8'b10000010,8'b10011010}; \n    8'd58   :   mem_out = {2'b00, 8'b10100000,8'b01111010}; \n    8'd59   :   mem_out = {2'b00, 8'b10101000,8'b10111111}; \n    8'd60   :   mem_out = {2'b10, 8'b00101010,8'b01010111}; \n    8'd61   :   mem_out = {2'b01, 8'b10101011,8'b01101111}; \n    8'd62   :   mem_out = {2'b00, 8'b11110101,8'b11000000}; \n    8'd63   :   mem_out = {2'b00, 8'b01000000,8'b10000100}; \n    8'd64   :   mem_out = {2'b00, 8'b10101011,8'b00110001}; \n    8'd65   :   mem_out = {2'b00, 8'b11110101,8'b01000111}; \n    8'd66   :   mem_out = {2'b00, 8'b01000000,8'b00100101}; \n    8'd67   :   mem_out = {2'b00, 8'b10101011,8'b10011010}; \n    8'd68   :   mem_out = {2'b10, 8'b11110101,8'b01111010}; \n    8'd69   :   mem_out = {2'b01, 8'b10101010,8'b10010101}; \n    8'd70   :   mem_out = {2'b00, 8'b00000010,8'b11011011}; \n    8'd71   :   mem_out = {2'b00, 8'b10101000,8'b11110000}; \n    8'd72   :   mem_out = {2'b00, 8'b00001010,8'b00100001}; \n    8'd73   :   mem_out = {2'b00, 8'b10100000,8'b10001010}; \n    8'd74   :   mem_out = {2'b00, 8'b00101010,8'b00100101}; \n    8'd75   :   mem_out = {2'b00, 8'b10000000,8'b10011010}; \n    8'd76   :   mem_out = {2'b00, 8'b10101010,8'b01111010}; \n    8'd77   :   mem_out = {2'b10, 8'b00000010,8'b10111111}; \n    8'd78   :   mem_out = {2'b01, 8'b10101010,8'b01010111}; \n    8'd79   :   mem_out = {2'b00, 8'b11111111,8'b01101111}; \n    8'd80   :   mem_out = {2'b00, 8'b01010101,8'b11000000}; \n    8'd81   :   mem_out = {2'b00, 8'b00000000,8'b10000100}; \n    8'd82   :   mem_out = {2'b00, 8'b10101010,8'b00110001}; \n    8'd83   :   mem_out = {2'b00, 8'b11111111,8'b01000111}; \n    8'd84   :   mem_out = {2'b00, 8'b01010101,8'b00100101}; \n    8'd85   :   mem_out = {2'b00, 8'b00000000,8'b10011010}; \n    8'd86   :   mem_out = {2'b00, 8'b10101010,8'b01111010}; \n    8'd87   :   mem_out = {2'b10, 8'b11111111,8'b10010101}; \n    8'd88   :   mem_out = {2'b01, 8'b10101010,8'b11011011}; \n    8'd89   :   mem_out = {2'b00, 8'b10000000,8'b11110000}; \n    8'd90   :   mem_out = {2'b00, 8'b00101010,8'b00100001}; \n    8'd91   :   mem_out = {2'b00, 8'b10100000,8'b10001010}; \n    8'd92   :   mem_out = {2'b00, 8'b00001010,8'b00100101}; \n    8'd93   :   mem_out = {2'b00, 8'b10101000,8'b10011010}; \n    8'd94   :   mem_out = {2'b00, 8'b00000010,8'b01111010}; \n    8'd95   :   mem_out = {2'b00, 8'b10101010,8'b10111111}; \n    8'd96   :   mem_out = {2'b00, 8'b00000000,8'b01010111}; \n    8'd97   :   mem_out = {2'b00, 8'b10101010,8'b01101111}; \n    8'd98   :   mem_out = {2'b00, 8'b10000000,8'b11000000}; \n    8'd99   :   mem_out = {2'b10, 8'b00101010,8'b10000100}; \n    8'd100  :   mem_out = {2'b01, 8'b10101010,8'b00110001}; \n    8'd101  :   mem_out = {2'b00, 8'b10111111,8'b01000111}; \n    8'd102  :   mem_out = {2'b00, 8'b11110101,8'b00100101}; \n    8'd103  :   mem_out = {2'b00, 8'b01010100,8'b10011010}; \n    8'd104  :   mem_out = {2'b00, 8'b00000000,8'b01111010}; \n    8'd105  :   mem_out = {2'b00, 8'b10101010,8'b10010101}; \n    8'd106  :   mem_out = {2'b00, 8'b10111111,8'b11011011}; \n    8'd107  :   mem_out = {2'b00, 8'b11110101,8'b11110000}; \n    8'd108  :   mem_out = {2'b00, 8'b01010100,8'b00100001}; \n    8'd109  :   mem_out = {2'b00, 8'b00000000,8'b10001010}; \n    8'd110  :   mem_out = {2'b00, 8'b10101010,8'b00100101}; \n    8'd111  :   mem_out = {2'b00, 8'b10111111,8'b10011010}; \n    8'd112  :   mem_out = {2'b10, 8'b11110101,8'b01111010}; \n    8'd113  :   mem_out = {2'b01, 8'b10101010,8'b10111111}; \n    8'd114  :   mem_out = {2'b00, 8'b10100000,8'b01010111}; \n    8'd115  :   mem_out = {2'b00, 8'b00000010,8'b01101111}; \n    8'd116  :   mem_out = {2'b00, 8'b10101010,8'b11000000}; \n    8'd117  :   mem_out = {2'b00, 8'b10000000,8'b10000100}; \n    8'd118  :   mem_out = {2'b00, 8'b00001010,8'b00110001}; \n    8'd119  :   mem_out = {2'b00, 8'b10101010,8'b01000111}; \n    8'd120  :   mem_out = {2'b00, 8'b00000000,8'b00100101}; \n    8'd121  :   mem_out = {2'b00, 8'b00101010,8'b10011010}; \n    8'd122  :   mem_out = {2'b00, 8'b10101000,8'b01111010}; \n    8'd123  :   mem_out = {2'b00, 8'b00000000,8'b10010101}; \n    8'd124  :   mem_out = {2'b00, 8'b10101010,8'b11011011}; \n    8'd125  :   mem_out = {2'b00, 8'b10100000,8'b11110000}; \n    8'd126  :   mem_out = {2'b10, 8'b00000010,8'b00100001}; \n    \n    \n    \n    8'd127  :   mem_out = {2'b01, 8'b01010111,8'b01010111};\n    8'd128  :   mem_out = {2'b00, 8'b01101111,8'b01101111};\n    8'd129  :   mem_out = {2'b00, 8'b11000000,8'b11000000};\n    8'd130  :   mem_out = {2'b00, 8'b10000110,8'b10000100};\n    8'd131  :   mem_out = {2'b00, 8'b00101000,8'b00110001};\n    8'd132  :   mem_out = {2'b00, 8'b11100100,8'b01000111};\n    8'd133  :   mem_out = {2'b00, 8'b10110011,8'b00100101};\n    8'd134  :   mem_out = {2'b00, 8'b01001111,8'b10011011};\n    8'd135  :   mem_out = {2'b00, 8'b10110101,8'b01010101};\n    8'd136  :   mem_out = {2'b00, 8'b10110101,8'b01010101};\n    8'd137  :   mem_out = {2'b00, 8'b10000111,8'b10011000};\n    8'd138  :   mem_out = {2'b00, 8'b11100011,8'b00011100};\n    8'd139  :   mem_out = {2'b00, 8'b00001010,8'b11110101};\n    8'd140  :   mem_out = {2'b00, 8'b11010100,8'b00101011};\n    8'd141  :   mem_out = {2'b00, 8'b01001000,8'b10110111};\n    8'd142  :   mem_out = {2'b00, 8'b00011111,8'b11100000};\n    8'd143  :   mem_out = {2'b00, 8'b10111100,8'b01000011};\n    8'd144  :   mem_out = {2'b00, 8'b10001111,8'b00010100};\n    8'd145  :   mem_out = {2'b00, 8'b10110100,8'b01001011};\n    8'd146  :   mem_out = {2'b00, 8'b11001011,8'b00110100};\n    8'd147  :   mem_out = {2'b00, 8'b00001010,8'b11110101};\n    8'd148  :   mem_out = {2'b00, 8'b10000000,8'b00000000};\n    \n    8'd149  :   mem_out = {2'b00, 8'b00000000,8'b00000000};\n    8'd150  :   mem_out = {2'b00, 8'b01010101,8'b01010101};\n    8'd151  :   mem_out = {2'b00, 8'b01010101,8'b01010101};\n    8'd152  :   mem_out = {2'b00, 8'b00000000,8'b00000000};\n    8'd153  :   mem_out = {2'b00, 8'b00000000,8'b00000000};\n    8'd154  :   mem_out = {2'b00, 8'b01010101,8'b00101010};\n    8'd155  :   mem_out = {2'b00, 8'b01010101,8'b10101010};\n    8'd156  :   mem_out = {2'b10, 8'b00000000,8'b10000000};\n    \n    8'd157  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd158  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd159  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd160  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd161  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd162  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd163  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd164  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd165  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd166  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd167  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd168  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd169  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd170  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd171  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd172  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd173  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd174  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd175  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd176  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd177  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd178  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd179  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd180  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd181  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd182  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd183  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd184  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd185  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd186  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd187  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd188  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd189  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd190  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd191  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd192  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd193  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd194  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd195  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd196  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd197  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd198  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd199  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd200  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd201  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd202  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd203  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd204  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd205  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd206  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd207  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd208  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd209  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd210  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd211  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd212  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd213  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd214  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd215  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd216  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd217  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd218  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd219  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd220  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd221  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd222  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd223  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd224  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd225  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd226  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd227  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd228  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd229  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd230  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd231  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd232  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd233  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd234  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd235  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd236  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd237  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd238  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd239  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd240  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd241  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd242  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd243  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd244  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd245  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd246  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd247  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd248  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd249  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd250  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd251  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd252  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd253  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd254  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n    8'd255  :   mem_out = {2'b00, 8'b00000001,8'b00000001};\n  endcase\nend",
        "  always @ (lfsr_q[PRBS_WIDTH:1]) begin\n    prbs = lfsr_q[PRBS_WIDTH:1];\n  end",
        "  always @ (posedge clk_i)\n  begin\n\n    if ((reseed_prbs_r && clk_en_i) || rst_i || ~clk_en_i) begin\n      lfsr_q[4:1]          <= #TCQ prbs_seed_i[3:0] | 4'h5;\n      lfsr_q[PRBS_WIDTH:5] <= #TCQ prbs_seed_i[PRBS_WIDTH-1:4];\n    end\n    else if (clk_en_i && (~phy_if_empty_r || ~prbs_rdlvl_start)) begin\n      lfsr_q[PRBS_WIDTH:31] <= #TCQ lfsr_q[PRBS_WIDTH-1:30];\n      lfsr_q[30]            <= #TCQ lfsr_q[16] ^ lfsr_q[13] ^ lfsr_q[5]  ^ lfsr_q[1];\n      lfsr_q[29:9]          <= #TCQ lfsr_q[28:8];\n      lfsr_q[8]             <= #TCQ lfsr_q[32] ^ lfsr_q[7];\n      lfsr_q[7]             <= #TCQ lfsr_q[32] ^ lfsr_q[6];\n      lfsr_q[6:4]           <= #TCQ lfsr_q[5:3];\n      lfsr_q[3]             <= #TCQ lfsr_q[32] ^ lfsr_q[2];\n      lfsr_q[2]             <= #TCQ lfsr_q[1] ;\n      lfsr_q[1]             <= #TCQ lfsr_q[32];\n    end\n  end",
        "  always @(posedge clk_i)\n  begin\n    if (rst_i || ~clk_en_i) begin\n      sample_cnt_r    <= #TCQ 'b0;\n      reseed_prbs_r   <= #TCQ 1'b0;\n    end else if (clk_en_i && (~phy_if_empty_r || ~prbs_rdlvl_start)) begin\n      \n      sample_cnt_r    <= #TCQ sample_cnt_r + 1;\n      \n      \n      if (sample_cnt_r == PRBS_SEQ_LEN_CYCLES - 2)\n        reseed_prbs_r <= #TCQ 1'b1;\n      else\n        reseed_prbs_r <= #TCQ 1'b0;\n    end\n  end",
        "  always @(posedge clk_i) begin\n    phy_if_empty_r <= #TCQ phy_if_empty;\n  end",
        "  function integer clogb2 (input integer size);\n    begin\n      size = size - 1;\n      for (clogb2=1; size>1; clogb2=clogb2+1)\n        size = size >> 1;\n    end\n  endfunction"
    ]
}