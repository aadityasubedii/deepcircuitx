{
    "line_num": [
        [
            440,
            442
        ],
        [
            437,
            439
        ],
        [
            435,
            435
        ],
        [
            433,
            433
        ],
        [
            431,
            431
        ],
        [
            430,
            430
        ],
        [
            429,
            429
        ],
        [
            428,
            428
        ],
        [
            412,
            412
        ],
        [
            402,
            411
        ],
        [
            396,
            396
        ],
        [
            370,
            393
        ],
        [
            368,
            368
        ],
        [
            366,
            367
        ],
        [
            359,
            359
        ],
        [
            348,
            351
        ],
        [
            334,
            345
        ],
        [
            328,
            332
        ],
        [
            326,
            326
        ],
        [
            321,
            358
        ],
        [
            299,
            305
        ],
        [
            296,
            296
        ],
        [
            260,
            266
        ],
        [
            254,
            254
        ],
        [
            251,
            253
        ],
        [
            249,
            249
        ],
        [
            247,
            250
        ],
        [
            244,
            246
        ],
        [
            242,
            243
        ],
        [
            236,
            239
        ],
        [
            234,
            234
        ],
        [
            224,
            224
        ],
        [
            223,
            223
        ],
        [
            215,
            219
        ],
        [
            212,
            212
        ],
        [
            210,
            211
        ],
        [
            208,
            209
        ],
        [
            207,
            207
        ],
        [
            205,
            206
        ],
        [
            203,
            204
        ],
        [
            201,
            202
        ],
        [
            195,
            195
        ],
        [
            189,
            189
        ],
        [
            188,
            191
        ],
        [
            186,
            187
        ],
        [
            180,
            180
        ],
        [
            179,
            182
        ],
        [
            167,
            177
        ],
        [
            163,
            165
        ],
        [
            153,
            161
        ],
        [
            143,
            143
        ],
        [
            141,
            142
        ],
        [
            138,
            140
        ],
        [
            135,
            137
        ],
        [
            134,
            134
        ],
        [
            129,
            133
        ]
    ],
    "blocks": [
        "  endgenerate\n\nendmodule",
        "        always @(posedge clk) wr_ecc_buf <= #TCQ wr_ecc_buf_ns;\n      end\n    end",
        "        always @(posedge clk) ecc_status_valid <= #TCQ ecc_status_valid_ns;",
        "        always @(posedge clk) rd_data_en <= rd_data_en_ns;",
        "        always @(posedge clk) ecc_err_addr <= #TCQ ecc_err_addr_ns;",
        "        always @(posedge clk) rd_data_offset <= #TCQ rd_data_offset_ns;",
        "        always @(posedge clk) rd_data_addr <= #TCQ rd_data_addr_ns;",
        "        always @(posedge clk) rd_data_end <= #TCQ rd_data_end_ns;",
        "        assign rd_rmw = 1'b0;",
        "        always @(phy_rddata_valid or fifo_out_data_r) begin\n          {rd_data_end,\n           periodic_rd,\n           rd_data_addr,\n           rd_data_offset} = fifo_out_data_r[FIFO_WIDTH-1:0];\n          ecc_err_addr = {MC_ERR_ADDR_WIDTH{1'b0}};\n          rd_data_en = phy_rddata_valid && ~periodic_rd;\n          ecc_status_valid = 1'b0;\n          wr_ecc_buf = 1'b0;\n        end",
        "      always @(posedge clk) fifo_out_data_r <= #TCQ fifo_out_data_ns;",
        "      genvar i;\n      for (i=0; i<RAM_CNT; i=i+1) begin : fifo_ram\n        RAM32M\n          #(.INIT_A(64'h0000000000000000),\n            .INIT_B(64'h0000000000000000),\n            .INIT_C(64'h0000000000000000),\n            .INIT_D(64'h0000000000000000)\n          ) RAM32M0 (\n            .DOA(fifo_out_data_ns[((i*6)+4)+:2]),\n            .DOB(fifo_out_data_ns[((i*6)+2)+:2]),\n            .DOC(fifo_out_data_ns[((i*6)+0)+:2]),\n            .DOD(),\n            .DIA(fifo_in_data[((i*6)+4)+:2]),\n            .DIB(fifo_in_data[((i*6)+2)+:2]),\n            .DIC(fifo_in_data[((i*6)+0)+:2]),\n            .DID(2'b0),\n            .ADDRA(tail_ns),\n            .ADDRB(tail_ns),\n            .ADDRC(tail_ns),\n            .ADDRD(head_r),\n            .WE(1'b1),\n            .WCLK(clk)\n           );\n      end ",
        "      assign col_read_fifo_empty = head_r == tail_r ? 1'b1 : 1'b0;",
        "      always @(posedge clk) tail_r <= #TCQ tail_ns;\n",
        "      always @(posedge clk) head_r <= #TCQ head_ns;",
        "      if (REMAINDER == 0)\n        assign fifo_in_data = real_fifo_data;\n      else\n        assign fifo_in_data = {{6-REMAINDER{1'b0}}, real_fifo_data};",
        "      wire [FIFO_WIDTH-1:0] real_fifo_data;\n      if (ECC == \"OFF\")\n         assign real_fifo_data = {data_end,\n                                  col_periodic_rd,\n                                  col_data_buf_addr,\n                                  offset_r[DATA_BUF_OFFSET_WIDTH-1:0]};\n      else\n         assign real_fifo_data = {data_end,\n                                  col_periodic_rd,\n                                  col_data_buf_addr,\n                                  offset_r[DATA_BUF_OFFSET_WIDTH-1:0],\n                                  ecc_line};",
        "        assign ecc_line = {col_rmw,\n                           col_ra,\n                           col_ba,\n                           col_row,\n                           col_a_extracted};",
        "        assign ecc_line = {col_rmw, col_ba, col_row, col_a_extracted};",
        "  generate\n    begin : read_fifo\n\n      wire [MC_ERR_LINE_WIDTH:0] ecc_line;\n      if (CS_WIDTH == 1)\n        assign ecc_line = {col_rmw, col_ba, col_row, col_a_extracted};\n      else\n        assign ecc_line = {col_rmw,\n                           col_ra,\n                           col_ba,\n                           col_row,\n                           col_a_extracted};\n\n      wire [FIFO_WIDTH-1:0] real_fifo_data;\n      if (ECC == \"OFF\")\n         assign real_fifo_data = {data_end,\n                                  col_periodic_rd,\n                                  col_data_buf_addr,\n                                  offset_r[DATA_BUF_OFFSET_WIDTH-1:0]};\n      else\n         assign real_fifo_data = {data_end,\n                                  col_periodic_rd,\n                                  col_data_buf_addr,\n                                  offset_r[DATA_BUF_OFFSET_WIDTH-1:0],\n                                  ecc_line};\n\n      wire [RAM_WIDTH-1:0] fifo_in_data;\n      if (REMAINDER == 0)\n        assign fifo_in_data = real_fifo_data;\n      else\n        assign fifo_in_data = {{6-REMAINDER{1'b0}}, real_fifo_data};\n\n      wire [RAM_WIDTH-1:0] fifo_out_data_ns;\n\n      reg [4:0] head_r;\n      wire [4:0] head_ns = rst ? 5'b0 : read_data_valid\n                                          ? (head_r + 5'b1)\n                                          : head_r;",
        "  generate\n     if (ROW_WIDTH >= 14) begin : COL_A_FULL_11_1\n        assign col_a_full[11] = col_a[13];\n     end else begin : COL_A_FULL_11_0\n        assign col_a_full[11] = 0;\n     end\n  endgenerate",
        "  assign col_a_full[10:0] = {col_a[11], col_a[9:0]};",
        "function integer clogb2 (input integer size); \n    begin\n    size = size - 1;\n    for (clogb2=1; size>1; clogb2=clogb2+1)\n            size = size >> 1;\n  end\nendfunction ",
        "  endgenerate",
        "    else begin : delay_wr_data_cntrl_ne_1\n      assign wr_data_addr = col_wr_data_buf_addr;\n    end",
        "      assign wr_data_addr = col_wr_data_buf_addr_r;",
        "      always @(posedge clk) col_wr_data_buf_addr_r <= \n                              #TCQ col_wr_data_buf_addr;\n      assign wr_data_addr = col_wr_data_buf_addr_r;\n    end",
        "  generate\n    if (DELAY_WR_DATA_CNTRL == 1) begin : delay_wr_data_cntrl_eq_1\n      reg [DATA_BUF_ADDR_WIDTH-1:0] col_wr_data_buf_addr_r;",
        "  input [DATA_BUF_ADDR_WIDTH-1:0] col_wr_data_buf_addr;\n  output wire [DATA_BUF_ADDR_WIDTH-1:0] wr_data_addr;",
        "  output wire wr_data_en;\n  assign wr_data_en = (DELAY_WR_DATA_CNTRL == 1)\n                              ? ((sent_col_r1 || |offset_r1) && ~col_rd_wr_r1)\n                              : ((sent_col || |offset_r) && ~col_rd_wr);",
        "  assign mc_wrdata_en = wrdata_en;",
        "  always @(posedge clk) sent_col_r2 <= #TCQ sent_col_r1;",
        "  always @(posedge clk) sent_col_r1 <= #TCQ sent_col;",
        "  assign wr_data_offset = (DELAY_WR_DATA_CNTRL == 1)\n                            ? offset_r1[DATA_BUF_OFFSET_WIDTH-1:0]\n                            : (EARLY_WR_DATA_ADDR == \"OFF\")\n                              ? offset_r[DATA_BUF_OFFSET_WIDTH-1:0]\n                              : offset_ns[DATA_BUF_OFFSET_WIDTH-1:0];",
        "  endgenerate",
        "      always @(posedge clk) col_rd_wr_r2 <= #TCQ col_rd_wr_r1;\n    end",
        "      always @(posedge clk) offset_r2 <=\n                              #TCQ offset_r1[DATA_BUF_OFFSET_WIDTH-1:0];",
        "    if(nPHY_WRLAT == 2) begin : offset_pipe_1",
        "      always @(posedge clk) col_rd_wr_r1 <= #TCQ col_rd_wr;\n    end",
        "      always @(posedge clk) offset_r1 <=\n                              #TCQ offset_r[DATA_BUF_OFFSET_WIDTH-1:0];",
        "  generate\n    if ((nPHY_WRLAT >= 1) || (DELAY_WR_DATA_CNTRL == 1)) begin : offset_pipe_0",
        "  endgenerate",
        "        assign data_end = col_size ? offset_r[0] : 1'b1;",
        "        always @(posedge clk) offset_r[0] <= #TCQ offset_ns[0];\n        assign data_end = col_size ? offset_r[0] : 1'b1;\n\n      end",
        "        always @(col_size or rst or sent_col)\n          offset_ns[0] = rst ? 1'b0 : sent_col && col_size;",
        "        assign data_end = col_size ? (offset_r == 2'b11) : offset_r[0];",
        "        always @(posedge clk) offset_r <= #TCQ offset_ns;\n        assign data_end = col_size ? (offset_r == 2'b11) : offset_r[0];\n        \n      end",
        "        always @(col_size or offset_r or rst or sent_col) begin\n          if (rst) offset_ns = 2'b0;\n          else begin\n            offset_ns = offset_r;\n            if (sent_col) offset_ns = 2'b1;\n            else if (|offset_r && (offset_r != {col_size, 1'b1}))\n              offset_ns = offset_r + 2'b1;\n            else offset_ns = 2'b0;\n          end\n        \n        end",
        "    else begin\n    \n      if(DATA_BUF_OFFSET_WIDTH == 2) begin : data_valid_1_1",
        "  generate\n\n    if(nCK_PER_CLK == 4) begin : data_valid_4_1\n\n      \n      \n      assign data_end = 1'b1;\n\n    end",
        "  endgenerate",
        "       always @(sent_col) dq_busy_data = sent_col;\n    end",
        "    if (((nCK_PER_CLK == 2) && ((BURST_MODE == \"8\") || (DRAM_TYPE == \"DDR3\")))\n    || ((nCK_PER_CLK == 1) && ((BURST_MODE == \"4\") || (DRAM_TYPE == \"DDR2\"))))\n    begin : one_bump",
        "      always @(granted_col_d_r or sent_col)\n                dq_busy_data = sent_col || |granted_col_d_r;\n    end",
        "      always @(posedge clk) granted_col_d_r <= #TCQ granted_col_d_ns;",
        "  generate\n    if ((nCK_PER_CLK == 1) && ((BURST_MODE == \"8\") || (DRAM_TYPE == \"DDR3\")))\n    begin : three_bumps\n      reg [1:0] granted_col_d_r;\n      wire [1:0] granted_col_d_ns = {sent_col, granted_col_d_r[1]};"
    ]
}