{
    "spec": "Module name: mig_7series_v4_1_ddr_phy_4lanes. Module specification: This module implements a DDR (Double Data Rate) PHY (Physical Layer) interface for a memory controller, designed for 7 series FPGAs, supporting up to 4 byte lanes. It manages timing, calibration, and signal integrity for DDR memory operations, incorporating PHASER_IN, PHASER_OUT, and IDELAYCTRL components. The module handles clock generation, data alignment, and various calibration processes for read and write operations across multiple byte lanes. Key inputs include reset signals, clocks, calibration controls, and configuration parameters, while outputs provide status information, control signals, and data for the DDR memory interface. Internal signals manage read clocks, data remapping, and control signals for individual byte lanes. The module is organized into sections for each byte lane (A, B,",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_phy_4lanes\n\nExplanation: This module appears to be a DDR (Double Data Rate) PHY (Physical Layer) interface for a memory controller, specifically designed for 7 series FPGAs. It handles up to 4 byte lanes of DDR memory interface, including data, address, and control signals. The module manages timing, calibration, and signal integrity for DDR memory operations, incorporating features like PHASER_IN, PHASER_OUT, and IDELAYCTRL components. It also handles clock generation, data alignment, and various calibration processes for read and write operations across multiple byte lanes."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nrst, phy_clk, clk_div2, phy_ctl_clk, freq_refclk, mem_refclk, mem_refclk_div4, pll_lock, sync_pulse, idelayctrl_refclk, phy_dout, phy_cmd_wr_en, phy_data_wr_en, phy_rd_en, phy_ctl_mstr_empty, phy_ctl_wd, data_offset, phy_ctl_wr, if_empty_def, phyGo, input_sink, mem_dq_in, mem_dqs_in, byte_rd_en_oth_banks, if_rst, phy_read_calib, phy_write_calib, idelay_inc, idelay_ce, idelay_ld, calib_sel, calib_zero_ctrl, calib_zero_lanes, calib_in_common, po_fine_enable, po_coarse_enable, po_fine_inc, po_coarse_inc, po_counter_load_en, po_counter_read_en, po_counter_load_val, po_sel_fine_oclk_delay, pi_rst_dqs_find, pi_fine_enable, pi_fine_inc, pi_counter_load_en, pi_counter_read_en, pi_counter_load_val, fine_delay, fine_delay_sel.\n\nExplanation: These inputs control various aspects of the DDR PHY, including reset signals, clocks, calibration controls, read/write enables, and configuration parameters for the PHASER and IDELAY components.\n\nOutput ports:\nddr_clk, rclk, if_a_empty, if_empty, byte_rd_en, if_empty_or, if_empty_and, of_ctl_a_full, of_data_a_full, of_ctl_full, of_data_full, pre_data_a_full, phy_din, phy_ctl_empty, phy_ctl_a_full, phy_ctl_full, mem_dq_out, mem_dq_ts, mem_dqs_out, mem_dqs_ts, aux_out, rst_out, mcGo, phy_ctl_ready, ref_dll_lock, po_coarse_overflow, po_fine_overflow, po_counter_read_val, pi_fine_overflow, pi_counter_read_val, pi_dqs_found, pi_dqs_found_all, pi_dqs_found_any, pi_phase_locked_lanes, pi_dqs_found_lanes, pi_dqs_out_of_range, pi_phase_locked, pi_phase_locked_all.\n\nExplanation: These outputs provide status information, control signals, and data for the DDR memory interface. They include clock outputs, FIFO status flags, memory interface signals, calibration status, and various overflow and phase-lock indicators for the PHASER components."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code, here are the internal signals used in the module and their explanations:\n\nInternal signals: A_rclk, B_rclk, C_rclk, D_rclk, rclk_, pi_iserdes_rst, phy_dout_remap, phy_din_remap, dummy_data, phaser_ctl_bus, in_rank, IO_A, IO_B, IO_C, IO_D, oserdes_dqs, oserdes_dqs_ts, oserdes_dq_ts.\n\nExplanation:\n- A_rclk, B_rclk, C_rclk, D_rclk: Read clocks for each of the four byte lanes.\n- rclk_: Selected read clock based on RCLK_SELECT_LANE parameter.\n- pi_iserdes_rst: Reset signal for the ISERDES (Input Serializer/Deserializer) components.\n- phy_dout_remap, phy_din_remap: Remapped versions of phy_dout and phy_din for proper byte lane assignments.\n- dummy_data: Used to handle unused byte lanes and prevent synthesis warnings.\n- phaser_ctl_bus: Control bus for the PHASER components.\n- in_rank: Input signal representing the memory rank information.\n- IO_A, IO_B, IO_C, IO_D: Signals representing I/O connections for each byte lane.\n- oserdes_dqs, oserdes_dqs_ts, oserdes_dq_ts: Output signals from OSERDES (Output Serializer/Deserializer) components for DQS (Data Strobe) and DQ (Data) signals.\n\nThese internal signals play crucial roles in managing the DDR PHY interface, including clock distribution, data remapping, and control signal routing across the four byte lanes."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\n`define  PC_DATA_OFFSET_RANGE 22:17\n\nmodule mig_7series_v4_1_ddr_phy_4lanes #(\nparameter  GENERATE_IDELAYCTRL  = \"TRUE\",\nparameter  IODELAY_GRP          = \"IODELAY_MIG\",\nparameter  FPGA_SPEED_GRADE     = 1,\nparameter  BANK_TYPE            = \"HP_IO\", \nparameter  BYTELANES_DDR_CK     = 24'b0010_0010_0010_0010_0010_0010,\nparameter  NUM_DDR_CK           = 1,\n\nparameter  BYTE_LANES           = 4'b1111, \nparameter  DATA_CTL_N           = 4'b1111, \nparameter  BITLANES             = 48'hffff_ffff_ffff,\nparameter  BITLANES_OUTONLY     = 48'h0000_0000_0000,\nparameter  LANE_REMAP           = 16'h3210,\n                                        \n                                        \n                                        \n                                        \n                                        \n                                        \n                                        \nparameter   LAST_BANK              = \"FALSE\",\nparameter   USE_PRE_POST_FIFO      = \"FALSE\",\nparameter   RCLK_SELECT_LANE       = \"B\",\nparameter   real  TCK              = 0.00,\nparameter   SYNTHESIS              = \"FALSE\",\nparameter   PO_CTL_COARSE_BYPASS   = \"FALSE\",\nparameter   PO_FINE_DELAY          = 0,\nparameter   PI_SEL_CLK_OFFSET      = 0,\n\n\nparameter   PC_CLK_RATIO           = 4,\n\n\nparameter  A_PI_FREQ_REF_DIV       = \"NONE\",\nparameter  A_PI_CLKOUT_DIV         = 2,\nparameter  A_PI_BURST_MODE         = \"TRUE\",\nparameter  A_PI_OUTPUT_CLK_SRC     = \"DELAYED_REF\" , \nparameter  A_PI_FINE_DELAY         = 60,\nparameter  A_PI_SYNC_IN_DIV_RST    = \"TRUE\",\n\nparameter  B_PI_FREQ_REF_DIV       = A_PI_FREQ_REF_DIV,\nparameter  B_PI_CLKOUT_DIV         = A_PI_CLKOUT_DIV,\nparameter  B_PI_BURST_MODE         = A_PI_BURST_MODE,\nparameter  B_PI_OUTPUT_CLK_SRC     = A_PI_OUTPUT_CLK_SRC,\nparameter  B_PI_FINE_DELAY         = A_PI_FINE_DELAY,\nparameter  B_PI_SYNC_IN_DIV_RST    = A_PI_SYNC_IN_DIV_RST,\n\nparameter  C_PI_FREQ_REF_DIV       = A_PI_FREQ_REF_DIV,\nparameter  C_PI_CLKOUT_DIV         = A_PI_CLKOUT_DIV,\nparameter  C_PI_BURST_MODE         = A_PI_BURST_MODE,\nparameter  C_PI_OUTPUT_CLK_SRC     = A_PI_OUTPUT_CLK_SRC,\nparameter  C_PI_FINE_DELAY         = 0,\nparameter  C_PI_SYNC_IN_DIV_RST    = A_PI_SYNC_IN_DIV_RST,\n\nparameter  D_PI_FREQ_REF_DIV       = A_PI_FREQ_REF_DIV,\nparameter  D_PI_CLKOUT_DIV         = A_PI_CLKOUT_DIV,\nparameter  D_PI_BURST_MODE         = A_PI_BURST_MODE,\nparameter  D_PI_OUTPUT_CLK_SRC     = A_PI_OUTPUT_CLK_SRC,\nparameter  D_PI_FINE_DELAY         = 0,\nparameter  D_PI_SYNC_IN_DIV_RST    = A_PI_SYNC_IN_DIV_RST,\n\n\nparameter  A_PO_CLKOUT_DIV         = (DATA_CTL_N[0] == 0) ? PC_CLK_RATIO :  2,\nparameter  A_PO_FINE_DELAY         = PO_FINE_DELAY,\nparameter  A_PO_COARSE_DELAY       = 0,\nparameter  A_PO_OCLK_DELAY         = 0,\nparameter  A_PO_OCLKDELAY_INV      = \"FALSE\",\nparameter  A_PO_OUTPUT_CLK_SRC     = \"DELAYED_REF\",\nparameter  A_PO_SYNC_IN_DIV_RST    = \"TRUE\",\n\n\nparameter  B_PO_CLKOUT_DIV         = (DATA_CTL_N[1] == 0) ? PC_CLK_RATIO :  2,\nparameter  B_PO_FINE_DELAY         = PO_FINE_DELAY,\nparameter  B_PO_COARSE_DELAY       = A_PO_COARSE_DELAY,\nparameter  B_PO_OCLK_DELAY         = A_PO_OCLK_DELAY,\nparameter  B_PO_OCLKDELAY_INV      = A_PO_OCLKDELAY_INV,\nparameter  B_PO_OUTPUT_CLK_SRC     = A_PO_OUTPUT_CLK_SRC,\nparameter  B_PO_SYNC_IN_DIV_RST    = A_PO_SYNC_IN_DIV_RST,\n\nparameter  C_PO_CLKOUT_DIV         = (DATA_CTL_N[2] == 0) ? PC_CLK_RATIO :  2,\nparameter  C_PO_FINE_DELAY         = PO_FINE_DELAY,\nparameter  C_PO_COARSE_DELAY       = A_PO_COARSE_DELAY,\nparameter  C_PO_OCLK_DELAY         = A_PO_OCLK_DELAY,\nparameter  C_PO_OCLKDELAY_INV      = A_PO_OCLKDELAY_INV,\nparameter  C_PO_OUTPUT_CLK_SRC     = A_PO_OUTPUT_CLK_SRC,\nparameter  C_PO_SYNC_IN_DIV_RST    = A_PO_SYNC_IN_DIV_RST,\n\nparameter  D_PO_CLKOUT_DIV         = (DATA_CTL_N[3] == 0) ? PC_CLK_RATIO :  2,\nparameter  D_PO_FINE_DELAY         = PO_FINE_DELAY,\nparameter  D_PO_COARSE_DELAY       = A_PO_COARSE_DELAY,\nparameter  D_PO_OCLK_DELAY         = A_PO_OCLK_DELAY,\nparameter  D_PO_OCLKDELAY_INV      = A_PO_OCLKDELAY_INV,\nparameter  D_PO_OUTPUT_CLK_SRC     = A_PO_OUTPUT_CLK_SRC,\nparameter  D_PO_SYNC_IN_DIV_RST    = A_PO_SYNC_IN_DIV_RST,\n\nparameter  A_IDELAYE2_IDELAY_TYPE  = \"VARIABLE\",\nparameter  A_IDELAYE2_IDELAY_VALUE = 00,\nparameter  B_IDELAYE2_IDELAY_TYPE  = A_IDELAYE2_IDELAY_TYPE,\nparameter  B_IDELAYE2_IDELAY_VALUE = A_IDELAYE2_IDELAY_VALUE,\nparameter  C_IDELAYE2_IDELAY_TYPE  = A_IDELAYE2_IDELAY_TYPE,\nparameter  C_IDELAYE2_IDELAY_VALUE = A_IDELAYE2_IDELAY_VALUE,\nparameter  D_IDELAYE2_IDELAY_TYPE  = A_IDELAYE2_IDELAY_TYPE,\nparameter  D_IDELAYE2_IDELAY_VALUE = A_IDELAYE2_IDELAY_VALUE,\n\n\n\n\nparameter PC_BURST_MODE           = \"TRUE\",\nparameter PC_DATA_CTL_N           = DATA_CTL_N,\nparameter PC_CMD_OFFSET           = 0,\nparameter PC_RD_CMD_OFFSET_0      = 0,\nparameter PC_RD_CMD_OFFSET_1      = 0,\nparameter PC_RD_CMD_OFFSET_2      = 0,\nparameter PC_RD_CMD_OFFSET_3      = 0,\nparameter PC_CO_DURATION          = 1,\nparameter PC_DI_DURATION          = 1,\nparameter PC_DO_DURATION          = 1,\nparameter PC_RD_DURATION_0        = 0,\nparameter PC_RD_DURATION_1        = 0,\nparameter PC_RD_DURATION_2        = 0,\nparameter PC_RD_DURATION_3        = 0,\nparameter PC_WR_CMD_OFFSET_0      = 5,\nparameter PC_WR_CMD_OFFSET_1      = 5,\nparameter PC_WR_CMD_OFFSET_2      = 5,\nparameter PC_WR_CMD_OFFSET_3      = 5,\nparameter PC_WR_DURATION_0        = 6,\nparameter PC_WR_DURATION_1        = 6,\nparameter PC_WR_DURATION_2        = 6,\nparameter PC_WR_DURATION_3        = 6,\nparameter PC_AO_WRLVL_EN          = 0,\nparameter PC_AO_TOGGLE            = 4'b0101, \nparameter PC_FOUR_WINDOW_CLOCKS   = 63,\nparameter PC_EVENTS_DELAY         = 18,\nparameter PC_PHY_COUNT_EN         = \"TRUE\",\nparameter PC_SYNC_MODE            = \"TRUE\",\nparameter PC_DISABLE_SEQ_MATCH    = \"TRUE\",\nparameter PC_MULTI_REGION         = \"FALSE\",\n\n\n\nparameter  A_OF_ARRAY_MODE        = (DATA_CTL_N[0] == 1) ? \"ARRAY_MODE_8_X_4\" :  \"ARRAY_MODE_4_X_4\",\nparameter  B_OF_ARRAY_MODE        = (DATA_CTL_N[1] == 1) ? \"ARRAY_MODE_8_X_4\" :  \"ARRAY_MODE_4_X_4\",\nparameter  C_OF_ARRAY_MODE        = (DATA_CTL_N[2] == 1) ? \"ARRAY_MODE_8_X_4\" :  \"ARRAY_MODE_4_X_4\",\nparameter  D_OF_ARRAY_MODE        = (DATA_CTL_N[3] == 1) ? \"ARRAY_MODE_8_X_4\" :  \"ARRAY_MODE_4_X_4\",\nparameter  OF_ALMOST_EMPTY_VALUE  = 1,\nparameter  OF_ALMOST_FULL_VALUE   = 1,\nparameter  OF_OUTPUT_DISABLE      = \"TRUE\",\nparameter  OF_SYNCHRONOUS_MODE    = PC_SYNC_MODE,\n\nparameter  A_OS_DATA_RATE           = \"DDR\",\nparameter  A_OS_DATA_WIDTH          = 4,\nparameter  B_OS_DATA_RATE           = A_OS_DATA_RATE,\nparameter  B_OS_DATA_WIDTH          = A_OS_DATA_WIDTH,\nparameter  C_OS_DATA_RATE           = A_OS_DATA_RATE,\nparameter  C_OS_DATA_WIDTH          = A_OS_DATA_WIDTH,\nparameter  D_OS_DATA_RATE           = A_OS_DATA_RATE,\nparameter  D_OS_DATA_WIDTH          = A_OS_DATA_WIDTH,\n\n\nparameter  A_IF_ARRAY_MODE          = \"ARRAY_MODE_4_X_8\",\nparameter  B_IF_ARRAY_MODE          = A_IF_ARRAY_MODE,\nparameter  C_IF_ARRAY_MODE          = A_IF_ARRAY_MODE,\nparameter  D_IF_ARRAY_MODE          = A_IF_ARRAY_MODE,\nparameter  IF_ALMOST_EMPTY_VALUE  =  1,\nparameter  IF_ALMOST_FULL_VALUE   =  1,\nparameter  IF_SYNCHRONOUS_MODE    = PC_SYNC_MODE,\n\n\n\n\n\nparameter HIGHEST_LANE  =  LAST_BANK == \"FALSE\" ? 4 : (BYTE_LANES[3] ? 4 : BYTE_LANES[2] ? 3 : BYTE_LANES[1] ? 2 : 1),\nparameter  N_CTL_LANES = ((0+(!DATA_CTL_N[0]) & BYTE_LANES[0]) + (0+(!DATA_CTL_N[1]) & BYTE_LANES[1]) + (0+(!DATA_CTL_N[2]) & BYTE_LANES[2]) + (0+(!DATA_CTL_N[3]) & BYTE_LANES[3])),\n\nparameter  N_BYTE_LANES = (0+BYTE_LANES[0]) + (0+BYTE_LANES[1]) + (0+BYTE_LANES[2]) + (0+BYTE_LANES[3]),\n\nparameter N_DATA_LANES = N_BYTE_LANES - N_CTL_LANES,\n\nparameter  AUXOUT_WIDTH = 4,\nparameter LP_DDR_CK_WIDTH = 2\n,parameter CKE_ODT_AUX = \"FALSE\"\n,parameter PI_DIV2_INCDEC = \"FALSE\"\n)\n(\n\n\n\n      input                       rst,\n      input                       phy_clk,\n      input                       clk_div2,\n      input                       phy_ctl_clk,\n      input                       freq_refclk,\n      input                       mem_refclk,\n      input                       mem_refclk_div4,\n      input                       pll_lock,\n      input                       sync_pulse,\n      input                       idelayctrl_refclk,\n      input [HIGHEST_LANE*80-1:0] phy_dout,\n      input                       phy_cmd_wr_en,\n      input                       phy_data_wr_en,\n      input                       phy_rd_en,\n      input                       phy_ctl_mstr_empty,\n      input [31:0]                phy_ctl_wd,\n      input [`PC_DATA_OFFSET_RANGE] data_offset,\n      input                       phy_ctl_wr,\n      input                       if_empty_def,\n      input                       phyGo,\n      input                       input_sink,\n\n      output [(LP_DDR_CK_WIDTH*24)-1:0] ddr_clk,  \n      output                      rclk,\n      output                      if_a_empty,\n      output                      if_empty,\n      output                      byte_rd_en,\n      output                      if_empty_or,\n      output                      if_empty_and,\n      output                      of_ctl_a_full,\n      output                      of_data_a_full,\n      output                      of_ctl_full,\n      output                      of_data_full,\n      output                      pre_data_a_full,\n      output [HIGHEST_LANE*80-1:0]phy_din, \n      output                      phy_ctl_empty,\n      output                      phy_ctl_a_full,\n      output                      phy_ctl_full,\n      output [HIGHEST_LANE*12-1:0]mem_dq_out,\n      output [HIGHEST_LANE*12-1:0]mem_dq_ts,\n      input  [HIGHEST_LANE*10-1:0]mem_dq_in,\n      output [HIGHEST_LANE-1:0]   mem_dqs_out,\n      output [HIGHEST_LANE-1:0]   mem_dqs_ts,\n      input  [HIGHEST_LANE-1:0]   mem_dqs_in,\n      input [1:0]                 byte_rd_en_oth_banks,\n\n      output     [AUXOUT_WIDTH-1:0] aux_out,\n      output reg                   rst_out = 0,\n      output reg                   mcGo=0,\n      output                       phy_ctl_ready,\n      output                       ref_dll_lock,\n      input                        if_rst,\n      input                        phy_read_calib,\n      input                        phy_write_calib,\n      input                        idelay_inc,\n      input                        idelay_ce,\n      input                        idelay_ld,\n      input  [2:0]                 calib_sel,\n      input                        calib_zero_ctrl,\n      input  [HIGHEST_LANE-1:0]    calib_zero_lanes,\n      input                        calib_in_common,\n      input                        po_fine_enable,\n      input                        po_coarse_enable,\n      input                        po_fine_inc,\n      input                        po_coarse_inc,\n      input                        po_counter_load_en,\n      input                        po_counter_read_en,\n      input  [8:0]                 po_counter_load_val,\n      input                        po_sel_fine_oclk_delay,\n      output reg                   po_coarse_overflow,\n      output reg                   po_fine_overflow,\n      output reg [8:0]             po_counter_read_val,\n\n\n\n      input                        pi_rst_dqs_find,\n      input                        pi_fine_enable,\n      input                        pi_fine_inc,\n      input                        pi_counter_load_en,\n      input                        pi_counter_read_en,\n      input  [5:0]                 pi_counter_load_val,\n      output reg                   pi_fine_overflow,\n      output reg [5:0]             pi_counter_read_val,\n\n      output reg                   pi_dqs_found,\n      output                       pi_dqs_found_all,\n      output                       pi_dqs_found_any,\n      output [HIGHEST_LANE-1:0]    pi_phase_locked_lanes,\n      output [HIGHEST_LANE-1:0]    pi_dqs_found_lanes,\n      output reg                   pi_dqs_out_of_range,\n      output reg                   pi_phase_locked,\n      output                       pi_phase_locked_all,\n      input [29:0]                 fine_delay,\n      input                        fine_delay_sel\n);\n\nlocalparam  DATA_CTL_A       = (~DATA_CTL_N[0]);\nlocalparam  DATA_CTL_B       = (~DATA_CTL_N[1]);\nlocalparam  DATA_CTL_C       = (~DATA_CTL_N[2]);\nlocalparam  DATA_CTL_D       = (~DATA_CTL_N[3]);\nlocalparam  PRESENT_CTL_A    = BYTE_LANES[0] && ! DATA_CTL_N[0];\nlocalparam  PRESENT_CTL_B    = BYTE_LANES[1] && ! DATA_CTL_N[1];\nlocalparam  PRESENT_CTL_C    = BYTE_LANES[2] && ! DATA_CTL_N[2];\nlocalparam  PRESENT_CTL_D    = BYTE_LANES[3] && ! DATA_CTL_N[3];\nlocalparam  PRESENT_DATA_A   = BYTE_LANES[0] &&  DATA_CTL_N[0];\nlocalparam  PRESENT_DATA_B   = BYTE_LANES[1] &&  DATA_CTL_N[1];\nlocalparam  PRESENT_DATA_C   = BYTE_LANES[2] &&  DATA_CTL_N[2];\nlocalparam  PRESENT_DATA_D   = BYTE_LANES[3] &&  DATA_CTL_N[3];\nlocalparam  PC_DATA_CTL_A    = (DATA_CTL_A) ? \"FALSE\" : \"TRUE\";\nlocalparam  PC_DATA_CTL_B    = (DATA_CTL_B) ? \"FALSE\" : \"TRUE\";\nlocalparam  PC_DATA_CTL_C    = (DATA_CTL_C) ? \"FALSE\" : \"TRUE\";\nlocalparam  PC_DATA_CTL_D    = (DATA_CTL_D) ? \"FALSE\" : \"TRUE\";\nlocalparam  A_PO_COARSE_BYPASS = (DATA_CTL_A) ? PO_CTL_COARSE_BYPASS : \"FALSE\";\nlocalparam  B_PO_COARSE_BYPASS = (DATA_CTL_B) ? PO_CTL_COARSE_BYPASS : \"FALSE\";\nlocalparam  C_PO_COARSE_BYPASS = (DATA_CTL_C) ? PO_CTL_COARSE_BYPASS : \"FALSE\";\nlocalparam  D_PO_COARSE_BYPASS = (DATA_CTL_D) ? PO_CTL_COARSE_BYPASS : \"FALSE\";\n\nlocalparam  IO_A_START = 41;\nlocalparam  IO_A_END   = 40;\nlocalparam  IO_B_START = 43;\nlocalparam  IO_B_END   = 42;\nlocalparam  IO_C_START = 45;\nlocalparam  IO_C_END   = 44;\nlocalparam  IO_D_START = 47;\nlocalparam  IO_D_END   = 46;\nlocalparam  IO_A_X_START = (HIGHEST_LANE * 10) + 1;\nlocalparam  IO_A_X_END   = (IO_A_X_START-1);\nlocalparam  IO_B_X_START = (IO_A_X_START + 2);\nlocalparam  IO_B_X_END   = (IO_B_X_START -1);\nlocalparam  IO_C_X_START = (IO_B_X_START + 2);\nlocalparam  IO_C_X_END   = (IO_C_X_START -1);\nlocalparam  IO_D_X_START = (IO_C_X_START + 2);\nlocalparam  IO_D_X_END   = (IO_D_X_START -1);\n\nlocalparam MSB_BURST_PEND_PO             =  3;\nlocalparam MSB_BURST_PEND_PI             =  7;\nlocalparam MSB_RANK_SEL_I                =  MSB_BURST_PEND_PI + 8;\nlocalparam PHASER_CTL_BUS_WIDTH          =  MSB_RANK_SEL_I + 1;\n\nwire [1:0]  oserdes_dqs;\nwire [1:0]  oserdes_dqs_ts;\nwire [1:0]  oserdes_dq_ts;\n\n\nwire [PHASER_CTL_BUS_WIDTH-1:0] phaser_ctl_bus;\nwire [7:0]  in_rank;\nwire [11:0] IO_A;\nwire [11:0] IO_B;\nwire [11:0] IO_C;\nwire [11:0] IO_D;\n\nwire [319:0] phy_din_remap;\n\nreg        A_po_counter_read_en;\nwire [8:0] A_po_counter_read_val;\nreg        A_pi_counter_read_en;\nwire [5:0] A_pi_counter_read_val;\nwire       A_pi_fine_overflow;\nwire       A_po_coarse_overflow;\nwire       A_po_fine_overflow;\nwire       A_pi_dqs_found;\nwire       A_pi_dqs_out_of_range;\nwire       A_pi_phase_locked;\nwire       A_pi_iserdes_rst;\nreg        A_pi_fine_enable;\nreg        A_pi_fine_inc;\nreg        A_pi_counter_load_en;\nreg [5:0]  A_pi_counter_load_val;\nreg        A_pi_rst_dqs_find;\n\n\nreg        A_po_fine_enable;\nreg        A_po_coarse_enable;\n reg        A_po_fine_inc ;\nreg        A_po_sel_fine_oclk_delay;\nreg        A_po_coarse_inc;\nreg        A_po_counter_load_en;\nreg [8:0]  A_po_counter_load_val;\nwire       A_rclk;\nreg        A_idelay_ce;\nreg        A_idelay_ld;\nreg [29:0] A_fine_delay;\nreg        A_fine_delay_sel;\n\nreg        B_po_counter_read_en;\nwire [8:0] B_po_counter_read_val;\nreg        B_pi_counter_read_en;\nwire [5:0] B_pi_counter_read_val;\nwire       B_pi_fine_overflow;\nwire       B_po_coarse_overflow;\nwire       B_po_fine_overflow;\nwire       B_pi_phase_locked;\nwire       B_pi_iserdes_rst;\nwire       B_pi_dqs_found;\nwire       B_pi_dqs_out_of_range;\nreg        B_pi_fine_enable;\nreg        B_pi_fine_inc;\nreg        B_pi_counter_load_en;\nreg [5:0]  B_pi_counter_load_val;\nreg        B_pi_rst_dqs_find;\n\n\nreg        B_po_fine_enable;\nreg        B_po_coarse_enable;\n reg        B_po_fine_inc ;\nreg        B_po_coarse_inc;\nreg        B_po_sel_fine_oclk_delay;\nreg        B_po_counter_load_en;\nreg [8:0]  B_po_counter_load_val;\nwire       B_rclk;\nreg        B_idelay_ce;\nreg        B_idelay_ld;\nreg [29:0] B_fine_delay;\nreg        B_fine_delay_sel;\n\n\nreg        C_pi_fine_inc;\nreg        D_pi_fine_inc;\nreg        C_pi_fine_enable;\nreg        D_pi_fine_enable;\nreg        C_po_counter_load_en;\nreg        D_po_counter_load_en;\nreg        C_po_coarse_inc;\nreg        D_po_coarse_inc;\n reg        C_po_fine_inc ;\n reg        D_po_fine_inc ;\nreg        C_po_sel_fine_oclk_delay;\nreg        D_po_sel_fine_oclk_delay;\nreg [5:0]  C_pi_counter_load_val;\nreg [5:0]  D_pi_counter_load_val;\nreg [8:0]  C_po_counter_load_val;\nreg [8:0]  D_po_counter_load_val;\nreg        C_po_coarse_enable;\nreg        D_po_coarse_enable;\nreg        C_po_fine_enable;\nreg        D_po_fine_enable;\nwire       C_po_coarse_overflow;\nwire       D_po_coarse_overflow;\nwire       C_po_fine_overflow;\nwire       D_po_fine_overflow;\nwire [8:0] C_po_counter_read_val;\nwire [8:0] D_po_counter_read_val;\nreg        C_po_counter_read_en;\nreg        D_po_counter_read_en;\nwire       C_pi_dqs_found;\nwire       D_pi_dqs_found;\nwire       C_pi_fine_overflow;\nwire       D_pi_fine_overflow;\nreg        C_pi_counter_read_en;\nreg        D_pi_counter_read_en;\nreg        C_pi_counter_load_en;\nreg        D_pi_counter_load_en;\nwire       C_pi_phase_locked;\nwire       C_pi_iserdes_rst;\nwire       D_pi_phase_locked;\nwire       D_pi_iserdes_rst;\nwire       C_pi_dqs_out_of_range;\nwire       D_pi_dqs_out_of_range;\nwire [5:0] C_pi_counter_read_val;\nwire [5:0] D_pi_counter_read_val;\nwire       C_rclk;\nwire       D_rclk;\nreg        C_idelay_ce;\nreg        D_idelay_ce;\nreg        C_idelay_ld;\nreg        D_idelay_ld;\nreg        C_pi_rst_dqs_find;\nreg        D_pi_rst_dqs_find;\nreg [29:0] C_fine_delay;\nreg [29:0] D_fine_delay;\nreg        C_fine_delay_sel;\nreg        D_fine_delay_sel;\n\nwire       pi_iserdes_rst;\n\nwire       A_if_empty;\nwire       B_if_empty;\nwire       C_if_empty;\nwire       D_if_empty;\nwire       A_byte_rd_en;\nwire       B_byte_rd_en;\nwire       C_byte_rd_en;\nwire       D_byte_rd_en;\nwire       A_if_a_empty;\nwire       B_if_a_empty;\nwire       C_if_a_empty;\nwire       D_if_a_empty;\n\n\n\n\n\n\n\n\nwire       A_of_full;\nwire       B_of_full;\nwire       C_of_full;\nwire       D_of_full;\nwire       A_of_ctl_full;\nwire       B_of_ctl_full;\nwire       C_of_ctl_full;\nwire       D_of_ctl_full;\nwire       A_of_data_full;\nwire       B_of_data_full;\nwire       C_of_data_full;\nwire       D_of_data_full;\nwire       A_of_a_full;\nwire       B_of_a_full;\nwire       C_of_a_full;\nwire       D_of_a_full;\nwire       A_pre_fifo_a_full;\nwire       B_pre_fifo_a_full;\nwire       C_pre_fifo_a_full;\nwire       D_pre_fifo_a_full;\nwire       A_of_ctl_a_full;\nwire       B_of_ctl_a_full;\nwire       C_of_ctl_a_full;\nwire       D_of_ctl_a_full;\nwire       A_of_data_a_full;\nwire       B_of_data_a_full;\nwire       C_of_data_a_full;\nwire       D_of_data_a_full;\nwire       A_pre_data_a_full;\nwire       B_pre_data_a_full;\nwire       C_pre_data_a_full;\nwire       D_pre_data_a_full;\nwire  [LP_DDR_CK_WIDTH*6-1:0]  A_ddr_clk;  \nwire  [LP_DDR_CK_WIDTH*6-1:0]  B_ddr_clk;  \nwire  [LP_DDR_CK_WIDTH*6-1:0]  C_ddr_clk;  \nwire  [LP_DDR_CK_WIDTH*6-1:0]  D_ddr_clk;  \n\nwire [3:0] dummy_data;\n\nwire  [31:0]  _phy_ctl_wd;\n\nwire [1:0] phy_encalib;\n\nassign pi_dqs_found_all =\n           (! PRESENT_DATA_A | A_pi_dqs_found) &\n           (! PRESENT_DATA_B | B_pi_dqs_found) &\n           (! PRESENT_DATA_C | C_pi_dqs_found) &\n           (! PRESENT_DATA_D | D_pi_dqs_found) ;\n\nassign  pi_dqs_found_any =\n           ( PRESENT_DATA_A & A_pi_dqs_found) |\n           ( PRESENT_DATA_B & B_pi_dqs_found) |\n           ( PRESENT_DATA_C & C_pi_dqs_found) |\n           ( PRESENT_DATA_D & D_pi_dqs_found) ;\n\nassign  pi_phase_locked_all =\n           (! PRESENT_DATA_A | A_pi_phase_locked) &\n           (! PRESENT_DATA_B | B_pi_phase_locked) &\n           (! PRESENT_DATA_C | C_pi_phase_locked) &\n           (! PRESENT_DATA_D | D_pi_phase_locked);\n\nwire       dangling_inputs = (& dummy_data) & input_sink & 1'b0;  \n                              \n                              \n                              \n                              \n                              \n\n\nassign      if_empty = !if_empty_def  ? (A_if_empty | B_if_empty | C_if_empty | D_if_empty) : (A_if_empty & B_if_empty & C_if_empty & D_if_empty);\nassign      byte_rd_en = !if_empty_def  ? (A_byte_rd_en & B_byte_rd_en & C_byte_rd_en & D_byte_rd_en) :\n                                          (A_byte_rd_en | B_byte_rd_en | C_byte_rd_en | D_byte_rd_en);\nassign      if_empty_or = (A_if_empty | B_if_empty | C_if_empty | D_if_empty);\nassign      if_empty_and = (A_if_empty & B_if_empty & C_if_empty & D_if_empty);\nassign      if_a_empty = A_if_a_empty | B_if_a_empty | C_if_a_empty | D_if_a_empty;\n\n\nassign      of_ctl_full     = A_of_ctl_full  | B_of_ctl_full  | C_of_ctl_full  | D_of_ctl_full ;\nassign      of_data_full    = A_of_data_full  | B_of_data_full  | C_of_data_full  | D_of_data_full ;\nassign      of_ctl_a_full   = A_of_ctl_a_full  | B_of_ctl_a_full  | C_of_ctl_a_full  | D_of_ctl_a_full ;\nassign      of_data_a_full  = A_of_data_a_full  | B_of_data_a_full  | C_of_data_a_full  | D_of_data_a_full | dangling_inputs   ;\nassign      pre_data_a_full = A_pre_data_a_full | B_pre_data_a_full | C_pre_data_a_full | D_pre_data_a_full;\n\n\nfunction [79:0] part_select_80;\ninput [319:0] vector;\ninput [1:0]  select;\nbegin\n     case (select)\n     2'b00 : part_select_80[79:0] = vector[1*80-1:0*80];\n     2'b01 : part_select_80[79:0] = vector[2*80-1:1*80];\n     2'b10 : part_select_80[79:0] = vector[3*80-1:2*80];\n     2'b11 : part_select_80[79:0] = vector[4*80-1:3*80];\n     endcase\nend\nendfunction\n\nwire [319:0]     phy_dout_remap;\n\nreg         rst_out_trig = 1'b0;\nreg [31:0]  rclk_delay;\nreg         rst_edge1 = 1'b0;\nreg         rst_edge2 = 1'b0;\nreg         rst_edge3 = 1'b0;\nreg         rst_edge_detect = 1'b0;\nwire        rclk_;\nreg         rst_out_start = 1'b0 ;\nreg         rst_primitives=0;\nreg         A_rst_primitives=0;\nreg         B_rst_primitives=0;\nreg         C_rst_primitives=0;\nreg         D_rst_primitives=0;\n\n`ifdef  USE_PHY_CONTROL_TEST\n    wire [15:0] test_output;\n    wire [15:0] test_input;\n    wire [2:0]  test_select=0;\n    wire        scan_enable = 0;\n`endif\n\ngenerate\n\ngenvar i;\n\nif (RCLK_SELECT_LANE == \"A\")  begin\n     assign rclk_ = A_rclk;\n     assign pi_iserdes_rst = A_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"B\")  begin\n     assign rclk_ = B_rclk;\n     assign pi_iserdes_rst = B_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"C\") begin\n     assign rclk_ = C_rclk;\n     assign pi_iserdes_rst = C_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"D\") begin\n     assign rclk_ = D_rclk;\n     assign pi_iserdes_rst = D_pi_iserdes_rst;\n     end\nelse  begin\n     assign rclk_ = B_rclk; \n     end\n\nendgenerate\n\nassign ddr_clk[LP_DDR_CK_WIDTH*6-1:0]                   = A_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*12-1:LP_DDR_CK_WIDTH*6]  = B_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*18-1:LP_DDR_CK_WIDTH*12] = C_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*24-1:LP_DDR_CK_WIDTH*18] = D_ddr_clk;\n\nassign pi_phase_locked_lanes =\n           {(! PRESENT_DATA_D[0] | D_pi_phase_locked),\n            (! PRESENT_DATA_C[0] | C_pi_phase_locked) ,\n            (! PRESENT_DATA_B[0] | B_pi_phase_locked) ,\n            (! PRESENT_DATA_A[0] | A_pi_phase_locked)};\n\nassign pi_dqs_found_lanes = {D_pi_dqs_found, C_pi_dqs_found, B_pi_dqs_found, A_pi_dqs_found};\n\n\nreg rclk_delay_11;\nalways @(rclk_delay[11]) begin : rclk_delay_11_blk\n    if ( rclk_delay[11])\n       rclk_delay_11 = 1;\n    else\n       rclk_delay_11 = 0;\nend\n\nalways @(posedge phy_clk or posedge rst ) begin\n\n    if ( rst)  begin\n       rst_out   <= #1 0;\n    end\n    else begin\n       if ( rclk_delay_11)\n         rst_out <= #1 1;\n    end\nend\n\nalways @(posedge phy_clk ) begin\n   \n    rst_primitives    <= !phy_ctl_ready ;\n    A_rst_primitives  <= rst_primitives ;\n    B_rst_primitives  <= rst_primitives ;\n    C_rst_primitives  <= rst_primitives ;\n    D_rst_primitives  <= rst_primitives ;\n\n    rclk_delay        <= #1 (rclk_delay << 1) | (!rst_primitives && phyGo);\n    mcGo              <= #1 rst_out ;\n\nend\n\n\n  (* ASYNC_REG = \"TRUE\" *) reg A_pi_rst_div2;\n  (* ASYNC_REG = \"TRUE\" *) reg B_pi_rst_div2;\n  (* ASYNC_REG = \"TRUE\" *) reg C_pi_rst_div2;\n  (* ASYNC_REG = \"TRUE\" *) reg D_pi_rst_div2;\ngenerate\n  if (PI_DIV2_INCDEC == \"TRUE\") begin: phaser_in_div2\n    (* ASYNC_REG = \"TRUE\" *) reg pi_rst_div2r1;\n    (* ASYNC_REG = \"TRUE\" *) reg pi_rst_div2r2;\n\n    always @(posedge clk_div2) begin\n      pi_rst_div2r1 <= rst_primitives;\n      pi_rst_div2r2 <= pi_rst_div2r1;\n      A_pi_rst_div2 <= pi_rst_div2r2;\n      B_pi_rst_div2 <= pi_rst_div2r2;\n      C_pi_rst_div2 <= pi_rst_div2r2;\n      D_pi_rst_div2 <= pi_rst_div2r2;\n    end\n  end else begin: phaser_in_div4\n    always @ (*) begin\n      A_pi_rst_div2 <= 1'b0;\n      B_pi_rst_div2 <= 1'b0;\n      C_pi_rst_div2 <= 1'b0;\n      D_pi_rst_div2 <= 1'b0;\n    end\n  end\nendgenerate\n\ngenerate\n\n  if (BYTE_LANES[0]) begin\n      assign dummy_data[0]             = 0;\n  end\n  else begin\n      assign dummy_data[0]      = &phy_dout_remap[1*80-1:0*80];\n  end\n  if (BYTE_LANES[1]) begin\n      assign dummy_data[1]             = 0;\n  end\n  else begin\n      assign dummy_data[1]      = &phy_dout_remap[2*80-1:1*80];\n  end\n  if (BYTE_LANES[2]) begin\n      assign dummy_data[2]             = 0;\n  end\n  else begin\n      assign dummy_data[2]       = &phy_dout_remap[3*80-1:2*80];\n  end\n  if (BYTE_LANES[3]) begin\n      assign dummy_data[3]             = 0;\n  end\n  else begin\n      assign dummy_data[3]       = &phy_dout_remap[4*80-1:3*80];\n  end\n\n  if (PRESENT_DATA_A) begin\n      assign A_of_data_full     = A_of_full;\n      assign A_of_ctl_full      = 0;\n      assign A_of_data_a_full   = A_of_a_full;\n      assign A_of_ctl_a_full    = 0;\n      assign A_pre_data_a_full  = A_pre_fifo_a_full;\n  end\n  else  begin\n      assign A_of_ctl_full      = A_of_full;\n      assign A_of_data_full     = 0;\n      assign A_of_ctl_a_full    = A_of_a_full;\n      assign A_of_data_a_full   = 0;\n      assign A_pre_data_a_full  = 0;\n  end\n  if (PRESENT_DATA_B) begin\n      assign B_of_data_full     = B_of_full;\n      assign B_of_ctl_full      = 0;\n      assign B_of_data_a_full   = B_of_a_full;\n      assign B_of_ctl_a_full    = 0;\n      assign B_pre_data_a_full  = B_pre_fifo_a_full;\n  end\n  else  begin\n      assign B_of_ctl_full      = B_of_full;\n      assign B_of_data_full     = 0;\n      assign B_of_ctl_a_full    = B_of_a_full;\n      assign B_of_data_a_full   = 0;\n      assign B_pre_data_a_full  = 0;\n  end\n  if (PRESENT_DATA_C) begin\n      assign C_of_data_full     = C_of_full;\n      assign C_of_ctl_full      = 0;\n      assign C_of_data_a_full   = C_of_a_full;\n      assign C_of_ctl_a_full    = 0;\n      assign C_pre_data_a_full  = C_pre_fifo_a_full;\n  end\n  else  begin\n      assign C_of_ctl_full       = C_of_full;\n      assign C_of_data_full      = 0;\n      assign C_of_ctl_a_full     = C_of_a_full;\n      assign C_of_data_a_full    = 0;\n      assign C_pre_data_a_full    = 0;\n  end\n  if (PRESENT_DATA_D) begin\n      assign D_of_data_full      = D_of_full;\n      assign D_of_ctl_full       = 0;\n      assign D_of_data_a_full    = D_of_a_full;\n      assign D_of_ctl_a_full     = 0;\n      assign D_pre_data_a_full   = D_pre_fifo_a_full;\n  end\n  else  begin\n      assign D_of_ctl_full       = D_of_full;\n      assign D_of_data_full      = 0;\n      assign D_of_ctl_a_full     = D_of_a_full;\n      assign D_of_data_a_full    = 0;\n      assign D_pre_data_a_full   = 0;\n  end\n\n  if (PRESENT_DATA_A )\n      case ( LANE_REMAP[1:0]   )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[79:0];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[79:0];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[79:0];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[79:0];\n      endcase\n  else\n      case ( LANE_REMAP[1:0]   )\n      2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n      2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n      2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n      2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n      endcase\n\n  if (PRESENT_DATA_B )\n      case ( LANE_REMAP[5:4]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[159:80];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[159:80];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[159:80];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[159:80];\n      endcase\n   else\n     if (HIGHEST_LANE > 1)\n        case ( LANE_REMAP[5:4]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n        endcase\n\n  if (PRESENT_DATA_C)\n      case ( LANE_REMAP[9:8]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[239:160];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[239:160];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[239:160];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[239:160];\n      endcase\n  else\n     if (HIGHEST_LANE > 2)\n        case ( LANE_REMAP[9:8]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n        endcase\n\n  if (PRESENT_DATA_D )\n      case ( LANE_REMAP[13:12]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[319:240];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[319:240];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[319:240];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[319:240];\n      endcase\n  else\n     if (HIGHEST_LANE > 3)\n        case ( LANE_REMAP[13:12]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n      endcase\n\nif (HIGHEST_LANE > 1)\n assign _phy_ctl_wd = {phy_ctl_wd[31:23], data_offset, phy_ctl_wd[16:0]};\nif (HIGHEST_LANE == 1)\n assign _phy_ctl_wd = phy_ctl_wd;\n\n\n\nBUFIO rclk_buf(.I(rclk_), .O(rclk) );\n\nif ( BYTE_LANES[0] ) begin : ddr_byte_lane_A\n\n  assign phy_dout_remap[79:0] = part_select_80(phy_dout, (LANE_REMAP[1:0]));\n\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"A\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[0] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[11:0]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[11:0]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (A_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (A_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (A_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (A_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (A_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (A_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (A_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (A_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (A_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (A_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (A_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (A_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (A_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (A_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (A_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (A_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (A_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_A(\n      .mem_dq_out            (mem_dq_out[11:0]),\n      .mem_dq_ts             (mem_dq_ts[11:0]),\n      .mem_dq_in             (mem_dq_in[9:0]),\n      .mem_dqs_out           (mem_dqs_out[0]),\n      .mem_dqs_ts            (mem_dqs_ts[0]),\n      .mem_dqs_in            (mem_dqs_in[0]),\n      .rst                   (A_rst_primitives),\n      .rst_pi_div2           (A_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (A_ddr_clk),\n      .rclk                  (A_rclk),\n      .pi_dqs_found          (A_pi_dqs_found),\n      .dqs_out_of_range      (A_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (A_if_a_empty),\n      .if_empty              (A_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (A_of_a_full),\n      .of_full               (A_of_full),\n      .pre_fifo_a_full       (A_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[79:0]),\n      .phy_dout              (phy_dout_remap[79:0]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({B_byte_rd_en,C_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (A_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (A_idelay_ce),\n      .idelay_ld             (A_idelay_ld),\n      .pi_rst_dqs_find       (A_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (A_po_fine_enable),\n      .po_coarse_enable      (A_po_coarse_enable),\n      .po_fine_inc           (A_po_fine_inc),\n      .po_coarse_inc         (A_po_coarse_inc),\n      .po_counter_load_en    (A_po_counter_load_en),\n      .po_counter_read_en    (A_po_counter_read_en),\n      .po_counter_load_val   (A_po_counter_load_val),\n      .po_coarse_overflow    (A_po_coarse_overflow),\n      .po_fine_overflow      (A_po_fine_overflow),\n      .po_counter_read_val   (A_po_counter_read_val),\n      .po_sel_fine_oclk_delay(A_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (A_pi_fine_enable),\n      .pi_fine_inc           (A_pi_fine_inc),\n      .pi_counter_load_en    (A_pi_counter_load_en),\n      .pi_counter_read_en    (A_pi_counter_read_en),\n      .pi_counter_load_val   (A_pi_counter_load_val),\n      .pi_fine_overflow      (A_pi_fine_overflow),\n      .pi_counter_read_val   (A_pi_counter_read_val),\n      .pi_iserdes_rst        (A_pi_iserdes_rst),\n      .pi_phase_locked       (A_pi_phase_locked),\n      .fine_delay            (A_fine_delay),\n      .fine_delay_sel        (A_fine_delay_sel)\n);\n\nend\nelse begin : no_ddr_byte_lane_A\n       assign A_of_a_full           = 1'b0;\n       assign A_of_full             = 1'b0;\n       assign A_pre_fifo_a_full     = 1'b0;\n       assign A_if_empty            = 1'b0;\n       assign A_byte_rd_en          = 1'b1;\n       assign A_if_a_empty          = 1'b0;\n       assign A_pi_phase_locked     = 1;\n       assign A_pi_dqs_found        = 1;\n       assign A_rclk                = 0;\n       assign A_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign A_pi_counter_read_val = 0;\n       assign A_po_counter_read_val = 0;\n       assign A_pi_fine_overflow    = 0;\n       assign A_po_coarse_overflow  = 0;\n       assign A_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[1] ) begin : ddr_byte_lane_B\n\n  assign phy_dout_remap[159:80] = part_select_80(phy_dout, (LANE_REMAP[5:4]));\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"B\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[1] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[23:12]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[23:12]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (B_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (B_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (B_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (B_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (B_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (B_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (B_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (B_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (B_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (B_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (B_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (B_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (B_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (B_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (B_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (B_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (B_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (B_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_B(\n      .mem_dq_out            (mem_dq_out[23:12]),\n      .mem_dq_ts             (mem_dq_ts[23:12]),\n      .mem_dq_in             (mem_dq_in[19:10]),\n      .mem_dqs_out           (mem_dqs_out[1]),\n      .mem_dqs_ts            (mem_dqs_ts[1]),\n      .mem_dqs_in            (mem_dqs_in[1]),\n      .rst                   (B_rst_primitives),\n      .rst_pi_div2           (B_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (B_ddr_clk),\n      .rclk                  (B_rclk),\n      .pi_dqs_found          (B_pi_dqs_found),\n      .dqs_out_of_range      (B_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (B_if_a_empty),\n      .if_empty              (B_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (B_of_a_full),\n      .of_full               (B_of_full),\n      .pre_fifo_a_full       (B_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[159:80]),\n      .phy_dout              (phy_dout_remap[159:80]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,C_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (B_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (B_idelay_ce),\n      .idelay_ld             (B_idelay_ld),\n      .pi_rst_dqs_find       (B_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (B_po_fine_enable),\n      .po_coarse_enable      (B_po_coarse_enable),\n      .po_fine_inc           (B_po_fine_inc),\n      .po_coarse_inc         (B_po_coarse_inc),\n      .po_counter_load_en    (B_po_counter_load_en),\n      .po_counter_read_en    (B_po_counter_read_en),\n      .po_counter_load_val   (B_po_counter_load_val),\n      .po_coarse_overflow    (B_po_coarse_overflow),\n      .po_fine_overflow      (B_po_fine_overflow),\n      .po_counter_read_val   (B_po_counter_read_val),\n      .po_sel_fine_oclk_delay(B_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (B_pi_fine_enable),\n      .pi_fine_inc           (B_pi_fine_inc),\n      .pi_counter_load_en    (B_pi_counter_load_en),\n      .pi_counter_read_en    (B_pi_counter_read_en),\n      .pi_counter_load_val   (B_pi_counter_load_val),\n      .pi_fine_overflow      (B_pi_fine_overflow),\n      .pi_counter_read_val   (B_pi_counter_read_val),\n      .pi_iserdes_rst        (B_pi_iserdes_rst),\n      .pi_phase_locked       (B_pi_phase_locked),\n      .fine_delay            (B_fine_delay),\n      .fine_delay_sel        (B_fine_delay_sel)\n);\nend\nelse begin : no_ddr_byte_lane_B\n       assign B_of_a_full           = 1'b0;\n       assign B_of_full             = 1'b0;\n       assign B_pre_fifo_a_full     = 1'b0;\n       assign B_if_empty            = 1'b0;\n       assign B_if_a_empty          = 1'b0;\n       assign B_byte_rd_en          = 1'b1;\n       assign B_pi_phase_locked     = 1;\n       assign B_pi_dqs_found        = 1;\n       assign B_rclk                = 0;\n       assign B_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign B_pi_counter_read_val = 0;\n       assign B_po_counter_read_val = 0;\n       assign B_pi_fine_overflow    = 0;\n       assign B_po_coarse_overflow  = 0;\n       assign B_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[2] ) begin : ddr_byte_lane_C\n\n  assign phy_dout_remap[239:160] = part_select_80(phy_dout, (LANE_REMAP[9:8]));\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"C\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[2] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[35:24]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[35:24]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (C_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (C_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (C_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (C_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (C_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (C_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (C_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (C_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (C_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (C_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (C_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (C_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (C_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (C_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (C_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (C_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (C_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (C_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_C(\n      .mem_dq_out            (mem_dq_out[35:24]),\n      .mem_dq_ts             (mem_dq_ts[35:24]),\n      .mem_dq_in             (mem_dq_in[29:20]),\n      .mem_dqs_out           (mem_dqs_out[2]),\n      .mem_dqs_ts            (mem_dqs_ts[2]),\n      .mem_dqs_in            (mem_dqs_in[2]),\n      .rst                   (C_rst_primitives),\n      .rst_pi_div2           (C_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (C_ddr_clk),\n      .rclk                  (C_rclk),\n      .pi_dqs_found          (C_pi_dqs_found),\n      .dqs_out_of_range      (C_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (C_if_a_empty),\n      .if_empty              (C_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (C_of_a_full),\n      .of_full               (C_of_full),\n      .pre_fifo_a_full       (C_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[239:160]),\n      .phy_dout              (phy_dout_remap[239:160]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,B_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (C_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (C_idelay_ce),\n      .idelay_ld             (C_idelay_ld),\n      .pi_rst_dqs_find       (C_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (C_po_fine_enable),\n      .po_coarse_enable      (C_po_coarse_enable),\n      .po_fine_inc           (C_po_fine_inc),\n      .po_coarse_inc         (C_po_coarse_inc),\n      .po_counter_load_en    (C_po_counter_load_en),\n      .po_counter_read_en    (C_po_counter_read_en),\n      .po_counter_load_val   (C_po_counter_load_val),\n      .po_coarse_overflow    (C_po_coarse_overflow),\n      .po_fine_overflow      (C_po_fine_overflow),\n      .po_counter_read_val   (C_po_counter_read_val),\n      .po_sel_fine_oclk_delay(C_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (C_pi_fine_enable),\n      .pi_fine_inc           (C_pi_fine_inc),\n      .pi_counter_load_en    (C_pi_counter_load_en),\n      .pi_counter_read_en    (C_pi_counter_read_en),\n      .pi_counter_load_val   (C_pi_counter_load_val),\n      .pi_fine_overflow      (C_pi_fine_overflow),\n      .pi_counter_read_val   (C_pi_counter_read_val),\n      .pi_iserdes_rst        (C_pi_iserdes_rst),\n      .pi_phase_locked       (C_pi_phase_locked),\n      .fine_delay            (C_fine_delay),\n      .fine_delay_sel        (C_fine_delay_sel)\n);\n\nend\nelse begin : no_ddr_byte_lane_C\n       assign C_of_a_full           = 1'b0;\n       assign C_of_full             = 1'b0;\n       assign C_pre_fifo_a_full     = 1'b0;\n       assign C_if_empty            = 1'b0;\n       assign C_byte_rd_en          = 1'b1;\n       assign C_if_a_empty          = 1'b0;\n       assign C_pi_phase_locked     = 1;\n       assign C_pi_dqs_found        = 1;\n       assign C_rclk                = 0;\n       assign C_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign C_pi_counter_read_val = 0;\n       assign C_po_counter_read_val = 0;\n       assign C_pi_fine_overflow    = 0;\n       assign C_po_coarse_overflow  = 0;\n       assign C_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[3] ) begin : ddr_byte_lane_D\n  assign phy_dout_remap[319:240] = part_select_80(phy_dout, (LANE_REMAP[13:12]));\n\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"D\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[3] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[47:36]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[47:36]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (D_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (D_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (D_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (D_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (D_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (D_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (D_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (D_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (D_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (D_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (D_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (D_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (D_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (D_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (D_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (D_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (D_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (D_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_D(\n      .mem_dq_out            (mem_dq_out[47:36]),\n      .mem_dq_ts             (mem_dq_ts[47:36]),\n      .mem_dq_in             (mem_dq_in[39:30]),\n      .mem_dqs_out           (mem_dqs_out[3]),\n      .mem_dqs_ts            (mem_dqs_ts[3]),\n      .mem_dqs_in            (mem_dqs_in[3]),\n      .rst                   (D_rst_primitives),\n      .rst_pi_div2           (D_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (D_ddr_clk),\n      .rclk                  (D_rclk),\n      .pi_dqs_found          (D_pi_dqs_found),\n      .dqs_out_of_range      (D_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (D_if_a_empty),\n      .if_empty              (D_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (D_of_a_full),\n      .of_full               (D_of_full),\n      .pre_fifo_a_full       (D_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[319:240]),\n      .phy_dout              (phy_dout_remap[319:240]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (D_idelay_ce),\n      .idelay_ld             (D_idelay_ld),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,B_byte_rd_en,C_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (D_byte_rd_en),\n\n      .pi_rst_dqs_find       (D_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (D_po_fine_enable),\n      .po_coarse_enable      (D_po_coarse_enable),\n      .po_fine_inc           (D_po_fine_inc),\n      .po_coarse_inc         (D_po_coarse_inc),\n      .po_counter_load_en    (D_po_counter_load_en),\n      .po_counter_read_en    (D_po_counter_read_en),\n      .po_counter_load_val   (D_po_counter_load_val),\n      .po_coarse_overflow    (D_po_coarse_overflow),\n      .po_fine_overflow      (D_po_fine_overflow),\n      .po_counter_read_val   (D_po_counter_read_val),\n      .po_sel_fine_oclk_delay(D_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (D_pi_fine_enable),\n      .pi_fine_inc           (D_pi_fine_inc),\n      .pi_counter_load_en    (D_pi_counter_load_en),\n      .pi_counter_read_en    (D_pi_counter_read_en),\n      .pi_counter_load_val   (D_pi_counter_load_val),\n      .pi_fine_overflow      (D_pi_fine_overflow),\n      .pi_counter_read_val   (D_pi_counter_read_val),\n      .pi_iserdes_rst        (D_pi_iserdes_rst),\n      .pi_phase_locked       (D_pi_phase_locked),\n      .fine_delay            (D_fine_delay),\n      .fine_delay_sel        (D_fine_delay_sel)\n);\nend\nelse begin : no_ddr_byte_lane_D\n       assign D_of_a_full           = 1'b0;\n       assign D_of_full             = 1'b0;\n       assign D_pre_fifo_a_full     = 1'b0;\n       assign D_if_empty            = 1'b0;\n       assign D_byte_rd_en          = 1'b1;\n       assign D_if_a_empty          = 1'b0;\n       assign D_rclk                = 0;\n       assign D_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign D_pi_dqs_found        = 1;\n       assign D_pi_phase_locked     = 1;\n       assign D_pi_counter_read_val = 0;\n       assign D_po_counter_read_val = 0;\n       assign D_pi_fine_overflow    = 0;\n       assign D_po_coarse_overflow  = 0;\n       assign D_po_fine_overflow    = 0;\nend\nendgenerate\n\n\nassign phaser_ctl_bus[MSB_RANK_SEL_I : MSB_RANK_SEL_I - 7] = in_rank;\n\nPHY_CONTROL #(\n  .AO_WRLVL_EN          ( PC_AO_WRLVL_EN),\n  .AO_TOGGLE            ( PC_AO_TOGGLE),\n  .BURST_MODE           ( PC_BURST_MODE),\n  .CO_DURATION          ( PC_CO_DURATION ),\n  .CLK_RATIO            ( PC_CLK_RATIO),\n  .DATA_CTL_A_N         ( PC_DATA_CTL_A),\n  .DATA_CTL_B_N         ( PC_DATA_CTL_B),\n  .DATA_CTL_C_N         ( PC_DATA_CTL_C),\n  .DATA_CTL_D_N         ( PC_DATA_CTL_D),\n  .DI_DURATION          ( PC_DI_DURATION ),\n  .DO_DURATION          ( PC_DO_DURATION ),\n  .EVENTS_DELAY         ( PC_EVENTS_DELAY),\n  .FOUR_WINDOW_CLOCKS   ( PC_FOUR_WINDOW_CLOCKS),\n  .MULTI_REGION         ( PC_MULTI_REGION ),\n  .PHY_COUNT_ENABLE     ( PC_PHY_COUNT_EN),\n  .DISABLE_SEQ_MATCH    ( PC_DISABLE_SEQ_MATCH),\n  .SYNC_MODE            ( PC_SYNC_MODE),\n  .CMD_OFFSET           ( PC_CMD_OFFSET),\n\n  .RD_CMD_OFFSET_0      ( PC_RD_CMD_OFFSET_0),\n  .RD_CMD_OFFSET_1      ( PC_RD_CMD_OFFSET_1),\n  .RD_CMD_OFFSET_2      ( PC_RD_CMD_OFFSET_2),\n  .RD_CMD_OFFSET_3      ( PC_RD_CMD_OFFSET_3),\n  .RD_DURATION_0        ( PC_RD_DURATION_0),\n  .RD_DURATION_1        ( PC_RD_DURATION_1),\n  .RD_DURATION_2        ( PC_RD_DURATION_2),\n  .RD_DURATION_3        ( PC_RD_DURATION_3),\n  .WR_CMD_OFFSET_0      ( PC_WR_CMD_OFFSET_0),\n  .WR_CMD_OFFSET_1      ( PC_WR_CMD_OFFSET_1),\n  .WR_CMD_OFFSET_2      ( PC_WR_CMD_OFFSET_2),\n  .WR_CMD_OFFSET_3      ( PC_WR_CMD_OFFSET_3),\n  .WR_DURATION_0        ( PC_WR_DURATION_0),\n  .WR_DURATION_1        ( PC_WR_DURATION_1),\n  .WR_DURATION_2        ( PC_WR_DURATION_2),\n  .WR_DURATION_3        ( PC_WR_DURATION_3)\n) phy_control_i (\n  .AUXOUTPUT            (aux_out),\n  .INBURSTPENDING       (phaser_ctl_bus[MSB_BURST_PEND_PI:MSB_BURST_PEND_PI-3]),\n  .INRANKA              (in_rank[1:0]),\n  .INRANKB              (in_rank[3:2]),\n  .INRANKC              (in_rank[5:4]),\n  .INRANKD              (in_rank[7:6]),\n  .OUTBURSTPENDING      (phaser_ctl_bus[MSB_BURST_PEND_PO:MSB_BURST_PEND_PO-3]),\n  .PCENABLECALIB        (phy_encalib),\n  .PHYCTLALMOSTFULL     (phy_ctl_a_full),\n  .PHYCTLEMPTY          (phy_ctl_empty),\n  .PHYCTLFULL           (phy_ctl_full),\n  .PHYCTLREADY          (phy_ctl_ready),\n  .MEMREFCLK            (mem_refclk),\n  .PHYCLK               (phy_ctl_clk),\n  .PHYCTLMSTREMPTY      (phy_ctl_mstr_empty),\n  .PHYCTLWD             (_phy_ctl_wd),\n  .PHYCTLWRENABLE       (phy_ctl_wr),\n  .PLLLOCK              (pll_lock),\n  .REFDLLLOCK           (ref_dll_lock),        \n  .RESET                (rst),\n  .SYNCIN               (sync_pulse),\n  .READCALIBENABLE      (phy_read_calib),\n  .WRITECALIBENABLE     (phy_write_calib)\n`ifdef USE_PHY_CONTROL_TEST\n  , .TESTINPUT         (16'b0),\n    .TESTOUTPUT        (test_output),\n    .TESTSELECT        (test_select),\n    .SCANENABLEN       (scan_enable)\n`endif\n);\n\n\n\n\nalways @(posedge phy_clk ) begin\n    case (calib_sel[1:0])\n    2'h0: begin\n       po_coarse_overflow <= #1 A_po_coarse_overflow;\n       po_fine_overflow <= #1 A_po_fine_overflow;\n       po_counter_read_val <= #1 A_po_counter_read_val;\n\n       pi_fine_overflow <= #1 A_pi_fine_overflow;\n       pi_counter_read_val<= #1 A_pi_counter_read_val;\n\n       pi_phase_locked  <= #1 A_pi_phase_locked;\n       if ( calib_in_common)\n           pi_dqs_found     <= #1 pi_dqs_found_any;\n       else\n           pi_dqs_found     <= #1 A_pi_dqs_found;\n       pi_dqs_out_of_range <= #1 A_pi_dqs_out_of_range;\n      end\n\n    2'h1: begin\n       po_coarse_overflow     <= #1 B_po_coarse_overflow;\n       po_fine_overflow       <= #1 B_po_fine_overflow;\n       po_counter_read_val    <= #1 B_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 B_pi_fine_overflow;\n       pi_counter_read_val    <= #1 B_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 B_pi_phase_locked;\n       if ( calib_in_common)\n          pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n          pi_dqs_found           <= #1 B_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 B_pi_dqs_out_of_range;\n       end\n\n    2'h2: begin\n       po_coarse_overflow     <= #1 C_po_coarse_overflow;\n       po_fine_overflow       <= #1 C_po_fine_overflow;\n       po_counter_read_val    <= #1 C_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 C_pi_fine_overflow;\n       pi_counter_read_val    <= #1 C_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 C_pi_phase_locked;\n       if ( calib_in_common)\n           pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n           pi_dqs_found           <= #1 C_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 C_pi_dqs_out_of_range;\n      end\n\n    2'h3: begin\n       po_coarse_overflow     <= #1 D_po_coarse_overflow;\n       po_fine_overflow       <= #1 D_po_fine_overflow;\n       po_counter_read_val    <= #1 D_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 D_pi_fine_overflow;\n       pi_counter_read_val    <= #1 D_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 D_pi_phase_locked;\n       if ( calib_in_common)\n          pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n          pi_dqs_found           <= #1 D_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 D_pi_dqs_out_of_range;\n\n       end\n     default: begin\n        po_coarse_overflow <= po_coarse_overflow;\n     end\n    endcase\nend\n\nwire  B_mux_ctrl;\nwire  C_mux_ctrl;\nwire  D_mux_ctrl;\ngenerate\n  if (HIGHEST_LANE > 1)\n    assign B_mux_ctrl = ( !calib_zero_lanes[1] && ( ! calib_zero_ctrl || DATA_CTL_N[1]));\n  else\n    assign B_mux_ctrl = 0;\n  if (HIGHEST_LANE > 2)\n    assign C_mux_ctrl = ( !calib_zero_lanes[2] && (! calib_zero_ctrl || DATA_CTL_N[2]));\n  else\n    assign C_mux_ctrl = 0;\n  if (HIGHEST_LANE > 3)\n    assign D_mux_ctrl = ( !calib_zero_lanes[3] && ( ! calib_zero_ctrl || DATA_CTL_N[3]));\n  else\n    assign D_mux_ctrl = 0;\nendgenerate\n\nalways @(*) begin\n        A_pi_fine_enable          = 0;\n        A_pi_fine_inc             = 0;\n        A_pi_counter_load_en      = 0;\n        A_pi_counter_read_en      = 0;\n        A_pi_counter_load_val     = 0;\n        A_pi_rst_dqs_find         = 0;\n\n\n        A_po_fine_enable          = 0;\n        A_po_coarse_enable        = 0;\n        A_po_fine_inc             = 0;\n        A_po_coarse_inc           = 0;\n        A_po_counter_load_en      = 0;\n        A_po_counter_read_en      = 0;\n        A_po_counter_load_val     = 0;\n        A_po_sel_fine_oclk_delay  = 0;\n\n        A_idelay_ce               = 0;\n        A_idelay_ld               = 0;\n        A_fine_delay              = 0;\n        A_fine_delay_sel          = 0;\n\n        B_pi_fine_enable          = 0;\n        B_pi_fine_inc   = 0;\n        B_pi_counter_load_en      = 0;\n        B_pi_counter_read_en      = 0;\n        B_pi_counter_load_val     = 0;\n        B_pi_rst_dqs_find         = 0;\n\n\n        B_po_fine_enable          = 0;\n        B_po_coarse_enable        = 0;\n        B_po_fine_inc             = 0;\n        B_po_coarse_inc           = 0;\n        B_po_counter_load_en      = 0;\n        B_po_counter_read_en      = 0;\n        B_po_counter_load_val     = 0;\n        B_po_sel_fine_oclk_delay  = 0;\n\n        B_idelay_ce               = 0;\n        B_idelay_ld               = 0;\n        B_fine_delay              = 0;\n        B_fine_delay_sel          = 0;\n\n        C_pi_fine_enable    = 0;\n        C_pi_fine_inc   = 0;\n        C_pi_counter_load_en      = 0;\n        C_pi_counter_read_en      = 0;\n        C_pi_counter_load_val     = 0;\n        C_pi_rst_dqs_find         = 0;\n\n\n        C_po_fine_enable          = 0;\n        C_po_coarse_enable        = 0;\n        C_po_fine_inc             = 0;\n        C_po_coarse_inc           = 0;\n        C_po_counter_load_en      = 0;\n        C_po_counter_read_en      = 0;\n        C_po_counter_load_val     = 0;\n        C_po_sel_fine_oclk_delay  = 0;\n\n        C_idelay_ce               = 0;\n        C_idelay_ld               = 0;\n        C_fine_delay              = 0;\n        C_fine_delay_sel          = 0;\n\n        D_pi_fine_enable          = 0;\n        D_pi_fine_inc             = 0;\n        D_pi_counter_load_en      = 0;\n        D_pi_counter_read_en      = 0;\n        D_pi_counter_load_val     = 0;\n        D_pi_rst_dqs_find         = 0;\n\n\n        D_po_fine_enable          = 0;\n        D_po_coarse_enable        = 0;\n        D_po_fine_inc             = 0;\n        D_po_coarse_inc           = 0;\n        D_po_counter_load_en      = 0;\n        D_po_counter_read_en      = 0;\n        D_po_counter_load_val     = 0;\n        D_po_sel_fine_oclk_delay  = 0;\n\n        D_idelay_ce               = 0;\n        D_idelay_ld               = 0;\n        D_fine_delay              = 0;\n        D_fine_delay_sel          = 0;\n\n    if ( calib_sel[2]) begin\n    \n        A_pi_fine_enable          = 0;\n        A_pi_fine_inc             = 0;\n        A_pi_counter_load_en      = 0;\n        A_pi_counter_read_en      = 0;\n        A_pi_counter_load_val     = 0;\n    A_pi_rst_dqs_find         = 0;\n\n\n        A_po_fine_enable          = 0;\n        A_po_coarse_enable        = 0;\n        A_po_fine_inc             = 0;\n        A_po_coarse_inc           = 0;\n        A_po_counter_load_en      = 0;\n        A_po_counter_read_en      = 0;\n        A_po_counter_load_val     = 0;\n    A_po_sel_fine_oclk_delay  = 0;\n\n        A_idelay_ce               = 0;\n        A_idelay_ld               = 0;\n        A_fine_delay              = 0;\n        A_fine_delay_sel          = 0;\n\n        B_pi_fine_enable          = 0;\n        B_pi_fine_inc             = 0;\n        B_pi_counter_load_en      = 0;\n        B_pi_counter_read_en      = 0;\n        B_pi_counter_load_val     = 0;\n    B_pi_rst_dqs_find         = 0;\n\n\n        B_po_fine_enable          = 0;\n        B_po_coarse_enable        = 0;\n        B_po_fine_inc             = 0;\n        B_po_coarse_inc           = 0;\n        B_po_counter_load_en      = 0;\n        B_po_counter_read_en      = 0;\n        B_po_counter_load_val     = 0;\n    B_po_sel_fine_oclk_delay  = 0;\n\n        B_idelay_ce               = 0;\n        B_idelay_ld               = 0;\n        B_fine_delay              = 0;\n        B_fine_delay_sel          = 0;\n\n\n        C_pi_fine_enable          = 0;\n        C_pi_fine_inc             = 0;\n        C_pi_counter_load_en      = 0;\n        C_pi_counter_read_en      = 0;\n        C_pi_counter_load_val     = 0;\n    C_pi_rst_dqs_find         = 0;\n\n\n        C_po_fine_enable          = 0;\n        C_po_coarse_enable        = 0;\n        C_po_fine_inc             = 0;\n        C_po_coarse_inc           = 0;\n        C_po_counter_load_en      = 0;\n        C_po_counter_read_en      = 0;\n        C_po_counter_load_val     = 0;\n    C_po_sel_fine_oclk_delay  = 0;\n\n        C_idelay_ce               = 0;\n        C_idelay_ld               = 0;\n        C_fine_delay              = 0;\n        C_fine_delay_sel          = 0;\n\n\n        D_pi_fine_enable          = 0;\n        D_pi_fine_inc             = 0;\n        D_pi_counter_load_en      = 0;\n        D_pi_counter_read_en      = 0;\n        D_pi_counter_load_val     = 0;\n    D_pi_rst_dqs_find         = 0;\n\n\n        D_po_fine_enable          = 0;\n        D_po_coarse_enable        = 0;\n        D_po_fine_inc             = 0;\n        D_po_coarse_inc           = 0;\n        D_po_counter_load_en      = 0;\n        D_po_counter_read_en      = 0;\n        D_po_counter_load_val     = 0;\n    D_po_sel_fine_oclk_delay  = 0;\n\n        D_idelay_ce               = 0;\n        D_idelay_ld               = 0;\n        D_fine_delay              = 0;\n        D_fine_delay_sel          = 0;\n\n    end else\n    if (calib_in_common) begin\n       \n       \n        if ( !calib_zero_lanes[0] && (! calib_zero_ctrl || DATA_CTL_N[0])) begin\n            A_pi_fine_enable          = pi_fine_enable;\n            A_pi_fine_inc             = pi_fine_inc;\n            A_pi_counter_load_en      = pi_counter_load_en;\n            A_pi_counter_read_en      = pi_counter_read_en;\n            A_pi_counter_load_val     = pi_counter_load_val;\n        A_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            A_po_fine_enable          = po_fine_enable;\n            A_po_coarse_enable        = po_coarse_enable;\n            A_po_fine_inc             = po_fine_inc;\n            A_po_coarse_inc           = po_coarse_inc;\n            A_po_counter_load_en      = po_counter_load_en;\n            A_po_counter_read_en      = po_counter_read_en;\n            A_po_counter_load_val     = po_counter_load_val;\n            A_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            A_idelay_ce               = idelay_ce;\n            A_idelay_ld               = idelay_ld;\n            A_fine_delay              = fine_delay ;\n            A_fine_delay_sel          = fine_delay_sel;\n        end\n\n        if ( B_mux_ctrl) begin\n            B_pi_fine_enable          = pi_fine_enable;\n            B_pi_fine_inc             = pi_fine_inc;\n            B_pi_counter_load_en      = pi_counter_load_en;\n            B_pi_counter_read_en      = pi_counter_read_en;\n            B_pi_counter_load_val     = pi_counter_load_val;\n        B_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            B_po_fine_enable          = po_fine_enable;\n            B_po_coarse_enable        = po_coarse_enable;\n            B_po_fine_inc             = po_fine_inc;\n            B_po_coarse_inc           = po_coarse_inc;\n            B_po_counter_load_en      = po_counter_load_en;\n            B_po_counter_read_en      = po_counter_read_en;\n            B_po_counter_load_val     = po_counter_load_val;\n            B_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            B_idelay_ce               = idelay_ce;\n            B_idelay_ld               = idelay_ld;\n            B_fine_delay              = fine_delay ;\n            B_fine_delay_sel          = fine_delay_sel;\n         end\n\n        if ( C_mux_ctrl) begin\n            C_pi_fine_enable          = pi_fine_enable;\n            C_pi_fine_inc             = pi_fine_inc;\n            C_pi_counter_load_en      = pi_counter_load_en;\n            C_pi_counter_read_en      = pi_counter_read_en;\n            C_pi_counter_load_val     = pi_counter_load_val;\n        C_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            C_po_fine_enable          = po_fine_enable;\n            C_po_coarse_enable        = po_coarse_enable;\n            C_po_fine_inc             = po_fine_inc;\n            C_po_coarse_inc           = po_coarse_inc;\n            C_po_counter_load_en      = po_counter_load_en;\n            C_po_counter_read_en      = po_counter_read_en;\n            C_po_counter_load_val     = po_counter_load_val;\n            C_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            C_idelay_ce               = idelay_ce;\n            C_idelay_ld               = idelay_ld;\n            C_fine_delay              = fine_delay ;\n            C_fine_delay_sel          = fine_delay_sel;\n        end\n\n        if ( D_mux_ctrl) begin\n            D_pi_fine_enable          = pi_fine_enable;\n            D_pi_fine_inc             = pi_fine_inc;\n            D_pi_counter_load_en      = pi_counter_load_en;\n            D_pi_counter_read_en      = pi_counter_read_en;\n            D_pi_counter_load_val     = pi_counter_load_val;\n        D_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            D_po_fine_enable          = po_fine_enable;\n            D_po_coarse_enable        = po_coarse_enable;\n            D_po_fine_inc             = po_fine_inc;\n            D_po_coarse_inc           = po_coarse_inc;\n            D_po_counter_load_en      = po_counter_load_en;\n            D_po_counter_read_en      = po_counter_read_en;\n            D_po_counter_load_val     = po_counter_load_val;\n            D_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            D_idelay_ce               = idelay_ce;\n            D_idelay_ld               = idelay_ld;\n            D_fine_delay              = fine_delay ;\n            D_fine_delay_sel          = fine_delay_sel;\n        end\n    end\n    else begin\n    \n\n\n    case (calib_sel[1:0])\n    0:  begin\n        A_pi_fine_enable          = pi_fine_enable;\n        A_pi_fine_inc             = pi_fine_inc;\n        A_pi_counter_load_en      = pi_counter_load_en;\n        A_pi_counter_read_en      = pi_counter_read_en;\n        A_pi_counter_load_val     = pi_counter_load_val;\n        A_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        A_po_fine_enable          = po_fine_enable;\n        A_po_coarse_enable        = po_coarse_enable;\n        A_po_fine_inc             = po_fine_inc;\n        A_po_coarse_inc           = po_coarse_inc;\n        A_po_counter_load_en      = po_counter_load_en;\n        A_po_counter_read_en      = po_counter_read_en;\n        A_po_counter_load_val     = po_counter_load_val;\n    A_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        A_idelay_ce               = idelay_ce;\n        A_idelay_ld               = idelay_ld;\n        A_fine_delay              = fine_delay ;\n        A_fine_delay_sel          = fine_delay_sel;\n\n     end\n    1: begin\n        B_pi_fine_enable          = pi_fine_enable;\n        B_pi_fine_inc             = pi_fine_inc;\n        B_pi_counter_load_en      = pi_counter_load_en;\n        B_pi_counter_read_en      = pi_counter_read_en;\n        B_pi_counter_load_val     = pi_counter_load_val;\n        B_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        B_po_fine_enable          = po_fine_enable;\n        B_po_coarse_enable        = po_coarse_enable;\n        B_po_fine_inc             = po_fine_inc;\n        B_po_coarse_inc           = po_coarse_inc;\n        B_po_counter_load_en      = po_counter_load_en;\n        B_po_counter_read_en      = po_counter_read_en;\n        B_po_counter_load_val     = po_counter_load_val;\n    B_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        B_idelay_ce               = idelay_ce;\n        B_idelay_ld               = idelay_ld;\n        B_fine_delay              = fine_delay ;\n        B_fine_delay_sel          = fine_delay_sel;\n\n     end\n\n    2: begin\n        C_pi_fine_enable          = pi_fine_enable;\n        C_pi_fine_inc             = pi_fine_inc;\n        C_pi_counter_load_en      = pi_counter_load_en;\n        C_pi_counter_read_en      = pi_counter_read_en;\n        C_pi_counter_load_val     = pi_counter_load_val;\n        C_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        C_po_fine_enable          = po_fine_enable;\n        C_po_coarse_enable        = po_coarse_enable;\n        C_po_fine_inc             = po_fine_inc;\n        C_po_coarse_inc           = po_coarse_inc;\n        C_po_counter_load_en      = po_counter_load_en;\n        C_po_counter_read_en      = po_counter_read_en;\n        C_po_counter_load_val     = po_counter_load_val;\n    C_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        C_idelay_ce               = idelay_ce;\n        C_idelay_ld               = idelay_ld;\n        C_fine_delay              = fine_delay ;\n        C_fine_delay_sel          = fine_delay_sel;\n\n     end\n\n    3: begin\n        D_pi_fine_enable          = pi_fine_enable;\n        D_pi_fine_inc             = pi_fine_inc;\n        D_pi_counter_load_en      = pi_counter_load_en;\n        D_pi_counter_read_en      = pi_counter_read_en;\n        D_pi_counter_load_val     = pi_counter_load_val;\n        D_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        D_po_fine_enable          = po_fine_enable;\n        D_po_coarse_enable        = po_coarse_enable;\n        D_po_fine_inc             = po_fine_inc;\n        D_po_coarse_inc           = po_coarse_inc;\n        D_po_counter_load_en      = po_counter_load_en;\n        D_po_counter_load_val     = po_counter_load_val;\n        D_po_counter_read_en      = po_counter_read_en;\n    D_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        D_idelay_ce               = idelay_ce;\n        D_idelay_ld               = idelay_ld;\n        D_fine_delay              = fine_delay ;\n        D_fine_delay_sel          = fine_delay_sel;\n\n     end\n    endcase\n    end\nend\n\n\nPHASER_REF phaser_ref_i(\n\n .LOCKED (ref_dll_lock),\n .CLKIN  (freq_refclk),\n .PWRDWN (1'b0),\n .RST    ( ! pll_lock)\n\n);\n\n\n\ngenerate\nif ( GENERATE_IDELAYCTRL == \"TRUE\")\nIDELAYCTRL idelayctrl (\n    .RDY                (),\n    .REFCLK             (idelayctrl_refclk),\n    .RST                (rst)\n);\nendgenerate\n\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: mig_7series_v4_1_ddr_phy_4lanes. Module specification: This module implements a DDR (Double Data Rate) PHY (Physical Layer) interface for a memory controller, designed for 7 series FPGAs, supporting up to 4 byte lanes. It manages timing, calibration, and signal integrity for DDR memory operations, incorporating PHASER_IN, PHASER_OUT, and IDELAYCTRL components. The module handles clock generation, data alignment, and various calibration processes for read and write operations across multiple byte lanes. Key inputs include reset signals, clocks, calibration controls, and configuration parameters, while outputs provide status information, control signals, and data for the DDR memory interface. Internal signals manage read clocks, data remapping, and control signals for individual byte lanes. The module is organized into sections for each byte lane (A, B,"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_phy_4lanes\n\nExplanation: This module appears to be a DDR (Double Data Rate) PHY (Physical Layer) interface for a memory controller, specifically designed for 7 series FPGAs. It handles up to 4 byte lanes of DDR memory interface, including data, address, and control signals. The module manages timing, calibration, and signal integrity for DDR memory operations, incorporating features like PHASER_IN, PHASER_OUT, and IDELAYCTRL components. It also handles clock generation, data alignment, and various calibration processes for read and write operations across multiple byte lanes."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nrst, phy_clk, clk_div2, phy_ctl_clk, freq_refclk, mem_refclk, mem_refclk_div4, pll_lock, sync_pulse, idelayctrl_refclk, phy_dout, phy_cmd_wr_en, phy_data_wr_en, phy_rd_en, phy_ctl_mstr_empty, phy_ctl_wd, data_offset, phy_ctl_wr, if_empty_def, phyGo, input_sink, mem_dq_in, mem_dqs_in, byte_rd_en_oth_banks, if_rst, phy_read_calib, phy_write_calib, idelay_inc, idelay_ce, idelay_ld, calib_sel, calib_zero_ctrl, calib_zero_lanes, calib_in_common, po_fine_enable, po_coarse_enable, po_fine_inc, po_coarse_inc, po_counter_load_en, po_counter_read_en, po_counter_load_val, po_sel_fine_oclk_delay, pi_rst_dqs_find, pi_fine_enable, pi_fine_inc, pi_counter_load_en, pi_counter_read_en, pi_counter_load_val, fine_delay, fine_delay_sel.\n\nExplanation: These inputs control various aspects of the DDR PHY, including reset signals, clocks, calibration controls, read/write enables, and configuration parameters for the PHASER and IDELAY components.\n\nOutput ports:\nddr_clk, rclk, if_a_empty, if_empty, byte_rd_en, if_empty_or, if_empty_and, of_ctl_a_full, of_data_a_full, of_ctl_full, of_data_full, pre_data_a_full, phy_din, phy_ctl_empty, phy_ctl_a_full, phy_ctl_full, mem_dq_out, mem_dq_ts, mem_dqs_out, mem_dqs_ts, aux_out, rst_out, mcGo, phy_ctl_ready, ref_dll_lock, po_coarse_overflow, po_fine_overflow, po_counter_read_val, pi_fine_overflow, pi_counter_read_val, pi_dqs_found, pi_dqs_found_all, pi_dqs_found_any, pi_phase_locked_lanes, pi_dqs_found_lanes, pi_dqs_out_of_range, pi_phase_locked, pi_phase_locked_all.\n\nExplanation: These outputs provide status information, control signals, and data for the DDR memory interface. They include clock outputs, FIFO status flags, memory interface signals, calibration status, and various overflow and phase-lock indicators for the PHASER components."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code, here are the internal signals used in the module and their explanations:\n\nInternal signals: A_rclk, B_rclk, C_rclk, D_rclk, rclk_, pi_iserdes_rst, phy_dout_remap, phy_din_remap, dummy_data, phaser_ctl_bus, in_rank, IO_A, IO_B, IO_C, IO_D, oserdes_dqs, oserdes_dqs_ts, oserdes_dq_ts.\n\nExplanation:\n- A_rclk, B_rclk, C_rclk, D_rclk: Read clocks for each of the four byte lanes.\n- rclk_: Selected read clock based on RCLK_SELECT_LANE parameter.\n- pi_iserdes_rst: Reset signal for the ISERDES (Input Serializer/Deserializer) components.\n- phy_dout_remap, phy_din_remap: Remapped versions of phy_dout and phy_din for proper byte lane assignments.\n- dummy_data: Used to handle unused byte lanes and prevent synthesis warnings.\n- phaser_ctl_bus: Control bus for the PHASER components.\n- in_rank: Input signal representing the memory rank information.\n- IO_A, IO_B, IO_C, IO_D: Signals representing I/O connections for each byte lane.\n- oserdes_dqs, oserdes_dqs_ts, oserdes_dq_ts: Output signals from OSERDES (Output Serializer/Deserializer) components for DQS (Data Strobe) and DQ (Data) signals.\n\nThese internal signals play crucial roles in managing the DDR PHY interface, including clock distribution, data remapping, and control signal routing across the four byte lanes."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\n`define  PC_DATA_OFFSET_RANGE 22:17\n\nmodule mig_7series_v4_1_ddr_phy_4lanes #(\nparameter  GENERATE_IDELAYCTRL  = \"TRUE\",\nparameter  IODELAY_GRP          = \"IODELAY_MIG\",\nparameter  FPGA_SPEED_GRADE     = 1,\nparameter  BANK_TYPE            = \"HP_IO\", \nparameter  BYTELANES_DDR_CK     = 24'b0010_0010_0010_0010_0010_0010,\nparameter  NUM_DDR_CK           = 1,\n\nparameter  BYTE_LANES           = 4'b1111, \nparameter  DATA_CTL_N           = 4'b1111, \nparameter  BITLANES             = 48'hffff_ffff_ffff,\nparameter  BITLANES_OUTONLY     = 48'h0000_0000_0000,\nparameter  LANE_REMAP           = 16'h3210,\n                                        \n                                        \n                                        \n                                        \n                                        \n                                        \n                                        \nparameter   LAST_BANK              = \"FALSE\",\nparameter   USE_PRE_POST_FIFO      = \"FALSE\",\nparameter   RCLK_SELECT_LANE       = \"B\",\nparameter   real  TCK              = 0.00,\nparameter   SYNTHESIS              = \"FALSE\",\nparameter   PO_CTL_COARSE_BYPASS   = \"FALSE\",\nparameter   PO_FINE_DELAY          = 0,\nparameter   PI_SEL_CLK_OFFSET      = 0,\n\n\nparameter   PC_CLK_RATIO           = 4,\n\n\nparameter  A_PI_FREQ_REF_DIV       = \"NONE\",\nparameter  A_PI_CLKOUT_DIV         = 2,\nparameter  A_PI_BURST_MODE         = \"TRUE\",\nparameter  A_PI_OUTPUT_CLK_SRC     = \"DELAYED_REF\" , \nparameter  A_PI_FINE_DELAY         = 60,\nparameter  A_PI_SYNC_IN_DIV_RST    = \"TRUE\",\n\nparameter  B_PI_FREQ_REF_DIV       = A_PI_FREQ_REF_DIV,\nparameter  B_PI_CLKOUT_DIV         = A_PI_CLKOUT_DIV,\nparameter  B_PI_BURST_MODE         = A_PI_BURST_MODE,\nparameter  B_PI_OUTPUT_CLK_SRC     = A_PI_OUTPUT_CLK_SRC,\nparameter  B_PI_FINE_DELAY         = A_PI_FINE_DELAY,\nparameter  B_PI_SYNC_IN_DIV_RST    = A_PI_SYNC_IN_DIV_RST,\n\nparameter  C_PI_FREQ_REF_DIV       = A_PI_FREQ_REF_DIV,\nparameter  C_PI_CLKOUT_DIV         = A_PI_CLKOUT_DIV,\nparameter  C_PI_BURST_MODE         = A_PI_BURST_MODE,\nparameter  C_PI_OUTPUT_CLK_SRC     = A_PI_OUTPUT_CLK_SRC,\nparameter  C_PI_FINE_DELAY         = 0,\nparameter  C_PI_SYNC_IN_DIV_RST    = A_PI_SYNC_IN_DIV_RST,\n\nparameter  D_PI_FREQ_REF_DIV       = A_PI_FREQ_REF_DIV,\nparameter  D_PI_CLKOUT_DIV         = A_PI_CLKOUT_DIV,\nparameter  D_PI_BURST_MODE         = A_PI_BURST_MODE,\nparameter  D_PI_OUTPUT_CLK_SRC     = A_PI_OUTPUT_CLK_SRC,\nparameter  D_PI_FINE_DELAY         = 0,\nparameter  D_PI_SYNC_IN_DIV_RST    = A_PI_SYNC_IN_DIV_RST,\n\n\nparameter  A_PO_CLKOUT_DIV         = (DATA_CTL_N[0] == 0) ? PC_CLK_RATIO :  2,\nparameter  A_PO_FINE_DELAY         = PO_FINE_DELAY,\nparameter  A_PO_COARSE_DELAY       = 0,\nparameter  A_PO_OCLK_DELAY         = 0,\nparameter  A_PO_OCLKDELAY_INV      = \"FALSE\",\nparameter  A_PO_OUTPUT_CLK_SRC     = \"DELAYED_REF\",\nparameter  A_PO_SYNC_IN_DIV_RST    = \"TRUE\",\n\n\nparameter  B_PO_CLKOUT_DIV         = (DATA_CTL_N[1] == 0) ? PC_CLK_RATIO :  2,\nparameter  B_PO_FINE_DELAY         = PO_FINE_DELAY,\nparameter  B_PO_COARSE_DELAY       = A_PO_COARSE_DELAY,\nparameter  B_PO_OCLK_DELAY         = A_PO_OCLK_DELAY,\nparameter  B_PO_OCLKDELAY_INV      = A_PO_OCLKDELAY_INV,\nparameter  B_PO_OUTPUT_CLK_SRC     = A_PO_OUTPUT_CLK_SRC,\nparameter  B_PO_SYNC_IN_DIV_RST    = A_PO_SYNC_IN_DIV_RST,\n\nparameter  C_PO_CLKOUT_DIV         = (DATA_CTL_N[2] == 0) ? PC_CLK_RATIO :  2,\nparameter  C_PO_FINE_DELAY         = PO_FINE_DELAY,\nparameter  C_PO_COARSE_DELAY       = A_PO_COARSE_DELAY,\nparameter  C_PO_OCLK_DELAY         = A_PO_OCLK_DELAY,\nparameter  C_PO_OCLKDELAY_INV      = A_PO_OCLKDELAY_INV,\nparameter  C_PO_OUTPUT_CLK_SRC     = A_PO_OUTPUT_CLK_SRC,\nparameter  C_PO_SYNC_IN_DIV_RST    = A_PO_SYNC_IN_DIV_RST,\n\nparameter  D_PO_CLKOUT_DIV         = (DATA_CTL_N[3] == 0) ? PC_CLK_RATIO :  2,\nparameter  D_PO_FINE_DELAY         = PO_FINE_DELAY,\nparameter  D_PO_COARSE_DELAY       = A_PO_COARSE_DELAY,\nparameter  D_PO_OCLK_DELAY         = A_PO_OCLK_DELAY,\nparameter  D_PO_OCLKDELAY_INV      = A_PO_OCLKDELAY_INV,\nparameter  D_PO_OUTPUT_CLK_SRC     = A_PO_OUTPUT_CLK_SRC,\nparameter  D_PO_SYNC_IN_DIV_RST    = A_PO_SYNC_IN_DIV_RST,\n\nparameter  A_IDELAYE2_IDELAY_TYPE  = \"VARIABLE\",\nparameter  A_IDELAYE2_IDELAY_VALUE = 00,\nparameter  B_IDELAYE2_IDELAY_TYPE  = A_IDELAYE2_IDELAY_TYPE,\nparameter  B_IDELAYE2_IDELAY_VALUE = A_IDELAYE2_IDELAY_VALUE,\nparameter  C_IDELAYE2_IDELAY_TYPE  = A_IDELAYE2_IDELAY_TYPE,\nparameter  C_IDELAYE2_IDELAY_VALUE = A_IDELAYE2_IDELAY_VALUE,\nparameter  D_IDELAYE2_IDELAY_TYPE  = A_IDELAYE2_IDELAY_TYPE,\nparameter  D_IDELAYE2_IDELAY_VALUE = A_IDELAYE2_IDELAY_VALUE,\n\n\n\n\nparameter PC_BURST_MODE           = \"TRUE\",\nparameter PC_DATA_CTL_N           = DATA_CTL_N,\nparameter PC_CMD_OFFSET           = 0,\nparameter PC_RD_CMD_OFFSET_0      = 0,\nparameter PC_RD_CMD_OFFSET_1      = 0,\nparameter PC_RD_CMD_OFFSET_2      = 0,\nparameter PC_RD_CMD_OFFSET_3      = 0,\nparameter PC_CO_DURATION          = 1,\nparameter PC_DI_DURATION          = 1,\nparameter PC_DO_DURATION          = 1,\nparameter PC_RD_DURATION_0        = 0,\nparameter PC_RD_DURATION_1        = 0,\nparameter PC_RD_DURATION_2        = 0,\nparameter PC_RD_DURATION_3        = 0,\nparameter PC_WR_CMD_OFFSET_0      = 5,\nparameter PC_WR_CMD_OFFSET_1      = 5,\nparameter PC_WR_CMD_OFFSET_2      = 5,\nparameter PC_WR_CMD_OFFSET_3      = 5,\nparameter PC_WR_DURATION_0        = 6,\nparameter PC_WR_DURATION_1        = 6,\nparameter PC_WR_DURATION_2        = 6,\nparameter PC_WR_DURATION_3        = 6,\nparameter PC_AO_WRLVL_EN          = 0,\nparameter PC_AO_TOGGLE            = 4'b0101, \nparameter PC_FOUR_WINDOW_CLOCKS   = 63,\nparameter PC_EVENTS_DELAY         = 18,\nparameter PC_PHY_COUNT_EN         = \"TRUE\",\nparameter PC_SYNC_MODE            = \"TRUE\",\nparameter PC_DISABLE_SEQ_MATCH    = \"TRUE\",\nparameter PC_MULTI_REGION         = \"FALSE\",\n\n\n\nparameter  A_OF_ARRAY_MODE        = (DATA_CTL_N[0] == 1) ? \"ARRAY_MODE_8_X_4\" :  \"ARRAY_MODE_4_X_4\",\nparameter  B_OF_ARRAY_MODE        = (DATA_CTL_N[1] == 1) ? \"ARRAY_MODE_8_X_4\" :  \"ARRAY_MODE_4_X_4\",\nparameter  C_OF_ARRAY_MODE        = (DATA_CTL_N[2] == 1) ? \"ARRAY_MODE_8_X_4\" :  \"ARRAY_MODE_4_X_4\",\nparameter  D_OF_ARRAY_MODE        = (DATA_CTL_N[3] == 1) ? \"ARRAY_MODE_8_X_4\" :  \"ARRAY_MODE_4_X_4\",\nparameter  OF_ALMOST_EMPTY_VALUE  = 1,\nparameter  OF_ALMOST_FULL_VALUE   = 1,\nparameter  OF_OUTPUT_DISABLE      = \"TRUE\",\nparameter  OF_SYNCHRONOUS_MODE    = PC_SYNC_MODE,\n\nparameter  A_OS_DATA_RATE           = \"DDR\",\nparameter  A_OS_DATA_WIDTH          = 4,\nparameter  B_OS_DATA_RATE           = A_OS_DATA_RATE,\nparameter  B_OS_DATA_WIDTH          = A_OS_DATA_WIDTH,\nparameter  C_OS_DATA_RATE           = A_OS_DATA_RATE,\nparameter  C_OS_DATA_WIDTH          = A_OS_DATA_WIDTH,\nparameter  D_OS_DATA_RATE           = A_OS_DATA_RATE,\nparameter  D_OS_DATA_WIDTH          = A_OS_DATA_WIDTH,\n\n\nparameter  A_IF_ARRAY_MODE          = \"ARRAY_MODE_4_X_8\",\nparameter  B_IF_ARRAY_MODE          = A_IF_ARRAY_MODE,\nparameter  C_IF_ARRAY_MODE          = A_IF_ARRAY_MODE,\nparameter  D_IF_ARRAY_MODE          = A_IF_ARRAY_MODE,\nparameter  IF_ALMOST_EMPTY_VALUE  =  1,\nparameter  IF_ALMOST_FULL_VALUE   =  1,\nparameter  IF_SYNCHRONOUS_MODE    = PC_SYNC_MODE,\n\n\n\n\n\nparameter HIGHEST_LANE  =  LAST_BANK == \"FALSE\" ? 4 : (BYTE_LANES[3] ? 4 : BYTE_LANES[2] ? 3 : BYTE_LANES[1] ? 2 : 1),\nparameter  N_CTL_LANES = ((0+(!DATA_CTL_N[0]) & BYTE_LANES[0]) + (0+(!DATA_CTL_N[1]) & BYTE_LANES[1]) + (0+(!DATA_CTL_N[2]) & BYTE_LANES[2]) + (0+(!DATA_CTL_N[3]) & BYTE_LANES[3])),\n\nparameter  N_BYTE_LANES = (0+BYTE_LANES[0]) + (0+BYTE_LANES[1]) + (0+BYTE_LANES[2]) + (0+BYTE_LANES[3]),\n\nparameter N_DATA_LANES = N_BYTE_LANES - N_CTL_LANES,\n\nparameter  AUXOUT_WIDTH = 4,\nparameter LP_DDR_CK_WIDTH = 2\n,parameter CKE_ODT_AUX = \"FALSE\"\n,parameter PI_DIV2_INCDEC = \"FALSE\"\n)\n(\n\n\n\n      input                       rst,\n      input                       phy_clk,\n      input                       clk_div2,\n      input                       phy_ctl_clk,\n      input                       freq_refclk,\n      input                       mem_refclk,\n      input                       mem_refclk_div4,\n      input                       pll_lock,\n      input                       sync_pulse,\n      input                       idelayctrl_refclk,\n      input [HIGHEST_LANE*80-1:0] phy_dout,\n      input                       phy_cmd_wr_en,\n      input                       phy_data_wr_en,\n      input                       phy_rd_en,\n      input                       phy_ctl_mstr_empty,\n      input [31:0]                phy_ctl_wd,\n      input [`PC_DATA_OFFSET_RANGE] data_offset,\n      input                       phy_ctl_wr,\n      input                       if_empty_def,\n      input                       phyGo,\n      input                       input_sink,\n\n      output [(LP_DDR_CK_WIDTH*24)-1:0] ddr_clk,  \n      output                      rclk,\n      output                      if_a_empty,\n      output                      if_empty,\n      output                      byte_rd_en,\n      output                      if_empty_or,\n      output                      if_empty_and,\n      output                      of_ctl_a_full,\n      output                      of_data_a_full,\n      output                      of_ctl_full,\n      output                      of_data_full,\n      output                      pre_data_a_full,\n      output [HIGHEST_LANE*80-1:0]phy_din, \n      output                      phy_ctl_empty,\n      output                      phy_ctl_a_full,\n      output                      phy_ctl_full,\n      output [HIGHEST_LANE*12-1:0]mem_dq_out,\n      output [HIGHEST_LANE*12-1:0]mem_dq_ts,\n      input  [HIGHEST_LANE*10-1:0]mem_dq_in,\n      output [HIGHEST_LANE-1:0]   mem_dqs_out,\n      output [HIGHEST_LANE-1:0]   mem_dqs_ts,\n      input  [HIGHEST_LANE-1:0]   mem_dqs_in,\n      input [1:0]                 byte_rd_en_oth_banks,\n\n      output     [AUXOUT_WIDTH-1:0] aux_out,\n      output reg                   rst_out = 0,\n      output reg                   mcGo=0,\n      output                       phy_ctl_ready,\n      output                       ref_dll_lock,\n      input                        if_rst,\n      input                        phy_read_calib,\n      input                        phy_write_calib,\n      input                        idelay_inc,\n      input                        idelay_ce,\n      input                        idelay_ld,\n      input  [2:0]                 calib_sel,\n      input                        calib_zero_ctrl,\n      input  [HIGHEST_LANE-1:0]    calib_zero_lanes,\n      input                        calib_in_common,\n      input                        po_fine_enable,\n      input                        po_coarse_enable,\n      input                        po_fine_inc,\n      input                        po_coarse_inc,\n      input                        po_counter_load_en,\n      input                        po_counter_read_en,\n      input  [8:0]                 po_counter_load_val,\n      input                        po_sel_fine_oclk_delay,\n      output reg                   po_coarse_overflow,\n      output reg                   po_fine_overflow,\n      output reg [8:0]             po_counter_read_val,\n\n\n\n      input                        pi_rst_dqs_find,\n      input                        pi_fine_enable,\n      input                        pi_fine_inc,\n      input                        pi_counter_load_en,\n      input                        pi_counter_read_en,\n      input  [5:0]                 pi_counter_load_val,\n      output reg                   pi_fine_overflow,\n      output reg [5:0]             pi_counter_read_val,\n\n      output reg                   pi_dqs_found,\n      output                       pi_dqs_found_all,\n      output                       pi_dqs_found_any,\n      output [HIGHEST_LANE-1:0]    pi_phase_locked_lanes,\n      output [HIGHEST_LANE-1:0]    pi_dqs_found_lanes,\n      output reg                   pi_dqs_out_of_range,\n      output reg                   pi_phase_locked,\n      output                       pi_phase_locked_all,\n      input [29:0]                 fine_delay,\n      input                        fine_delay_sel\n);\n\nlocalparam  DATA_CTL_A       = (~DATA_CTL_N[0]);\nlocalparam  DATA_CTL_B       = (~DATA_CTL_N[1]);\nlocalparam  DATA_CTL_C       = (~DATA_CTL_N[2]);\nlocalparam  DATA_CTL_D       = (~DATA_CTL_N[3]);\nlocalparam  PRESENT_CTL_A    = BYTE_LANES[0] && ! DATA_CTL_N[0];\nlocalparam  PRESENT_CTL_B    = BYTE_LANES[1] && ! DATA_CTL_N[1];\nlocalparam  PRESENT_CTL_C    = BYTE_LANES[2] && ! DATA_CTL_N[2];\nlocalparam  PRESENT_CTL_D    = BYTE_LANES[3] && ! DATA_CTL_N[3];\nlocalparam  PRESENT_DATA_A   = BYTE_LANES[0] &&  DATA_CTL_N[0];\nlocalparam  PRESENT_DATA_B   = BYTE_LANES[1] &&  DATA_CTL_N[1];\nlocalparam  PRESENT_DATA_C   = BYTE_LANES[2] &&  DATA_CTL_N[2];\nlocalparam  PRESENT_DATA_D   = BYTE_LANES[3] &&  DATA_CTL_N[3];\nlocalparam  PC_DATA_CTL_A    = (DATA_CTL_A) ? \"FALSE\" : \"TRUE\";\nlocalparam  PC_DATA_CTL_B    = (DATA_CTL_B) ? \"FALSE\" : \"TRUE\";\nlocalparam  PC_DATA_CTL_C    = (DATA_CTL_C) ? \"FALSE\" : \"TRUE\";\nlocalparam  PC_DATA_CTL_D    = (DATA_CTL_D) ? \"FALSE\" : \"TRUE\";\nlocalparam  A_PO_COARSE_BYPASS = (DATA_CTL_A) ? PO_CTL_COARSE_BYPASS : \"FALSE\";\nlocalparam  B_PO_COARSE_BYPASS = (DATA_CTL_B) ? PO_CTL_COARSE_BYPASS : \"FALSE\";\nlocalparam  C_PO_COARSE_BYPASS = (DATA_CTL_C) ? PO_CTL_COARSE_BYPASS : \"FALSE\";\nlocalparam  D_PO_COARSE_BYPASS = (DATA_CTL_D) ? PO_CTL_COARSE_BYPASS : \"FALSE\";\n\nlocalparam  IO_A_START = 41;\nlocalparam  IO_A_END   = 40;\nlocalparam  IO_B_START = 43;\nlocalparam  IO_B_END   = 42;\nlocalparam  IO_C_START = 45;\nlocalparam  IO_C_END   = 44;\nlocalparam  IO_D_START = 47;\nlocalparam  IO_D_END   = 46;\nlocalparam  IO_A_X_START = (HIGHEST_LANE * 10) + 1;\nlocalparam  IO_A_X_END   = (IO_A_X_START-1);\nlocalparam  IO_B_X_START = (IO_A_X_START + 2);\nlocalparam  IO_B_X_END   = (IO_B_X_START -1);\nlocalparam  IO_C_X_START = (IO_B_X_START + 2);\nlocalparam  IO_C_X_END   = (IO_C_X_START -1);\nlocalparam  IO_D_X_START = (IO_C_X_START + 2);\nlocalparam  IO_D_X_END   = (IO_D_X_START -1);\n\nlocalparam MSB_BURST_PEND_PO             =  3;\nlocalparam MSB_BURST_PEND_PI             =  7;\nlocalparam MSB_RANK_SEL_I                =  MSB_BURST_PEND_PI + 8;\nlocalparam PHASER_CTL_BUS_WIDTH          =  MSB_RANK_SEL_I + 1;\n\nwire [1:0]  oserdes_dqs;\nwire [1:0]  oserdes_dqs_ts;\nwire [1:0]  oserdes_dq_ts;\n\n\nwire [PHASER_CTL_BUS_WIDTH-1:0] phaser_ctl_bus;\nwire [7:0]  in_rank;\nwire [11:0] IO_A;\nwire [11:0] IO_B;\nwire [11:0] IO_C;\nwire [11:0] IO_D;\n\nwire [319:0] phy_din_remap;\n\nreg        A_po_counter_read_en;\nwire [8:0] A_po_counter_read_val;\nreg        A_pi_counter_read_en;\nwire [5:0] A_pi_counter_read_val;\nwire       A_pi_fine_overflow;\nwire       A_po_coarse_overflow;\nwire       A_po_fine_overflow;\nwire       A_pi_dqs_found;\nwire       A_pi_dqs_out_of_range;\nwire       A_pi_phase_locked;\nwire       A_pi_iserdes_rst;\nreg        A_pi_fine_enable;\nreg        A_pi_fine_inc;\nreg        A_pi_counter_load_en;\nreg [5:0]  A_pi_counter_load_val;\nreg        A_pi_rst_dqs_find;\n\n\nreg        A_po_fine_enable;\nreg        A_po_coarse_enable;\n reg        A_po_fine_inc ;\nreg        A_po_sel_fine_oclk_delay;\nreg        A_po_coarse_inc;\nreg        A_po_counter_load_en;\nreg [8:0]  A_po_counter_load_val;\nwire       A_rclk;\nreg        A_idelay_ce;\nreg        A_idelay_ld;\nreg [29:0] A_fine_delay;\nreg        A_fine_delay_sel;\n\nreg        B_po_counter_read_en;\nwire [8:0] B_po_counter_read_val;\nreg        B_pi_counter_read_en;\nwire [5:0] B_pi_counter_read_val;\nwire       B_pi_fine_overflow;\nwire       B_po_coarse_overflow;\nwire       B_po_fine_overflow;\nwire       B_pi_phase_locked;\nwire       B_pi_iserdes_rst;\nwire       B_pi_dqs_found;\nwire       B_pi_dqs_out_of_range;\nreg        B_pi_fine_enable;\nreg        B_pi_fine_inc;\nreg        B_pi_counter_load_en;\nreg [5:0]  B_pi_counter_load_val;\nreg        B_pi_rst_dqs_find;\n\n\nreg        B_po_fine_enable;\nreg        B_po_coarse_enable;\n reg        B_po_fine_inc ;\nreg        B_po_coarse_inc;\nreg        B_po_sel_fine_oclk_delay;\nreg        B_po_counter_load_en;\nreg [8:0]  B_po_counter_load_val;\nwire       B_rclk;\nreg        B_idelay_ce;\nreg        B_idelay_ld;\nreg [29:0] B_fine_delay;\nreg        B_fine_delay_sel;\n\n\nreg        C_pi_fine_inc;\nreg        D_pi_fine_inc;\nreg        C_pi_fine_enable;\nreg        D_pi_fine_enable;\nreg        C_po_counter_load_en;\nreg        D_po_counter_load_en;\nreg        C_po_coarse_inc;\nreg        D_po_coarse_inc;\n reg        C_po_fine_inc ;\n reg        D_po_fine_inc ;\nreg        C_po_sel_fine_oclk_delay;\nreg        D_po_sel_fine_oclk_delay;\nreg [5:0]  C_pi_counter_load_val;\nreg [5:0]  D_pi_counter_load_val;\nreg [8:0]  C_po_counter_load_val;\nreg [8:0]  D_po_counter_load_val;\nreg        C_po_coarse_enable;\nreg        D_po_coarse_enable;\nreg        C_po_fine_enable;\nreg        D_po_fine_enable;\nwire       C_po_coarse_overflow;\nwire       D_po_coarse_overflow;\nwire       C_po_fine_overflow;\nwire       D_po_fine_overflow;\nwire [8:0] C_po_counter_read_val;\nwire [8:0] D_po_counter_read_val;\nreg        C_po_counter_read_en;\nreg        D_po_counter_read_en;\nwire       C_pi_dqs_found;\nwire       D_pi_dqs_found;\nwire       C_pi_fine_overflow;\nwire       D_pi_fine_overflow;\nreg        C_pi_counter_read_en;\nreg        D_pi_counter_read_en;\nreg        C_pi_counter_load_en;\nreg        D_pi_counter_load_en;\nwire       C_pi_phase_locked;\nwire       C_pi_iserdes_rst;\nwire       D_pi_phase_locked;\nwire       D_pi_iserdes_rst;\nwire       C_pi_dqs_out_of_range;\nwire       D_pi_dqs_out_of_range;\nwire [5:0] C_pi_counter_read_val;\nwire [5:0] D_pi_counter_read_val;\nwire       C_rclk;\nwire       D_rclk;\nreg        C_idelay_ce;\nreg        D_idelay_ce;\nreg        C_idelay_ld;\nreg        D_idelay_ld;\nreg        C_pi_rst_dqs_find;\nreg        D_pi_rst_dqs_find;\nreg [29:0] C_fine_delay;\nreg [29:0] D_fine_delay;\nreg        C_fine_delay_sel;\nreg        D_fine_delay_sel;\n\nwire       pi_iserdes_rst;\n\nwire       A_if_empty;\nwire       B_if_empty;\nwire       C_if_empty;\nwire       D_if_empty;\nwire       A_byte_rd_en;\nwire       B_byte_rd_en;\nwire       C_byte_rd_en;\nwire       D_byte_rd_en;\nwire       A_if_a_empty;\nwire       B_if_a_empty;\nwire       C_if_a_empty;\nwire       D_if_a_empty;\n\n\n\n\n\n\n\n\nwire       A_of_full;\nwire       B_of_full;\nwire       C_of_full;\nwire       D_of_full;\nwire       A_of_ctl_full;\nwire       B_of_ctl_full;\nwire       C_of_ctl_full;\nwire       D_of_ctl_full;\nwire       A_of_data_full;\nwire       B_of_data_full;\nwire       C_of_data_full;\nwire       D_of_data_full;\nwire       A_of_a_full;\nwire       B_of_a_full;\nwire       C_of_a_full;\nwire       D_of_a_full;\nwire       A_pre_fifo_a_full;\nwire       B_pre_fifo_a_full;\nwire       C_pre_fifo_a_full;\nwire       D_pre_fifo_a_full;\nwire       A_of_ctl_a_full;\nwire       B_of_ctl_a_full;\nwire       C_of_ctl_a_full;\nwire       D_of_ctl_a_full;\nwire       A_of_data_a_full;\nwire       B_of_data_a_full;\nwire       C_of_data_a_full;\nwire       D_of_data_a_full;\nwire       A_pre_data_a_full;\nwire       B_pre_data_a_full;\nwire       C_pre_data_a_full;\nwire       D_pre_data_a_full;\nwire  [LP_DDR_CK_WIDTH*6-1:0]  A_ddr_clk;  \nwire  [LP_DDR_CK_WIDTH*6-1:0]  B_ddr_clk;  \nwire  [LP_DDR_CK_WIDTH*6-1:0]  C_ddr_clk;  \nwire  [LP_DDR_CK_WIDTH*6-1:0]  D_ddr_clk;  \n\nwire [3:0] dummy_data;\n\nwire  [31:0]  _phy_ctl_wd;\n\nwire [1:0] phy_encalib;\n\nassign pi_dqs_found_all =\n           (! PRESENT_DATA_A | A_pi_dqs_found) &\n           (! PRESENT_DATA_B | B_pi_dqs_found) &\n           (! PRESENT_DATA_C | C_pi_dqs_found) &\n           (! PRESENT_DATA_D | D_pi_dqs_found) ;\n\nassign  pi_dqs_found_any =\n           ( PRESENT_DATA_A & A_pi_dqs_found) |\n           ( PRESENT_DATA_B & B_pi_dqs_found) |\n           ( PRESENT_DATA_C & C_pi_dqs_found) |\n           ( PRESENT_DATA_D & D_pi_dqs_found) ;\n\nassign  pi_phase_locked_all =\n           (! PRESENT_DATA_A | A_pi_phase_locked) &\n           (! PRESENT_DATA_B | B_pi_phase_locked) &\n           (! PRESENT_DATA_C | C_pi_phase_locked) &\n           (! PRESENT_DATA_D | D_pi_phase_locked);\n\nwire       dangling_inputs = (& dummy_data) & input_sink & 1'b0;  \n                              \n                              \n                              \n                              \n                              \n\n\nassign      if_empty = !if_empty_def  ? (A_if_empty | B_if_empty | C_if_empty | D_if_empty) : (A_if_empty & B_if_empty & C_if_empty & D_if_empty);\nassign      byte_rd_en = !if_empty_def  ? (A_byte_rd_en & B_byte_rd_en & C_byte_rd_en & D_byte_rd_en) :\n                                          (A_byte_rd_en | B_byte_rd_en | C_byte_rd_en | D_byte_rd_en);\nassign      if_empty_or = (A_if_empty | B_if_empty | C_if_empty | D_if_empty);\nassign      if_empty_and = (A_if_empty & B_if_empty & C_if_empty & D_if_empty);\nassign      if_a_empty = A_if_a_empty | B_if_a_empty | C_if_a_empty | D_if_a_empty;\n\n\nassign      of_ctl_full     = A_of_ctl_full  | B_of_ctl_full  | C_of_ctl_full  | D_of_ctl_full ;\nassign      of_data_full    = A_of_data_full  | B_of_data_full  | C_of_data_full  | D_of_data_full ;\nassign      of_ctl_a_full   = A_of_ctl_a_full  | B_of_ctl_a_full  | C_of_ctl_a_full  | D_of_ctl_a_full ;\nassign      of_data_a_full  = A_of_data_a_full  | B_of_data_a_full  | C_of_data_a_full  | D_of_data_a_full | dangling_inputs   ;\nassign      pre_data_a_full = A_pre_data_a_full | B_pre_data_a_full | C_pre_data_a_full | D_pre_data_a_full;\n\n\nfunction [79:0] part_select_80;\ninput [319:0] vector;\ninput [1:0]  select;\nbegin\n     case (select)\n     2'b00 : part_select_80[79:0] = vector[1*80-1:0*80];\n     2'b01 : part_select_80[79:0] = vector[2*80-1:1*80];\n     2'b10 : part_select_80[79:0] = vector[3*80-1:2*80];\n     2'b11 : part_select_80[79:0] = vector[4*80-1:3*80];\n     endcase\nend\nendfunction\n\nwire [319:0]     phy_dout_remap;\n\nreg         rst_out_trig = 1'b0;\nreg [31:0]  rclk_delay;\nreg         rst_edge1 = 1'b0;\nreg         rst_edge2 = 1'b0;\nreg         rst_edge3 = 1'b0;\nreg         rst_edge_detect = 1'b0;\nwire        rclk_;\nreg         rst_out_start = 1'b0 ;\nreg         rst_primitives=0;\nreg         A_rst_primitives=0;\nreg         B_rst_primitives=0;\nreg         C_rst_primitives=0;\nreg         D_rst_primitives=0;\n\n`ifdef  USE_PHY_CONTROL_TEST\n    wire [15:0] test_output;\n    wire [15:0] test_input;\n    wire [2:0]  test_select=0;\n    wire        scan_enable = 0;\n`endif\n\ngenerate\n\ngenvar i;\n\nif (RCLK_SELECT_LANE == \"A\")  begin\n     assign rclk_ = A_rclk;\n     assign pi_iserdes_rst = A_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"B\")  begin\n     assign rclk_ = B_rclk;\n     assign pi_iserdes_rst = B_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"C\") begin\n     assign rclk_ = C_rclk;\n     assign pi_iserdes_rst = C_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"D\") begin\n     assign rclk_ = D_rclk;\n     assign pi_iserdes_rst = D_pi_iserdes_rst;\n     end\nelse  begin\n     assign rclk_ = B_rclk; \n     end\n\nendgenerate\n\nassign ddr_clk[LP_DDR_CK_WIDTH*6-1:0]                   = A_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*12-1:LP_DDR_CK_WIDTH*6]  = B_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*18-1:LP_DDR_CK_WIDTH*12] = C_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*24-1:LP_DDR_CK_WIDTH*18] = D_ddr_clk;\n\nassign pi_phase_locked_lanes =\n           {(! PRESENT_DATA_D[0] | D_pi_phase_locked),\n            (! PRESENT_DATA_C[0] | C_pi_phase_locked) ,\n            (! PRESENT_DATA_B[0] | B_pi_phase_locked) ,\n            (! PRESENT_DATA_A[0] | A_pi_phase_locked)};\n\nassign pi_dqs_found_lanes = {D_pi_dqs_found, C_pi_dqs_found, B_pi_dqs_found, A_pi_dqs_found};\n\n\nreg rclk_delay_11;\nalways @(rclk_delay[11]) begin : rclk_delay_11_blk\n    if ( rclk_delay[11])\n       rclk_delay_11 = 1;\n    else\n       rclk_delay_11 = 0;\nend\n\nalways @(posedge phy_clk or posedge rst ) begin\n\n    if ( rst)  begin\n       rst_out   <= #1 0;\n    end\n    else begin\n       if ( rclk_delay_11)\n         rst_out <= #1 1;\n    end\nend\n\nalways @(posedge phy_clk ) begin\n   \n    rst_primitives    <= !phy_ctl_ready ;\n    A_rst_primitives  <= rst_primitives ;\n    B_rst_primitives  <= rst_primitives ;\n    C_rst_primitives  <= rst_primitives ;\n    D_rst_primitives  <= rst_primitives ;\n\n    rclk_delay        <= #1 (rclk_delay << 1) | (!rst_primitives && phyGo);\n    mcGo              <= #1 rst_out ;\n\nend\n\n\n  (* ASYNC_REG = \"TRUE\" *) reg A_pi_rst_div2;\n  (* ASYNC_REG = \"TRUE\" *) reg B_pi_rst_div2;\n  (* ASYNC_REG = \"TRUE\" *) reg C_pi_rst_div2;\n  (* ASYNC_REG = \"TRUE\" *) reg D_pi_rst_div2;\ngenerate\n  if (PI_DIV2_INCDEC == \"TRUE\") begin: phaser_in_div2\n    (* ASYNC_REG = \"TRUE\" *) reg pi_rst_div2r1;\n    (* ASYNC_REG = \"TRUE\" *) reg pi_rst_div2r2;\n\n    always @(posedge clk_div2) begin\n      pi_rst_div2r1 <= rst_primitives;\n      pi_rst_div2r2 <= pi_rst_div2r1;\n      A_pi_rst_div2 <= pi_rst_div2r2;\n      B_pi_rst_div2 <= pi_rst_div2r2;\n      C_pi_rst_div2 <= pi_rst_div2r2;\n      D_pi_rst_div2 <= pi_rst_div2r2;\n    end\n  end else begin: phaser_in_div4\n    always @ (*) begin\n      A_pi_rst_div2 <= 1'b0;\n      B_pi_rst_div2 <= 1'b0;\n      C_pi_rst_div2 <= 1'b0;\n      D_pi_rst_div2 <= 1'b0;\n    end\n  end\nendgenerate\n\ngenerate\n\n  if (BYTE_LANES[0]) begin\n      assign dummy_data[0]             = 0;\n  end\n  else begin\n      assign dummy_data[0]      = &phy_dout_remap[1*80-1:0*80];\n  end\n  if (BYTE_LANES[1]) begin\n      assign dummy_data[1]             = 0;\n  end\n  else begin\n      assign dummy_data[1]      = &phy_dout_remap[2*80-1:1*80];\n  end\n  if (BYTE_LANES[2]) begin\n      assign dummy_data[2]             = 0;\n  end\n  else begin\n      assign dummy_data[2]       = &phy_dout_remap[3*80-1:2*80];\n  end\n  if (BYTE_LANES[3]) begin\n      assign dummy_data[3]             = 0;\n  end\n  else begin\n      assign dummy_data[3]       = &phy_dout_remap[4*80-1:3*80];\n  end\n\n  if (PRESENT_DATA_A) begin\n      assign A_of_data_full     = A_of_full;\n      assign A_of_ctl_full      = 0;\n      assign A_of_data_a_full   = A_of_a_full;\n      assign A_of_ctl_a_full    = 0;\n      assign A_pre_data_a_full  = A_pre_fifo_a_full;\n  end\n  else  begin\n      assign A_of_ctl_full      = A_of_full;\n      assign A_of_data_full     = 0;\n      assign A_of_ctl_a_full    = A_of_a_full;\n      assign A_of_data_a_full   = 0;\n      assign A_pre_data_a_full  = 0;\n  end\n  if (PRESENT_DATA_B) begin\n      assign B_of_data_full     = B_of_full;\n      assign B_of_ctl_full      = 0;\n      assign B_of_data_a_full   = B_of_a_full;\n      assign B_of_ctl_a_full    = 0;\n      assign B_pre_data_a_full  = B_pre_fifo_a_full;\n  end\n  else  begin\n      assign B_of_ctl_full      = B_of_full;\n      assign B_of_data_full     = 0;\n      assign B_of_ctl_a_full    = B_of_a_full;\n      assign B_of_data_a_full   = 0;\n      assign B_pre_data_a_full  = 0;\n  end\n  if (PRESENT_DATA_C) begin\n      assign C_of_data_full     = C_of_full;\n      assign C_of_ctl_full      = 0;\n      assign C_of_data_a_full   = C_of_a_full;\n      assign C_of_ctl_a_full    = 0;\n      assign C_pre_data_a_full  = C_pre_fifo_a_full;\n  end\n  else  begin\n      assign C_of_ctl_full       = C_of_full;\n      assign C_of_data_full      = 0;\n      assign C_of_ctl_a_full     = C_of_a_full;\n      assign C_of_data_a_full    = 0;\n      assign C_pre_data_a_full    = 0;\n  end\n  if (PRESENT_DATA_D) begin\n      assign D_of_data_full      = D_of_full;\n      assign D_of_ctl_full       = 0;\n      assign D_of_data_a_full    = D_of_a_full;\n      assign D_of_ctl_a_full     = 0;\n      assign D_pre_data_a_full   = D_pre_fifo_a_full;\n  end\n  else  begin\n      assign D_of_ctl_full       = D_of_full;\n      assign D_of_data_full      = 0;\n      assign D_of_ctl_a_full     = D_of_a_full;\n      assign D_of_data_a_full    = 0;\n      assign D_pre_data_a_full   = 0;\n  end\n\n  if (PRESENT_DATA_A )\n      case ( LANE_REMAP[1:0]   )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[79:0];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[79:0];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[79:0];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[79:0];\n      endcase\n  else\n      case ( LANE_REMAP[1:0]   )\n      2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n      2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n      2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n      2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n      endcase\n\n  if (PRESENT_DATA_B )\n      case ( LANE_REMAP[5:4]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[159:80];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[159:80];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[159:80];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[159:80];\n      endcase\n   else\n     if (HIGHEST_LANE > 1)\n        case ( LANE_REMAP[5:4]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n        endcase\n\n  if (PRESENT_DATA_C)\n      case ( LANE_REMAP[9:8]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[239:160];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[239:160];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[239:160];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[239:160];\n      endcase\n  else\n     if (HIGHEST_LANE > 2)\n        case ( LANE_REMAP[9:8]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n        endcase\n\n  if (PRESENT_DATA_D )\n      case ( LANE_REMAP[13:12]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[319:240];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[319:240];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[319:240];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[319:240];\n      endcase\n  else\n     if (HIGHEST_LANE > 3)\n        case ( LANE_REMAP[13:12]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n      endcase\n\nif (HIGHEST_LANE > 1)\n assign _phy_ctl_wd = {phy_ctl_wd[31:23], data_offset, phy_ctl_wd[16:0]};\nif (HIGHEST_LANE == 1)\n assign _phy_ctl_wd = phy_ctl_wd;\n\n\n\nBUFIO rclk_buf(.I(rclk_), .O(rclk) );\n\nif ( BYTE_LANES[0] ) begin : ddr_byte_lane_A\n\n  assign phy_dout_remap[79:0] = part_select_80(phy_dout, (LANE_REMAP[1:0]));\n\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"A\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[0] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[11:0]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[11:0]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (A_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (A_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (A_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (A_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (A_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (A_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (A_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (A_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (A_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (A_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (A_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (A_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (A_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (A_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (A_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (A_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (A_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_A(\n      .mem_dq_out            (mem_dq_out[11:0]),\n      .mem_dq_ts             (mem_dq_ts[11:0]),\n      .mem_dq_in             (mem_dq_in[9:0]),\n      .mem_dqs_out           (mem_dqs_out[0]),\n      .mem_dqs_ts            (mem_dqs_ts[0]),\n      .mem_dqs_in            (mem_dqs_in[0]),\n      .rst                   (A_rst_primitives),\n      .rst_pi_div2           (A_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (A_ddr_clk),\n      .rclk                  (A_rclk),\n      .pi_dqs_found          (A_pi_dqs_found),\n      .dqs_out_of_range      (A_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (A_if_a_empty),\n      .if_empty              (A_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (A_of_a_full),\n      .of_full               (A_of_full),\n      .pre_fifo_a_full       (A_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[79:0]),\n      .phy_dout              (phy_dout_remap[79:0]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({B_byte_rd_en,C_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (A_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (A_idelay_ce),\n      .idelay_ld             (A_idelay_ld),\n      .pi_rst_dqs_find       (A_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (A_po_fine_enable),\n      .po_coarse_enable      (A_po_coarse_enable),\n      .po_fine_inc           (A_po_fine_inc),\n      .po_coarse_inc         (A_po_coarse_inc),\n      .po_counter_load_en    (A_po_counter_load_en),\n      .po_counter_read_en    (A_po_counter_read_en),\n      .po_counter_load_val   (A_po_counter_load_val),\n      .po_coarse_overflow    (A_po_coarse_overflow),\n      .po_fine_overflow      (A_po_fine_overflow),\n      .po_counter_read_val   (A_po_counter_read_val),\n      .po_sel_fine_oclk_delay(A_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (A_pi_fine_enable),\n      .pi_fine_inc           (A_pi_fine_inc),\n      .pi_counter_load_en    (A_pi_counter_load_en),\n      .pi_counter_read_en    (A_pi_counter_read_en),\n      .pi_counter_load_val   (A_pi_counter_load_val),\n      .pi_fine_overflow      (A_pi_fine_overflow),\n      .pi_counter_read_val   (A_pi_counter_read_val),\n      .pi_iserdes_rst        (A_pi_iserdes_rst),\n      .pi_phase_locked       (A_pi_phase_locked),\n      .fine_delay            (A_fine_delay),\n      .fine_delay_sel        (A_fine_delay_sel)\n);\n\nend\nelse begin : no_ddr_byte_lane_A\n       assign A_of_a_full           = 1'b0;\n       assign A_of_full             = 1'b0;\n       assign A_pre_fifo_a_full     = 1'b0;\n       assign A_if_empty            = 1'b0;\n       assign A_byte_rd_en          = 1'b1;\n       assign A_if_a_empty          = 1'b0;\n       assign A_pi_phase_locked     = 1;\n       assign A_pi_dqs_found        = 1;\n       assign A_rclk                = 0;\n       assign A_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign A_pi_counter_read_val = 0;\n       assign A_po_counter_read_val = 0;\n       assign A_pi_fine_overflow    = 0;\n       assign A_po_coarse_overflow  = 0;\n       assign A_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[1] ) begin : ddr_byte_lane_B\n\n  assign phy_dout_remap[159:80] = part_select_80(phy_dout, (LANE_REMAP[5:4]));\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"B\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[1] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[23:12]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[23:12]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (B_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (B_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (B_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (B_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (B_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (B_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (B_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (B_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (B_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (B_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (B_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (B_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (B_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (B_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (B_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (B_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (B_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (B_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_B(\n      .mem_dq_out            (mem_dq_out[23:12]),\n      .mem_dq_ts             (mem_dq_ts[23:12]),\n      .mem_dq_in             (mem_dq_in[19:10]),\n      .mem_dqs_out           (mem_dqs_out[1]),\n      .mem_dqs_ts            (mem_dqs_ts[1]),\n      .mem_dqs_in            (mem_dqs_in[1]),\n      .rst                   (B_rst_primitives),\n      .rst_pi_div2           (B_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (B_ddr_clk),\n      .rclk                  (B_rclk),\n      .pi_dqs_found          (B_pi_dqs_found),\n      .dqs_out_of_range      (B_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (B_if_a_empty),\n      .if_empty              (B_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (B_of_a_full),\n      .of_full               (B_of_full),\n      .pre_fifo_a_full       (B_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[159:80]),\n      .phy_dout              (phy_dout_remap[159:80]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,C_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (B_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (B_idelay_ce),\n      .idelay_ld             (B_idelay_ld),\n      .pi_rst_dqs_find       (B_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (B_po_fine_enable),\n      .po_coarse_enable      (B_po_coarse_enable),\n      .po_fine_inc           (B_po_fine_inc),\n      .po_coarse_inc         (B_po_coarse_inc),\n      .po_counter_load_en    (B_po_counter_load_en),\n      .po_counter_read_en    (B_po_counter_read_en),\n      .po_counter_load_val   (B_po_counter_load_val),\n      .po_coarse_overflow    (B_po_coarse_overflow),\n      .po_fine_overflow      (B_po_fine_overflow),\n      .po_counter_read_val   (B_po_counter_read_val),\n      .po_sel_fine_oclk_delay(B_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (B_pi_fine_enable),\n      .pi_fine_inc           (B_pi_fine_inc),\n      .pi_counter_load_en    (B_pi_counter_load_en),\n      .pi_counter_read_en    (B_pi_counter_read_en),\n      .pi_counter_load_val   (B_pi_counter_load_val),\n      .pi_fine_overflow      (B_pi_fine_overflow),\n      .pi_counter_read_val   (B_pi_counter_read_val),\n      .pi_iserdes_rst        (B_pi_iserdes_rst),\n      .pi_phase_locked       (B_pi_phase_locked),\n      .fine_delay            (B_fine_delay),\n      .fine_delay_sel        (B_fine_delay_sel)\n);\nend\nelse begin : no_ddr_byte_lane_B\n       assign B_of_a_full           = 1'b0;\n       assign B_of_full             = 1'b0;\n       assign B_pre_fifo_a_full     = 1'b0;\n       assign B_if_empty            = 1'b0;\n       assign B_if_a_empty          = 1'b0;\n       assign B_byte_rd_en          = 1'b1;\n       assign B_pi_phase_locked     = 1;\n       assign B_pi_dqs_found        = 1;\n       assign B_rclk                = 0;\n       assign B_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign B_pi_counter_read_val = 0;\n       assign B_po_counter_read_val = 0;\n       assign B_pi_fine_overflow    = 0;\n       assign B_po_coarse_overflow  = 0;\n       assign B_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[2] ) begin : ddr_byte_lane_C\n\n  assign phy_dout_remap[239:160] = part_select_80(phy_dout, (LANE_REMAP[9:8]));\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"C\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[2] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[35:24]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[35:24]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (C_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (C_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (C_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (C_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (C_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (C_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (C_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (C_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (C_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (C_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (C_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (C_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (C_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (C_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (C_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (C_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (C_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (C_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_C(\n      .mem_dq_out            (mem_dq_out[35:24]),\n      .mem_dq_ts             (mem_dq_ts[35:24]),\n      .mem_dq_in             (mem_dq_in[29:20]),\n      .mem_dqs_out           (mem_dqs_out[2]),\n      .mem_dqs_ts            (mem_dqs_ts[2]),\n      .mem_dqs_in            (mem_dqs_in[2]),\n      .rst                   (C_rst_primitives),\n      .rst_pi_div2           (C_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (C_ddr_clk),\n      .rclk                  (C_rclk),\n      .pi_dqs_found          (C_pi_dqs_found),\n      .dqs_out_of_range      (C_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (C_if_a_empty),\n      .if_empty              (C_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (C_of_a_full),\n      .of_full               (C_of_full),\n      .pre_fifo_a_full       (C_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[239:160]),\n      .phy_dout              (phy_dout_remap[239:160]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,B_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (C_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (C_idelay_ce),\n      .idelay_ld             (C_idelay_ld),\n      .pi_rst_dqs_find       (C_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (C_po_fine_enable),\n      .po_coarse_enable      (C_po_coarse_enable),\n      .po_fine_inc           (C_po_fine_inc),\n      .po_coarse_inc         (C_po_coarse_inc),\n      .po_counter_load_en    (C_po_counter_load_en),\n      .po_counter_read_en    (C_po_counter_read_en),\n      .po_counter_load_val   (C_po_counter_load_val),\n      .po_coarse_overflow    (C_po_coarse_overflow),\n      .po_fine_overflow      (C_po_fine_overflow),\n      .po_counter_read_val   (C_po_counter_read_val),\n      .po_sel_fine_oclk_delay(C_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (C_pi_fine_enable),\n      .pi_fine_inc           (C_pi_fine_inc),\n      .pi_counter_load_en    (C_pi_counter_load_en),\n      .pi_counter_read_en    (C_pi_counter_read_en),\n      .pi_counter_load_val   (C_pi_counter_load_val),\n      .pi_fine_overflow      (C_pi_fine_overflow),\n      .pi_counter_read_val   (C_pi_counter_read_val),\n      .pi_iserdes_rst        (C_pi_iserdes_rst),\n      .pi_phase_locked       (C_pi_phase_locked),\n      .fine_delay            (C_fine_delay),\n      .fine_delay_sel        (C_fine_delay_sel)\n);\n\nend\nelse begin : no_ddr_byte_lane_C\n       assign C_of_a_full           = 1'b0;\n       assign C_of_full             = 1'b0;\n       assign C_pre_fifo_a_full     = 1'b0;\n       assign C_if_empty            = 1'b0;\n       assign C_byte_rd_en          = 1'b1;\n       assign C_if_a_empty          = 1'b0;\n       assign C_pi_phase_locked     = 1;\n       assign C_pi_dqs_found        = 1;\n       assign C_rclk                = 0;\n       assign C_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign C_pi_counter_read_val = 0;\n       assign C_po_counter_read_val = 0;\n       assign C_pi_fine_overflow    = 0;\n       assign C_po_coarse_overflow  = 0;\n       assign C_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[3] ) begin : ddr_byte_lane_D\n  assign phy_dout_remap[319:240] = part_select_80(phy_dout, (LANE_REMAP[13:12]));\n\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"D\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[3] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[47:36]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[47:36]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (D_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (D_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (D_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (D_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (D_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (D_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (D_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (D_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (D_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (D_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (D_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (D_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (D_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (D_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (D_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (D_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (D_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (D_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_D(\n      .mem_dq_out            (mem_dq_out[47:36]),\n      .mem_dq_ts             (mem_dq_ts[47:36]),\n      .mem_dq_in             (mem_dq_in[39:30]),\n      .mem_dqs_out           (mem_dqs_out[3]),\n      .mem_dqs_ts            (mem_dqs_ts[3]),\n      .mem_dqs_in            (mem_dqs_in[3]),\n      .rst                   (D_rst_primitives),\n      .rst_pi_div2           (D_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (D_ddr_clk),\n      .rclk                  (D_rclk),\n      .pi_dqs_found          (D_pi_dqs_found),\n      .dqs_out_of_range      (D_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (D_if_a_empty),\n      .if_empty              (D_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (D_of_a_full),\n      .of_full               (D_of_full),\n      .pre_fifo_a_full       (D_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[319:240]),\n      .phy_dout              (phy_dout_remap[319:240]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (D_idelay_ce),\n      .idelay_ld             (D_idelay_ld),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,B_byte_rd_en,C_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (D_byte_rd_en),\n\n      .pi_rst_dqs_find       (D_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (D_po_fine_enable),\n      .po_coarse_enable      (D_po_coarse_enable),\n      .po_fine_inc           (D_po_fine_inc),\n      .po_coarse_inc         (D_po_coarse_inc),\n      .po_counter_load_en    (D_po_counter_load_en),\n      .po_counter_read_en    (D_po_counter_read_en),\n      .po_counter_load_val   (D_po_counter_load_val),\n      .po_coarse_overflow    (D_po_coarse_overflow),\n      .po_fine_overflow      (D_po_fine_overflow),\n      .po_counter_read_val   (D_po_counter_read_val),\n      .po_sel_fine_oclk_delay(D_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (D_pi_fine_enable),\n      .pi_fine_inc           (D_pi_fine_inc),\n      .pi_counter_load_en    (D_pi_counter_load_en),\n      .pi_counter_read_en    (D_pi_counter_read_en),\n      .pi_counter_load_val   (D_pi_counter_load_val),\n      .pi_fine_overflow      (D_pi_fine_overflow),\n      .pi_counter_read_val   (D_pi_counter_read_val),\n      .pi_iserdes_rst        (D_pi_iserdes_rst),\n      .pi_phase_locked       (D_pi_phase_locked),\n      .fine_delay            (D_fine_delay),\n      .fine_delay_sel        (D_fine_delay_sel)\n);\nend\nelse begin : no_ddr_byte_lane_D\n       assign D_of_a_full           = 1'b0;\n       assign D_of_full             = 1'b0;\n       assign D_pre_fifo_a_full     = 1'b0;\n       assign D_if_empty            = 1'b0;\n       assign D_byte_rd_en          = 1'b1;\n       assign D_if_a_empty          = 1'b0;\n       assign D_rclk                = 0;\n       assign D_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign D_pi_dqs_found        = 1;\n       assign D_pi_phase_locked     = 1;\n       assign D_pi_counter_read_val = 0;\n       assign D_po_counter_read_val = 0;\n       assign D_pi_fine_overflow    = 0;\n       assign D_po_coarse_overflow  = 0;\n       assign D_po_fine_overflow    = 0;\nend\nendgenerate\n\n\nassign phaser_ctl_bus[MSB_RANK_SEL_I : MSB_RANK_SEL_I - 7] = in_rank;\n\nPHY_CONTROL #(\n  .AO_WRLVL_EN          ( PC_AO_WRLVL_EN),\n  .AO_TOGGLE            ( PC_AO_TOGGLE),\n  .BURST_MODE           ( PC_BURST_MODE),\n  .CO_DURATION          ( PC_CO_DURATION ),\n  .CLK_RATIO            ( PC_CLK_RATIO),\n  .DATA_CTL_A_N         ( PC_DATA_CTL_A),\n  .DATA_CTL_B_N         ( PC_DATA_CTL_B),\n  .DATA_CTL_C_N         ( PC_DATA_CTL_C),\n  .DATA_CTL_D_N         ( PC_DATA_CTL_D),\n  .DI_DURATION          ( PC_DI_DURATION ),\n  .DO_DURATION          ( PC_DO_DURATION ),\n  .EVENTS_DELAY         ( PC_EVENTS_DELAY),\n  .FOUR_WINDOW_CLOCKS   ( PC_FOUR_WINDOW_CLOCKS),\n  .MULTI_REGION         ( PC_MULTI_REGION ),\n  .PHY_COUNT_ENABLE     ( PC_PHY_COUNT_EN),\n  .DISABLE_SEQ_MATCH    ( PC_DISABLE_SEQ_MATCH),\n  .SYNC_MODE            ( PC_SYNC_MODE),\n  .CMD_OFFSET           ( PC_CMD_OFFSET),\n\n  .RD_CMD_OFFSET_0      ( PC_RD_CMD_OFFSET_0),\n  .RD_CMD_OFFSET_1      ( PC_RD_CMD_OFFSET_1),\n  .RD_CMD_OFFSET_2      ( PC_RD_CMD_OFFSET_2),\n  .RD_CMD_OFFSET_3      ( PC_RD_CMD_OFFSET_3),\n  .RD_DURATION_0        ( PC_RD_DURATION_0),\n  .RD_DURATION_1        ( PC_RD_DURATION_1),\n  .RD_DURATION_2        ( PC_RD_DURATION_2),\n  .RD_DURATION_3        ( PC_RD_DURATION_3),\n  .WR_CMD_OFFSET_0      ( PC_WR_CMD_OFFSET_0),\n  .WR_CMD_OFFSET_1      ( PC_WR_CMD_OFFSET_1),\n  .WR_CMD_OFFSET_2      ( PC_WR_CMD_OFFSET_2),\n  .WR_CMD_OFFSET_3      ( PC_WR_CMD_OFFSET_3),\n  .WR_DURATION_0        ( PC_WR_DURATION_0),\n  .WR_DURATION_1        ( PC_WR_DURATION_1),\n  .WR_DURATION_2        ( PC_WR_DURATION_2),\n  .WR_DURATION_3        ( PC_WR_DURATION_3)\n) phy_control_i (\n  .AUXOUTPUT            (aux_out),\n  .INBURSTPENDING       (phaser_ctl_bus[MSB_BURST_PEND_PI:MSB_BURST_PEND_PI-3]),\n  .INRANKA              (in_rank[1:0]),\n  .INRANKB              (in_rank[3:2]),\n  .INRANKC              (in_rank[5:4]),\n  .INRANKD              (in_rank[7:6]),\n  .OUTBURSTPENDING      (phaser_ctl_bus[MSB_BURST_PEND_PO:MSB_BURST_PEND_PO-3]),\n  .PCENABLECALIB        (phy_encalib),\n  .PHYCTLALMOSTFULL     (phy_ctl_a_full),\n  .PHYCTLEMPTY          (phy_ctl_empty),\n  .PHYCTLFULL           (phy_ctl_full),\n  .PHYCTLREADY          (phy_ctl_ready),\n  .MEMREFCLK            (mem_refclk),\n  .PHYCLK               (phy_ctl_clk),\n  .PHYCTLMSTREMPTY      (phy_ctl_mstr_empty),\n  .PHYCTLWD             (_phy_ctl_wd),\n  .PHYCTLWRENABLE       (phy_ctl_wr),\n  .PLLLOCK              (pll_lock),\n  .REFDLLLOCK           (ref_dll_lock),        \n  .RESET                (rst),\n  .SYNCIN               (sync_pulse),\n  .READCALIBENABLE      (phy_read_calib),\n  .WRITECALIBENABLE     (phy_write_calib)\n`ifdef USE_PHY_CONTROL_TEST\n  , .TESTINPUT         (16'b0),\n    .TESTOUTPUT        (test_output),\n    .TESTSELECT        (test_select),\n    .SCANENABLEN       (scan_enable)\n`endif\n);\n\n\n\n\nalways @(posedge phy_clk ) begin\n    case (calib_sel[1:0])\n    2'h0: begin\n       po_coarse_overflow <= #1 A_po_coarse_overflow;\n       po_fine_overflow <= #1 A_po_fine_overflow;\n       po_counter_read_val <= #1 A_po_counter_read_val;\n\n       pi_fine_overflow <= #1 A_pi_fine_overflow;\n       pi_counter_read_val<= #1 A_pi_counter_read_val;\n\n       pi_phase_locked  <= #1 A_pi_phase_locked;\n       if ( calib_in_common)\n           pi_dqs_found     <= #1 pi_dqs_found_any;\n       else\n           pi_dqs_found     <= #1 A_pi_dqs_found;\n       pi_dqs_out_of_range <= #1 A_pi_dqs_out_of_range;\n      end\n\n    2'h1: begin\n       po_coarse_overflow     <= #1 B_po_coarse_overflow;\n       po_fine_overflow       <= #1 B_po_fine_overflow;\n       po_counter_read_val    <= #1 B_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 B_pi_fine_overflow;\n       pi_counter_read_val    <= #1 B_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 B_pi_phase_locked;\n       if ( calib_in_common)\n          pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n          pi_dqs_found           <= #1 B_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 B_pi_dqs_out_of_range;\n       end\n\n    2'h2: begin\n       po_coarse_overflow     <= #1 C_po_coarse_overflow;\n       po_fine_overflow       <= #1 C_po_fine_overflow;\n       po_counter_read_val    <= #1 C_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 C_pi_fine_overflow;\n       pi_counter_read_val    <= #1 C_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 C_pi_phase_locked;\n       if ( calib_in_common)\n           pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n           pi_dqs_found           <= #1 C_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 C_pi_dqs_out_of_range;\n      end\n\n    2'h3: begin\n       po_coarse_overflow     <= #1 D_po_coarse_overflow;\n       po_fine_overflow       <= #1 D_po_fine_overflow;\n       po_counter_read_val    <= #1 D_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 D_pi_fine_overflow;\n       pi_counter_read_val    <= #1 D_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 D_pi_phase_locked;\n       if ( calib_in_common)\n          pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n          pi_dqs_found           <= #1 D_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 D_pi_dqs_out_of_range;\n\n       end\n     default: begin\n        po_coarse_overflow <= po_coarse_overflow;\n     end\n    endcase\nend\n\nwire  B_mux_ctrl;\nwire  C_mux_ctrl;\nwire  D_mux_ctrl;\ngenerate\n  if (HIGHEST_LANE > 1)\n    assign B_mux_ctrl = ( !calib_zero_lanes[1] && ( ! calib_zero_ctrl || DATA_CTL_N[1]));\n  else\n    assign B_mux_ctrl = 0;\n  if (HIGHEST_LANE > 2)\n    assign C_mux_ctrl = ( !calib_zero_lanes[2] && (! calib_zero_ctrl || DATA_CTL_N[2]));\n  else\n    assign C_mux_ctrl = 0;\n  if (HIGHEST_LANE > 3)\n    assign D_mux_ctrl = ( !calib_zero_lanes[3] && ( ! calib_zero_ctrl || DATA_CTL_N[3]));\n  else\n    assign D_mux_ctrl = 0;\nendgenerate\n\nalways @(*) begin\n        A_pi_fine_enable          = 0;\n        A_pi_fine_inc             = 0;\n        A_pi_counter_load_en      = 0;\n        A_pi_counter_read_en      = 0;\n        A_pi_counter_load_val     = 0;\n        A_pi_rst_dqs_find         = 0;\n\n\n        A_po_fine_enable          = 0;\n        A_po_coarse_enable        = 0;\n        A_po_fine_inc             = 0;\n        A_po_coarse_inc           = 0;\n        A_po_counter_load_en      = 0;\n        A_po_counter_read_en      = 0;\n        A_po_counter_load_val     = 0;\n        A_po_sel_fine_oclk_delay  = 0;\n\n        A_idelay_ce               = 0;\n        A_idelay_ld               = 0;\n        A_fine_delay              = 0;\n        A_fine_delay_sel          = 0;\n\n        B_pi_fine_enable          = 0;\n        B_pi_fine_inc   = 0;\n        B_pi_counter_load_en      = 0;\n        B_pi_counter_read_en      = 0;\n        B_pi_counter_load_val     = 0;\n        B_pi_rst_dqs_find         = 0;\n\n\n        B_po_fine_enable          = 0;\n        B_po_coarse_enable        = 0;\n        B_po_fine_inc             = 0;\n        B_po_coarse_inc           = 0;\n        B_po_counter_load_en      = 0;\n        B_po_counter_read_en      = 0;\n        B_po_counter_load_val     = 0;\n        B_po_sel_fine_oclk_delay  = 0;\n\n        B_idelay_ce               = 0;\n        B_idelay_ld               = 0;\n        B_fine_delay              = 0;\n        B_fine_delay_sel          = 0;\n\n        C_pi_fine_enable    = 0;\n        C_pi_fine_inc   = 0;\n        C_pi_counter_load_en      = 0;\n        C_pi_counter_read_en      = 0;\n        C_pi_counter_load_val     = 0;\n        C_pi_rst_dqs_find         = 0;\n\n\n        C_po_fine_enable          = 0;\n        C_po_coarse_enable        = 0;\n        C_po_fine_inc             = 0;\n        C_po_coarse_inc           = 0;\n        C_po_counter_load_en      = 0;\n        C_po_counter_read_en      = 0;\n        C_po_counter_load_val     = 0;\n        C_po_sel_fine_oclk_delay  = 0;\n\n        C_idelay_ce               = 0;\n        C_idelay_ld               = 0;\n        C_fine_delay              = 0;\n        C_fine_delay_sel          = 0;\n\n        D_pi_fine_enable          = 0;\n        D_pi_fine_inc             = 0;\n        D_pi_counter_load_en      = 0;\n        D_pi_counter_read_en      = 0;\n        D_pi_counter_load_val     = 0;\n        D_pi_rst_dqs_find         = 0;\n\n\n        D_po_fine_enable          = 0;\n        D_po_coarse_enable        = 0;\n        D_po_fine_inc             = 0;\n        D_po_coarse_inc           = 0;\n        D_po_counter_load_en      = 0;\n        D_po_counter_read_en      = 0;\n        D_po_counter_load_val     = 0;\n        D_po_sel_fine_oclk_delay  = 0;\n\n        D_idelay_ce               = 0;\n        D_idelay_ld               = 0;\n        D_fine_delay              = 0;\n        D_fine_delay_sel          = 0;\n\n    if ( calib_sel[2]) begin\n    \n        A_pi_fine_enable          = 0;\n        A_pi_fine_inc             = 0;\n        A_pi_counter_load_en      = 0;\n        A_pi_counter_read_en      = 0;\n        A_pi_counter_load_val     = 0;\n    A_pi_rst_dqs_find         = 0;\n\n\n        A_po_fine_enable          = 0;\n        A_po_coarse_enable        = 0;\n        A_po_fine_inc             = 0;\n        A_po_coarse_inc           = 0;\n        A_po_counter_load_en      = 0;\n        A_po_counter_read_en      = 0;\n        A_po_counter_load_val     = 0;\n    A_po_sel_fine_oclk_delay  = 0;\n\n        A_idelay_ce               = 0;\n        A_idelay_ld               = 0;\n        A_fine_delay              = 0;\n        A_fine_delay_sel          = 0;\n\n        B_pi_fine_enable          = 0;\n        B_pi_fine_inc             = 0;\n        B_pi_counter_load_en      = 0;\n        B_pi_counter_read_en      = 0;\n        B_pi_counter_load_val     = 0;\n    B_pi_rst_dqs_find         = 0;\n\n\n        B_po_fine_enable          = 0;\n        B_po_coarse_enable        = 0;\n        B_po_fine_inc             = 0;\n        B_po_coarse_inc           = 0;\n        B_po_counter_load_en      = 0;\n        B_po_counter_read_en      = 0;\n        B_po_counter_load_val     = 0;\n    B_po_sel_fine_oclk_delay  = 0;\n\n        B_idelay_ce               = 0;\n        B_idelay_ld               = 0;\n        B_fine_delay              = 0;\n        B_fine_delay_sel          = 0;\n\n\n        C_pi_fine_enable          = 0;\n        C_pi_fine_inc             = 0;\n        C_pi_counter_load_en      = 0;\n        C_pi_counter_read_en      = 0;\n        C_pi_counter_load_val     = 0;\n    C_pi_rst_dqs_find         = 0;\n\n\n        C_po_fine_enable          = 0;\n        C_po_coarse_enable        = 0;\n        C_po_fine_inc             = 0;\n        C_po_coarse_inc           = 0;\n        C_po_counter_load_en      = 0;\n        C_po_counter_read_en      = 0;\n        C_po_counter_load_val     = 0;\n    C_po_sel_fine_oclk_delay  = 0;\n\n        C_idelay_ce               = 0;\n        C_idelay_ld               = 0;\n        C_fine_delay              = 0;\n        C_fine_delay_sel          = 0;\n\n\n        D_pi_fine_enable          = 0;\n        D_pi_fine_inc             = 0;\n        D_pi_counter_load_en      = 0;\n        D_pi_counter_read_en      = 0;\n        D_pi_counter_load_val     = 0;\n    D_pi_rst_dqs_find         = 0;\n\n\n        D_po_fine_enable          = 0;\n        D_po_coarse_enable        = 0;\n        D_po_fine_inc             = 0;\n        D_po_coarse_inc           = 0;\n        D_po_counter_load_en      = 0;\n        D_po_counter_read_en      = 0;\n        D_po_counter_load_val     = 0;\n    D_po_sel_fine_oclk_delay  = 0;\n\n        D_idelay_ce               = 0;\n        D_idelay_ld               = 0;\n        D_fine_delay              = 0;\n        D_fine_delay_sel          = 0;\n\n    end else\n    if (calib_in_common) begin\n       \n       \n        if ( !calib_zero_lanes[0] && (! calib_zero_ctrl || DATA_CTL_N[0])) begin\n            A_pi_fine_enable          = pi_fine_enable;\n            A_pi_fine_inc             = pi_fine_inc;\n            A_pi_counter_load_en      = pi_counter_load_en;\n            A_pi_counter_read_en      = pi_counter_read_en;\n            A_pi_counter_load_val     = pi_counter_load_val;\n        A_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            A_po_fine_enable          = po_fine_enable;\n            A_po_coarse_enable        = po_coarse_enable;\n            A_po_fine_inc             = po_fine_inc;\n            A_po_coarse_inc           = po_coarse_inc;\n            A_po_counter_load_en      = po_counter_load_en;\n            A_po_counter_read_en      = po_counter_read_en;\n            A_po_counter_load_val     = po_counter_load_val;\n            A_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            A_idelay_ce               = idelay_ce;\n            A_idelay_ld               = idelay_ld;\n            A_fine_delay              = fine_delay ;\n            A_fine_delay_sel          = fine_delay_sel;\n        end\n\n        if ( B_mux_ctrl) begin\n            B_pi_fine_enable          = pi_fine_enable;\n            B_pi_fine_inc             = pi_fine_inc;\n            B_pi_counter_load_en      = pi_counter_load_en;\n            B_pi_counter_read_en      = pi_counter_read_en;\n            B_pi_counter_load_val     = pi_counter_load_val;\n        B_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            B_po_fine_enable          = po_fine_enable;\n            B_po_coarse_enable        = po_coarse_enable;\n            B_po_fine_inc             = po_fine_inc;\n            B_po_coarse_inc           = po_coarse_inc;\n            B_po_counter_load_en      = po_counter_load_en;\n            B_po_counter_read_en      = po_counter_read_en;\n            B_po_counter_load_val     = po_counter_load_val;\n            B_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            B_idelay_ce               = idelay_ce;\n            B_idelay_ld               = idelay_ld;\n            B_fine_delay              = fine_delay ;\n            B_fine_delay_sel          = fine_delay_sel;\n         end\n\n        if ( C_mux_ctrl) begin\n            C_pi_fine_enable          = pi_fine_enable;\n            C_pi_fine_inc             = pi_fine_inc;\n            C_pi_counter_load_en      = pi_counter_load_en;\n            C_pi_counter_read_en      = pi_counter_read_en;\n            C_pi_counter_load_val     = pi_counter_load_val;\n        C_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            C_po_fine_enable          = po_fine_enable;\n            C_po_coarse_enable        = po_coarse_enable;\n            C_po_fine_inc             = po_fine_inc;\n            C_po_coarse_inc           = po_coarse_inc;\n            C_po_counter_load_en      = po_counter_load_en;\n            C_po_counter_read_en      = po_counter_read_en;\n            C_po_counter_load_val     = po_counter_load_val;\n            C_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            C_idelay_ce               = idelay_ce;\n            C_idelay_ld               = idelay_ld;\n            C_fine_delay              = fine_delay ;\n            C_fine_delay_sel          = fine_delay_sel;\n        end\n\n        if ( D_mux_ctrl) begin\n            D_pi_fine_enable          = pi_fine_enable;\n            D_pi_fine_inc             = pi_fine_inc;\n            D_pi_counter_load_en      = pi_counter_load_en;\n            D_pi_counter_read_en      = pi_counter_read_en;\n            D_pi_counter_load_val     = pi_counter_load_val;\n        D_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            D_po_fine_enable          = po_fine_enable;\n            D_po_coarse_enable        = po_coarse_enable;\n            D_po_fine_inc             = po_fine_inc;\n            D_po_coarse_inc           = po_coarse_inc;\n            D_po_counter_load_en      = po_counter_load_en;\n            D_po_counter_read_en      = po_counter_read_en;\n            D_po_counter_load_val     = po_counter_load_val;\n            D_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            D_idelay_ce               = idelay_ce;\n            D_idelay_ld               = idelay_ld;\n            D_fine_delay              = fine_delay ;\n            D_fine_delay_sel          = fine_delay_sel;\n        end\n    end\n    else begin\n    \n\n\n    case (calib_sel[1:0])\n    0:  begin\n        A_pi_fine_enable          = pi_fine_enable;\n        A_pi_fine_inc             = pi_fine_inc;\n        A_pi_counter_load_en      = pi_counter_load_en;\n        A_pi_counter_read_en      = pi_counter_read_en;\n        A_pi_counter_load_val     = pi_counter_load_val;\n        A_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        A_po_fine_enable          = po_fine_enable;\n        A_po_coarse_enable        = po_coarse_enable;\n        A_po_fine_inc             = po_fine_inc;\n        A_po_coarse_inc           = po_coarse_inc;\n        A_po_counter_load_en      = po_counter_load_en;\n        A_po_counter_read_en      = po_counter_read_en;\n        A_po_counter_load_val     = po_counter_load_val;\n    A_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        A_idelay_ce               = idelay_ce;\n        A_idelay_ld               = idelay_ld;\n        A_fine_delay              = fine_delay ;\n        A_fine_delay_sel          = fine_delay_sel;\n\n     end\n    1: begin\n        B_pi_fine_enable          = pi_fine_enable;\n        B_pi_fine_inc             = pi_fine_inc;\n        B_pi_counter_load_en      = pi_counter_load_en;\n        B_pi_counter_read_en      = pi_counter_read_en;\n        B_pi_counter_load_val     = pi_counter_load_val;\n        B_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        B_po_fine_enable          = po_fine_enable;\n        B_po_coarse_enable        = po_coarse_enable;\n        B_po_fine_inc             = po_fine_inc;\n        B_po_coarse_inc           = po_coarse_inc;\n        B_po_counter_load_en      = po_counter_load_en;\n        B_po_counter_read_en      = po_counter_read_en;\n        B_po_counter_load_val     = po_counter_load_val;\n    B_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        B_idelay_ce               = idelay_ce;\n        B_idelay_ld               = idelay_ld;\n        B_fine_delay              = fine_delay ;\n        B_fine_delay_sel          = fine_delay_sel;\n\n     end\n\n    2: begin\n        C_pi_fine_enable          = pi_fine_enable;\n        C_pi_fine_inc             = pi_fine_inc;\n        C_pi_counter_load_en      = pi_counter_load_en;\n        C_pi_counter_read_en      = pi_counter_read_en;\n        C_pi_counter_load_val     = pi_counter_load_val;\n        C_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        C_po_fine_enable          = po_fine_enable;\n        C_po_coarse_enable        = po_coarse_enable;\n        C_po_fine_inc             = po_fine_inc;\n        C_po_coarse_inc           = po_coarse_inc;\n        C_po_counter_load_en      = po_counter_load_en;\n        C_po_counter_read_en      = po_counter_read_en;\n        C_po_counter_load_val     = po_counter_load_val;\n    C_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        C_idelay_ce               = idelay_ce;\n        C_idelay_ld               = idelay_ld;\n        C_fine_delay              = fine_delay ;\n        C_fine_delay_sel          = fine_delay_sel;\n\n     end\n\n    3: begin\n        D_pi_fine_enable          = pi_fine_enable;\n        D_pi_fine_inc             = pi_fine_inc;\n        D_pi_counter_load_en      = pi_counter_load_en;\n        D_pi_counter_read_en      = pi_counter_read_en;\n        D_pi_counter_load_val     = pi_counter_load_val;\n        D_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        D_po_fine_enable          = po_fine_enable;\n        D_po_coarse_enable        = po_coarse_enable;\n        D_po_fine_inc             = po_fine_inc;\n        D_po_coarse_inc           = po_coarse_inc;\n        D_po_counter_load_en      = po_counter_load_en;\n        D_po_counter_load_val     = po_counter_load_val;\n        D_po_counter_read_en      = po_counter_read_en;\n    D_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        D_idelay_ce               = idelay_ce;\n        D_idelay_ld               = idelay_ld;\n        D_fine_delay              = fine_delay ;\n        D_fine_delay_sel          = fine_delay_sel;\n\n     end\n    endcase\n    end\nend\n\n\nPHASER_REF phaser_ref_i(\n\n .LOCKED (ref_dll_lock),\n .CLKIN  (freq_refclk),\n .PWRDWN (1'b0),\n .RST    ( ! pll_lock)\n\n);\n\n\n\ngenerate\nif ( GENERATE_IDELAYCTRL == \"TRUE\")\nIDELAYCTRL idelayctrl (\n    .RDY                (),\n    .REFCLK             (idelayctrl_refclk),\n    .RST                (rst)\n);\nendgenerate\n\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: mig_7series_v4_1_ddr_phy_4lanes. Module specification: This module implements a DDR (Double Data Rate) PHY (Physical Layer) interface for a memory controller, designed for 7 series FPGAs, supporting up to 4 byte lanes. It manages timing, calibration, and signal integrity for DDR memory operations, incorporating PHASER_IN, PHASER_OUT, and IDELAYCTRL components. The module handles clock generation, data alignment, and various calibration processes for read and write operations across multiple byte lanes. Key inputs include reset signals, clocks, calibration controls, and configuration parameters, while outputs provide status information, control signals, and data for the DDR memory interface. Internal signals manage read clocks, data remapping, and control signals for individual byte lanes. The module is organized into sections for each byte lane (A, B,"
                }
            ]
        }
    ]
}