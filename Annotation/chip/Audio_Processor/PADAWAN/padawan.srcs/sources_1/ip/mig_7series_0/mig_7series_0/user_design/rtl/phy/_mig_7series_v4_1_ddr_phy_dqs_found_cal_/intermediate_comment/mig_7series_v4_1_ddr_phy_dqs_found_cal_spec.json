{
    "spec": "Module name: mig_7series_v4_1_ddr_phy_dqs_found_cal. Module specification: This module performs DQS (Data Strobe) signal detection and calibration for a DDR (Double Data Rate) memory interface. It handles the process of finding and adjusting the timing of DQS signals across multiple ranks and banks of memory. The module takes inputs such as clk (clock), rst (reset), pi_dqs_found_start (start signal), and pi_dqs_found_lanes (DQS found status for each lane). It outputs signals including pi_rst_stg1_cal (reset signal for stage 1 calibration), rd_data_offset (read data offset values), and pi_dqs_found_done (overall DQS found process completed). Internally, it uses signals like dqs_found_start_r (registered start",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_phy_dqs_found_cal\n\nExplanation: This module performs DQS (Data Strobe) signal detection and calibration for a DDR (Double Data Rate) memory interface. It handles the process of finding and adjusting the timing of DQS signals across multiple ranks and banks of memory. The module includes functionality for initial DQS detection, fine adjustment of timing, error detection, and calculation of read data offsets. It manages the calibration process through various states and generates control signals for other parts of the memory interface system. The module aims to ensure proper synchronization between data and strobe signals, which is critical for reliable data transfer in DDR memory systems."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nclk, rst, dqsfound_retry, pi_dqs_found_start, detect_pi_found_dqs, prech_done, pi_dqs_found_lanes, po_counter_read_val\n\nExplanation:\n- clk: Clock input\n- rst: Reset signal\n- dqsfound_retry: Signal to retry DQS found calibration\n- pi_dqs_found_start: Start signal for DQS found process\n- detect_pi_found_dqs: Signal to detect DQS found\n- prech_done: Precharge operation completed signal\n- pi_dqs_found_lanes: DQS found status for each lane\n- po_counter_read_val: Phase offset counter read value\n\nOutput ports:\npi_rst_stg1_cal, rd_data_offset_0, rd_data_offset_1, rd_data_offset_2, pi_dqs_found_rank_done, pi_dqs_found_done, pi_dqs_found_err, rd_data_offset_ranks_0, rd_data_offset_ranks_1, rd_data_offset_ranks_2, dqsfound_retry_done, dqs_found_prech_req, rd_data_offset_ranks_mc_0, rd_data_offset_ranks_mc_1, rd_data_offset_ranks_mc_2, rd_data_offset_cal_done, fine_adjust_done, fine_adjust_lane_cnt, ck_po_stg2_f_indec, ck_po_stg2_f_en, dbg_dqs_found_cal\n\nExplanation:\n- pi_rst_stg1_cal: Reset signal for stage 1 calibration\n- rd_data_offset_0/1/2: Read data offset values for different banks\n- pi_dqs_found_rank_done: DQS found process completed for a rank\n- pi_dqs_found_done: Overall DQS found process completed\n- pi_dqs_found_err: Error signal for DQS found process\n- rd_data_offset_ranks_0/1/2: Read data offset values for all ranks\n- dqsfound_retry_done: DQS found retry process completed\n- dqs_found_prech_req: Precharge request during DQS found process\n- rd_data_offset_ranks_mc_0/1/2: Read data offset values for memory controller\n- rd_data_offset_cal_done: Read data offset calibration completed\n- fine_adjust_done: Fine adjustment process completed\n- fine_adjust_lane_cnt: Lane counter for fine adjustment\n- ck_po_stg2_f_indec: Clock phase offset stage 2 increment/decrement control\n- ck_po_stg2_f_en: Clock phase offset stage 2 enable\n- dbg_dqs_found_cal: Debug output for DQS found calibration"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\nclk, rst, dqsfound_retry, pi_dqs_found_start, detect_pi_found_dqs, prech_done, pi_dqs_found_lanes, po_counter_read_val, pi_rst_stg1_cal, rd_data_offset_0, rd_data_offset_1, rd_data_offset_2, pi_dqs_found_rank_done, pi_dqs_found_done, pi_dqs_found_err, rd_data_offset_ranks_0, rd_data_offset_ranks_1, rd_data_offset_ranks_2, dqsfound_retry_done, dqs_found_prech_req, rd_data_offset_ranks_mc_0, rd_data_offset_ranks_mc_1, rd_data_offset_ranks_mc_2, rd_data_offset_cal_done, fine_adjust_done, fine_adjust_lane_cnt, ck_po_stg2_f_indec, ck_po_stg2_f_en, dbg_dqs_found_cal, dqs_found_start_r, rd_byte_data_offset, rank_done_r, rank_done_r1, dqs_found_done_r, pi_dqs_found_lanes_r1/r2/r3, init_dqsfound_done_r/r1/r2/r3/r4/r5, rnk_cnt_r, final_do_index, final_do_max, final_data_offset, final_data_offset_mc, pi_rst_stg1_cal_r/r1, retry_cnt, dqsfound_retry_r1, pi_dqs_found_lanes_int, pi_dqs_found_all_bank/r, pi_dqs_found_any_bank/r, pi_dqs_found_err_r, fine_adjust, ctl_lane_cnt, fine_adj_state_r, fine_adjust_done_r, rst_dqs_find/r1/r2, init_dec_cnt, dec_cnt, inc_cnt, final_dec_done, init_dec_done, first_fail_detect, second_fail_detect, first_fail_taps, second_fail_taps, stable_pass_cnt, detect_rd_cnt.\n\nExplanation:\nThese internal signals are used for various purposes within the module, including:\n- Storing and processing DQS found status for different lanes, ranks, and banks\n- Tracking the progress of calibration through different states\n- Managing fine adjustment of timing\n- Calculating and storing read data offsets\n- Handling error detection and retry mechanisms\n- Controlling the calibration process flow\n- Debugging and monitoring the calibration process\n\nEach signal plays a specific role in the DQS found calibration process, such as storing intermediate results, controlling state transitions, or providing feedback to other parts of the system."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule mig_7series_v4_1_ddr_phy_dqs_found_cal #\n  (\n   parameter TCQ              = 100,    \n   parameter nCK_PER_CLK      = 2,      \n   parameter nCL              = 5,      \n   parameter AL               = \"0\",\n   parameter nCWL             = 5,      \n   parameter DRAM_TYPE        = \"DDR3\",  \n   parameter RANKS            = 1,      \n   parameter DQS_CNT_WIDTH    = 3,      \n   parameter DQS_WIDTH        = 8,      \n   parameter DRAM_WIDTH       = 8,      \n   parameter REG_CTRL         = \"ON\",   \n   parameter SIM_CAL_OPTION   = \"NONE\",  \n   parameter NUM_DQSFOUND_CAL = 3,      \n   parameter N_CTL_LANES      = 3,      \n   parameter HIGHEST_LANE     = 12,     \n   parameter HIGHEST_BANK     = 3,      \n   parameter BYTE_LANES_B0    = 4'b1111,\n   parameter BYTE_LANES_B1    = 4'b0000,\n   parameter BYTE_LANES_B2    = 4'b0000,\n   parameter BYTE_LANES_B3    = 4'b0000,\n   parameter BYTE_LANES_B4    = 4'b0000,\n   parameter DATA_CTL_B0      = 4'hc,\n   parameter DATA_CTL_B1      = 4'hf,\n   parameter DATA_CTL_B2      = 4'hf,\n   parameter DATA_CTL_B3      = 4'hf,\n   parameter DATA_CTL_B4      = 4'hf\n   )\n  (\n   input                         clk,\n   input                         rst,\n   input                         dqsfound_retry,\n   \n   input                         pi_dqs_found_start,\n   input                         detect_pi_found_dqs,\n   input                         prech_done,\n   \n   input [HIGHEST_LANE-1:0]      pi_dqs_found_lanes,\n\n   output reg [HIGHEST_BANK-1:0] pi_rst_stg1_cal,\n   \n   \n   output [5:0]                  rd_data_offset_0,\n   output [5:0]                  rd_data_offset_1,\n   output [5:0]                  rd_data_offset_2,\n   output                        pi_dqs_found_rank_done,\n   output                        pi_dqs_found_done,\n   output reg                    pi_dqs_found_err,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_0,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_1,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_2,\n   output reg                    dqsfound_retry_done,\n   output reg                    dqs_found_prech_req,\n   \n   output [6*RANKS-1:0]          rd_data_offset_ranks_mc_0,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_mc_1,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_mc_2,\n\n   input [8:0]                   po_counter_read_val,\n   output                        rd_data_offset_cal_done,\n   output                        fine_adjust_done,\n   output [N_CTL_LANES-1:0]      fine_adjust_lane_cnt,\n   output reg                    ck_po_stg2_f_indec,\n   output reg                    ck_po_stg2_f_en,\n   output [255:0]                dbg_dqs_found_cal\n  );\n  \n\n   \n   localparam nAL = (AL == \"CL-1\") ? nCL - 1 : 0;   \n\n   \n   localparam CWL_M = (REG_CTRL == \"ON\") ? nCWL + nAL + 1 : nCWL + nAL;\n\n   \n   localparam LATENCY_FACTOR = 13;\n   \n   localparam NUM_READS = (SIM_CAL_OPTION == \"NONE\") ? 7 : 1;\n   \n   localparam [19:0] DATA_PRESENT = {(DATA_CTL_B4[3] & BYTE_LANES_B4[3]),\n                                     (DATA_CTL_B4[2] & BYTE_LANES_B4[2]),\n                                     (DATA_CTL_B4[1] & BYTE_LANES_B4[1]),\n                                     (DATA_CTL_B4[0] & BYTE_LANES_B4[0]),\n                                     (DATA_CTL_B3[3] & BYTE_LANES_B3[3]),\n                                     (DATA_CTL_B3[2] & BYTE_LANES_B3[2]),\n                                     (DATA_CTL_B3[1] & BYTE_LANES_B3[1]),\n                                     (DATA_CTL_B3[0] & BYTE_LANES_B3[0]),\n                                     (DATA_CTL_B2[3] & BYTE_LANES_B2[3]),\n                                     (DATA_CTL_B2[2] & BYTE_LANES_B2[2]),\n                                     (DATA_CTL_B2[1] & BYTE_LANES_B2[1]),\n                                     (DATA_CTL_B2[0] & BYTE_LANES_B2[0]),\n                                     (DATA_CTL_B1[3] & BYTE_LANES_B1[3]),\n                                     (DATA_CTL_B1[2] & BYTE_LANES_B1[2]),\n                                     (DATA_CTL_B1[1] & BYTE_LANES_B1[1]),\n                                     (DATA_CTL_B1[0] & BYTE_LANES_B1[0]),\n                                     (DATA_CTL_B0[3] & BYTE_LANES_B0[3]),\n                                     (DATA_CTL_B0[2] & BYTE_LANES_B0[2]),\n                                     (DATA_CTL_B0[1] & BYTE_LANES_B0[1]),\n                                     (DATA_CTL_B0[0] & BYTE_LANES_B0[0])};\n   \n   localparam FINE_ADJ_IDLE    = 4'h0;\n   localparam RST_POSTWAIT     = 4'h1;\n   localparam RST_POSTWAIT1    = 4'h2;\n   localparam RST_WAIT         = 4'h3;\n   localparam FINE_ADJ_INIT    = 4'h4;\n   localparam FINE_INC         = 4'h5;\n   localparam FINE_INC_WAIT    = 4'h6;\n   localparam FINE_INC_PREWAIT = 4'h7;\n   localparam DETECT_PREWAIT   = 4'h8;\n   localparam DETECT_DQSFOUND  = 4'h9;\n   localparam PRECH_WAIT       = 4'hA;\n   localparam FINE_DEC         = 4'hB;\n   localparam FINE_DEC_WAIT    = 4'hC;\n   localparam FINE_DEC_PREWAIT = 4'hD;\n   localparam FINAL_WAIT       = 4'hE;\n   localparam FINE_ADJ_DONE    = 4'hF;\n   \n\n  integer k,l,m,n,p,q,r,s;\n  \n  reg                       dqs_found_start_r;\n  reg [6*HIGHEST_BANK-1:0]  rd_byte_data_offset[0:RANKS-1];\n  reg                       rank_done_r;\n  reg                       rank_done_r1;\n  reg                       dqs_found_done_r;\n  (* ASYNC_REG = \"TRUE\" *) reg [HIGHEST_LANE-1:0] pi_dqs_found_lanes_r1;\n  (* ASYNC_REG = \"TRUE\" *) reg [HIGHEST_LANE-1:0] pi_dqs_found_lanes_r2;\n  (* ASYNC_REG = \"TRUE\" *) reg [HIGHEST_LANE-1:0] pi_dqs_found_lanes_r3;\n  reg                       init_dqsfound_done_r;\n  reg                       init_dqsfound_done_r1;\n  reg                       init_dqsfound_done_r2;\n  reg                       init_dqsfound_done_r3;\n  reg                       init_dqsfound_done_r4;\n  reg                       init_dqsfound_done_r5;\n  reg [1:0]                 rnk_cnt_r;\n  reg [2:0 ]                final_do_index[0:RANKS-1];\n  reg [5:0 ]                final_do_max[0:RANKS-1];\n  reg [6*HIGHEST_BANK-1:0]  final_data_offset[0:RANKS-1];\n  reg [6*HIGHEST_BANK-1:0]  final_data_offset_mc[0:RANKS-1];\n  reg [HIGHEST_BANK-1:0]    pi_rst_stg1_cal_r;\n  reg [HIGHEST_BANK-1:0]    pi_rst_stg1_cal_r1;\n  reg [10*HIGHEST_BANK-1:0] retry_cnt;\n  reg                       dqsfound_retry_r1;\n  wire [4*HIGHEST_BANK-1:0] pi_dqs_found_lanes_int;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_all_bank;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_all_bank_r;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_any_bank;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_any_bank_r;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_err_r;\n  \n  \n  reg                       fine_adjust;\n  reg [N_CTL_LANES-1:0]     ctl_lane_cnt;\n  reg [3:0]                 fine_adj_state_r;\n  reg                       fine_adjust_done_r;\n  reg                       rst_dqs_find;\n  reg                       rst_dqs_find_r1;\n  reg                       rst_dqs_find_r2;\n  reg [5:0]                 init_dec_cnt;\n  reg [5:0]                 dec_cnt;\n  reg [5:0]                 inc_cnt;\n  reg                       final_dec_done;\n  reg                       init_dec_done;\n  reg                       first_fail_detect;\n  reg                       second_fail_detect;\n  reg [5:0]                 first_fail_taps;\n  reg [5:0]                 second_fail_taps;\n  reg [5:0]                 stable_pass_cnt;\n  reg [3:0]                 detect_rd_cnt;\n  \n\n  \n  \n  \n  \n  \n  \n  assign dbg_dqs_found_cal[5:0]  = first_fail_taps;\n  assign dbg_dqs_found_cal[11:6] = second_fail_taps;\n  assign dbg_dqs_found_cal[12]   = first_fail_detect;\n  assign dbg_dqs_found_cal[13]   = second_fail_detect;\n  assign dbg_dqs_found_cal[14]   = fine_adjust_done_r;\n  \n\n  assign pi_dqs_found_rank_done    = rank_done_r;\n  assign pi_dqs_found_done         = dqs_found_done_r;\n\n  generate\n  genvar rnk_cnt;\n    if (HIGHEST_BANK == 3) begin \n      for (rnk_cnt = 0; rnk_cnt < RANKS; rnk_cnt = rnk_cnt + 1) begin: rnk_loop\n        assign rd_data_offset_ranks_0[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_1[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][11:6];\n        assign rd_data_offset_ranks_2[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][17:12];\n        assign rd_data_offset_ranks_mc_0[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_mc_1[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][11:6];\n        assign rd_data_offset_ranks_mc_2[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][17:12];\n      end\n    end else if (HIGHEST_BANK == 2) begin \n      for (rnk_cnt = 0; rnk_cnt < RANKS; rnk_cnt = rnk_cnt + 1) begin: rnk_loop\n        assign rd_data_offset_ranks_0[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_1[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][11:6];\n        assign rd_data_offset_ranks_2[6*rnk_cnt+:6] = 'd0;\n        assign rd_data_offset_ranks_mc_0[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_mc_1[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][11:6];\n        assign rd_data_offset_ranks_mc_2[6*rnk_cnt+:6] = 'd0;\n      end\n    end else begin \n      for (rnk_cnt = 0; rnk_cnt < RANKS; rnk_cnt = rnk_cnt + 1) begin: rnk_loop\n        assign rd_data_offset_ranks_0[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_1[6*rnk_cnt+:6] = 'd0;\n        assign rd_data_offset_ranks_2[6*rnk_cnt+:6] = 'd0;\n        assign rd_data_offset_ranks_mc_0[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_mc_1[6*rnk_cnt+:6] = 'd0;\n        assign rd_data_offset_ranks_mc_2[6*rnk_cnt+:6] = 'd0;\n      end\n    end\n  endgenerate\n  \n  \n  \n  \n  generate\n  if (HIGHEST_BANK == 3) begin \n    assign rd_data_offset_0 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][0+:6] :\n                               final_data_offset[rnk_cnt_r][0+:6];\n    assign rd_data_offset_1 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][6+:6] :\n                               final_data_offset[rnk_cnt_r][6+:6];\n    assign rd_data_offset_2 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][12+:6] :\n                               final_data_offset[rnk_cnt_r][12+:6];\n  end else if (HIGHEST_BANK == 2) begin \n    assign rd_data_offset_0 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][0+:6] :\n                               final_data_offset[rnk_cnt_r][0+:6];\n    assign rd_data_offset_1 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][6+:6] :\n                               final_data_offset[rnk_cnt_r][6+:6];\n    assign rd_data_offset_2 = 'd0;\n  end else begin\n    assign rd_data_offset_0 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][0+:6] :\n                               final_data_offset[rnk_cnt_r][0+:6];\n    assign rd_data_offset_1 = 'd0;\n    assign rd_data_offset_2 = 'd0;\n  end\n  endgenerate\n  \n  assign rd_data_offset_cal_done = init_dqsfound_done_r;\n  assign fine_adjust_lane_cnt    = ctl_lane_cnt;\n  \n  \n  \n  \n  \n  \n  \n  \n\n  generate\n  if ((HIGHEST_LANE == 4) || (HIGHEST_LANE == 8) || (HIGHEST_LANE == 12))\n    assign pi_dqs_found_lanes_int = pi_dqs_found_lanes_r3;\n  else if ((HIGHEST_LANE == 3) || (HIGHEST_LANE == 7) || (HIGHEST_LANE == 11))\n    assign pi_dqs_found_lanes_int = {1'b0, pi_dqs_found_lanes_r3};\n  else if ((HIGHEST_LANE == 6) || (HIGHEST_LANE == 10))\n    assign pi_dqs_found_lanes_int = {2'b00, pi_dqs_found_lanes_r3};\n  else if ((HIGHEST_LANE == 5) || (HIGHEST_LANE == 9))\n    assign pi_dqs_found_lanes_int = {3'b000, pi_dqs_found_lanes_r3};\n  endgenerate\n  \n  always @(posedge clk) begin\n    if (rst) begin\n      for (k = 0; k < HIGHEST_BANK; k = k + 1) begin: rst_pi_dqs_found\n        pi_dqs_found_all_bank[k] <= #TCQ 'b0;\n        pi_dqs_found_any_bank[k] <= #TCQ 'b0;\n      end\n    end else if (pi_dqs_found_start) begin\n      for (p = 0; p < HIGHEST_BANK; p = p +1) begin: assign_pi_dqs_found\n          pi_dqs_found_all_bank[p] <= #TCQ (!DATA_PRESENT[4*p+0] | pi_dqs_found_lanes_int[4*p+0]) &\n                                           (!DATA_PRESENT[4*p+1] | pi_dqs_found_lanes_int[4*p+1]) &\n                                           (!DATA_PRESENT[4*p+2] | pi_dqs_found_lanes_int[4*p+2]) &\n                                           (!DATA_PRESENT[4*p+3] | pi_dqs_found_lanes_int[4*p+3]);\n          pi_dqs_found_any_bank[p] <= #TCQ (DATA_PRESENT[4*p+0] & pi_dqs_found_lanes_int[4*p+0]) |\n                                           (DATA_PRESENT[4*p+1] & pi_dqs_found_lanes_int[4*p+1]) |\n                                           (DATA_PRESENT[4*p+2] & pi_dqs_found_lanes_int[4*p+2]) |\n                                           (DATA_PRESENT[4*p+3] & pi_dqs_found_lanes_int[4*p+3]);\n      end\n    end\n  end\n\n  \n  always @(posedge clk) begin\n    pi_dqs_found_all_bank_r <= #TCQ pi_dqs_found_all_bank;\n    pi_dqs_found_any_bank_r <= #TCQ pi_dqs_found_any_bank;\n  end\n  \n\n\n\n\n\n  always @(posedge clk) begin\n    if (rst || (detect_rd_cnt == 'd0))\n\t  detect_rd_cnt <= #TCQ NUM_READS;\n\telse if (detect_pi_found_dqs && (detect_rd_cnt > 'd0))\n\t  detect_rd_cnt <= #TCQ detect_rd_cnt - 1;\n  end\n  \n  \n   \n   \n   \n   \n   \n   assign fine_adjust_done = fine_adjust_done_r;\n   \n   always @(posedge clk) begin\n     rst_dqs_find_r1 <= #TCQ rst_dqs_find;\n\t rst_dqs_find_r2 <= #TCQ rst_dqs_find_r1;\n   end\n   \n   always @(posedge clk) begin\n      if(rst)begin\n        fine_adjust        <= #TCQ 1'b0;\n        ctl_lane_cnt       <= #TCQ 'd0;\n        fine_adj_state_r   <= #TCQ FINE_ADJ_IDLE;\n        fine_adjust_done_r <= #TCQ 1'b0;\n        ck_po_stg2_f_indec <= #TCQ 1'b0;\n        ck_po_stg2_f_en    <= #TCQ 1'b0;\n        rst_dqs_find       <= #TCQ 1'b0;\n        init_dec_cnt       <= #TCQ 'd31;\n        dec_cnt            <= #TCQ 'd0;\n        inc_cnt            <= #TCQ 'd0;\n        init_dec_done      <= #TCQ 1'b0;\n        final_dec_done     <= #TCQ 1'b0;\n        first_fail_detect  <= #TCQ 1'b0;\n        second_fail_detect <= #TCQ 1'b0;\n        first_fail_taps    <= #TCQ 'd0;\n        second_fail_taps   <= #TCQ 'd0;\n        stable_pass_cnt    <= #TCQ 'd0;\n        dqs_found_prech_req<= #TCQ 1'b0;\n      end else begin\n        case (fine_adj_state_r)\n           \n           FINE_ADJ_IDLE: begin\n             if (init_dqsfound_done_r5) begin\n               if (SIM_CAL_OPTION == \"FAST_CAL\") begin\n                 fine_adjust      <= #TCQ 1'b1;\n                 fine_adj_state_r <= #TCQ FINE_ADJ_DONE;\n                 rst_dqs_find     <= #TCQ 1'b0;\n               end else begin\n                 fine_adjust      <= #TCQ 1'b1;\n                 fine_adj_state_r <= #TCQ RST_WAIT;\n                 rst_dqs_find     <= #TCQ 1'b1;\n               end\n             end\n           end\n           \n           RST_WAIT: begin\n             if (~(|pi_dqs_found_any_bank) && rst_dqs_find_r2) begin\n               rst_dqs_find     <= #TCQ 1'b0;\n               if (|init_dec_cnt)\n                 fine_adj_state_r <= #TCQ FINE_DEC_PREWAIT;\n               else if (final_dec_done)\n                 fine_adj_state_r <= #TCQ FINE_ADJ_DONE;\n               else\n                 fine_adj_state_r <= #TCQ RST_POSTWAIT;\n             end\n           end\n           \n           RST_POSTWAIT: begin\n             fine_adj_state_r <= #TCQ RST_POSTWAIT1;\n           end\n           \n           RST_POSTWAIT1: begin\n             fine_adj_state_r <= #TCQ FINE_ADJ_INIT;\n           end\n           \n           FINE_ADJ_INIT: begin\n             \n               fine_adj_state_r <= #TCQ FINE_INC;\n           end\n           \n           FINE_INC: begin\n             fine_adj_state_r   <= #TCQ FINE_INC_WAIT;\n             ck_po_stg2_f_indec <= #TCQ 1'b1;\n             ck_po_stg2_f_en    <= #TCQ 1'b1;\n             if (ctl_lane_cnt == N_CTL_LANES-1)\n               inc_cnt          <= #TCQ inc_cnt + 1;\n           end\n           \n           FINE_INC_WAIT: begin\n             ck_po_stg2_f_indec <= #TCQ 1'b0;\n             ck_po_stg2_f_en    <= #TCQ 1'b0;\n             if (ctl_lane_cnt != N_CTL_LANES-1) begin\n               ctl_lane_cnt     <= #TCQ ctl_lane_cnt + 1;\n               fine_adj_state_r <= #TCQ FINE_INC_PREWAIT;\n             end else if (ctl_lane_cnt == N_CTL_LANES-1) begin\n               ctl_lane_cnt     <= #TCQ 'd0;\n               fine_adj_state_r <= #TCQ DETECT_PREWAIT;\n             end\n           end\n           \n           FINE_INC_PREWAIT: begin\n             fine_adj_state_r <= #TCQ FINE_INC;\n           end\n           \n           DETECT_PREWAIT: begin\n             if (detect_pi_found_dqs && (detect_rd_cnt == 'd1))\n               fine_adj_state_r <= #TCQ DETECT_DQSFOUND;\n\t\t\t else\n\t\t\t   fine_adj_state_r <= #TCQ DETECT_PREWAIT;\n           end\n           \n           DETECT_DQSFOUND: begin\n             if (detect_pi_found_dqs && ~(&pi_dqs_found_all_bank)) begin\n               stable_pass_cnt     <= #TCQ 'd0;\n               if (~first_fail_detect && (inc_cnt == 'd63)) begin\n                 \n                 \n                 first_fail_detect <= #TCQ 1'b1;\n                 first_fail_taps   <= #TCQ inc_cnt;\n                 fine_adj_state_r  <= #TCQ FINE_DEC;\n                 dec_cnt           <= #TCQ 'd32;\n               end else if (~first_fail_detect && (inc_cnt > 'd30) && (stable_pass_cnt > 'd29)) begin\n                 \n                 \n                 first_fail_detect <= #TCQ 1'b1;\n                 first_fail_taps   <= #TCQ inc_cnt;\n                 fine_adj_state_r  <= #TCQ FINE_DEC;\n                 dec_cnt           <= #TCQ (inc_cnt>>1) + 1;\t\t\t\t \n\t\t\t   end else if (~first_fail_detect || (first_fail_detect && (stable_pass_cnt < 'd30) && (inc_cnt <= 'd32))) begin\n                 \n                 \n                 first_fail_detect <= #TCQ 1'b1;\n                 first_fail_taps   <= #TCQ inc_cnt;\n                 rst_dqs_find      <= #TCQ 1'b1;\n                 if ((inc_cnt == 'd12) || (inc_cnt == 'd24)) begin\n                   dqs_found_prech_req <= #TCQ 1'b1;\n                   fine_adj_state_r    <= #TCQ PRECH_WAIT;\n                 end else\n                 fine_adj_state_r  <= #TCQ RST_WAIT;\n               end else if (first_fail_detect && (inc_cnt > 'd32) && (inc_cnt < 'd63) && (stable_pass_cnt < 'd30)) begin\n                 \n                 \n                 first_fail_detect <= #TCQ 1'b1;\n                 first_fail_taps   <= #TCQ inc_cnt;\n                 rst_dqs_find      <= #TCQ 1'b1;\n                 if ((inc_cnt == 'd36) || (inc_cnt == 'd48) || (inc_cnt == 'd60)) begin\n                   dqs_found_prech_req <= #TCQ 1'b1;\n                   fine_adj_state_r    <= #TCQ PRECH_WAIT;\n                 end else\n                   fine_adj_state_r  <= #TCQ RST_WAIT;\n               end else if (first_fail_detect && (inc_cnt == 'd63)) begin\n                 if (stable_pass_cnt < 'd30) begin\n                   \n                   \n                   first_fail_detect <= #TCQ 1'b1;\n                   first_fail_taps   <= #TCQ inc_cnt;\n                   fine_adj_state_r  <= #TCQ FINE_DEC;\n                   dec_cnt           <= #TCQ 'd32;\n                 end else begin\n                   \n                   \n                   fine_adj_state_r  <= #TCQ FINE_DEC;\n                   dec_cnt           <= #TCQ ((inc_cnt - first_fail_taps)>>1);\n                 end\n               end else begin\n                 \n                 \n                 second_fail_detect <= #TCQ 1'b1;\n                 second_fail_taps   <= #TCQ inc_cnt;\n                 dec_cnt            <= #TCQ ((inc_cnt - first_fail_taps)>>1);\n                 fine_adj_state_r   <= #TCQ FINE_DEC;\n               end\n             end else if (detect_pi_found_dqs && (&pi_dqs_found_all_bank)) begin\n               stable_pass_cnt    <= #TCQ stable_pass_cnt + 1;\n               if ((inc_cnt == 'd12) || (inc_cnt == 'd24) || (inc_cnt == 'd36) || \n                   (inc_cnt == 'd48) || (inc_cnt == 'd60)) begin\n                 dqs_found_prech_req <= #TCQ 1'b1;\n                 fine_adj_state_r    <= #TCQ PRECH_WAIT;\n               end else if (inc_cnt < 'd63) begin\n                 rst_dqs_find     <= #TCQ 1'b1;\n                 fine_adj_state_r <= #TCQ RST_WAIT;\n               end else begin\n                 fine_adj_state_r <= #TCQ FINE_DEC;\n                 if (~first_fail_detect || (first_fail_taps > 'd33))\n                   \n                   dec_cnt <= #TCQ 'd32;\n                 \n                 \n                 \n                 \n                 else\n                   \n                   \n                   dec_cnt <= #TCQ ((inc_cnt - first_fail_taps)>>1);\n               end\n             end\n           end\n           \n           PRECH_WAIT: begin\n             if (prech_done) begin\n               dqs_found_prech_req <= #TCQ 1'b0;\n               rst_dqs_find        <= #TCQ 1'b1;\n               fine_adj_state_r    <= #TCQ RST_WAIT;\n             end\n           end\n               \n               \n           FINE_DEC: begin\n             fine_adj_state_r   <= #TCQ FINE_DEC_WAIT;\n             ck_po_stg2_f_indec <= #TCQ 1'b0;\n             ck_po_stg2_f_en    <= #TCQ 1'b1;\n             if ((ctl_lane_cnt == N_CTL_LANES-1) && (init_dec_cnt > 'd0))\n               init_dec_cnt     <= #TCQ init_dec_cnt - 1;\n             else if ((ctl_lane_cnt == N_CTL_LANES-1) && (dec_cnt > 'd0))\n               dec_cnt          <= #TCQ dec_cnt - 1;\n           end\n           \n           FINE_DEC_WAIT: begin\n             ck_po_stg2_f_indec <= #TCQ 1'b0;\n             ck_po_stg2_f_en    <= #TCQ 1'b0;\n             if (ctl_lane_cnt != N_CTL_LANES-1) begin\n               ctl_lane_cnt     <= #TCQ ctl_lane_cnt + 1;\n               fine_adj_state_r <= #TCQ FINE_DEC_PREWAIT;\n             end else if (ctl_lane_cnt == N_CTL_LANES-1) begin\n               ctl_lane_cnt     <= #TCQ 'd0;\n               if ((dec_cnt > 'd0) || (init_dec_cnt > 'd0))\n                 fine_adj_state_r <= #TCQ FINE_DEC_PREWAIT;\n               else begin\n                 fine_adj_state_r <= #TCQ FINAL_WAIT;\n                 if ((init_dec_cnt == 'd0) && ~init_dec_done)\n                   init_dec_done <= #TCQ 1'b1;\n                 else\n                   final_dec_done   <= #TCQ 1'b1;\n               end\n             end\n           end\n           \n           FINE_DEC_PREWAIT: begin\n             fine_adj_state_r <= #TCQ FINE_DEC;\n           end\n           \n           FINAL_WAIT: begin\n             rst_dqs_find     <= #TCQ 1'b1;\n             fine_adj_state_r <= #TCQ RST_WAIT;\n           end\n           \n           FINE_ADJ_DONE: begin\n             if (&pi_dqs_found_all_bank) begin\n               fine_adjust_done_r <= #TCQ 1'b1;\n               rst_dqs_find       <= #TCQ 1'b0;\n               fine_adj_state_r   <= #TCQ FINE_ADJ_DONE;\n             end\n           end\n           \n        endcase\n      end\n   end\n               \n\n   \n   \n\n  \n\n  always@(posedge clk)\n    dqs_found_start_r <= #TCQ pi_dqs_found_start;\n  \n\n  always @(posedge clk) begin\n    if (rst)\n      rnk_cnt_r <= #TCQ 2'b00;\n    else if (init_dqsfound_done_r)\n      rnk_cnt_r <= #TCQ rnk_cnt_r;\n    else if (rank_done_r)\n      rnk_cnt_r <= #TCQ rnk_cnt_r + 1;\n  end\n  \n  \n  \n  \n  \n    always @(posedge clk) begin\n    if (rst || (|pi_rst_stg1_cal_r))\n      init_dqsfound_done_r  <= #TCQ 1'b0;\n    else if (&pi_dqs_found_all_bank) begin\n      if (rnk_cnt_r == RANKS-1)\n        init_dqsfound_done_r  <= #TCQ 1'b1;\n      else\n        init_dqsfound_done_r  <= #TCQ 1'b0;\n    end\n  end\n  \n  always @(posedge clk) begin\n    if (rst  ||\n       (init_dqsfound_done_r && (rnk_cnt_r == RANKS-1)))\n      rank_done_r       <= #TCQ 1'b0;\n    else if (&pi_dqs_found_all_bank && ~(&pi_dqs_found_all_bank_r))\n      rank_done_r <= #TCQ 1'b1;\n    else\n      rank_done_r       <= #TCQ 1'b0;\n  end\n  \n  always @(posedge clk) begin\n    pi_dqs_found_lanes_r1   <= #TCQ pi_dqs_found_lanes;\n    pi_dqs_found_lanes_r2   <= #TCQ pi_dqs_found_lanes_r1;\n    pi_dqs_found_lanes_r3   <= #TCQ pi_dqs_found_lanes_r2;\n    init_dqsfound_done_r1   <= #TCQ init_dqsfound_done_r;\n    init_dqsfound_done_r2   <= #TCQ init_dqsfound_done_r1;\n    init_dqsfound_done_r3   <= #TCQ init_dqsfound_done_r2;\n    init_dqsfound_done_r4   <= #TCQ init_dqsfound_done_r3;\n    init_dqsfound_done_r5   <= #TCQ init_dqsfound_done_r4;\n    rank_done_r1            <= #TCQ rank_done_r;\n    dqsfound_retry_r1       <= #TCQ dqsfound_retry;\n  end\n\n  \n  always @(posedge clk) begin\n    if (rst)\n      dqs_found_done_r <= #TCQ 1'b0;\n    else if (&pi_dqs_found_all_bank && (rnk_cnt_r == RANKS-1) && init_dqsfound_done_r1 &&\n             (fine_adj_state_r == FINE_ADJ_DONE))\n      dqs_found_done_r <= #TCQ 1'b1;\n    else\n      dqs_found_done_r <= #TCQ 1'b0;\n  end\n  \n\n  generate\n    if (HIGHEST_BANK == 3) begin \n\n      \n      \n      \n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[0] || fine_adjust)\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[1] || fine_adjust)\n          pi_rst_stg1_cal_r[1] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[1] && ~pi_dqs_found_all_bank[1]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[1] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[2] || fine_adjust)\n          pi_rst_stg1_cal_r[2] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[2] && ~pi_dqs_found_all_bank[2]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][12+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[2] <= #TCQ 1'b1;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[1])\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[1] && ~pi_dqs_found_all_bank[1])\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b0;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[2]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[2])\n          pi_rst_stg1_cal_r1[2]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[2] && ~pi_dqs_found_all_bank[2])\n          pi_rst_stg1_cal_r1[2]  <= #TCQ 1'b0;\n      end\n\n      \n      \n      \n    \n      always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[0+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[0])\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10] + 1;\n        else\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10];\n      end\n\t  \n\t  always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[10+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[1])\n          retry_cnt[10+:10] <= #TCQ retry_cnt[10+:10] + 1;\n        else\n          retry_cnt[10+:10] <= #TCQ retry_cnt[10+:10];\n      end\n\t  \n\t  always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[20+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][12+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[2])\n          retry_cnt[20+:10] <= #TCQ retry_cnt[20+:10] + 1;\n        else\n          retry_cnt[20+:10] <= #TCQ retry_cnt[20+:10];\n      end\n\t  \n      \n      \n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[0] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[0] && (retry_cnt[0+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[0] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[1] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[1] && (retry_cnt[10+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[1] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[2] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[2] && (retry_cnt[20+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][12+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[2] <= #TCQ 1'b1;\n      end\n\n      \n      always @(posedge clk) begin\n        if (rst) begin\n          for (q = 0; q < RANKS; q = q + 1) begin: three_bank0_rst_loop\n            rd_byte_data_offset[q][0+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][0+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[0] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][0+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][0+:6] - 1;\n      end\n\n      always @(posedge clk) begin\n        if (rst) begin\n          for (r = 0; r < RANKS; r = r + 1) begin: three_bank1_rst_loop\n            rd_byte_data_offset[r][6+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][6+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[1] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][6+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][6+:6] - 1;\n      end\n\n      always @(posedge clk) begin\n        if (rst) begin\n          for (s = 0; s < RANKS; s = s + 1) begin: three_bank2_rst_loop\n            rd_byte_data_offset[s][12+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][12+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][12+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[2] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][12+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][12+:6] - 1;\n      end\n\n\n\n\n    end else if (HIGHEST_BANK == 2) begin  \n\n      \n      \n      \n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[0] || fine_adjust)\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[1] || fine_adjust)\n          pi_rst_stg1_cal_r[1] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[1] && ~pi_dqs_found_all_bank[1]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[1] <= #TCQ 1'b1;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[1])\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[1] && ~pi_dqs_found_all_bank[1])\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b0;\n      end\n\n      \n      \n      \n    \n      always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[0+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[0])\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10] + 1;\n        else\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10];\n      end\n\t  \n\t  always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[10+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[1])\n          retry_cnt[10+:10] <= #TCQ retry_cnt[10+:10] + 1;\n        else\n          retry_cnt[10+:10] <= #TCQ retry_cnt[10+:10];\n      end\n\n      \n      \n\t  always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[0] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[0] && (retry_cnt[0+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[0] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[1] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[1] && (retry_cnt[10+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[1] <= #TCQ 1'b1;\n      end\n\n\n      \n      always @(posedge clk) begin\n        if (rst) begin\n          for (q = 0; q < RANKS; q = q + 1) begin: two_bank0_rst_loop\n            rd_byte_data_offset[q][0+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][0+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[0] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][0+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][0+:6] - 1;\n      end\n\n      always @(posedge clk) begin\n        if (rst) begin\n          for (r = 0; r < RANKS; r = r + 1) begin: two_bank1_rst_loop\n            rd_byte_data_offset[r][6+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][6+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[1] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][6+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][6+:6] - 1;\n      end\n\n\n\n    end else begin \n\n      \n      always @(posedge clk) begin\n        if (rst) begin\n          for (l = 0; l < RANKS; l = l + 1) begin: bank_rst_loop\n            rd_byte_data_offset[l] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r] < (nCL + nAL - 1)))\n          rd_byte_data_offset[rnk_cnt_r] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[0] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r] - 1;\n      end\n\n      \n      \n      \n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[0] || fine_adjust)\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b1;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n      end\n\n      \n      \n      \n    \n      always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[0+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[0])\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10] + 1;\n        else\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10];\n      end\n\n      \n      \n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[0] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[0] && (retry_cnt[0+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[0] <= #TCQ 1'b1;\n      end\n\n    end\n  endgenerate\n  \n  always @(posedge clk) begin\n    if (rst)\n      pi_rst_stg1_cal <= #TCQ {HIGHEST_BANK{1'b0}};\n    else if (rst_dqs_find)\n      pi_rst_stg1_cal <= #TCQ {HIGHEST_BANK{1'b1}};\n    else\n      pi_rst_stg1_cal <= #TCQ pi_rst_stg1_cal_r;\n  end\n  \n\n\n  \n  \n  generate\n  genvar i;\n  genvar j;\n    for (i = 0; i < RANKS; i = i + 1) begin: rank_final_loop\n       reg [5:0] final_do_cand [RANKS-1:0];\n       \n       \n       if (HIGHEST_BANK == 3) begin\n         always @(*) begin\n            case (final_do_index[i])\n\t      3'b000:  final_do_cand[i]  = final_data_offset[i][5:0];\n\t      3'b001:  final_do_cand[i]  = final_data_offset[i][11:6];\n\t      3'b010:  final_do_cand[i]  = final_data_offset[i][17:12];\n\t      default: final_do_cand[i]  = 'd0;\n\t    endcase\n         end\n       end else if (HIGHEST_BANK == 2) begin\n         always @(*) begin\n            case (final_do_index[i])\n\t      3'b000:  final_do_cand[i]  = final_data_offset[i][5:0];\n\t      3'b001:  final_do_cand[i]  = final_data_offset[i][11:6];\n\t      3'b010:  final_do_cand[i]  = 'd0;\n\t      default: final_do_cand[i]  = 'd0;\n\t    endcase\n         end\n       end else begin\n         always @(*) begin\n            case (final_do_index[i])\n\t      3'b000:  final_do_cand[i]  = final_data_offset[i][5:0];\n\t      3'b001:  final_do_cand[i]  = 'd0;\n\t      3'b010:  final_do_cand[i]  = 'd0;\n\t      default: final_do_cand[i]  = 'd0;\n\t    endcase\n         end\n       end\n        \n       always @(posedge clk)  begin\n          if (rst) \n\t      final_do_max[i] <= #TCQ 0;\n\t  else begin\n\t     final_do_max[i] <= #TCQ final_do_max[i]; \n             case (final_do_index[i])\n\t        3'b000: if ( | DATA_PRESENT[3:0]) \n\t               if (final_do_max[i] < final_do_cand[i])\n\t                 if (CWL_M % 2) \n\t\t            final_do_max[i] <= #TCQ final_do_cand[i] - 1;\n\t\t         else\n\t\t            final_do_max[i] <= #TCQ final_do_cand[i];\n\t        3'b001: if ( | DATA_PRESENT[7:4]) \n\t               if (final_do_max[i] < final_do_cand[i])\n\t\t         if (CWL_M % 2) \n\t\t            final_do_max[i] <= #TCQ final_do_cand[i] - 1;\n\t\t         else\n\t\t            final_do_max[i] <= #TCQ final_do_cand[i];\n\t        3'b010: if ( | DATA_PRESENT[11:8]) \n\t               if (final_do_max[i] < final_do_cand[i])\n\t\t         if (CWL_M % 2) \n\t\t            final_do_max[i] <= #TCQ final_do_cand[i] - 1;\n\t\t         else\n\t\t            final_do_max[i] <= #TCQ final_do_cand[i];\n                default:\n\t               final_do_max[i] <= #TCQ final_do_max[i];\n\t      endcase\n\t   end\n\tend\n\n\talways @(posedge clk) \n\t    if (rst) begin\n\t       final_do_index[i] <= #TCQ 0;\n\t    end\n\t    else begin\n\t       final_do_index[i] <= #TCQ final_do_index[i] + 1;\n\t    end\n\n      for (j = 0; j < HIGHEST_BANK; j = j + 1) begin: bank_final_loop\n        \n        always @(posedge clk) begin\n          if (rst) begin\n            final_data_offset[i][6*j+:6] <= #TCQ 'b0;\n\t  end\n          else begin\n\t  \n           \n          \n          if (init_dqsfound_done_r && ~init_dqsfound_done_r1) begin\n\t    if ( DATA_PRESENT [ j*4+:4] != 0) begin \n               final_data_offset[i][6*j+:6] <= #TCQ rd_byte_data_offset[i][6*j+:6];\n               if (CWL_M % 2) \n                 final_data_offset_mc[i][6*j+:6] <= #TCQ rd_byte_data_offset[i][6*j+:6] - 1;\n               else \n                 final_data_offset_mc[i][6*j+:6] <= #TCQ rd_byte_data_offset[i][6*j+:6];\n            end \n\t  end\n          else if (init_dqsfound_done_r5 ) begin\n\t       if ( DATA_PRESENT [ j*4+:4] == 0) begin \n                  final_data_offset[i][6*j+:6] <= #TCQ final_do_max[i];\n                  final_data_offset_mc[i][6*j+:6] <= #TCQ final_do_max[i];\n               end\t\n          end\n\t  end\n        end\n      end\n    end\n  endgenerate\n\n  \n  \n  \n  \n  always @(posedge clk) begin\n    pi_dqs_found_err    <= #TCQ |pi_dqs_found_err_r;\n  end\n  \n\n  \nendmodule\n           \n        \n      \n       \n\n      \n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: mig_7series_v4_1_ddr_phy_dqs_found_cal. Module specification: This module performs DQS (Data Strobe) signal detection and calibration for a DDR (Double Data Rate) memory interface. It handles the process of finding and adjusting the timing of DQS signals across multiple ranks and banks of memory. The module takes inputs such as clk (clock), rst (reset), pi_dqs_found_start (start signal), and pi_dqs_found_lanes (DQS found status for each lane). It outputs signals including pi_rst_stg1_cal (reset signal for stage 1 calibration), rd_data_offset (read data offset values), and pi_dqs_found_done (overall DQS found process completed). Internally, it uses signals like dqs_found_start_r (registered start"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_phy_dqs_found_cal\n\nExplanation: This module performs DQS (Data Strobe) signal detection and calibration for a DDR (Double Data Rate) memory interface. It handles the process of finding and adjusting the timing of DQS signals across multiple ranks and banks of memory. The module includes functionality for initial DQS detection, fine adjustment of timing, error detection, and calculation of read data offsets. It manages the calibration process through various states and generates control signals for other parts of the memory interface system. The module aims to ensure proper synchronization between data and strobe signals, which is critical for reliable data transfer in DDR memory systems."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nclk, rst, dqsfound_retry, pi_dqs_found_start, detect_pi_found_dqs, prech_done, pi_dqs_found_lanes, po_counter_read_val\n\nExplanation:\n- clk: Clock input\n- rst: Reset signal\n- dqsfound_retry: Signal to retry DQS found calibration\n- pi_dqs_found_start: Start signal for DQS found process\n- detect_pi_found_dqs: Signal to detect DQS found\n- prech_done: Precharge operation completed signal\n- pi_dqs_found_lanes: DQS found status for each lane\n- po_counter_read_val: Phase offset counter read value\n\nOutput ports:\npi_rst_stg1_cal, rd_data_offset_0, rd_data_offset_1, rd_data_offset_2, pi_dqs_found_rank_done, pi_dqs_found_done, pi_dqs_found_err, rd_data_offset_ranks_0, rd_data_offset_ranks_1, rd_data_offset_ranks_2, dqsfound_retry_done, dqs_found_prech_req, rd_data_offset_ranks_mc_0, rd_data_offset_ranks_mc_1, rd_data_offset_ranks_mc_2, rd_data_offset_cal_done, fine_adjust_done, fine_adjust_lane_cnt, ck_po_stg2_f_indec, ck_po_stg2_f_en, dbg_dqs_found_cal\n\nExplanation:\n- pi_rst_stg1_cal: Reset signal for stage 1 calibration\n- rd_data_offset_0/1/2: Read data offset values for different banks\n- pi_dqs_found_rank_done: DQS found process completed for a rank\n- pi_dqs_found_done: Overall DQS found process completed\n- pi_dqs_found_err: Error signal for DQS found process\n- rd_data_offset_ranks_0/1/2: Read data offset values for all ranks\n- dqsfound_retry_done: DQS found retry process completed\n- dqs_found_prech_req: Precharge request during DQS found process\n- rd_data_offset_ranks_mc_0/1/2: Read data offset values for memory controller\n- rd_data_offset_cal_done: Read data offset calibration completed\n- fine_adjust_done: Fine adjustment process completed\n- fine_adjust_lane_cnt: Lane counter for fine adjustment\n- ck_po_stg2_f_indec: Clock phase offset stage 2 increment/decrement control\n- ck_po_stg2_f_en: Clock phase offset stage 2 enable\n- dbg_dqs_found_cal: Debug output for DQS found calibration"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\nclk, rst, dqsfound_retry, pi_dqs_found_start, detect_pi_found_dqs, prech_done, pi_dqs_found_lanes, po_counter_read_val, pi_rst_stg1_cal, rd_data_offset_0, rd_data_offset_1, rd_data_offset_2, pi_dqs_found_rank_done, pi_dqs_found_done, pi_dqs_found_err, rd_data_offset_ranks_0, rd_data_offset_ranks_1, rd_data_offset_ranks_2, dqsfound_retry_done, dqs_found_prech_req, rd_data_offset_ranks_mc_0, rd_data_offset_ranks_mc_1, rd_data_offset_ranks_mc_2, rd_data_offset_cal_done, fine_adjust_done, fine_adjust_lane_cnt, ck_po_stg2_f_indec, ck_po_stg2_f_en, dbg_dqs_found_cal, dqs_found_start_r, rd_byte_data_offset, rank_done_r, rank_done_r1, dqs_found_done_r, pi_dqs_found_lanes_r1/r2/r3, init_dqsfound_done_r/r1/r2/r3/r4/r5, rnk_cnt_r, final_do_index, final_do_max, final_data_offset, final_data_offset_mc, pi_rst_stg1_cal_r/r1, retry_cnt, dqsfound_retry_r1, pi_dqs_found_lanes_int, pi_dqs_found_all_bank/r, pi_dqs_found_any_bank/r, pi_dqs_found_err_r, fine_adjust, ctl_lane_cnt, fine_adj_state_r, fine_adjust_done_r, rst_dqs_find/r1/r2, init_dec_cnt, dec_cnt, inc_cnt, final_dec_done, init_dec_done, first_fail_detect, second_fail_detect, first_fail_taps, second_fail_taps, stable_pass_cnt, detect_rd_cnt.\n\nExplanation:\nThese internal signals are used for various purposes within the module, including:\n- Storing and processing DQS found status for different lanes, ranks, and banks\n- Tracking the progress of calibration through different states\n- Managing fine adjustment of timing\n- Calculating and storing read data offsets\n- Handling error detection and retry mechanisms\n- Controlling the calibration process flow\n- Debugging and monitoring the calibration process\n\nEach signal plays a specific role in the DQS found calibration process, such as storing intermediate results, controlling state transitions, or providing feedback to other parts of the system."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule mig_7series_v4_1_ddr_phy_dqs_found_cal #\n  (\n   parameter TCQ              = 100,    \n   parameter nCK_PER_CLK      = 2,      \n   parameter nCL              = 5,      \n   parameter AL               = \"0\",\n   parameter nCWL             = 5,      \n   parameter DRAM_TYPE        = \"DDR3\",  \n   parameter RANKS            = 1,      \n   parameter DQS_CNT_WIDTH    = 3,      \n   parameter DQS_WIDTH        = 8,      \n   parameter DRAM_WIDTH       = 8,      \n   parameter REG_CTRL         = \"ON\",   \n   parameter SIM_CAL_OPTION   = \"NONE\",  \n   parameter NUM_DQSFOUND_CAL = 3,      \n   parameter N_CTL_LANES      = 3,      \n   parameter HIGHEST_LANE     = 12,     \n   parameter HIGHEST_BANK     = 3,      \n   parameter BYTE_LANES_B0    = 4'b1111,\n   parameter BYTE_LANES_B1    = 4'b0000,\n   parameter BYTE_LANES_B2    = 4'b0000,\n   parameter BYTE_LANES_B3    = 4'b0000,\n   parameter BYTE_LANES_B4    = 4'b0000,\n   parameter DATA_CTL_B0      = 4'hc,\n   parameter DATA_CTL_B1      = 4'hf,\n   parameter DATA_CTL_B2      = 4'hf,\n   parameter DATA_CTL_B3      = 4'hf,\n   parameter DATA_CTL_B4      = 4'hf\n   )\n  (\n   input                         clk,\n   input                         rst,\n   input                         dqsfound_retry,\n   \n   input                         pi_dqs_found_start,\n   input                         detect_pi_found_dqs,\n   input                         prech_done,\n   \n   input [HIGHEST_LANE-1:0]      pi_dqs_found_lanes,\n\n   output reg [HIGHEST_BANK-1:0] pi_rst_stg1_cal,\n   \n   \n   output [5:0]                  rd_data_offset_0,\n   output [5:0]                  rd_data_offset_1,\n   output [5:0]                  rd_data_offset_2,\n   output                        pi_dqs_found_rank_done,\n   output                        pi_dqs_found_done,\n   output reg                    pi_dqs_found_err,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_0,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_1,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_2,\n   output reg                    dqsfound_retry_done,\n   output reg                    dqs_found_prech_req,\n   \n   output [6*RANKS-1:0]          rd_data_offset_ranks_mc_0,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_mc_1,\n   output [6*RANKS-1:0]          rd_data_offset_ranks_mc_2,\n\n   input [8:0]                   po_counter_read_val,\n   output                        rd_data_offset_cal_done,\n   output                        fine_adjust_done,\n   output [N_CTL_LANES-1:0]      fine_adjust_lane_cnt,\n   output reg                    ck_po_stg2_f_indec,\n   output reg                    ck_po_stg2_f_en,\n   output [255:0]                dbg_dqs_found_cal\n  );\n  \n\n   \n   localparam nAL = (AL == \"CL-1\") ? nCL - 1 : 0;   \n\n   \n   localparam CWL_M = (REG_CTRL == \"ON\") ? nCWL + nAL + 1 : nCWL + nAL;\n\n   \n   localparam LATENCY_FACTOR = 13;\n   \n   localparam NUM_READS = (SIM_CAL_OPTION == \"NONE\") ? 7 : 1;\n   \n   localparam [19:0] DATA_PRESENT = {(DATA_CTL_B4[3] & BYTE_LANES_B4[3]),\n                                     (DATA_CTL_B4[2] & BYTE_LANES_B4[2]),\n                                     (DATA_CTL_B4[1] & BYTE_LANES_B4[1]),\n                                     (DATA_CTL_B4[0] & BYTE_LANES_B4[0]),\n                                     (DATA_CTL_B3[3] & BYTE_LANES_B3[3]),\n                                     (DATA_CTL_B3[2] & BYTE_LANES_B3[2]),\n                                     (DATA_CTL_B3[1] & BYTE_LANES_B3[1]),\n                                     (DATA_CTL_B3[0] & BYTE_LANES_B3[0]),\n                                     (DATA_CTL_B2[3] & BYTE_LANES_B2[3]),\n                                     (DATA_CTL_B2[2] & BYTE_LANES_B2[2]),\n                                     (DATA_CTL_B2[1] & BYTE_LANES_B2[1]),\n                                     (DATA_CTL_B2[0] & BYTE_LANES_B2[0]),\n                                     (DATA_CTL_B1[3] & BYTE_LANES_B1[3]),\n                                     (DATA_CTL_B1[2] & BYTE_LANES_B1[2]),\n                                     (DATA_CTL_B1[1] & BYTE_LANES_B1[1]),\n                                     (DATA_CTL_B1[0] & BYTE_LANES_B1[0]),\n                                     (DATA_CTL_B0[3] & BYTE_LANES_B0[3]),\n                                     (DATA_CTL_B0[2] & BYTE_LANES_B0[2]),\n                                     (DATA_CTL_B0[1] & BYTE_LANES_B0[1]),\n                                     (DATA_CTL_B0[0] & BYTE_LANES_B0[0])};\n   \n   localparam FINE_ADJ_IDLE    = 4'h0;\n   localparam RST_POSTWAIT     = 4'h1;\n   localparam RST_POSTWAIT1    = 4'h2;\n   localparam RST_WAIT         = 4'h3;\n   localparam FINE_ADJ_INIT    = 4'h4;\n   localparam FINE_INC         = 4'h5;\n   localparam FINE_INC_WAIT    = 4'h6;\n   localparam FINE_INC_PREWAIT = 4'h7;\n   localparam DETECT_PREWAIT   = 4'h8;\n   localparam DETECT_DQSFOUND  = 4'h9;\n   localparam PRECH_WAIT       = 4'hA;\n   localparam FINE_DEC         = 4'hB;\n   localparam FINE_DEC_WAIT    = 4'hC;\n   localparam FINE_DEC_PREWAIT = 4'hD;\n   localparam FINAL_WAIT       = 4'hE;\n   localparam FINE_ADJ_DONE    = 4'hF;\n   \n\n  integer k,l,m,n,p,q,r,s;\n  \n  reg                       dqs_found_start_r;\n  reg [6*HIGHEST_BANK-1:0]  rd_byte_data_offset[0:RANKS-1];\n  reg                       rank_done_r;\n  reg                       rank_done_r1;\n  reg                       dqs_found_done_r;\n  (* ASYNC_REG = \"TRUE\" *) reg [HIGHEST_LANE-1:0] pi_dqs_found_lanes_r1;\n  (* ASYNC_REG = \"TRUE\" *) reg [HIGHEST_LANE-1:0] pi_dqs_found_lanes_r2;\n  (* ASYNC_REG = \"TRUE\" *) reg [HIGHEST_LANE-1:0] pi_dqs_found_lanes_r3;\n  reg                       init_dqsfound_done_r;\n  reg                       init_dqsfound_done_r1;\n  reg                       init_dqsfound_done_r2;\n  reg                       init_dqsfound_done_r3;\n  reg                       init_dqsfound_done_r4;\n  reg                       init_dqsfound_done_r5;\n  reg [1:0]                 rnk_cnt_r;\n  reg [2:0 ]                final_do_index[0:RANKS-1];\n  reg [5:0 ]                final_do_max[0:RANKS-1];\n  reg [6*HIGHEST_BANK-1:0]  final_data_offset[0:RANKS-1];\n  reg [6*HIGHEST_BANK-1:0]  final_data_offset_mc[0:RANKS-1];\n  reg [HIGHEST_BANK-1:0]    pi_rst_stg1_cal_r;\n  reg [HIGHEST_BANK-1:0]    pi_rst_stg1_cal_r1;\n  reg [10*HIGHEST_BANK-1:0] retry_cnt;\n  reg                       dqsfound_retry_r1;\n  wire [4*HIGHEST_BANK-1:0] pi_dqs_found_lanes_int;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_all_bank;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_all_bank_r;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_any_bank;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_any_bank_r;\n  reg [HIGHEST_BANK-1:0]    pi_dqs_found_err_r;\n  \n  \n  reg                       fine_adjust;\n  reg [N_CTL_LANES-1:0]     ctl_lane_cnt;\n  reg [3:0]                 fine_adj_state_r;\n  reg                       fine_adjust_done_r;\n  reg                       rst_dqs_find;\n  reg                       rst_dqs_find_r1;\n  reg                       rst_dqs_find_r2;\n  reg [5:0]                 init_dec_cnt;\n  reg [5:0]                 dec_cnt;\n  reg [5:0]                 inc_cnt;\n  reg                       final_dec_done;\n  reg                       init_dec_done;\n  reg                       first_fail_detect;\n  reg                       second_fail_detect;\n  reg [5:0]                 first_fail_taps;\n  reg [5:0]                 second_fail_taps;\n  reg [5:0]                 stable_pass_cnt;\n  reg [3:0]                 detect_rd_cnt;\n  \n\n  \n  \n  \n  \n  \n  \n  assign dbg_dqs_found_cal[5:0]  = first_fail_taps;\n  assign dbg_dqs_found_cal[11:6] = second_fail_taps;\n  assign dbg_dqs_found_cal[12]   = first_fail_detect;\n  assign dbg_dqs_found_cal[13]   = second_fail_detect;\n  assign dbg_dqs_found_cal[14]   = fine_adjust_done_r;\n  \n\n  assign pi_dqs_found_rank_done    = rank_done_r;\n  assign pi_dqs_found_done         = dqs_found_done_r;\n\n  generate\n  genvar rnk_cnt;\n    if (HIGHEST_BANK == 3) begin \n      for (rnk_cnt = 0; rnk_cnt < RANKS; rnk_cnt = rnk_cnt + 1) begin: rnk_loop\n        assign rd_data_offset_ranks_0[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_1[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][11:6];\n        assign rd_data_offset_ranks_2[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][17:12];\n        assign rd_data_offset_ranks_mc_0[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_mc_1[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][11:6];\n        assign rd_data_offset_ranks_mc_2[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][17:12];\n      end\n    end else if (HIGHEST_BANK == 2) begin \n      for (rnk_cnt = 0; rnk_cnt < RANKS; rnk_cnt = rnk_cnt + 1) begin: rnk_loop\n        assign rd_data_offset_ranks_0[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_1[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][11:6];\n        assign rd_data_offset_ranks_2[6*rnk_cnt+:6] = 'd0;\n        assign rd_data_offset_ranks_mc_0[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_mc_1[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][11:6];\n        assign rd_data_offset_ranks_mc_2[6*rnk_cnt+:6] = 'd0;\n      end\n    end else begin \n      for (rnk_cnt = 0; rnk_cnt < RANKS; rnk_cnt = rnk_cnt + 1) begin: rnk_loop\n        assign rd_data_offset_ranks_0[6*rnk_cnt+:6] = final_data_offset[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_1[6*rnk_cnt+:6] = 'd0;\n        assign rd_data_offset_ranks_2[6*rnk_cnt+:6] = 'd0;\n        assign rd_data_offset_ranks_mc_0[6*rnk_cnt+:6] = final_data_offset_mc[rnk_cnt][5:0];\n        assign rd_data_offset_ranks_mc_1[6*rnk_cnt+:6] = 'd0;\n        assign rd_data_offset_ranks_mc_2[6*rnk_cnt+:6] = 'd0;\n      end\n    end\n  endgenerate\n  \n  \n  \n  \n  generate\n  if (HIGHEST_BANK == 3) begin \n    assign rd_data_offset_0 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][0+:6] :\n                               final_data_offset[rnk_cnt_r][0+:6];\n    assign rd_data_offset_1 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][6+:6] :\n                               final_data_offset[rnk_cnt_r][6+:6];\n    assign rd_data_offset_2 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][12+:6] :\n                               final_data_offset[rnk_cnt_r][12+:6];\n  end else if (HIGHEST_BANK == 2) begin \n    assign rd_data_offset_0 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][0+:6] :\n                               final_data_offset[rnk_cnt_r][0+:6];\n    assign rd_data_offset_1 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][6+:6] :\n                               final_data_offset[rnk_cnt_r][6+:6];\n    assign rd_data_offset_2 = 'd0;\n  end else begin\n    assign rd_data_offset_0 = (~init_dqsfound_done_r2) ? rd_byte_data_offset[rnk_cnt_r][0+:6] :\n                               final_data_offset[rnk_cnt_r][0+:6];\n    assign rd_data_offset_1 = 'd0;\n    assign rd_data_offset_2 = 'd0;\n  end\n  endgenerate\n  \n  assign rd_data_offset_cal_done = init_dqsfound_done_r;\n  assign fine_adjust_lane_cnt    = ctl_lane_cnt;\n  \n  \n  \n  \n  \n  \n  \n  \n\n  generate\n  if ((HIGHEST_LANE == 4) || (HIGHEST_LANE == 8) || (HIGHEST_LANE == 12))\n    assign pi_dqs_found_lanes_int = pi_dqs_found_lanes_r3;\n  else if ((HIGHEST_LANE == 3) || (HIGHEST_LANE == 7) || (HIGHEST_LANE == 11))\n    assign pi_dqs_found_lanes_int = {1'b0, pi_dqs_found_lanes_r3};\n  else if ((HIGHEST_LANE == 6) || (HIGHEST_LANE == 10))\n    assign pi_dqs_found_lanes_int = {2'b00, pi_dqs_found_lanes_r3};\n  else if ((HIGHEST_LANE == 5) || (HIGHEST_LANE == 9))\n    assign pi_dqs_found_lanes_int = {3'b000, pi_dqs_found_lanes_r3};\n  endgenerate\n  \n  always @(posedge clk) begin\n    if (rst) begin\n      for (k = 0; k < HIGHEST_BANK; k = k + 1) begin: rst_pi_dqs_found\n        pi_dqs_found_all_bank[k] <= #TCQ 'b0;\n        pi_dqs_found_any_bank[k] <= #TCQ 'b0;\n      end\n    end else if (pi_dqs_found_start) begin\n      for (p = 0; p < HIGHEST_BANK; p = p +1) begin: assign_pi_dqs_found\n          pi_dqs_found_all_bank[p] <= #TCQ (!DATA_PRESENT[4*p+0] | pi_dqs_found_lanes_int[4*p+0]) &\n                                           (!DATA_PRESENT[4*p+1] | pi_dqs_found_lanes_int[4*p+1]) &\n                                           (!DATA_PRESENT[4*p+2] | pi_dqs_found_lanes_int[4*p+2]) &\n                                           (!DATA_PRESENT[4*p+3] | pi_dqs_found_lanes_int[4*p+3]);\n          pi_dqs_found_any_bank[p] <= #TCQ (DATA_PRESENT[4*p+0] & pi_dqs_found_lanes_int[4*p+0]) |\n                                           (DATA_PRESENT[4*p+1] & pi_dqs_found_lanes_int[4*p+1]) |\n                                           (DATA_PRESENT[4*p+2] & pi_dqs_found_lanes_int[4*p+2]) |\n                                           (DATA_PRESENT[4*p+3] & pi_dqs_found_lanes_int[4*p+3]);\n      end\n    end\n  end\n\n  \n  always @(posedge clk) begin\n    pi_dqs_found_all_bank_r <= #TCQ pi_dqs_found_all_bank;\n    pi_dqs_found_any_bank_r <= #TCQ pi_dqs_found_any_bank;\n  end\n  \n\n\n\n\n\n  always @(posedge clk) begin\n    if (rst || (detect_rd_cnt == 'd0))\n\t  detect_rd_cnt <= #TCQ NUM_READS;\n\telse if (detect_pi_found_dqs && (detect_rd_cnt > 'd0))\n\t  detect_rd_cnt <= #TCQ detect_rd_cnt - 1;\n  end\n  \n  \n   \n   \n   \n   \n   \n   assign fine_adjust_done = fine_adjust_done_r;\n   \n   always @(posedge clk) begin\n     rst_dqs_find_r1 <= #TCQ rst_dqs_find;\n\t rst_dqs_find_r2 <= #TCQ rst_dqs_find_r1;\n   end\n   \n   always @(posedge clk) begin\n      if(rst)begin\n        fine_adjust        <= #TCQ 1'b0;\n        ctl_lane_cnt       <= #TCQ 'd0;\n        fine_adj_state_r   <= #TCQ FINE_ADJ_IDLE;\n        fine_adjust_done_r <= #TCQ 1'b0;\n        ck_po_stg2_f_indec <= #TCQ 1'b0;\n        ck_po_stg2_f_en    <= #TCQ 1'b0;\n        rst_dqs_find       <= #TCQ 1'b0;\n        init_dec_cnt       <= #TCQ 'd31;\n        dec_cnt            <= #TCQ 'd0;\n        inc_cnt            <= #TCQ 'd0;\n        init_dec_done      <= #TCQ 1'b0;\n        final_dec_done     <= #TCQ 1'b0;\n        first_fail_detect  <= #TCQ 1'b0;\n        second_fail_detect <= #TCQ 1'b0;\n        first_fail_taps    <= #TCQ 'd0;\n        second_fail_taps   <= #TCQ 'd0;\n        stable_pass_cnt    <= #TCQ 'd0;\n        dqs_found_prech_req<= #TCQ 1'b0;\n      end else begin\n        case (fine_adj_state_r)\n           \n           FINE_ADJ_IDLE: begin\n             if (init_dqsfound_done_r5) begin\n               if (SIM_CAL_OPTION == \"FAST_CAL\") begin\n                 fine_adjust      <= #TCQ 1'b1;\n                 fine_adj_state_r <= #TCQ FINE_ADJ_DONE;\n                 rst_dqs_find     <= #TCQ 1'b0;\n               end else begin\n                 fine_adjust      <= #TCQ 1'b1;\n                 fine_adj_state_r <= #TCQ RST_WAIT;\n                 rst_dqs_find     <= #TCQ 1'b1;\n               end\n             end\n           end\n           \n           RST_WAIT: begin\n             if (~(|pi_dqs_found_any_bank) && rst_dqs_find_r2) begin\n               rst_dqs_find     <= #TCQ 1'b0;\n               if (|init_dec_cnt)\n                 fine_adj_state_r <= #TCQ FINE_DEC_PREWAIT;\n               else if (final_dec_done)\n                 fine_adj_state_r <= #TCQ FINE_ADJ_DONE;\n               else\n                 fine_adj_state_r <= #TCQ RST_POSTWAIT;\n             end\n           end\n           \n           RST_POSTWAIT: begin\n             fine_adj_state_r <= #TCQ RST_POSTWAIT1;\n           end\n           \n           RST_POSTWAIT1: begin\n             fine_adj_state_r <= #TCQ FINE_ADJ_INIT;\n           end\n           \n           FINE_ADJ_INIT: begin\n             \n               fine_adj_state_r <= #TCQ FINE_INC;\n           end\n           \n           FINE_INC: begin\n             fine_adj_state_r   <= #TCQ FINE_INC_WAIT;\n             ck_po_stg2_f_indec <= #TCQ 1'b1;\n             ck_po_stg2_f_en    <= #TCQ 1'b1;\n             if (ctl_lane_cnt == N_CTL_LANES-1)\n               inc_cnt          <= #TCQ inc_cnt + 1;\n           end\n           \n           FINE_INC_WAIT: begin\n             ck_po_stg2_f_indec <= #TCQ 1'b0;\n             ck_po_stg2_f_en    <= #TCQ 1'b0;\n             if (ctl_lane_cnt != N_CTL_LANES-1) begin\n               ctl_lane_cnt     <= #TCQ ctl_lane_cnt + 1;\n               fine_adj_state_r <= #TCQ FINE_INC_PREWAIT;\n             end else if (ctl_lane_cnt == N_CTL_LANES-1) begin\n               ctl_lane_cnt     <= #TCQ 'd0;\n               fine_adj_state_r <= #TCQ DETECT_PREWAIT;\n             end\n           end\n           \n           FINE_INC_PREWAIT: begin\n             fine_adj_state_r <= #TCQ FINE_INC;\n           end\n           \n           DETECT_PREWAIT: begin\n             if (detect_pi_found_dqs && (detect_rd_cnt == 'd1))\n               fine_adj_state_r <= #TCQ DETECT_DQSFOUND;\n\t\t\t else\n\t\t\t   fine_adj_state_r <= #TCQ DETECT_PREWAIT;\n           end\n           \n           DETECT_DQSFOUND: begin\n             if (detect_pi_found_dqs && ~(&pi_dqs_found_all_bank)) begin\n               stable_pass_cnt     <= #TCQ 'd0;\n               if (~first_fail_detect && (inc_cnt == 'd63)) begin\n                 \n                 \n                 first_fail_detect <= #TCQ 1'b1;\n                 first_fail_taps   <= #TCQ inc_cnt;\n                 fine_adj_state_r  <= #TCQ FINE_DEC;\n                 dec_cnt           <= #TCQ 'd32;\n               end else if (~first_fail_detect && (inc_cnt > 'd30) && (stable_pass_cnt > 'd29)) begin\n                 \n                 \n                 first_fail_detect <= #TCQ 1'b1;\n                 first_fail_taps   <= #TCQ inc_cnt;\n                 fine_adj_state_r  <= #TCQ FINE_DEC;\n                 dec_cnt           <= #TCQ (inc_cnt>>1) + 1;\t\t\t\t \n\t\t\t   end else if (~first_fail_detect || (first_fail_detect && (stable_pass_cnt < 'd30) && (inc_cnt <= 'd32))) begin\n                 \n                 \n                 first_fail_detect <= #TCQ 1'b1;\n                 first_fail_taps   <= #TCQ inc_cnt;\n                 rst_dqs_find      <= #TCQ 1'b1;\n                 if ((inc_cnt == 'd12) || (inc_cnt == 'd24)) begin\n                   dqs_found_prech_req <= #TCQ 1'b1;\n                   fine_adj_state_r    <= #TCQ PRECH_WAIT;\n                 end else\n                 fine_adj_state_r  <= #TCQ RST_WAIT;\n               end else if (first_fail_detect && (inc_cnt > 'd32) && (inc_cnt < 'd63) && (stable_pass_cnt < 'd30)) begin\n                 \n                 \n                 first_fail_detect <= #TCQ 1'b1;\n                 first_fail_taps   <= #TCQ inc_cnt;\n                 rst_dqs_find      <= #TCQ 1'b1;\n                 if ((inc_cnt == 'd36) || (inc_cnt == 'd48) || (inc_cnt == 'd60)) begin\n                   dqs_found_prech_req <= #TCQ 1'b1;\n                   fine_adj_state_r    <= #TCQ PRECH_WAIT;\n                 end else\n                   fine_adj_state_r  <= #TCQ RST_WAIT;\n               end else if (first_fail_detect && (inc_cnt == 'd63)) begin\n                 if (stable_pass_cnt < 'd30) begin\n                   \n                   \n                   first_fail_detect <= #TCQ 1'b1;\n                   first_fail_taps   <= #TCQ inc_cnt;\n                   fine_adj_state_r  <= #TCQ FINE_DEC;\n                   dec_cnt           <= #TCQ 'd32;\n                 end else begin\n                   \n                   \n                   fine_adj_state_r  <= #TCQ FINE_DEC;\n                   dec_cnt           <= #TCQ ((inc_cnt - first_fail_taps)>>1);\n                 end\n               end else begin\n                 \n                 \n                 second_fail_detect <= #TCQ 1'b1;\n                 second_fail_taps   <= #TCQ inc_cnt;\n                 dec_cnt            <= #TCQ ((inc_cnt - first_fail_taps)>>1);\n                 fine_adj_state_r   <= #TCQ FINE_DEC;\n               end\n             end else if (detect_pi_found_dqs && (&pi_dqs_found_all_bank)) begin\n               stable_pass_cnt    <= #TCQ stable_pass_cnt + 1;\n               if ((inc_cnt == 'd12) || (inc_cnt == 'd24) || (inc_cnt == 'd36) || \n                   (inc_cnt == 'd48) || (inc_cnt == 'd60)) begin\n                 dqs_found_prech_req <= #TCQ 1'b1;\n                 fine_adj_state_r    <= #TCQ PRECH_WAIT;\n               end else if (inc_cnt < 'd63) begin\n                 rst_dqs_find     <= #TCQ 1'b1;\n                 fine_adj_state_r <= #TCQ RST_WAIT;\n               end else begin\n                 fine_adj_state_r <= #TCQ FINE_DEC;\n                 if (~first_fail_detect || (first_fail_taps > 'd33))\n                   \n                   dec_cnt <= #TCQ 'd32;\n                 \n                 \n                 \n                 \n                 else\n                   \n                   \n                   dec_cnt <= #TCQ ((inc_cnt - first_fail_taps)>>1);\n               end\n             end\n           end\n           \n           PRECH_WAIT: begin\n             if (prech_done) begin\n               dqs_found_prech_req <= #TCQ 1'b0;\n               rst_dqs_find        <= #TCQ 1'b1;\n               fine_adj_state_r    <= #TCQ RST_WAIT;\n             end\n           end\n               \n               \n           FINE_DEC: begin\n             fine_adj_state_r   <= #TCQ FINE_DEC_WAIT;\n             ck_po_stg2_f_indec <= #TCQ 1'b0;\n             ck_po_stg2_f_en    <= #TCQ 1'b1;\n             if ((ctl_lane_cnt == N_CTL_LANES-1) && (init_dec_cnt > 'd0))\n               init_dec_cnt     <= #TCQ init_dec_cnt - 1;\n             else if ((ctl_lane_cnt == N_CTL_LANES-1) && (dec_cnt > 'd0))\n               dec_cnt          <= #TCQ dec_cnt - 1;\n           end\n           \n           FINE_DEC_WAIT: begin\n             ck_po_stg2_f_indec <= #TCQ 1'b0;\n             ck_po_stg2_f_en    <= #TCQ 1'b0;\n             if (ctl_lane_cnt != N_CTL_LANES-1) begin\n               ctl_lane_cnt     <= #TCQ ctl_lane_cnt + 1;\n               fine_adj_state_r <= #TCQ FINE_DEC_PREWAIT;\n             end else if (ctl_lane_cnt == N_CTL_LANES-1) begin\n               ctl_lane_cnt     <= #TCQ 'd0;\n               if ((dec_cnt > 'd0) || (init_dec_cnt > 'd0))\n                 fine_adj_state_r <= #TCQ FINE_DEC_PREWAIT;\n               else begin\n                 fine_adj_state_r <= #TCQ FINAL_WAIT;\n                 if ((init_dec_cnt == 'd0) && ~init_dec_done)\n                   init_dec_done <= #TCQ 1'b1;\n                 else\n                   final_dec_done   <= #TCQ 1'b1;\n               end\n             end\n           end\n           \n           FINE_DEC_PREWAIT: begin\n             fine_adj_state_r <= #TCQ FINE_DEC;\n           end\n           \n           FINAL_WAIT: begin\n             rst_dqs_find     <= #TCQ 1'b1;\n             fine_adj_state_r <= #TCQ RST_WAIT;\n           end\n           \n           FINE_ADJ_DONE: begin\n             if (&pi_dqs_found_all_bank) begin\n               fine_adjust_done_r <= #TCQ 1'b1;\n               rst_dqs_find       <= #TCQ 1'b0;\n               fine_adj_state_r   <= #TCQ FINE_ADJ_DONE;\n             end\n           end\n           \n        endcase\n      end\n   end\n               \n\n   \n   \n\n  \n\n  always@(posedge clk)\n    dqs_found_start_r <= #TCQ pi_dqs_found_start;\n  \n\n  always @(posedge clk) begin\n    if (rst)\n      rnk_cnt_r <= #TCQ 2'b00;\n    else if (init_dqsfound_done_r)\n      rnk_cnt_r <= #TCQ rnk_cnt_r;\n    else if (rank_done_r)\n      rnk_cnt_r <= #TCQ rnk_cnt_r + 1;\n  end\n  \n  \n  \n  \n  \n    always @(posedge clk) begin\n    if (rst || (|pi_rst_stg1_cal_r))\n      init_dqsfound_done_r  <= #TCQ 1'b0;\n    else if (&pi_dqs_found_all_bank) begin\n      if (rnk_cnt_r == RANKS-1)\n        init_dqsfound_done_r  <= #TCQ 1'b1;\n      else\n        init_dqsfound_done_r  <= #TCQ 1'b0;\n    end\n  end\n  \n  always @(posedge clk) begin\n    if (rst  ||\n       (init_dqsfound_done_r && (rnk_cnt_r == RANKS-1)))\n      rank_done_r       <= #TCQ 1'b0;\n    else if (&pi_dqs_found_all_bank && ~(&pi_dqs_found_all_bank_r))\n      rank_done_r <= #TCQ 1'b1;\n    else\n      rank_done_r       <= #TCQ 1'b0;\n  end\n  \n  always @(posedge clk) begin\n    pi_dqs_found_lanes_r1   <= #TCQ pi_dqs_found_lanes;\n    pi_dqs_found_lanes_r2   <= #TCQ pi_dqs_found_lanes_r1;\n    pi_dqs_found_lanes_r3   <= #TCQ pi_dqs_found_lanes_r2;\n    init_dqsfound_done_r1   <= #TCQ init_dqsfound_done_r;\n    init_dqsfound_done_r2   <= #TCQ init_dqsfound_done_r1;\n    init_dqsfound_done_r3   <= #TCQ init_dqsfound_done_r2;\n    init_dqsfound_done_r4   <= #TCQ init_dqsfound_done_r3;\n    init_dqsfound_done_r5   <= #TCQ init_dqsfound_done_r4;\n    rank_done_r1            <= #TCQ rank_done_r;\n    dqsfound_retry_r1       <= #TCQ dqsfound_retry;\n  end\n\n  \n  always @(posedge clk) begin\n    if (rst)\n      dqs_found_done_r <= #TCQ 1'b0;\n    else if (&pi_dqs_found_all_bank && (rnk_cnt_r == RANKS-1) && init_dqsfound_done_r1 &&\n             (fine_adj_state_r == FINE_ADJ_DONE))\n      dqs_found_done_r <= #TCQ 1'b1;\n    else\n      dqs_found_done_r <= #TCQ 1'b0;\n  end\n  \n\n  generate\n    if (HIGHEST_BANK == 3) begin \n\n      \n      \n      \n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[0] || fine_adjust)\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[1] || fine_adjust)\n          pi_rst_stg1_cal_r[1] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[1] && ~pi_dqs_found_all_bank[1]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[1] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[2] || fine_adjust)\n          pi_rst_stg1_cal_r[2] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[2] && ~pi_dqs_found_all_bank[2]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][12+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[2] <= #TCQ 1'b1;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[1])\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[1] && ~pi_dqs_found_all_bank[1])\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b0;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[2]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[2])\n          pi_rst_stg1_cal_r1[2]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[2] && ~pi_dqs_found_all_bank[2])\n          pi_rst_stg1_cal_r1[2]  <= #TCQ 1'b0;\n      end\n\n      \n      \n      \n    \n      always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[0+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[0])\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10] + 1;\n        else\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10];\n      end\n\t  \n\t  always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[10+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[1])\n          retry_cnt[10+:10] <= #TCQ retry_cnt[10+:10] + 1;\n        else\n          retry_cnt[10+:10] <= #TCQ retry_cnt[10+:10];\n      end\n\t  \n\t  always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[20+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][12+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[2])\n          retry_cnt[20+:10] <= #TCQ retry_cnt[20+:10] + 1;\n        else\n          retry_cnt[20+:10] <= #TCQ retry_cnt[20+:10];\n      end\n\t  \n      \n      \n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[0] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[0] && (retry_cnt[0+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[0] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[1] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[1] && (retry_cnt[10+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[1] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[2] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[2] && (retry_cnt[20+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][12+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[2] <= #TCQ 1'b1;\n      end\n\n      \n      always @(posedge clk) begin\n        if (rst) begin\n          for (q = 0; q < RANKS; q = q + 1) begin: three_bank0_rst_loop\n            rd_byte_data_offset[q][0+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][0+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[0] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][0+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][0+:6] - 1;\n      end\n\n      always @(posedge clk) begin\n        if (rst) begin\n          for (r = 0; r < RANKS; r = r + 1) begin: three_bank1_rst_loop\n            rd_byte_data_offset[r][6+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][6+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[1] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][6+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][6+:6] - 1;\n      end\n\n      always @(posedge clk) begin\n        if (rst) begin\n          for (s = 0; s < RANKS; s = s + 1) begin: three_bank2_rst_loop\n            rd_byte_data_offset[s][12+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][12+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][12+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[2] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][12+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][12+:6] - 1;\n      end\n\n\n\n\n    end else if (HIGHEST_BANK == 2) begin  \n\n      \n      \n      \n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[0] || fine_adjust)\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[1] || fine_adjust)\n          pi_rst_stg1_cal_r[1] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[1] && ~pi_dqs_found_all_bank[1]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[1] <= #TCQ 1'b1;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[1])\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[1] && ~pi_dqs_found_all_bank[1])\n          pi_rst_stg1_cal_r1[1]  <= #TCQ 1'b0;\n      end\n\n      \n      \n      \n    \n      always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[0+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[0])\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10] + 1;\n        else\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10];\n      end\n\t  \n\t  always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[10+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[1])\n          retry_cnt[10+:10] <= #TCQ retry_cnt[10+:10] + 1;\n        else\n          retry_cnt[10+:10] <= #TCQ retry_cnt[10+:10];\n      end\n\n      \n      \n\t  always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[0] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[0] && (retry_cnt[0+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[0] <= #TCQ 1'b1;\n      end\n\n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[1] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[1] && (retry_cnt[10+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[1] <= #TCQ 1'b1;\n      end\n\n\n      \n      always @(posedge clk) begin\n        if (rst) begin\n          for (q = 0; q < RANKS; q = q + 1) begin: two_bank0_rst_loop\n            rd_byte_data_offset[q][0+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][0+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[0] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][0+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][0+:6] - 1;\n      end\n\n      always @(posedge clk) begin\n        if (rst) begin\n          for (r = 0; r < RANKS; r = r + 1) begin: two_bank1_rst_loop\n            rd_byte_data_offset[r][6+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r][6+:6] < (nCL + nAL - 1)))\n            rd_byte_data_offset[rnk_cnt_r][6+:6] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[1] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r][6+:6]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r][6+:6] - 1;\n      end\n\n\n\n    end else begin \n\n      \n      always @(posedge clk) begin\n        if (rst) begin\n          for (l = 0; l < RANKS; l = l + 1) begin: bank_rst_loop\n            rd_byte_data_offset[l] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n          end\n        end else if ((rank_done_r1 && ~init_dqsfound_done_r)  ||\n                     (rd_byte_data_offset[rnk_cnt_r] < (nCL + nAL - 1)))\n          rd_byte_data_offset[rnk_cnt_r] <= #TCQ nCL + nAL + LATENCY_FACTOR;\n        else if (dqs_found_start_r && ~pi_dqs_found_all_bank[0] &&\n                 \n                 (detect_pi_found_dqs && (detect_rd_cnt == 'd1)) && ~init_dqsfound_done_r && ~fine_adjust)\n          rd_byte_data_offset[rnk_cnt_r]\n          <= #TCQ rd_byte_data_offset[rnk_cnt_r] - 1;\n      end\n\n      \n      \n      \n      always @(posedge clk) begin\n        if (rst || pi_rst_stg1_cal_r1[0] || fine_adjust)\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b0;\n        else if ((pi_dqs_found_start && ~dqs_found_start_r) ||\n                 \n                 (pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0]) ||\n                 (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_rst_stg1_cal_r[0] <= #TCQ 1'b1;\n      end\n      \n      always @(posedge clk) begin\n        if (rst || fine_adjust)\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n        else if (pi_rst_stg1_cal_r[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b1;\n        else if (~pi_dqs_found_any_bank_r[0] && ~pi_dqs_found_all_bank[0])\n          pi_rst_stg1_cal_r1[0]  <= #TCQ 1'b0;\n      end\n\n      \n      \n      \n    \n      always @(posedge clk) begin\n        if (rst || rank_done_r)\n          retry_cnt[0+:10] <= #TCQ 'b0;\n        else if ((rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)) &&\n                 ~pi_dqs_found_all_bank[0])\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10] + 1;\n        else\n          retry_cnt[0+:10] <= #TCQ retry_cnt[0+:10];\n      end\n\n      \n      \n      always @(posedge clk) begin\n        if (rst)\n          pi_dqs_found_err_r[0] <= #TCQ 1'b0;\n        else if (~pi_dqs_found_all_bank[0] && (retry_cnt[0+:10] == NUM_DQSFOUND_CAL) &&\n                (rd_byte_data_offset[rnk_cnt_r][0+:6] < (nCL + nAL - 1)))\n          pi_dqs_found_err_r[0] <= #TCQ 1'b1;\n      end\n\n    end\n  endgenerate\n  \n  always @(posedge clk) begin\n    if (rst)\n      pi_rst_stg1_cal <= #TCQ {HIGHEST_BANK{1'b0}};\n    else if (rst_dqs_find)\n      pi_rst_stg1_cal <= #TCQ {HIGHEST_BANK{1'b1}};\n    else\n      pi_rst_stg1_cal <= #TCQ pi_rst_stg1_cal_r;\n  end\n  \n\n\n  \n  \n  generate\n  genvar i;\n  genvar j;\n    for (i = 0; i < RANKS; i = i + 1) begin: rank_final_loop\n       reg [5:0] final_do_cand [RANKS-1:0];\n       \n       \n       if (HIGHEST_BANK == 3) begin\n         always @(*) begin\n            case (final_do_index[i])\n\t      3'b000:  final_do_cand[i]  = final_data_offset[i][5:0];\n\t      3'b001:  final_do_cand[i]  = final_data_offset[i][11:6];\n\t      3'b010:  final_do_cand[i]  = final_data_offset[i][17:12];\n\t      default: final_do_cand[i]  = 'd0;\n\t    endcase\n         end\n       end else if (HIGHEST_BANK == 2) begin\n         always @(*) begin\n            case (final_do_index[i])\n\t      3'b000:  final_do_cand[i]  = final_data_offset[i][5:0];\n\t      3'b001:  final_do_cand[i]  = final_data_offset[i][11:6];\n\t      3'b010:  final_do_cand[i]  = 'd0;\n\t      default: final_do_cand[i]  = 'd0;\n\t    endcase\n         end\n       end else begin\n         always @(*) begin\n            case (final_do_index[i])\n\t      3'b000:  final_do_cand[i]  = final_data_offset[i][5:0];\n\t      3'b001:  final_do_cand[i]  = 'd0;\n\t      3'b010:  final_do_cand[i]  = 'd0;\n\t      default: final_do_cand[i]  = 'd0;\n\t    endcase\n         end\n       end\n        \n       always @(posedge clk)  begin\n          if (rst) \n\t      final_do_max[i] <= #TCQ 0;\n\t  else begin\n\t     final_do_max[i] <= #TCQ final_do_max[i]; \n             case (final_do_index[i])\n\t        3'b000: if ( | DATA_PRESENT[3:0]) \n\t               if (final_do_max[i] < final_do_cand[i])\n\t                 if (CWL_M % 2) \n\t\t            final_do_max[i] <= #TCQ final_do_cand[i] - 1;\n\t\t         else\n\t\t            final_do_max[i] <= #TCQ final_do_cand[i];\n\t        3'b001: if ( | DATA_PRESENT[7:4]) \n\t               if (final_do_max[i] < final_do_cand[i])\n\t\t         if (CWL_M % 2) \n\t\t            final_do_max[i] <= #TCQ final_do_cand[i] - 1;\n\t\t         else\n\t\t            final_do_max[i] <= #TCQ final_do_cand[i];\n\t        3'b010: if ( | DATA_PRESENT[11:8]) \n\t               if (final_do_max[i] < final_do_cand[i])\n\t\t         if (CWL_M % 2) \n\t\t            final_do_max[i] <= #TCQ final_do_cand[i] - 1;\n\t\t         else\n\t\t            final_do_max[i] <= #TCQ final_do_cand[i];\n                default:\n\t               final_do_max[i] <= #TCQ final_do_max[i];\n\t      endcase\n\t   end\n\tend\n\n\talways @(posedge clk) \n\t    if (rst) begin\n\t       final_do_index[i] <= #TCQ 0;\n\t    end\n\t    else begin\n\t       final_do_index[i] <= #TCQ final_do_index[i] + 1;\n\t    end\n\n      for (j = 0; j < HIGHEST_BANK; j = j + 1) begin: bank_final_loop\n        \n        always @(posedge clk) begin\n          if (rst) begin\n            final_data_offset[i][6*j+:6] <= #TCQ 'b0;\n\t  end\n          else begin\n\t  \n           \n          \n          if (init_dqsfound_done_r && ~init_dqsfound_done_r1) begin\n\t    if ( DATA_PRESENT [ j*4+:4] != 0) begin \n               final_data_offset[i][6*j+:6] <= #TCQ rd_byte_data_offset[i][6*j+:6];\n               if (CWL_M % 2) \n                 final_data_offset_mc[i][6*j+:6] <= #TCQ rd_byte_data_offset[i][6*j+:6] - 1;\n               else \n                 final_data_offset_mc[i][6*j+:6] <= #TCQ rd_byte_data_offset[i][6*j+:6];\n            end \n\t  end\n          else if (init_dqsfound_done_r5 ) begin\n\t       if ( DATA_PRESENT [ j*4+:4] == 0) begin \n                  final_data_offset[i][6*j+:6] <= #TCQ final_do_max[i];\n                  final_data_offset_mc[i][6*j+:6] <= #TCQ final_do_max[i];\n               end\t\n          end\n\t  end\n        end\n      end\n    end\n  endgenerate\n\n  \n  \n  \n  \n  always @(posedge clk) begin\n    pi_dqs_found_err    <= #TCQ |pi_dqs_found_err_r;\n  end\n  \n\n  \nendmodule\n           \n        \n      \n       \n\n      \n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: mig_7series_v4_1_ddr_phy_dqs_found_cal. Module specification: This module performs DQS (Data Strobe) signal detection and calibration for a DDR (Double Data Rate) memory interface. It handles the process of finding and adjusting the timing of DQS signals across multiple ranks and banks of memory. The module takes inputs such as clk (clock), rst (reset), pi_dqs_found_start (start signal), and pi_dqs_found_lanes (DQS found status for each lane). It outputs signals including pi_rst_stg1_cal (reset signal for stage 1 calibration), rd_data_offset (read data offset values), and pi_dqs_found_done (overall DQS found process completed). Internally, it uses signals like dqs_found_start_r (registered start"
                }
            ]
        }
    ]
}