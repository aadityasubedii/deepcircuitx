{
    "line_num": [
        [
            526,
            656
        ],
        [
            482,
            524
        ],
        [
            481,
            481
        ],
        [
            477,
            480
        ],
        [
            475,
            478
        ]
    ],
    "blocks": [
        "  endgenerate\n\n  mig_7series_v4_1_mc #\n   (\n    .TCQ                                (TCQ),\n    .PAYLOAD_WIDTH                      (PAYLOAD_WIDTH),\n    .MC_ERR_ADDR_WIDTH                  (MC_ERR_ADDR_WIDTH),\n    .ADDR_CMD_MODE                      (ADDR_CMD_MODE),\n    .BANK_WIDTH                         (BANK_WIDTH),\n    .BM_CNT_WIDTH                       (BM_CNT_WIDTH),\n    .BURST_MODE                         (BURST_MODE),\n    .COL_WIDTH                          (COL_WIDTH),\n    .CMD_PIPE_PLUS1                     (CMD_PIPE_PLUS1),\n    .CS_WIDTH                           (CS_WIDTH),\n    .DATA_WIDTH                         (DATA_WIDTH),\n    .DATA_BUF_ADDR_WIDTH                (DATA_BUF_ADDR_WIDTH),\n    .DATA_BUF_OFFSET_WIDTH              (DATA_BUF_OFFSET_WIDTH),\n    .DRAM_TYPE                          (DRAM_TYPE),\n    .CKE_ODT_AUX                (CKE_ODT_AUX),\n    .DQS_WIDTH                          (DQS_WIDTH),\n    .DQ_WIDTH                           (DQ_WIDTH),\n    .ECC                                (ECC),\n    .ECC_WIDTH                          (ECC_WIDTH),\n    .nBANK_MACHS                        (nBANK_MACHS),\n    .nCK_PER_CLK                        (nCK_PER_CLK),\n    .nSLOTS                             (nSLOTS),\n    .CL                                 (CL),\n    .nCS_PER_RANK                       (nCS_PER_RANK),\n    .CWL                                (CWL_T),\n    .ORDERING                           (ORDERING),\n    .RANK_WIDTH                         (RANK_WIDTH),\n    .RANKS                              (RANKS),\n    .REG_CTRL                           (REG_CTRL),\n    .ROW_WIDTH                          (ROW_WIDTH),\n    .RTT_NOM                            (RTT_NOM),\n    .RTT_WR                             (RTT_WR),\n    .STARVE_LIMIT                       (STARVE_LIMIT),\n    .SLOT_0_CONFIG                      (SLOT_0_CONFIG_MC),\n    .SLOT_1_CONFIG                      (SLOT_1_CONFIG_MC),\n    .tCK                                (tCK),\n    .tCKE                               (tCKE),\n    .tFAW                               (tFAW),\n    .tRAS                               (tRAS),\n    .tRCD                               (tRCD),\n    .tREFI                              (tREFI),\n    .tRFC                               (tRFC),\n    .tRP                                (tRP),\n    .tRRD                               (tRRD),\n    .tRTP                               (tRTP),\n    .tWTR                               (tWTR),\n    .tZQI                               (tZQI),\n    .tZQCS                              (tZQCS),\n    .tPRDI                              (tPRDI),\n    .USER_REFRESH                       (USER_REFRESH))\n   mc0\n     (.app_periodic_rd_req    (1'b0),\n      .app_sr_req             (app_sr_req),\n      .app_sr_active          (app_sr_active),\n      .app_ref_req            (app_ref_req),\n      .app_ref_ack            (app_ref_ack),\n      .app_zq_req             (app_zq_req),\n      .app_zq_ack             (app_zq_ack),\n      .ecc_single             (ecc_single),\n      .ecc_multiple           (ecc_multiple),\n      .ecc_err_addr           (ecc_err_addr),\n      .mc_address             (mc_address),\n      .mc_aux_out0            (mc_aux_out0),\n      .mc_aux_out1            (mc_aux_out1),\n      .mc_bank                (mc_bank),\n      .mc_cke                 (mc_cke),\n      .mc_odt                 (mc_odt),\n      .mc_cas_n               (mc_cas_n),\n      .mc_cmd                 (mc_cmd),\n      .mc_cmd_wren            (mc_cmd_wren),\n      .mc_cs_n                (mc_cs_n),\n      .mc_ctl_wren            (mc_ctl_wren),\n      .mc_data_offset         (mc_data_offset),\n      .mc_data_offset_1       (mc_data_offset_1),\n      .mc_data_offset_2       (mc_data_offset_2),\n      .mc_cas_slot            (mc_cas_slot),\n      .mc_rank_cnt            (mc_rank_cnt),\n      .mc_ras_n               (mc_ras_n),\n      .mc_reset_n             (mc_reset_n),\n      .mc_we_n                (mc_we_n),\n      .mc_wrdata              (mc_wrdata),\n      .mc_wrdata_en           (mc_wrdata_en),\n      .mc_wrdata_mask         (mc_wrdata_mask),\n      \n      .accept                 (accept),\n      .accept_ns              (accept_ns),\n      .bank_mach_next         (bank_mach_next[BM_CNT_WIDTH-1:0]),\n      .rd_data_addr           (rd_data_addr[DATA_BUF_ADDR_WIDTH-1:0]),\n      .rd_data_en             (rd_data_en),\n      .rd_data_end            (rd_data_end),\n      .rd_data_offset         (rd_data_offset),\n      .wr_data_addr           (wr_data_addr[DATA_BUF_ADDR_WIDTH-1:0]),\n      .wr_data_en             (wr_data_en),\n      .wr_data_offset         (wr_data_offset),\n      .rd_data                (rd_data),\n      .wr_data                (wr_data),\n      .wr_data_mask           (wr_data_mask),\n      .mc_read_idle           (idle),\n      .mc_ref_zq_wip          (mc_ref_zq_wip),\n      \n      .init_calib_complete    (mux_calib_complete),\n      .calib_rd_data_offset   (calib_rd_data_offset_0),\n      .calib_rd_data_offset_1 (calib_rd_data_offset_1),\n      .calib_rd_data_offset_2 (calib_rd_data_offset_2),\n      .phy_mc_ctl_full        (phy_mc_ctl_full),\n      .phy_mc_cmd_full        (phy_mc_cmd_full),\n      .phy_mc_data_full       (phy_mc_data_full),\n      .phy_rd_data            (phy_rd_data),\n      .phy_rddata_valid       (phy_rddata_valid),\n      .correct_en             (correct_en),\n      .bank                   (bank[BANK_WIDTH-1:0]),\n      .clk                    (clk),\n      .cmd                    (cmd[2:0]),\n      .col                    (col[COL_WIDTH-1:0]),\n      .data_buf_addr          (data_buf_addr[DATA_BUF_ADDR_WIDTH-1:0]),\n      .hi_priority            (hi_priority),\n      .rank                   (rank[RANK_WIDTH-1:0]),\n      .raw_not_ecc            (raw_not_ecc[2*nCK_PER_CLK-1 :0]),\n      .row                    (row[ROW_WIDTH-1:0]),\n      .rst                    (mux_rst),\n      .size                   (size),\n      .slot_0_present         (slot_0_present_mc[7:0]),\n      .slot_1_present         (slot_1_present_mc[7:0]),\n      .fi_xor_we          (fi_xor_we),\n      .fi_xor_wrdata          (fi_xor_wrdata),\n      .use_addr               (use_addr));\n",
        "        always @ (slot_0_present[0] or slot_0_present[1]\n                or slot_1_present[0] or slot_1_present[1]) begin\n        case ({slot_0_present[0],slot_0_present[1],\n               slot_1_present[0],slot_1_present[1]})\n          \n          4'b1000: begin\n             slot_0_present_mc = 8'b0000_0001;\n             slot_1_present_mc = 8'b0000_0000;\n          end\n          4'b0010: begin\n            slot_0_present_mc = 8'b0000_0000;\n            slot_1_present_mc = 8'b0000_0010;\n          end\n          \n          4'b1100: begin\n            slot_0_present_mc = 8'b0000_0101;\n            slot_1_present_mc = 8'b0000_0000;\n          end\n          4'b0011: begin\n            slot_0_present_mc = 8'b0000_0000;\n            slot_1_present_mc = 8'b0000_1010;\n          end\n          \n          4'b1010: begin\n            slot_0_present_mc = 8'b0000_0001;\n            slot_1_present_mc = 8'b0000_0010;\n          end\n          \n          4'b1011: begin\n            slot_0_present_mc = 8'b0000_0001;\n            slot_1_present_mc = 8'b0000_1010;\n          end\n          4'b1110: begin\n            slot_0_present_mc = 8'b0000_0101;\n            slot_1_present_mc = 8'b0000_0010;\n          end\n          \n          4'b1111: begin\n            slot_0_present_mc = 8'b0000_0101;\n            slot_1_present_mc = 8'b0000_1010;\n          end\n        endcase\n      end",
        "    end else if (nSLOTS == 2) begin: gen_dual_slot_odt",
        "      always @ (slot_0_present or slot_1_present) begin\n        slot_0_present_mc = slot_0_present;\n        slot_1_present_mc = slot_1_present;\n      end",
        "  generate\n    if (nSLOTS == 1) begin: gen_single_slot_odt\n      always @ (slot_0_present or slot_1_present) begin\n        slot_0_present_mc = slot_0_present;"
    ]
}