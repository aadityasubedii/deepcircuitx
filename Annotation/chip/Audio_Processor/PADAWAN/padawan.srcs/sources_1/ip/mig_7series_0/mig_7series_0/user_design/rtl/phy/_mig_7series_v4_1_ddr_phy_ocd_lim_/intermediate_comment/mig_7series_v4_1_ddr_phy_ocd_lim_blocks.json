{
    "line_num": [
        [
            421,
            594
        ],
        [
            406,
            419
        ],
        [
            390,
            403
        ],
        [
            373,
            387
        ],
        [
            361,
            371
        ],
        [
            349,
            358
        ],
        [
            337,
            346
        ],
        [
            282,
            334
        ],
        [
            273,
            280
        ],
        [
            266,
            271
        ],
        [
            248,
            261
        ],
        [
            237,
            244
        ],
        [
            221,
            231
        ],
        [
            214,
            216
        ],
        [
            90,
            96
        ]
    ],
    "blocks": [
        "  always @(*) begin\n\t  lim_nxt_state     = lim_state;\n\t  ktap_right        = ktap_right_r;\n\t  write_request     = write_request_r;\n\t  prech_req         = prech_req_r;\n\t  poc_ready         = poc_ready_r;\n\t  stg3_dec          = stg3_dec_r;\n\t  stg2_inc          = stg2_inc_r;\n\t  stg3_inc2init_val = stg3_inc2init_val_r;\n\t  stg3_dec2init_val = stg3_dec2init_val_r;\n\t  stg3_dec_req      = stg3_dec_req_r;\n\t  stg3_inc_req      = stg3_inc_req_r;\n\t  stg2_inc_req      = stg2_inc_req_r;\n\t  stg2_dec_req      = stg2_dec_req_r;\n\t  stg3_init_dec     = stg3_init_dec_r;\n\t  done              = done_r;\n\n\t\n\t  case(lim_state)\n\t    IDLE: begin\n\t      if (lim_start && !lim_start_r) begin\n                lim_nxt_state = INIT;\n                stg3_dec      = 1'b1;\n                stg2_inc      = 1'b1;\n                stg3_init_dec = 1'b1;\n                done          = 1'b0;\n\t      end\n\t      \n              else if (oclkdelay_calib_done && !oclkdelay_calib_done_r && (BYPASS_COMPLEX_OCAL == \"FALSE\")) begin\n                done          = 1'b0;\n              end\n\t    end\n\t    INIT: begin\n\t      ktap_right     = 1'b1;\n\t\t  \n\t\t  if (wait_cnt_done)\n  \t        lim_nxt_state  = STAGE2_TAP_CHK;\n\t    end\n\t    \n\t    WAIT_WR_REQ: begin\n\t      write_request  = 1'b1;\n\t      if (wait_cnt_done) begin\n\t  \t    poc_ready      = 1'b1;\n\t  \t    lim_nxt_state  = WAIT_POC_DONE;\n\t  \t  end\n\t    end\n\t    \n\t    WAIT_POC_DONE: begin\n\t  \t  if (poc2lim_detect_done) begin\n\t  \t    write_request  = 1'b0;\n\t\t\tpoc_ready      = 1'b0;\n\t  \t    lim_nxt_state  = WAIT_STG3;\n\t  \t  end\n\t    end\n\t    \n\t    WAIT_STG3: begin\n\t      if (wait_cnt_done) begin\n\t  \t    if (stg3_dec_r) begin\n\t  \t    \n\t  \t      if ((stg3_tap_cnt > 'd0) && (mmcm_sub_dec < TDQSS_LIM_MMCM_TAPS))\n\t  \t        lim_nxt_state  = STAGE3_DEC;\n\t  \t\t  else begin\n\t  \t\t    stg3_dec          = 1'b0;\n\t  \t\t    stg3_inc2init_val = 1'b1;\n\t  \t\t    lim_nxt_state     = STAGE3_INC;\n\t  \t\t  end\n\t  \t    end else begin \n\t  \t    \n\t  \t      if ((stg3_tap_cnt < 'd63) && (mmcm_sub_inc < TDQSS_LIM_MMCM_TAPS))\n\t  \t        lim_nxt_state  = STAGE3_INC;\n\t  \t\t  else begin\n\t  \t\t    stg3_dec2init_val = 1'b1;\n                lim_nxt_state  = STAGE3_DEC;\n              end\n            end\t\t\t\n\t  \t  end\n\t    end\n\t    STAGE3_INC: begin\n\t      stg3_inc_req   = 1'b1;\n\t  \t  lim_nxt_state  = STG3_INCDEC_WAIT;\n\t    end\n\t    STAGE3_DEC: begin\n\t      stg3_dec_req   = 1'b1;   \n\t  \t  lim_nxt_state  = STG3_INCDEC_WAIT;\n\t    end\n\t    \n\t    STG3_INCDEC_WAIT: begin\n\t      stg3_dec_req   = 1'b0;\n\t  \t  stg3_inc_req   = 1'b0;\n\t      if (!stg3_dec_req_r && !stg3_inc_req_r && po_rdy) begin\n\t\t    if (stg3_init_dec_r) begin\n\t\t\t  \n\t\t\t  if (stg3_tap_cnt > stg3_dec_val)\n\t\t\t    lim_nxt_state  = STAGE3_DEC;\n\t\t\t  else begin\n\t\t\t    lim_nxt_state  = WAIT_WR_REQ;\n\t\t\t\tstg3_init_dec  = 1'b0;\n\t\t\t  end\n\t        end else if (stg3_dec2init_val_r) begin \n\t\t\t  if (stg3_tap_cnt > stg3_init_val)\n\t  \t        lim_nxt_state  = STAGE3_DEC;\n\t\t\t  else\n\t\t\t    lim_nxt_state  = STAGE2_TAP_CHK;\n\t  \t    end else if (stg3_inc2init_val_r) begin\n\t\t\t  if (stg3_tap_cnt < stg3_inc_val)\n\t  \t        lim_nxt_state  = STAGE3_INC;\n\t\t\t  else\n\t\t\t    lim_nxt_state  = STAGE2_TAP_CHK;\n\t  \t    end else begin\n\t  \t      lim_nxt_state  = WAIT_WR_REQ;\n\t\t\tend\n\t  \t  end\n\t    end\n\t    \n\t    STAGE2_TAP_CHK: begin\n\t      if (stg3_dec2init_val_r) begin\n\t\t    \n\t  \t    if (stg2_tap_cnt < wl_po_fine_cnt)\n\t  \t      lim_nxt_state  = STAGE2_INC;\n\t        else begin\n\t          lim_nxt_state     = PRECH_REQUEST;\t  \t\t  \n\t  \t    end\n\t  \t  end else if (stg3_inc2init_val_r) begin\n\t\t    \n\t  \t    if (stg2_tap_cnt > 'd0)\n\t  \t      lim_nxt_state  = STAGE2_DEC;\n\t  \t    else begin\n\t  \t      lim_nxt_state     = PRECH_REQUEST;\n\t  \t\t  stg3_inc2init_val = 1'b0;\n\t  \t    end\n\t\t  end else if (stg2_inc_r && (stg2_tap_cnt < 'd63)) begin\n\t\t    \n\t  \t    lim_nxt_state  = STAGE2_INC;\n          end else begin\n            lim_nxt_state  = STG3_INCDEC_WAIT;\n\t\t\tstg2_inc       = 1'b0;\n\t\t  end\n\t    end\n\t    STAGE2_INC: begin\n\t      stg2_inc_req = 1'b1;\n\t  \t  lim_nxt_state  = STG2_INCDEC_WAIT;\n\t    end\n\t    STAGE2_DEC: begin\n\t      stg2_dec_req = 1'b1;\n\t  \t  lim_nxt_state  = STG2_INCDEC_WAIT;\n\t    end\n\t    \n\t    STG2_INCDEC_WAIT: begin\n\t      stg2_inc_req = 1'b0;\n\t  \t  stg2_dec_req = 1'b0;\n\t  \t  if (!stg2_inc_req_r && !stg2_dec_req_r && po_rdy)\n\t  \t    lim_nxt_state  = STAGE2_TAP_CHK;\n\t    end\n\t\tPRECH_REQUEST: begin\n\t\t  prech_req = 1'b1;\n\t\t  if (prech_done) begin\n\t\t    prech_req       = 1'b0;\n\t\t    if (stg3_dec2init_val_r)\n\t\t\t  lim_nxt_state = LIMIT_DONE;\n\t\t\telse\n\t\t      lim_nxt_state = WAIT_WR_REQ;\n\t\t  end\n\t\tend\n\t    LIMIT_DONE: begin\n\t      done              = 1'b1;\n\t  \t  ktap_right        = 1'b0;\n\t\t  stg3_dec2init_val = 1'b0;\n\t\t  lim_nxt_state     = IDLE;\n\t    end\n\t    default: begin\n\t      lim_nxt_state = IDLE;\n\t    end\n\t  endcase\n  end",
        "  always @(posedge clk) begin\n    if (rst) begin\n\t  stg3_right_lim       <= #TCQ 'd0;\n\t  cmplx_stg3_right_lim <= #TCQ 'd0;\n\t  simp_stg3_right_lim <= #TCQ 'd0;\n\tend else if (stg3_dec2init_val_r && !stg3_dec2init_val_r1) begin\n\t  stg3_right_lim <= #TCQ stg3_tap_cnt;\n\t  if (oclkdelay_calib_done)\n\t    cmplx_stg3_right_lim[oclkdelay_calib_cnt*6+:6] <= #TCQ stg3_tap_cnt;\n\t  else\n\t    simp_stg3_right_lim[oclkdelay_calib_cnt*6+:6] <= #TCQ stg3_tap_cnt;\n\tend else if (lim_start && !lim_start_r)\n\t  stg3_right_lim <= #TCQ 'd0;\n  end  ",
        "  always @(posedge clk) begin\n    if (rst) begin\n\t  stg3_left_lim       <= #TCQ 'd0;\n\t  simp_stg3_left_lim  <= #TCQ 'd0;\n\t  cmplx_stg3_left_lim <= #TCQ 'd0;\n\tend else if (stg3_inc2init_val_r && !stg3_inc2init_val_r1) begin\n\t  stg3_left_lim <= #TCQ stg3_tap_cnt;\n\t  if (oclkdelay_calib_done)\n\t    cmplx_stg3_left_lim[oclkdelay_calib_cnt*6+:6] <= #TCQ stg3_tap_cnt;\n\t  else\n\t    simp_stg3_left_lim[oclkdelay_calib_cnt*6+:6] <= #TCQ stg3_tap_cnt;\n\tend else if (lim_start && !lim_start_r)\n\t  stg3_left_lim <= #TCQ 'd0;\n  end",
        "  always @(posedge clk) begin\n    if (rst) begin\n\t  mmcm_current    <= #TCQ 'd0;\n\tend else if (stg3_dec_r) begin\n\t  if (stg3_tap_cnt == stg3_dec_val)\n\t    mmcm_current <= #TCQ mmcm_init_trail;\n\t  else\n\t    mmcm_current <= #TCQ poc2lim_rise_align_taps_lead;\n\tend else begin\n\t  if (stg3_tap_cnt == stg3_inc_val)\n\t    mmcm_current <= #TCQ mmcm_init_lead;\n\t  else\n\t    mmcm_current <= #TCQ poc2lim_rise_align_taps_trail;\n\tend \n  end",
        "  always @(posedge clk) begin\n    if (rst) begin\n\t  mmcm_init_trail <= #TCQ 'd0;\n\t  mmcm_init_lead  <= #TCQ 'd0;\n\tend else if (poc2lim_detect_done && !detect_done_r) begin\n\t  if (stg3_tap_cnt == stg3_dec_val)\n\t    mmcm_init_trail <= #TCQ poc2lim_rise_align_taps_trail;\n\t  if (stg3_tap_cnt == stg3_inc_val)\n\t    mmcm_init_lead  <= #TCQ poc2lim_rise_align_taps_lead;\n\tend  \n  end",
        "  always @(posedge clk) begin\n    if (rst)\n\t  stg2_tap_cnt <= #TCQ 'd0;\n\telse if ((lim_state == IDLE) || (lim_state == INIT))\n\t  stg2_tap_cnt <= #TCQ wl_po_fine_cnt;\n\telse if (lim_state == STAGE2_INC)\n\t  stg2_tap_cnt <= #TCQ stg2_tap_cnt + 1;\n\telse if (lim_state == STAGE2_DEC)\n\t  stg2_tap_cnt <= #TCQ stg2_tap_cnt - 1;\n  end",
        "  always @(posedge clk) begin\n    if (rst)\n\t  stg3_tap_cnt <= #TCQ stg3_init_val;\n\telse if ((lim_state == IDLE) || (lim_state == INIT))\n\t  stg3_tap_cnt <= #TCQ stg3_init_val;\n\telse if (lim_state == STAGE3_INC)\n\t  stg3_tap_cnt <= #TCQ stg3_tap_cnt + 1;\n\telse if (lim_state == STAGE3_DEC)\n\t  stg3_tap_cnt <= #TCQ stg3_tap_cnt - 1;\n  end",
        "  always @(posedge clk) begin\n    if (rst) begin\n\t  lim_state           <= #TCQ IDLE;\n\t  lim_start_r         <= #TCQ 1'b0;\n\t  ktap_right_r        <= #TCQ 1'b0;\n\t  write_request_r     <= #TCQ 1'b0;\n\t  prech_req_r         <= #TCQ 1'b0;\n\t  poc_ready_r         <= #TCQ 1'b0;\n\t  detect_done_r       <= #TCQ 1'b0;\n\t  stg3_dec_r          <= #TCQ 1'b0;\n\t  stg2_inc_r          <= #TCQ 1'b0;\n\t  stg3_inc2init_val_r <= #TCQ 1'b0;\n\t  stg3_inc2init_val_r1<= #TCQ 1'b0;\n\t  stg3_dec2init_val_r <= #TCQ 1'b0;\n\t  stg3_dec2init_val_r1<= #TCQ 1'b0;\n\t  stg3_dec_req_r      <= #TCQ 1'b0;\n\t  stg3_inc_req_r      <= #TCQ 1'b0;\n\t  stg2_dec_req_r      <= #TCQ 1'b0;\n\t  stg2_inc_req_r      <= #TCQ 1'b0;\n\t  done_r              <= #TCQ 1'b0;\n\t  stg3_dec_val        <= #TCQ 'd0;\n\t  stg3_inc_val        <= #TCQ 'd0;\n\t  stg3_init_dec_r     <= #TCQ 1'b0;\n\tend else begin\n\t  lim_state           <= #TCQ lim_nxt_state;\n\t  lim_start_r         <= #TCQ lim_start;\n\t  ktap_right_r        <= #TCQ ktap_right;\n\t  write_request_r     <= #TCQ write_request;\n\t  prech_req_r         <= #TCQ prech_req;\n\t  poc_ready_r         <= #TCQ poc_ready;\n\t  detect_done_r       <= #TCQ poc2lim_detect_done;\n\t  stg3_dec_r          <= #TCQ stg3_dec;\n\t  stg2_inc_r          <= #TCQ stg2_inc;\n\t  stg3_inc2init_val_r <= #TCQ stg3_inc2init_val;\n\t  stg3_inc2init_val_r1<= #TCQ stg3_inc2init_val_r;\n\t  stg3_dec2init_val_r <= #TCQ stg3_dec2init_val;\n\t  stg3_dec2init_val_r1<= #TCQ stg3_dec2init_val_r;\n\t  stg3_dec_req_r      <= #TCQ stg3_dec_req;\n\t  stg3_inc_req_r      <= #TCQ stg3_inc_req;\n\t  stg2_dec_req_r      <= #TCQ stg2_dec_req;\n\t  stg2_inc_req_r      <= #TCQ stg2_inc_req;\n\t  stg3_init_dec_r     <= #TCQ stg3_init_dec;\n\t  done_r              <= #TCQ done;\n\t  if (stg3_init_val > (('d63 - wl_po_fine_cnt)/2))\n\t    stg3_dec_val      <= #TCQ (stg3_init_val - ('d63 - wl_po_fine_cnt)/2);\n\t  else\n\t    stg3_dec_val      <= #TCQ 'd0;\n\t  if (stg3_init_val < 'd63 - ((wl_po_fine_cnt)/2))\n\t    stg3_inc_val      <= #TCQ (stg3_init_val + (wl_po_fine_cnt)/2);\n\t  else\n\t    stg3_inc_val      <= #TCQ 'd63;\n\tend\n  end",
        "  always @(posedge clk) begin\n    if (rst)\n\t  stg3_init_val <= #TCQ oclkdelay_init_val;\n\telse if (oclkdelay_calib_done)\n\t  stg3_init_val <= #TCQ simp_stg3_final_sel;\n\telse\n\t  stg3_init_val <= #TCQ oclkdelay_init_val;\n  end",
        "  always @(posedge clk) begin\n    if (rst)\n      oclkdelay_calib_done_r <= #TCQ 1'b0;\n    else\n      oclkdelay_calib_done_r <= #TCQ oclkdelay_calib_done;\n  end",
        "  always @(posedge clk) begin\n    if (!wait_cnt_en_r) begin\n      wait_cnt_r      <= #TCQ 'b0;\n      wait_cnt_done   <= #TCQ 1'b0;\n    end else begin\n      if (wait_cnt_r != WAIT_CNT - 1) begin\n        wait_cnt_r     <= #TCQ wait_cnt_r + 1;\n        wait_cnt_done  <= #TCQ 1'b0;\n      end else begin\n        wait_cnt_r     <= #TCQ 'b0;        \n        wait_cnt_done  <= #TCQ 1'b1;\n      end\n    end\n  end",
        "  always @(posedge clk) begin\n    if ((lim_state == WAIT_WR_REQ) ||\n        (lim_state == WAIT_STG3) ||\n\t\t(lim_state == INIT))\n      wait_cnt_en_r <= #TCQ 1'b1;\n    else\n      wait_cnt_en_r <= #TCQ 1'b0;\n  end",
        "  assign lim2init_write_request    = write_request_r;\n  assign lim2init_prech_req        = prech_req_r;\n  assign lim2poc_ktap_right        = ktap_right_r;\n  assign lim2poc_rdy               = poc_ready_r;\n  assign lim2ocal_stg3_left_lim    = stg3_left_lim;\n  assign lim2ocal_stg3_right_lim   = stg3_right_lim;\n  assign lim2stg3_dec              = stg3_dec_req_r;\n  assign lim2stg3_inc              = stg3_inc_req_r;\n  assign lim2stg2_dec              = stg2_dec_req_r;\n  assign lim2stg2_inc              = stg2_inc_req_r;\n  assign lim_done                  = done_r;",
        "  assign dbg_ocd_lim[0+:DQS_WIDTH*6]    = simp_stg3_left_lim[DQS_WIDTH*6-1:0];\n  assign dbg_ocd_lim[54+:DQS_WIDTH*6]   = simp_stg3_right_lim[DQS_WIDTH*6-1:0];\n  assign dbg_ocd_lim[255:108]           = 'd0;",
        "  function [TAPCNTRWIDTH:0] mod_sub (input [TAPCNTRWIDTH-1:0] a, \n                                     input [TAPCNTRWIDTH-1:0] b, \n                                     input integer base); \n  begin\n    mod_sub = (a>=b) ? a-b : a+base[TAPCNTRWIDTH-1:0]-b;\n  end\n  endfunction "
    ]
}