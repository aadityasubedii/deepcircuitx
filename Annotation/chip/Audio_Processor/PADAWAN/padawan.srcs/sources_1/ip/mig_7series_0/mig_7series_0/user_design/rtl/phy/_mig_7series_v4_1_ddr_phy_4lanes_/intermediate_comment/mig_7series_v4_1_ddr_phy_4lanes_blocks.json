{
    "line_num": [
        [
            2046,
            2053
        ],
        [
            2035,
            2042
        ],
        [
            1931,
            2030
        ],
        [
            1827,
            1926
        ],
        [
            1735,
            1759
        ],
        [
            1646,
            2032
        ],
        [
            1631,
            1644
        ],
        [
            1628,
            1630
        ],
        [
            1556,
            1626
        ],
        [
            1483,
            1551
        ],
        [
            1344,
            1479
        ],
        [
            1206,
            1342
        ],
        [
            1069,
            1204
        ],
        [
            930,
            1067
        ],
        [
            921,
            924
        ],
        [
            905,
            919
        ],
        [
            889,
            903
        ],
        [
            873,
            887
        ],
        [
            857,
            871
        ],
        [
            843,
            855
        ],
        [
            829,
            841
        ],
        [
            815,
            827
        ],
        [
            800,
            814
        ],
        [
            774,
            1480
        ],
        [
            772,
            772
        ],
        [
            765,
            770
        ],
        [
            756,
            763
        ],
        [
            751,
            755
        ],
        [
            733,
            744
        ],
        [
            722,
            731
        ],
        [
            715,
            720
        ],
        [
            714,
            714
        ],
        [
            711,
            711
        ],
        [
            705,
            709
        ],
        [
            700,
            704
        ],
        [
            674,
            698
        ],
        [
            638,
            649
        ]
    ],
    "blocks": [
        "generate\nif ( GENERATE_IDELAYCTRL == \"TRUE\")\nIDELAYCTRL idelayctrl (\n    .RDY                (),\n    .REFCLK             (idelayctrl_refclk),\n    .RST                (rst)\n);\nendgenerate",
        "PHASER_REF phaser_ref_i(\n\n .LOCKED (ref_dll_lock),\n .CLKIN  (freq_refclk),\n .PWRDWN (1'b0),\n .RST    ( ! pll_lock)\n\n);",
        "    case (calib_sel[1:0])\n    0:  begin\n        A_pi_fine_enable          = pi_fine_enable;\n        A_pi_fine_inc             = pi_fine_inc;\n        A_pi_counter_load_en      = pi_counter_load_en;\n        A_pi_counter_read_en      = pi_counter_read_en;\n        A_pi_counter_load_val     = pi_counter_load_val;\n        A_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        A_po_fine_enable          = po_fine_enable;\n        A_po_coarse_enable        = po_coarse_enable;\n        A_po_fine_inc             = po_fine_inc;\n        A_po_coarse_inc           = po_coarse_inc;\n        A_po_counter_load_en      = po_counter_load_en;\n        A_po_counter_read_en      = po_counter_read_en;\n        A_po_counter_load_val     = po_counter_load_val;\n    A_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        A_idelay_ce               = idelay_ce;\n        A_idelay_ld               = idelay_ld;\n        A_fine_delay              = fine_delay ;\n        A_fine_delay_sel          = fine_delay_sel;\n\n     end\n    1: begin\n        B_pi_fine_enable          = pi_fine_enable;\n        B_pi_fine_inc             = pi_fine_inc;\n        B_pi_counter_load_en      = pi_counter_load_en;\n        B_pi_counter_read_en      = pi_counter_read_en;\n        B_pi_counter_load_val     = pi_counter_load_val;\n        B_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        B_po_fine_enable          = po_fine_enable;\n        B_po_coarse_enable        = po_coarse_enable;\n        B_po_fine_inc             = po_fine_inc;\n        B_po_coarse_inc           = po_coarse_inc;\n        B_po_counter_load_en      = po_counter_load_en;\n        B_po_counter_read_en      = po_counter_read_en;\n        B_po_counter_load_val     = po_counter_load_val;\n    B_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        B_idelay_ce               = idelay_ce;\n        B_idelay_ld               = idelay_ld;\n        B_fine_delay              = fine_delay ;\n        B_fine_delay_sel          = fine_delay_sel;\n\n     end\n\n    2: begin\n        C_pi_fine_enable          = pi_fine_enable;\n        C_pi_fine_inc             = pi_fine_inc;\n        C_pi_counter_load_en      = pi_counter_load_en;\n        C_pi_counter_read_en      = pi_counter_read_en;\n        C_pi_counter_load_val     = pi_counter_load_val;\n        C_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        C_po_fine_enable          = po_fine_enable;\n        C_po_coarse_enable        = po_coarse_enable;\n        C_po_fine_inc             = po_fine_inc;\n        C_po_coarse_inc           = po_coarse_inc;\n        C_po_counter_load_en      = po_counter_load_en;\n        C_po_counter_read_en      = po_counter_read_en;\n        C_po_counter_load_val     = po_counter_load_val;\n    C_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        C_idelay_ce               = idelay_ce;\n        C_idelay_ld               = idelay_ld;\n        C_fine_delay              = fine_delay ;\n        C_fine_delay_sel          = fine_delay_sel;\n\n     end\n\n    3: begin\n        D_pi_fine_enable          = pi_fine_enable;\n        D_pi_fine_inc             = pi_fine_inc;\n        D_pi_counter_load_en      = pi_counter_load_en;\n        D_pi_counter_read_en      = pi_counter_read_en;\n        D_pi_counter_load_val     = pi_counter_load_val;\n        D_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        D_po_fine_enable          = po_fine_enable;\n        D_po_coarse_enable        = po_coarse_enable;\n        D_po_fine_inc             = po_fine_inc;\n        D_po_coarse_inc           = po_coarse_inc;\n        D_po_counter_load_en      = po_counter_load_en;\n        D_po_counter_load_val     = po_counter_load_val;\n        D_po_counter_read_en      = po_counter_read_en;\n    D_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        D_idelay_ce               = idelay_ce;\n        D_idelay_ld               = idelay_ld;\n        D_fine_delay              = fine_delay ;\n        D_fine_delay_sel          = fine_delay_sel;\n\n     end\n    endcase",
        "    end else\n    if (calib_in_common) begin\n       \n       \n        if ( !calib_zero_lanes[0] && (! calib_zero_ctrl || DATA_CTL_N[0])) begin\n            A_pi_fine_enable          = pi_fine_enable;\n            A_pi_fine_inc             = pi_fine_inc;\n            A_pi_counter_load_en      = pi_counter_load_en;\n            A_pi_counter_read_en      = pi_counter_read_en;\n            A_pi_counter_load_val     = pi_counter_load_val;\n        A_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            A_po_fine_enable          = po_fine_enable;\n            A_po_coarse_enable        = po_coarse_enable;\n            A_po_fine_inc             = po_fine_inc;\n            A_po_coarse_inc           = po_coarse_inc;\n            A_po_counter_load_en      = po_counter_load_en;\n            A_po_counter_read_en      = po_counter_read_en;\n            A_po_counter_load_val     = po_counter_load_val;\n            A_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            A_idelay_ce               = idelay_ce;\n            A_idelay_ld               = idelay_ld;\n            A_fine_delay              = fine_delay ;\n            A_fine_delay_sel          = fine_delay_sel;\n        end\n\n        if ( B_mux_ctrl) begin\n            B_pi_fine_enable          = pi_fine_enable;\n            B_pi_fine_inc             = pi_fine_inc;\n            B_pi_counter_load_en      = pi_counter_load_en;\n            B_pi_counter_read_en      = pi_counter_read_en;\n            B_pi_counter_load_val     = pi_counter_load_val;\n        B_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            B_po_fine_enable          = po_fine_enable;\n            B_po_coarse_enable        = po_coarse_enable;\n            B_po_fine_inc             = po_fine_inc;\n            B_po_coarse_inc           = po_coarse_inc;\n            B_po_counter_load_en      = po_counter_load_en;\n            B_po_counter_read_en      = po_counter_read_en;\n            B_po_counter_load_val     = po_counter_load_val;\n            B_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            B_idelay_ce               = idelay_ce;\n            B_idelay_ld               = idelay_ld;\n            B_fine_delay              = fine_delay ;\n            B_fine_delay_sel          = fine_delay_sel;\n         end\n\n        if ( C_mux_ctrl) begin\n            C_pi_fine_enable          = pi_fine_enable;\n            C_pi_fine_inc             = pi_fine_inc;\n            C_pi_counter_load_en      = pi_counter_load_en;\n            C_pi_counter_read_en      = pi_counter_read_en;\n            C_pi_counter_load_val     = pi_counter_load_val;\n        C_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            C_po_fine_enable          = po_fine_enable;\n            C_po_coarse_enable        = po_coarse_enable;\n            C_po_fine_inc             = po_fine_inc;\n            C_po_coarse_inc           = po_coarse_inc;\n            C_po_counter_load_en      = po_counter_load_en;\n            C_po_counter_read_en      = po_counter_read_en;\n            C_po_counter_load_val     = po_counter_load_val;\n            C_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            C_idelay_ce               = idelay_ce;\n            C_idelay_ld               = idelay_ld;\n            C_fine_delay              = fine_delay ;\n            C_fine_delay_sel          = fine_delay_sel;\n        end\n\n        if ( D_mux_ctrl) begin\n            D_pi_fine_enable          = pi_fine_enable;\n            D_pi_fine_inc             = pi_fine_inc;\n            D_pi_counter_load_en      = pi_counter_load_en;\n            D_pi_counter_read_en      = pi_counter_read_en;\n            D_pi_counter_load_val     = pi_counter_load_val;\n        D_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            D_po_fine_enable          = po_fine_enable;\n            D_po_coarse_enable        = po_coarse_enable;\n            D_po_fine_inc             = po_fine_inc;\n            D_po_coarse_inc           = po_coarse_inc;\n            D_po_counter_load_en      = po_counter_load_en;\n            D_po_counter_read_en      = po_counter_read_en;\n            D_po_counter_load_val     = po_counter_load_val;\n            D_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            D_idelay_ce               = idelay_ce;\n            D_idelay_ld               = idelay_ld;\n            D_fine_delay              = fine_delay ;\n            D_fine_delay_sel          = fine_delay_sel;\n        end\n    end",
        "    if ( calib_sel[2]) begin\n    \n        A_pi_fine_enable          = 0;\n        A_pi_fine_inc             = 0;\n        A_pi_counter_load_en      = 0;\n        A_pi_counter_read_en      = 0;\n        A_pi_counter_load_val     = 0;\n    A_pi_rst_dqs_find         = 0;\n\n\n        A_po_fine_enable          = 0;\n        A_po_coarse_enable        = 0;\n        A_po_fine_inc             = 0;\n        A_po_coarse_inc           = 0;\n        A_po_counter_load_en      = 0;\n        A_po_counter_read_en      = 0;\n        A_po_counter_load_val     = 0;\n    A_po_sel_fine_oclk_delay  = 0;\n\n        A_idelay_ce               = 0;\n        A_idelay_ld               = 0;\n        A_fine_delay              = 0;\n        A_fine_delay_sel          = 0;\n\n        B_pi_fine_enable          = 0;",
        "always @(*) begin\n        A_pi_fine_enable          = 0;\n        A_pi_fine_inc             = 0;\n        A_pi_counter_load_en      = 0;\n        A_pi_counter_read_en      = 0;\n        A_pi_counter_load_val     = 0;\n        A_pi_rst_dqs_find         = 0;\n\n\n        A_po_fine_enable          = 0;\n        A_po_coarse_enable        = 0;\n        A_po_fine_inc             = 0;\n        A_po_coarse_inc           = 0;\n        A_po_counter_load_en      = 0;\n        A_po_counter_read_en      = 0;\n        A_po_counter_load_val     = 0;\n        A_po_sel_fine_oclk_delay  = 0;\n\n        A_idelay_ce               = 0;\n        A_idelay_ld               = 0;\n        A_fine_delay              = 0;\n        A_fine_delay_sel          = 0;\n\n        B_pi_fine_enable          = 0;\n        B_pi_fine_inc   = 0;\n        B_pi_counter_load_en      = 0;\n        B_pi_counter_read_en      = 0;\n        B_pi_counter_load_val     = 0;\n        B_pi_rst_dqs_find         = 0;\n\n\n        B_po_fine_enable          = 0;\n        B_po_coarse_enable        = 0;\n        B_po_fine_inc             = 0;\n        B_po_coarse_inc           = 0;\n        B_po_counter_load_en      = 0;\n        B_po_counter_read_en      = 0;\n        B_po_counter_load_val     = 0;\n        B_po_sel_fine_oclk_delay  = 0;\n\n        B_idelay_ce               = 0;\n        B_idelay_ld               = 0;\n        B_fine_delay              = 0;\n        B_fine_delay_sel          = 0;\n\n        C_pi_fine_enable    = 0;\n        C_pi_fine_inc   = 0;\n        C_pi_counter_load_en      = 0;\n        C_pi_counter_read_en      = 0;\n        C_pi_counter_load_val     = 0;\n        C_pi_rst_dqs_find         = 0;\n\n\n        C_po_fine_enable          = 0;\n        C_po_coarse_enable        = 0;\n        C_po_fine_inc             = 0;\n        C_po_coarse_inc           = 0;\n        C_po_counter_load_en      = 0;\n        C_po_counter_read_en      = 0;\n        C_po_counter_load_val     = 0;\n        C_po_sel_fine_oclk_delay  = 0;\n\n        C_idelay_ce               = 0;\n        C_idelay_ld               = 0;\n        C_fine_delay              = 0;\n        C_fine_delay_sel          = 0;\n\n        D_pi_fine_enable          = 0;\n        D_pi_fine_inc             = 0;\n        D_pi_counter_load_en      = 0;\n        D_pi_counter_read_en      = 0;\n        D_pi_counter_load_val     = 0;\n        D_pi_rst_dqs_find         = 0;\n\n\n        D_po_fine_enable          = 0;\n        D_po_coarse_enable        = 0;\n        D_po_fine_inc             = 0;\n        D_po_coarse_inc           = 0;\n        D_po_counter_load_en      = 0;\n        D_po_counter_read_en      = 0;\n        D_po_counter_load_val     = 0;\n        D_po_sel_fine_oclk_delay  = 0;\n\n        D_idelay_ce               = 0;\n        D_idelay_ld               = 0;\n        D_fine_delay              = 0;\n        D_fine_delay_sel          = 0;\n\n    if ( calib_sel[2]) begin\n    \n        A_pi_fine_enable          = 0;\n        A_pi_fine_inc             = 0;\n        A_pi_counter_load_en      = 0;\n        A_pi_counter_read_en      = 0;\n        A_pi_counter_load_val     = 0;\n    A_pi_rst_dqs_find         = 0;\n\n\n        A_po_fine_enable          = 0;\n        A_po_coarse_enable        = 0;\n        A_po_fine_inc             = 0;\n        A_po_coarse_inc           = 0;\n        A_po_counter_load_en      = 0;\n        A_po_counter_read_en      = 0;\n        A_po_counter_load_val     = 0;\n    A_po_sel_fine_oclk_delay  = 0;\n\n        A_idelay_ce               = 0;\n        A_idelay_ld               = 0;\n        A_fine_delay              = 0;\n        A_fine_delay_sel          = 0;\n\n        B_pi_fine_enable          = 0;\n        B_pi_fine_inc             = 0;\n        B_pi_counter_load_en      = 0;\n        B_pi_counter_read_en      = 0;\n        B_pi_counter_load_val     = 0;\n    B_pi_rst_dqs_find         = 0;\n\n\n        B_po_fine_enable          = 0;\n        B_po_coarse_enable        = 0;\n        B_po_fine_inc             = 0;\n        B_po_coarse_inc           = 0;\n        B_po_counter_load_en      = 0;\n        B_po_counter_read_en      = 0;\n        B_po_counter_load_val     = 0;\n    B_po_sel_fine_oclk_delay  = 0;\n\n        B_idelay_ce               = 0;\n        B_idelay_ld               = 0;\n        B_fine_delay              = 0;\n        B_fine_delay_sel          = 0;\n\n\n        C_pi_fine_enable          = 0;\n        C_pi_fine_inc             = 0;\n        C_pi_counter_load_en      = 0;\n        C_pi_counter_read_en      = 0;\n        C_pi_counter_load_val     = 0;\n    C_pi_rst_dqs_find         = 0;\n\n\n        C_po_fine_enable          = 0;\n        C_po_coarse_enable        = 0;\n        C_po_fine_inc             = 0;\n        C_po_coarse_inc           = 0;\n        C_po_counter_load_en      = 0;\n        C_po_counter_read_en      = 0;\n        C_po_counter_load_val     = 0;\n    C_po_sel_fine_oclk_delay  = 0;\n\n        C_idelay_ce               = 0;\n        C_idelay_ld               = 0;\n        C_fine_delay              = 0;\n        C_fine_delay_sel          = 0;\n\n\n        D_pi_fine_enable          = 0;\n        D_pi_fine_inc             = 0;\n        D_pi_counter_load_en      = 0;\n        D_pi_counter_read_en      = 0;\n        D_pi_counter_load_val     = 0;\n    D_pi_rst_dqs_find         = 0;\n\n\n        D_po_fine_enable          = 0;\n        D_po_coarse_enable        = 0;\n        D_po_fine_inc             = 0;\n        D_po_coarse_inc           = 0;\n        D_po_counter_load_en      = 0;\n        D_po_counter_read_en      = 0;\n        D_po_counter_load_val     = 0;\n    D_po_sel_fine_oclk_delay  = 0;\n\n        D_idelay_ce               = 0;\n        D_idelay_ld               = 0;\n        D_fine_delay              = 0;\n        D_fine_delay_sel          = 0;\n\n    end else\n    if (calib_in_common) begin\n       \n       \n        if ( !calib_zero_lanes[0] && (! calib_zero_ctrl || DATA_CTL_N[0])) begin\n            A_pi_fine_enable          = pi_fine_enable;\n            A_pi_fine_inc             = pi_fine_inc;\n            A_pi_counter_load_en      = pi_counter_load_en;\n            A_pi_counter_read_en      = pi_counter_read_en;\n            A_pi_counter_load_val     = pi_counter_load_val;\n        A_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            A_po_fine_enable          = po_fine_enable;\n            A_po_coarse_enable        = po_coarse_enable;\n            A_po_fine_inc             = po_fine_inc;\n            A_po_coarse_inc           = po_coarse_inc;\n            A_po_counter_load_en      = po_counter_load_en;\n            A_po_counter_read_en      = po_counter_read_en;\n            A_po_counter_load_val     = po_counter_load_val;\n            A_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            A_idelay_ce               = idelay_ce;\n            A_idelay_ld               = idelay_ld;\n            A_fine_delay              = fine_delay ;\n            A_fine_delay_sel          = fine_delay_sel;\n        end\n\n        if ( B_mux_ctrl) begin\n            B_pi_fine_enable          = pi_fine_enable;\n            B_pi_fine_inc             = pi_fine_inc;\n            B_pi_counter_load_en      = pi_counter_load_en;\n            B_pi_counter_read_en      = pi_counter_read_en;\n            B_pi_counter_load_val     = pi_counter_load_val;\n        B_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            B_po_fine_enable          = po_fine_enable;\n            B_po_coarse_enable        = po_coarse_enable;\n            B_po_fine_inc             = po_fine_inc;\n            B_po_coarse_inc           = po_coarse_inc;\n            B_po_counter_load_en      = po_counter_load_en;\n            B_po_counter_read_en      = po_counter_read_en;\n            B_po_counter_load_val     = po_counter_load_val;\n            B_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            B_idelay_ce               = idelay_ce;\n            B_idelay_ld               = idelay_ld;\n            B_fine_delay              = fine_delay ;\n            B_fine_delay_sel          = fine_delay_sel;\n         end\n\n        if ( C_mux_ctrl) begin\n            C_pi_fine_enable          = pi_fine_enable;\n            C_pi_fine_inc             = pi_fine_inc;\n            C_pi_counter_load_en      = pi_counter_load_en;\n            C_pi_counter_read_en      = pi_counter_read_en;\n            C_pi_counter_load_val     = pi_counter_load_val;\n        C_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            C_po_fine_enable          = po_fine_enable;\n            C_po_coarse_enable        = po_coarse_enable;\n            C_po_fine_inc             = po_fine_inc;\n            C_po_coarse_inc           = po_coarse_inc;\n            C_po_counter_load_en      = po_counter_load_en;\n            C_po_counter_read_en      = po_counter_read_en;\n            C_po_counter_load_val     = po_counter_load_val;\n            C_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            C_idelay_ce               = idelay_ce;\n            C_idelay_ld               = idelay_ld;\n            C_fine_delay              = fine_delay ;\n            C_fine_delay_sel          = fine_delay_sel;\n        end\n\n        if ( D_mux_ctrl) begin\n            D_pi_fine_enable          = pi_fine_enable;\n            D_pi_fine_inc             = pi_fine_inc;\n            D_pi_counter_load_en      = pi_counter_load_en;\n            D_pi_counter_read_en      = pi_counter_read_en;\n            D_pi_counter_load_val     = pi_counter_load_val;\n        D_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n            D_po_fine_enable          = po_fine_enable;\n            D_po_coarse_enable        = po_coarse_enable;\n            D_po_fine_inc             = po_fine_inc;\n            D_po_coarse_inc           = po_coarse_inc;\n            D_po_counter_load_en      = po_counter_load_en;\n            D_po_counter_read_en      = po_counter_read_en;\n            D_po_counter_load_val     = po_counter_load_val;\n            D_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n            D_idelay_ce               = idelay_ce;\n            D_idelay_ld               = idelay_ld;\n            D_fine_delay              = fine_delay ;\n            D_fine_delay_sel          = fine_delay_sel;\n        end\n    end\n    else begin\n    \n\n\n    case (calib_sel[1:0])\n    0:  begin\n        A_pi_fine_enable          = pi_fine_enable;\n        A_pi_fine_inc             = pi_fine_inc;\n        A_pi_counter_load_en      = pi_counter_load_en;\n        A_pi_counter_read_en      = pi_counter_read_en;\n        A_pi_counter_load_val     = pi_counter_load_val;\n        A_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        A_po_fine_enable          = po_fine_enable;\n        A_po_coarse_enable        = po_coarse_enable;\n        A_po_fine_inc             = po_fine_inc;\n        A_po_coarse_inc           = po_coarse_inc;\n        A_po_counter_load_en      = po_counter_load_en;\n        A_po_counter_read_en      = po_counter_read_en;\n        A_po_counter_load_val     = po_counter_load_val;\n    A_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        A_idelay_ce               = idelay_ce;\n        A_idelay_ld               = idelay_ld;\n        A_fine_delay              = fine_delay ;\n        A_fine_delay_sel          = fine_delay_sel;\n\n     end\n    1: begin\n        B_pi_fine_enable          = pi_fine_enable;\n        B_pi_fine_inc             = pi_fine_inc;\n        B_pi_counter_load_en      = pi_counter_load_en;\n        B_pi_counter_read_en      = pi_counter_read_en;\n        B_pi_counter_load_val     = pi_counter_load_val;\n        B_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        B_po_fine_enable          = po_fine_enable;\n        B_po_coarse_enable        = po_coarse_enable;\n        B_po_fine_inc             = po_fine_inc;\n        B_po_coarse_inc           = po_coarse_inc;\n        B_po_counter_load_en      = po_counter_load_en;\n        B_po_counter_read_en      = po_counter_read_en;\n        B_po_counter_load_val     = po_counter_load_val;\n    B_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        B_idelay_ce               = idelay_ce;\n        B_idelay_ld               = idelay_ld;\n        B_fine_delay              = fine_delay ;\n        B_fine_delay_sel          = fine_delay_sel;\n\n     end\n\n    2: begin\n        C_pi_fine_enable          = pi_fine_enable;\n        C_pi_fine_inc             = pi_fine_inc;\n        C_pi_counter_load_en      = pi_counter_load_en;\n        C_pi_counter_read_en      = pi_counter_read_en;\n        C_pi_counter_load_val     = pi_counter_load_val;\n        C_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        C_po_fine_enable          = po_fine_enable;\n        C_po_coarse_enable        = po_coarse_enable;\n        C_po_fine_inc             = po_fine_inc;\n        C_po_coarse_inc           = po_coarse_inc;\n        C_po_counter_load_en      = po_counter_load_en;\n        C_po_counter_read_en      = po_counter_read_en;\n        C_po_counter_load_val     = po_counter_load_val;\n    C_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        C_idelay_ce               = idelay_ce;\n        C_idelay_ld               = idelay_ld;\n        C_fine_delay              = fine_delay ;\n        C_fine_delay_sel          = fine_delay_sel;\n\n     end\n\n    3: begin\n        D_pi_fine_enable          = pi_fine_enable;\n        D_pi_fine_inc             = pi_fine_inc;\n        D_pi_counter_load_en      = pi_counter_load_en;\n        D_pi_counter_read_en      = pi_counter_read_en;\n        D_pi_counter_load_val     = pi_counter_load_val;\n        D_pi_rst_dqs_find         = pi_rst_dqs_find;\n\n\n        D_po_fine_enable          = po_fine_enable;\n        D_po_coarse_enable        = po_coarse_enable;\n        D_po_fine_inc             = po_fine_inc;\n        D_po_coarse_inc           = po_coarse_inc;\n        D_po_counter_load_en      = po_counter_load_en;\n        D_po_counter_load_val     = po_counter_load_val;\n        D_po_counter_read_en      = po_counter_read_en;\n    D_po_sel_fine_oclk_delay  = po_sel_fine_oclk_delay;\n\n        D_idelay_ce               = idelay_ce;\n        D_idelay_ld               = idelay_ld;\n        D_fine_delay              = fine_delay ;\n        D_fine_delay_sel          = fine_delay_sel;\n\n     end\n    endcase\n    end\nend",
        "generate\n  if (HIGHEST_LANE > 1)\n    assign B_mux_ctrl = ( !calib_zero_lanes[1] && ( ! calib_zero_ctrl || DATA_CTL_N[1]));\n  else\n    assign B_mux_ctrl = 0;\n  if (HIGHEST_LANE > 2)\n    assign C_mux_ctrl = ( !calib_zero_lanes[2] && (! calib_zero_ctrl || DATA_CTL_N[2]));\n  else\n    assign C_mux_ctrl = 0;\n  if (HIGHEST_LANE > 3)\n    assign D_mux_ctrl = ( !calib_zero_lanes[3] && ( ! calib_zero_ctrl || DATA_CTL_N[3]));\n  else\n    assign D_mux_ctrl = 0;\nendgenerate",
        "wire  B_mux_ctrl;\nwire  C_mux_ctrl;\nwire  D_mux_ctrl;",
        "always @(posedge phy_clk ) begin\n    case (calib_sel[1:0])\n    2'h0: begin\n       po_coarse_overflow <= #1 A_po_coarse_overflow;\n       po_fine_overflow <= #1 A_po_fine_overflow;\n       po_counter_read_val <= #1 A_po_counter_read_val;\n\n       pi_fine_overflow <= #1 A_pi_fine_overflow;\n       pi_counter_read_val<= #1 A_pi_counter_read_val;\n\n       pi_phase_locked  <= #1 A_pi_phase_locked;\n       if ( calib_in_common)\n           pi_dqs_found     <= #1 pi_dqs_found_any;\n       else\n           pi_dqs_found     <= #1 A_pi_dqs_found;\n       pi_dqs_out_of_range <= #1 A_pi_dqs_out_of_range;\n      end\n\n    2'h1: begin\n       po_coarse_overflow     <= #1 B_po_coarse_overflow;\n       po_fine_overflow       <= #1 B_po_fine_overflow;\n       po_counter_read_val    <= #1 B_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 B_pi_fine_overflow;\n       pi_counter_read_val    <= #1 B_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 B_pi_phase_locked;\n       if ( calib_in_common)\n          pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n          pi_dqs_found           <= #1 B_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 B_pi_dqs_out_of_range;\n       end\n\n    2'h2: begin\n       po_coarse_overflow     <= #1 C_po_coarse_overflow;\n       po_fine_overflow       <= #1 C_po_fine_overflow;\n       po_counter_read_val    <= #1 C_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 C_pi_fine_overflow;\n       pi_counter_read_val    <= #1 C_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 C_pi_phase_locked;\n       if ( calib_in_common)\n           pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n           pi_dqs_found           <= #1 C_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 C_pi_dqs_out_of_range;\n      end\n\n    2'h3: begin\n       po_coarse_overflow     <= #1 D_po_coarse_overflow;\n       po_fine_overflow       <= #1 D_po_fine_overflow;\n       po_counter_read_val    <= #1 D_po_counter_read_val;\n\n       pi_fine_overflow       <= #1 D_pi_fine_overflow;\n       pi_counter_read_val    <= #1 D_pi_counter_read_val;\n\n       pi_phase_locked        <= #1 D_pi_phase_locked;\n       if ( calib_in_common)\n          pi_dqs_found           <= #1 pi_dqs_found_any;\n       else\n          pi_dqs_found           <= #1 D_pi_dqs_found;\n       pi_dqs_out_of_range    <= #1 D_pi_dqs_out_of_range;\n\n       end\n     default: begin\n        po_coarse_overflow <= po_coarse_overflow;\n     end\n    endcase\nend",
        "assign phaser_ctl_bus[MSB_RANK_SEL_I : MSB_RANK_SEL_I - 7] = in_rank;\n\nPHY_CONTROL #(\n  .AO_WRLVL_EN          ( PC_AO_WRLVL_EN),\n  .AO_TOGGLE            ( PC_AO_TOGGLE),\n  .BURST_MODE           ( PC_BURST_MODE),\n  .CO_DURATION          ( PC_CO_DURATION ),\n  .CLK_RATIO            ( PC_CLK_RATIO),\n  .DATA_CTL_A_N         ( PC_DATA_CTL_A),\n  .DATA_CTL_B_N         ( PC_DATA_CTL_B),\n  .DATA_CTL_C_N         ( PC_DATA_CTL_C),\n  .DATA_CTL_D_N         ( PC_DATA_CTL_D),\n  .DI_DURATION          ( PC_DI_DURATION ),\n  .DO_DURATION          ( PC_DO_DURATION ),\n  .EVENTS_DELAY         ( PC_EVENTS_DELAY),\n  .FOUR_WINDOW_CLOCKS   ( PC_FOUR_WINDOW_CLOCKS),\n  .MULTI_REGION         ( PC_MULTI_REGION ),\n  .PHY_COUNT_ENABLE     ( PC_PHY_COUNT_EN),\n  .DISABLE_SEQ_MATCH    ( PC_DISABLE_SEQ_MATCH),\n  .SYNC_MODE            ( PC_SYNC_MODE),\n  .CMD_OFFSET           ( PC_CMD_OFFSET),\n\n  .RD_CMD_OFFSET_0      ( PC_RD_CMD_OFFSET_0),\n  .RD_CMD_OFFSET_1      ( PC_RD_CMD_OFFSET_1),\n  .RD_CMD_OFFSET_2      ( PC_RD_CMD_OFFSET_2),\n  .RD_CMD_OFFSET_3      ( PC_RD_CMD_OFFSET_3),\n  .RD_DURATION_0        ( PC_RD_DURATION_0),\n  .RD_DURATION_1        ( PC_RD_DURATION_1),\n  .RD_DURATION_2        ( PC_RD_DURATION_2),\n  .RD_DURATION_3        ( PC_RD_DURATION_3),\n  .WR_CMD_OFFSET_0      ( PC_WR_CMD_OFFSET_0),\n  .WR_CMD_OFFSET_1      ( PC_WR_CMD_OFFSET_1),\n  .WR_CMD_OFFSET_2      ( PC_WR_CMD_OFFSET_2),\n  .WR_CMD_OFFSET_3      ( PC_WR_CMD_OFFSET_3),\n  .WR_DURATION_0        ( PC_WR_DURATION_0),\n  .WR_DURATION_1        ( PC_WR_DURATION_1),\n  .WR_DURATION_2        ( PC_WR_DURATION_2),\n  .WR_DURATION_3        ( PC_WR_DURATION_3)\n) phy_control_i (\n  .AUXOUTPUT            (aux_out),\n  .INBURSTPENDING       (phaser_ctl_bus[MSB_BURST_PEND_PI:MSB_BURST_PEND_PI-3]),\n  .INRANKA              (in_rank[1:0]),\n  .INRANKB              (in_rank[3:2]),\n  .INRANKC              (in_rank[5:4]),\n  .INRANKD              (in_rank[7:6]),\n  .OUTBURSTPENDING      (phaser_ctl_bus[MSB_BURST_PEND_PO:MSB_BURST_PEND_PO-3]),\n  .PCENABLECALIB        (phy_encalib),\n  .PHYCTLALMOSTFULL     (phy_ctl_a_full),\n  .PHYCTLEMPTY          (phy_ctl_empty),\n  .PHYCTLFULL           (phy_ctl_full),\n  .PHYCTLREADY          (phy_ctl_ready),\n  .MEMREFCLK            (mem_refclk),\n  .PHYCLK               (phy_ctl_clk),\n  .PHYCTLMSTREMPTY      (phy_ctl_mstr_empty),\n  .PHYCTLWD             (_phy_ctl_wd),\n  .PHYCTLWRENABLE       (phy_ctl_wr),\n  .PLLLOCK              (pll_lock),\n  .REFDLLLOCK           (ref_dll_lock),        \n  .RESET                (rst),\n  .SYNCIN               (sync_pulse),\n  .READCALIBENABLE      (phy_read_calib),\n  .WRITECALIBENABLE     (phy_write_calib)\n`ifdef USE_PHY_CONTROL_TEST\n  , .TESTINPUT         (16'b0),\n    .TESTOUTPUT        (test_output),\n    .TESTSELECT        (test_select),\n    .SCANENABLEN       (scan_enable)\n`endif\n);",
        "if ( BYTE_LANES[3] ) begin : ddr_byte_lane_D\n  assign phy_dout_remap[319:240] = part_select_80(phy_dout, (LANE_REMAP[13:12]));\n\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"D\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[3] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[47:36]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[47:36]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (D_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (D_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (D_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (D_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (D_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (D_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (D_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (D_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (D_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (D_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (D_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (D_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (D_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (D_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (D_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (D_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (D_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (D_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_D(\n      .mem_dq_out            (mem_dq_out[47:36]),\n      .mem_dq_ts             (mem_dq_ts[47:36]),\n      .mem_dq_in             (mem_dq_in[39:30]),\n      .mem_dqs_out           (mem_dqs_out[3]),\n      .mem_dqs_ts            (mem_dqs_ts[3]),\n      .mem_dqs_in            (mem_dqs_in[3]),\n      .rst                   (D_rst_primitives),\n      .rst_pi_div2           (D_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (D_ddr_clk),\n      .rclk                  (D_rclk),\n      .pi_dqs_found          (D_pi_dqs_found),\n      .dqs_out_of_range      (D_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (D_if_a_empty),\n      .if_empty              (D_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (D_of_a_full),\n      .of_full               (D_of_full),\n      .pre_fifo_a_full       (D_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[319:240]),\n      .phy_dout              (phy_dout_remap[319:240]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (D_idelay_ce),\n      .idelay_ld             (D_idelay_ld),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,B_byte_rd_en,C_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (D_byte_rd_en),\n\n      .pi_rst_dqs_find       (D_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (D_po_fine_enable),\n      .po_coarse_enable      (D_po_coarse_enable),\n      .po_fine_inc           (D_po_fine_inc),\n      .po_coarse_inc         (D_po_coarse_inc),\n      .po_counter_load_en    (D_po_counter_load_en),\n      .po_counter_read_en    (D_po_counter_read_en),\n      .po_counter_load_val   (D_po_counter_load_val),\n      .po_coarse_overflow    (D_po_coarse_overflow),\n      .po_fine_overflow      (D_po_fine_overflow),\n      .po_counter_read_val   (D_po_counter_read_val),\n      .po_sel_fine_oclk_delay(D_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (D_pi_fine_enable),\n      .pi_fine_inc           (D_pi_fine_inc),\n      .pi_counter_load_en    (D_pi_counter_load_en),\n      .pi_counter_read_en    (D_pi_counter_read_en),\n      .pi_counter_load_val   (D_pi_counter_load_val),\n      .pi_fine_overflow      (D_pi_fine_overflow),\n      .pi_counter_read_val   (D_pi_counter_read_val),\n      .pi_iserdes_rst        (D_pi_iserdes_rst),\n      .pi_phase_locked       (D_pi_phase_locked),\n      .fine_delay            (D_fine_delay),\n      .fine_delay_sel        (D_fine_delay_sel)\n);\nend\nelse begin : no_ddr_byte_lane_D\n       assign D_of_a_full           = 1'b0;\n       assign D_of_full             = 1'b0;\n       assign D_pre_fifo_a_full     = 1'b0;\n       assign D_if_empty            = 1'b0;\n       assign D_byte_rd_en          = 1'b1;\n       assign D_if_a_empty          = 1'b0;\n       assign D_rclk                = 0;\n       assign D_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign D_pi_dqs_found        = 1;\n       assign D_pi_phase_locked     = 1;\n       assign D_pi_counter_read_val = 0;\n       assign D_po_counter_read_val = 0;\n       assign D_pi_fine_overflow    = 0;\n       assign D_po_coarse_overflow  = 0;\n       assign D_po_fine_overflow    = 0;\nend",
        "if ( BYTE_LANES[2] ) begin : ddr_byte_lane_C\n\n  assign phy_dout_remap[239:160] = part_select_80(phy_dout, (LANE_REMAP[9:8]));\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"C\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[2] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[35:24]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[35:24]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (C_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (C_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (C_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (C_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (C_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (C_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (C_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (C_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (C_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (C_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (C_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (C_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (C_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (C_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (C_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (C_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (C_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (C_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_C(\n      .mem_dq_out            (mem_dq_out[35:24]),\n      .mem_dq_ts             (mem_dq_ts[35:24]),\n      .mem_dq_in             (mem_dq_in[29:20]),\n      .mem_dqs_out           (mem_dqs_out[2]),\n      .mem_dqs_ts            (mem_dqs_ts[2]),\n      .mem_dqs_in            (mem_dqs_in[2]),\n      .rst                   (C_rst_primitives),\n      .rst_pi_div2           (C_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (C_ddr_clk),\n      .rclk                  (C_rclk),\n      .pi_dqs_found          (C_pi_dqs_found),\n      .dqs_out_of_range      (C_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (C_if_a_empty),\n      .if_empty              (C_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (C_of_a_full),\n      .of_full               (C_of_full),\n      .pre_fifo_a_full       (C_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[239:160]),\n      .phy_dout              (phy_dout_remap[239:160]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,B_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (C_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (C_idelay_ce),\n      .idelay_ld             (C_idelay_ld),\n      .pi_rst_dqs_find       (C_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (C_po_fine_enable),\n      .po_coarse_enable      (C_po_coarse_enable),\n      .po_fine_inc           (C_po_fine_inc),\n      .po_coarse_inc         (C_po_coarse_inc),\n      .po_counter_load_en    (C_po_counter_load_en),\n      .po_counter_read_en    (C_po_counter_read_en),\n      .po_counter_load_val   (C_po_counter_load_val),\n      .po_coarse_overflow    (C_po_coarse_overflow),\n      .po_fine_overflow      (C_po_fine_overflow),\n      .po_counter_read_val   (C_po_counter_read_val),\n      .po_sel_fine_oclk_delay(C_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (C_pi_fine_enable),\n      .pi_fine_inc           (C_pi_fine_inc),\n      .pi_counter_load_en    (C_pi_counter_load_en),\n      .pi_counter_read_en    (C_pi_counter_read_en),\n      .pi_counter_load_val   (C_pi_counter_load_val),\n      .pi_fine_overflow      (C_pi_fine_overflow),\n      .pi_counter_read_val   (C_pi_counter_read_val),\n      .pi_iserdes_rst        (C_pi_iserdes_rst),\n      .pi_phase_locked       (C_pi_phase_locked),\n      .fine_delay            (C_fine_delay),\n      .fine_delay_sel        (C_fine_delay_sel)\n);\n\nend\nelse begin : no_ddr_byte_lane_C\n       assign C_of_a_full           = 1'b0;\n       assign C_of_full             = 1'b0;\n       assign C_pre_fifo_a_full     = 1'b0;\n       assign C_if_empty            = 1'b0;\n       assign C_byte_rd_en          = 1'b1;\n       assign C_if_a_empty          = 1'b0;\n       assign C_pi_phase_locked     = 1;\n       assign C_pi_dqs_found        = 1;\n       assign C_rclk                = 0;\n       assign C_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign C_pi_counter_read_val = 0;\n       assign C_po_counter_read_val = 0;\n       assign C_pi_fine_overflow    = 0;\n       assign C_po_coarse_overflow  = 0;\n       assign C_po_fine_overflow    = 0;\nend",
        "if ( BYTE_LANES[1] ) begin : ddr_byte_lane_B\n\n  assign phy_dout_remap[159:80] = part_select_80(phy_dout, (LANE_REMAP[5:4]));\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"B\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[1] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[23:12]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[23:12]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (B_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (B_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (B_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (B_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (B_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (B_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (B_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (B_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (B_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (B_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (B_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (B_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (B_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (B_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (B_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (B_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (B_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (B_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_B(\n      .mem_dq_out            (mem_dq_out[23:12]),\n      .mem_dq_ts             (mem_dq_ts[23:12]),\n      .mem_dq_in             (mem_dq_in[19:10]),\n      .mem_dqs_out           (mem_dqs_out[1]),\n      .mem_dqs_ts            (mem_dqs_ts[1]),\n      .mem_dqs_in            (mem_dqs_in[1]),\n      .rst                   (B_rst_primitives),\n      .rst_pi_div2           (B_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (B_ddr_clk),\n      .rclk                  (B_rclk),\n      .pi_dqs_found          (B_pi_dqs_found),\n      .dqs_out_of_range      (B_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (B_if_a_empty),\n      .if_empty              (B_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (B_of_a_full),\n      .of_full               (B_of_full),\n      .pre_fifo_a_full       (B_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[159:80]),\n      .phy_dout              (phy_dout_remap[159:80]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,C_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (B_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (B_idelay_ce),\n      .idelay_ld             (B_idelay_ld),\n      .pi_rst_dqs_find       (B_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (B_po_fine_enable),\n      .po_coarse_enable      (B_po_coarse_enable),\n      .po_fine_inc           (B_po_fine_inc),\n      .po_coarse_inc         (B_po_coarse_inc),\n      .po_counter_load_en    (B_po_counter_load_en),\n      .po_counter_read_en    (B_po_counter_read_en),\n      .po_counter_load_val   (B_po_counter_load_val),\n      .po_coarse_overflow    (B_po_coarse_overflow),\n      .po_fine_overflow      (B_po_fine_overflow),\n      .po_counter_read_val   (B_po_counter_read_val),\n      .po_sel_fine_oclk_delay(B_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (B_pi_fine_enable),\n      .pi_fine_inc           (B_pi_fine_inc),\n      .pi_counter_load_en    (B_pi_counter_load_en),\n      .pi_counter_read_en    (B_pi_counter_read_en),\n      .pi_counter_load_val   (B_pi_counter_load_val),\n      .pi_fine_overflow      (B_pi_fine_overflow),\n      .pi_counter_read_val   (B_pi_counter_read_val),\n      .pi_iserdes_rst        (B_pi_iserdes_rst),\n      .pi_phase_locked       (B_pi_phase_locked),\n      .fine_delay            (B_fine_delay),\n      .fine_delay_sel        (B_fine_delay_sel)\n);\nend\nelse begin : no_ddr_byte_lane_B\n       assign B_of_a_full           = 1'b0;\n       assign B_of_full             = 1'b0;\n       assign B_pre_fifo_a_full     = 1'b0;\n       assign B_if_empty            = 1'b0;\n       assign B_if_a_empty          = 1'b0;\n       assign B_byte_rd_en          = 1'b1;\n       assign B_pi_phase_locked     = 1;\n       assign B_pi_dqs_found        = 1;\n       assign B_rclk                = 0;\n       assign B_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign B_pi_counter_read_val = 0;\n       assign B_po_counter_read_val = 0;\n       assign B_pi_fine_overflow    = 0;\n       assign B_po_coarse_overflow  = 0;\n       assign B_po_fine_overflow    = 0;\nend",
        "if ( BYTE_LANES[0] ) begin : ddr_byte_lane_A\n\n  assign phy_dout_remap[79:0] = part_select_80(phy_dout, (LANE_REMAP[1:0]));\n\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"A\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[0] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[11:0]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[11:0]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (A_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (A_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (A_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (A_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (A_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (A_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (A_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (A_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (A_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (A_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (A_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (A_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (A_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (A_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (A_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (A_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (A_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_A(\n      .mem_dq_out            (mem_dq_out[11:0]),\n      .mem_dq_ts             (mem_dq_ts[11:0]),\n      .mem_dq_in             (mem_dq_in[9:0]),\n      .mem_dqs_out           (mem_dqs_out[0]),\n      .mem_dqs_ts            (mem_dqs_ts[0]),\n      .mem_dqs_in            (mem_dqs_in[0]),\n      .rst                   (A_rst_primitives),\n      .rst_pi_div2           (A_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (A_ddr_clk),\n      .rclk                  (A_rclk),\n      .pi_dqs_found          (A_pi_dqs_found),\n      .dqs_out_of_range      (A_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (A_if_a_empty),\n      .if_empty              (A_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (A_of_a_full),\n      .of_full               (A_of_full),\n      .pre_fifo_a_full       (A_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[79:0]),\n      .phy_dout              (phy_dout_remap[79:0]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({B_byte_rd_en,C_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (A_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (A_idelay_ce),\n      .idelay_ld             (A_idelay_ld),\n      .pi_rst_dqs_find       (A_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (A_po_fine_enable),\n      .po_coarse_enable      (A_po_coarse_enable),\n      .po_fine_inc           (A_po_fine_inc),\n      .po_coarse_inc         (A_po_coarse_inc),\n      .po_counter_load_en    (A_po_counter_load_en),\n      .po_counter_read_en    (A_po_counter_read_en),\n      .po_counter_load_val   (A_po_counter_load_val),\n      .po_coarse_overflow    (A_po_coarse_overflow),\n      .po_fine_overflow      (A_po_fine_overflow),\n      .po_counter_read_val   (A_po_counter_read_val),\n      .po_sel_fine_oclk_delay(A_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (A_pi_fine_enable),\n      .pi_fine_inc           (A_pi_fine_inc),\n      .pi_counter_load_en    (A_pi_counter_load_en),\n      .pi_counter_read_en    (A_pi_counter_read_en),\n      .pi_counter_load_val   (A_pi_counter_load_val),\n      .pi_fine_overflow      (A_pi_fine_overflow),\n      .pi_counter_read_val   (A_pi_counter_read_val),\n      .pi_iserdes_rst        (A_pi_iserdes_rst),\n      .pi_phase_locked       (A_pi_phase_locked),\n      .fine_delay            (A_fine_delay),\n      .fine_delay_sel        (A_fine_delay_sel)\n);\n\nend\nelse begin : no_ddr_byte_lane_A\n       assign A_of_a_full           = 1'b0;\n       assign A_of_full             = 1'b0;\n       assign A_pre_fifo_a_full     = 1'b0;\n       assign A_if_empty            = 1'b0;\n       assign A_byte_rd_en          = 1'b1;\n       assign A_if_a_empty          = 1'b0;\n       assign A_pi_phase_locked     = 1;\n       assign A_pi_dqs_found        = 1;\n       assign A_rclk                = 0;\n       assign A_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign A_pi_counter_read_val = 0;\n       assign A_po_counter_read_val = 0;\n       assign A_pi_fine_overflow    = 0;\n       assign A_po_coarse_overflow  = 0;\n       assign A_po_fine_overflow    = 0;\nend",
        "if (HIGHEST_LANE > 1)\n assign _phy_ctl_wd = {phy_ctl_wd[31:23], data_offset, phy_ctl_wd[16:0]};\nif (HIGHEST_LANE == 1)\n assign _phy_ctl_wd = phy_ctl_wd;",
        "  if (PRESENT_DATA_D )\n      case ( LANE_REMAP[13:12]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[319:240];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[319:240];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[319:240];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[319:240];\n      endcase\n  else\n     if (HIGHEST_LANE > 3)\n        case ( LANE_REMAP[13:12]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n      endcase",
        "  if (PRESENT_DATA_C)\n      case ( LANE_REMAP[9:8]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[239:160];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[239:160];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[239:160];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[239:160];\n      endcase\n  else\n     if (HIGHEST_LANE > 2)\n        case ( LANE_REMAP[9:8]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n        endcase",
        "  if (PRESENT_DATA_B )\n      case ( LANE_REMAP[5:4]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[159:80];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[159:80];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[159:80];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[159:80];\n      endcase\n   else\n     if (HIGHEST_LANE > 1)\n        case ( LANE_REMAP[5:4]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n        endcase",
        "\n  if (PRESENT_DATA_A )\n      case ( LANE_REMAP[1:0]   )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[79:0];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[79:0];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[79:0];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[79:0];\n      endcase\n  else\n      case ( LANE_REMAP[1:0]   )\n      2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n      2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n      2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n      2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n      endcase",
        "  if (PRESENT_DATA_D) begin\n      assign D_of_data_full      = D_of_full;\n      assign D_of_ctl_full       = 0;\n      assign D_of_data_a_full    = D_of_a_full;\n      assign D_of_ctl_a_full     = 0;\n      assign D_pre_data_a_full   = D_pre_fifo_a_full;\n  end\n  else  begin\n      assign D_of_ctl_full       = D_of_full;\n      assign D_of_data_full      = 0;\n      assign D_of_ctl_a_full     = D_of_a_full;\n      assign D_of_data_a_full    = 0;\n      assign D_pre_data_a_full   = 0;",
        "  if (PRESENT_DATA_C) begin\n      assign C_of_data_full     = C_of_full;\n      assign C_of_ctl_full      = 0;\n      assign C_of_data_a_full   = C_of_a_full;\n      assign C_of_ctl_a_full    = 0;\n      assign C_pre_data_a_full  = C_pre_fifo_a_full;\n  end\n  else  begin\n      assign C_of_ctl_full       = C_of_full;\n      assign C_of_data_full      = 0;\n      assign C_of_ctl_a_full     = C_of_a_full;\n      assign C_of_data_a_full    = 0;\n      assign C_pre_data_a_full    = 0;",
        "  if (PRESENT_DATA_B) begin\n      assign B_of_data_full     = B_of_full;\n      assign B_of_ctl_full      = 0;\n      assign B_of_data_a_full   = B_of_a_full;\n      assign B_of_ctl_a_full    = 0;\n      assign B_pre_data_a_full  = B_pre_fifo_a_full;\n  end\n  else  begin\n      assign B_of_ctl_full      = B_of_full;\n      assign B_of_data_full     = 0;\n      assign B_of_ctl_a_full    = B_of_a_full;\n      assign B_of_data_a_full   = 0;\n      assign B_pre_data_a_full  = 0;",
        "\n  if (PRESENT_DATA_A) begin\n      assign A_of_data_full     = A_of_full;\n      assign A_of_ctl_full      = 0;\n      assign A_of_data_a_full   = A_of_a_full;\n      assign A_of_ctl_a_full    = 0;\n      assign A_pre_data_a_full  = A_pre_fifo_a_full;\n  end\n  else  begin\n      assign A_of_ctl_full      = A_of_full;\n      assign A_of_data_full     = 0;\n      assign A_of_ctl_a_full    = A_of_a_full;\n      assign A_of_data_a_full   = 0;\n      assign A_pre_data_a_full  = 0;\n  end",
        "generate\n\n  if (BYTE_LANES[0]) begin\n      assign dummy_data[0]             = 0;\n  end\n  else begin\n      assign dummy_data[0]      = &phy_dout_remap[1*80-1:0*80];\n  end\n  if (BYTE_LANES[1]) begin\n      assign dummy_data[1]             = 0;\n  end\n  else begin\n      assign dummy_data[1]      = &phy_dout_remap[2*80-1:1*80];\n  end\n  if (BYTE_LANES[2]) begin\n      assign dummy_data[2]             = 0;\n  end\n  else begin\n      assign dummy_data[2]       = &phy_dout_remap[3*80-1:2*80];\n  end\n  if (BYTE_LANES[3]) begin\n      assign dummy_data[3]             = 0;\n  end\n  else begin\n      assign dummy_data[3]       = &phy_dout_remap[4*80-1:3*80];\n  end\n\n  if (PRESENT_DATA_A) begin\n      assign A_of_data_full     = A_of_full;\n      assign A_of_ctl_full      = 0;\n      assign A_of_data_a_full   = A_of_a_full;\n      assign A_of_ctl_a_full    = 0;\n      assign A_pre_data_a_full  = A_pre_fifo_a_full;\n  end\n  else  begin\n      assign A_of_ctl_full      = A_of_full;\n      assign A_of_data_full     = 0;\n      assign A_of_ctl_a_full    = A_of_a_full;\n      assign A_of_data_a_full   = 0;\n      assign A_pre_data_a_full  = 0;\n  end\n  if (PRESENT_DATA_B) begin\n      assign B_of_data_full     = B_of_full;\n      assign B_of_ctl_full      = 0;\n      assign B_of_data_a_full   = B_of_a_full;\n      assign B_of_ctl_a_full    = 0;\n      assign B_pre_data_a_full  = B_pre_fifo_a_full;\n  end\n  else  begin\n      assign B_of_ctl_full      = B_of_full;\n      assign B_of_data_full     = 0;\n      assign B_of_ctl_a_full    = B_of_a_full;\n      assign B_of_data_a_full   = 0;\n      assign B_pre_data_a_full  = 0;\n  end\n  if (PRESENT_DATA_C) begin\n      assign C_of_data_full     = C_of_full;\n      assign C_of_ctl_full      = 0;\n      assign C_of_data_a_full   = C_of_a_full;\n      assign C_of_ctl_a_full    = 0;\n      assign C_pre_data_a_full  = C_pre_fifo_a_full;\n  end\n  else  begin\n      assign C_of_ctl_full       = C_of_full;\n      assign C_of_data_full      = 0;\n      assign C_of_ctl_a_full     = C_of_a_full;\n      assign C_of_data_a_full    = 0;\n      assign C_pre_data_a_full    = 0;\n  end\n  if (PRESENT_DATA_D) begin\n      assign D_of_data_full      = D_of_full;\n      assign D_of_ctl_full       = 0;\n      assign D_of_data_a_full    = D_of_a_full;\n      assign D_of_ctl_a_full     = 0;\n      assign D_pre_data_a_full   = D_pre_fifo_a_full;\n  end\n  else  begin\n      assign D_of_ctl_full       = D_of_full;\n      assign D_of_data_full      = 0;\n      assign D_of_ctl_a_full     = D_of_a_full;\n      assign D_of_data_a_full    = 0;\n      assign D_pre_data_a_full   = 0;\n  end\n\n  if (PRESENT_DATA_A )\n      case ( LANE_REMAP[1:0]   )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[79:0];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[79:0];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[79:0];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[79:0];\n      endcase\n  else\n      case ( LANE_REMAP[1:0]   )\n      2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n      2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n      2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n      2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n      endcase\n\n  if (PRESENT_DATA_B )\n      case ( LANE_REMAP[5:4]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[159:80];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[159:80];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[159:80];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[159:80];\n      endcase\n   else\n     if (HIGHEST_LANE > 1)\n        case ( LANE_REMAP[5:4]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n        endcase\n\n  if (PRESENT_DATA_C)\n      case ( LANE_REMAP[9:8]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[239:160];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[239:160];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[239:160];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[239:160];\n      endcase\n  else\n     if (HIGHEST_LANE > 2)\n        case ( LANE_REMAP[9:8]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n        endcase\n\n  if (PRESENT_DATA_D )\n      case ( LANE_REMAP[13:12]  )\n      2'b00 : assign phy_din[1*80-1:0]   = phy_din_remap[319:240];\n      2'b01 : assign phy_din[2*80-1:80]  = phy_din_remap[319:240];\n      2'b10 : assign phy_din[3*80-1:160] = phy_din_remap[319:240];\n      2'b11 : assign phy_din[4*80-1:240] = phy_din_remap[319:240];\n      endcase\n  else\n     if (HIGHEST_LANE > 3)\n        case ( LANE_REMAP[13:12]   )\n        2'b00 : assign phy_din[1*80-1:0]   = 80'h0;\n        2'b01 : assign phy_din[2*80-1:80]  = 80'h0;\n        2'b10 : assign phy_din[3*80-1:160] = 80'h0;\n        2'b11 : assign phy_din[4*80-1:240] = 80'h0;\n      endcase\n\nif (HIGHEST_LANE > 1)\n assign _phy_ctl_wd = {phy_ctl_wd[31:23], data_offset, phy_ctl_wd[16:0]};\nif (HIGHEST_LANE == 1)\n assign _phy_ctl_wd = phy_ctl_wd;\n\n\n\nBUFIO rclk_buf(.I(rclk_), .O(rclk) );\n\nif ( BYTE_LANES[0] ) begin : ddr_byte_lane_A\n\n  assign phy_dout_remap[79:0] = part_select_80(phy_dout, (LANE_REMAP[1:0]));\n\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"A\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[0] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[11:0]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[11:0]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (A_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (A_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (A_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (A_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (A_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (A_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (A_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (A_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (A_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (A_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (A_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (A_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (A_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (A_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (A_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (A_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (A_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_A(\n      .mem_dq_out            (mem_dq_out[11:0]),\n      .mem_dq_ts             (mem_dq_ts[11:0]),\n      .mem_dq_in             (mem_dq_in[9:0]),\n      .mem_dqs_out           (mem_dqs_out[0]),\n      .mem_dqs_ts            (mem_dqs_ts[0]),\n      .mem_dqs_in            (mem_dqs_in[0]),\n      .rst                   (A_rst_primitives),\n      .rst_pi_div2           (A_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (A_ddr_clk),\n      .rclk                  (A_rclk),\n      .pi_dqs_found          (A_pi_dqs_found),\n      .dqs_out_of_range      (A_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (A_if_a_empty),\n      .if_empty              (A_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (A_of_a_full),\n      .of_full               (A_of_full),\n      .pre_fifo_a_full       (A_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[79:0]),\n      .phy_dout              (phy_dout_remap[79:0]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({B_byte_rd_en,C_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (A_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (A_idelay_ce),\n      .idelay_ld             (A_idelay_ld),\n      .pi_rst_dqs_find       (A_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (A_po_fine_enable),\n      .po_coarse_enable      (A_po_coarse_enable),\n      .po_fine_inc           (A_po_fine_inc),\n      .po_coarse_inc         (A_po_coarse_inc),\n      .po_counter_load_en    (A_po_counter_load_en),\n      .po_counter_read_en    (A_po_counter_read_en),\n      .po_counter_load_val   (A_po_counter_load_val),\n      .po_coarse_overflow    (A_po_coarse_overflow),\n      .po_fine_overflow      (A_po_fine_overflow),\n      .po_counter_read_val   (A_po_counter_read_val),\n      .po_sel_fine_oclk_delay(A_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (A_pi_fine_enable),\n      .pi_fine_inc           (A_pi_fine_inc),\n      .pi_counter_load_en    (A_pi_counter_load_en),\n      .pi_counter_read_en    (A_pi_counter_read_en),\n      .pi_counter_load_val   (A_pi_counter_load_val),\n      .pi_fine_overflow      (A_pi_fine_overflow),\n      .pi_counter_read_val   (A_pi_counter_read_val),\n      .pi_iserdes_rst        (A_pi_iserdes_rst),\n      .pi_phase_locked       (A_pi_phase_locked),\n      .fine_delay            (A_fine_delay),\n      .fine_delay_sel        (A_fine_delay_sel)\n);\n\nend\nelse begin : no_ddr_byte_lane_A\n       assign A_of_a_full           = 1'b0;\n       assign A_of_full             = 1'b0;\n       assign A_pre_fifo_a_full     = 1'b0;\n       assign A_if_empty            = 1'b0;\n       assign A_byte_rd_en          = 1'b1;\n       assign A_if_a_empty          = 1'b0;\n       assign A_pi_phase_locked     = 1;\n       assign A_pi_dqs_found        = 1;\n       assign A_rclk                = 0;\n       assign A_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign A_pi_counter_read_val = 0;\n       assign A_po_counter_read_val = 0;\n       assign A_pi_fine_overflow    = 0;\n       assign A_po_coarse_overflow  = 0;\n       assign A_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[1] ) begin : ddr_byte_lane_B\n\n  assign phy_dout_remap[159:80] = part_select_80(phy_dout, (LANE_REMAP[5:4]));\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"B\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[1] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[23:12]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[23:12]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (B_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (B_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (B_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (B_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (B_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (B_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (B_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (B_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (B_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (B_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (B_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (B_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (B_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (B_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (B_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (B_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (B_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (B_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_B(\n      .mem_dq_out            (mem_dq_out[23:12]),\n      .mem_dq_ts             (mem_dq_ts[23:12]),\n      .mem_dq_in             (mem_dq_in[19:10]),\n      .mem_dqs_out           (mem_dqs_out[1]),\n      .mem_dqs_ts            (mem_dqs_ts[1]),\n      .mem_dqs_in            (mem_dqs_in[1]),\n      .rst                   (B_rst_primitives),\n      .rst_pi_div2           (B_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (B_ddr_clk),\n      .rclk                  (B_rclk),\n      .pi_dqs_found          (B_pi_dqs_found),\n      .dqs_out_of_range      (B_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (B_if_a_empty),\n      .if_empty              (B_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (B_of_a_full),\n      .of_full               (B_of_full),\n      .pre_fifo_a_full       (B_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[159:80]),\n      .phy_dout              (phy_dout_remap[159:80]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,C_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (B_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (B_idelay_ce),\n      .idelay_ld             (B_idelay_ld),\n      .pi_rst_dqs_find       (B_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (B_po_fine_enable),\n      .po_coarse_enable      (B_po_coarse_enable),\n      .po_fine_inc           (B_po_fine_inc),\n      .po_coarse_inc         (B_po_coarse_inc),\n      .po_counter_load_en    (B_po_counter_load_en),\n      .po_counter_read_en    (B_po_counter_read_en),\n      .po_counter_load_val   (B_po_counter_load_val),\n      .po_coarse_overflow    (B_po_coarse_overflow),\n      .po_fine_overflow      (B_po_fine_overflow),\n      .po_counter_read_val   (B_po_counter_read_val),\n      .po_sel_fine_oclk_delay(B_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (B_pi_fine_enable),\n      .pi_fine_inc           (B_pi_fine_inc),\n      .pi_counter_load_en    (B_pi_counter_load_en),\n      .pi_counter_read_en    (B_pi_counter_read_en),\n      .pi_counter_load_val   (B_pi_counter_load_val),\n      .pi_fine_overflow      (B_pi_fine_overflow),\n      .pi_counter_read_val   (B_pi_counter_read_val),\n      .pi_iserdes_rst        (B_pi_iserdes_rst),\n      .pi_phase_locked       (B_pi_phase_locked),\n      .fine_delay            (B_fine_delay),\n      .fine_delay_sel        (B_fine_delay_sel)\n);\nend\nelse begin : no_ddr_byte_lane_B\n       assign B_of_a_full           = 1'b0;\n       assign B_of_full             = 1'b0;\n       assign B_pre_fifo_a_full     = 1'b0;\n       assign B_if_empty            = 1'b0;\n       assign B_if_a_empty          = 1'b0;\n       assign B_byte_rd_en          = 1'b1;\n       assign B_pi_phase_locked     = 1;\n       assign B_pi_dqs_found        = 1;\n       assign B_rclk                = 0;\n       assign B_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign B_pi_counter_read_val = 0;\n       assign B_po_counter_read_val = 0;\n       assign B_pi_fine_overflow    = 0;\n       assign B_po_coarse_overflow  = 0;\n       assign B_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[2] ) begin : ddr_byte_lane_C\n\n  assign phy_dout_remap[239:160] = part_select_80(phy_dout, (LANE_REMAP[9:8]));\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"C\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[2] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[35:24]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[35:24]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (C_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (C_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (C_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (C_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (C_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (C_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (C_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (C_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (C_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (C_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (C_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (C_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (C_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (C_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (C_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (C_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (C_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (C_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_C(\n      .mem_dq_out            (mem_dq_out[35:24]),\n      .mem_dq_ts             (mem_dq_ts[35:24]),\n      .mem_dq_in             (mem_dq_in[29:20]),\n      .mem_dqs_out           (mem_dqs_out[2]),\n      .mem_dqs_ts            (mem_dqs_ts[2]),\n      .mem_dqs_in            (mem_dqs_in[2]),\n      .rst                   (C_rst_primitives),\n      .rst_pi_div2           (C_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (C_ddr_clk),\n      .rclk                  (C_rclk),\n      .pi_dqs_found          (C_pi_dqs_found),\n      .dqs_out_of_range      (C_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (C_if_a_empty),\n      .if_empty              (C_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (C_of_a_full),\n      .of_full               (C_of_full),\n      .pre_fifo_a_full       (C_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[239:160]),\n      .phy_dout              (phy_dout_remap[239:160]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,B_byte_rd_en,D_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (C_byte_rd_en),\n\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (C_idelay_ce),\n      .idelay_ld             (C_idelay_ld),\n      .pi_rst_dqs_find       (C_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (C_po_fine_enable),\n      .po_coarse_enable      (C_po_coarse_enable),\n      .po_fine_inc           (C_po_fine_inc),\n      .po_coarse_inc         (C_po_coarse_inc),\n      .po_counter_load_en    (C_po_counter_load_en),\n      .po_counter_read_en    (C_po_counter_read_en),\n      .po_counter_load_val   (C_po_counter_load_val),\n      .po_coarse_overflow    (C_po_coarse_overflow),\n      .po_fine_overflow      (C_po_fine_overflow),\n      .po_counter_read_val   (C_po_counter_read_val),\n      .po_sel_fine_oclk_delay(C_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (C_pi_fine_enable),\n      .pi_fine_inc           (C_pi_fine_inc),\n      .pi_counter_load_en    (C_pi_counter_load_en),\n      .pi_counter_read_en    (C_pi_counter_read_en),\n      .pi_counter_load_val   (C_pi_counter_load_val),\n      .pi_fine_overflow      (C_pi_fine_overflow),\n      .pi_counter_read_val   (C_pi_counter_read_val),\n      .pi_iserdes_rst        (C_pi_iserdes_rst),\n      .pi_phase_locked       (C_pi_phase_locked),\n      .fine_delay            (C_fine_delay),\n      .fine_delay_sel        (C_fine_delay_sel)\n);\n\nend\nelse begin : no_ddr_byte_lane_C\n       assign C_of_a_full           = 1'b0;\n       assign C_of_full             = 1'b0;\n       assign C_pre_fifo_a_full     = 1'b0;\n       assign C_if_empty            = 1'b0;\n       assign C_byte_rd_en          = 1'b1;\n       assign C_if_a_empty          = 1'b0;\n       assign C_pi_phase_locked     = 1;\n       assign C_pi_dqs_found        = 1;\n       assign C_rclk                = 0;\n       assign C_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign C_pi_counter_read_val = 0;\n       assign C_po_counter_read_val = 0;\n       assign C_pi_fine_overflow    = 0;\n       assign C_po_coarse_overflow  = 0;\n       assign C_po_fine_overflow    = 0;\nend\n\nif ( BYTE_LANES[3] ) begin : ddr_byte_lane_D\n  assign phy_dout_remap[319:240] = part_select_80(phy_dout, (LANE_REMAP[13:12]));\n\n  mig_7series_v4_1_ddr_byte_lane #\n    (\n     .ABCD                   (\"D\"),\n     .PO_DATA_CTL            (PC_DATA_CTL_N[3] ? \"TRUE\" : \"FALSE\"),\n     .BITLANES               (BITLANES[47:36]),\n     .BITLANES_OUTONLY       (BITLANES_OUTONLY[47:36]),\n     .OF_ALMOST_EMPTY_VALUE  (OF_ALMOST_EMPTY_VALUE),\n     .OF_ALMOST_FULL_VALUE   (OF_ALMOST_FULL_VALUE),\n     .OF_SYNCHRONOUS_MODE    (OF_SYNCHRONOUS_MODE),\n     \n     \n     \n     .IF_ALMOST_EMPTY_VALUE  (IF_ALMOST_EMPTY_VALUE),\n     .IF_ALMOST_FULL_VALUE   (IF_ALMOST_FULL_VALUE),\n     .IF_SYNCHRONOUS_MODE    (IF_SYNCHRONOUS_MODE),\n     .IODELAY_GRP            (IODELAY_GRP),\n     .FPGA_SPEED_GRADE       (FPGA_SPEED_GRADE),\n     .BANK_TYPE              (BANK_TYPE),\n     .BYTELANES_DDR_CK       (BYTELANES_DDR_CK),\n     .RCLK_SELECT_LANE       (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO      (USE_PRE_POST_FIFO),\n     .SYNTHESIS              (SYNTHESIS),\n     .TCK                    (TCK),\n     .PC_CLK_RATIO           (PC_CLK_RATIO),\n     .PI_BURST_MODE          (D_PI_BURST_MODE),\n     .PI_CLKOUT_DIV          (D_PI_CLKOUT_DIV),\n     .PI_FREQ_REF_DIV        (D_PI_FREQ_REF_DIV),\n     .PI_FINE_DELAY          (D_PI_FINE_DELAY),\n     .PI_OUTPUT_CLK_SRC      (D_PI_OUTPUT_CLK_SRC),\n     .PI_SYNC_IN_DIV_RST     (D_PI_SYNC_IN_DIV_RST),\n     .PI_SEL_CLK_OFFSET      (PI_SEL_CLK_OFFSET),\n     .PO_CLKOUT_DIV          (D_PO_CLKOUT_DIV),\n     .PO_FINE_DELAY          (D_PO_FINE_DELAY),\n     .PO_COARSE_BYPASS       (D_PO_COARSE_BYPASS),\n     .PO_COARSE_DELAY        (D_PO_COARSE_DELAY),\n     .PO_OCLK_DELAY          (D_PO_OCLK_DELAY),\n     .PO_OCLKDELAY_INV       (D_PO_OCLKDELAY_INV),\n     .PO_OUTPUT_CLK_SRC      (D_PO_OUTPUT_CLK_SRC),\n     .PO_SYNC_IN_DIV_RST     (D_PO_SYNC_IN_DIV_RST),\n     .OSERDES_DATA_RATE      (D_OS_DATA_RATE),\n     .OSERDES_DATA_WIDTH     (D_OS_DATA_WIDTH),\n     .IDELAYE2_IDELAY_TYPE   (D_IDELAYE2_IDELAY_TYPE),\n     .IDELAYE2_IDELAY_VALUE  (D_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC        (PI_DIV2_INCDEC)\n     )\n   ddr_byte_lane_D(\n      .mem_dq_out            (mem_dq_out[47:36]),\n      .mem_dq_ts             (mem_dq_ts[47:36]),\n      .mem_dq_in             (mem_dq_in[39:30]),\n      .mem_dqs_out           (mem_dqs_out[3]),\n      .mem_dqs_ts            (mem_dqs_ts[3]),\n      .mem_dqs_in            (mem_dqs_in[3]),\n      .rst                   (D_rst_primitives),\n      .rst_pi_div2           (D_pi_rst_div2),\n      .phy_clk               (phy_clk),\n      .clk_div2              (clk_div2),\n      .freq_refclk           (freq_refclk),\n      .mem_refclk            (mem_refclk),\n      .idelayctrl_refclk     (idelayctrl_refclk),\n      .sync_pulse            (sync_pulse),\n      .ddr_ck_out            (D_ddr_clk),\n      .rclk                  (D_rclk),\n      .pi_dqs_found          (D_pi_dqs_found),\n      .dqs_out_of_range      (D_pi_dqs_out_of_range),\n      .if_empty_def          (if_empty_def),\n      .if_a_empty            (D_if_a_empty),\n      .if_empty              (D_if_empty),\n      .if_a_full             (),\n      .if_full               (),\n      .of_a_empty            (),\n      .of_empty              (),\n      .of_a_full             (D_of_a_full),\n      .of_full               (D_of_full),\n      .pre_fifo_a_full       (D_pre_fifo_a_full),\n      .phy_din               (phy_din_remap[319:240]),\n      .phy_dout              (phy_dout_remap[319:240]),\n      .phy_cmd_wr_en         (phy_cmd_wr_en),\n      .phy_data_wr_en        (phy_data_wr_en),\n      .phy_rd_en             (phy_rd_en),\n      .phaser_ctl_bus        (phaser_ctl_bus),\n      .idelay_inc            (idelay_inc),\n      .idelay_ce             (D_idelay_ce),\n      .idelay_ld             (D_idelay_ld),\n      .if_rst                (if_rst),\n      .byte_rd_en_oth_lanes  ({A_byte_rd_en,B_byte_rd_en,C_byte_rd_en}),\n      .byte_rd_en_oth_banks  (byte_rd_en_oth_banks),\n      .byte_rd_en            (D_byte_rd_en),\n\n      .pi_rst_dqs_find       (D_pi_rst_dqs_find),\n      .po_en_calib           (phy_encalib),\n      .po_fine_enable        (D_po_fine_enable),\n      .po_coarse_enable      (D_po_coarse_enable),\n      .po_fine_inc           (D_po_fine_inc),\n      .po_coarse_inc         (D_po_coarse_inc),\n      .po_counter_load_en    (D_po_counter_load_en),\n      .po_counter_read_en    (D_po_counter_read_en),\n      .po_counter_load_val   (D_po_counter_load_val),\n      .po_coarse_overflow    (D_po_coarse_overflow),\n      .po_fine_overflow      (D_po_fine_overflow),\n      .po_counter_read_val   (D_po_counter_read_val),\n      .po_sel_fine_oclk_delay(D_po_sel_fine_oclk_delay),\n      .pi_en_calib           (phy_encalib),\n      .pi_fine_enable        (D_pi_fine_enable),\n      .pi_fine_inc           (D_pi_fine_inc),\n      .pi_counter_load_en    (D_pi_counter_load_en),\n      .pi_counter_read_en    (D_pi_counter_read_en),\n      .pi_counter_load_val   (D_pi_counter_load_val),\n      .pi_fine_overflow      (D_pi_fine_overflow),\n      .pi_counter_read_val   (D_pi_counter_read_val),\n      .pi_iserdes_rst        (D_pi_iserdes_rst),\n      .pi_phase_locked       (D_pi_phase_locked),\n      .fine_delay            (D_fine_delay),\n      .fine_delay_sel        (D_fine_delay_sel)\n);\nend\nelse begin : no_ddr_byte_lane_D\n       assign D_of_a_full           = 1'b0;\n       assign D_of_full             = 1'b0;\n       assign D_pre_fifo_a_full     = 1'b0;\n       assign D_if_empty            = 1'b0;\n       assign D_byte_rd_en          = 1'b1;\n       assign D_if_a_empty          = 1'b0;\n       assign D_rclk                = 0;\n       assign D_ddr_clk             = {LP_DDR_CK_WIDTH*6{1'b0}};\n       assign D_pi_dqs_found        = 1;\n       assign D_pi_phase_locked     = 1;\n       assign D_pi_counter_read_val = 0;\n       assign D_po_counter_read_val = 0;\n       assign D_pi_fine_overflow    = 0;\n       assign D_po_coarse_overflow  = 0;\n       assign D_po_fine_overflow    = 0;\nend\nendgenerate",
        "endgenerate",
        "    always @ (*) begin\n      A_pi_rst_div2 <= 1'b0;\n      B_pi_rst_div2 <= 1'b0;\n      C_pi_rst_div2 <= 1'b0;\n      D_pi_rst_div2 <= 1'b0;\n    end",
        "    always @(posedge clk_div2) begin\n      pi_rst_div2r1 <= rst_primitives;\n      pi_rst_div2r2 <= pi_rst_div2r1;\n      A_pi_rst_div2 <= pi_rst_div2r2;\n      B_pi_rst_div2 <= pi_rst_div2r2;\n      C_pi_rst_div2 <= pi_rst_div2r2;\n      D_pi_rst_div2 <= pi_rst_div2r2;\n    end",
        "generate\n  if (PI_DIV2_INCDEC == \"TRUE\") begin: phaser_in_div2\n    (* ASYNC_REG = \"TRUE\" *) reg pi_rst_div2r1;\n    (* ASYNC_REG = \"TRUE\" *) reg pi_rst_div2r2;\n",
        "always @(posedge phy_clk ) begin\n   \n    rst_primitives    <= !phy_ctl_ready ;\n    A_rst_primitives  <= rst_primitives ;\n    B_rst_primitives  <= rst_primitives ;\n    C_rst_primitives  <= rst_primitives ;\n    D_rst_primitives  <= rst_primitives ;\n\n    rclk_delay        <= #1 (rclk_delay << 1) | (!rst_primitives && phyGo);\n    mcGo              <= #1 rst_out ;\n\nend",
        "always @(posedge phy_clk or posedge rst ) begin\n\n    if ( rst)  begin\n       rst_out   <= #1 0;\n    end\n    else begin\n       if ( rclk_delay_11)\n         rst_out <= #1 1;\n    end\nend",
        "always @(rclk_delay[11]) begin : rclk_delay_11_blk\n    if ( rclk_delay[11])\n       rclk_delay_11 = 1;\n    else\n       rclk_delay_11 = 0;\nend",
        "reg rclk_delay_11;",
        "assign pi_dqs_found_lanes = {D_pi_dqs_found, C_pi_dqs_found, B_pi_dqs_found, A_pi_dqs_found};",
        "assign pi_phase_locked_lanes =\n           {(! PRESENT_DATA_D[0] | D_pi_phase_locked),\n            (! PRESENT_DATA_C[0] | C_pi_phase_locked) ,\n            (! PRESENT_DATA_B[0] | B_pi_phase_locked) ,\n            (! PRESENT_DATA_A[0] | A_pi_phase_locked)};",
        "assign ddr_clk[LP_DDR_CK_WIDTH*6-1:0]                   = A_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*12-1:LP_DDR_CK_WIDTH*6]  = B_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*18-1:LP_DDR_CK_WIDTH*12] = C_ddr_clk;\nassign ddr_clk[LP_DDR_CK_WIDTH*24-1:LP_DDR_CK_WIDTH*18] = D_ddr_clk;\n",
        "generate\n\ngenvar i;\n\nif (RCLK_SELECT_LANE == \"A\")  begin\n     assign rclk_ = A_rclk;\n     assign pi_iserdes_rst = A_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"B\")  begin\n     assign rclk_ = B_rclk;\n     assign pi_iserdes_rst = B_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"C\") begin\n     assign rclk_ = C_rclk;\n     assign pi_iserdes_rst = C_pi_iserdes_rst;\n     end\nelse if (RCLK_SELECT_LANE == \"D\") begin\n     assign rclk_ = D_rclk;\n     assign pi_iserdes_rst = D_pi_iserdes_rst;\n     end\nelse  begin\n     assign rclk_ = B_rclk; \n     end\n\nendgenerate",
        "function [79:0] part_select_80;\ninput [319:0] vector;\ninput [1:0]  select;\nbegin\n     case (select)\n     2'b00 : part_select_80[79:0] = vector[1*80-1:0*80];\n     2'b01 : part_select_80[79:0] = vector[2*80-1:1*80];\n     2'b10 : part_select_80[79:0] = vector[3*80-1:2*80];\n     2'b11 : part_select_80[79:0] = vector[4*80-1:3*80];\n     endcase\nend\nendfunction"
    ]
}