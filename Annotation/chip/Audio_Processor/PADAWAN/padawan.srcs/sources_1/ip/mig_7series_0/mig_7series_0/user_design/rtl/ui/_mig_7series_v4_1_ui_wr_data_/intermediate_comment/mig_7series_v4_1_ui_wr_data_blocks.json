{
    "line_num": [
        [
            506,
            509
        ],
        [
            504,
            504
        ],
        [
            502,
            504
        ],
        [
            500,
            500
        ],
        [
            476,
            498
        ],
        [
            474,
            499
        ],
        [
            454,
            473
        ],
        [
            453,
            453
        ],
        [
            446,
            452
        ],
        [
            407,
            440
        ],
        [
            406,
            406
        ],
        [
            405,
            405
        ],
        [
            404,
            404
        ],
        [
            388,
            396
        ],
        [
            386,
            386
        ],
        [
            385,
            397
        ],
        [
            376,
            384
        ],
        [
            373,
            375
        ],
        [
            360,
            362
        ],
        [
            349,
            349
        ],
        [
            348,
            361
        ],
        [
            347,
            347
        ],
        [
            339,
            346
        ],
        [
            322,
            338
        ],
        [
            317,
            317
        ],
        [
            313,
            314
        ],
        [
            311,
            316
        ],
        [
            303,
            303
        ],
        [
            297,
            302
        ],
        [
            289,
            289
        ],
        [
            284,
            288
        ],
        [
            275,
            279
        ],
        [
            264,
            269
        ],
        [
            260,
            260
        ],
        [
            257,
            258
        ],
        [
            251,
            256
        ],
        [
            248,
            250
        ],
        [
            240,
            240
        ],
        [
            238,
            239
        ],
        [
            237,
            237
        ],
        [
            232,
            236
        ],
        [
            230,
            231
        ],
        [
            222,
            222
        ],
        [
            220,
            221
        ],
        [
            219,
            219
        ],
        [
            218,
            218
        ],
        [
            216,
            217
        ],
        [
            215,
            215
        ],
        [
            213,
            215
        ],
        [
            196,
            201
        ],
        [
            193,
            194
        ],
        [
            191,
            192
        ],
        [
            189,
            190
        ]
    ],
    "blocks": [
        "  generate\n    if (ECC_TEST == \"OFF\") assign raw_not_ecc = {2*nCK_PER_CLK{1'b0}};\n    else assign raw_not_ecc = wr_buf_out_data[WR_BUF_WIDTH-1-:(2*nCK_PER_CLK)];\n  endgenerate",
        "  assign {wr_data_mask, wr_data} = wr_buf_out_data[WR_BUF_WIDTH-1:0];",
        "  output [APP_DATA_WIDTH-1:0] wr_data;\n  output [APP_MASK_WIDTH-1:0] wr_data_mask;\n  assign {wr_data_mask, wr_data} = wr_buf_out_data[WR_BUF_WIDTH-1:0];",
        "  endgenerate",
        "      for (i=0; i<RAM_CNT; i=i+1) begin : wr_buffer_ram\n        RAM32M\n          #(.INIT_A(64'h0000000000000000),\n            .INIT_B(64'h0000000000000000),\n            .INIT_C(64'h0000000000000000),\n            .INIT_D(64'h0000000000000000)\n          ) RAM32M0 (\n            .DOA(wr_buf_out_data_w[((i*6)+4)+:2]),\n            .DOB(wr_buf_out_data_w[((i*6)+2)+:2]),\n            .DOC(wr_buf_out_data_w[((i*6)+0)+:2]),\n            .DOD(),\n            .DIA(wr_buf_in_data[((i*6)+4)+:2]),\n            .DIB(wr_buf_in_data[((i*6)+2)+:2]),\n            .DIC(wr_buf_in_data[((i*6)+0)+:2]),\n            .DID(2'b0),\n            .ADDRA(rd_addr_w),\n            .ADDRB(rd_addr_w),\n            .ADDRC(rd_addr_w),\n            .ADDRD(wb_wr_data_addr_w),\n            .WE(wdf_rdy_ns),\n            .WCLK(clk)\n           );\n      end ",
        "      always @(posedge clk) wr_buf_out_data <= #TCQ  wr_buf_out_data_w;\n      genvar i;\n      for (i=0; i<RAM_CNT; i=i+1) begin : wr_buffer_ram\n        RAM32M\n          #(.INIT_A(64'h0000000000000000),\n            .INIT_B(64'h0000000000000000),\n            .INIT_C(64'h0000000000000000),\n            .INIT_D(64'h0000000000000000)\n          ) RAM32M0 (\n            .DOA(wr_buf_out_data_w[((i*6)+4)+:2]),\n            .DOB(wr_buf_out_data_w[((i*6)+2)+:2]),\n            .DOC(wr_buf_out_data_w[((i*6)+0)+:2]),\n            .DOD(),\n            .DIA(wr_buf_in_data[((i*6)+4)+:2]),\n            .DIB(wr_buf_in_data[((i*6)+2)+:2]),\n            .DIC(wr_buf_in_data[((i*6)+0)+:2]),\n            .DID(2'b0),\n            .ADDRA(rd_addr_w),\n            .ADDRB(rd_addr_w),\n            .ADDRC(rd_addr_w),\n            .ADDRD(wb_wr_data_addr_w),\n            .WE(wdf_rdy_ns),\n            .WCLK(clk)\n           );\n      end \n    end",
        "  generate\n    begin : write_buffer\n      wire [RAM_WIDTH-1:0] wr_buf_in_data;\n      if (REMAINDER == 0)\n        if (ECC_TEST == \"OFF\")\n          assign wr_buf_in_data = {app_wdf_mask_ns1, app_wdf_data_ns1};\n        else\n          assign wr_buf_in_data = \n                   {app_raw_not_ecc_r1, app_wdf_mask_ns1, app_wdf_data_ns1};\n      else\n        if (ECC_TEST == \"OFF\")\n          assign wr_buf_in_data =\n               {{6-REMAINDER{1'b0}}, app_wdf_mask_ns1, app_wdf_data_ns1};\n        else \n          assign wr_buf_in_data = {{6-REMAINDER{1'b0}}, app_raw_not_ecc_r1,\n                                   app_wdf_mask_ns1, app_wdf_data_ns1};\n\n      wire [4:0] rd_addr_w;\n\nassign rd_addr_w = {wr_data_addr, wr_data_offset};",
        "  reg [RAM_WIDTH-1:0] wr_buf_out_data;",
        "  localparam WR_BUF_WIDTH = \n               APP_DATA_WIDTH + APP_MASK_WIDTH + (ECC_TEST == \"OFF\" ? 0 : 2*nCK_PER_CLK);\n  localparam FULL_RAM_CNT = (WR_BUF_WIDTH/6);\n  localparam REMAINDER = WR_BUF_WIDTH % 6;\n  localparam RAM_CNT = FULL_RAM_CNT + ((REMAINDER == 0 ) ? 0 : 1);\n  localparam RAM_WIDTH = (RAM_CNT*6);\n  wire [RAM_WIDTH-1:0] wr_buf_out_data_w;",
        "  generate begin : pointer_ram\n      wire pointer_we = new_rd_data || ~ram_init_done_r;\n      wire [3:0] pointer_wr_data = ram_init_done_r\n                                    ? wr_data_addr_r\n                                    : ram_init_addr;\n      wire [3:0] pointer_wr_addr = ram_init_done_r\n                                    ? rd_data_indx_r\n                                    : ram_init_addr;\n      genvar i;\n      for (i=0; i<PNTR_RAM_CNT; i=i+1) begin : rams\n        RAM32M\n          #(.INIT_A(64'h0000000000000000),\n            .INIT_B(64'h0000000000000000),\n            .INIT_C(64'h0000000000000000),\n            .INIT_D(64'h0000000000000000)\n          ) RAM32M0 (\n            .DOA(),\n            .DOB(wr_data_buf_addr[i*2+:2]),\n            .DOC(wr_data_pntr[i*2+:2]),\n            .DOD(),\n            .DIA(2'b0),\n            .DIB(pointer_wr_data[i*2+:2]),\n            .DIC(pointer_wr_data[i*2+:2]),\n            .DID(2'b0),\n            .ADDRA(5'b0),\n            .ADDRB({1'b0, data_buf_addr_cnt_r}),\n            .ADDRC({1'b0, wr_data_indx_r}),\n            .ADDRD({1'b0, pointer_wr_addr}),\n            .WE(pointer_we),\n            .WCLK(clk)\n           );\n      end \n    end \n  endgenerate",
        "  localparam PNTR_RAM_CNT = 2;",
        "  output wire [3:0] wr_data_buf_addr;",
        "  input [3:0] ram_init_addr;",
        "`ifdef MC_SVA\n  wr_req_mc_full: cover property (@(posedge clk) (~rst && wr_req_16));\n  wr_req_mc_full_inc_dec_15: cover property (@(posedge clk)\n       (~rst && wr_accepted && rd_data_upd_indx_r && (wr_req_cnt_r == 5'hf)));\n  wr_req_underflow: assert property (@(posedge clk)\n         (rst || !((wr_req_cnt_r == 5'b0) && (wr_req_cnt_ns == 5'h1f))));\n  wr_req_overflow: assert property (@(posedge clk)\n         (rst || !((wr_req_cnt_r == 5'h10) && (wr_req_cnt_ns == 5'h11))));\n`endif",
        "      assign wr_req_16 = (wr_req_cnt_ns == 5'h10);",
        "      always @(posedge clk) wr_req_cnt_r <= #TCQ wr_req_cnt_ns;\n      assign wr_req_16 = (wr_req_cnt_ns == 5'h10);\n\n`ifdef MC_SVA\n  wr_req_mc_full: cover property (@(posedge clk) (~rst && wr_req_16));\n  wr_req_mc_full_inc_dec_15: cover property (@(posedge clk)\n       (~rst && wr_accepted && rd_data_upd_indx_r && (wr_req_cnt_r == 5'hf)));\n  wr_req_underflow: assert property (@(posedge clk)\n         (rst || !((wr_req_cnt_r == 5'b0) && (wr_req_cnt_ns == 5'h1f))));\n  wr_req_overflow: assert property (@(posedge clk)\n         (rst || !((wr_req_cnt_r == 5'h10) && (wr_req_cnt_ns == 5'h11))));\n`endif\n    end ",
        "      always @(rd_data_upd_indx_r or rst or wr_accepted\n               or wr_req_cnt_r) begin\n        wr_req_cnt_ns = wr_req_cnt_r;\n        if (rst) wr_req_cnt_ns = 5'b0;\n        else case ({wr_accepted, rd_data_upd_indx_r})\n               2'b01 : wr_req_cnt_ns = wr_req_cnt_r - 5'b1;\n               2'b10 : wr_req_cnt_ns = wr_req_cnt_r + 5'b1;\n             endcase \n      end",
        "  generate begin : wr_req_counter\n      reg [4:0] wr_req_cnt_ns;\n      reg [4:0] wr_req_cnt_r;",
        "`endif\n    end \n  endgenerate",
        "      assign app_wdf_rdy = app_wdf_rdy_r;",
        "      always @(posedge clk) app_wdf_rdy_r <= #TCQ wdf_rdy_ns;\n      assign app_wdf_rdy = app_wdf_rdy_r;\n\n`ifdef MC_SVA\n  wr_data_buffer_full: cover property (@(posedge clk)\n         (~rst && ~app_wdf_rdy_r));\n\n\n\n\n\n\n`endif\n    end ",
        "      assign wdf_rdy_ns = !(rst || ~ram_init_done_r || (occ_cnt[14] && wr_data_end && ~rd_data_upd_indx_r) || (occ_cnt[15] && ~rd_data_upd_indx_r));",
        "      always @(posedge clk) begin\n      \tif ( rst )\n\t   occ_cnt <= #TCQ 16'h0000;\n\telse case ({wr_data_end, rd_data_upd_indx_r})\n\t      2'b01 : occ_cnt <= #TCQ {1'b0,occ_cnt[15:1]};\n\t      2'b10 : occ_cnt <= #TCQ {occ_cnt[14:0],1'b1};\n             endcase \n      end",
        "  generate begin : occupied_counter\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      reg [15:0] occ_cnt;",
        "  endgenerate",
        "      assign wb_wr_data_addr = {wb_wr_data_addr_r, wb_wr_data_addr0_r};\n      assign wb_wr_data_addr_w = {wb_wr_data_addr_ns, wb_wr_data_addr0_ns};",
        "      always @(posedge clk) wb_wr_data_addr0_r <= #TCQ wb_wr_data_addr0_ns;\n\n      assign wb_wr_data_addr = {wb_wr_data_addr_r, wb_wr_data_addr0_r};\n      assign wb_wr_data_addr_w = {wb_wr_data_addr_ns, wb_wr_data_addr0_ns};\n\n    end",
        "      always @(posedge clk) wb_wr_data_addr_r <= #TCQ wb_wr_data_addr_ns;",
        "      always @(rst or wb_wr_data_addr_r or wr_data_addr_le\n               or wr_data_pntr) begin\n        wb_wr_data_addr_ns = wb_wr_data_addr_r;\n        if (rst) wb_wr_data_addr_ns = 4'b0;\n        else if (wr_data_addr_le) wb_wr_data_addr_ns = wr_data_pntr;\n      end",
        "      always @(posedge clk) wr_data_indx_r <= #TCQ wr_data_indx_ns;",
        "      always @(rst or wr_data_addr_le or wr_data_indx_r) begin\n        wr_data_indx_ns = wr_data_indx_r;\n        if (rst) wr_data_indx_ns = 4'b1;\n        else if (wr_data_addr_le) wr_data_indx_ns = wr_data_indx_r + 4'h1;\n      end",
        "  generate begin : write_data_control\n\n      wire wr_data_addr_le = (wr_data_end && wdf_rdy_ns) ||\n                             (rd_data_upd_indx_r && ~app_wdf_rdy_r_copy1);\n",
        "  always @( posedge clk ) begin\n  \tapp_wdf_rdy_r_copy1 <= #TCQ wdf_rdy_ns;\n  \tapp_wdf_rdy_r_copy2 <= #TCQ wdf_rdy_ns;\n  \tapp_wdf_rdy_r_copy3 <= #TCQ wdf_rdy_ns;\n  \tapp_wdf_rdy_r_copy4 <= #TCQ wdf_rdy_ns;\n  end",
        "  endgenerate",
        "      always @(posedge clk) data_buf_addr_cnt_r <= #TCQ data_buf_addr_cnt_ns;\n",
        "      always @(data_buf_addr_cnt_r or rst or wr_accepted) begin\n        data_buf_addr_cnt_ns = data_buf_addr_cnt_r;\n        if (rst) data_buf_addr_cnt_ns = 4'b0;\n        else if (wr_accepted) data_buf_addr_cnt_ns =\n                                data_buf_addr_cnt_r + 4'h1;\n      end",
        "  generate begin : data_buf_address_counter\n\n      reg [3:0] data_buf_addr_cnt_ns;",
        "  endgenerate",
        "      always @(posedge clk) rd_data_upd_indx_r <= #TCQ new_rd_data;\n    end",
        "      always @(posedge clk) rd_data_indx_r <= #TCQ rd_data_indx_ns;",
        "      always @(new_rd_data or rd_data_indx_r or rst) begin\n        rd_data_indx_ns = rd_data_indx_r;\n        if (rst) rd_data_indx_ns = 5'b0;\n        else if (new_rd_data) rd_data_indx_ns = rd_data_indx_r + 5'h1;\n      end",
        "  generate begin : read_data_indx\n      reg [3:0] rd_data_indx_ns;",
        "  endgenerate",
        "      always @(posedge clk) wr_data_addr_r <= #TCQ wr_data_addr;\n    end",
        "      always @(posedge clk) wr_data_offset_r <= #TCQ wr_data_offset;",
        "    else begin : delay_wr_addr",
        "      always @(wr_data_addr) wr_data_addr_r = wr_data_addr;\n    end",
        "      always @(wr_data_offset) wr_data_offset_r = wr_data_offset;",
        "  generate\n    if (ECC == \"OFF\" || CWL >= 0) begin : pass_wr_addr\n      always @(wr_data_offset) wr_data_offset_r = wr_data_offset;",
        "  always @(posedge clk) begin\n      app_wdf_data_r1 <= #TCQ app_wdf_data_ns1;\n      app_wdf_mask_r1 <= #TCQ app_wdf_mask_ns1;\n      app_wdf_wren_r1 <= #TCQ app_wdf_wren_ns1;\n      app_wdf_end_r1 <= #TCQ app_wdf_end_ns1;\n  end",
        "  endgenerate\n",
        "        always @(app_raw_not_ecc) app_raw_not_ecc_r1 = app_raw_not_ecc;\n    end",
        "  generate\n    if (ECC_TEST != \"OFF\") begin : ecc_on"
    ]
}