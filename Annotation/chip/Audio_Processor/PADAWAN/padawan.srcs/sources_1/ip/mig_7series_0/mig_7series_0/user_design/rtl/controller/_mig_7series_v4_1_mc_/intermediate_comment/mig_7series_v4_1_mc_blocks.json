{
    "line_num": [
        [
            981,
            981
        ],
        [
            965,
            975
        ],
        [
            956,
            958
        ],
        [
            941,
            955
        ],
        [
            939,
            939
        ],
        [
            935,
            937
        ],
        [
            931,
            934
        ],
        [
            916,
            928
        ],
        [
            889,
            913
        ],
        [
            827,
            887
        ],
        [
            815,
            825
        ],
        [
            813,
            813
        ],
        [
            753,
            806
        ],
        [
            627,
            670
        ],
        [
            560,
            621
        ],
        [
            554,
            554
        ],
        [
            553,
            553
        ],
        [
            552,
            552
        ],
        [
            545,
            545
        ],
        [
            544,
            544
        ],
        [
            543,
            543
        ],
        [
            501,
            532
        ],
        [
            471,
            495
        ],
        [
            467,
            470
        ],
        [
            456,
            461
        ]
    ],
    "blocks": [
        "  endgenerate",
        "      always @(negedge rst) begin\n      \n        $display (\"**********************************************\");\n        $display (\"H Matrix:\");\n\n        for (i=0; i<ECC_WIDTH; i=i+1)\n          $display (\"%b\", h_rows[i*CODE_WIDTH+:CODE_WIDTH]);\n       \n       $display (\"**********************************************\");\n      \n      end",
        "     else begin : gen_wrdata_passthru\n       assign mc_wrdata = mc_wrdata_i;\n     end",
        "        mig_7series_v4_1_fi_xor #(\n          .DQ_WIDTH (DQ_WIDTH),\n          .DQS_WIDTH (DQS_WIDTH),\n          .nCK_PER_CLK (nCK_PER_CLK)\n        )\n        fi_xor0\n        (\n          .clk (clk),\n          .wrdata_in (mc_wrdata_i),\n          .wrdata_out (mc_wrdata),\n          .wrdata_en (mc_wrdata_en_i),\n          .fi_xor_we (fi_xor_we),\n          .fi_xor_wrdata (fi_xor_wrdata)\n        );\n     end",
        "        assign mc_wrdata_en_i = mc_wrdata_en_r;",
        "        always @(posedge clk) begin\n          mc_wrdata_en_r <= mc_wrdata_en;\n        end",
        "      if (ECC == \"ON\") begin : gen_fi_xor_inst\n        reg mc_wrdata_en_r; \n        wire mc_wrdata_en_i;\n",
        "      mig_7series_v4_1_ecc_gen #\n        (\n          \n          .CODE_WIDTH               (CODE_WIDTH),\n          .DATA_WIDTH               (DATA_WIDTH),\n          .ECC_WIDTH                (ECC_WIDTH)\n        )\n        ecc_gen0\n          (\n            \n            .h_rows                 (h_rows)\n          );\n",
        "      \n      mig_7series_v4_1_ecc_buf #\n        (\n          \n          .TCQ                      (TCQ),\n          .DATA_BUF_ADDR_WIDTH      (DATA_BUF_ADDR_WIDTH),\n          .DATA_BUF_OFFSET_WIDTH    (DATA_BUF_OFFSET_WIDTH),\n          .DATA_WIDTH               (DATA_WIDTH),\n          .PAYLOAD_WIDTH            (PAYLOAD_WIDTH),\n          .nCK_PER_CLK              (nCK_PER_CLK)\n        )\n        ecc_buf0\n          (           \n            \n            .rd_merge_data          (rd_merge_data),\n            \n            .clk                    (clk),\n            .rst                    (rst),\n            .rd_data                (rd_data),\n            .rd_data_addr           (rd_data_addr),\n            .rd_data_offset         (rd_data_offset),\n            .wr_data_addr           (wr_data_addr),\n            .wr_data_offset         (wr_data_offset),\n            .wr_ecc_buf             (wr_ecc_buf)\n          );",
        "    else begin : ecc_on\n      \n      wire [CODE_WIDTH*ECC_WIDTH-1:0] h_rows;\n      wire [2*nCK_PER_CLK*DATA_WIDTH-1:0] rd_merge_data;\n      wire [2*nCK_PER_CLK*DQ_WIDTH-1:0] mc_wrdata_i;\n\n      \n      \n      mig_7series_v4_1_ecc_merge_enc #\n        (\n          \n          .TCQ                      (TCQ),\n          .CODE_WIDTH               (CODE_WIDTH),\n          .DATA_BUF_ADDR_WIDTH      (DATA_BUF_ADDR_WIDTH),\n          .DATA_WIDTH               (DATA_WIDTH),\n          .DQ_WIDTH                 (DQ_WIDTH),\n          .ECC_WIDTH                (ECC_WIDTH),\n          .PAYLOAD_WIDTH            (PAYLOAD_WIDTH),\n          .nCK_PER_CLK              (nCK_PER_CLK)\n        )\n        ecc_merge_enc0\n          (\n            \n            .mc_wrdata              (mc_wrdata_i),\n            .mc_wrdata_mask         (mc_wrdata_mask),\n            \n            .clk                    (clk),\n            .rst                    (rst),\n            .h_rows                 (h_rows),\n            .rd_merge_data          (rd_merge_data),\n            .raw_not_ecc            (raw_not_ecc),\n            .wr_data                (wr_data),\n            .wr_data_mask           (wr_data_mask)\n          );\n\n      \n      mig_7series_v4_1_ecc_dec_fix #\n        (\n          \n          .TCQ                      (TCQ),\n          .CODE_WIDTH               (CODE_WIDTH), \n          .DATA_WIDTH               (DATA_WIDTH),\n          .DQ_WIDTH                 (DQ_WIDTH),\n          .ECC_WIDTH                (ECC_WIDTH),\n          .PAYLOAD_WIDTH            (PAYLOAD_WIDTH),\n          .nCK_PER_CLK              (nCK_PER_CLK)\n        )\n        ecc_dec_fix0\n          (\n            \n            .ecc_multiple           (ecc_multiple), \n            .ecc_single             (ecc_single),\n            .rd_data                (rd_data),\n            \n            .clk                    (clk),\n            .rst                    (rst),\n            .correct_en             (correct_en),\n            .phy_rddata             (phy_rd_data),          \n            .ecc_status_valid       (ecc_status_valid),\n            .h_rows                 (h_rows)\n          );",
        "  generate\n\n    if (ECC == \"OFF\") begin : ecc_off\n    \n      assign rd_data = phy_rd_data;\n      assign mc_wrdata = wr_data;\n      assign mc_wrdata_mask = wr_data_mask;\n      assign ecc_single = 4'b0;\n      assign ecc_multiple = 4'b0;\n    \n    end",
        "  localparam CODE_WIDTH = DATA_WIDTH + ECC_WIDTH;",
        "  mig_7series_v4_1_col_mach #\n    (\n      \n      .TCQ                     (TCQ),\n      .BANK_WIDTH              (BANK_WIDTH),\n      .BURST_MODE              (BURST_MODE),\n      .COL_WIDTH               (COL_WIDTH),\n      .CS_WIDTH                (CS_WIDTH),\n      .DATA_BUF_ADDR_WIDTH     (DATA_BUF_ADDR_WIDTH),\n      .DATA_BUF_OFFSET_WIDTH   (DATA_BUF_OFFSET_WIDTH),\n      .DELAY_WR_DATA_CNTRL     (DELAY_WR_DATA_CNTRL),\n      .DQS_WIDTH               (DQS_WIDTH),\n      .DRAM_TYPE               (DRAM_TYPE),\n      .EARLY_WR_DATA_ADDR      (EARLY_WR_DATA_ADDR),\n      .ECC                     (ECC),\n      .MC_ERR_ADDR_WIDTH       (MC_ERR_ADDR_WIDTH),\n      .nCK_PER_CLK             (nCK_PER_CLK),\n      .nPHY_WRLAT              (nPHY_WRLAT),\n      .RANK_WIDTH              (RANK_WIDTH),\n      .ROW_WIDTH               (ROW_WIDTH)\n    )\n    col_mach0\n      (\n        \n        .mc_wrdata_en         (mc_wrdata_en_ns),\n        .dq_busy_data         (dq_busy_data),\n        .ecc_err_addr         (ecc_err_addr[MC_ERR_ADDR_WIDTH-1:0]),\n        .ecc_status_valid     (ecc_status_valid),\n        .rd_data_addr         (rd_data_addr[DATA_BUF_ADDR_WIDTH-1:0]),\n        .rd_data_en           (rd_data_en),\n        .rd_data_end          (rd_data_end),\n        .rd_data_offset       (rd_data_offset),\n        .rd_rmw               (rd_rmw),\n        .wr_data_addr         (wr_data_addr_ns),\n        .wr_data_en           (wr_data_en_ns),\n        .wr_data_offset       (wr_data_offset_ns),\n        .wr_ecc_buf           (wr_ecc_buf),\n        .col_read_fifo_empty  (col_read_fifo_empty),\n        \n        .clk                  (clk),\n        .rst                  (rst),\n        .col_a                (col_a[ROW_WIDTH-1:0]),\n        .col_ba               (col_ba[BANK_WIDTH-1:0]),\n        .col_data_buf_addr    (col_data_buf_addr[DATA_BUF_ADDR_WIDTH-1:0]),\n        .col_periodic_rd      (col_periodic_rd),\n        .col_ra               (col_ra[RANK_WIDTH-1:0]),\n        .col_rmw              (col_rmw),\n        .col_rd_wr            (col_rd_wr),\n        .col_row              (col_row[ROW_WIDTH-1:0]),\n        .col_size             (col_size),\n        .col_wr_data_buf_addr (col_wr_data_buf_addr[DATA_BUF_ADDR_WIDTH-1:0]),\n        .phy_rddata_valid     (phy_rddata_valid),\n        .sent_col             (EVEN_CWL_2T_MODE == \"ON\" ? sent_col_r : sent_col)\n      );",
        "  mig_7series_v4_1_bank_mach #\n    (\n      \n      .TCQ                     (TCQ),\n      .EVEN_CWL_2T_MODE        (EVEN_CWL_2T_MODE),\n      .ADDR_CMD_MODE           (ADDR_CMD_MODE),\n      .BANK_WIDTH              (BANK_WIDTH),\n      .BM_CNT_WIDTH            (BM_CNT_WIDTH),\n      .BURST_MODE              (BURST_MODE),\n      .COL_WIDTH               (COL_WIDTH),\n      .CS_WIDTH                (CS_WIDTH),\n      .CL                      (CL_M),\n      .CWL                     (CWL_M),\n      .CKE_ODT_AUX             (CKE_ODT_AUX),\n      .DATA_BUF_ADDR_WIDTH     (DATA_BUF_ADDR_WIDTH),\n      .DRAM_TYPE               (DRAM_TYPE),\n      .EARLY_WR_DATA_ADDR      (EARLY_WR_DATA_ADDR),\n      .ECC                     (ECC),\n      .LOW_IDLE_CNT            (LOW_IDLE_CNT),\n      .nBANK_MACHS             (nBANK_MACHS),\n      .nCK_PER_CLK             (nCK_PER_CLK),\n      .nCS_PER_RANK            (nCS_PER_RANK),\n      .nOP_WAIT                (nOP_WAIT),\n      .nRAS                    (nRAS),\n      .nRCD                    (nRCD),\n      .nRFC                    (nRFC),\n      .nRP                     (nRP),\n      .nRTP                    (nRTP),\n      .nSLOTS                  (nSLOTS),\n      .nWR                     (nWR),\n      .nXSDLL                  (tXSDLL),\n      .ORDERING                (ORDERING),\n      .RANK_BM_BV_WIDTH        (RANK_BM_BV_WIDTH),\n      .RANK_WIDTH              (RANK_WIDTH),\n      .RANKS                   (RANKS),\n      .ROW_WIDTH               (ROW_WIDTH),\n      .RTT_NOM                 (RTT_NOM),\n      .RTT_WR                  (RTT_WR),\n      .SLOT_0_CONFIG           (SLOT_0_CONFIG),\n      .SLOT_1_CONFIG           (SLOT_1_CONFIG),\n      .STARVE_LIMIT            (STARVE_LIMIT),\n      .tZQCS                   (tZQCS)\n    )\n    bank_mach0",
        "  mig_7series_v4_1_rank_mach #\n    (\n      \n      .BURST_MODE             (BURST_MODE),\n      .CL                     (CL),\n      .CWL                    (CWL),\n      .CS_WIDTH               (CS_WIDTH),\n      .DQRD2DQWR_DLY          (DQRD2DQWR_DLY),\n      .DRAM_TYPE              (DRAM_TYPE),\n      .MAINT_PRESCALER_DIV    (MAINT_PRESCALER_DIV),\n      .nBANK_MACHS            (nBANK_MACHS),\n      .nCKESR                 (nCKESR),\n      .nCK_PER_CLK            (nCK_PER_CLK),\n      .nFAW                   (nFAW),\n      .nREFRESH_BANK          (nREFRESH_BANK),\n      .nRRD                   (nRRD),\n      .nWTR                   (nWTR),\n      .PERIODIC_RD_TIMER_DIV  (PERIODIC_RD_TIMER_DIV),\n      .RANK_BM_BV_WIDTH       (RANK_BM_BV_WIDTH),\n      .RANK_WIDTH             (RANK_WIDTH),\n      .RANKS                  (RANKS),\n      .REFRESH_TIMER_DIV      (REFRESH_TIMER_DIV),\n      .ZQ_TIMER_DIV           (ZQ_TIMER_DIV)\n    )\n    rank_mach0\n      (\n        \n        .inhbt_act_faw_r      (inhbt_act_faw_r[RANKS-1:0]),\n        .inhbt_rd             (inhbt_rd[RANKS-1:0]),\n        .inhbt_wr             (inhbt_wr[RANKS-1:0]),\n        .maint_rank_r         (maint_rank_r[RANK_WIDTH-1:0]),\n        .maint_req_r          (maint_req_r),\n        .maint_zq_r           (maint_zq_r),\n        .maint_sre_r          (maint_sre_r),\n        .maint_srx_r          (maint_srx_r),\n        .maint_ref_zq_wip     (maint_ref_zq_wip),\n        .periodic_rd_r        (periodic_rd_r),\n        .periodic_rd_rank_r   (periodic_rd_rank_r[RANK_WIDTH-1:0]),\n        \n        .act_this_rank_r      (act_this_rank_r[RANK_BM_BV_WIDTH-1:0]),\n        .app_periodic_rd_req  (app_periodic_rd_req),\n        .app_ref_req          (app_ref_req),\n        .app_ref_ack          (app_ref_ack),\n        .app_zq_req           (app_zq_req),\n        .app_zq_ack           (app_zq_ack),\n        .app_sr_req           (app_sr_req),\n        .app_sr_active        (app_sr_active),\n        .col_rd_wr            (col_rd_wr),\n        .clk                  (clk),\n        .init_calib_complete  (init_calib_complete),\n        .insert_maint_r1      (insert_maint_r1),\n        .maint_wip_r          (maint_wip_r),\n        .periodic_rd_ack_r    (periodic_rd_ack_r),\n        .rank_busy_r          (rank_busy_r[(RANKS*nBANK_MACHS)-1:0]),\n        .rd_this_rank_r       (rd_this_rank_r[RANK_BM_BV_WIDTH-1:0]),\n        .rst                  (rst),\n        .sending_col          (sending_col[nBANK_MACHS-1:0]),\n        .sending_row          (sending_row[nBANK_MACHS-1:0]),\n        .slot_0_present       (slot_0_present[7:0]),\n        .slot_1_present       (slot_1_present[7:0]),\n        .wr_this_rank_r       (wr_this_rank_r[RANK_BM_BV_WIDTH-1:0])\n      );",
        "  assign mc_ref_zq_wip = mc_ref_zq_wip_r;",
        "  always @(posedge clk) mc_ref_zq_wip_r <= mc_ref_zq_wip_ns;",
        "  assign mc_ref_zq_wip_ns = maint_ref_zq_wip && col_read_fifo_empty;",
        "  assign mc_read_idle = mc_read_idle_r;",
        "  always @(posedge clk) mc_read_idle_r <= #TCQ mc_read_idle_ns;",
        "  assign mc_read_idle_ns = col_read_fifo_empty & init_calib_complete;",
        "      always @( mc_address_ns or mc_aux_out0_ns or mc_aux_out1_ns or\n                mc_bank_ns or mc_cas_n_ns or mc_cmd_ns or mc_cs_n_ns or\n                mc_odt_ns or mc_cke_ns or mc_data_offset_ns or\n                mc_data_offset_1_ns or mc_data_offset_2_ns or mc_rank_cnt_ns or\n                mc_ras_n_ns or mc_we_n_ns or mc_wrdata_en_ns or \n                wr_data_addr_ns or wr_data_en_ns or wr_data_offset_ns or\n                mc_cas_slot_ns)\n      begin\n\n        mc_address = #TCQ mc_address_ns;\n        mc_bank = #TCQ mc_bank_ns;\n        mc_cas_n = #TCQ mc_cas_n_ns;\n        mc_cs_n = #TCQ mc_cs_n_ns;\n        mc_odt  = #TCQ mc_odt_ns;\n        mc_cke  = #TCQ mc_cke_ns;\n        mc_aux_out0 = #TCQ mc_aux_out0_ns;\n        mc_aux_out1 = #TCQ mc_aux_out1_ns;\n        mc_cmd = #TCQ mc_cmd_ns;\n        mc_ras_n = #TCQ mc_ras_n_ns;\n        mc_we_n = #TCQ mc_we_n_ns;\n        mc_data_offset = #TCQ mc_data_offset_ns;\n        mc_data_offset_1 = #TCQ mc_data_offset_1_ns;\n        mc_data_offset_2 = #TCQ mc_data_offset_2_ns;\n        mc_cas_slot = #TCQ mc_cas_slot_ns;\n        mc_wrdata_en = #TCQ mc_wrdata_en_ns;\n        mc_rank_cnt = #TCQ mc_rank_cnt_ns;\n\n        wr_data_addr = #TCQ wr_data_addr_ns;\n        wr_data_en = #TCQ wr_data_en_ns;\n        wr_data_offset = #TCQ wr_data_offset_ns;\n\n      end ",
        "      always @(posedge clk) begin\n       \n        mc_address <= #TCQ mc_address_ns;\n        mc_bank <= #TCQ mc_bank_ns;\n        mc_cas_n <= #TCQ mc_cas_n_ns;\n        mc_cs_n <= #TCQ mc_cs_n_ns;\n        mc_odt  <= #TCQ mc_odt_ns;\n        mc_cke  <= #TCQ mc_cke_ns;\n        mc_aux_out0 <= #TCQ mc_aux_out0_ns;\n        mc_aux_out1 <= #TCQ mc_aux_out1_ns;\n        mc_cmd <= #TCQ mc_cmd_ns;\n        mc_ras_n <= #TCQ mc_ras_n_ns;\n        mc_we_n <= #TCQ mc_we_n_ns;\n        mc_data_offset <= #TCQ mc_data_offset_ns;\n        mc_data_offset_1 <= #TCQ mc_data_offset_1_ns;\n        mc_data_offset_2 <= #TCQ mc_data_offset_2_ns;\n        mc_cas_slot <= #TCQ mc_cas_slot_ns;\n        mc_wrdata_en <= #TCQ mc_wrdata_en_ns;\n        mc_rank_cnt <= #TCQ mc_rank_cnt_ns;\n\n        wr_data_addr <= #TCQ wr_data_addr_ns;\n        wr_data_en <= #TCQ wr_data_en_ns;\n        wr_data_offset <= #TCQ wr_data_offset_ns;\n\n      end ",
        "  generate\n    \n    if (CMD_PIPE_PLUS1 == \"ON\") begin : cmd_pipe_plus \n",
        "  function integer cdiv (input integer num, input integer div);\n    begin\n      \n      cdiv = (num/div) + (((num%div)>0) ? 1 : 0);\n    end\n  endfunction "
    ]
}