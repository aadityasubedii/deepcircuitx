{
    "line_num": [
        [
            514,
            514
        ],
        [
            508,
            512
        ],
        [
            502,
            506
        ],
        [
            496,
            496
        ],
        [
            490,
            494
        ],
        [
            484,
            488
        ],
        [
            474,
            477
        ],
        [
            470,
            470
        ],
        [
            465,
            468
        ],
        [
            460,
            464
        ],
        [
            454,
            454
        ],
        [
            449,
            452
        ],
        [
            444,
            448
        ],
        [
            435,
            435
        ],
        [
            430,
            433
        ],
        [
            425,
            428
        ],
        [
            422,
            424
        ],
        [
            416,
            416
        ],
        [
            411,
            414
        ],
        [
            406,
            409
        ],
        [
            403,
            405
        ],
        [
            394,
            394
        ],
        [
            389,
            392
        ],
        [
            384,
            387
        ],
        [
            378,
            378
        ],
        [
            373,
            376
        ],
        [
            368,
            371
        ],
        [
            358,
            364
        ],
        [
            357,
            357
        ],
        [
            353,
            353
        ],
        [
            351,
            351
        ],
        [
            332,
            332
        ],
        [
            330,
            330
        ],
        [
            329,
            331
        ],
        [
            308,
            328
        ],
        [
            302,
            302
        ],
        [
            300,
            300
        ],
        [
            298,
            298
        ],
        [
            295,
            295
        ],
        [
            275,
            275
        ],
        [
            273,
            273
        ],
        [
            268,
            268
        ],
        [
            266,
            266
        ],
        [
            264,
            265
        ],
        [
            259,
            259
        ],
        [
            256,
            257
        ],
        [
            252,
            254
        ],
        [
            250,
            251
        ],
        [
            249,
            249
        ],
        [
            247,
            247
        ],
        [
            246,
            246
        ],
        [
            242,
            244
        ],
        [
            230,
            240
        ],
        [
            228,
            228
        ],
        [
            221,
            221
        ],
        [
            217,
            217
        ],
        [
            203,
            213
        ],
        [
            201,
            201
        ],
        [
            200,
            200
        ],
        [
            199,
            215
        ],
        [
            190,
            198
        ],
        [
            181,
            182
        ],
        [
            170,
            179
        ],
        [
            168,
            168
        ],
        [
            165,
            165
        ],
        [
            161,
            164
        ],
        [
            153,
            157
        ],
        [
            134,
            152
        ],
        [
            132,
            158
        ]
    ],
    "blocks": [
        "          assign col_channel_offset = 3;",
        "          always @(sent_col_lcl) begin\n            cs_en3 = sent_col_lcl;\n            send_cmd2_col = sent_col_lcl;\n            send_cmd3_col = sent_col_lcl;\n          end",
        "          always @(sent_row_or_maint) begin\n            cs_en1 = sent_row_or_maint;\n            send_cmd0_row = sent_row_or_maint;\n            send_cmd1_row = sent_row_or_maint;\n          end",
        "          assign col_channel_offset = 0;",
        "          always @(sent_row_or_maint) begin\n            cs_en2 = sent_row_or_maint;\n            send_cmd1_row = sent_row_or_maint;\n            send_cmd2_row = sent_row_or_maint;\n          end",
        "          always @(sent_col_lcl or sent_col_lcl_r) begin\n            cs_en0 = sent_col_lcl_r;\n            send_cmd0_col = sent_col_lcl_r;\n            send_cmd3_col = sent_col_lcl;\n          end",
        "        always @(sent_pre_lcl) begin\n          cs_en2 = sent_pre_lcl;\n          send_cmd2_pre = sent_pre_lcl;\n        end",
        "          assign col_channel_offset = 1;",
        "          always @(sent_col_lcl) begin\n            cs_en1 = sent_col_lcl;\n            send_cmd1_col = sent_col_lcl;\n          end",
        "          always @(sent_row_or_maint) begin\n            cs_en0 = sent_row_or_maint;\n            send_cmd0_row = sent_row_or_maint;\n          end\n          ",
        "          assign col_channel_offset = 0;",
        "          always @(sent_row_or_maint) begin\n            cs_en1 = sent_row_or_maint;\n            send_cmd1_row = sent_row_or_maint;\n          end",
        "          always @(sent_col_lcl) begin\n            cs_en0 = sent_col_lcl;\n            send_cmd0_col = sent_col_lcl;\n          end\n",
        "          assign col_channel_offset = 1;",
        "          always @(sent_col_lcl) begin\n            send_cmd0_col = sent_col_lcl;\n            send_cmd1_col = sent_col_lcl;\n          end",
        "          always @(sent_row_or_maint) begin\n            send_cmd0_row = sent_row_or_maint;\n            send_cmd1_row = sent_row_or_maint;\n          end",
        "          always @(sent_col_lcl or sent_row_or_maint)\n            cs_en1 = sent_row_or_maint || sent_col_lcl;\n",
        "          assign col_channel_offset = 0;",
        "          always @(sent_col_lcl or sent_col_lcl_r) begin\n            send_cmd0_col = sent_col_lcl_r;\n            send_cmd1_col = sent_col_lcl;\n          end",
        "          always @(sent_row_or_maint or sent_row_or_maint_r) begin\n            send_cmd0_row = sent_row_or_maint_r;\n            send_cmd1_row = sent_row_or_maint;\n          end",
        "          always @(sent_row_or_maint_r or sent_col_lcl_r)\n            cs_en0 = sent_row_or_maint_r || sent_col_lcl_r;\n",
        "          assign col_channel_offset = 1;",
        "          always @(sent_col_lcl) begin \n            cs_en1 = sent_col_lcl;\n            send_cmd1_col = sent_col_lcl;\n          end",
        "          always @(sent_row_or_maint) begin \n            cs_en0 = sent_row_or_maint;\n            send_cmd0_row = sent_row_or_maint;\n          end",
        "          assign col_channel_offset = 0;",
        "          always @(sent_row_or_maint) begin\n            cs_en1 = sent_row_or_maint;\n            send_cmd1_row = sent_row_or_maint;\n          end",
        "          always @(sent_col_lcl) begin\n            cs_en0 = sent_col_lcl;\n            send_cmd0_col = sent_col_lcl;\n          end",
        "  generate\n    case ({(nCK_PER_CLK == 4), (nCK_PER_CLK == 2), (ADDR_CMD_MODE == \"2T\")})\n      3'b000 : begin : one_one_not2T\n      end\n      3'b001 : begin : one_one_2T\n      end\n      3'b010 : begin : two_one_not2T",
        "  always @(posedge clk) sent_row_or_maint_r <= #TCQ sent_row_or_maint;",
        "  assign insert_maint_r1 = insert_maint_r1_lcl;",
        "  always @(posedge clk) insert_maint_r1_lcl <= #TCQ insert_maint_r;",
        "  endgenerate",
        "      assign grant_col_wr = grant_col_wr_ns;",
        "      always @(posedge clk) grant_col_wr_r <= #TCQ grant_col_wr_ns;\n      assign grant_col_wr = grant_col_wr_ns;\n    end ",
        "  generate\n    if (EARLY_WR_DATA_ADDR == \"OFF\") begin : early_wr_addr_arb_off\n      assign grant_col_wr = {nBANK_MACHS{1'b0}};\n    end\n    else begin : early_wr_addr_arb_on\n      wire [nBANK_MACHS-1:0] grant_col_wr_raw;\n      mig_7series_v4_1_round_robin_arb #\n        (.WIDTH                           (nBANK_MACHS))\n        col_arb0\n          (.grant_ns                      (grant_col_wr_raw),\n           .grant_r                       (),\n           .upd_last_master               (sent_col_lcl),\n           .current_master                (grant_col_r_lcl[nBANK_MACHS-1:0]),\n           .clk                           (clk),\n           .rst                           (rst),\n           .req                           (col_rdy_wr),\n           .disable_grant                 (1'b0));\n      reg [nBANK_MACHS-1:0] grant_col_wr_r;\n      wire [nBANK_MACHS-1:0] grant_col_wr_ns = granted_col_ns\n                                                 ? grant_col_wr_raw\n                                                 : grant_col_wr_r;",
        "  assign sent_col_r = sent_col_lcl_r;",
        "  assign sent_col = sent_col_lcl;",
        "  always @(posedge clk) sent_col_lcl_r <= #TCQ sent_col_lcl;",
        "  assign sending_col = grant_col_r_lcl & {nBANK_MACHS{~block_grant_col}};",
        "  always @(posedge clk) granted_col_r <= #TCQ granted_col_ns;",
        "  assign grant_col_r = grant_col_r_lcl;",
        "  assign rnk_config_valid_r = rnk_config_valid_r_lcl;",
        "  always @(posedge clk) rnk_config_valid_r_lcl <= #TCQ rnk_config_valid_ns;",
        "  assign rnk_config_valid_ns =\n          ~rst && (rnk_config_valid_r_lcl || rnk_config_strobe_ns);",
        "  assign upd_rnk_config_last_master = rnk_config_strobe_r[0];",
        "  output wire rnk_config_strobe;\n  assign rnk_config_strobe = rnk_config_strobe_r[0];",
        "      always @(posedge clk)\n        rnk_config_strobe_r[i] <= #TCQ rnk_config_strobe_r[i-1];\n  endgenerate",
        "  generate\n    for(i = 1; i < RNK2RNK_DLY_CLKS; i = i + 1)",
        "  genvar i;",
        "  always @(posedge clk) rnk_config_strobe_r[0] <= #TCQ rnk_config_strobe_ns;",
        "  wire rnk_config_strobe_ns = ~rnk_config_strobe_r[0] && |rtc && ~granted_col_ns;",
        "`ifdef MC_SVA\n  all_bank_machines_config_arb: cover property (@(posedge clk) (~rst && &rtc));\n`endif",
        "  mig_7series_v4_1_round_robin_arb #\n   (.WIDTH                              (nBANK_MACHS))\n    config_arb0\n    (.grant_ns                          (),\n     .grant_r                           (grant_config_r_lcl[nBANK_MACHS-1:0]),\n     .upd_last_master                   (upd_rnk_config_last_master),\n     .current_master                    (grant_config_r_lcl[nBANK_MACHS-1:0]),\n     .clk                               (clk),\n     .rst                               (rst),\n     .req                               (rtc[nBANK_MACHS-1:0]),\n     .disable_grant                     (1'b0));",
        "  assign grant_config_r = grant_config_r_lcl;",
        "    cover property (@(posedge clk) (~rst && &rts_row));",
        "  endgenerate",
        "      mig_7series_v4_1_round_robin_arb #\n       (.WIDTH                              (nBANK_MACHS))\n        pre_arb0\n        (.grant_ns                          (),\n         .grant_r                           (grant_pre_r_lcl[nBANK_MACHS-1:0]),\n         .upd_last_master                   (sent_pre_lcl),\n         .current_master                    (grant_pre_r_lcl[nBANK_MACHS-1:0]),\n         .clk                               (clk),\n         .rst                               (rst),\n         .req                               (rts_pre),\n         .disable_grant                     (1'b0));",
        "      assign sending_pre = grant_pre_r_lcl;",
        "      assign sent_pre_lcl = granted_pre_r;",
        "      always @(posedge clk) granted_pre_r <= #TCQ granted_pre_ns;\n      assign sent_pre_lcl = granted_pre_r;\n      assign sending_pre = grant_pre_r_lcl;\n\n      mig_7series_v4_1_round_robin_arb #\n       (.WIDTH                              (nBANK_MACHS))\n        pre_arb0\n        (.grant_ns                          (),\n         .grant_r                           (grant_pre_r_lcl[nBANK_MACHS-1:0]),\n         .upd_last_master                   (sent_pre_lcl),\n         .current_master                    (grant_pre_r_lcl[nBANK_MACHS-1:0]),\n         .clk                               (clk),\n         .rst                               (rst),\n         .req                               (rts_pre),\n         .disable_grant                     (1'b0));\n\n    end",
        "  generate\n  \n    if((nCK_PER_CLK == 4) && (ADDR_CMD_MODE != \"2T\")) begin : pre_4_1_1T_arb\n    \n      reg granted_pre_r;\n      wire[nBANK_MACHS-1:0] grant_pre_r_lcl;\n\n      wire granted_pre_ns = |rts_pre;\n      assign grant_pre_r = grant_pre_r_lcl;",
        "  output wire [nBANK_MACHS-1:0] sending_row;\n  assign sending_row = grant_row_r_lcl & {nBANK_MACHS{~block_grant_row}};",
        "   (.WIDTH                              (nBANK_MACHS))\n    row_arb0\n    (.grant_ns                          (),\n     .grant_r                           (grant_row_r_lcl[nBANK_MACHS-1:0]),\n     .upd_last_master                   (sent_row_lcl),\n     .current_master                    (grant_row_r_lcl[nBANK_MACHS-1:0]),\n     .clk                               (clk),\n     .rst                               (rst),\n     .req                               (row_request),\n     .disable_grant                     (1'b0));",
        "  assign sent_row = sent_row_lcl;",
        "  always @(posedge clk) granted_row_r <= #TCQ granted_row_ns;",
        "  wire[nBANK_MACHS-1:0] grant_row_r_lcl;\n  output wire[nBANK_MACHS-1:0] grant_row_r;\n  assign grant_row_r = grant_row_r_lcl;\n  reg granted_row_r;",
        "    else begin : row_col_1T_arb\n      assign col_request = rts_col & {nBANK_MACHS{~rnk_config_kill_rts_col_lcl}};\n      assign block_grant_row = 1'b0;\n      assign block_grant_col = 1'b0;\n    end",
        "      assign col_request =\n        rts_col & {nBANK_MACHS{~(rnk_config_kill_rts_col_lcl || insert_maint_r)}};\n\n      wire [1:0] row_col_grant;\n      wire [1:0] current_master = ~granted_row_ns ? 2'b10 : row_col_grant;\n      wire upd_last_master = ~granted_row_ns || |row_col_grant;\n      mig_7series_v4_1_round_robin_arb #\n        (.WIDTH                       (2))\n        row_col_arb0\n          (.grant_ns                  (),\n           .grant_r                   (row_col_grant),\n           .upd_last_master           (upd_last_master),\n           .current_master            (current_master),\n           .clk                       (clk),\n           .rst                       (rst),\n           .req                       ({granted_row_ns, granted_col_ns}),\n           .disable_grant             (1'b0));\n      assign {block_grant_col, block_grant_row} = row_col_grant;\n    end",
        "  generate\n    if (ADDR_CMD_MODE == \"2T\" && nCK_PER_CLK != 4) begin : row_col_2T_arb\n      assign col_request =\n        rts_col & {nBANK_MACHS{~(rnk_config_kill_rts_col_lcl || insert_maint_r)}};\n\n      wire [1:0] row_col_grant;\n      wire [1:0] current_master = ~granted_row_ns ? 2'b10 : row_col_grant;\n      wire upd_last_master = ~granted_row_ns || |row_col_grant;\n      mig_7series_v4_1_round_robin_arb #\n        (.WIDTH                       (2))\n        row_col_arb0\n          (.grant_ns                  (),\n           .grant_r                   (row_col_grant),\n           .upd_last_master           (upd_last_master),\n           .current_master            (current_master),\n           .clk                       (clk),\n           .rst                       (rst),\n           .req                       ({granted_row_ns, granted_col_ns}),\n           .disable_grant             (1'b0));\n      assign {block_grant_col, block_grant_row} = row_col_grant;\n    end\n    else begin : row_col_1T_arb\n      assign col_request = rts_col & {nBANK_MACHS{~rnk_config_kill_rts_col_lcl}};\n      assign block_grant_row = 1'b0;\n      assign block_grant_col = 1'b0;\n    end\n  endgenerate"
    ]
}