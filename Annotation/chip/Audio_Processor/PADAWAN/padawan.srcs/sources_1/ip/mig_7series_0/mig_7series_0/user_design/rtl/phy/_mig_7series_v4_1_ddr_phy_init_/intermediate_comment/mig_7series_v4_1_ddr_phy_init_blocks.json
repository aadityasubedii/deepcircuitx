{
    "line_num": [
        [
            5495,
            5495
        ],
        [
            5479,
            5492
        ],
        [
            5477,
            5478
        ],
        [
            5467,
            5474
        ],
        [
            5464,
            5466
        ],
        [
            5459,
            5463
        ],
        [
            5454,
            5457
        ],
        [
            5450,
            5454
        ],
        [
            5170,
            5447
        ],
        [
            5167,
            5169
        ],
        [
            5161,
            5161
        ],
        [
            5120,
            5160
        ],
        [
            5087,
            5119
        ],
        [
            5054,
            5085
        ],
        [
            5052,
            5053
        ],
        [
            4996,
            5051
        ],
        [
            4959,
            4994
        ],
        [
            4922,
            4957
        ],
        [
            4919,
            4921
        ],
        [
            4381,
            4910
        ],
        [
            4380,
            4380
        ],
        [
            4263,
            4379
        ],
        [
            4261,
            4262
        ],
        [
            4246,
            4255
        ],
        [
            4243,
            4247
        ],
        [
            4226,
            4241
        ],
        [
            4160,
            4221
        ],
        [
            4134,
            4153
        ],
        [
            4114,
            4130
        ],
        [
            4087,
            4111
        ],
        [
            4066,
            4085
        ],
        [
            4046,
            4062
        ],
        [
            4018,
            4042
        ],
        [
            4016,
            4018
        ],
        [
            4011,
            4011
        ],
        [
            4005,
            4009
        ],
        [
            4003,
            4005
        ],
        [
            3995,
            3995
        ],
        [
            3916,
            3994
        ],
        [
            3912,
            3914
        ],
        [
            3887,
            3903
        ],
        [
            3865,
            3881
        ],
        [
            3863,
            3864
        ],
        [
            3819,
            3843
        ],
        [
            3817,
            3817
        ],
        [
            3788,
            3815
        ],
        [
            3741,
            3780
        ],
        [
            3738,
            3740
        ],
        [
            3731,
            3737
        ],
        [
            3724,
            3729
        ],
        [
            3711,
            3718
        ],
        [
            3700,
            3700
        ],
        [
            3696,
            3696
        ],
        [
            3690,
            3690
        ],
        [
            3678,
            3687
        ],
        [
            3669,
            3676
        ],
        [
            3665,
            3668
        ],
        [
            3658,
            3664
        ],
        [
            3648,
            3656
        ],
        [
            3644,
            3647
        ],
        [
            3636,
            3641
        ],
        [
            3631,
            3634
        ],
        [
            3617,
            3628
        ],
        [
            3606,
            3613
        ],
        [
            3603,
            3603
        ],
        [
            3594,
            3602
        ],
        [
            3583,
            3591
        ],
        [
            3579,
            3582
        ],
        [
            3570,
            3577
        ],
        [
            3559,
            3565
        ],
        [
            3548,
            3555
        ],
        [
            3539,
            3545
        ],
        [
            3533,
            3536
        ],
        [
            3525,
            3531
        ],
        [
            3517,
            3524
        ],
        [
            3508,
            3516
        ],
        [
            3476,
            3506
        ],
        [
            3469,
            3474
        ],
        [
            3464,
            3467
        ],
        [
            3458,
            3463
        ],
        [
            3450,
            3456
        ],
        [
            3441,
            3449
        ],
        [
            3408,
            3440
        ],
        [
            3395,
            3406
        ],
        [
            3384,
            3392
        ],
        [
            3375,
            3383
        ],
        [
            3373,
            3374
        ],
        [
            3368,
            3371
        ],
        [
            3361,
            3366
        ],
        [
            3354,
            3359
        ],
        [
            3349,
            3351
        ],
        [
            3341,
            3348
        ],
        [
            3338,
            3340
        ],
        [
            3330,
            3337
        ],
        [
            3319,
            3327
        ],
        [
            3310,
            3317
        ],
        [
            3301,
            3308
        ],
        [
            3292,
            3299
        ],
        [
            3290,
            3291
        ],
        [
            3277,
            3288
        ],
        [
            3268,
            3275
        ],
        [
            3261,
            3266
        ],
        [
            3253,
            3260
        ],
        [
            3242,
            3251
        ],
        [
            3230,
            3237
        ],
        [
            3205,
            3228
        ],
        [
            3203,
            3204
        ],
        [
            3200,
            3202
        ],
        [
            3192,
            3199
        ],
        [
            3176,
            3190
        ],
        [
            3153,
            3170
        ],
        [
            3127,
            3139
        ],
        [
            3121,
            3121
        ],
        [
            3119,
            3119
        ],
        [
            2996,
            3085
        ],
        [
            2995,
            2995
        ],
        [
            2915,
            2994
        ],
        [
            2914,
            2914
        ],
        [
            2880,
            2913
        ],
        [
            2879,
            2879
        ],
        [
            2841,
            2878
        ],
        [
            2839,
            2840
        ],
        [
            2837,
            2837
        ],
        [
            2798,
            2836
        ],
        [
            2795,
            2797
        ],
        [
            2793,
            2794
        ],
        [
            2777,
            2785
        ],
        [
            2770,
            2776
        ],
        [
            2763,
            2763
        ],
        [
            2752,
            2761
        ],
        [
            2744,
            2751
        ],
        [
            2738,
            2743
        ],
        [
            2730,
            2735
        ],
        [
            2726,
            2728
        ],
        [
            2718,
            2724
        ],
        [
            2692,
            2698
        ],
        [
            2674,
            2683
        ],
        [
            2660,
            2665
        ],
        [
            2628,
            2631
        ],
        [
            2612,
            2665
        ],
        [
            2538,
            2546
        ],
        [
            2530,
            2535
        ],
        [
            2443,
            2445
        ],
        [
            2440,
            2442
        ],
        [
            2234,
            2236
        ],
        [
            1978,
            2668
        ],
        [
            1969,
            1976
        ],
        [
            1947,
            1958
        ],
        [
            1939,
            1945
        ],
        [
            1929,
            1936
        ],
        [
            1922,
            1928
        ],
        [
            1920,
            1921
        ],
        [
            1914,
            1919
        ],
        [
            1900,
            1907
        ],
        [
            1880,
            1890
        ],
        [
            1864,
            1873
        ],
        [
            1847,
            1856
        ],
        [
            1828,
            1837
        ],
        [
            1812,
            1821
        ],
        [
            1797,
            1805
        ],
        [
            1784,
            1790
        ],
        [
            1780,
            1782
        ],
        [
            1751,
            1777
        ],
        [
            1745,
            1750
        ],
        [
            1735,
            1742
        ],
        [
            1717,
            1725
        ],
        [
            1706,
            1713
        ],
        [
            1697,
            1704
        ],
        [
            1687,
            1695
        ],
        [
            1677,
            1685
        ],
        [
            1674,
            1676
        ],
        [
            1667,
            1672
        ],
        [
            1664,
            1666
        ],
        [
            1651,
            1662
        ],
        [
            1646,
            1648
        ],
        [
            1640,
            1642
        ],
        [
            1605,
            1637
        ],
        [
            1582,
            1587
        ],
        [
            1575,
            1580
        ],
        [
            1559,
            1573
        ],
        [
            1552,
            1554
        ],
        [
            1537,
            1542
        ],
        [
            1523,
            1535
        ],
        [
            1515,
            1520
        ],
        [
            1507,
            1512
        ],
        [
            1500,
            1505
        ],
        [
            1492,
            1498
        ],
        [
            1484,
            1489
        ],
        [
            1475,
            1481
        ],
        [
            1464,
            1472
        ],
        [
            1457,
            1463
        ],
        [
            1446,
            1454
        ],
        [
            1444,
            1445
        ],
        [
            1436,
            1443
        ],
        [
            1420,
            1422
        ],
        [
            1413,
            1418
        ],
        [
            1407,
            1412
        ],
        [
            1394,
            1404
        ],
        [
            1370,
            1390
        ],
        [
            1349,
            1369
        ],
        [
            1347,
            1349
        ],
        [
            1330,
            1346
        ],
        [
            1319,
            1327
        ],
        [
            1316,
            1318
        ],
        [
            1309,
            1315
        ],
        [
            1301,
            1306
        ],
        [
            1293,
            1298
        ],
        [
            1285,
            1291
        ],
        [
            1278,
            1283
        ],
        [
            1269,
            1276
        ],
        [
            1262,
            1267
        ],
        [
            1251,
            1260
        ],
        [
            1244,
            1249
        ],
        [
            1238,
            1243
        ],
        [
            1225,
            1236
        ],
        [
            1215,
            1220
        ],
        [
            1209,
            1214
        ],
        [
            1206,
            1208
        ],
        [
            1200,
            1205
        ],
        [
            1187,
            1198
        ],
        [
            1182,
            1182
        ],
        [
            1179,
            1180
        ],
        [
            1162,
            1162
        ],
        [
            1156,
            1159
        ],
        [
            1127,
            1146
        ],
        [
            1072,
            1107
        ],
        [
            991,
            1039
        ],
        [
            930,
            935
        ],
        [
            924,
            927
        ],
        [
            917,
            922
        ],
        [
            898,
            915
        ],
        [
            884,
            890
        ],
        [
            871,
            882
        ],
        [
            860,
            867
        ],
        [
            851,
            858
        ],
        [
            843,
            849
        ],
        [
            839,
            841
        ],
        [
            835,
            838
        ],
        [
            832,
            832
        ],
        [
            815,
            822
        ],
        [
            808,
            811
        ],
        [
            804,
            807
        ],
        [
            798,
            801
        ],
        [
            793,
            796
        ],
        [
            788,
            791
        ],
        [
            783,
            786
        ],
        [
            778,
            781
        ],
        [
            773,
            777
        ],
        [
            768,
            771
        ],
        [
            763,
            766
        ],
        [
            758,
            762
        ],
        [
            425,
            431
        ]
    ],
    "blocks": [
        "  endgenerate",
        "          always @(posedge clk) \n            if (chip_cnt_r == 2'b00) begin \n              phy_address[(r*ROW_WIDTH) + s] <= #TCQ address_w[s];\n            end else begin \n              phy_address[(r*ROW_WIDTH) + s] <= #TCQ address_w[\n                                                      (s == 3) ? 4 : \n                                                     ((s == 4) ? 3 :\n                                                     ((s == 5) ? 6 : \n                                                     ((s == 6) ? 5 :\n                                                     ((s == 7) ? 8 : \n                                                     ((s == 8) ? 7 : s)))))];\n            end\n        end\n      end",
        "      for (r = 0; r < nCK_PER_CLK; r = r + 1) begin: gen_addr_div_clk_loop        \n        for (s = 0; s < ROW_WIDTH; s = s + 1) begin: gen_addr",
        "          always @(posedge clk)\n            if (chip_cnt_r == 2'b00) begin\n              phy_bank[(r*BANK_WIDTH) + s] <= #TCQ bank_w[s];\n            end else begin\n              phy_bank[(r*BANK_WIDTH) + s] <= #TCQ bank_w[(s == 0) ? 1 : ((s == 1) ? 0 : s)];\n            end\n\n        end",
        "      for (r = 0; r < nCK_PER_CLK; r = r + 1) begin: gen_ba_div_clk_loop        \n        for (s = 0; s < BANK_WIDTH; s = s + 1) begin: gen_ba\n          ",
        "    end else begin: gen_mirror\n      \n      \n      \n",
        "        always @(posedge clk) begin\n          phy_address[(r*ROW_WIDTH) +: ROW_WIDTH] <= #TCQ address_w;\n          phy_bank[(r*BANK_WIDTH) +: BANK_WIDTH]  <= #TCQ bank_w;\n        end",
        "  generate\n    genvar r,s;\n    if ((DRAM_TYPE != \"DDR3\") || (CA_MIRROR != \"ON\")) begin: gen_no_mirror\n      for (r = 0; r < nCK_PER_CLK; r = r + 1) begin: div_clk_loop\n        always @(posedge clk) begin",
        "  always @(*)begin\n    \n    address_w = 'b0;\n    bank_w   = 'b0;\n    if ((init_state_r == INIT_PRECHARGE) ||\n        (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n        (init_state_r == INIT_ZQCL) ||\n        (init_state_r == INIT_DDR2_PRECHARGE)) begin\n      \n      address_w     = 'b0;\n      address_w[10] = 1'b1;\n      bank_w        = 'b0;\n    end else if (init_state_r == INIT_WRLVL_START) begin\n      \n      bank_w[1:0]   = 2'b01;\n      address_w     = load_mr1[ROW_WIDTH-1:0];\n      address_w[2]  = mr1_r[chip_cnt_r][0];\n      address_w[6]  = mr1_r[chip_cnt_r][1];\n      address_w[9]  = mr1_r[chip_cnt_r][2];\n      address_w[7]  = 1'b1;\n    end else if (init_state_r == INIT_WRLVL_LOAD_MR) begin\n      \n      \n      bank_w[1:0]   = 2'b01;\n      address_w     = load_mr1[ROW_WIDTH-1:0];\n      address_w[2]  = mr1_r[chip_cnt_r][0];\n      address_w[6]  = mr1_r[chip_cnt_r][1];\n      address_w[9]  = mr1_r[chip_cnt_r][2];\n    end else if (init_state_r == INIT_WRLVL_LOAD_MR2) begin\n      \n      bank_w[1:0]     = 2'b10;\n      address_w       = load_mr2[ROW_WIDTH-1:0];\n      address_w[10:9] = mr2_r[chip_cnt_r];\n    end else if (init_state_r == INIT_MPR_READ) begin\n      address_w     = 'b0;\n      bank_w        = 'b0;\n    end else if (init_state_r == INIT_MPR_RDEN) begin\n      \n      bank_w[BANK_WIDTH-1:0] = 'd3;\n      address_w              = {ROW_WIDTH{1'b0}};\n      address_w[2]           = 1'b1;\n    end else if (init_state_r == INIT_MPR_DISABLE) begin\n      \n      bank_w[BANK_WIDTH-1:0] = 'd3;\n      address_w              = {ROW_WIDTH{1'b0}}; \n    end else if ((init_state_r == INIT_REG_WRITE)&\n             (DRAM_TYPE == \"DDR3\"))begin\n      \n      \n      \n      bank_w        = 'b0;\n      address_w     = 'b0;\n      case (reg_ctrl_cnt_r)\n        4'h1:begin\n          address_w[4:0] = REG_RC1[4:0];\n          bank_w         = REG_RC1[7:5];\n        end\n        4'h2: address_w[4:0] = REG_RC2[4:0];\n        4'h3: begin\n          address_w[4:0] = REG_RC3[4:0];\n          bank_w         = REG_RC3[7:5];\n        end\n        4'h4: begin\n          address_w[4:0] = REG_RC4[4:0];\n          bank_w         = REG_RC4[7:5];\n        end\n        4'h5: begin\n          address_w[4:0] = REG_RC5[4:0];\n          bank_w         = REG_RC5[7:5];\n        end\n        4'h6: begin\n          address_w[4:0] = REG_RC10[4:0];\n          bank_w         = REG_RC10[7:5];\n        end\n        4'h7: begin\n          address_w[4:0] = REG_RC11[4:0];\n          bank_w         = REG_RC11[7:5];\n        end\n        default: address_w[4:0] = REG_RC0[4:0];\n      endcase\n    end else if (init_state_r == INIT_LOAD_MR) begin\n      \n      \n      address_w     = 'b0;\n      bank_w        = 'b0;\n      if(DRAM_TYPE == \"DDR3\")begin\n        if(rdlvl_stg1_done && prbs_rdlvl_done && pi_dqs_found_done)begin\n          \n          \n          if (TEST_AL == \"0\") begin\n            bank_w[1:0] = 2'b00;\n            address_w   = load_mr0[ROW_WIDTH-1:0];\n            address_w[8]= 1'b0; \n          end else begin\n            \n            bank_w[1:0]   = 2'b01;\n            address_w     = load_mr1[ROW_WIDTH-1:0];\n            if (TEST_AL == \"CL-1\")\n              address_w[4:3]= 2'b01; \n            else\n              address_w[4:3]= 2'b10; \n          end\n        end else begin\n         case (cnt_init_mr_r)\n           INIT_CNT_MR2: begin\n             bank_w[1:0] = 2'b10;\n             address_w   = load_mr2[ROW_WIDTH-1:0];\n             address_w[10:9] = mr2_r[chip_cnt_r];\n           end\n           INIT_CNT_MR3: begin\n             bank_w[1:0] = 2'b11;\n             address_w   = load_mr3[ROW_WIDTH-1:0];\n           end\n           INIT_CNT_MR1: begin\n             bank_w[1:0] = 2'b01;\n             address_w   = load_mr1[ROW_WIDTH-1:0];\n             address_w[2] = mr1_r[chip_cnt_r][0];\n             address_w[6] = mr1_r[chip_cnt_r][1];\n             address_w[9] = mr1_r[chip_cnt_r][2];\n           end\n           INIT_CNT_MR0: begin\n             bank_w[1:0] = 2'b00;\n             address_w   = load_mr0[ROW_WIDTH-1:0];\n             \n             address_w[1:0] = 2'b00;\n           end\n           default: begin\n             bank_w      = {BANK_WIDTH{1'bx}};\n             address_w   = {ROW_WIDTH{1'bx}};\n           end\n          endcase\n        end\n      end else begin \n         case (cnt_init_mr_r)\n           INIT_CNT_MR2: begin\n             if(~ddr2_refresh_flag_r)begin\n                bank_w[1:0] = 2'b10;\n                address_w   = load_mr2[ROW_WIDTH-1:0];\n             end else begin \n                bank_w[1:0] = 2'b00;\n                address_w   = load_mr0[ROW_WIDTH-1:0];\n                address_w[8]= 1'b0;\n                \n             end\n          end\n           INIT_CNT_MR3: begin\n             if(~ddr2_refresh_flag_r)begin\n               bank_w[1:0] = 2'b11;\n               address_w   = load_mr3[ROW_WIDTH-1:0];\n             end else begin \n               bank_w[1:0] = 2'b00;\n               address_w   = load_mr0[ROW_WIDTH-1:0];\n               address_w[8]= 1'b0;\n               \n               \n            end\n           end\n           INIT_CNT_MR1: begin\n             bank_w[1:0] = 2'b01;            \n             if(~ddr2_refresh_flag_r)begin               \n               address_w   = load_mr1[ROW_WIDTH-1:0];  \n             end else begin \n               address_w   = load_mr1[ROW_WIDTH-1:0];\n               address_w[9:7] = 3'b111;\n               \n             end\n           end\n           INIT_CNT_MR0: begin\n             if(~ddr2_refresh_flag_r)begin\n               bank_w[1:0] = 2'b00;\n               address_w   = load_mr0[ROW_WIDTH-1:0];\n             end else begin \n               bank_w[1:0] = 2'b01;\n               address_w   = load_mr1[ROW_WIDTH-1:0];\n               if((chip_cnt_r == 2'd1) || (chip_cnt_r == 2'd3))begin\n               \n                 address_w[2] = 'b0;\n                 address_w[6] = 'b0;\n               end \n                \n             end\n           end\n           default: begin\n             bank_w      = {BANK_WIDTH{1'bx}};\n             address_w   = {ROW_WIDTH{1'bx}};\n           end\n         endcase\n       end\n    end else if ( ~prbs_rdlvl_done && ((init_state_r == INIT_PI_PHASELOCK_READS) ||\n                 (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n                 (init_state_r == INIT_RDLVL_STG1_READ) ||\n                 (init_state_r == INIT_RDLVL_COMPLEX_READ))) begin\n      \n      \n      \n      bank_w    = CALIB_BA_ADD[BANK_WIDTH-1:0];\n      address_w[ROW_WIDTH-1:COL_WIDTH] = {ROW_WIDTH-COL_WIDTH{1'b0}};\n      if (((stg1_wr_rd_cnt == NUM_STG1_WR_RD) && ~rdlvl_stg1_done) || (stg1_wr_rd_cnt == 'd127) || \n          ((stg1_wr_rd_cnt == 'd22) && (((init_state_r1 != INIT_RDLVL_STG1_WRITE) && ~stg1_wr_done) || complex_row0_rd_done))) begin\n          address_w[COL_WIDTH-1:0] = {COL_WIDTH{1'b0}};\n      end else if (phy_data_full_r || (!new_burst_r))\n        address_w[COL_WIDTH-1:0] = phy_address[COL_WIDTH-1:0];\n      else if ((stg1_wr_rd_cnt >= 9'd0) && new_burst_r && ~phy_data_full_r) begin\n        if ((init_state_r == INIT_RDLVL_COMPLEX_READ) && (init_state_r1 != INIT_RDLVL_COMPLEX_READ) )\n            \n          address_w[COL_WIDTH-1:0] = complex_address[COL_WIDTH-1:0] + ADDR_INC;\n        else\n          address_w[COL_WIDTH-1:0] = phy_address[COL_WIDTH-1:0] + ADDR_INC;\n      end\n      \n    end else if (prbs_rdlvl_done && ((init_state_r == INIT_RDLVL_STG1_WRITE) ||             \n                 (init_state_r == INIT_RDLVL_COMPLEX_READ))) begin\n      bank_w    = CALIB_BA_ADD[BANK_WIDTH-1:0];\n      address_w[ROW_WIDTH-1:COL_WIDTH] = {ROW_WIDTH-COL_WIDTH{1'b0}};\n       if ((stg1_wr_rd_cnt == 'd127) || ((stg1_wr_rd_cnt == 'd30) && (((init_state_r1 != INIT_RDLVL_STG1_WRITE) && ~stg1_wr_done) || complex_row0_rd_done))) begin\n              address_w[COL_WIDTH-1:0] = {COL_WIDTH{1'b0}};\n      end else if (phy_data_full_r || (!new_burst_r))\n        address_w[COL_WIDTH-1:0] = phy_address[COL_WIDTH-1:0];\n      else if ((stg1_wr_rd_cnt >= 9'd0) && new_burst_r && ~phy_data_full_r) begin\n        if ((init_state_r == INIT_RDLVL_STG1_WRITE) && (init_state_r1 != INIT_RDLVL_STG1_WRITE) )\n            \n          address_w[COL_WIDTH-1:0] = complex_address[COL_WIDTH-1:0] + ADDR_INC;\n        else\n          address_w[COL_WIDTH-1:0] = phy_address[COL_WIDTH-1:0] + ADDR_INC;\n      end      \n      \n    end else if ((init_state_r == INIT_OCLKDELAY_WRITE) ||\n                 (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                 (init_state_r == INIT_OCLKDELAY_READ)) begin\n      bank_w    = CALIB_BA_ADD[BANK_WIDTH-1:0];\n      address_w[ROW_WIDTH-1:COL_WIDTH] = {ROW_WIDTH-COL_WIDTH{1'b0}};\n      if (oclk_wr_cnt == NUM_STG1_WR_RD)\n        address_w[COL_WIDTH-1:0] = {COL_WIDTH{1'b0}};\n      else if (phy_data_full_r || (!new_burst_r))\n        address_w[COL_WIDTH-1:0] = phy_address[COL_WIDTH-1:0];\n      else if ((oclk_wr_cnt >= 4'd0) && new_burst_r && ~phy_data_full_r)\n        address_w[COL_WIDTH-1:0] = phy_address[COL_WIDTH-1:0] + ADDR_INC;\n    end else if ((init_state_r == INIT_WRCAL_WRITE) ||\n                 (init_state_r == INIT_WRCAL_READ)) begin\n      bank_w    = CALIB_BA_ADD[BANK_WIDTH-1:0];\n      address_w[ROW_WIDTH-1:COL_WIDTH] = {ROW_WIDTH-COL_WIDTH{1'b0}};\n      if (wrcal_wr_cnt == NUM_STG1_WR_RD)\n        address_w[COL_WIDTH-1:0] = {COL_WIDTH{1'b0}};\n      else if (phy_data_full_r || (!new_burst_r))\n        address_w[COL_WIDTH-1:0] = phy_address[COL_WIDTH-1:0];\n      else if ((wrcal_wr_cnt >= 4'd0) && new_burst_r && ~phy_data_full_r)\n        address_w[COL_WIDTH-1:0] = phy_address[COL_WIDTH-1:0] + ADDR_INC;      \n    end else if ((init_state_r == INIT_WRCAL_MULT_READS) ||\n                 (init_state_r == INIT_RDLVL_STG2_READ)) begin\n      \n      \n      \n      \n      \n      \n      bank_w    = CALIB_BA_ADD[BANK_WIDTH-1:0];\n      address_w[ROW_WIDTH-1:COL_WIDTH] = {ROW_WIDTH-COL_WIDTH{1'b0}};\n      address_w[COL_WIDTH-1:0] = \n                {CALIB_COL_ADD[COL_WIDTH-1:3],burst_addr_r, 3'b000};\n      address_w[12]            =  1'b1;\n    end else if ((init_state_r == INIT_RDLVL_ACT) ||\n                (init_state_r == INIT_RDLVL_COMPLEX_ACT) ||\n                (init_state_r == INIT_WRCAL_ACT) ||\n                (init_state_r == INIT_OCAL_COMPLEX_ACT) ||\n                (init_state_r == INIT_OCAL_CENTER_ACT) ||\n                (init_state_r == INIT_OCLKDELAY_ACT)) begin\n\n      bank_w    = CALIB_BA_ADD[BANK_WIDTH-1:0];\n      \n      \n      \n      address_w = prbs_rdlvl_done ? CALIB_ROW_ADD[ROW_WIDTH-1:0] + complex_row_cnt_ocal :\n                  CALIB_ROW_ADD[ROW_WIDTH-1:0] + complex_row_cnt;\n    end else begin\n      bank_w    = {BANK_WIDTH{1'bx}};\n      address_w = {ROW_WIDTH{1'bx}};\n    end\n  end      ",
        "  always @(posedge clk)\n    phy_data_full_r <= #TCQ phy_data_full;\n",
        "endgenerate",
        "    always @(posedge clk)\n      if (rst)\n        calib_aux_out <= #TCQ 4'b0000;\n      else begin\n        if (cnt_pwron_cke_done_r && ~cnt_pwron_cke_done_r1)begin\n          calib_aux_out[0] <= #TCQ 1'b1;\n          calib_aux_out[2] <= #TCQ 1'b1;\n        end else begin\n          calib_aux_out[0] <= #TCQ 1'b0;\n          calib_aux_out[2] <= #TCQ 1'b0;\n        end\n        if ((((RTT_NOM == \"DISABLED\") && (RTT_WR == \"OFF\")) ||\n         wrlvl_rank_done_r2 ||\n        (wrlvl_done && !wrlvl_done_r)) && (DRAM_TYPE == \"DDR3\")) begin\n          calib_aux_out[1] <= #TCQ 1'b0;\n          calib_aux_out[3] <= #TCQ 1'b0;\n        end else if (((DRAM_TYPE == \"DDR3\") \n               ||((RTT_NOM != \"DISABLED\") && (DRAM_TYPE == \"DDR2\"))) \n               && (((init_state_r == INIT_WRLVL_WAIT) && wrlvl_odt) || \n               (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n               (init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) ||\n               (init_state_r == INIT_WRCAL_WRITE) ||\n               (init_state_r == INIT_OCAL_CENTER_WRITE) || \n               (init_state_r == INIT_OCLKDELAY_WRITE))) begin \n           \n            if (nCK_PER_CLK == 2) begin\n              calib_aux_out[1] \n                <= #TCQ (!calib_aux_out[1]) ? phy_tmp_odt_r[0] : 1'b0;\n              calib_aux_out[3] \n                <= #TCQ (!calib_aux_out[3]) ? phy_tmp_odt_r[1] : 1'b0;\n            end else begin \n              calib_aux_out[1] <= #TCQ phy_tmp_odt_r[0];\n              calib_aux_out[3] <= #TCQ phy_tmp_odt_r[1];\n            end\n        end else begin\n          calib_aux_out[1] <= #TCQ 1'b0;\n          calib_aux_out[3] <= #TCQ 1'b0;\n        end\n      end\n  end\nend ",
        "    always @(posedge clk)\n      if (rst) begin\n        calib_aux_out <= #TCQ 4'b0000;\n      end else begin\n        if (cnt_pwron_cke_done_r && ~cnt_pwron_cke_done_r1)begin\n          calib_aux_out[0] <= #TCQ 1'b1;\n          calib_aux_out[2] <= #TCQ 1'b1;\n        end else begin\n          calib_aux_out[0] <= #TCQ 1'b0;\n          calib_aux_out[2] <= #TCQ 1'b0;\n        end\n        if ((((RTT_NOM == \"DISABLED\") && (RTT_WR == \"OFF\")) ||\n         wrlvl_rank_done_r2 ||\n        (wrlvl_done && !wrlvl_done_r)) && (DRAM_TYPE == \"DDR3\")) begin\n          calib_aux_out[1] <= #TCQ 1'b0;\n          calib_aux_out[3] <= #TCQ 1'b0;\n        end else if (((DRAM_TYPE == \"DDR3\") \n               ||((RTT_NOM != \"DISABLED\") && (DRAM_TYPE == \"DDR2\"))) \n               && (((init_state_r == INIT_WRLVL_WAIT) && wrlvl_odt) || \n               (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n               (init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) ||\n               (init_state_r == INIT_WRCAL_WRITE) ||\n               (init_state_r == INIT_OCAL_CENTER_WRITE) || \n               (init_state_r == INIT_OCLKDELAY_WRITE))) begin\n          \n          calib_aux_out[1] <= #TCQ phy_tmp_odt_r[0];\n          calib_aux_out[3] <= #TCQ phy_tmp_odt_r[1];\n        end else begin\n          calib_aux_out[1] <= #TCQ 1'b0;\n          calib_aux_out[3] <= #TCQ 1'b0;\n        end\n      end\n  end else if ((nSLOTS == 2) && (RANKS == 2)) begin",
        "    always @(posedge clk)\n      if (rst) begin\n        calib_aux_out <= #TCQ 4'b0000;\n      end else begin\n        if (cnt_pwron_cke_done_r && ~cnt_pwron_cke_done_r1)begin\n          calib_aux_out[0] <= #TCQ 1'b1;\n          calib_aux_out[2] <= #TCQ 1'b1;\n        end else begin\n          calib_aux_out[0] <= #TCQ 1'b0;\n          calib_aux_out[2] <= #TCQ 1'b0;\n        end\n        if ((((RTT_NOM == \"DISABLED\") && (RTT_WR == \"OFF\")) ||\n         wrlvl_rank_done || wrlvl_rank_done_r1 ||\n        (wrlvl_done && !wrlvl_done_r)) && (DRAM_TYPE == \"DDR3\")) begin\n          calib_aux_out[1] <= #TCQ 1'b0;\n          calib_aux_out[3] <= #TCQ 1'b0;\n        end else if (((DRAM_TYPE == \"DDR3\") \n               ||((RTT_NOM != \"DISABLED\") && (DRAM_TYPE == \"DDR2\"))) \n               && (((init_state_r == INIT_WRLVL_WAIT) && wrlvl_odt) || \n               (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n               (init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) ||\n               (init_state_r == INIT_WRCAL_WRITE) ||\n               (init_state_r == INIT_OCAL_CENTER_WRITE) || \n               (init_state_r == INIT_OCLKDELAY_WRITE))) begin\n          \n          calib_aux_out[1] <= #TCQ phy_tmp_odt_r[0];\n          calib_aux_out[3] <= #TCQ phy_tmp_odt_r[1];\n        end else begin\n          calib_aux_out[1] <= #TCQ 1'b0;\n          calib_aux_out[3] <= #TCQ 1'b0;\n        end\n      end",
        "end else begin\n  if ((nSLOTS == 1) && (RANKS < 2)) begin",
        "    always @(posedge clk)\n      if (rst)begin\n        calib_cke <= #TCQ {nCK_PER_CLK{1'b0}} ;\n        calib_odt <= 2'b00 ;\n      end else begin\n        if (cnt_pwron_cke_done_r )begin\n          calib_cke <= #TCQ {nCK_PER_CLK{1'b1}};\n        end else begin\n          calib_cke <= #TCQ {nCK_PER_CLK{1'b0}};\n        end\n        if (((DRAM_TYPE == \"DDR2\") && (RTT_NOM == \"DISABLED\")) ||\n            ((DRAM_TYPE == \"DDR3\") &&\n             (RTT_NOM == \"DISABLED\") && (RTT_WR == \"OFF\"))) begin\n          calib_odt[0] <= #TCQ 1'b0;\n          calib_odt[1] <= #TCQ 1'b0;\n        end else if (((init_state_r == INIT_WRLVL_WAIT) && wrlvl_odt) || \n                      (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n                      (init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) ||\n                      (init_state_r == INIT_WRCAL_WRITE) ||\n                      (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                      (init_state_r == INIT_OCLKDELAY_WRITE)) begin\n           \n            if (nCK_PER_CLK == 2) begin\n              calib_odt[0] \n                <= #TCQ (!calib_odt[0]) ? phy_tmp_odt_r[0] : 1'b0;\n              calib_odt[1] \n                <= #TCQ (!calib_odt[1]) ? phy_tmp_odt_r[1] : 1'b0;\n            end else begin \n              calib_odt[0] <= #TCQ phy_tmp_odt_r[0];\n              calib_odt[1] <= #TCQ phy_tmp_odt_r[1];\n            end\n        \n        end else if(((DRAM_TYPE == \"DDR3\") && (RTT_WR != \"OFF\")) &&\n                    ((init_state_r == INIT_PI_PHASELOCK_READS) ||\n                     (init_state_r == INIT_MPR_READ) ||\n                     (init_state_r == INIT_RDLVL_STG1_READ) ||\n                     (init_state_r == INIT_RDLVL_COMPLEX_READ) ||\n                     (init_state_r == INIT_RDLVL_STG2_READ) ||\n                     (init_state_r == INIT_OCLKDELAY_READ) ||\n                     (init_state_r == INIT_WRCAL_READ) ||\n                     (init_state_r == INIT_WRCAL_MULT_READS))) begin\n            if (nCK_PER_CLK == 2) begin\n              calib_odt[0] \n                <= #TCQ (!calib_odt[0]) ? phy_tmp_odt_r[0] : 1'b0;\n              calib_odt[1] \n                <= #TCQ (!calib_odt[1]) ? phy_tmp_odt_r[1] : 1'b0;\n            end else begin \n              calib_odt[0] <= #TCQ phy_tmp_odt_r[0];\n              calib_odt[1] <= #TCQ phy_tmp_odt_r[1];\n            end\n        \n        end else if(cnt_cmd_done_m7_r ||\n                   (init_state_r == INIT_WRLVL_WAIT && ~wrlvl_odt))\n          calib_odt <= #TCQ 2'b00;\n      end\n  end",
        "    always @(posedge clk)\n      if (rst) begin\n        calib_cke <= #TCQ {nCK_PER_CLK{1'b0}} ;\n        calib_odt <= 2'b00 ;\n      end else begin\n        if (cnt_pwron_cke_done_r )begin\n          calib_cke <= #TCQ {nCK_PER_CLK{1'b1}};\n        end else begin\n          calib_cke <= #TCQ {nCK_PER_CLK{1'b0}};\n        end\n        if ((((RTT_NOM == \"DISABLED\") && (RTT_WR == \"OFF\"))\n\n) && (DRAM_TYPE == \"DDR3\")) begin\n          calib_odt[0] <= #TCQ 1'b0;\n          calib_odt[1] <= #TCQ 1'b0;\n        end else if (((DRAM_TYPE == \"DDR3\") \n               ||((RTT_NOM != \"DISABLED\") && (DRAM_TYPE == \"DDR2\"))) \n               && (((init_state_r == INIT_WRLVL_WAIT) && wrlvl_odt)|| \n               (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n               (init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) ||\n               (init_state_r == INIT_RDLVL_STG1_WRITE_READ) ||\n               complex_odt_ext ||\n               (init_state_r == INIT_WRCAL_WRITE) ||\n               (init_state_r == INIT_WRCAL_WRITE_READ) ||\n               (init_state_r == INIT_OCAL_CENTER_WRITE) || \n               complex_ocal_odt_ext ||\n               (init_state_r == INIT_OCLKDELAY_WRITE)||\n               (init_state_r == INIT_OCLKDELAY_WRITE_WAIT))) begin\n          \n          calib_odt[0] <= #TCQ phy_tmp_odt_r[0];\n          calib_odt[1] <= #TCQ phy_tmp_odt_r[1];\n        end else begin\n          calib_odt[0] <= #TCQ 1'b0;\n          calib_odt[1] <= #TCQ 1'b0;\n        end\n      end",
        "    always @(posedge clk)\n      if (rst) begin\n    calib_cke <= #TCQ {nCK_PER_CLK{1'b0}} ;\n    calib_odt <= 2'b00 ;\n      end else begin\n        if (cnt_pwron_cke_done_r )begin\n          calib_cke <= #TCQ {nCK_PER_CLK{1'b1}};\n        end else begin\n          calib_cke <= #TCQ {nCK_PER_CLK{1'b0}};\n        end\n        if ((((RTT_NOM == \"DISABLED\") && (RTT_WR == \"OFF\"))\n\n) && (DRAM_TYPE == \"DDR3\")) begin\n          calib_odt[0] <= #TCQ 1'b0;\n          calib_odt[1] <= #TCQ 1'b0;\n        end else if (((DRAM_TYPE == \"DDR3\") \n               ||((RTT_NOM != \"DISABLED\") && (DRAM_TYPE == \"DDR2\"))) \n               && (((init_state_r == INIT_WRLVL_WAIT) && wrlvl_odt ) || \n               (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n               (init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) ||\n               (init_state_r == INIT_RDLVL_STG1_WRITE_READ) ||\n               complex_odt_ext ||\n               (init_state_r == INIT_WRCAL_WRITE) ||\n               (init_state_r == INIT_WRCAL_WRITE_READ) ||\n               (init_state_r == INIT_OCAL_CENTER_WRITE) || \n               complex_ocal_odt_ext ||\n               (init_state_r == INIT_OCLKDELAY_WRITE)||\n\t       (init_state_r == INIT_OCLKDELAY_WRITE_WAIT))) begin\n          \n          calib_odt[0] <= #TCQ phy_tmp_odt_r[0];\n          calib_odt[1] <= #TCQ phy_tmp_odt_r[1];\n        end else begin\n          calib_odt[0] <= #TCQ 1'b0;\n          calib_odt[1] <= #TCQ 1'b0;\n        end\n      end",
        "generate\nif(CKE_ODT_AUX == \"FALSE\") begin\n  if ((nSLOTS == 1) && (RANKS < 2)) begin",
        "      always @ (posedge clk) begin\n        if (rst) begin\n          tmp_mr2_r[1]   <= #TCQ 2'b00;\n          tmp_mr2_r[2]   <= #TCQ 2'b00;\n          tmp_mr2_r[3]   <= #TCQ 2'b00;\n          tmp_mr1_r[1]   <= #TCQ 3'b000;\n          tmp_mr1_r[2]   <= #TCQ 3'b000;\n          tmp_mr1_r[3]   <= #TCQ 3'b000;\n          phy_tmp_odt_r  <= #TCQ 4'b0000;\n          phy_tmp_cs1_r  <= #TCQ {CS_WIDTH*nCS_PER_RANK{1'b1}};\n          phy_tmp_odt_r1 <= #TCQ phy_tmp_odt_r;\n        end else begin  \n          case ({slot_0_present[0],slot_0_present[1],\n                 slot_1_present[0],slot_1_present[1]})       \n            \n            4'b10_00: begin\n              if (\n                  (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n                  (init_state_r == INIT_WRCAL_WRITE) ||\n                  (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                  (init_state_r == INIT_OCLKDELAY_WRITE)) begin\n                \n                phy_tmp_odt_r <= #TCQ 4'b0001;\n              end\n              phy_tmp_cs1_r <= #TCQ {nCS_PER_RANK{1'b0}};\n              if ((RTT_WR == \"OFF\") || \n                  ((WRLVL==\"ON\") && ~wrlvl_done)) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n            end\n            4'b00_10: begin\n              \n              \n              if (\n                  (init_state_r == INIT_RDLVL_STG1_WRITE) || \n                  (init_state_r == INIT_WRCAL_WRITE) ||\n                  (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                  (init_state_r == INIT_OCLKDELAY_WRITE)) begin\n                \n                phy_tmp_odt_r <= #TCQ 4'b0001;\n              end\n              phy_tmp_cs1_r <= #TCQ {nCS_PER_RANK{1'b0}};\n              if ((RTT_WR == \"OFF\") || \n                  ((WRLVL==\"ON\") && ~wrlvl_done)) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n            end\n            \n            4'b00_11: begin\n              if (\n                  (init_state_r == INIT_RDLVL_STG1_WRITE) || \n                  (init_state_r == INIT_WRCAL_WRITE) ||\n                  (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                  (init_state_r == INIT_OCLKDELAY_WRITE)) begin\n                \n                phy_tmp_odt_r  \n                  <= #TCQ 4'b0001;\n              end\n              \n              \n              phy_tmp_cs1_r[(chip_cnt_r*nCS_PER_RANK) +: nCS_PER_RANK] \n                <= #TCQ {nCS_PER_RANK{1'b0}};\n              \n              if ((RTT_WR == \"OFF\") ||\n                  ((WRLVL==\"ON\") && ~wrlvl_done &&\n                   (wrlvl_rank_cntr==3'd0))) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n            end\n            4'b11_00: begin\n              if (\n                  (init_state_r == INIT_RDLVL_STG1_WRITE) || \n                  (init_state_r == INIT_WRCAL_WRITE) ||\n                  (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                  (init_state_r == INIT_OCLKDELAY_WRITE)) begin\n                \n                phy_tmp_odt_r <= #TCQ 4'b0001;\n              end\n              \n              \n              phy_tmp_cs1_r[(chip_cnt_r*nCS_PER_RANK) +: nCS_PER_RANK] \n                <= #TCQ {nCS_PER_RANK{1'b0}};\n              \n              if ((RTT_WR == \"OFF\") ||\n                  ((WRLVL==\"ON\") && ~wrlvl_done &&\n                   (wrlvl_rank_cntr==3'd0))) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n            end\n            \n            4'b10_10: begin\n              if(DRAM_TYPE == \"DDR2\")begin\n                if(chip_cnt_r == 2'b00)begin\n                  phy_tmp_odt_r\n                    <= #TCQ 4'b0010; \n                end else begin\n                  phy_tmp_odt_r\n                    <= #TCQ 4'b0001; \n                end\n              end else begin\n                if((init_state_r == INIT_WRLVL_WAIT) ||\n                        (init_next_state == INIT_RDLVL_STG1_WRITE) ||\n                        (init_next_state == INIT_WRCAL_WRITE) ||\n                        (init_next_state == INIT_OCAL_CENTER_WRITE) || \n                        (init_next_state == INIT_OCLKDELAY_WRITE))\n                  phy_tmp_odt_r <= #TCQ 4'b0011; \n                else if ((init_next_state == INIT_PI_PHASELOCK_READS) ||\n                         (init_next_state == INIT_MPR_READ) ||\n                         (init_next_state == INIT_RDLVL_STG1_READ) ||\n                         (init_next_state == INIT_RDLVL_COMPLEX_READ) ||                         \n                         (init_next_state == INIT_RDLVL_STG2_READ) ||\n                         (init_next_state == INIT_OCLKDELAY_READ) ||\n                         (init_next_state == INIT_WRCAL_READ) ||\n                         (init_next_state == INIT_WRCAL_MULT_READS))\n                  phy_tmp_odt_r <= #TCQ 4'b0010; \n              end\n              \n                 \n                 phy_tmp_cs1_r[(chip_cnt_r*nCS_PER_RANK) +: nCS_PER_RANK] \n                  <= #TCQ {nCS_PER_RANK{1'b0}};\n\n                 if ((RTT_WR == \"OFF\") ||\n                    ((WRLVL==\"ON\") && ~wrlvl_done &&\n                     (wrlvl_rank_cntr==3'd0))) begin\n                   \n                   tmp_mr2_r[0] <= #TCQ 2'b00;\n                   \n                   tmp_mr1_r[0] <= #TCQ (RTT_WR == \"60\") ? 3'b001 :\n                                        (RTT_WR == \"120\") ? 3'b010 :\n                                        3'b000;\n                   \n                   tmp_mr2_r[1] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                       2'b10;\n                   \n                   tmp_mr1_r[1] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                        (RTT_NOM_int == \"60\") ? 3'b001 :\n                                        (RTT_NOM_int == \"120\") ? 3'b010 :\n                                        3'b000;\n                 end else begin\n                   \n                   tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                       2'b10;\n                   \n                   tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"60\") ? 3'b001 :\n                                        (RTT_NOM_int == \"120\") ? 3'b010 :\n                                        (RTT_NOM_int == \"20\") ? 3'b100 :\n                                        (RTT_NOM_int == \"30\") ? 3'b101 :\n                                        (RTT_NOM_int == \"40\")  ? 3'b011 :\n                                        3'b000;\n                   \n                   tmp_mr2_r[1] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                       2'b10;\n                   \n                   tmp_mr1_r[1] <= #TCQ (RTT_NOM_int == \"60\") ? 3'b001 :\n                                        (RTT_NOM_int == \"120\") ? 3'b010 :\n                                        (RTT_NOM_int == \"20\") ? 3'b100 :\n                                        (RTT_NOM_int == \"30\") ? 3'b101 :\n                                        (RTT_NOM_int == \"40\")  ? 3'b011 :\n                                        3'b000;\n                 end\n               end\n            \n            4'b10_11: begin\n\n              \n              tmp_mr1_r[2] <= #TCQ (RTT_NOM_int == \"60\")  ? 3'b001 :\n                                   (RTT_NOM_int == \"120\") ? 3'b010 :\n                                   (RTT_NOM_int == \"20\")  ? 3'b100 :\n                                   (RTT_NOM_int == \"30\")  ? 3'b101 :\n                                   (RTT_NOM_int == \"40\")  ? 3'b011 :\n                                   3'b000;\n              tmp_mr2_r[2] <= #TCQ 2'b00;\n              if ((RTT_WR == \"OFF\") ||\n                  ((WRLVL==\"ON\") && ~wrlvl_done &&\n                   (wrlvl_rank_cntr==3'd0))) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n                \n                tmp_mr2_r[1] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[1] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                   tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                   2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     (RTT_NOM_int == \"20\") ? 3'b100 :\n                                     (RTT_NOM_int == \"30\") ? 3'b101 :\n                                     (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     3'b000;\n                \n                tmp_mr2_r[1] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[1] <= #TCQ 3'b000;\n              end\n              \n              if(DRAM_TYPE == \"DDR2\")begin\n                if(chip_cnt_r == 2'b00)begin\n                  phy_tmp_odt_r \n                    <= #TCQ 4'b0010;\n                end else begin\n                  phy_tmp_odt_r \n                    <= #TCQ 4'b0001;\n                end\n              end else begin               \n                   if (\n                       (init_state_r == INIT_RDLVL_STG1_WRITE) || \n                       (init_state_r == INIT_WRCAL_WRITE) ||\n                       (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                       (init_state_r == INIT_OCLKDELAY_WRITE)) begin\n                     if (chip_cnt_r[0] == 1'b1) begin\n                       phy_tmp_odt_r \n                         <= #TCQ 4'b0011;\n                       \n                     end else begin\n                       phy_tmp_odt_r \n                         <= #TCQ 4'b0101; \n                     end\n                   end else if ((init_state_r == INIT_RDLVL_STG1_READ) ||\n                                (init_state_r == INIT_RDLVL_COMPLEX_READ) ||                   \n                                (init_state_r == INIT_PI_PHASELOCK_READS) ||\n                                (init_state_r == INIT_RDLVL_STG2_READ) ||\n                                (init_state_r == INIT_OCLKDELAY_READ) ||\n                                (init_state_r == INIT_WRCAL_READ) ||\n                                (init_state_r == INIT_WRCAL_MULT_READS))begin\n                     if (chip_cnt_r == 2'b00) begin\n                       phy_tmp_odt_r \n                         <= #TCQ 4'b0100;\n                     end else begin\n                       phy_tmp_odt_r\n                       <= #TCQ 4'b0001;\n                     end\n                   end\n              end\n              \n              \n              phy_tmp_cs1_r[(chip_cnt_r*nCS_PER_RANK) +: nCS_PER_RANK] \n                <= #TCQ {nCS_PER_RANK{1'b0}};   \n              \n            end\n            \n            4'b11_10: begin\n              \n              \n              tmp_mr1_r[2] <= #TCQ (RTT_NOM2 == \"60\") ? 3'b001 :\n                                   (RTT_NOM2 == \"120\") ? 3'b010 :\n                                   (RTT_NOM2 == \"20\") ? 3'b100 :\n                                   (RTT_NOM2 == \"30\") ? 3'b101 :\n                                   (RTT_NOM2 == \"40\") ? 3'b011:\n                                   3'b000;\n              tmp_mr2_r[2] <= #TCQ 2'b00;\n              if ((RTT_WR == \"OFF\") ||\n                  ((WRLVL==\"ON\") && ~wrlvl_done &&\n                   (wrlvl_rank_cntr==3'd0))) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n                \n                tmp_mr2_r[1] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[1] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[1] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[1] <= #TCQ (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     (RTT_NOM_int == \"20\") ? 3'b100 :\n                                     (RTT_NOM_int == \"30\") ? 3'b101 :\n                                     (RTT_NOM_int == \"40\") ? 3'b011:\n                                     3'b000;\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n              \n              if(DRAM_TYPE == \"DDR2\")begin\n                if(chip_cnt_r[1] == 1'b1)begin\n                  phy_tmp_odt_r <= \n                                   #TCQ 4'b0001;\n                end else begin\n                  phy_tmp_odt_r \n                    <= #TCQ 4'b0100; \n                end\n              end else begin \n                if (\n                    (init_state_r == INIT_RDLVL_STG1_WRITE) || \n                    (init_state_r == INIT_WRCAL_WRITE) ||\n                    (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                    (init_state_r == INIT_OCLKDELAY_WRITE)) begin\n                  \n                  if (chip_cnt_r[1] == 1'b1) begin\n                    phy_tmp_odt_r \n                      <= #TCQ 4'b0110;\n                  end else begin\n                    phy_tmp_odt_r <= \n                                     #TCQ 4'b0101;\n                  end\n                end else if ((init_state_r == INIT_RDLVL_STG1_READ) ||\n                         (init_state_r == INIT_RDLVL_COMPLEX_READ) ||\n                             (init_state_r == INIT_PI_PHASELOCK_READS) ||\n                             (init_state_r == INIT_RDLVL_STG2_READ) ||\n                             (init_state_r == INIT_OCLKDELAY_READ) ||\n                             (init_state_r == INIT_WRCAL_READ) ||\n                             (init_state_r == INIT_WRCAL_MULT_READS)) begin\n                  \n                     if (chip_cnt_r[1] == 1'b1) begin\n                       phy_tmp_odt_r[(1*nCS_PER_RANK) +: nCS_PER_RANK] \n                         <= #TCQ 4'b0010;\n                     end else begin\n                       phy_tmp_odt_r \n                         <= #TCQ 4'b0100;\n                     end\n                end\n              end\n              \n              \n              phy_tmp_cs1_r[(chip_cnt_r*nCS_PER_RANK) +: nCS_PER_RANK] \n                <= #TCQ {nCS_PER_RANK{1'b0}};\n            end\n            \n            4'b11_11: begin\n              \n              tmp_mr1_r[2] <= #TCQ (RTT_NOM2 == \"60\") ? 3'b001 :\n                                   (RTT_NOM2 == \"120\") ? 3'b010 :\n                                   (RTT_NOM2 == \"20\") ? 3'b100 :\n                                   (RTT_NOM2 == \"30\") ? 3'b101 :\n                                   (RTT_NOM2 == \"40\") ? 3'b011 :\n                                   3'b000;\n              \n              tmp_mr1_r[3] <= #TCQ (RTT_NOM3 == \"60\") ? 3'b001 :\n                                   (RTT_NOM3 == \"120\") ? 3'b010 :\n                                   (RTT_NOM3 == \"20\") ? 3'b100 :\n                                   (RTT_NOM3 == \"30\") ? 3'b101 :\n                                   (RTT_NOM3 == \"40\") ? 3'b011 :\n                                   3'b000;\n              tmp_mr2_r[2] <= #TCQ 2'b00;\n              tmp_mr2_r[3] <= #TCQ 2'b00;\n              if ((RTT_WR == \"OFF\") ||\n                  ((WRLVL==\"ON\") && ~wrlvl_done &&\n                   (wrlvl_rank_cntr==3'd0))) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n                \n                tmp_mr2_r[1] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[1] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[1] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[1] <= #TCQ 3'b000;\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n              \n              if(DRAM_TYPE == \"DDR2\")begin\n                if(chip_cnt_r[1] == 1'b1)begin\n                  phy_tmp_odt_r\n                    <= #TCQ 4'b0001;\n                end else begin\n                  phy_tmp_odt_r\n                    <= #TCQ 4'b0100;\n                end\n              end else begin\n                if (\n                    (init_state_r == INIT_RDLVL_STG1_WRITE) || \n                    (init_state_r == INIT_WRCAL_WRITE) ||\n                    (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                    (init_state_r == INIT_OCLKDELAY_WRITE)) begin\n                  \n                  if (chip_cnt_r[0] == 1'b1) begin\n                    phy_tmp_odt_r\n                      <= #TCQ 4'b0110;\n                    \n                  end else begin\n                    phy_tmp_odt_r\n                      <= #TCQ 4'b1001;\n                  end\n                end else if ((init_state_r == INIT_RDLVL_STG1_READ) ||\n                             (init_state_r == INIT_RDLVL_COMPLEX_READ) ||                \n                             (init_state_r == INIT_PI_PHASELOCK_READS) ||\n                             (init_state_r == INIT_RDLVL_STG2_READ) ||\n                             (init_state_r == INIT_OCLKDELAY_READ) ||\n                             (init_state_r == INIT_WRCAL_READ) ||\n                             (init_state_r == INIT_WRCAL_MULT_READS))begin\n                  \n                  if (chip_cnt_r[0] == 1'b1) begin\n                    phy_tmp_odt_r\n                      <= #TCQ 4'b0100;\n                    \n                  end else begin\n                    phy_tmp_odt_r\n                      <= #TCQ 4'b1000;\n                  end\n                end\n              end\n              \n              \n              phy_tmp_cs1_r[(chip_cnt_r*nCS_PER_RANK) +: nCS_PER_RANK] \n                <= #TCQ {nCS_PER_RANK{1'b0}};\n            end\n            default: begin\n              phy_tmp_odt_r <= #TCQ 4'b1111;\n              \n              phy_tmp_cs1_r[(chip_cnt_r*nCS_PER_RANK) +: nCS_PER_RANK] \n                <= #TCQ {nCS_PER_RANK{1'b0}};\n              if ((RTT_WR == \"OFF\") ||\n                  ((WRLVL==\"ON\") && ~wrlvl_done)) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n                \n                tmp_mr2_r[1] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[1] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"60\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     (RTT_NOM_int == \"20\") ? 3'b100 :\n                                     (RTT_NOM_int == \"30\") ? 3'b101 :\n                                     (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     3'b000;\n                \n                tmp_mr2_r[1] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[1] <= #TCQ (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     (RTT_NOM_int == \"20\") ? 3'b100 :\n                                     (RTT_NOM_int == \"30\") ? 3'b101 :\n                                     (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     3'b000;\n              end\n            end\n          endcase\n        end\n      end",
        "    end else if (nSLOTS == 2) begin: gen_dual_slot_odt",
        "      always @(posedge clk) begin\n        if (rst) begin\n          tmp_mr2_r[1]   <= #TCQ 2'b00;\n          tmp_mr2_r[2]   <= #TCQ 2'b00;\n          tmp_mr2_r[3]   <= #TCQ 2'b00;\n          tmp_mr1_r[1]   <= #TCQ 3'b000;\n          tmp_mr1_r[2]   <= #TCQ 3'b000;\n          tmp_mr1_r[3]   <= #TCQ 3'b000;\n          phy_tmp_cs1_r <= #TCQ {CS_WIDTH*nCS_PER_RANK{1'b1}};\n          phy_tmp_odt_r <= #TCQ 4'b0000;\n          phy_tmp_odt_r1 <= #TCQ phy_tmp_odt_r;\n        end else begin \n          case ({slot_0_present[0],slot_0_present[1],\n                 slot_0_present[2],slot_0_present[3]})\n            \n            \n            \n            4'b1111: begin    \n              if ((RTT_WR == \"OFF\") || \n                  ((WRLVL==\"ON\") && ~wrlvl_done &&\n                   (wrlvl_rank_cntr==3'd0))) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\")  ? 3'b011 :\n                                     (RTT_NOM_int == \"60\")  ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n              phy_tmp_odt_r <= #TCQ 4'b0001;\n              \n              phy_tmp_cs1_r[((chip_cnt_r*nCS_PER_RANK)\n                             ) +: nCS_PER_RANK] <= #TCQ 'b0;\n            end \n        \n            \n            4'b1000: begin    \n              phy_tmp_odt_r <= #TCQ 4'b0001;\n              if ((REG_CTRL == \"ON\") && (nCS_PER_RANK > 1)) begin\n                phy_tmp_cs1_r[chip_cnt_r] <= #TCQ 1'b0;\n              end else begin\n                phy_tmp_cs1_r <= #TCQ {CS_WIDTH*nCS_PER_RANK{1'b0}};\n              end\n              if ((RTT_WR == \"OFF\") || \n                  ((WRLVL==\"ON\") && ~wrlvl_done && \n                   ((cnt_init_mr_r == 2'd0) || (USE_ODT_PORT == 1)))) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\")  ? 3'b011 :\n                                     (RTT_NOM_int == \"60\")  ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n            end \n            \n            \n            4'b1100: begin\n              phy_tmp_odt_r <= #TCQ 4'b0001;\n              \n              \n              phy_tmp_cs1_r[((chip_cnt_r*nCS_PER_RANK)\n                             ) +: nCS_PER_RANK] <= #TCQ 'b0;\n              if ((RTT_WR == \"OFF\") || \n                  ((WRLVL==\"ON\") && ~wrlvl_done &&\n                   (wrlvl_rank_cntr==3'd0))) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n            end \n            \n            default: begin    \n              phy_tmp_odt_r <= #TCQ 4'b0001;\n              phy_tmp_cs1_r <= #TCQ {CS_WIDTH*nCS_PER_RANK{1'b0}};\n              if ((RTT_WR == \"OFF\") || \n                  ((WRLVL==\"ON\") && ~wrlvl_done)) begin\n                \n                tmp_mr2_r[0] <= #TCQ 2'b00;\n                \n                tmp_mr1_r[0] <= #TCQ (RTT_NOM_int == \"40\") ? 3'b011 :\n                                     (RTT_NOM_int == \"60\") ? 3'b001 :\n                                     (RTT_NOM_int == \"120\") ? 3'b010 :\n                                     3'b000;\n              end else begin\n                \n                tmp_mr2_r[0] <= #TCQ (RTT_WR == \"60\") ? 2'b01 :\n                                2'b10;\n                \n                tmp_mr1_r[0] <= #TCQ 3'b000;\n              end\n            end       \n          endcase\n        end\n      end",
        "  generate\n    if (nSLOTS == 1) begin: gen_single_slot_odt",
        "      always @(posedge clk) begin\n        if (rst) begin\n          mr2_r[rnk_i]  <= #TCQ 2'b00;\n          mr1_r[rnk_i]  <= #TCQ 3'b000;\n        end else begin\n          mr2_r[rnk_i]  <= #TCQ tmp_mr2_r[rnk_i];\n          mr1_r[rnk_i]  <= #TCQ tmp_mr1_r[rnk_i];\n        end\n      end\n    end",
        "  generate\n    genvar rnk_i;\n    for (rnk_i = 0; rnk_i < 4; rnk_i = rnk_i + 1) begin: gen_rnk\n      always @(posedge clk) begin\n        if (rst) begin",
        "  always @(posedge clk) begin\n    if (rst) begin\n      calib_ctl_wren <= #TCQ 1'b0;\n      calib_cmd_wren <= #TCQ 1'b0;\n      calib_seq      <= #TCQ 2'b00;\n    end else if (cnt_pwron_cke_done_r && phy_ctl_ready\n                 && ~(phy_ctl_full || phy_cmd_full )) begin\n      calib_ctl_wren <= #TCQ 1'b1;\n      calib_cmd_wren <= #TCQ 1'b1;\n      calib_seq      <= #TCQ calib_seq + 1;\n    end else begin\n      calib_ctl_wren <= #TCQ 1'b0;\n      calib_cmd_wren <= #TCQ 1'b0;\n      calib_seq      <= #TCQ calib_seq;\n    end\n  end",
        "  always @(posedge clk) begin\n    if (wr_level_dqs_asrt) begin\n      \n      calib_cmd         <= #TCQ 3'b001;\n      if (CWL_M % 2) begin \n        calib_data_offset_0 <= #TCQ CWL_M + 3;\n        calib_data_offset_1 <= #TCQ CWL_M + 3;\n        calib_data_offset_2 <= #TCQ CWL_M + 3;\n        calib_cas_slot      <= #TCQ 2'b01;\n      end else begin \n        calib_data_offset_0 <= #TCQ CWL_M + 2;\n        calib_data_offset_1 <= #TCQ CWL_M + 2;\n        calib_data_offset_2 <= #TCQ CWL_M + 2;\n        calib_cas_slot      <= #TCQ 2'b00;\n      end\n    end else if (rdlvl_wr && new_burst_r) begin\n      \n      calib_cmd         <= #TCQ 3'b001;\n      if (CWL_M % 2) begin \n        calib_data_offset_0 <= #TCQ (nCK_PER_CLK == 4) ? CWL_M + 3 : CWL_M  - 1;\n        calib_data_offset_1 <= #TCQ (nCK_PER_CLK == 4) ? CWL_M + 3 : CWL_M  - 1;\n        calib_data_offset_2 <= #TCQ (nCK_PER_CLK == 4) ? CWL_M + 3 : CWL_M  - 1;\n        calib_cas_slot      <= #TCQ 2'b01;\n      end else begin \n        calib_data_offset_0 <= #TCQ (nCK_PER_CLK == 4) ? CWL_M + 2 : CWL_M - 2 ;\n        calib_data_offset_1 <= #TCQ (nCK_PER_CLK == 4) ? CWL_M + 2 : CWL_M - 2 ;\n        calib_data_offset_2 <= #TCQ (nCK_PER_CLK == 4) ? CWL_M + 2 : CWL_M - 2 ;\n        calib_cas_slot      <= #TCQ 2'b00;\n      end\n    end else if (rdlvl_rd && new_burst_r) begin\n      \n      calib_cmd         <= #TCQ 3'b011;\n      if (CWL_M % 2)\n        calib_cas_slot    <= #TCQ 2'b01;\n      else\n        calib_cas_slot    <= #TCQ 2'b00;\n      if (~pi_calib_done_r1) begin\n        calib_data_offset_0 <= #TCQ 6'd0;\n        calib_data_offset_1 <= #TCQ 6'd0;\n        calib_data_offset_2 <= #TCQ 6'd0;\n      end else if (~pi_dqs_found_done_r1) begin\n        calib_data_offset_0 <= #TCQ rd_data_offset_0;\n        calib_data_offset_1 <= #TCQ rd_data_offset_1;\n        calib_data_offset_2 <= #TCQ rd_data_offset_2;\n      end else begin\n        calib_data_offset_0 <= #TCQ rd_data_offset_ranks_0[6*chip_cnt_r+:6];\n        calib_data_offset_1 <= #TCQ rd_data_offset_ranks_1[6*chip_cnt_r+:6];\n        calib_data_offset_2 <= #TCQ rd_data_offset_ranks_2[6*chip_cnt_r+:6];\n      end\n    end else begin\n      \n      \n      calib_cmd           <= #TCQ 3'b100;\n      calib_data_offset_0 <= #TCQ 6'd0;\n      calib_data_offset_1 <= #TCQ 6'd0;\n      calib_data_offset_2 <= #TCQ 6'd0;\n      if (CWL_M % 2)\n        calib_cas_slot    <= #TCQ 2'b01;\n      else\n        calib_cas_slot    <= #TCQ 2'b00;\n    end\n  end",
        "      always @(posedge clk) begin\n        if ((init_state_r == INIT_LOAD_MR) ||\n            (init_state_r == INIT_MPR_RDEN) ||\n            (init_state_r == INIT_MPR_DISABLE) ||\n            (init_state_r == INIT_REG_WRITE) ||\n            (init_state_r == INIT_ZQCL) ||\n            (init_state_r == INIT_WRLVL_START) ||\n            (init_state_r == INIT_WRLVL_LOAD_MR) ||\n            (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n            (init_state_r == INIT_PRECHARGE) ||\n            (init_state_r == INIT_DDR2_PRECHARGE)||\n            (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n            (rdlvl_wr && new_burst_r))begin\n          phy_we_n[0] <= #TCQ 1'b1;\n          phy_we_n[1] <= #TCQ 1'b0;\n        end else begin\n          phy_we_n[0] <= #TCQ 1'b1;\n          phy_we_n[1] <= #TCQ 1'b1;\n        end\n      end",
        "      always @(posedge clk) begin\n        if ((init_state_r == INIT_LOAD_MR) ||\n            (init_state_r == INIT_MPR_RDEN) ||\n            (init_state_r == INIT_MPR_DISABLE) ||\n            (init_state_r == INIT_REG_WRITE) ||\n            (init_state_r == INIT_WRLVL_START) ||\n            (init_state_r == INIT_WRLVL_LOAD_MR) ||\n            (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n            (init_state_r == INIT_REFRESH) ||\n            (rdlvl_wr_rd && new_burst_r))begin\n          phy_cas_n[0] <= #TCQ 1'b1;\n          phy_cas_n[1] <= #TCQ 1'b0;\n        end else begin\n          phy_cas_n[0] <= #TCQ 1'b1;\n          phy_cas_n[1] <= #TCQ 1'b1;\n        end\n      end",
        "        always @(posedge clk) begin\n          if ((init_state_r == INIT_LOAD_MR) ||\n              (init_state_r == INIT_MPR_RDEN) ||\n              (init_state_r == INIT_MPR_DISABLE) ||\n              (init_state_r == INIT_REG_WRITE) ||\n              (init_state_r == INIT_WRLVL_START) ||\n              (init_state_r == INIT_WRLVL_LOAD_MR) ||\n              (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n              (init_state_r == INIT_RDLVL_ACT) ||\n              (init_state_r == INIT_WRCAL_ACT) ||\n              (init_state_r == INIT_OCLKDELAY_ACT) ||\n              (init_state_r == INIT_OCAL_COMPLEX_ACT) ||\n              (init_state_r == INIT_OCAL_CENTER_ACT) ||              \n              (init_state_r == INIT_PRECHARGE) ||\n              (init_state_r == INIT_DDR2_PRECHARGE) ||\n              (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n              (init_state_r == INIT_RDLVL_COMPLEX_ACT) ||\n              (init_state_r == INIT_REFRESH))begin\n          phy_ras_n[0] <= #TCQ 1'b1;\n          phy_ras_n[1] <= #TCQ 1'b0;\n        end else begin\n          phy_ras_n[0] <= #TCQ 1'b1;\n          phy_ras_n[1] <= #TCQ 1'b1;\n        end\n      end",
        "        always @(posedge clk) begin\n          if ((init_state_r == INIT_LOAD_MR) ||\n              (init_state_r == INIT_MPR_RDEN) ||\n              (init_state_r == INIT_MPR_DISABLE) ||\n              (init_state_r == INIT_REG_WRITE) ||\n              (init_state_r == INIT_ZQCL) ||\n              (init_state_r == INIT_WRLVL_START) ||\n              (init_state_r == INIT_WRLVL_LOAD_MR) ||\n              (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n              (init_state_r == INIT_PRECHARGE) ||\n              (init_state_r == INIT_DDR2_PRECHARGE)||\n              (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n              (rdlvl_wr && new_burst_r))begin\n          phy_we_n[0] <= #TCQ 1'b0;\n          phy_we_n[1] <= #TCQ 1'b1;\n        end else begin\n          phy_we_n[0] <= #TCQ 1'b1;\n          phy_we_n[1] <= #TCQ 1'b1;\n        end\n      end",
        "        always @(posedge clk) begin\n          if ((init_state_r == INIT_LOAD_MR) ||\n              (init_state_r == INIT_MPR_RDEN) ||\n              (init_state_r == INIT_MPR_DISABLE) ||\n              (init_state_r == INIT_REG_WRITE) ||\n              (init_state_r == INIT_WRLVL_START) ||\n              (init_state_r == INIT_WRLVL_LOAD_MR) ||\n              (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n              (init_state_r == INIT_REFRESH) ||\n              (rdlvl_wr_rd && new_burst_r))begin\n          phy_cas_n[0] <= #TCQ 1'b0;\n          phy_cas_n[1] <= #TCQ 1'b1;\n        end else begin\n          phy_cas_n[0] <= #TCQ 1'b1;\n          phy_cas_n[1] <= #TCQ 1'b1;\n          end\n        end",
        "        always @(posedge clk) begin\n          if ((init_state_r == INIT_LOAD_MR) ||\n              (init_state_r == INIT_MPR_RDEN) ||\n              (init_state_r == INIT_MPR_DISABLE) ||\n              (init_state_r == INIT_REG_WRITE) ||\n              (init_state_r == INIT_WRLVL_START) ||\n              (init_state_r == INIT_WRLVL_LOAD_MR) ||\n              (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n              (init_state_r == INIT_RDLVL_ACT) ||\n              (init_state_r == INIT_WRCAL_ACT) ||\n              (init_state_r == INIT_OCLKDELAY_ACT) ||\n              (init_state_r == INIT_OCAL_COMPLEX_ACT) ||    \n              (init_state_r == INIT_OCAL_CENTER_ACT) ||              \n              (init_state_r == INIT_PRECHARGE) ||\n              (init_state_r == INIT_DDR2_PRECHARGE) ||\n              (init_state_r == INIT_REFRESH) ||\n              (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n              (init_state_r == INIT_RDLVL_COMPLEX_ACT))begin\n          phy_ras_n[0] <= #TCQ 1'b0;\n          phy_ras_n[1] <= #TCQ 1'b1;\n        end else begin\n          phy_ras_n[0] <= #TCQ 1'b1;\n          phy_ras_n[1] <= #TCQ 1'b1;\n          end\n        end",
        "  generate \n      if (!(CWL_M % 2)) begin: even_cwl\n        always @(posedge clk) begin",
        "  endgenerate",
        "      always @(posedge clk) begin\n        phy_ras_n[3:2] <= #TCQ 3'b11;\n        phy_cas_n[3:2] <= #TCQ 3'b11;\n        phy_we_n[3:2]  <= #TCQ 3'b11;\n      end",
        "  generate\n    if (nCK_PER_CLK == 4) begin: gen_div4_ca_tieoff\n      always @(posedge clk) begin",
        "endgenerate",
        "    always @(posedge clk)\n        if ((~oclkdelay_calib_done)&& (DRAM_TYPE == \"DDR3\"))\n          phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'hF}},\n                              {DQ_WIDTH/4{4'h0}},\n                              {DQ_WIDTH/4{4'hF}},\n                              {DQ_WIDTH/4{4'h0}}};\n        else if ((!wrcal_done) && (DRAM_TYPE == \"DDR3\"))begin\n          case (wrcal_pat_cnt)\n          2'b00: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h5}},\n                                {DQ_WIDTH/4{4'hA}},\n                                {DQ_WIDTH/4{4'h0}},\n                                {DQ_WIDTH/4{4'hF}}};\n          end\n          2'b01: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h6}},\n                                {DQ_WIDTH/4{4'h9}},\n                                {DQ_WIDTH/4{4'hA}},\n                                {DQ_WIDTH/4{4'h5}}};\n          end\n          2'b10: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},\n                                {DQ_WIDTH/4{4'hE}},\n                                {DQ_WIDTH/4{4'h1}},\n                                {DQ_WIDTH/4{4'hB}}};\n          end\n          2'b11: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h8}},\n                                {DQ_WIDTH/4{4'hD}},\n                                {DQ_WIDTH/4{4'hE}},\n                                {DQ_WIDTH/4{4'h4}}};\n          end\n          endcase\n        end else if (!rdlvl_stg1_done) begin\n          \n          \n          \n          case (wrdata_pat_cnt)\n          2'b00: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'hE}},\n                                {DQ_WIDTH/4{4'h7}},\n                                {DQ_WIDTH/4{4'h3}},\n                                {DQ_WIDTH/4{4'h9}}};\n          end\n          \n          2'b01: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},\n                                {DQ_WIDTH/4{4'h2}},\n                                {DQ_WIDTH/4{4'h9}},\n                                {DQ_WIDTH/4{4'hC}}};\n          end\n          \n          2'b10: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'hE}},\n                                {DQ_WIDTH/4{4'h7}},\n                                {DQ_WIDTH/4{4'h1}},\n                                {DQ_WIDTH/4{4'hB}}};\n          end\n          \n          2'b11: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},\n                                {DQ_WIDTH/4{4'h2}},\n                                {DQ_WIDTH/4{4'h9}},\n                                {DQ_WIDTH/4{4'hC}}};\n          end\n          endcase\n        end else if (!prbs_rdlvl_done && ~phy_data_full) begin\n          phy_wrdata <= #TCQ prbs_o;\n          \n          \n          \n\n\n\n        end else if (!complex_oclkdelay_calib_done && ~phy_data_full) begin\n          phy_wrdata <= #TCQ prbs_o;\n        end\n\n   end",
        "       else if (!complex_oclkdelay_calib_done && ~phy_data_full) \n          phy_wrdata <= #TCQ prbs_o;\n  end else begin: wrdq_div1_2to1_wrcal_first",
        "      end else if (!rdlvl_stg1_done && ~phy_data_full) begin\n        \n        \n        \n        if (first_rdlvl_pat_r)\n          phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},{DQ_WIDTH/4{4'h2}},\n                              {DQ_WIDTH/4{4'h9}},{DQ_WIDTH/4{4'hC}},\n                              {DQ_WIDTH/4{4'hE}},{DQ_WIDTH/4{4'h7}},\n                              {DQ_WIDTH/4{4'h3}},{DQ_WIDTH/4{4'h9}}};\n        else\n          \n          \n          \n          phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},{DQ_WIDTH/4{4'h2}},\n                              {DQ_WIDTH/4{4'h9}},{DQ_WIDTH/4{4'hC}},\n                              {DQ_WIDTH/4{4'hE}},{DQ_WIDTH/4{4'h7}},\n                              {DQ_WIDTH/4{4'h1}},{DQ_WIDTH/4{4'hB}}};    ",
        "    always @(posedge clk)\n      if ((~oclkdelay_calib_done) && (DRAM_TYPE == \"DDR3\"))\n        phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'hF}},{DQ_WIDTH/4{4'h0}},\n                            {DQ_WIDTH/4{4'hF}},{DQ_WIDTH/4{4'h0}},\n                            {DQ_WIDTH/4{4'hF}},{DQ_WIDTH/4{4'h0}},\n                            {DQ_WIDTH/4{4'hF}},{DQ_WIDTH/4{4'h0}}};\n      else if ((!wrcal_done)&& (DRAM_TYPE == \"DDR3\")) begin\n        if (extend_cal_pat)\n          phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h6}},{DQ_WIDTH/4{4'h9}},\n                              {DQ_WIDTH/4{4'hA}},{DQ_WIDTH/4{4'h5}},\n                              {DQ_WIDTH/4{4'h5}},{DQ_WIDTH/4{4'hA}},\n                              {DQ_WIDTH/4{4'h0}},{DQ_WIDTH/4{4'hF}}};\n        else if (first_wrcal_pat_r)\n          phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h6}},{DQ_WIDTH/4{4'h9}},\n                              {DQ_WIDTH/4{4'hA}},{DQ_WIDTH/4{4'h5}},\n                              {DQ_WIDTH/4{4'h5}},{DQ_WIDTH/4{4'hA}},\n                              {DQ_WIDTH/4{4'h0}},{DQ_WIDTH/4{4'hF}}};",
        "  end else if (nCK_PER_CLK == 4) begin: wrdq_div1_4to1_wrcal_first\n    ",
        "    always @(posedge clk)\n      if (~oclkdelay_calib_done)\n        phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'hF}},{DQ_WIDTH/4{4'h0}},\n                            {DQ_WIDTH/4{4'hF}},{DQ_WIDTH/4{4'h0}},\n                            {DQ_WIDTH/4{4'hF}},{DQ_WIDTH/4{4'h0}},\n                            {DQ_WIDTH/4{4'hF}},{DQ_WIDTH/4{4'h0}}};\n      else if (!rdlvl_stg1_done && ~phy_data_full)\n        \n        \n        \n        if (first_rdlvl_pat_r)\n          phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},{DQ_WIDTH/4{4'h2}},\n                              {DQ_WIDTH/4{4'h9}},{DQ_WIDTH/4{4'hC}},\n                              {DQ_WIDTH/4{4'hE}},{DQ_WIDTH/4{4'h7}},\n                              {DQ_WIDTH/4{4'h3}},{DQ_WIDTH/4{4'h9}}};\n        else\n          \n          \n          \n          phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},{DQ_WIDTH/4{4'h2}},\n                              {DQ_WIDTH/4{4'h9}},{DQ_WIDTH/4{4'hC}},\n                              {DQ_WIDTH/4{4'hE}},{DQ_WIDTH/4{4'h7}},\n                              {DQ_WIDTH/4{4'h1}},{DQ_WIDTH/4{4'hB}}};\n      else if (~(prbs_rdlvl_done || prbs_last_byte_done_r) && ~phy_data_full)\n          phy_wrdata <= #TCQ prbs_o;",
        "  end else if ((CLK_PERIOD/nCK_PER_CLK > 2500) && (nCK_PER_CLK == 4)) begin: wrdq_div2_4to1_rdlvl_first",
        "        end else if (!wrcal_done) begin\n          case (wrcal_pat_cnt)\n          2'b00: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h5}},\n                                {DQ_WIDTH/4{4'hA}},\n                                {DQ_WIDTH/4{4'h0}},\n                                {DQ_WIDTH/4{4'hF}}};\n          end\n          2'b01: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h6}},\n                                {DQ_WIDTH/4{4'h9}},\n                                {DQ_WIDTH/4{4'hA}},\n                                {DQ_WIDTH/4{4'h5}}};\n          end\n          2'b10: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},\n                                {DQ_WIDTH/4{4'hE}},\n                                {DQ_WIDTH/4{4'h1}},\n                                {DQ_WIDTH/4{4'hB}}};\n          end\n          2'b11: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h8}},\n                                {DQ_WIDTH/4{4'hD}},\n                                {DQ_WIDTH/4{4'hE}},\n                                {DQ_WIDTH/4{4'h4}}};\n          end\n          endcase\n        end",
        "    always @(posedge clk)\n        if (~oclkdelay_calib_done)\n          phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'hF}},\n                              {DQ_WIDTH/4{4'h0}},\n                              {DQ_WIDTH/4{4'hF}},\n                              {DQ_WIDTH/4{4'h0}}};\n        else if (!rdlvl_stg1_done) begin\n          \n          \n          \n          case (wrdata_pat_cnt)\n          2'b00: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'hE}},\n                                {DQ_WIDTH/4{4'h7}},\n                                {DQ_WIDTH/4{4'h3}},\n                                {DQ_WIDTH/4{4'h9}}};\n          end\n          \n          2'b01: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},\n                                {DQ_WIDTH/4{4'h2}},\n                                {DQ_WIDTH/4{4'h9}},\n                                {DQ_WIDTH/4{4'hC}}};\n          end\n          \n          2'b10: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'hE}},\n                                {DQ_WIDTH/4{4'h7}},\n                                {DQ_WIDTH/4{4'h1}},\n                                {DQ_WIDTH/4{4'hB}}};\n          end\n          \n          2'b11: begin\n            phy_wrdata <= #TCQ {{DQ_WIDTH/4{4'h4}},\n                                {DQ_WIDTH/4{4'h2}},\n                                {DQ_WIDTH/4{4'h9}},\n                                {DQ_WIDTH/4{4'hC}}};\n          end\n          endcase\n        end else if (!prbs_rdlvl_done && ~phy_data_full) begin",
        "generate\n  if ((CLK_PERIOD/nCK_PER_CLK > 2500) && (nCK_PER_CLK == 2)) begin: wrdq_div2_2to1_rdlvl_first\n    ",
        "  always @(posedge clk)\n    if (rst || wrcal_resume ||\n       (init_state_r == INIT_WRCAL_ACT_WAIT))\n      first_wrcal_pat_r <= #TCQ 1'b1;\n    else if (phy_wrdata_en && (init_state_r == INIT_WRCAL_WRITE))\n      first_wrcal_pat_r <= #TCQ 1'b0;\n",
        "  always @(posedge clk)\n    if (rst || rdlvl_stg1_rank_done)\n      first_rdlvl_pat_r <= #TCQ 1'b1;\n    else if (phy_wrdata_en && (init_state_r == INIT_RDLVL_STG1_WRITE))\n      first_rdlvl_pat_r <= #TCQ 1'b0;\n      ",
        "  always @(posedge clk)\n    if ((init_state_r == INIT_IDLE) ||\n        (init_state_r == INIT_RDLVL_STG1_WRITE))\n      cnt_init_data_r <= #TCQ 2'b00;\n    else if (phy_wrdata_en)\n      cnt_init_data_r <= #TCQ cnt_init_data_r + 1;\n    else if (init_state_r == INIT_WRCAL_WRITE)\n      cnt_init_data_r <= #TCQ 2'b10;     ",
        "  assign phy_rddata_valid = init_complete_r1_timing ? phy_rddata_en : 1'b0;",
        "  assign phy_rddata_en = ~phy_if_empty;",
        "  endgenerate",
        "      always @(posedge clk) begin\n        if (!phy_wrdata_en & first_wrcal_pat_r)\n          wrcal_pat_cnt <= #TCQ 2'b00;\n        else if (extend_cal_pat && (wrcal_pat_cnt == 2'b01))\n          wrcal_pat_cnt <= #TCQ 2'b00;\n        else if (wrcal_pat_cnt == 2'b11)\n          wrcal_pat_cnt <= #TCQ 2'b10;\n        else\n          wrcal_pat_cnt <= #TCQ wrcal_pat_cnt + 1;\n      end",
        "      always @(posedge clk) begin\n        if (!phy_wrdata_en & first_rdlvl_pat_r)\n          wrdata_pat_cnt <= #TCQ 2'b00;\n        else if (wrdata_pat_cnt == 2'b11)\n          wrdata_pat_cnt <= #TCQ 2'b10;\n        else\n          wrdata_pat_cnt <= #TCQ wrdata_pat_cnt + 1;\n      end",
        "      always @(posedge clk)\n        phy_wrdata_en_r1 <= #TCQ rdlvl_wr & ~phy_ctl_full & new_burst_r\n                                 & ~phy_data_full;\n    ",
        "      always @(*)\n        if((rdlvl_wr & ~phy_ctl_full & new_burst_r & ~phy_data_full) \n             | phy_wrdata_en_r1)\n          phy_wrdata_en = 1'b1;\n        else\n          phy_wrdata_en = 1'b0;\n",
        "      always @(*) begin\n        if (~phy_data_full && ((init_state_r == INIT_RDLVL_STG1_WRITE) ||\n            (init_state_r == INIT_OCLKDELAY_WRITE) ||\n            (init_state_r == INIT_OCAL_CENTER_WRITE) || \n            (init_state_r == INIT_WRCAL_WRITE)))\n          phy_wrdata_en = 1'b1;\n        else\n          phy_wrdata_en = 1'b0;\n      end",
        "  generate\n    if ((nCK_PER_CLK == 4) || (BURST_MODE == \"4\")) begin: wrdqen_div4\n    \n    ",
        "  always @(posedge clk) begin\n    if (rst || wrcal_done)\n      extend_cal_pat <= #TCQ 1'b0;\n    else if (temp_lmr_done && (PRE_REV3ES == \"ON\")) \n      extend_cal_pat <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk) begin\n    rdlvl_wr_r      <= #TCQ rdlvl_wr;\n    calib_wrdata_en <= #TCQ phy_wrdata_en;\n  end ",
        "  always @(posedge clk)\n    if (rdlvl_wr_rd) begin\n      \n      \n      if (nCK_PER_CLK == 2) begin\n        if (!phy_ctl_full)\n          new_burst_r <= #TCQ ~new_burst_r;\n      end else\n        new_burst_r <= #TCQ 1'b1;\n    end else\n      new_burst_r <= #TCQ 1'b1;\n  ",
        "  always @(posedge clk)\n    if (rst ||(init_state_r == INIT_WRCAL_READ_WAIT))\n      wrcal_reads <= #TCQ 2'b00;\n    else if ((wrcal_reads > 2'b00) && ~(phy_ctl_full || phy_cmd_full))\n      wrcal_reads <= #TCQ wrcal_reads - 1;\n    else if ((init_state_r == INIT_WRCAL_MULT_READS) || phy_ctl_full || \n             phy_cmd_full && new_burst_r)\n      wrcal_reads <= #TCQ 'd255;",
        "endgenerate",
        "  always @(posedge clk)\n    if (rst || (init_state_r == INIT_RDLVL_STG2_READ_WAIT))\n      num_reads <= #TCQ 3'b000;\n    else if ((num_reads > 3'b000) && ~(phy_ctl_full || phy_cmd_full))\n      num_reads <= #TCQ num_reads - 1;\n    else if ((init_state_r == INIT_RDLVL_STG2_READ) || phy_ctl_full || \n             phy_cmd_full && new_burst_r)\n      num_reads <= #TCQ 3'b111;\nend",
        "  always @(posedge clk)\n    if (rst || (init_state_r == INIT_RDLVL_STG2_READ_WAIT))\n      num_reads <= #TCQ 3'b000;\n    else if ((num_reads > 3'b000) && ~(phy_ctl_full || phy_cmd_full))\n      num_reads <= #TCQ num_reads - 1;\n    else if ((init_state_r == INIT_RDLVL_STG2_READ) || phy_ctl_full || \n             phy_cmd_full && new_burst_r)\n      num_reads <= #TCQ 3'b011;\nend else if(nCK_PER_CLK == 2) begin: back_to_back_reads_2_1 ",
        "generate\nif(nCK_PER_CLK == 4) begin:back_to_back_reads_4_1\n  \n  ",
        "   always @(posedge clk)\n     if (rst || (init_state_r == INIT_WRCAL_WRITE_READ) ||\n        (wrcal_wr_cnt == 4'd0))\n       wrcal_wr_cnt <= #TCQ NUM_STG1_WR_RD;\n     else if ((init_state_r == INIT_WRCAL_WRITE) && \n             new_burst_r && ~phy_data_full)\n       wrcal_wr_cnt <= #TCQ wrcal_wr_cnt - 1;\n",
        "   always @(posedge clk)\n     if (rst || (init_state_r == INIT_OCLKDELAY_WRITE_WAIT) ||\n        (oclk_wr_cnt == 4'd0))\n       oclk_wr_cnt <= #TCQ NUM_STG1_WR_RD;\n     else if ((init_state_r == INIT_OCLKDELAY_WRITE) && \n             new_burst_r && ~phy_data_full)\n       oclk_wr_cnt <= #TCQ oclk_wr_cnt - 1;",
        "  always @(posedge clk)\n    if (rst)\n      complex_ocal_odt_ext <= #TCQ 1'b0;\n    else if (((init_state_r == INIT_PRECHARGE_PREWAIT) && cnt_cmd_done_m7_r) || (init_state_r == INIT_OCLKDELAY_READ_WAIT))\n      complex_ocal_odt_ext <= #TCQ 1'b0;\n    else if ((init_state_r == INIT_OCAL_CENTER_WRITE) || (init_state_r == INIT_OCAL_CENTER_WRITE_WAIT))\n      complex_ocal_odt_ext <= #TCQ 1'b1;\n",
        "   always @ (posedge clk) begin\n     if(rst || (init_state_r == INIT_OCAL_COMPLEX_ACT) || \n               (prbs_rdlvl_done && (init_state_r == INIT_RDLVL_COMPLEX_ACT)) )\n       complex_ocal_ref_done <= #TCQ 1'b1;   \n     else if (init_state_r == INIT_RDLVL_STG1_WRITE)\n       complex_ocal_ref_done <= #TCQ 1'b0; \n   end",
        "   always @(posedge clk) begin\n     complex_sample_cnt_inc_r1 <= #TCQ complex_sample_cnt_inc;\n     complex_sample_cnt_inc_r2 <= #TCQ complex_sample_cnt_inc_r1;\n   end",
        "   always @(posedge clk)\n     if (rst)\n       complex_sample_cnt_inc <= #TCQ 1'b0;\n     else if ((stg1_wr_rd_cnt == 9'd1) && complex_row1_rd_done)\n       complex_sample_cnt_inc <= #TCQ 1'b1;\n     else\n       complex_sample_cnt_inc <= #TCQ 1'b0;",
        "    always @(posedge clk)\n     if (rst)\n       complex_sample_cnt_inc_ocal <= #TCQ 1'b0;\n     else if ((stg1_wr_rd_cnt == 9'd1) && complex_byte_rd_done && prbs_rdlvl_done)\n       complex_sample_cnt_inc_ocal <= #TCQ 1'b1;\n     else\n       complex_sample_cnt_inc_ocal <= #TCQ 1'b0;\n",
        "  always @(posedge clk)\n    if (rst || prbs_rdlvl_done_pulse)\n      complex_num_writes_dec <= #TCQ 'd1;\n    else if (((init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) && (complex_wait_cnt == 'd15) && ~complex_row0_rd_done) ||\n              ((init_state_r == INIT_RDLVL_STG1_WRITE_READ) || (init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT)))\n      complex_num_writes_dec <= #TCQ complex_num_writes;\n    else if ((init_state_r == INIT_RDLVL_STG1_WRITE) && (complex_num_writes_dec > 'd0))\n      complex_num_writes_dec <= #TCQ complex_num_writes_dec - 1;\n",
        "  always @(posedge clk)\n    if (rst || prbs_rdlvl_done_pulse) begin\n      complex_num_writes <= #TCQ 'd1;\n    end else if ((init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) && (complex_wait_cnt == 'd14) && ~complex_row0_wr_done) begin\n      if (stg1_wr_rd_cnt > 'd85) begin\n        if (complex_num_writes < 'd6)\n          complex_num_writes <= #TCQ complex_num_writes + 1;\n        else\n          complex_num_writes <= #TCQ 'd1;\n      \n      end else if (stg1_wr_rd_cnt > 'd73) begin\n        if (stg1_wr_rd_cnt == 'd85) \n          complex_num_writes <= #TCQ 'd3;\n        else if (complex_num_writes < 'd5)\n          complex_num_writes <= #TCQ complex_num_writes + 1;\n      end else if (stg1_wr_rd_cnt > 'd39) begin\n        if (stg1_wr_rd_cnt == 'd73) \n          complex_num_writes <= #TCQ 'd7;\n        else if (complex_num_writes < 'd10)\n          complex_num_writes <= #TCQ complex_num_writes + 1;\n      end else begin\n        if (stg1_wr_rd_cnt == 'd39) \n          complex_num_writes <= #TCQ 'd12;\n        else if (complex_num_writes < 'd14)\n          complex_num_writes <= #TCQ complex_num_writes + 1;\n      end \n    \n    end else if ((init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT) && complex_row0_wr_done)\n      complex_num_writes <= #TCQ 'd30;\n    else if (init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT)\n      complex_num_writes <= #TCQ 'd1;    ",
        "  always @ (posedge clk)\n    if (rst) \n      complex_oclkdelay_calib_start <= #TCQ 'b0;\n    else if (complex_oclkdelay_calib_start_int && (init_state_r == INIT_OCAL_CENTER_WRITE_WAIT) && prbs_rdlvl_done) \n      complex_oclkdelay_calib_start <= #TCQ 'b1;\n        ",
        "  always @(posedge clk) begin\n\tcomplex_oclkdelay_calib_start_r1 <= #TCQ complex_oclkdelay_calib_start_int;\n    complex_oclkdelay_calib_start_r2 <= #TCQ complex_oclkdelay_calib_start_r1;\n  end",
        "  always @ (posedge clk)\n    if (rst) \n      complex_oclkdelay_calib_start_int <= #TCQ 'b0;\n    else if ((init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT) && prbs_last_byte_done_r) \n      complex_oclkdelay_calib_start_int <= #TCQ 'b1;\n\t  ",
        "   always @(posedge clk)\n     if (rst)\n       complex_address <= #TCQ 'd0;\n     else if (((init_state_r == INIT_RDLVL_COMPLEX_READ_WAIT) && (init_state_r1 != INIT_RDLVL_COMPLEX_READ_WAIT)) ||\n              ((init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) && (init_state_r1 != INIT_OCAL_COMPLEX_WRITE_WAIT)))              \n       complex_address <= #TCQ phy_address[COL_WIDTH-1:0];\n       ",
        "  always @(posedge clk)\n    if (rst)\n      complex_num_reads_dec <= #TCQ 'd1;\n    else if (((init_state_r == INIT_RDLVL_COMPLEX_READ_WAIT) && (complex_wait_cnt == 'd15) && ~complex_row0_rd_done) ||\n              ((init_state_r == INIT_RDLVL_STG1_WRITE_READ) || (init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT)))\n      complex_num_reads_dec <= #TCQ complex_num_reads;\n    else if ((init_state_r == INIT_RDLVL_COMPLEX_READ) && (complex_num_reads_dec > 'd0))\n      complex_num_reads_dec <= #TCQ complex_num_reads_dec - 1;\n",
        "  always @(posedge clk)\n    if (rst) begin\n      complex_num_reads <= #TCQ 'd1;\n    end else if ((((init_state_r == INIT_RDLVL_COMPLEX_READ_WAIT) && (complex_wait_cnt == 'd14)) || \n\t              ((init_state_r == INIT_RDLVL_STG1_WRITE_READ) && ext_int_ref_req && (cnt_cmd_r == 'd127))) && \n\t\t\t\t  ~complex_row0_rd_done) begin\n      if (stg1_wr_rd_cnt > 'd85) begin\n        if (complex_num_reads < 'd6)\n          complex_num_reads <= #TCQ complex_num_reads + 1;\n        else\n          complex_num_reads <= #TCQ 'd1;\n      \n      end else if (stg1_wr_rd_cnt > 'd73) begin\n        if (stg1_wr_rd_cnt == 'd85) \n          complex_num_reads <= #TCQ 'd3;\n        else if (complex_num_reads < 'd5)\n          complex_num_reads <= #TCQ complex_num_reads + 1;\n      end else if (stg1_wr_rd_cnt > 'd39) begin\n        if (stg1_wr_rd_cnt == 'd73) \n          complex_num_reads <= #TCQ 'd7;\n        else if (complex_num_reads < 'd10)\n          complex_num_reads <= #TCQ complex_num_reads + 1;\n      end else begin\n        if (stg1_wr_rd_cnt == 'd39) \n          complex_num_reads <= #TCQ 'd12;\n        else if (complex_num_reads < 'd14)\n          complex_num_reads <= #TCQ complex_num_reads + 1;\n      end \n    \n    end else if ((((init_state_r == INIT_RDLVL_STG1_WRITE_READ) || (init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT)) && ~ext_int_ref_req) ||\n\t             ((init_state_r == INIT_RDLVL_STG1_WRITE_READ) && (stg1_wr_rd_cnt == 'd22)))\n      complex_num_reads <= #TCQ 'd1;\n",
        "  always @(posedge clk)\n    if (rst)\n      complex_wait_cnt <= #TCQ 'd0;\n    else if (((init_state_r == INIT_RDLVL_COMPLEX_READ_WAIT) ||\n              (init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) ||\n              (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT) ||\n              (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE_WAIT) ||\n              (init_state_r == INIT_OCAL_COMPLEX_ACT_WAIT) ||\n              (init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT)) && complex_wait_cnt < 'd15)\n      complex_wait_cnt <= #TCQ complex_wait_cnt + 1;\n    else\n      complex_wait_cnt <= #TCQ 'd0;",
        "    always @(posedge clk)\n      if ((init_state_r == INIT_IDLE) || rdlvl_last_byte_done || ( complex_oclkdelay_calib_done && (init_state_r == INIT_RDLVL_STG1_WRITE )) ||\n          (rdlvl_stg1_rank_done )  || (complex_byte_rd_done && init_state_r == INIT_RDLVL_COMPLEX_ACT) || prbs_rdlvl_done_pulse )\n        complex_wr_done <= #TCQ 1'b0;\n      else if ((init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT) && complex_row1_wr_done && (complex_wait_cnt == 'd13))\n        complex_wr_done <= #TCQ 1'b1;\n      else if ((init_state_r == INIT_OCAL_COMPLEX_ACT_WAIT) && complex_row1_wr_done && (complex_wait_cnt == 'd13))\n        complex_wr_done <= #TCQ 1'b1;\n  end",
        "    always @(posedge clk)\n      if ((init_state_r == INIT_IDLE) || rdlvl_last_byte_done || ( complex_oclkdelay_calib_done && (init_state_r == INIT_RDLVL_STG1_WRITE )) || \n         (complex_byte_rd_done && init_state_r == INIT_RDLVL_COMPLEX_ACT) || prbs_rdlvl_done_pulse )\n        complex_wr_done <= #TCQ 1'b0;\n      else if ((init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT) && complex_row1_wr_done && (complex_wait_cnt == 'd13))\n        complex_wr_done <= #TCQ 1'b1;\n      else if ((init_state_r == INIT_OCAL_COMPLEX_ACT_WAIT) && complex_row1_wr_done && (complex_wait_cnt == 'd13))\n        complex_wr_done <= #TCQ 1'b1;\n  end else begin: dual_rank_complex",
        "generate\n  if (RANKS < 2) begin: one_rank_complex",
        "  always @ (posedge clk) begin\n      complex_byte_rd_done_r1 <= #TCQ complex_byte_rd_done;\n      complex_ocal_num_samples_inc <= #TCQ (complex_byte_rd_done & ~complex_byte_rd_done_r1);\n  end",
        "  always @ (posedge clk) begin\n    if (rst || (init_state_r == INIT_RDLVL_STG1_WRITE)  || prbs_rdlvl_done_pulse)\n      complex_byte_rd_done <= #TCQ 'b0;\n    else if (prbs_rdlvl_done && (complex_row1_rd_cnt == (COMPLEX_RD-1)) && (complex_row1_rd_done & ~complex_row1_rd_done_r1))\n      complex_byte_rd_done <= #TCQ 'b1;\n  end",
        "  always @ (posedge clk)\n    if (rst || prbs_rdlvl_done_pulse) complex_row1_rd_cnt <= #TCQ 'd0;\n    else \n      complex_row1_rd_cnt <= #TCQ (complex_row1_rd_done & ~complex_row1_rd_done_r1) ? \n                                  ((complex_row1_rd_cnt == (COMPLEX_RD-1))? 0:complex_row1_rd_cnt + 'd1) \n\t\t\t\t  : complex_row1_rd_cnt;",
        "  always @(posedge clk)\n    complex_row1_rd_done_r1 <= #TCQ complex_row1_rd_done;\n    ",
        "  always @(posedge clk)\n    if (rst || prbs_rdlvl_done_pulse)\n      complex_row1_rd_done    <= #TCQ 1'b0;\n    else if ((init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) || (init_state_r == INIT_PRECHARGE))\n      complex_row1_rd_done    <= #TCQ 1'b0;\n    else if (complex_row0_rd_done && (stg1_wr_rd_cnt == 9'd2))\n      complex_row1_rd_done    <= #TCQ 1'b1;\n      ",
        "  always @(posedge clk)\n    complex_row0_rd_done_r1 <= #TCQ complex_row0_rd_done;\n    ",
        "  always @(posedge clk)\n    if (rst || prbs_rdlvl_done_pulse)\n      complex_row0_rd_done    <= #TCQ 1'b0;\n    else if (complex_sample_cnt_inc)\n      complex_row0_rd_done    <= #TCQ 1'b0;\n    else if ( (prbs_rdlvl_start || complex_oclkdelay_calib_start_int) && (stg1_wr_rd_cnt == 9'd2) && complex_row0_wr_done && complex_row1_wr_done)\n      complex_row0_rd_done    <= #TCQ 1'b1;\n      ",
        "    always @(posedge clk)\n      if (rst || prbs_rdlvl_done_pulse ||\n              (wr_victim_inc && prbs_rdlvl_done && complex_row_cnt_ocal <COMPLEX_ROW_CNT_BYTE-1) || \n                        complex_byte_rd_done ) begin\n        complex_row1_wr_done    <= #TCQ 1'b0;\n      end else if (complex_row0_wr_done && (stg1_wr_rd_cnt == 9'd2)) begin\n      complex_row1_wr_done    <= #TCQ 1'b1;\n    end\n  end",
        "    always @(posedge clk)\n      if (rst || prbs_rdlvl_done_pulse ||\n                (wr_victim_inc && prbs_rdlvl_done && complex_row_cnt_ocal <COMPLEX_ROW_CNT_BYTE-1) || \n        complex_byte_rd_done ) begin\n        complex_row0_wr_done    <= #TCQ 1'b0;\n      end else if (rdlvl_stg1_done_r1 && (stg1_wr_rd_cnt == 9'd2)) begin\n        complex_row0_wr_done    <= #TCQ 1'b1;\n    end",
        "    always @(posedge clk)\n      if (rst || (wr_victim_inc && (complex_row_cnt < DQ_PER_DQS*2-1) && ~prbs_rdlvl_done) ||  \n                 (wr_victim_inc && prbs_rdlvl_done && complex_row_cnt_ocal <COMPLEX_ROW_CNT_BYTE-1) || \n                     complex_byte_rd_done || prbs_rdlvl_done_pulse) begin  \n      complex_row1_wr_done    <= #TCQ 1'b0;\n      end else if (complex_row0_wr_done && (stg1_wr_rd_cnt == 9'd2)) begin\n      complex_row1_wr_done    <= #TCQ 1'b1;\n    end",
        "    always @(posedge clk)\n      if (rst || (wr_victim_inc && (complex_row_cnt < DQ_PER_DQS*2-1) && ~prbs_rdlvl_done) ||  \n                  (wr_victim_inc && prbs_rdlvl_done && complex_row_cnt_ocal <COMPLEX_ROW_CNT_BYTE-1) ||\n               complex_byte_rd_done || prbs_rdlvl_done_pulse) begin  \n      complex_row0_wr_done    <= #TCQ 1'b0;\n      end else if ( rdlvl_stg1_done_r1 && (stg1_wr_rd_cnt == 9'd2)) begin\n      complex_row0_wr_done    <= #TCQ 1'b1;\n    end",
        "generate\n  if (FIXED_VICTIM == \"FALSE\") begin: wr_done_victim_rotate",
        "  always @(posedge clk)\n    if (rst) begin\n      victim_sel      <= #TCQ 'd0;\n      victim_byte_cnt <= #TCQ 'd0;\n    end else if ((~stg1_wr_done && ~prbs_rdlvl_done) || (prbs_rdlvl_done && ~complex_wr_done)) begin\n      victim_sel      <= #TCQ prbs_rdlvl_done? wr_victim_sel_ocal: wr_victim_sel;\n      victim_byte_cnt <= #TCQ 'd0; \n    end else begin\n      if( (init_state_r == INIT_RDLVL_COMPLEX_ACT) || reset_rd_addr)\n        victim_sel      <= #TCQ prbs_rdlvl_done? complex_ocal_rd_victim_sel:rd_victim_sel;  \n        victim_byte_cnt <= #TCQ 'd0; \n    end",
        "  always @(posedge clk)\n    if (rst) begin\n      wr_victim_sel_ocal <= #TCQ 'd0;\n    end else if (wr_victim_inc && (complex_row_cnt_ocal == COMPLEX_ROW_CNT_BYTE-1)) begin\n      wr_victim_sel_ocal <= #TCQ 'd0;\n    end else if (prbs_rdlvl_done && wr_victim_inc) begin\n      wr_victim_sel_ocal <= #TCQ wr_victim_sel_ocal + 1;\n    end",
        "  always @(posedge clk)\n    if (rst || (wr_victim_inc && (complex_row_cnt == DQ_PER_DQS*2-1))) begin  \n      wr_victim_sel <= #TCQ 'd0;\n    end else if (rdlvl_stg1_done_r1 && wr_victim_inc) begin\n      wr_victim_sel <= #TCQ wr_victim_sel + 1;\n    end",
        "  always @(posedge clk)\n    if (rst)\n      complex_odt_ext <= #TCQ 1'b0;\n    else if ((init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) || (init_state_r == INIT_PRECHARGE))\n      complex_odt_ext <= #TCQ 1'b0;\n    else if (rdlvl_stg1_done_r1 && (stg1_wr_rd_cnt == 9'd1) && (init_state_r == INIT_RDLVL_STG1_WRITE))\n      complex_odt_ext <= #TCQ 1'b1;\n  ",
        "    always @(posedge clk)\n      if (rst || (wr_victim_inc && (complex_row_cnt_ocal == COMPLEX_ROW_CNT_BYTE-1)) || ~rdlvl_stg1_done_r1 || prbs_rdlvl_done_pulse || complex_byte_rd_done)\n        complex_row_cnt_ocal <= #TCQ 'd0;\n      else if ( prbs_rdlvl_done && (((stg1_wr_rd_cnt == 'd30) && (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE)) || \n             (complex_sample_cnt_inc_r2) || wr_victim_inc)) begin\n        \n        if (complex_row_cnt_ocal < COMPLEX_ROW_CNT_BYTE-1)  begin\n          complex_row_cnt_ocal <= #TCQ complex_row_cnt_ocal + 1;\n    end\n    end    ",
        "    always @(posedge clk)\n      if (rst || ~rdlvl_stg1_done_r1 || prbs_rdlvl_done)\n        complex_row_cnt <= #TCQ 'd0;\n      else if ((stg1_wr_rd_cnt == 'd22) && (((init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE_WAIT) && (complex_wait_cnt == 'd15)) || complex_rdlvl_int_ref_req))\n        complex_row_cnt <= #TCQ 'd1;\n      else\n        complex_row_cnt <= #TCQ 'd0;\n  end",
        "    always @(posedge clk)\n      if (rst || (wr_victim_inc && (complex_row_cnt == DQ_PER_DQS*2-1)) || ~rdlvl_stg1_done_r1 || prbs_rdlvl_done)\n      complex_row_cnt <= #TCQ 'd0;\n    else if ((((stg1_wr_rd_cnt == 'd22) && ((init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) || \n\t                                        (complex_rdlvl_int_ref_req && (init_state_r == INIT_REFRESH_WAIT) && (cnt_cmd_r == 'd127)))) || \n             complex_victim_inc || (complex_sample_cnt_inc_r2 && ~complex_victim_inc) || wr_victim_inc || reset_rd_addr_r1)) begin\n      \n      if ((complex_row_cnt < DQ_PER_DQS*2-1) && ~stg1_wr_done)\n        complex_row_cnt <= #TCQ complex_row_cnt + 1;\n      \n      else if (stg1_wr_done) begin\n          if (reset_rd_addr_r1)\n            complex_row_cnt <= #TCQ 'd0; \n        \n        else if (complex_sample_cnt_inc_r2 && ~complex_victim_inc)\n          complex_row_cnt <= #TCQ rd_victim_sel*2;\n        \n        else if (complex_row_cnt < DQ_PER_DQS*2-1)\n          complex_row_cnt <= #TCQ complex_row_cnt + 1;\n        \n        else\n          complex_row_cnt <= #TCQ 'd0; \n      end\n    end",
        "generate\n  if (FIXED_VICTIM == \"FALSE\") begin: row_cnt_victim_rotate  ",
        "  always @(posedge clk)\n    reset_rd_addr_r1 <= #TCQ reset_rd_addr;\n  ",
        "  always @(posedge clk)\n    if (rst)\n      wr_victim_inc <= #TCQ 1'b0;\n    else if (complex_row0_wr_done && (stg1_wr_rd_cnt == 9'd2) && ~stg1_wr_done)\n      wr_victim_inc <= #TCQ 1'b1;\n    else\n      wr_victim_inc <= #TCQ 1'b0;\n",
        "  always @(posedge clk)\n    if (rst || ((init_state_r == INIT_RDLVL_STG1_WRITE_READ) && \n             ~rdlvl_stg1_done))\n      stg1_wr_rd_cnt <= #TCQ NUM_STG1_WR_RD;\n    else if (rdlvl_last_byte_done || (stg1_wr_rd_cnt == 9'd1) ||\n             (prbs_rdlvl_prech_req && (init_state_r == INIT_RDLVL_ACT_WAIT)) ||\n             (init_state_r == INIT_OCAL_COMPLEX_ACT_WAIT) ) begin\n      if (~complex_row0_wr_done || wr_victim_inc ||\n         (complex_row1_wr_done && (~complex_row0_rd_done || (complex_row0_rd_done && complex_row1_rd_done))))     \n        stg1_wr_rd_cnt <= #TCQ 'd127;\n      else\n        stg1_wr_rd_cnt <= #TCQ prbs_rdlvl_done?'d30 :'d22;\n    end else if (((init_state_r == INIT_RDLVL_STG1_WRITE) && new_burst_r && ~phy_data_full)\n              ||((init_state_r == INIT_RDLVL_COMPLEX_READ) && rdlvl_stg1_done))\n      stg1_wr_rd_cnt <= #TCQ stg1_wr_rd_cnt - 1;",
        "  always @(posedge clk)\n    if (rst || wrcal_done)\n      burst_addr_r <= #TCQ 1'b0;\n    else if ((init_state_r == INIT_WRCAL_ACT_WAIT) ||\n             (init_state_r == INIT_OCLKDELAY_ACT_WAIT) ||\n             (init_state_r == INIT_OCLKDELAY_WRITE) ||   \n             (init_state_r == INIT_OCLKDELAY_READ) ||\n             (init_state_r == INIT_WRCAL_WRITE) ||\n             (init_state_r == INIT_WRCAL_WRITE_READ) ||\n             (init_state_r == INIT_WRCAL_READ) ||\n             (init_state_r == INIT_WRCAL_MULT_READS) ||\n             (init_state_r == INIT_WRCAL_READ_WAIT))\n      burst_addr_r <= #TCQ 1'b1;\n    else if (rdlvl_wr_rd && new_burst_r)\n      burst_addr_r <= #TCQ ~burst_addr_r;\n    else\n      burst_addr_r <= #TCQ 1'b0;\n",
        "  assign rdlvl_wr = (init_state_r == INIT_OCLKDELAY_WRITE) ||\n                    (init_state_r == INIT_OCAL_CENTER_WRITE) || \n                    (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n                    (init_state_r == INIT_WRCAL_WRITE);\n  assign rdlvl_rd = (init_state_r == INIT_PI_PHASELOCK_READS) ||\n                    ((init_state_r == INIT_RDLVL_STG1_READ) && ~rdlvl_pi_incdec) ||  \n                    (init_state_r == INIT_RDLVL_COMPLEX_READ) ||\n                    (init_state_r == INIT_RDLVL_STG2_READ) ||\n                    (init_state_r == INIT_OCLKDELAY_READ) ||\n                    (init_state_r == INIT_WRCAL_READ) ||\n                    ((init_state_r == INIT_MPR_READ) && ~rdlvl_pi_incdec) ||\n                    (init_state_r == INIT_WRCAL_MULT_READS);\n  assign rdlvl_wr_rd = rdlvl_wr | rdlvl_rd;",
        "  assign phy_cs_n = phy_int_cs_n;",
        "endgenerate",
        "     always @(posedge clk) begin\n       if (rst)\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n       else if (init_state_r == INIT_REG_WRITE) begin\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n         if(!(CWL_M%2)) begin\n           phy_int_cs_n[0%nCK_PER_CLK] <= #TCQ 1'b0;\n           phy_int_cs_n[1%nCK_PER_CLK] <= #TCQ 1'b0;\n         end else begin\n           phy_int_cs_n[2%nCK_PER_CLK] <= #TCQ 1'b0;\n           phy_int_cs_n[3%nCK_PER_CLK] <= #TCQ 1'b0;\n     end\n       end else begin\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n         case (chip_cnt_r)\n           2'b00:begin\n             if ((init_state_r == INIT_LOAD_MR) ||\n                    (init_state_r == INIT_MPR_RDEN) ||\n                    (init_state_r == INIT_MPR_DISABLE) ||\n                    (init_state_r == INIT_WRLVL_START) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n                    (init_state_r == INIT_ZQCL) ||\n                    (init_state_r == INIT_RDLVL_ACT) ||\n                    (init_state_r == INIT_WRCAL_ACT) ||\n                    (init_state_r == INIT_OCLKDELAY_ACT) ||\n                    (init_state_r == INIT_OCAL_COMPLEX_ACT) ||\n                    (init_state_r == INIT_OCAL_CENTER_ACT) ||\n                    (init_state_r == INIT_PRECHARGE) ||\n                    (init_state_r == INIT_DDR2_PRECHARGE) ||\n                    (init_state_r == INIT_REFRESH) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_ACT) ||\n                    (rdlvl_wr_rd && new_burst_r && ~mmcm_wr)) begin\n               phy_int_cs_n    <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n               if (!(CWL_M % 2)) begin \n                 for (n = 0; n < nCS_PER_RANK; n = n + 1) begin \n                   phy_int_cs_n[n] <= #TCQ 1'b0;\n                 end\n               end else begin \n                 for (p = CS_WIDTH*nCS_PER_RANK; p < (CS_WIDTH*nCS_PER_RANK + nCS_PER_RANK); p = p + 1) begin\n                   phy_int_cs_n[p] <= #TCQ 1'b0;\n                 end\n               end\n             end else\n               phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n             \n             \n             \n             \n           end\n           2'b01:begin\n             if ((init_state_r == INIT_LOAD_MR) ||\n                    (init_state_r == INIT_MPR_RDEN) ||\n                    (init_state_r == INIT_MPR_DISABLE) ||\n                    (init_state_r == INIT_WRLVL_START) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n                    (init_state_r == INIT_ZQCL) ||\n                    (init_state_r == INIT_RDLVL_ACT) ||\n                    (init_state_r == INIT_WRCAL_ACT) ||\n                    (init_state_r == INIT_OCLKDELAY_ACT) ||\n                    (init_state_r == INIT_OCAL_COMPLEX_ACT) ||\n                    (init_state_r == INIT_OCAL_CENTER_ACT) ||\n                    (init_state_r == INIT_PRECHARGE) ||\n                    (init_state_r == INIT_DDR2_PRECHARGE) ||\n                    (init_state_r == INIT_REFRESH) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_ACT) ||\n                    (rdlvl_wr_rd && new_burst_r && ~mmcm_wr)) begin\n               phy_int_cs_n    <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n               if (!(CWL_M % 2)) begin \n                 for (q = nCS_PER_RANK; q < (2 * nCS_PER_RANK); q = q + 1) begin \n                   phy_int_cs_n[q] <= #TCQ 1'b0;\n                 end\n               end else begin \n                 for (m = (nCS_PER_RANK*CS_WIDTH + nCS_PER_RANK); m < (nCS_PER_RANK*CS_WIDTH + 2*nCS_PER_RANK); m = m + 1) begin\n                   phy_int_cs_n[m] <= #TCQ 1'b0;\n                 end\n               end\n             end else\n               phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n             \n             \n             \n             \n           end\n         endcase\n       end\n     end ",
        "   end else if (RANKS == 2) begin: DDR3_2rank",
        "     always @(posedge clk) begin\n       if (rst)\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n       else if (init_state_r == INIT_REG_WRITE) begin\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n         if(!(CWL_M%2)) begin\n           phy_int_cs_n[0%nCK_PER_CLK] <= #TCQ 1'b0;\n           phy_int_cs_n[1%nCK_PER_CLK] <= #TCQ 1'b0;\n         end else begin\n           phy_int_cs_n[2%nCK_PER_CLK] <= #TCQ 1'b0;\n           phy_int_cs_n[3%nCK_PER_CLK] <= #TCQ 1'b0;\n         end\n       end else begin\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n         case (chip_cnt_r)\n           2'b00:begin\n             if ((init_state_r == INIT_LOAD_MR) ||\n                    (init_state_r == INIT_MPR_RDEN) ||\n                    (init_state_r == INIT_MPR_DISABLE) ||\n                    (init_state_r == INIT_WRLVL_START) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n                    (init_state_r == INIT_ZQCL) ||\n                    (init_state_r == INIT_RDLVL_ACT) ||\n                    (init_state_r == INIT_WRCAL_ACT) ||\n                    (init_state_r == INIT_OCLKDELAY_ACT) ||\n                    (init_state_r == INIT_OCAL_COMPLEX_ACT) ||    \n                    (init_state_r == INIT_OCAL_CENTER_ACT) ||  \n                    (init_state_r == INIT_PRECHARGE) ||\n                    (init_state_r == INIT_DDR2_PRECHARGE) ||\n                    (init_state_r == INIT_REFRESH) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_ACT) ||\n                    (rdlvl_wr_rd && new_burst_r && ~mmcm_wr)) begin\n               phy_int_cs_n    <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n               if (!(CWL_M % 2)) \n                 phy_int_cs_n[0] <= #TCQ 1'b0;\n               else \n                 phy_int_cs_n[1*CS_WIDTH*nCS_PER_RANK] <= #TCQ 1'b0;\n             end else\n               phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n             \n             \n             \n             \n           end\n           2'b01:begin\n             if ((init_state_r == INIT_LOAD_MR) ||\n                    (init_state_r == INIT_MPR_RDEN) ||\n                    (init_state_r == INIT_MPR_DISABLE) ||\n                    (init_state_r == INIT_WRLVL_START) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n                    (init_state_r == INIT_ZQCL) ||\n                    (init_state_r == INIT_RDLVL_ACT) ||\n                    (init_state_r == INIT_WRCAL_ACT) ||\n                    (init_state_r == INIT_OCLKDELAY_ACT) ||\n                    (init_state_r == INIT_OCAL_COMPLEX_ACT) ||\n                    (init_state_r == INIT_OCAL_CENTER_ACT) ||\n                    (init_state_r == INIT_PRECHARGE) ||\n                    (init_state_r == INIT_DDR2_PRECHARGE) ||\n                    (init_state_r == INIT_REFRESH) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n                     (init_state_r == INIT_RDLVL_COMPLEX_ACT) ||\n                    (rdlvl_wr_rd && new_burst_r && ~mmcm_wr)) begin\n               phy_int_cs_n    <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n               if (!(CWL_M % 2)) \n                 phy_int_cs_n[1] <= #TCQ 1'b0;\n               else \n                 phy_int_cs_n[1+1*CS_WIDTH*nCS_PER_RANK] <= #TCQ 1'b0;\n             end else\n               phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n             \n             \n             \n             \n           end\n         endcase\n       end\n     end",
        "   end else if ((REG_CTRL == \"ON\") && (RANKS == 2)) begin: DDR3_2rank",
        "     always @(posedge clk) begin\n       if (rst)\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n       else if ((init_state_r == INIT_LOAD_MR) ||\n                    (init_state_r == INIT_MPR_RDEN) ||\n                    (init_state_r == INIT_MPR_DISABLE) ||\n                    (init_state_r == INIT_WRLVL_START) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n                    (init_state_r == INIT_ZQCL) ||\n                    (init_state_r == INIT_RDLVL_ACT) ||\n                    (init_state_r == INIT_WRCAL_ACT) ||\n                    (init_state_r == INIT_OCLKDELAY_ACT) ||\n                    (init_state_r == INIT_OCAL_COMPLEX_ACT) ||\n                    (init_state_r == INIT_OCAL_CENTER_ACT) ||  \n                    (init_state_r == INIT_PRECHARGE) ||\n                    (init_state_r == INIT_DDR2_PRECHARGE) ||\n                    (init_state_r == INIT_REFRESH) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_ACT) ||\n                    (rdlvl_wr_rd && new_burst_r && ~mmcm_wr)) begin\n         phy_int_cs_n    <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n         if (!(CWL_M % 2)) begin \n           for (n = 0; n < nCS_PER_RANK; n = n + 1) begin \n             phy_int_cs_n[n] <= #TCQ 1'b0;\n           end\n         end else begin \n           for (p = nCS_PER_RANK; p < 2*nCS_PER_RANK; p = p + 1) begin \n             phy_int_cs_n[p] <= #TCQ 1'b0;\n           end\n         end\n       end else\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n     end",
        "   end else if (RANKS == 1) begin: DDR3_1rank",
        "     always @(posedge clk) begin\n       if (rst)\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n       else if (init_state_r == INIT_REG_WRITE) begin\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n         if(!(CWL_M%2)) begin\n           phy_int_cs_n[0%nCK_PER_CLK] <= #TCQ 1'b0;\n           phy_int_cs_n[1%nCK_PER_CLK] <= #TCQ 1'b0;\n         end else begin\n           phy_int_cs_n[2%nCK_PER_CLK] <= #TCQ 1'b0;\n           phy_int_cs_n[3%nCK_PER_CLK] <= #TCQ 1'b0;\n     end\n       end else if ((init_state_r == INIT_LOAD_MR) ||\n                    (init_state_r == INIT_MPR_RDEN) ||\n                    (init_state_r == INIT_MPR_DISABLE) ||\n                    (init_state_r == INIT_WRLVL_START) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR) ||\n                    (init_state_r == INIT_WRLVL_LOAD_MR2) ||\n                    (init_state_r == INIT_ZQCL) ||\n                    (init_state_r == INIT_RDLVL_ACT) ||\n                    (init_state_r == INIT_WRCAL_ACT) ||\n                    (init_state_r == INIT_OCLKDELAY_ACT) ||\n                    (init_state_r == INIT_OCAL_COMPLEX_ACT) ||\n                    (init_state_r == INIT_OCAL_CENTER_ACT) ||  \n                    (init_state_r == INIT_PRECHARGE) ||\n                    (init_state_r == INIT_DDR2_PRECHARGE) ||\n                    (init_state_r == INIT_REFRESH) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) ||\n                    (init_state_r == INIT_RDLVL_COMPLEX_ACT) ||\n                    (rdlvl_wr_rd && new_burst_r && ~mmcm_wr)) begin\n         phy_int_cs_n    <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n         if (!(CWL_M % 2)) \n           phy_int_cs_n[0] <= #TCQ 1'b0;\n         else \n           phy_int_cs_n[1*nCS_PER_RANK] <= #TCQ 1'b0;\n       end else\n         phy_int_cs_n <= #TCQ {CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK{1'b1}};\n     end",
        "generate\n   if ((REG_CTRL == \"ON\") && (RANKS == 1)) begin: DDR3_RDIMM_1rank",
        "  endgenerate  ",
        "    always @(posedge clk)\n      if (rst ||\n         \n         (rdlvl_stg1_done && prbs_rdlvl_done && ~wrcal_done && (SKIP_CALIB == \"FALSE\")) ||\n         \n         (wrlvl_done_r &&\n         (init_state_r==INIT_WRLVL_LOAD_MR2_WAIT)))begin \n        chip_cnt_r <= #TCQ 2'b00;\n      end else if ((((init_state_r == INIT_WAIT_DLLK_ZQINIT) &&\n               (cnt_dllk_zqinit_r == TDLLK_TZQINIT_DELAY_CNT)) && \n               (DRAM_TYPE == \"DDR3\")) ||\n               ((init_state_r==INIT_REFRESH_RNK2_WAIT) &&\n               (cnt_cmd_r=='d36)) ||\n               \n               \n               \n               \n               \n               \n               (~pi_dqs_found_all_r &&\n               (init_state_r==INIT_PRECHARGE_PREWAIT) &&\n               (cnt_cmd_r=='d36) && (SKIP_CALIB == \"FALSE\")) ||\n               \n               \n               (pi_dqs_found_rank_done && ~pi_dqs_found_rank_done_r && (SKIP_CALIB == \"FALSE\")) ||\n               ((init_state_r == INIT_LOAD_MR_WAIT)&& cnt_cmd_done_r \n               && wrcal_done) ||\n               ((init_state_r == INIT_DDR2_MULTI_RANK)\n                  && (DRAM_TYPE == \"DDR2\"))) begin\n        if ((~mem_init_done_r || ~rdlvl_stg1_done || ~pi_dqs_found_done ||\n            \n            \n           ~pi_calib_done_r || wrcal_done) \n           && (chip_cnt_r != RANKS-1)) \n          chip_cnt_r <= #TCQ chip_cnt_r + 1;\n        else\n          chip_cnt_r <= #TCQ 2'b00;\n    end\n  end",
        "    always @(posedge clk)\n      chip_cnt_r <= #TCQ 2'b00;\n  end else begin: dual_rank  ",
        "generate\n  if (RANKS < 2) begin: single_rank",
        "  always @(posedge clk) begin\n    pi_dqs_found_rank_done_r <= #TCQ pi_dqs_found_rank_done;\n    pi_phase_locked_all_r1   <= #TCQ pi_phase_locked_all;\n    pi_phase_locked_all_r2   <= #TCQ pi_phase_locked_all_r1;\n    pi_phase_locked_all_r3   <= #TCQ pi_phase_locked_all_r2;\n    pi_phase_locked_all_r4   <= #TCQ pi_phase_locked_all_r3;\n    pi_dqs_found_all_r       <= #TCQ pi_dqs_found_done;\n    pi_calib_done_r1         <= #TCQ pi_calib_done_r;\n  end",
        "  always @(posedge clk)\n    if (rst)\n      ddr3_lm_done_r <= #TCQ 1'b0;\n    else if ((init_state_r == INIT_LOAD_MR_WAIT) &&\n            (chip_cnt_r == RANKS-1) && wrcal_done)\n      ddr3_lm_done_r <= #TCQ 1'b1;\n",
        "  assign pi_phase_locked_err = (pi_phaselock_timer == PHASELOCKED_TIMEOUT) ? 1'b1 : 1'b0;",
        "  always @(posedge clk) begin\n    if (rst || ((PRE_REV3ES == \"ON\") && temp_wrcal_done && ~temp_wrcal_done_r))\n      pi_phaselock_timer <= #TCQ 'd0;\n    else if (((init_state_r == INIT_PI_PHASELOCK_READS) &&\n             (pi_phaselock_timer != PHASELOCKED_TIMEOUT)) ||\n             tg_timer_go)\n      pi_phaselock_timer <= #TCQ pi_phaselock_timer + 1;\n    else\n      pi_phaselock_timer <= #TCQ pi_phaselock_timer;\n  end",
        "  always @(posedge clk)\n    if (rst)\n      pi_calib_rank_done_r <= #TCQ 1'b0;\n    else if (pi_phase_locked_all_r3 && ~pi_phase_locked_all_r4)\n      pi_calib_rank_done_r <= #TCQ 1'b1;\n    else\n      pi_calib_rank_done_r <= #TCQ 1'b0;\n",
        "  always @(posedge clk)\n    if (rst)\n      pi_calib_done_r <= #TCQ 1'b0;\n    else if (pi_calib_rank_done_r)\n      pi_calib_done_r <= #TCQ 1'b1;\n      ",
        "  always @(posedge clk) begin\n    if (rst || pi_calib_done_r1)\n      read_calib <= #TCQ 1'b0;\n    else if (~pi_calib_done_r1 && (init_state_r == INIT_PI_PHASELOCK_READS))\n      read_calib <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk)\n    read_calib_r <= #TCQ read_calib_int;\n ",
        "  always @(posedge clk) begin\n    if (rst || pi_calib_done_r1)\n      read_calib_int <= #TCQ 1'b0;\n    else if (~pi_calib_done_r1 && (init_state_r == INIT_RDLVL_ACT_WAIT) &&\n            (cnt_cmd_r == CNTNEXT_CMD))\n      read_calib_int <= #TCQ 1'b1;\n  end",
        "    always @(posedge clk) begin\n      if (rst || (done_dqs_tap_inc &&\n         (init_state_r == INIT_WRLVL_LOAD_MR2)))\n        write_calib <= #TCQ 1'b0;\n      else if (wrlvl_active_r1)\n        write_calib <= #TCQ 1'b1;\n    end",
        "  always @(posedge clk)\n    if (rst)\n      mem_init_done_r <= #TCQ 1'b0;\n    else if ((!cnt_dllk_zqinit_done_r && \n             (cnt_dllk_zqinit_r == TDLLK_TZQINIT_DELAY_CNT) &&\n             (chip_cnt_r == RANKS-1) && (DRAM_TYPE == \"DDR3\"))\n              || ( (init_state_r == INIT_LOAD_MR_WAIT) &&\n             (ddr2_refresh_flag_r) && (chip_cnt_r == RANKS-1)\n             && (cnt_init_mr_done_r) && (DRAM_TYPE == \"DDR2\")))\n      mem_init_done_r <= #TCQ 1'b1;",
        "      \n      \n\n      INIT_DONE:\n        init_next_state = INIT_DONE;\n",
        "      INIT_OCAL_COMPLEX_RESUME_WAIT:\n        if (complex_oclk_calib_resume)\n          init_next_state = INIT_RDLVL_STG1_WRITE;        \n        else if (complex_oclkdelay_calib_done || complex_ocal_ref_req )        ",
        "      INIT_OCAL_COMPLEX_ACT:\n        init_next_state = INIT_OCAL_COMPLEX_ACT_WAIT;\n      \n      INIT_OCAL_COMPLEX_ACT_WAIT:\n        if (complex_wait_cnt =='d15)\n          init_next_state = INIT_RDLVL_STG1_WRITE;\n          \n      INIT_OCAL_COMPLEX_WRITE_WAIT:\n        if (prech_req_posedge_r || (complex_oclkdelay_calib_done && ~complex_oclkdelay_calib_done_r1))\n            init_next_state = INIT_PRECHARGE_PREWAIT;\n        else if (stg1_wr_rd_cnt == 'd1)\n          init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT;\n        else if (complex_wait_cnt == 'd15)\n          init_next_state = INIT_RDLVL_STG1_WRITE;    \n    \n      \n      INIT_OCAL_COMPLEX_RESUME_WAIT:\n        if (complex_oclk_calib_resume)\n          init_next_state = INIT_RDLVL_STG1_WRITE;        \n        else if (complex_oclkdelay_calib_done || complex_ocal_ref_req )        \n            init_next_state = INIT_PRECHARGE_PREWAIT;          \n\n      \n      \n      \n      INIT_OCAL_CENTER_ACT: \n        init_next_state = INIT_OCAL_CENTER_ACT_WAIT;\n          \n      INIT_OCAL_CENTER_ACT_WAIT:\n\t    if (ocal_act_wait_cnt == 'd15)\n\t      init_next_state = INIT_OCAL_CENTER_WRITE_WAIT;\n\t  \n\t  INIT_OCAL_CENTER_WRITE:\n        if(!oclk_center_write_resume && !lim_wr_req)\n          init_next_state = INIT_OCAL_CENTER_WRITE_WAIT;\n      \n      INIT_OCAL_CENTER_WRITE_WAIT:\n\t    \n\t\tif (prech_req_posedge_r)\n          init_next_state = INIT_PRECHARGE_PREWAIT;\n        else if (lim_done && ~mask_lim_done && ~complex_mask_lim_done && oclkdelay_calib_done && ~oclkdelay_center_calib_start)\n\t\t  init_next_state = INIT_OCAL_COMPLEX_ACT_WAIT;\n\t\telse if (lim_done && ~mask_lim_done && ~complex_mask_lim_done && ~oclkdelay_center_calib_start)\n\t\t  init_next_state = INIT_OCLKDELAY_READ_WAIT; \n        else if (oclk_center_write_resume || lim_wr_req)\n          init_next_state = INIT_OCAL_CENTER_WRITE;\n     \n      \n      \n      \n\n      INIT_DONE:\n        init_next_state = INIT_DONE;\n",
        "        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full)) \n          init_next_state = INIT_WRCAL_READ;\n        else if (dqsfound_retry)\n            init_next_state = INIT_RDLVL_STG2_READ_WAIT;\n\n\n      INIT_WRCAL_READ:\n        if (burst_addr_r == 1'b1)\n          init_next_state = INIT_WRCAL_READ_WAIT;",
        "      INIT_WRCAL_WRITE:\n        \n        \n        if (wrcal_wr_cnt == 4'd1)\n          init_next_state = INIT_WRCAL_WRITE_READ;\n",
        "      \n      INIT_MPR_WAIT:\n        if (cnt_cmd_done_r) begin",
        "      INIT_MPR_RDEN:\n        init_next_state = INIT_MPR_WAIT;\n        ",
        "      INIT_RDLVL_ACT:\n          init_next_state = INIT_RDLVL_ACT_WAIT;\n",
        "  always @(*) begin     \n    init_next_state = init_state_r;\n    (* full_case, parallel_case *) case (init_state_r)\n\n      \n      \n      \n\n      \n      \n      \n      \n      \n      INIT_IDLE:\n        if (cnt_pwron_cke_done_r && phy_ctl_ready && ck_addr_cmd_delay_done  && delay_incdec_done\n            && ~(phy_ctl_full || phy_cmd_full) ) begin \n          \n          if (SIM_INIT_OPTION == \"SKIP_INIT\")       \n            \n            \n            \n            \n              \n              init_next_state = INIT_RDLVL_ACT;\n           \n              \n              \n          else\n            init_next_state = INIT_WAIT_CKE_EXIT;\n        end\n        \n      \n      INIT_WAIT_CKE_EXIT:\n        if ((cnt_txpr_done_r) && (DRAM_TYPE == \"DDR3\") \n           && ~(phy_ctl_full || phy_cmd_full)) begin\n          if((REG_CTRL == \"ON\") && ((nCS_PER_RANK > 1) ||\n             (RANKS > 1)))\n            \n            \n            \n            init_next_state = INIT_REG_WRITE;\n          else\n          \n          init_next_state = INIT_LOAD_MR;\n        end else if ((cnt_init_pre_wait_done_r) && (DRAM_TYPE == \"DDR2\")\n                     && ~(phy_ctl_full || phy_cmd_full))\n          \n          init_next_state = INIT_DDR2_PRECHARGE;                             \n\n      INIT_REG_WRITE:\n          init_next_state = INIT_REG_WRITE_WAIT;\n\n      INIT_REG_WRITE_WAIT:\n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full))  begin\n           if(reg_ctrl_cnt_r == 4'd8)\n             init_next_state = INIT_LOAD_MR;\n           else\n             init_next_state = INIT_REG_WRITE;\n        end\n        \n      INIT_LOAD_MR:\n          init_next_state = INIT_LOAD_MR_WAIT;\n          \n     \n      INIT_LOAD_MR_WAIT:\n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full)) begin\n          \n          if (prbs_rdlvl_done && pi_dqs_found_done && rdlvl_stg1_done)\n            \n            init_next_state = INIT_PRECHARGE;\n          else if (~wrcal_done && temp_lmr_done)\n            init_next_state = INIT_PRECHARGE_PREWAIT;\n          else if (cnt_init_mr_done_r)begin\n            if(DRAM_TYPE == \"DDR3\")\n              init_next_state = INIT_ZQCL;\n            else begin \n              if(ddr2_refresh_flag_r)begin\n                \n                if (!mem_init_done_r && (chip_cnt_r <= RANKS-1))\n                  init_next_state  = INIT_DDR2_MULTI_RANK;                     \n                else \n                  init_next_state = INIT_RDLVL_ACT;\n                \n              end else \n                init_next_state = INIT_DDR2_PRECHARGE;\n            end  \n          end else      \n            init_next_state = INIT_LOAD_MR;\n        end\n\n      \n      INIT_DDR2_MULTI_RANK:\n        init_next_state = INIT_DDR2_MULTI_RANK_WAIT;\n\n      INIT_DDR2_MULTI_RANK_WAIT:\n        init_next_state = INIT_DDR2_PRECHARGE;\n \n      \n      INIT_ZQCL:\n          init_next_state = INIT_WAIT_DLLK_ZQINIT;\n\n      \n      INIT_WAIT_DLLK_ZQINIT:\n        if (cnt_dllk_zqinit_done_r && ~(phy_ctl_full || phy_cmd_full))\n          \n          if (!mem_init_done_r && (chip_cnt_r <= RANKS-1))\n            init_next_state = INIT_LOAD_MR;\n          \n          \n          else\n            \n            init_next_state = INIT_RDLVL_ACT;\n\n      \n      INIT_DDR2_PRECHARGE: \n          init_next_state = INIT_DDR2_PRECHARGE_WAIT; \n\n      INIT_DDR2_PRECHARGE_WAIT: \n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full)) begin\n          if (ddr2_pre_flag_r)\n            init_next_state = INIT_REFRESH;\n          else \n            init_next_state = INIT_LOAD_MR;\n        end                                  \n\n      INIT_REFRESH:\n        if ((SKIP_CALIB == \"TRUE\") && ~calib_tap_inc_done && pi_dqs_found_done)\n\t\t  init_next_state = INIT_SKIP_CALIB_WAIT;\n\t\telse if ((RANKS == 2) && (chip_cnt_r == RANKS - 1))\n          init_next_state = INIT_REFRESH_RNK2_WAIT;\n        else\n          init_next_state = INIT_REFRESH_WAIT; \n\n      INIT_REFRESH_RNK2_WAIT:\n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full))\n          init_next_state = INIT_PRECHARGE;\n      \n      INIT_REFRESH_WAIT: \n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full))begin\n          if(cnt_init_af_done_r && (~mem_init_done_r))\n            \n            init_next_state = INIT_LOAD_MR;\n          \n          else if (~oclkdelay_calib_done && (mpr_last_byte_done || mpr_rdlvl_done) && (DRAM_TYPE == \"DDR3\")) begin\n            if (num_refresh == 'd8)\n              init_next_state = INIT_OCAL_CENTER_ACT;\n            else\n              init_next_state = INIT_REFRESH;\n          end else if(rdlvl_stg1_done && oclkdelay_center_calib_done &&\n\t          complex_oclkdelay_calib_done && ~wrlvl_done_r1 && (WRLVL == \"ON\")) \n            init_next_state = INIT_WRLVL_START;\n          else if (pi_dqs_found_done && ~wrlvl_done_r1 && ~wrlvl_final && ~wrlvl_byte_redo && (WRLVL == \"ON\"))\n            init_next_state = INIT_WRLVL_START;\n          else if ((((prbs_last_byte_done_r || prbs_rdlvl_done) && ~complex_oclkdelay_calib_done\n                     && pi_dqs_found_done) && (WRLVL == \"ON\")) \n                    && mem_init_done_r) begin\n            if (num_refresh == 'd8) begin\n\t\t\t  if (BYPASS_COMPLEX_OCAL == \"FALSE\")\n                init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT;\n\t\t\t  else\n\t\t\t    init_next_state = INIT_WRCAL_ACT;\n            end else \n              init_next_state = INIT_REFRESH;\n          end else if (~pi_dqs_found_done ||\n                   (rdlvl_stg1_done && ~prbs_rdlvl_done && ~complex_oclkdelay_calib_done) ||\n                   ((CLK_PERIOD/nCK_PER_CLK <= 2500) && wrcal_done && ~rdlvl_stg1_done) ||\n                   ((CLK_PERIOD/nCK_PER_CLK > 2500) && wrlvl_done_r1 && ~rdlvl_stg1_done)) begin\n            if (num_refresh == 'd8)\n              init_next_state = INIT_RDLVL_ACT;\n            else\n              init_next_state = INIT_REFRESH;\n          end else if ((~wrcal_done && wrlvl_byte_redo)&& (DRAM_TYPE == \"DDR3\")\n                   && (CLK_PERIOD/nCK_PER_CLK > 2500))\n            init_next_state = INIT_WRLVL_LOAD_MR2;\n          else if (((prbs_rdlvl_done && rdlvl_stg1_done && complex_oclkdelay_calib_done && pi_dqs_found_done) && (WRLVL == \"ON\"))\n                    && mem_init_done_r && (CLK_PERIOD/nCK_PER_CLK > 2500))\n            init_next_state = INIT_WRCAL_ACT;\n          else if (pi_dqs_found_done && (DRAM_TYPE == \"DDR3\") && ~(mpr_last_byte_done || mpr_rdlvl_done)) begin\n            if (num_refresh == 'd8)\n              init_next_state = INIT_MPR_RDEN;\n            else\n              init_next_state = INIT_REFRESH;\n          end else if (((oclkdelay_calib_done && wrlvl_final && ~wrlvl_done_r1) ||  \n                       (~wrcal_done && wrlvl_byte_redo)) && (DRAM_TYPE == \"DDR3\"))\n            init_next_state = INIT_WRLVL_LOAD_MR2;\n          else if ((~wrcal_done && (WRLVL == \"ON\") && (CLK_PERIOD/nCK_PER_CLK <= 2500)) \n                       && pi_dqs_found_done)\n            init_next_state = INIT_WRCAL_ACT;\n          else if (mem_init_done_r) begin\n            if (RANKS < 2)\n              init_next_state = INIT_RDLVL_ACT;\n            else if (stg1_wr_done && ~rnk_ref_cnt && ~rdlvl_stg1_done)\n              init_next_state = INIT_PRECHARGE;\n            else\n              init_next_state = INIT_RDLVL_ACT;\n          end else \n            init_next_state = INIT_REFRESH;\n        end\n           \n\t  INIT_SKIP_CALIB_WAIT:\n\t    if (calib_tap_inc_done)\n\t\t  init_next_state = INIT_WRCAL_ACT;\n\t\t  \n           \n      \n      \n      \n\n      \n      \n      INIT_WRLVL_START:\n          init_next_state = INIT_WRLVL_WAIT;\n\n      \n      \n      INIT_WRLVL_WAIT:\n        if (wrlvl_rank_done_r7 && ~(phy_ctl_full || phy_cmd_full))\n          init_next_state = INIT_WRLVL_LOAD_MR;\n\n      \n      INIT_WRLVL_LOAD_MR:\n          init_next_state = INIT_WRLVL_LOAD_MR_WAIT;\n        \n      INIT_WRLVL_LOAD_MR_WAIT:\n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full))\n          init_next_state = INIT_WRLVL_LOAD_MR2;\n        \n      \n      \n      INIT_WRLVL_LOAD_MR2:\n          init_next_state = INIT_WRLVL_LOAD_MR2_WAIT;    \n\n      \n      INIT_WRLVL_LOAD_MR2_WAIT:\n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full)) begin  \n          \n          \n      \n      \n          if (~wrlvl_done_r1)\n            init_next_state = INIT_WRLVL_START;\n          else if (SIM_CAL_OPTION == \"SKIP_CAL\")\n            \n            init_next_state = INIT_DONE;\n          else \n            \n            \n            init_next_state = INIT_PRECHARGE_PREWAIT;\n        end\n          \n      \n      \n      \n\n      \n      \n      INIT_RDLVL_ACT:\n          init_next_state = INIT_RDLVL_ACT_WAIT;\n\n      \n      \n      \n      INIT_RDLVL_ACT_WAIT:\n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full)) begin\n          \n          \n          if (!pi_calib_done_r1)\n            init_next_state = INIT_PI_PHASELOCK_READS;\n          else if (!pi_dqs_found_done)\n                 \n            init_next_state = INIT_RDLVL_STG2_READ;\n          else if (~wrcal_done && (WRLVL == \"ON\") && (CLK_PERIOD/nCK_PER_CLK <= 2500))\n            init_next_state = INIT_WRCAL_ACT_WAIT;\n          else if ((!rdlvl_stg1_done && ~stg1_wr_done && ~rdlvl_last_byte_done) ||\n                   (!prbs_rdlvl_done && ~stg1_wr_done && ~prbs_last_byte_done)) begin\n            \n            if (!prbs_rdlvl_done && ~stg1_wr_done && rdlvl_last_byte_done)\n              init_next_state = INIT_RDLVL_ACT_WAIT;\n            else\n            init_next_state = INIT_RDLVL_STG1_WRITE;\n          end else if ((!rdlvl_stg1_done && rdlvl_stg1_start_int) || !prbs_rdlvl_done) begin\n            if (rdlvl_last_byte_done || prbs_last_byte_done)\n            \n              init_next_state = INIT_RDLVL_ACT_WAIT;\n            else begin\n            \n            \n               if (rdlvl_stg1_done)\n                init_next_state = INIT_RDLVL_STG1_WRITE_READ;\n               else\n                init_next_state = INIT_RDLVL_STG1_READ;\n            end\n          end else if ((prbs_rdlvl_done && rdlvl_stg1_done && (RANKS == 1)) && (WRLVL == \"ON\") &&\n                        (CLK_PERIOD/nCK_PER_CLK > 2500))\n            init_next_state = INIT_WRCAL_ACT_WAIT;\n          else\n            \n            \n            \n            \n            init_next_state = INIT_PRECHARGE_PREWAIT;\n        end\n\n      \n      \n      \n      \n      \n      INIT_PI_PHASELOCK_READS:\n        if (pi_phase_locked_all_r3 && ~pi_phase_locked_all_r4)\n          init_next_state = INIT_PRECHARGE_PREWAIT;\n      \n      \n      \n      \n\n      \n      \n      INIT_RDLVL_STG1_WRITE:\n        \n        \n        \n        \n        \n        \n        \n        if ((complex_num_writes_dec == 1) && ~complex_row0_wr_done && prbs_rdlvl_done && rdlvl_stg1_done_r1)\n          init_next_state = INIT_OCAL_COMPLEX_WRITE_WAIT;\n        \n        else if (stg1_wr_rd_cnt == 9'd1) begin\n          if (rdlvl_stg1_done_r1)\n            init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT;\n          else\n            init_next_state = INIT_RDLVL_STG1_WRITE_READ;\n        end\n\n      INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT:\n        if (complex_rdlvl_int_ref_req || (prbs_rdlvl_done && ~prbs_rdlvl_done_r1)) \n          init_next_state = INIT_PRECHARGE_PREWAIT;\n        else if (complex_wait_cnt == 'd15)\n          \n          init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE;\n      \n      INIT_RDLVL_COMPLEX_PRECHARGE:\n        init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_WAIT;\n        \n      INIT_RDLVL_COMPLEX_PRECHARGE_WAIT:\n        if (complex_rdlvl_int_ref_req || (prbs_rdlvl_done && ~prbs_rdlvl_done_r1))\n          init_next_state = INIT_PRECHARGE_PREWAIT;\n        else if (complex_wait_cnt == 'd15) begin\n          if (prbs_rdlvl_done || prbs_last_byte_done_r) begin \n\t\t    \n\t\t    if ((~prbs_rdlvl_done && complex_oclkdelay_calib_start_int) || ~lim_done)\n              init_next_state = INIT_OCAL_CENTER_ACT; \n\t\t\telse if (lim_done && complex_oclkdelay_calib_start_r2)\n\t\t\t  init_next_state = INIT_RDLVL_COMPLEX_ACT;\n\t\t\telse\n\t\t\t  init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_WAIT;\n          end else\n\t\t    init_next_state = INIT_RDLVL_COMPLEX_ACT;\n\t\tend\n            \n         \n      INIT_RDLVL_COMPLEX_ACT:\n        \n        \n        if(prbs_rdlvl_start && (num_samples_done_r || ~complex_init_pi_dec_done))\n          init_next_state = INIT_RDLVL_COMPLEX_PI_WAIT;\n        else init_next_state = INIT_RDLVL_COMPLEX_ACT_WAIT;\n\n      \n      INIT_RDLVL_COMPLEX_PI_WAIT:\n        if(complex_pi_incdec_done) \n          init_next_state = INIT_RDLVL_COMPLEX_ACT_WAIT;\n        \n      INIT_RDLVL_COMPLEX_ACT_WAIT:  \n        if (complex_rdlvl_int_ref_req || prech_req_posedge_r)  \n          init_next_state = INIT_PRECHARGE_PREWAIT;\n        else if (complex_wait_cnt == 'd15) begin\n          if (oclkdelay_center_calib_start)\n            init_next_state = INIT_OCAL_CENTER_WRITE_WAIT;\n          else if (stg1_wr_done)\n            init_next_state = INIT_RDLVL_COMPLEX_READ;\n          else if (~complex_row1_wr_done)\n            if (complex_oclkdelay_calib_start_int && complex_ocal_num_samples_done_r) \n              init_next_state = INIT_OCAL_COMPLEX_RESUME_WAIT;\n            else \n              init_next_state = INIT_RDLVL_STG1_WRITE;\n          else\n            init_next_state = INIT_RDLVL_STG1_WRITE_READ;\n        end\n      \n      \n      INIT_RDLVL_STG1_WRITE_READ: \n        if (reset_rd_addr_r1)\n          init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT;\n        else if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full))begin\n          if (rdlvl_stg1_done_r1)\n           \n            init_next_state = INIT_RDLVL_COMPLEX_PI_WAIT; \n          else\n            init_next_state = INIT_RDLVL_STG1_READ;\n        end\n\n      \n      \n      \n      \n      INIT_RDLVL_STG1_READ:\n        if (rdlvl_stg1_rank_done || (rdlvl_stg1_done && ~rdlvl_stg1_done_r1) ||\n            prech_req_posedge_r || (prbs_rdlvl_done && ~prbs_rdlvl_done_r1))\n          init_next_state = INIT_PRECHARGE_PREWAIT;\n\n      INIT_RDLVL_COMPLEX_READ:\n        if (prech_req_posedge_r || (prbs_rdlvl_done && ~prbs_rdlvl_done_r1))\n          init_next_state = INIT_PRECHARGE_PREWAIT;  \n       \n        else if (~prbs_rdlvl_done && (complex_num_reads_dec == 1) && ~complex_row0_rd_done) \n          init_next_state = INIT_RDLVL_COMPLEX_READ_WAIT;\n        \n        else if (stg1_wr_rd_cnt == 'd1)\n          init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT;\n\n      INIT_RDLVL_COMPLEX_READ_WAIT:\n        if (prech_req_posedge_r || complex_rdlvl_int_ref_req || (prbs_rdlvl_done && ~prbs_rdlvl_done_r1))\n            init_next_state = INIT_PRECHARGE_PREWAIT;\n        else if (stg1_wr_rd_cnt == 'd1)\n          init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT;\n        else if (complex_wait_cnt == 'd15)\n          init_next_state = INIT_RDLVL_COMPLEX_READ;        \n\n      \n      \n      \n      \n\n      \n      \n      INIT_RDLVL_STG2_READ:\n        \n        if (num_reads == 'b1)\n          init_next_state = INIT_RDLVL_STG2_READ_WAIT;\n\n      \n      \n      \n      INIT_RDLVL_STG2_READ_WAIT:\n        if (~(phy_ctl_full || phy_cmd_full)) begin\n          if (pi_dqs_found_rank_done ||\n              pi_dqs_found_done || prech_req_posedge_r)\n            init_next_state = INIT_PRECHARGE_PREWAIT;\n          else if (cnt_cmd_done_r)\n              init_next_state = INIT_RDLVL_STG2_READ;\n        end\n      \n      \n      \n      \n      \n      \n      \n      \n      INIT_MPR_RDEN:\n        init_next_state = INIT_MPR_WAIT;\n        \n      \n      INIT_MPR_WAIT:\n        if (cnt_cmd_done_r) begin\n          init_next_state = INIT_MPR_READ;\n        end\n      \n      \n      \n      \n      INIT_MPR_READ:\n        if (mpr_rdlvl_done || mpr_rnk_done || rdlvl_prech_req)\n          init_next_state = INIT_MPR_DISABLE_PREWAIT;\n      \n      INIT_MPR_DISABLE_PREWAIT:\n        if (cnt_cmd_done_r)\n          init_next_state = INIT_MPR_DISABLE;\n      \n      \n      \n      INIT_MPR_DISABLE:\n        init_next_state = INIT_MPR_DISABLE_WAIT;\n        \n      INIT_MPR_DISABLE_WAIT:\n        init_next_state = INIT_PRECHARGE_PREWAIT;\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      INIT_OCLKDELAY_ACT:\n        init_next_state = INIT_OCLKDELAY_ACT_WAIT;\n      \n      INIT_OCLKDELAY_ACT_WAIT:\n        if (cnt_cmd_done_r && ~oclk_prech_req)\n          init_next_state = INIT_OCLKDELAY_WRITE;\n        else if (oclkdelay_calib_done || prech_req_posedge_r)\n          init_next_state = INIT_PRECHARGE_PREWAIT;\n          \n      INIT_OCLKDELAY_WRITE:\n        if (oclk_wr_cnt == 4'd1)\n        init_next_state = INIT_OCLKDELAY_WRITE_WAIT;\n      \n      INIT_OCLKDELAY_WRITE_WAIT:\n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full)) begin\n          if (oclkdelay_int_ref_req)\n            init_next_state = INIT_PRECHARGE_PREWAIT;\n          else\t\t\t\n            init_next_state = INIT_OCLKDELAY_READ;\n\t\tend\n      \n      INIT_OCLKDELAY_READ:\n        init_next_state = INIT_OCLKDELAY_READ_WAIT;\n\n      INIT_OCLKDELAY_READ_WAIT:\n        if (~(phy_ctl_full || phy_cmd_full)) begin\n          if ((oclk_calib_resume_level || oclk_calib_resume) && ~oclkdelay_int_ref_req)\n            init_next_state = INIT_OCLKDELAY_WRITE;\n          else if (oclkdelay_calib_done || prech_req_posedge_r ||\n                   wrlvl_final || oclkdelay_int_ref_req)\n            init_next_state = INIT_PRECHARGE_PREWAIT;\n\t\t  else if (oclkdelay_center_calib_start)\n\t\t    init_next_state = INIT_OCAL_CENTER_WRITE_WAIT;\n        end\n      \n      \n      \n      \n      \n\n      \n      INIT_WRCAL_ACT:\n          init_next_state = INIT_WRCAL_ACT_WAIT;\n\n      \n      INIT_WRCAL_ACT_WAIT:\n        if (cnt_cmd_done_r && ~wrcal_prech_req)\n          init_next_state = INIT_WRCAL_WRITE;\n        else if (wrcal_done || prech_req_posedge_r)\n          init_next_state = INIT_PRECHARGE_PREWAIT;                                  \n\n      \n      INIT_WRCAL_WRITE:\n        \n        \n        if (wrcal_wr_cnt == 4'd1)\n          init_next_state = INIT_WRCAL_WRITE_READ;\n\n      \n      INIT_WRCAL_WRITE_READ: \n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full)) \n          init_next_state = INIT_WRCAL_READ;\n        else if (dqsfound_retry)\n            init_next_state = INIT_RDLVL_STG2_READ_WAIT;\n\n\n      INIT_WRCAL_READ:\n        if (burst_addr_r == 1'b1)\n          init_next_state = INIT_WRCAL_READ_WAIT;\n          \n      INIT_WRCAL_READ_WAIT:\n        if (~(phy_ctl_full || phy_cmd_full)) begin\n          if (wrcal_resume_r) begin\n            if (wrcal_final_chk)\n              init_next_state = INIT_WRCAL_READ;\n            else\n              init_next_state = INIT_WRCAL_WRITE;\n          end else if (wrcal_done || prech_req_posedge_r || wrcal_act_req ||\n          \n                  wrlvl_byte_redo || (temp_wrcal_done && ~temp_lmr_done))\n            init_next_state = INIT_PRECHARGE_PREWAIT;\n          else if (dqsfound_retry)\n            init_next_state = INIT_RDLVL_STG2_READ_WAIT;\n          else if (wrcal_read_req && cnt_wrcal_rd)\n            init_next_state = INIT_WRCAL_MULT_READS;\n        end        \n\n      INIT_WRCAL_MULT_READS:\n        \n        if (wrcal_reads == 'b1)\n          init_next_state = INIT_WRCAL_READ_WAIT;        \n\n      \n      \n      \n\n      \n      \n      INIT_PRECHARGE_PREWAIT:\n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full))\n          init_next_state = INIT_PRECHARGE;                \n                                     \n      \n      INIT_PRECHARGE: \n        init_next_state = INIT_PRECHARGE_WAIT; \n\n      INIT_PRECHARGE_WAIT: \n        if (cnt_cmd_done_r && ~(phy_ctl_full || phy_cmd_full)) begin\n          if ((wrcal_sanity_chk_done && (DRAM_TYPE == \"DDR3\")) || \n              (rdlvl_stg1_done && prbs_rdlvl_done && pi_dqs_found_done && \n              (DRAM_TYPE == \"DDR2\")))\n             init_next_state = INIT_DONE;               \n          else if ((wrcal_done || (WRLVL == \"OFF\")) && rdlvl_stg1_done && prbs_rdlvl_done &&\n             pi_dqs_found_done && complex_oclkdelay_calib_done && wrlvl_done_r1 && ((ddr3_lm_done_r) || (DRAM_TYPE == \"DDR2\")))\n             init_next_state = INIT_WRCAL_ACT;             \n          else if ((wrcal_done || (WRLVL == \"OFF\") || (~wrcal_done && temp_wrcal_done && ~temp_lmr_done)) \n                   && (rdlvl_stg1_done || (~wrcal_done && temp_wrcal_done && ~temp_lmr_done)) \n                   && prbs_rdlvl_done && complex_oclkdelay_calib_done && wrlvl_done_r1 &rdlvl_stg1_done && pi_dqs_found_done) begin\n           \n            init_next_state = INIT_LOAD_MR; \n          \n          end else if (~wrcal_done && temp_wrcal_done && temp_lmr_done)\n            init_next_state = INIT_WRCAL_READ_WAIT;\n          else if (rdlvl_stg1_done && pi_dqs_found_done && (WRLVL == \"ON\"))\n            \n            init_next_state = INIT_REFRESH; \n          else\n            \n            init_next_state = INIT_REFRESH;\n        end\n          \n      \n      \n      \n      INIT_OCAL_COMPLEX_ACT:\n        init_next_state = INIT_OCAL_COMPLEX_ACT_WAIT;\n      \n      INIT_OCAL_COMPLEX_ACT_WAIT:\n        if (complex_wait_cnt =='d15)\n          init_next_state = INIT_RDLVL_STG1_WRITE;\n          \n      INIT_OCAL_COMPLEX_WRITE_WAIT:\n        if (prech_req_posedge_r || (complex_oclkdelay_calib_done && ~complex_oclkdelay_calib_done_r1))\n            init_next_state = INIT_PRECHARGE_PREWAIT;\n        else if (stg1_wr_rd_cnt == 'd1)\n          init_next_state = INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT;\n        else if (complex_wait_cnt == 'd15)\n          init_next_state = INIT_RDLVL_STG1_WRITE;    \n    \n      \n      INIT_OCAL_COMPLEX_RESUME_WAIT:\n        if (complex_oclk_calib_resume)\n          init_next_state = INIT_RDLVL_STG1_WRITE;        \n        else if (complex_oclkdelay_calib_done || complex_ocal_ref_req )        \n            init_next_state = INIT_PRECHARGE_PREWAIT;          \n\n      \n      \n      \n      INIT_OCAL_CENTER_ACT: \n        init_next_state = INIT_OCAL_CENTER_ACT_WAIT;\n          \n      INIT_OCAL_CENTER_ACT_WAIT:\n\t    if (ocal_act_wait_cnt == 'd15)\n\t      init_next_state = INIT_OCAL_CENTER_WRITE_WAIT;\n\t  \n\t  INIT_OCAL_CENTER_WRITE:\n        if(!oclk_center_write_resume && !lim_wr_req)\n          init_next_state = INIT_OCAL_CENTER_WRITE_WAIT;\n      \n      INIT_OCAL_CENTER_WRITE_WAIT:\n\t    \n\t\tif (prech_req_posedge_r)\n          init_next_state = INIT_PRECHARGE_PREWAIT;\n        else if (lim_done && ~mask_lim_done && ~complex_mask_lim_done && oclkdelay_calib_done && ~oclkdelay_center_calib_start)\n\t\t  init_next_state = INIT_OCAL_COMPLEX_ACT_WAIT;\n\t\telse if (lim_done && ~mask_lim_done && ~complex_mask_lim_done && ~oclkdelay_center_calib_start)\n\t\t  init_next_state = INIT_OCLKDELAY_READ_WAIT; \n        else if (oclk_center_write_resume || lim_wr_req)\n          init_next_state = INIT_OCAL_CENTER_WRITE;\n     \n      \n      \n      \n\n      INIT_DONE:\n        init_next_state = INIT_DONE;\n\n    endcase\n  end\n      ",
        "  always @(posedge clk)\n    if (rst)begin\n      init_state_r  <= #TCQ INIT_IDLE;\n      init_state_r1 <= #TCQ INIT_IDLE;\n    end else begin\n      init_state_r  <= #TCQ init_next_state;\n      init_state_r1 <= #TCQ init_state_r;\n    end ",
        "  always @(posedge clk)\n    if (rst || (init_state_r == INIT_MPR_RDEN) || (init_state_r == INIT_OCAL_CENTER_ACT) ||\n       (init_state_r == INIT_OCLKDELAY_ACT) || (init_state_r == INIT_RDLVL_ACT) || \n       (init_state_r == INIT_OCAL_COMPLEX_ACT) || (init_state_r ==INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT))\n      num_refresh <= #TCQ 'd0;\n    else if ((init_state_r == INIT_REFRESH) &&\n             (~pi_dqs_found_done || ((DRAM_TYPE == \"DDR3\") && ~oclkdelay_calib_done) ||\n             (rdlvl_stg1_done && ~prbs_rdlvl_done) ||\n             (prbs_rdlvl_done && ~complex_oclkdelay_calib_done) ||\n             ((CLK_PERIOD/nCK_PER_CLK <= 2500) && wrcal_done && ~rdlvl_stg1_done) ||\n             ((CLK_PERIOD/nCK_PER_CLK > 2500) && wrlvl_done_r1 && ~rdlvl_stg1_done)))\n      num_refresh <= #TCQ num_refresh + 1;",
        "  always @(posedge clk)\n    if (rst)\n      rnk_ref_cnt <= #TCQ 1'b0;\n    else if (stg1_wr_done && \n            (init_state_r == INIT_REFRESH_WAIT) && cnt_cmd_done_r)\n      rnk_ref_cnt <= #TCQ ~rnk_ref_cnt;\n  ",
        "    always @(posedge clk)\n      if ((init_state_r == INIT_IDLE) || rdlvl_last_byte_done || \n             (complex_byte_rd_done) || prbs_rdlvl_done_pulse ||\n         (rdlvl_stg1_rank_done ))\n        stg1_wr_done <= #TCQ 1'b0;\n      else if (init_state_r == INIT_RDLVL_STG1_WRITE_READ)\n        stg1_wr_done <= #TCQ 1'b1;\n  end",
        "    always @(posedge clk)\n      if ((init_state_r == INIT_IDLE) || rdlvl_last_byte_done || \n          (complex_byte_rd_done) || prbs_rdlvl_done_pulse )\n        stg1_wr_done <= #TCQ 1'b0;\n      else if (init_state_r == INIT_RDLVL_STG1_WRITE_READ)\n        stg1_wr_done <= #TCQ 1'b1;\n  end else begin: two_ranks",
        "  generate\n  if (RANKS < 2) begin: one_rank",
        "  always @(posedge clk)\n    if (init_state_r == INIT_IDLE)\n      reg_ctrl_cnt_r <= #TCQ 'b0;\n    else if (init_state_r == INIT_REG_WRITE)\n      reg_ctrl_cnt_r <= #TCQ reg_ctrl_cnt_r + 1;\n",
        "  always @(posedge clk)\n    if (init_state_r == INIT_IDLE) begin\n      cnt_init_af_r      <= #TCQ 'b0;\n      cnt_init_af_done_r <= #TCQ 1'b0;\n    end else if ((init_state_r == INIT_REFRESH) && (~mem_init_done_r))begin\n      cnt_init_af_r      <= #TCQ cnt_init_af_r + 1;\n      cnt_init_af_done_r <= #TCQ (cnt_init_af_r == 2'b11);\n    end   ",
        "  always @(posedge clk)\n    if (init_state_r == INIT_IDLE) \n      ddr2_refresh_flag_r<= #TCQ 'b0;\n    else if ((init_state_r == INIT_REFRESH) && (~mem_init_done_r)) \n      \n      ddr2_refresh_flag_r<= #TCQ 1'b1;\n    else if ((ddr2_refresh_flag_r) &&\n             (init_state_r == INIT_LOAD_MR_WAIT)&&\n             (cnt_cmd_done_r) && (cnt_init_mr_done_r))\n      ddr2_refresh_flag_r <= #TCQ 'b0;\n   ",
        "  always @(posedge clk)\n    if (init_state_r == INIT_IDLE) \n      ddr2_pre_flag_r<= #TCQ 'b0;\n    else if (init_state_r == INIT_LOAD_MR) \n      ddr2_pre_flag_r<= #TCQ 1'b1;\n    \n    else if ((ddr2_refresh_flag_r) &&\n             (init_state_r == INIT_LOAD_MR_WAIT)&&\n             (cnt_cmd_done_r) && (cnt_init_mr_done_r))\n      ddr2_pre_flag_r <= #TCQ 'b0;",
        "  always @(posedge clk)\n    if ((init_state_r == INIT_IDLE)||\n        ((init_state_r == INIT_REFRESH)\n          && (~mem_init_done_r))) begin\n      cnt_init_mr_r      <= #TCQ 'b0;\n      cnt_init_mr_done_r <= #TCQ 1'b0;\n    end else if (init_state_r == INIT_LOAD_MR) begin\n      cnt_init_mr_r      <= #TCQ cnt_init_mr_r + 1;\n      cnt_init_mr_done_r <= #TCQ (cnt_init_mr_r == INIT_CNT_MR_DONE);\n    end",
        "  always @(posedge clk)\n    if (init_state_r == INIT_ZQCL) begin\n      cnt_dllk_zqinit_r      <= #TCQ 'b0;\n      cnt_dllk_zqinit_done_r <= #TCQ 1'b0;\n    end else if (~(phy_ctl_full || phy_cmd_full))  begin\n      cnt_dllk_zqinit_r <= #TCQ cnt_dllk_zqinit_r + 1;\n      if (!cnt_dllk_zqinit_done_r) \n        cnt_dllk_zqinit_done_r \n          <= #TCQ (cnt_dllk_zqinit_r == TDLLK_TZQINIT_DELAY_CNT);\n    end",
        "  always @(posedge clk)\n    if (!cnt_pwron_cke_done_r) begin\n      cnt_init_pre_wait_r      <= #TCQ 'b0;\n      cnt_init_pre_wait_done_r <= #TCQ 1'b0;\n    end else begin\n      cnt_init_pre_wait_r <= #TCQ cnt_init_pre_wait_r + 1;\n      if (!cnt_init_pre_wait_done_r)\n        cnt_init_pre_wait_done_r \n          <= #TCQ (cnt_init_pre_wait_r >= DDR2_INIT_PRE_CNT);\n    end",
        "  always @(posedge clk)\n    if (!cnt_pwron_cke_done_r) begin\n      cnt_txpr_r      <= #TCQ 'b0;\n      cnt_txpr_done_r <= #TCQ 1'b0;\n    end else begin\n      cnt_txpr_r <= #TCQ cnt_txpr_r + 1;\n      if (!cnt_txpr_done_r)\n        cnt_txpr_done_r <= #TCQ (cnt_txpr_r == TXPR_DELAY_CNT);\n    end",
        "  always @(posedge clk or posedge rst) begin\n    if (rst)\n      phy_reset_n <= #TCQ 1'b0;\n    else\n      phy_reset_n <= #TCQ cnt_pwron_reset_done_r;\n\n  end",
        "  always @(posedge clk)\n    cnt_pwron_cke_done_r1   <= #TCQ cnt_pwron_cke_done_r;\n",
        "  always @(posedge clk)\n    if (rst || ~phy_ctl_ready) begin\n      cnt_pwron_reset_done_r <= #TCQ 1'b0;\n      cnt_pwron_cke_done_r   <= #TCQ 1'b0;\n    end else begin\n      \n      if ((SIM_INIT_OPTION == \"SKIP_PU_DLY\") || \n          (SIM_INIT_OPTION == \"SKIP_INIT\")) begin\n        cnt_pwron_reset_done_r <= #TCQ 1'b1;\n        cnt_pwron_cke_done_r   <= #TCQ 1'b1;\n      end else begin\n        \n        if (DRAM_TYPE == \"DDR3\") begin\n           if (!cnt_pwron_reset_done_r)\n             cnt_pwron_reset_done_r \n               <= #TCQ (cnt_pwron_r == PWRON_RESET_DELAY_CNT);\n           if (!cnt_pwron_cke_done_r)\n             cnt_pwron_cke_done_r   \n               <= #TCQ (cnt_pwron_r == PWRON_CKE_DELAY_CNT);\n           end else begin \n              cnt_pwron_reset_done_r <= #TCQ 1'b1; \n              if (!cnt_pwron_cke_done_r)\n                 cnt_pwron_cke_done_r   \n                   <= #TCQ (cnt_pwron_r == PWRON_CKE_DELAY_CNT);\n           end        \n      end\n    end ",
        "  always @(posedge clk) \n    if (rst)\n      cnt_pwron_r <= #TCQ 'b0;\n    else if (pwron_ce_r)\n      cnt_pwron_r <= #TCQ cnt_pwron_r + 1;\n",
        "  always @(posedge clk)\n    if (rst) begin\n      cnt_pwron_ce_r <= #TCQ 10'h000;\n      pwron_ce_r     <= #TCQ 1'b0;\n    end else begin\n      cnt_pwron_ce_r <= #TCQ cnt_pwron_ce_r + 1;\n      pwron_ce_r     <= #TCQ (cnt_pwron_ce_r == 10'h3FF);\n    end",
        "  always @(posedge clk) begin\n    if (rst)\n      detect_pi_found_dqs <= #TCQ 1'b0;\n    else if ((cnt_cmd_r == 7'b0111111) &&\n             (init_state_r == INIT_RDLVL_STG2_READ_WAIT))\n      detect_pi_found_dqs <= #TCQ 1'b1;\n    else\n      detect_pi_found_dqs <= #TCQ 1'b0;\n  end ",
        "  always @(posedge clk) begin\n    if (rst)\n      no_rst_tg_mc <= #TCQ 1'b0;\n    else if ((init_state_r == INIT_WRCAL_ACT) && wrcal_read_req)\n      no_rst_tg_mc <= #TCQ 1'b1;\n    else\n      no_rst_tg_mc <= #TCQ 1'b0;\n  end",
        "  always @(posedge clk) begin\n    if (rst)\n      tg_timer_done <= #TCQ 1'b0;\n    else if (tg_timer == TG_TIMER_TIMEOUT)\n      tg_timer_done <= #TCQ 1'b1;\n    else\n      tg_timer_done <= #TCQ 1'b0;\n  end",
        "  always @(posedge clk) begin\n    if (rst || (temp_wrcal_done && ~temp_wrcal_done_r) ||\n       (init_state_r == INIT_PRECHARGE_PREWAIT))\n      tg_timer <= #TCQ 'd0;\n    else if ((pi_phaselock_timer == PHASELOCKED_TIMEOUT) &&\n            tg_timer_go &&\n            (tg_timer != TG_TIMER_TIMEOUT))\n      tg_timer <= #TCQ tg_timer + 1;\n  end",
        "  always @(posedge clk)\n    if (rst) begin\n      tg_timer_go     <= #TCQ 1'b0;\n    end else if ((PRE_REV3ES == \"ON\") && temp_wrcal_done && temp_lmr_done &&\n              (init_state_r == INIT_WRCAL_READ_WAIT)) begin\n      tg_timer_go     <= #TCQ 1'b1;\n    end else begin\n      tg_timer_go     <= #TCQ 1'b0;\n    end",
        "  always @(posedge clk)\n    temp_wrcal_done_r <= #TCQ temp_wrcal_done;\n    ",
        "  always @(posedge clk) begin\n    if (rst || ~temp_wrcal_done)\n      temp_lmr_done <= #TCQ 1'b0;\n    else if (temp_wrcal_done && (init_state_r == INIT_LOAD_MR))\n      temp_lmr_done <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk)\n    cnt_wrcal_rd <= #TCQ (cnt_wait == 'd4);\n  ",
        "  always @(posedge clk) begin\n    case (init_state_r)\n      INIT_WRCAL_READ_WAIT: begin\n        if (phy_ctl_full || phy_cmd_full)\n          cnt_wait <= #TCQ cnt_wait;\n        else\n          cnt_wait <= #TCQ cnt_wait + 1;\n      end\n      default:\n        cnt_wait <= #TCQ 'b0;\n    endcase\n  end",
        "  always @(posedge clk)\n    cnt_cmd_done_m7_r <= #TCQ (cnt_cmd_r == (CNTNEXT_CMD - 7));\n",
        "  always @(posedge clk)\n    cnt_cmd_done_r <= #TCQ (cnt_cmd_r == CNTNEXT_CMD);\n ",
        "  always @(posedge clk) begin\n    case (init_state_r)\n      INIT_LOAD_MR_WAIT,\n      INIT_WRLVL_LOAD_MR_WAIT,\n      INIT_WRLVL_LOAD_MR2_WAIT,\n      INIT_MPR_WAIT,\n      INIT_MPR_DISABLE_PREWAIT,\n      INIT_MPR_DISABLE_WAIT,\n      INIT_OCLKDELAY_ACT_WAIT,\n      INIT_OCLKDELAY_WRITE_WAIT,\n      INIT_RDLVL_ACT_WAIT,\n      INIT_RDLVL_STG1_WRITE_READ,\n      INIT_RDLVL_STG2_READ_WAIT,\n      INIT_WRCAL_ACT_WAIT,\n      INIT_WRCAL_WRITE_READ,\n      INIT_WRCAL_READ_WAIT,\n      INIT_PRECHARGE_PREWAIT,\n      INIT_PRECHARGE_WAIT,\n      INIT_DDR2_PRECHARGE_WAIT,\n      INIT_REG_WRITE_WAIT,\n      INIT_REFRESH_WAIT,\n      INIT_REFRESH_RNK2_WAIT: begin\n        if (phy_ctl_full || phy_cmd_full)\n          cnt_cmd_r <= #TCQ cnt_cmd_r;\n        else\n          cnt_cmd_r <= #TCQ cnt_cmd_r + 1;\n      end\n      INIT_WRLVL_WAIT:\n        cnt_cmd_r <= #TCQ 'b0;\n      default:\n        cnt_cmd_r <= #TCQ 'b0;\n    endcase\n  end",
        "    always @(posedge clk) begin\n    if (rst || prbs_rdlvl_done_r3)\n      complex_mask_lim_done <= #TCQ 1'b0;\n    else if (~prbs_rdlvl_done && complex_oclkdelay_calib_start_int)\n      complex_mask_lim_done <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk) begin\n    if (rst || prech_done_r3)\n      mask_lim_done <= #TCQ 1'b0;\n    else if (prech_pending_r)\n      mask_lim_done <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk)\n    if (rst) begin\n      prech_req_r         <= #TCQ 1'b0;\n      prech_req_posedge_r <= #TCQ 1'b0;\n      prech_pending_r     <= #TCQ 1'b0;\n    end else begin\n      prech_req_r         <= #TCQ prech_req;\n      prech_req_posedge_r <= #TCQ prech_req & ~prech_req_r;\n      if (prech_req_posedge_r)\n        prech_pending_r   <= #TCQ 1'b1;\n      \n      \n      else if (prech_done_pre)\n        prech_pending_r   <= #TCQ 1'b0;\n    end",
        "  \n  assign prech_req = oclk_prech_req | rdlvl_prech_req | wrcal_prech_req | prbs_rdlvl_prech_req | \n                    (dqs_found_prech_req & (init_state_r == INIT_RDLVL_STG2_READ_WAIT));",
        "    always @ (posedge clk) begin\n      \n        wrlvl_rank_cntr <= #TCQ 3'd0;\n      \n      \n    end               ",
        "    always @(posedge clk) begin\n      wrlvl_active_r1      <= #TCQ wrlvl_active;\n      wr_level_dqs_asrt_r1 <= #TCQ wr_level_dqs_asrt;\n      wrlvl_done_r         <= #TCQ wrlvl_done;\n      wrlvl_done_r1        <= #TCQ wrlvl_done_r;\n      wrlvl_rank_done_r1   <= #TCQ wrlvl_rank_done;\n      wrlvl_rank_done_r2   <= #TCQ wrlvl_rank_done_r1;\n      wrlvl_rank_done_r3   <= #TCQ wrlvl_rank_done_r2;\n      wrlvl_rank_done_r4   <= #TCQ wrlvl_rank_done_r3;\n      wrlvl_rank_done_r5   <= #TCQ wrlvl_rank_done_r4;\n      wrlvl_rank_done_r6   <= #TCQ wrlvl_rank_done_r5;\n      wrlvl_rank_done_r7   <= #TCQ wrlvl_rank_done_r6;\n    end",
        "  always @(posedge clk) begin\n    if (rst)\n      wl_sm_start        <= #TCQ 1'b0;\n    else\n      wl_sm_start        <= #TCQ wr_level_dqs_asrt_r1;\n  end",
        "  always @ (posedge clk) begin\n     if (rst || ~wrlvl_active)\n       wr_lvl_start <= #TCQ 1'd0;\n     else if (dqs_asrt_cnt == 2'd3)\n       wr_lvl_start <= #TCQ 1'd1;\n  end",
        "  always @ (posedge clk) begin\n     if (rst || (wrlvl_done_r && ~wrlvl_done_r1))\n       dqs_asrt_cnt <= #TCQ 2'd0;\n     else if (wr_level_dqs_asrt && dqs_asrt_cnt != 2'd3)\n       dqs_asrt_cnt <= #TCQ (dqs_asrt_cnt + 1);\n  end",
        "  always @(posedge clk)begin\n     if(rst || (enable_wrlvl_cnt != 5'd1)) begin\n       wr_level_dqs_asrt <= #TCQ 1'd0;\n     end else if ((enable_wrlvl_cnt == 5'd1) && (wrlvl_active_r1)) begin\n       wr_level_dqs_asrt <= #TCQ 1'd1;\n     end\n  end",
        "  always @(posedge clk)\n    if (rst || wrlvl_rank_done || done_dqs_tap_inc)\n      wrlvl_active <= #TCQ 1'b0;\n    else if ((enable_wrlvl_cnt == 5'd1) && wrlvl_odt && !wrlvl_active)\n      wrlvl_active <= #TCQ 1'b1;\n",
        "      always @(posedge clk)\n        if (rst || wrlvl_odt_ctl)\n          wrlvl_odt <= #TCQ 1'b0;\n        else if (enable_wrlvl_cnt == 5'd1)\n          wrlvl_odt <= #TCQ 1'b1;\n      \n    end",
        "      always @ (posedge clk)\n        if (rst)\n          enable_wrlvl_cnt <= #TCQ 5'd0;\n        else if ((init_state_r == INIT_WRLVL_START) ||\n                 (wrlvl_odt && (enable_wrlvl_cnt == 5'd0)))\n          enable_wrlvl_cnt <= #TCQ 5'd21;\n        else if ((enable_wrlvl_cnt > 5'd0) && ~(phy_ctl_full || phy_cmd_full))\n          enable_wrlvl_cnt <= #TCQ enable_wrlvl_cnt - 1;\n          ",
        "      always @(posedge clk)\n        if (rst || wrlvl_odt_ctl)\n          wrlvl_odt <= #TCQ 1'b0;\n        else if (enable_wrlvl_cnt == 5'd1)\n          wrlvl_odt <= #TCQ 1'b1;\n          \n    end else begin: en_cnt_div2  ",
        "      always @ (posedge clk)\n        if (rst)\n          enable_wrlvl_cnt <= #TCQ 5'd0;\n        else if ((init_state_r == INIT_WRLVL_START) ||\n                 (wrlvl_odt && (enable_wrlvl_cnt == 5'd0)))\n          enable_wrlvl_cnt <= #TCQ 5'd12;\n        else if ((enable_wrlvl_cnt > 5'd0) && ~(phy_ctl_full || phy_cmd_full))\n          enable_wrlvl_cnt <= #TCQ enable_wrlvl_cnt - 1;\n          ",
        "  generate\n    if (nCK_PER_CLK == 4) begin: en_cnt_div4",
        "  always @(posedge clk)\n    if (rst ||\n       ((init_state_r1 != INIT_WRLVL_START) && \n       (init_state_r == INIT_WRLVL_START)))\n      wrlvl_odt_ctl <= #TCQ 1'b0;\n    else if (wrlvl_rank_done && ~wrlvl_rank_done_r1)\n      wrlvl_odt_ctl <= #TCQ 1'b1;\n",
        "  always @(posedge clk)\n    wrlvl_final_r <= #TCQ wrlvl_final;\n  ",
        "  always @(posedge clk)\n    if (rst)\n      pi_dqs_found_done_r1 <= #TCQ 1'b0;\n    else\n      pi_dqs_found_done_r1 <= #TCQ pi_dqs_found_done;\n",
        "  always @(posedge clk)\n    if (rst)\n      oclkdelay_calib_start <= #TCQ 1'b0;\n    else if (oclkdelay_start_dly_r[5])\n      oclkdelay_calib_start <= #TCQ 1'b1;\n  ",
        "    always @(posedge clk) begin\n      if (rst || dqsfound_retry || wrlvl_byte_redo) begin\n        pi_dqs_found_start <= #TCQ 1'b0;\n        wrcal_start        <= #TCQ 1'b0;\n      end else begin\n        if (!pi_dqs_found_done && init_state_r == INIT_RDLVL_STG2_READ)\n          pi_dqs_found_start <= #TCQ 1'b1;\n        if (wrcal_start_dly_r[5])\n          wrcal_start <= #TCQ 1'b1;\n      end  \n    end ",
        "  always @(posedge clk)\n    if (rst || rdlvl_stg1_rank_done) begin\n      rdlvl_stg1_start   <= #TCQ 1'b0;\n      rdlvl_stg1_start_int <= #TCQ 1'b0;\n      rdlvl_start_pre <= #TCQ 1'b0;\n      prbs_rdlvl_start     <= #TCQ 1'b0;\n    end else begin      \n      if (pi_dqs_found_done && cnt_cmd_done_r &&\n         (init_state_r == INIT_RDLVL_ACT_WAIT))\n        rdlvl_stg1_start_int <= #TCQ 1'b1;\n      if (pi_dqs_found_done &&\n         (init_state_r == INIT_RDLVL_STG1_READ))begin\n        rdlvl_start_pre <= #TCQ 1'b1;\n        rdlvl_stg1_start <= #TCQ  rdlvl_start_dly0_r[14];\n      end \n      if (pi_dqs_found_done && rdlvl_stg1_done && ~prbs_rdlvl_done &&\n         (init_state_r == INIT_RDLVL_COMPLEX_PI_WAIT) && (WRLVL == \"ON\")) begin\n        prbs_rdlvl_start <= #TCQ 1'b1;\n      end  \n    end\nend",
        "  always @(posedge clk)\n    if (rst) begin\n      rdlvl_stg1_start   <= #TCQ 1'b0;\n      rdlvl_stg1_start_int <= #TCQ 1'b0;\n      rdlvl_start_pre <= #TCQ 1'b0;\n      prbs_rdlvl_start     <= #TCQ 1'b0;\n    end else begin      \n      if (pi_dqs_found_done && cnt_cmd_done_r &&\n         (init_state_r == INIT_RDLVL_ACT_WAIT))\n        rdlvl_stg1_start_int <= #TCQ 1'b1;\n      if (pi_dqs_found_done &&\n         (init_state_r == INIT_RDLVL_STG1_READ))begin\n        rdlvl_start_pre <= #TCQ 1'b1;\n        rdlvl_stg1_start <= #TCQ  rdlvl_start_dly0_r[14];\n      end \n      if (pi_dqs_found_done && rdlvl_stg1_done && ~prbs_rdlvl_done &&\n         (init_state_r == INIT_RDLVL_COMPLEX_PI_WAIT) && (WRLVL == \"ON\")) begin\n        prbs_rdlvl_start <= #TCQ 1'b1;\n      end \n    end\nend else begin",
        "generate\nif (RANKS < 2) begin\n  always @(posedge clk)",
        "  always @(posedge clk)\n    if (rst || \n        ((stg1_wr_rd_cnt == 'd2) && ~stg1_wr_done) || complex_oclkdelay_calib_done || \n          (complex_wait_cnt == 'd15 && complex_num_writes == 1 && complex_ocal_wr_start) ||\n          ( init_state_r == INIT_RDLVL_STG1_WRITE && complex_num_writes_dec == 'd2) || ~complex_ocal_wr_start ||\n          (complex_byte_rd_done && init_state_r == INIT_RDLVL_COMPLEX_ACT ) ||\n\t  (init_state_r != INIT_OCAL_COMPLEX_RESUME_WAIT && init_state_r1 == INIT_OCAL_COMPLEX_RESUME_WAIT) ||\n          (init_state_r == INIT_OCAL_COMPLEX_ACT))                       \n      prbs_gen_oclk_clk_en <= #TCQ 1'b0;\n    else if ((~phy_if_empty_r && ~complex_oclkdelay_calib_done && prbs_rdlvl_done_r1) || \n             ((init_state_r == INIT_OCAL_COMPLEX_ACT_WAIT) && (complex_wait_cnt == 'd14)) ||\n             ((init_state_r == INIT_OCAL_COMPLEX_WRITE_WAIT) && (complex_wait_cnt == 'd14)) ||\n\t     exit_ocal_complex_resume_wait ||\n             ((init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT) && ~stg1_wr_done && ~complex_row1_wr_done && ~complex_ocal_num_samples_done_r && (complex_wait_cnt == 'd14)) \n             || (init_state_r == INIT_RDLVL_COMPLEX_READ) )\n      prbs_gen_oclk_clk_en <= #TCQ 1'b1;\n",
        "  always @(posedge clk)\n    if (rst || \n        ((stg1_wr_rd_cnt == 'd2) && ~stg1_wr_done) || prbs_rdlvl_done)                        \n      prbs_gen_clk_en <= #TCQ 1'b0;\n    else if ((~phy_if_empty_r && rdlvl_stg1_done_r1 && ~prbs_rdlvl_done) ||\n             ((init_state_r == INIT_RDLVL_ACT_WAIT) && rdlvl_stg1_done_r1 && (cnt_cmd_r == 'd127)) ||\n             ((init_state_r == INIT_RDLVL_COMPLEX_ACT_WAIT) && rdlvl_stg1_done_r1 && (complex_wait_cnt == 'd14)) \n             || (init_state_r == INIT_RDLVL_COMPLEX_READ) || ((init_state_r == INIT_PRECHARGE_PREWAIT) && prbs_rdlvl_start)) \n      prbs_gen_clk_en <= #TCQ 1'b1;",
        "  always @(posedge clk)\n    phy_if_empty_r <= #TCQ phy_if_empty;\n",
        "  always @(posedge clk)\n    if (rst)\n      mpr_rdlvl_start <= #TCQ 1'b0;\n    else if (pi_dqs_found_done &&\n           (init_state_r == INIT_MPR_READ))\n      mpr_rdlvl_start <= #TCQ 1'b1;\n",
        "  always @(posedge clk) begin    \n    prech_done    <= #TCQ prech_done_dly_r[15];\n\tprech_done_r1 <= #TCQ prech_done_dly_r[15];\n    prech_done_r2 <= #TCQ prech_done_r1;\n\tprech_done_r3 <= #TCQ prech_done_r2;\n  end",
        "  always @(posedge clk) begin\n    if (rst || (init_state_r == INIT_RDLVL_COMPLEX_READ))\n\t  ext_int_ref_req <= #TCQ 1'b0;\n\telse if ((init_state_r == INIT_RDLVL_ACT_WAIT) && complex_rdlvl_int_ref_req)\n\t  ext_int_ref_req <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk) begin\n    if (rst || (init_state_r == INIT_RDLVL_ACT_WAIT) || prbs_rdlvl_done)\n\t  complex_rdlvl_int_ref_req <= #TCQ 1'b0;\n\telse if (oclkdelay_ref_cnt == 'd1)\n\n\t  complex_rdlvl_int_ref_req <= #TCQ 1'b0;   \n  end",
        "  always @(posedge clk) begin\n    if (rst || (init_state_r == INIT_OCLKDELAY_READ))\n\t  oclk_calib_resume_level <= #TCQ 1'b0;\n\telse if (oclk_calib_resume)\n\t  oclk_calib_resume_level <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk) begin\n    if (rst)\n      ocal_act_wait_cnt <= #TCQ 'd0;\n    else if ((init_state_r == INIT_OCAL_CENTER_ACT_WAIT) && ocal_act_wait_cnt < 'd15)\n      ocal_act_wait_cnt <= #TCQ ocal_act_wait_cnt + 1;\n    else\n      ocal_act_wait_cnt <= #TCQ 'd0;\n  end",
        "  always @(posedge clk) begin\n    if (rst || (init_state_r == INIT_OCAL_CENTER_ACT) || oclkdelay_calib_done || ocal_last_byte_done || oclkdelay_center_calib_done)\n\t  oclkdelay_int_ref_req <= #TCQ 1'b0;\n\telse if (oclkdelay_ref_cnt == 'd1)\n\t  oclkdelay_int_ref_req <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk) begin\n    if (rst || (init_state_r == INIT_REFRESH) || prbs_rdlvl_done || ocal_last_byte_done || oclkdelay_center_calib_done)\n\t  oclkdelay_ref_cnt <= #TCQ REFRESH_TIMER;\n\telse if (oclkdelay_calib_start_int) begin\n\t  if (oclkdelay_ref_cnt > 'd0)\n\t    oclkdelay_ref_cnt <= #TCQ oclkdelay_ref_cnt - 1;\n\t  else\n\t    oclkdelay_ref_cnt <= #TCQ REFRESH_TIMER;\n\tend\n  end",
        "  always @(posedge clk) begin\n    if (rst)\n\t  ocal_last_byte_done <= #TCQ 1'b0;\n\telse if ((complex_oclkdelay_calib_cnt == DQS_WIDTH-1) && oclkdelay_center_calib_done)\n\t  ocal_last_byte_done <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk)\n    if (rst)\n      oclkdelay_calib_start_int <= #TCQ 1'b0;\n    else if (oclkdelay_start_dly_r[5])\n      oclkdelay_calib_start_int <= #TCQ 1'b1;\n  ",
        "  always @(posedge clk) begin \n    rdlvl_last_byte_done_r <= #TCQ rdlvl_last_byte_done;  \n    prbs_last_byte_done_r  <= #TCQ prbs_last_byte_done;  \n    rdlvl_start_dly0_r     <= #TCQ {rdlvl_start_dly0_r[14:0], \n                                     rdlvl_start_pre};\n    wrcal_start_dly_r     <= #TCQ {wrcal_start_dly_r[14:0],\n                                     wrcal_start_pre};\n    oclkdelay_start_dly_r <= #TCQ {oclkdelay_start_dly_r[14:0],\n                                   oclkdelay_calib_start_pre};\n    prech_done_dly_r       <= #TCQ {prech_done_dly_r[14:0], \n                                     prech_done_pre};\n  end",
        "  always @(posedge clk)\n    if (rst)\n      pi_phaselock_start <= #TCQ 1'b0;\n    else if (init_state_r == INIT_PI_PHASELOCK_READS)\n      pi_phaselock_start <= #TCQ 1'b1;\n  ",
        "  always @(posedge clk)\n    if (rst || (init_state_r == INIT_WRCAL_WRITE))\n\t  calib_tap_end_if_reset <= #TCQ 1'b0;\n\telse if (calib_tap_inc_done && ~calib_tap_inc_done_r1)\n\t  calib_tap_end_if_reset <= #TCQ 1'b1;\n",
        "  always @(posedge clk)\n    calib_tap_inc_done_r1 <= #TCQ calib_tap_inc_done;\n  ",
        "  always @(posedge clk)\n    if (rst)\n\t  calib_tap_inc_start <= #TCQ 1'b0;\n\telse if (init_state_r == INIT_SKIP_CALIB_WAIT)\n\t  calib_tap_inc_start <= #TCQ 1'b1;\n\t  ",
        "  assign prech_done_pre = (((init_state_r == INIT_RDLVL_STG1_READ) || (init_state_r == INIT_RDLVL_STG1_WRITE_READ) ||  \n                           ((rdlvl_last_byte_done_r || prbs_last_byte_done_r) && (init_state_r == INIT_RDLVL_ACT_WAIT) && cnt_cmd_done_r) ||\n                            (dqs_found_prech_req && (init_state_r == INIT_RDLVL_ACT_WAIT)) ||\n                            (init_state_r == INIT_MPR_RDEN) ||\n                            ((init_state_r == INIT_WRCAL_ACT_WAIT) && cnt_cmd_done_r) ||\n                            (init_state_r == INIT_OCAL_CENTER_ACT) ||\n                            ((init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE_PREWAIT) && complex_oclkdelay_calib_start_r1) ||\n                            ((init_state_r == INIT_OCLKDELAY_ACT_WAIT) && cnt_cmd_done_r) ||\n                            ((init_state_r == INIT_RDLVL_COMPLEX_PRECHARGE) && prbs_last_byte_done_r) ||  \n                            (wrlvl_final && (init_state_r == INIT_REFRESH_WAIT) && cnt_cmd_done_r && ~oclkdelay_calib_done)) &&\n                           prech_pending_r && \n                           !prech_req_posedge_r);",
        "  assign wrcal_start_pre = (init_state_r == INIT_WRCAL_READ) || (init_state_r == INIT_WRCAL_MULT_READS);",
        "  assign oclkdelay_calib_start_pre = (init_state_r == INIT_OCAL_CENTER_ACT); \n  ",
        "  assign calib_rank_cnt = chip_cnt_r;",
        "  assign load_mr3[1:0]  = 2'b00;\n  assign load_mr3[2]    = 1'b0;\n  assign load_mr3[15:3] = 13'b0000000000000;\n  ",
        "  generate\n    if(DRAM_TYPE == \"DDR3\") begin: gen_load_mr2_DDR3\n      assign load_mr2[2:0]   = 3'b000; \n      assign load_mr2[5:3]   = (nCWL == 5) ? 3'b000 :\n                               (nCWL == 6) ? 3'b001 : \n                               (nCWL == 7) ? 3'b010 : \n                               (nCWL == 8) ? 3'b011 : \n                               (nCWL == 9) ? 3'b100 :\n                               (nCWL == 10) ? 3'b101 :\n                               (nCWL == 11) ? 3'b110 : 3'b111;\n      assign load_mr2[6]     = 1'b0;\n      assign load_mr2[7]     = 1'b0;\n      assign load_mr2[8]     = 1'b0;\n                               \n      assign load_mr2[10:9]  = 2'b00;\n      assign load_mr2[15:11] = 5'b00000;\n    end else begin: gen_load_mr2_DDR2\n      assign load_mr2[15:0] = 16'd0;\n    end\n  endgenerate",
        "  generate\n    if(DRAM_TYPE == \"DDR3\") begin: gen_load_mr1_DDR3\n      assign load_mr1[0]     = 1'b0;   \n      assign load_mr1[1]     = (OUTPUT_DRV == \"LOW\") ? 1'b0 : 1'b1; \n      assign load_mr1[2]     = ((RTT_NOM_int == \"30\") || (RTT_NOM_int == \"40\") || \n                                (RTT_NOM_int == \"60\")) ? 1'b1 : 1'b0;\n      assign load_mr1[4:3]   = (AL == \"0\")    ? 2'b00 :\n                               (AL == \"CL-1\") ? 2'b01 :\n                               (AL == \"CL-2\") ? 2'b10 : 2'b11;\n      assign load_mr1[5]     = 1'b0; \n      assign load_mr1[6]     = ((RTT_NOM_int == \"40\") || (RTT_NOM_int == \"120\")) ? \n                               1'b1 : 1'b0;\n      assign load_mr1[7]     = 1'b0;   \n      assign load_mr1[8]     = 1'b0;\n      assign load_mr1[9]     = ((RTT_NOM_int == \"20\") || (RTT_NOM_int == \"30\")) ?\n                                1'b1 : 1'b0;\n      assign load_mr1[10]    = 1'b0;\n      assign load_mr1[15:11] = 5'b00000;\n    end else if (DRAM_TYPE == \"DDR2\") begin: gen_load_mr1_DDR2 \n      assign load_mr1[0]     = 1'b0;   \n      assign load_mr1[1]     = (OUTPUT_DRV == \"LOW\") ? 1'b1 : 1'b0; \n      assign load_mr1[2]     = ((RTT_NOM_int == \"75\") || (RTT_NOM_int == \"50\")) ?\n                                1'b1 : 1'b0;\n      assign load_mr1[5:3]   = (AL == \"0\") ? 3'b000 :\n                               (AL == \"1\") ? 3'b001 :\n                               (AL == \"2\") ? 3'b010 :\n                               (AL == \"3\") ? 3'b011 :\n                               (AL == \"4\") ? 3'b100 : 3'b111;     \n      assign load_mr1[6]     = ((RTT_NOM_int == \"50\") || \n                                (RTT_NOM_int == \"150\")) ? 1'b1 : 1'b0;\n      assign load_mr1[9:7]   = 3'b000;\n      assign load_mr1[10]    = (DDR2_DQSN_ENABLE == \"YES\") ? 1'b0 : 1'b1;\n      assign load_mr1[15:11] = 5'b00000;\n\n    end\n  endgenerate",
        "  generate\n    if(DRAM_TYPE == \"DDR3\") begin: gen_load_mr0_DDR3\n      assign load_mr0[1:0]   = (BURST_MODE == \"8\")   ? 2'b00 :\n                               (BURST_MODE == \"OTF\") ? 2'b01 : \n                               (BURST_MODE == \"4\")   ? 2'b10 : 2'b11;\n      assign load_mr0[2]     = (nCL >= 12) ? 1'b1 : 1'b0;   \n      assign load_mr0[3]     = (BURST_TYPE == \"SEQ\") ? 1'b0 : 1'b1;\n      assign load_mr0[6:4]   = ((nCL == 5) || (nCL == 13))  ? 3'b001 :\n                               ((nCL == 6) || (nCL == 14))  ? 3'b010 : \n                               (nCL == 7)  ? 3'b011 : \n                               (nCL == 8)  ? 3'b100 :\n                               (nCL == 9)  ? 3'b101 :\n                               (nCL == 10) ? 3'b110 : \n                               (nCL == 11) ? 3'b111 :  \n                               (nCL == 12) ? 3'b000 : 3'b111;\n      assign load_mr0[7]     = 1'b0;\n      assign load_mr0[8]     = 1'b1;   \n      assign load_mr0[11:9]  = (TWR_CYC == 5)  ? 3'b001 :\n                               (TWR_CYC == 6)  ? 3'b010 : \n                               (TWR_CYC == 7)  ? 3'b011 :\n                               (TWR_CYC == 8)  ? 3'b100 :\n                               (TWR_CYC == 9)  ? 3'b101 :\n                               (TWR_CYC == 10)  ? 3'b101 :\n                               (TWR_CYC == 11)  ? 3'b110 : \n                               (TWR_CYC == 12)  ? 3'b110 :\n                               (TWR_CYC == 13)  ? 3'b111 :\n                               (TWR_CYC == 14)  ? 3'b111 :\n                               (TWR_CYC == 15)  ? 3'b000 :\n                               (TWR_CYC == 16)  ? 3'b000 : 3'b010;\n      assign load_mr0[12]    = 1'b0;   \n      assign load_mr0[15:13] = 3'b000;\n    end else if (DRAM_TYPE == \"DDR2\") begin: gen_load_mr0_DDR2 \n      assign load_mr0[2:0]   = (BURST_MODE == \"8\")   ? 3'b011 :\n                               (BURST_MODE == \"4\")   ? 3'b010 : 3'b111;\n      assign load_mr0[3]     = (BURST_TYPE == \"SEQ\") ? 1'b0 : 1'b1;       \n      assign load_mr0[6:4]   = (nCL == 3)  ? 3'b011 :\n                               (nCL == 4)  ? 3'b100 :\n                               (nCL == 5)  ? 3'b101 : \n                               (nCL == 6)  ? 3'b110 : 3'b111;\n      assign load_mr0[7]     = 1'b0;\n      assign load_mr0[8]     = 1'b1;   \n      assign load_mr0[11:9]  = (TWR_CYC == 2)  ? 3'b001 :\n                               (TWR_CYC == 3)  ? 3'b010 :\n                               (TWR_CYC == 4)  ? 3'b011 :\n                               (TWR_CYC == 5)  ? 3'b100 : \n                               (TWR_CYC == 6)  ? 3'b101 : 3'b010;\n      assign load_mr0[15:12]= 4'b0000; \n    end\n  endgenerate",
        "  always @ (posedge clk) begin\n    if (rst)\n      complex_ocal_wr_start <= #TCQ 'b0;\n    else\n      complex_ocal_wr_start <= #TCQ complex_ocal_reset_rd_addr? 1'b1 : complex_ocal_wr_start;\n  end",
        "  always @ (posedge clk) begin\n    complex_ocal_reset_rd_addr <= #TCQ ((init_state_r == INIT_OCAL_COMPLEX_ACT_WAIT) && (complex_wait_cnt == 'd9)) || (prbs_last_byte_done && ~prbs_last_byte_done_r);\n    \n  end",
        "  always @ (posedge clk)\n    if (rst) \n      complex_oclkdelay_calib_done_r1 <= #TCQ 1'b0;\n    else\n      complex_oclkdelay_calib_done_r1 <= #TCQ complex_oclkdelay_calib_done;\n",
        "  always @(posedge clk)\n    if (rst) begin\n      init_complete_r     <= #TCQ 1'b0;\n      init_complete_r_timing <= #TCQ 1'b0;\n      init_complete_r1    <= #TCQ 1'b0;\n      init_complete_r1_timing <= #TCQ 1'b0; \n      init_complete_r2    <= #TCQ 1'b0;\n      init_calib_complete <= #TCQ 1'b0;\n    end else begin\n      if (init_state_r == INIT_DONE) begin\n        init_complete_r   <= #TCQ 1'b1;\n        init_complete_r_timing <= #TCQ 1'b1;\n      end\n      init_complete_r1    <= #TCQ init_complete_r;\n      init_complete_r1_timing <= #TCQ init_complete_r_timing; \n      init_complete_r2    <= #TCQ init_complete_r1; \n      init_calib_complete <= #TCQ init_complete_r2;\n    end ",
        "  always @(posedge clk)\n    if (rst)\n      wrcal_rd_wait <= #TCQ 1'b0;\n    else if (init_state_r == INIT_WRCAL_READ_WAIT)\n      wrcal_rd_wait <= #TCQ 1'b1;\n    else\n      wrcal_rd_wait <= #TCQ 1'b0;",
        "  always @(posedge clk)\n    if (rst)\n      calib_writes <= #TCQ 1'b0;\n    else if ((init_state_r == INIT_OCLKDELAY_WRITE) || \n             (init_state_r == INIT_OCAL_CENTER_WRITE) || \n             (init_state_r == INIT_RDLVL_STG1_WRITE) ||\n             (init_state_r == INIT_RDLVL_STG1_WRITE_READ) ||\n             (init_state_r == INIT_WRCAL_WRITE) ||\n             (init_state_r == INIT_WRCAL_WRITE_READ))\n      calib_writes <= #TCQ 1'b1;\n    else\n      calib_writes <= #TCQ 1'b0;",
        "  always @(posedge clk) begin\n    if (rst)\n      mpr_end_if_reset <= #TCQ 1'b0;\n    else if (mpr_last_byte_done && (num_refresh != 'd0))\n      mpr_end_if_reset <= #TCQ 1'b1;\n    else\n      mpr_end_if_reset <= #TCQ 1'b0;\n  end",
        "  always @(posedge clk) begin\n    rdlvl_stg1_done_r1      <= #TCQ rdlvl_stg1_done;\n    prbs_rdlvl_done_r1      <= #TCQ prbs_rdlvl_done;\n\tprbs_rdlvl_done_r2      <= #TCQ prbs_rdlvl_done_r1;\n\tprbs_rdlvl_done_r3      <= #TCQ prbs_rdlvl_done_r2;\n    wrcal_resume_r          <= #TCQ wrcal_resume;\n    wrcal_sanity_chk        <= #TCQ wrcal_final_chk;\n  end",
        "  always @(posedge clk) begin\n    if (rst)\n      wrcal_final_chk <= #TCQ 1'b0;\n    else if ((init_next_state == INIT_WRCAL_ACT) && (wrcal_done || (SKIP_CALIB == \"TRUE\")) && \n             (DRAM_TYPE == \"DDR3\"))\n      wrcal_final_chk <= #TCQ 1'b1;\n  end",
        "  always @ (posedge clk) begin\n    prbs_rdlvl_done_pulse <= #TCQ prbs_rdlvl_done & ~prbs_rdlvl_done_r1;\n  end",
        "  always @ (posedge clk) \n    complex_act_start <= #TCQ (init_state_r == INIT_RDLVL_COMPLEX_ACT) || (init_state_r == INIT_RDLVL_COMPLEX_PI_WAIT);\n\n  ",
        "  assign pi_calib_done = pi_calib_done_r1;",
        "  assign dbg_phy_init[5:0] = init_state_r;\n  assign dbg_phy_init[6+:8] = complex_row_cnt;\n  assign dbg_phy_init[14+:3] = victim_sel;\n  assign dbg_phy_init[17+:4] = victim_byte_cnt;\n  assign dbg_phy_init[21+:9] = stg1_wr_rd_cnt[8:0]; \n  assign dbg_phy_init[30+:15]  = complex_address;\n  assign dbg_phy_init[(30+15)+:15]  = phy_address[14:0];\n  assign dbg_phy_init[60]  =prbs_rdlvl_prech_req ;",
        "  always@(posedge oclkdelay_center_calib_done)begin\n    if(!rst)\n    \t$display(\"PHY_INIT : OCLKDELAY CENTER CALIB calibration completed at %t\",$time);\n  end ",
        "  always@(posedge complex_oclkdelay_calib_done)begin\n    if(!rst)\n    \t$display(\"PHY_INIT : COMPLEX OCLKDELAY calibration completed at %t\",$time);\n  end ",
        "  always@(posedge prbs_rdlvl_done)begin\n    if(!rst)\n    \t$display(\"PHY_INIT : PRBS/PER_BIT calibration completed at %t\",$time);\n  end ",
        "  always @(posedge wrcal_done) begin\n    if (!rst && (WRLVL == \"ON\"))\n      $display (\"PHY_INIT: Write Calibration completed at %t\", $time);\n  end    ",
        "  always @(posedge pi_dqs_found_done) begin\n    if (!rst) \n      $display (\"PHY_INIT: Phaser_In DQSFOUND completed at %t\", $time);\n  end",
        "  always @(posedge pi_calib_done_r1) begin\n    if (!rst) \n      $display (\"PHY_INIT: Phaser_In Phase Locked at %t\", $time);\n  end",
        "  always @(posedge oclkdelay_calib_done) begin\n    if (!rst) \n      $display (\"PHY_INIT: OCLKDELAY calibration completed at %t\", $time);\n  end",
        "  always @(posedge mpr_rdlvl_done) begin\n    if (!rst) \n      $display (\"PHY_INIT: MPR Read Leveling completed at %t\", $time);\n  end\n  ",
        "  always @(posedge rdlvl_stg1_done) begin\n    if (!rst) \n      $display (\"PHY_INIT: Read Leveling Stage 1 completed at %t\", $time);\n  end",
        "  always @(posedge wrlvl_done) begin\n    if (!rst && (WRLVL == \"ON\"))\n      $display (\"PHY_INIT: Write Leveling completed at %t\", $time);\n  end",
        "  always @(posedge mem_init_done_r) begin \n    if (!rst)\n      $display (\"PHY_INIT: Memory Initialization completed at %t\", $time);\n  end\n",
        "  \n  \n  \n  \n  localparam REG_RC1 = 8'b00000001;\n\n  "
    ]
}