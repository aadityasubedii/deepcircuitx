{
    "line_num": [
        [
            2700,
            3380
        ],
        [
            2694,
            2698
        ],
        [
            2671,
            2689
        ],
        [
            2645,
            2666
        ],
        [
            2642,
            2642
        ],
        [
            2639,
            2641
        ],
        [
            2631,
            2638
        ],
        [
            2620,
            2630
        ],
        [
            2609,
            2614
        ],
        [
            2578,
            2608
        ],
        [
            2572,
            2577
        ],
        [
            2561,
            2565
        ],
        [
            2547,
            2552
        ],
        [
            2543,
            2543
        ],
        [
            2464,
            2541
        ],
        [
            2462,
            2463
        ],
        [
            2456,
            2461
        ],
        [
            2451,
            2455
        ],
        [
            2421,
            2438
        ],
        [
            2412,
            2420
        ],
        [
            2399,
            2410
        ],
        [
            2386,
            2396
        ],
        [
            2378,
            2384
        ],
        [
            2276,
            2355
        ],
        [
            2274,
            2274
        ],
        [
            2121,
            2273
        ],
        [
            2118,
            2121
        ],
        [
            2111,
            2116
        ],
        [
            2088,
            2101
        ],
        [
            2086,
            2087
        ],
        [
            2062,
            2084
        ],
        [
            2059,
            2064
        ],
        [
            2046,
            2054
        ],
        [
            2000,
            2030
        ],
        [
            1979,
            1984
        ],
        [
            1972,
            1972
        ],
        [
            1961,
            1970
        ],
        [
            1950,
            1959
        ],
        [
            1946,
            1948
        ],
        [
            1937,
            1941
        ],
        [
            1926,
            1935
        ],
        [
            1915,
            1924
        ],
        [
            1890,
            1910
        ],
        [
            1868,
            1888
        ],
        [
            1845,
            1865
        ],
        [
            1823,
            1843
        ],
        [
            1820,
            1822
        ],
        [
            1819,
            1820
        ],
        [
            1817,
            1817
        ],
        [
            1798,
            1815
        ],
        [
            1779,
            1796
        ],
        [
            1775,
            1778
        ],
        [
            1771,
            1774
        ],
        [
            1752,
            1769
        ],
        [
            1733,
            1750
        ],
        [
            1688,
            1728
        ],
        [
            1646,
            1686
        ],
        [
            1603,
            1643
        ],
        [
            1561,
            1601
        ],
        [
            1555,
            1560
        ],
        [
            1457,
            1546
        ],
        [
            1439,
            1455
        ],
        [
            1421,
            1436
        ],
        [
            1402,
            1418
        ],
        [
            1385,
            1400
        ],
        [
            1380,
            1547
        ],
        [
            1337,
            1348
        ],
        [
            1335,
            1336
        ],
        [
            1326,
            1333
        ],
        [
            1323,
            1325
        ],
        [
            1301,
            1320
        ],
        [
            1299,
            1300
        ],
        [
            1286,
            1297
        ],
        [
            1281,
            1285
        ],
        [
            1261,
            1265
        ],
        [
            1236,
            1250
        ],
        [
            1215,
            1234
        ],
        [
            1196,
            1201
        ],
        [
            1166,
            1193
        ],
        [
            1157,
            1161
        ],
        [
            1128,
            1153
        ],
        [
            1126,
            1128
        ],
        [
            1114,
            1123
        ],
        [
            1096,
            1111
        ],
        [
            1083,
            1094
        ],
        [
            1078,
            1081
        ],
        [
            1062,
            1075
        ],
        [
            1058,
            1058
        ],
        [
            1043,
            1050
        ],
        [
            1028,
            1037
        ],
        [
            1021,
            1024
        ],
        [
            994,
            1018
        ],
        [
            980,
            987
        ],
        [
            970,
            978
        ],
        [
            955,
            968
        ],
        [
            948,
            953
        ],
        [
            936,
            946
        ],
        [
            927,
            929
        ],
        [
            900,
            920
        ],
        [
            887,
            897
        ],
        [
            868,
            885
        ],
        [
            866,
            866
        ],
        [
            837,
            865
        ],
        [
            818,
            834
        ],
        [
            790,
            816
        ],
        [
            787,
            789
        ],
        [
            773,
            785
        ],
        [
            745,
            762
        ],
        [
            742,
            747
        ],
        [
            735,
            737
        ],
        [
            717,
            733
        ],
        [
            702,
            710
        ],
        [
            695,
            695
        ],
        [
            694,
            694
        ],
        [
            685,
            692
        ],
        [
            672,
            684
        ],
        [
            650,
            657
        ],
        [
            644,
            670
        ],
        [
            643,
            643
        ],
        [
            636,
            639
        ],
        [
            608,
            629
        ],
        [
            604,
            606
        ],
        [
            591,
            601
        ],
        [
            588,
            588
        ],
        [
            587,
            587
        ],
        [
            578,
            585
        ]
    ],
    "blocks": [
        "  always @(posedge clk)\n    if (rst) begin\n      cal1_cnt_cpt_r        <= #TCQ 'b0;\n      cal1_dlyce_cpt_r      <= #TCQ 1'b0;\n      cal1_dlyinc_cpt_r     <= #TCQ 1'b0;\n      cal1_dq_idel_ce       <= #TCQ 1'b0;\n      cal1_dq_idel_inc      <= #TCQ 1'b0;\n      cal1_prech_req_r      <= #TCQ 1'b0;\n      cal1_state_r          <= #TCQ CAL1_IDLE;\n      cnt_idel_dec_cpt_r    <= #TCQ 6'bxxxxxx;\n      found_first_edge_r    <= #TCQ 1'b0;\n      found_second_edge_r   <= #TCQ 1'b0;\n      right_edge_taps_r     <= #TCQ 6'b000000;\n      first_edge_taps_r     <= #TCQ 6'bxxxxxx;\n      new_cnt_cpt_r         <= #TCQ 1'b0;\n      rdlvl_stg1_done_int       <= #TCQ 1'b0;\n      rdlvl_stg1_err        <= #TCQ 1'b0;\n      second_edge_taps_r    <= #TCQ 6'bxxxxxx;\n      store_sr_req_pulsed_r <= #TCQ 1'b0;\n      store_sr_req_r        <= #TCQ 1'b0;\n      rnk_cnt_r             <= #TCQ 2'b00;\n      rdlvl_rank_done_r     <= #TCQ 1'b0;\n      idel_dec_cnt          <= #TCQ 'd0;\n      rdlvl_last_byte_done_int  <= #TCQ 1'b0;\n      idel_pat_detect_valid_r <= #TCQ 1'b0;\n      mpr_rank_done_r       <= #TCQ 1'b0;\n      mpr_last_byte_done    <= #TCQ 1'b0;\n      idel_adj_inc          <= #TCQ 1'b0;\n      if (OCAL_EN == \"ON\")\n        mpr_rdlvl_done_r      <= #TCQ 1'b0;\n      else\n        mpr_rdlvl_done_r      <= #TCQ 1'b1;\n        mpr_dec_cpt_r           <= #TCQ 1'b0;\n        rdlvl_pi_incdec         <= #TCQ 1'b0;\n    end else begin\n      \n      \n      cal1_prech_req_r    <= #TCQ 1'b0;\n      cal1_dlyce_cpt_r    <= #TCQ 1'b0;\n      cal1_dlyinc_cpt_r   <= #TCQ 1'b0;\n      cal1_dq_idel_ce     <= #TCQ 1'b0;\n      cal1_dq_idel_inc    <= #TCQ 1'b0;\n      new_cnt_cpt_r       <= #TCQ 1'b0;\n      store_sr_req_pulsed_r <= #TCQ 1'b0;\n      store_sr_req_r      <= #TCQ 1'b0;\n\n      case (cal1_state_r)\n\n        CAL1_IDLE: begin\n          rdlvl_rank_done_r    <= #TCQ 1'b0;\n          rdlvl_last_byte_done_int <= #TCQ 1'b0;\n          mpr_rank_done_r      <= #TCQ 1'b0;\n          mpr_last_byte_done   <= #TCQ 1'b0;\n          if (mpr_rdlvl_start && ~mpr_rdlvl_start_r) begin\n            rdlvl_pi_incdec <= #TCQ 1'b0;\n            cal1_state_r  <= #TCQ CAL1_MPR_NEW_DQS_WAIT;\n          end else begin\n            rdlvl_pi_incdec    <= #TCQ 1'b1;\n            if (rdlvl_stg1_start && ~rdlvl_stg1_start_r) begin\n              if (SIM_CAL_OPTION == \"SKIP_CAL\")\n                cal1_state_r  <= #TCQ CAL1_REGL_LOAD;\n              else if (SIM_CAL_OPTION == \"FAST_CAL\")\n                cal1_state_r  <= #TCQ CAL1_NEXT_DQS;\n              else begin\n                new_cnt_cpt_r <= #TCQ 1'b1;\n                cal1_state_r  <= #TCQ CAL1_NEW_DQS_WAIT;\n              end\n            end\n          end\n        end\n\n        CAL1_MPR_NEW_DQS_WAIT: begin\n          cal1_prech_req_r  <= #TCQ 1'b0;\n          if (!cal1_wait_r && mpr_valid_r)\n            cal1_state_r <= #TCQ CAL1_MPR_PAT_DETECT;\n        end\n\n        \n        \n        \n        CAL1_NEW_DQS_WAIT: begin\n          rdlvl_rank_done_r    <= #TCQ 1'b0;\n          rdlvl_last_byte_done_int <= #TCQ 1'b0;\n          mpr_rank_done_r      <= #TCQ 1'b0;\n          mpr_last_byte_done   <= #TCQ 1'b0;\n          cal1_prech_req_r     <= #TCQ 1'b0;\n          if (|pi_counter_read_val) begin \n            mpr_dec_cpt_r      <= #TCQ 1'b1;\n            cal1_state_r       <= #TCQ CAL1_IDEL_DEC_CPT;\n            cnt_idel_dec_cpt_r <= #TCQ pi_counter_read_val;\n            rdlvl_pi_incdec    <= #TCQ 1'b1;  \n          end else if (!cal1_wait_r) begin\n            rdlvl_pi_incdec <= #TCQ 1'b0;\n\n            \n            \n            \n            \n            store_sr_req_r <= #TCQ 1'b1;\n            \n            \n            if (PER_BIT_DESKEW == \"OFF\")\n              cal1_state_r <= #TCQ CAL1_STORE_FIRST_WAIT;\n            else if (PER_BIT_DESKEW == \"ON\")\n              cal1_state_r <= #TCQ CAL1_PB_STORE_FIRST_WAIT;\n          end else\n            rdlvl_pi_incdec    <= #TCQ 1'b1;  \n        end\n        \n        \n        \n\n        \n        CAL1_PB_STORE_FIRST_WAIT:\n          if (!cal1_wait_r)\n            cal1_state_r <= #TCQ CAL1_PB_DETECT_EDGE;\n\n        \n        CAL1_PB_DETECT_EDGE:\n          if (detect_edge_done_r) begin\n            if (found_stable_eye_r) begin\n              \n              \n              \n              \n              cnt_idel_dec_cpt_r <= #TCQ MIN_EYE_SIZE + 1;\n              cal1_state_r       <= #TCQ CAL1_PB_DEC_CPT_LEFT;\n            end else begin\n              \n              \n              if (!tap_limit_cpt_r) begin\n                \n                \n                \n                store_sr_req_r <= #TCQ 1'b1;\n                cal1_state_r    <= #TCQ CAL1_PB_INC_CPT;\n              end else begin\n                \n                \n                \n                \n                \n                cnt_idel_dec_cpt_r <= #TCQ 6'd63;\n                cal1_state_r       <= #TCQ CAL1_PB_DEC_CPT;\n              end\n            end\n          end\n\n        \n        CAL1_PB_INC_CPT: begin\n          cal1_dlyce_cpt_r  <= #TCQ 1'b1;\n          cal1_dlyinc_cpt_r <= #TCQ 1'b1;\n          cal1_state_r      <= #TCQ CAL1_PB_INC_CPT_WAIT;\n        end\n\n        \n        \n        CAL1_PB_INC_CPT_WAIT: begin\n          cal1_dlyce_cpt_r  <= #TCQ 1'b0;\n          cal1_dlyinc_cpt_r <= #TCQ 1'b0;\n          if (!cal1_wait_r) begin\n            cal1_state_r <= #TCQ CAL1_PB_DETECT_EDGE;\n\n          end\n        end\n        \n        \n        \n        CAL1_PB_DEC_CPT_LEFT:\n          if (cnt_idel_dec_cpt_r == 6'b000000)\n            cal1_state_r <= #TCQ CAL1_PB_DEC_CPT_LEFT_WAIT;\n          else begin\n            cal1_dlyce_cpt_r   <= #TCQ 1'b1;\n            cal1_dlyinc_cpt_r  <= #TCQ 1'b0;\n            cnt_idel_dec_cpt_r <= #TCQ cnt_idel_dec_cpt_r - 1;\n          end\n\n        CAL1_PB_DEC_CPT_LEFT_WAIT:\n          if (!cal1_wait_r)\n            cal1_state_r <= #TCQ CAL1_PB_DETECT_EDGE_DQ;\n\n        \n        \n        \n        \n        \n        CAL1_PB_DETECT_EDGE_DQ:\n          if (detect_edge_done_r)\n            if (found_edge_all_r) begin\n              \n              \n              \n              \n              cnt_idel_dec_cpt_r <= #TCQ tap_cnt_cpt_r;\n              cal1_state_r       <= #TCQ CAL1_PB_DEC_CPT;\n            end else\n              if (!idel_tap_limit_dq_pb_r)\n                \n                \n                cal1_state_r <= #TCQ CAL1_PB_INC_DQ;\n              else begin\n                \n                \n                cnt_idel_dec_cpt_r <= #TCQ tap_cnt_cpt_r;\n                cal1_state_r <= #TCQ CAL1_PB_DEC_CPT;\n              end\n\n        CAL1_PB_INC_DQ: begin\n          \n          cal1_dlyce_dq_r  <= #TCQ ~pb_found_edge_last_r;\n          cal1_dlyinc_dq_r <= #TCQ 1'b1;\n          cal1_state_r     <= #TCQ CAL1_PB_INC_DQ_WAIT;\n        end\n\n        CAL1_PB_INC_DQ_WAIT:\n          if (!cal1_wait_r)\n            cal1_state_r <= #TCQ CAL1_PB_DETECT_EDGE_DQ;\n\n        \n        CAL1_PB_DEC_CPT:\n          if (cnt_idel_dec_cpt_r == 6'b000000)\n            cal1_state_r <= #TCQ CAL1_PB_DEC_CPT_WAIT;\n          else begin\n            cal1_dlyce_cpt_r   <= #TCQ 1'b1;\n            cal1_dlyinc_cpt_r  <= #TCQ 1'b0;\n            cnt_idel_dec_cpt_r <= #TCQ cnt_idel_dec_cpt_r - 1;\n          end\n\n        \n        \n        CAL1_PB_DEC_CPT_WAIT:\n          if (!cal1_wait_r) begin\n            store_sr_req_r <= #TCQ 1'b1;\n            cal1_state_r    <= #TCQ CAL1_STORE_FIRST_WAIT;\n          end\n\n        \n        \n        \n        \n        \n        \n        \n        \n        CAL1_STORE_FIRST_WAIT: begin\n          mpr_dec_cpt_r  <= #TCQ 1'b0;\n          if (!cal1_wait_r)\n            cal1_state_r <= #TCQ CAL1_PAT_DETECT;\n        end\n\n        CAL1_VALID_WAIT: begin\n          if (!cal1_wait_r)\n            cal1_state_r <= #TCQ CAL1_MPR_PAT_DETECT;\n        end\n\n        CAL1_MPR_PAT_DETECT: begin\n          rdlvl_pi_incdec <= #TCQ 1'b0;\n          \n          \n          if (idel_pat_detect_valid_r == 1'b0) begin\n            cal1_state_r  <= #TCQ CAL1_VALID_WAIT;\n            idel_pat_detect_valid_r <= #TCQ 1'b1;\n          end else if (idel_pat_detect_valid_r && idel_mpr_pat_detect_r) begin\n            cal1_state_r  <= #TCQ CAL1_DETECT_EDGE;\n            idel_dec_cnt  <= #TCQ 'd0;\n          end else if (!idelay_tap_limit_r)\n            cal1_state_r  <= #TCQ CAL1_DQ_IDEL_TAP_INC;\n          else\n            cal1_state_r  <= #TCQ CAL1_RDLVL_ERR;\n        end\n\n        CAL1_PAT_DETECT: begin\n          \n          \n          \n          \n          \n          rdlvl_pi_incdec <= #TCQ 1'b0;\n          if (detect_edge_done_r) begin\n            if (idel_pat_data_match) begin\n              case (idelay_adj)\n                2'b01: begin\n                  cal1_state_r <= CAL1_DQ_IDEL_TAP_INC;\n                  idel_dec_cnt <= #TCQ 5'd0;\n                  idel_adj_inc <= #TCQ 1'b1;\n                end\n                2'b10: begin   \n                  cal1_state_r  <= #TCQ  CAL1_DQ_IDEL_TAP_DEC ;\n                  idel_dec_cnt  <= #TCQ 5'd1;\n                  idel_adj_inc  <= #TCQ 1'b0;\n                end\n                default: begin\n                  cal1_state_r  <= #TCQ CAL1_DETECT_EDGE;\n                  idel_dec_cnt  <= #TCQ 5'd0;\n                  idel_adj_inc  <= #TCQ 1'b0;\n                end\n              endcase\n            end else if (!idelay_tap_limit_r) begin\n              cal1_state_r  <= #TCQ CAL1_DQ_IDEL_TAP_INC;\n            end else begin\n              cal1_state_r  <= #TCQ CAL1_RDLVL_ERR;\n            end\n          end\n        end\n\n        \n        \n        CAL1_DQ_IDEL_TAP_INC: begin\n          cal1_dq_idel_ce         <= #TCQ 1'b1;\n          cal1_dq_idel_inc        <= #TCQ 1'b1;\n          cal1_state_r            <= #TCQ CAL1_DQ_IDEL_TAP_INC_WAIT;\n          idel_pat_detect_valid_r <= #TCQ 1'b0;\n        end\n\n        CAL1_DQ_IDEL_TAP_INC_WAIT: begin\n          cal1_dq_idel_ce     <= #TCQ 1'b0;\n          cal1_dq_idel_inc    <= #TCQ 1'b0;\n          if (!cal1_wait_r) begin\n            idel_adj_inc        <= #TCQ 1'b0;\n            if (idel_adj_inc)\n              cal1_state_r <= #TCQ CAL1_DETECT_EDGE;\n            else  if (~mpr_rdlvl_done_r & (DRAM_TYPE == \"DDR3\"))\n              cal1_state_r <= #TCQ CAL1_MPR_PAT_DETECT;\n            else\n              cal1_state_r <= #TCQ CAL1_PAT_DETECT;\n          end\n        end\n\n        \n        CAL1_DQ_IDEL_TAP_DEC: begin\n          cal1_dq_idel_inc    <= #TCQ 1'b0;\n          cal1_state_r        <= #TCQ CAL1_DQ_IDEL_TAP_DEC_WAIT;\n          if (idel_dec_cnt >= 'd0)\n            cal1_dq_idel_ce     <= #TCQ 1'b1;\n          else\n            cal1_dq_idel_ce     <= #TCQ 1'b0;\n          if (idel_dec_cnt > 'd0)\n            idel_dec_cnt <= #TCQ idel_dec_cnt - 1;\n          else\n            idel_dec_cnt <= #TCQ idel_dec_cnt;\n        end\n\n        CAL1_DQ_IDEL_TAP_DEC_WAIT: begin\n          cal1_dq_idel_ce     <= #TCQ 1'b0;\n          cal1_dq_idel_inc    <= #TCQ 1'b0;\n          if (!cal1_wait_r) begin\n            if ((idel_dec_cnt > 'd0) || (pi_rdval_cnt > 'd0))\n              cal1_state_r <= #TCQ CAL1_DQ_IDEL_TAP_DEC;\n            else if (mpr_dec_cpt_r)\n              cal1_state_r <= #TCQ CAL1_STORE_FIRST_WAIT;\n            else\n              cal1_state_r <= #TCQ CAL1_DETECT_EDGE;\n          end\n        end\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        CAL1_DETECT_EDGE: begin\n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n          \n\n          \n          \n          \n          \n          \n          idel_pat_detect_valid_r <= #TCQ 1'b0;\n          if (!store_sr_req_pulsed_r) begin\n            \n            store_sr_req_r        <= #TCQ 1'b1;\n            store_sr_req_pulsed_r <= #TCQ 1'b1;\n          end else begin\n            store_sr_req_r        <= #TCQ 1'b0;\n            store_sr_req_pulsed_r <= #TCQ 1'b1;\n          end\n\n          \n          \n          \n          if (detect_edge_done_r) begin\n            if (tap_limit_cpt_r)\n              \n              \n              \n              \n              \n              \n              \n              \n              cal1_state_r <= #TCQ CAL1_CALC_IDEL;\n            else if (found_edge_r) begin\n              \n              \n              \n              found_first_edge_r <= #TCQ 1'b1;\n\n              \n              \n              if (!found_first_edge_r && found_stable_eye_last_r) begin\n                if (tap_cnt_cpt_r == 'd0)\n                  right_edge_taps_r <= #TCQ 'd0;\n                else\n                  right_edge_taps_r <= #TCQ tap_cnt_cpt_r;\n              end\n\n              \n              \n              \n              \n              \n              \n              \n              if (found_first_edge_r && found_stable_eye_last_r) begin\n                found_second_edge_r <= #TCQ 1'b1;\n                second_edge_taps_r <= #TCQ tap_cnt_cpt_r - 1;\n                cal1_state_r <= #TCQ CAL1_CALC_IDEL;\n              end else begin\n                \n                \n                \n                \n                first_edge_taps_r <= #TCQ tap_cnt_cpt_r;\n                \n                cal1_state_r <= #TCQ CAL1_RD_STOP_FOR_PI_INC;\n              end\n            end else\n              \n              \n              \n              cal1_state_r <= #TCQ CAL1_RD_STOP_FOR_PI_INC;\n          end\n        end\n\n        \n        \n        CAL1_RD_STOP_FOR_PI_INC: begin\n          rdlvl_pi_incdec    <= #TCQ 1'b1;\n          if (!cal1_wait_r)\n            cal1_state_r    <= #TCQ CAL1_IDEL_INC_CPT;\n        end\n\n        \n        CAL1_IDEL_INC_CPT: begin\n          cal1_state_r        <= #TCQ CAL1_IDEL_INC_CPT_WAIT;\n          if (~tap_limit_cpt_r) begin\n            cal1_dlyce_cpt_r    <= #TCQ 1'b1;\n            cal1_dlyinc_cpt_r   <= #TCQ 1'b1;\n          end else begin\n            cal1_dlyce_cpt_r    <= #TCQ 1'b0;\n            cal1_dlyinc_cpt_r   <= #TCQ 1'b0;\n          end\n        end\n\n        \n        CAL1_IDEL_INC_CPT_WAIT: begin\n          cal1_dlyce_cpt_r    <= #TCQ 1'b0;\n          cal1_dlyinc_cpt_r   <= #TCQ 1'b0;\n          if (!cal1_wait_r) begin\n            cal1_state_r <= #TCQ CAL1_DETECT_EDGE;\n            rdlvl_pi_incdec <= #TCQ 1'b0;    \n          end\n        end\n\n        \n        \n        \n        \n        \n        CAL1_CALC_IDEL: begin\n         \n          if (found_second_edge_r)\n            cnt_idel_dec_cpt_r\n              <=  #TCQ ((second_edge_taps_r -\n                         first_edge_taps_r)>>1) + 1;\n          else if (right_edge_taps_r > 6'd0)\n            \n            \n            \n            cnt_idel_dec_cpt_r\n              <=  #TCQ (tap_cnt_cpt_r - (right_edge_taps_r>>1));\n          else if (found_first_edge_r)\n            \n            cnt_idel_dec_cpt_r\n              <=  #TCQ ((tap_cnt_cpt_r - first_edge_taps_r)>>1);\n          else\n            cnt_idel_dec_cpt_r\n              <=  #TCQ (tap_cnt_cpt_r>>1);\n          \n          \n          \n          cal1_state_r <= #TCQ CAL1_CENTER_WAIT;\n          rdlvl_pi_incdec <= #TCQ 1'b1;\n        end\n\n        CAL1_CENTER_WAIT: begin\n          if(!cal1_wait_r)\n            cal1_state_r <= #TCQ CAL1_IDEL_DEC_CPT;\n        end\n        \n        \n        \n        \n        \n        CAL1_IDEL_DEC_CPT: begin\n          cal1_dlyce_cpt_r  <= #TCQ 1'b1;\n          cal1_dlyinc_cpt_r <= #TCQ 1'b0;\n          \n          \n          cnt_idel_dec_cpt_r <= #TCQ cnt_idel_dec_cpt_r - 1;\n          if (cnt_idel_dec_cpt_r == 6'b000001) begin\n            if (mpr_dec_cpt_r) begin\n              if (|idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing]) begin\n                idel_dec_cnt  <= #TCQ idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing];\n                cal1_state_r  <= #TCQ CAL1_DQ_IDEL_TAP_DEC;\n              end else\n                cal1_state_r  <= #TCQ CAL1_STORE_FIRST_WAIT;\n            end else\n              cal1_state_r <= #TCQ CAL1_NEXT_DQS;\n          end else\n            cal1_state_r <= #TCQ CAL1_IDEL_DEC_CPT_WAIT;\n        end\n\n        CAL1_IDEL_DEC_CPT_WAIT: begin\n          cal1_dlyce_cpt_r  <= #TCQ 1'b0;\n          cal1_dlyinc_cpt_r <= #TCQ 1'b0;\n          if (!cal1_wait_r)\n            cal1_state_r <= #TCQ CAL1_IDEL_DEC_CPT;\n        end\n\n        \n        \n        CAL1_NEXT_DQS: begin\n          \n            cal1_prech_req_r  <= #TCQ 1'b1;\n          \n          \n          cal1_dlyce_cpt_r  <= #TCQ 1'b0;\n          cal1_dlyinc_cpt_r <= #TCQ 1'b0;\n          \n          found_first_edge_r  <= #TCQ 1'b0;\n          found_second_edge_r <= #TCQ 1'b0;\n          first_edge_taps_r <= #TCQ 'd0;\n          second_edge_taps_r <= #TCQ 'd0;\n          right_edge_taps_r    <= #TCQ 'd0;\n          if ((SIM_CAL_OPTION == \"FAST_CAL\") ||\n              (cal1_cnt_cpt_r >= DQS_WIDTH-1)) begin\n            if (mpr_rdlvl_done_r) begin\n              rdlvl_last_byte_done_int <= #TCQ 1'b1;\n              mpr_last_byte_done   <= #TCQ 1'b0;\n            end else begin\n              rdlvl_last_byte_done_int <= #TCQ 1'b0;\n              mpr_last_byte_done   <= #TCQ 1'b1;\n            end\n          end\n\n          \n          \n          if (prech_done) begin \n            if (SIM_CAL_OPTION == \"FAST_CAL\") begin\n              \n              rdlvl_last_byte_done_int <= #TCQ 1'b0;\n              mpr_last_byte_done   <= #TCQ 1'b0;\n              cal1_state_r <= #TCQ CAL1_DONE; \n            end else if (cal1_cnt_cpt_r >= DQS_WIDTH-1) begin\n              if (~mpr_rdlvl_done_r) begin\n                mpr_rank_done_r <= #TCQ 1'b1;\n                \n                  \n                cal1_state_r <= #TCQ CAL1_DONE;\n                cal1_cnt_cpt_r <= #TCQ 'b0;\n                \n                  \n                  \n                  \n                  \n                  \n                \n              end else begin\n                \n                rdlvl_rank_done_r <= #TCQ 1'b1;\n                if (rnk_cnt_r == RANKS-1) begin\n                  \n                  cal1_state_r <= #TCQ CAL1_REGL_LOAD;\n                end else begin\n                  \n                  rnk_cnt_r      <= #TCQ rnk_cnt_r + 1;\n                  new_cnt_cpt_r  <= #TCQ 1'b1;\n                  cal1_cnt_cpt_r <= #TCQ 'b0;\n                  cal1_state_r   <= #TCQ CAL1_IDLE;\n                end\n              end\n            end else begin\n              \n              new_cnt_cpt_r  <= #TCQ 1'b1;\n              cal1_cnt_cpt_r <= #TCQ cal1_cnt_cpt_r + 1;\n              cal1_state_r   <= #TCQ CAL1_NEW_DQS_PREWAIT;\n            end\n          end\n        end\n\n        CAL1_NEW_DQS_PREWAIT: begin\n          if (!cal1_wait_r) begin\n            rdlvl_pi_incdec <= #TCQ 1'b0;\n            if (~mpr_rdlvl_done_r & (DRAM_TYPE == \"DDR3\"))\n                cal1_state_r  <= #TCQ CAL1_MPR_NEW_DQS_WAIT;\n            else\n              cal1_state_r   <= #TCQ CAL1_NEW_DQS_WAIT;\n          end\n        end\n\n        \n        CAL1_REGL_LOAD: begin\n          rdlvl_rank_done_r <= #TCQ 1'b0;\n          mpr_rank_done_r   <= #TCQ 1'b0;\n          cal1_prech_req_r  <= #TCQ 1'b0;\n          cal1_cnt_cpt_r    <= #TCQ 'b0;\n          rnk_cnt_r         <= #TCQ 2'b00;\n          if ((regl_rank_cnt == RANKS-1) &&\n              ((regl_dqs_cnt == DQS_WIDTH-1) && (done_cnt == 4'd1))) begin\n            cal1_state_r <= #TCQ CAL1_DONE;\n            rdlvl_last_byte_done_int <= #TCQ 1'b0;\n            mpr_last_byte_done   <= #TCQ 1'b0;\n          end else\n            cal1_state_r <= #TCQ CAL1_REGL_LOAD;\n        end\n\n        CAL1_RDLVL_ERR: begin\n          rdlvl_stg1_err <= #TCQ 1'b1;\n        end\n\n        \n        \n        CAL1_DONE: begin\n          mpr_rdlvl_done_r  <= #TCQ 1'b1;\n          cal1_prech_req_r  <= #TCQ 1'b0;\n          if (~mpr_rdlvl_done_r && (OCAL_EN==\"ON\") && (DRAM_TYPE == \"DDR3\")) begin\n            rdlvl_stg1_done_int   <= #TCQ 1'b0;\n            cal1_state_r <= #TCQ CAL1_IDLE;\n          end else\n            rdlvl_stg1_done_int   <= #TCQ 1'b1;\n        end\n\n      endcase\n    end\n\n\n\n\n\nendmodule",
        "  always @(posedge clk) begin\n    cal1_state_r1 <= #TCQ cal1_state_r;\n    cal1_state_r2 <= #TCQ cal1_state_r1;\n    cal1_state_r3 <= #TCQ cal1_state_r2;\n  end",
        "  always @(posedge clk)\n    if (rst) begin\n      idel_tap_cnt_dq_pb_r   <= #TCQ 'b0;\n      idel_tap_limit_dq_pb_r <= #TCQ 1'b0;\n    end else\n      if (new_cnt_cpt_r) begin\n        idel_tap_cnt_dq_pb_r   <= #TCQ 'b0;\n        idel_tap_limit_dq_pb_r <= #TCQ 1'b0;\n      end else if (|cal1_dlyce_dq_r) begin\n        if (cal1_dlyinc_dq_r)\n          idel_tap_cnt_dq_pb_r <= #TCQ idel_tap_cnt_dq_pb_r + 1;\n        else\n          idel_tap_cnt_dq_pb_r <= #TCQ idel_tap_cnt_dq_pb_r - 1;\n\n        if (idel_tap_cnt_dq_pb_r == 31)\n          idel_tap_limit_dq_pb_r <= #TCQ 1'b1;\n        else\n          idel_tap_limit_dq_pb_r <= #TCQ 1'b0;\n      end",
        "   always @(posedge clk) begin\n     if (rst) begin\n       for (a = 0; a < RANKS; a = a + 1) begin: rst_rdlvl_dqs_tap_count_loop\n         for (b = 0; b < DQS_WIDTH; b = b + 1)\n           rdlvl_dqs_tap_cnt_r[a][b] <= #TCQ 'b0;\n       end\n     end else if ((SIM_CAL_OPTION == \"FAST_CAL\") & (cal1_state_r1 == CAL1_NEXT_DQS)) begin\n       for (p = 0; p < RANKS; p = p +1) begin: rdlvl_dqs_tap_rank_cnt\n         for(q = 0; q < DQS_WIDTH; q = q +1) begin: rdlvl_dqs_tap_cnt\n           rdlvl_dqs_tap_cnt_r[p][q] <= #TCQ tap_cnt_cpt_r;\n         end\n       end\n     end else if (SIM_CAL_OPTION == \"SKIP_CAL\") begin\n       for (j = 0; j < RANKS; j = j +1) begin: rdlvl_dqs_tap_rnk_cnt\n         for(i = 0; i < DQS_WIDTH; i = i +1) begin: rdlvl_dqs_cnt\n           rdlvl_dqs_tap_cnt_r[j][i] <= #TCQ 6'd31;\n         end\n       end\n     end else if (cal1_state_r1 == CAL1_NEXT_DQS) begin\n       rdlvl_dqs_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing_r] <= #TCQ tap_cnt_cpt_r;\n     end\n   end",
        "   assign cal1_cnt_cpt_timing = {2'b00, cal1_cnt_cpt_r};",
        "   always @(posedge clk)\n     cal1_cnt_cpt_timing_r <= #TCQ cal1_cnt_cpt_r;\n",
        "  always @(posedge clk)\n    if (rst || new_cnt_cpt_r ||\n       (cal1_state_r1 == CAL1_DQ_IDEL_TAP_INC) ||\n       (mpr_rdlvl_done_r1 && ~mpr_rdlvl_done_r2))\n      tap_limit_cpt_r <= #TCQ 1'b0;\n    else if (tap_cnt_cpt_r == 6'd63)\n      tap_limit_cpt_r <= #TCQ 1'b1;\n",
        "  always @(posedge clk)\n    if (rst || new_cnt_cpt_r ||\n        (mpr_rdlvl_done_r1 && ~mpr_rdlvl_done_r2))\n      tap_cnt_cpt_r   <= #TCQ 'b0;\n    else if (cal1_dlyce_cpt_r) begin\n      if (cal1_dlyinc_cpt_r)\n        tap_cnt_cpt_r <= #TCQ tap_cnt_cpt_r + 1;\n      else if (tap_cnt_cpt_r != 'd0)\n        tap_cnt_cpt_r <= #TCQ tap_cnt_cpt_r - 1;\n    end\n",
        "  always @(posedge clk)\n    if (rst || new_cnt_cpt_r)\n      idelay_tap_limit_r <= #TCQ 1'b0;\n    else if (idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_r] == 'd31)\n      idelay_tap_limit_r <= #TCQ 1'b1;\n",
        "  always @(posedge clk)\n    if (rst || (SIM_CAL_OPTION == \"SKIP_CAL\")) begin \n      for (s = 0; s < RANKS; s = s + 1) begin\n        for (t = 0; t < DQS_WIDTH; t = t + 1) begin\n          idelay_tap_cnt_r[s][t] <= #TCQ idelaye2_init_val;\n        end\n      end\n    end else if (SIM_CAL_OPTION == \"FAST_CAL\") begin\n      for (u = 0; u < RANKS; u = u + 1) begin\n        for (w = 0; w < DQS_WIDTH; w = w + 1) begin\n          if (cal1_dq_idel_ce) begin\n            if (cal1_dq_idel_inc)\n              idelay_tap_cnt_r[u][w] <= #TCQ idelay_tap_cnt_r[u][w] + 1;\n            else\n              idelay_tap_cnt_r[u][w] <= #TCQ idelay_tap_cnt_r[u][w] - 1;\n          end\n        end\n      end\n    end else if ((rnk_cnt_r == RANKS-1) && (RANKS == 2) &&\n                    rdlvl_rank_done_r && (cal1_state_r == CAL1_IDLE)) begin\n      for (f = 0; f < DQS_WIDTH; f = f + 1) begin\n        idelay_tap_cnt_r[rnk_cnt_r][f] <= #TCQ idelay_tap_cnt_r[(rnk_cnt_r-1)][f];\n      end\n    end else if (cal1_dq_idel_ce) begin\n      if (cal1_dq_idel_inc)\n        idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing] <= #TCQ idelay_tap_cnt_slice_r + 5'h1;\n      else\n        idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing] <= #TCQ idelay_tap_cnt_slice_r - 5'h1;\n    end else if (idelay_ld)\n      idelay_tap_cnt_r[0][wrcal_cnt] <= #TCQ 5'b00000;\n",
        "  always @(posedge clk)\n    if (rst)\n      idelay_tap_cnt_slice_r <= 5'h0;\n    else\n      idelay_tap_cnt_slice_r <= idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing];\n",
        "  always @(posedge clk)\n    if (pb_detect_edge_setup)\n      found_stable_eye_last_r <= #TCQ 1'b0;\n    else if (detect_edge_done_r)\n      found_stable_eye_last_r <= #TCQ found_stable_eye_r;",
        "  always @(posedge clk) begin\n    detect_edge_done_r <= #TCQ &pb_detect_edge_done_r;\n    found_edge_r       <= #TCQ |pb_found_edge_r;\n    found_edge_all_r   <= #TCQ &pb_found_edge_r;\n    found_stable_eye_r <= #TCQ &pb_found_stable_eye_r;\n  end",
        "  endgenerate",
        "      always @(posedge clk) begin\n        if (pb_detect_edge_setup) begin\n          \n          \n          pb_cnt_eye_size_r[z]     <= #TCQ 5'd0;\n          pb_detect_edge_done_r[z] <= #TCQ 1'b0;\n          pb_found_stable_eye_r[z] <= #TCQ 1'b0;\n          pb_last_tap_jitter_r[z]  <= #TCQ 1'b0;\n          pb_found_edge_last_r[z]  <= #TCQ 1'b0;\n          pb_found_edge_r[z]       <= #TCQ 1'b0;\n          pb_found_first_edge_r[z] <= #TCQ 1'b0;\n        end else if (pb_detect_edge) begin\n          \n          \n          \n          pb_found_edge_last_r[z] <= #TCQ pb_found_edge_r[z];\n\n          if (!pb_detect_edge_done_r[z]) begin\n            if (samp_cnt_done_r) begin\n              \n              \n              \n              \n              \n              \n              pb_last_tap_jitter_r[z]  <= #TCQ 1'b0;\n              pb_detect_edge_done_r[z] <= #TCQ 1'b1;\n              if (!pb_found_edge_r[z] && !pb_last_tap_jitter_r[z]) begin\n                \n                \n                \n                if (pb_cnt_eye_size_r[z] != MIN_EYE_SIZE-1)\n                  pb_cnt_eye_size_r[z] <= #TCQ pb_cnt_eye_size_r[z] + 1;\n                else \n                  \n                  pb_found_stable_eye_r[z] <= #TCQ 1'b1;\n              end else begin\n                \n                \n                \n                \n                \n                pb_cnt_eye_size_r[z]     <= #TCQ 5'd0;\n                pb_found_stable_eye_r[z] <= #TCQ 1'b0;\n                pb_found_edge_r[z]       <= #TCQ 1'b1;\n                pb_detect_edge_done_r[z] <= #TCQ 1'b1;\n              end\n            end else if (prev_sr_diff_r[z]) begin\n              \n              \n              \n              pb_cnt_eye_size_r[z]     <= #TCQ 5'd0;\n              pb_found_stable_eye_r[z] <= #TCQ 1'b0;\n              pb_last_tap_jitter_r[z]  <= #TCQ 1'b1;\n              pb_found_edge_r[z]       <= #TCQ 1'b1;\n              pb_found_first_edge_r[z] <= #TCQ 1'b1;\n              pb_detect_edge_done_r[z] <= #TCQ 1'b1;\n            end else if (old_sr_diff_r[z] || pb_last_tap_jitter_r[z]) begin\n              \n              \n              \n              \n              \n              \n              \n              \n              pb_cnt_eye_size_r[z]     <= #TCQ 5'd0;\n              pb_found_stable_eye_r[z] <= #TCQ 1'b0;\n              pb_found_edge_r[z]       <= #TCQ 1'b1;\n              pb_found_first_edge_r[z] <= #TCQ 1'b1;\n            end\n          end\n        end else begin\n          \n          pb_found_edge_r[z]       <= #TCQ 1'b0;\n          pb_detect_edge_done_r[z] <= #TCQ 1'b0;\n        end\n      end",
        "  generate\n    for (z = 0; z < DRAM_WIDTH; z = z + 1) begin: gen_track_left_edge",
        "  assign pb_detect_edge\n    = (cal1_state_r == CAL1_PAT_DETECT) ||\n      (cal1_state_r == CAL1_DETECT_EDGE) ||\n      (cal1_state_r == CAL1_PB_DETECT_EDGE) ||\n      (cal1_state_r == CAL1_PB_DETECT_EDGE_DQ);\n",
        "  assign pb_detect_edge_setup\n    = (cal1_state_r == CAL1_STORE_FIRST_WAIT) ||\n      (cal1_state_r == CAL1_PB_STORE_FIRST_WAIT) ||\n      (cal1_state_r == CAL1_PB_DEC_CPT_LEFT_WAIT);\n",
        "  always @(posedge clk)\n    if (rst)\n      samp_cnt_done_r <= #TCQ 1'b0;\n    else begin\n      if (!samp_edge_cnt0_en_r)\n        samp_cnt_done_r <= #TCQ 'b0;\n      else if ((SIM_CAL_OPTION == \"FAST_CAL\") ||\n               (SIM_CAL_OPTION == \"FAST_WIN_DETECT\")) begin\n        if (samp_edge_cnt0_r == SR_VALID_DELAY-1)\n          \n          \n          samp_cnt_done_r <= #TCQ 1'b1;\n      end else begin\n        if (samp_edge_cnt1_r == DETECT_EDGE_SAMPLE_CNT1)\n          samp_cnt_done_r <= #TCQ 1'b1;\n      end\n    end\n",
        "  always @(posedge clk)\n    if (rst)\n      samp_edge_cnt1_r <= #TCQ 'b0;\n    else\n      if (!samp_edge_cnt0_en_r)\n        samp_edge_cnt1_r <= #TCQ 'b0;\n      else if (samp_edge_cnt1_en_r)\n        samp_edge_cnt1_r <= #TCQ samp_edge_cnt1_r + 1;\n",
        "  always @(posedge clk)\n    if (rst)\n      samp_edge_cnt1_en_r <= #TCQ 1'b0;\n    else begin\n      \n      if ((samp_edge_cnt0_r == DETECT_EDGE_SAMPLE_CNT0) &&\n          (sr_valid_r2 || mpr_valid_r2))\n        samp_edge_cnt1_en_r <= #TCQ 1'b1;\n      else\n        samp_edge_cnt1_en_r <= #TCQ 1'b0;\n    end\n",
        "  always @(posedge clk)\n    if (rst)\n      samp_edge_cnt0_r <= #TCQ 'b0;\n    else begin\n      if (!samp_edge_cnt0_en_r)\n        \n        samp_edge_cnt0_r <= #TCQ 'b0;\n      else if (sr_valid_r2 || mpr_valid_r2)\n        \n        samp_edge_cnt0_r <= #TCQ samp_edge_cnt0_r + 1;\n    end",
        "  always @(posedge clk)\n    samp_edge_cnt0_en_r <= #TCQ\n                          (cal1_state_r == CAL1_PAT_DETECT) ||\n                          (cal1_state_r == CAL1_DETECT_EDGE) ||\n                          (cal1_state_r == CAL1_PB_DETECT_EDGE) ||\n                          (cal1_state_r == CAL1_PB_DETECT_EDGE_DQ);\n",
        "        always @(posedge clk) begin\n          if ((sr_valid_r || mpr_valid_r1) && (sr_rise0_r[z] == old_sr_rise0_r[z]))\n            old_sr_match_rise0_r[z] <= #TCQ 1'b1;\n          else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n            old_sr_match_rise0_r[z] <= #TCQ old_sr_match_rise0_r[z];\n          else\n            old_sr_match_rise0_r[z] <= #TCQ 1'b0;\n\n          if ((sr_valid_r || mpr_valid_r1) && (sr_fall0_r[z] == old_sr_fall0_r[z]))\n            old_sr_match_fall0_r[z] <= #TCQ 1'b1;\n          else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n            old_sr_match_fall0_r[z] <= #TCQ old_sr_match_fall0_r[z];\n          else\n            old_sr_match_fall0_r[z] <= #TCQ 1'b0;\n\n          if ((sr_valid_r || mpr_valid_r1) && (sr_rise1_r[z] == old_sr_rise1_r[z]))\n            old_sr_match_rise1_r[z] <= #TCQ 1'b1;\n          else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n            old_sr_match_rise1_r[z] <= #TCQ old_sr_match_rise1_r[z];\n          else\n            old_sr_match_rise1_r[z] <= #TCQ 1'b0;\n\n          if ((sr_valid_r || mpr_valid_r1) && (sr_fall1_r[z] == old_sr_fall1_r[z]))\n            old_sr_match_fall1_r[z] <= #TCQ 1'b1;\n          else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n            old_sr_match_fall1_r[z] <= #TCQ old_sr_match_fall1_r[z];\n          else\n            old_sr_match_fall1_r[z] <= #TCQ 1'b0;\n\n          if ((sr_valid_r || mpr_valid_r1) && (sr_rise0_r[z] == prev_sr_rise0_r[z]))\n            prev_sr_match_rise0_r[z] <= #TCQ 1'b1;\n          else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n            prev_sr_match_rise0_r[z] <= #TCQ prev_sr_match_rise0_r[z];\n          else\n            prev_sr_match_rise0_r[z] <= #TCQ 1'b0;\n\n          if ((sr_valid_r || mpr_valid_r1) && (sr_fall0_r[z] == prev_sr_fall0_r[z]))\n            prev_sr_match_fall0_r[z] <= #TCQ 1'b1;\n          else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n            prev_sr_match_fall0_r[z] <= #TCQ prev_sr_match_fall0_r[z];\n          else\n            prev_sr_match_fall0_r[z] <= #TCQ 1'b0;\n\n          if ((sr_valid_r || mpr_valid_r1) && (sr_rise1_r[z] == prev_sr_rise1_r[z]))\n            prev_sr_match_rise1_r[z] <= #TCQ 1'b1;\n          else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n            prev_sr_match_rise1_r[z] <= #TCQ prev_sr_match_rise1_r[z];\n          else\n            prev_sr_match_rise1_r[z] <= #TCQ 1'b0;\n\n          if ((sr_valid_r || mpr_valid_r1) && (sr_fall1_r[z] == prev_sr_fall1_r[z]))\n            prev_sr_match_fall1_r[z] <= #TCQ 1'b1;\n          else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n            prev_sr_match_fall1_r[z] <= #TCQ prev_sr_match_fall1_r[z];\n          else\n            prev_sr_match_fall1_r[z] <= #TCQ 1'b0;\n\n          old_sr_match_cyc2_r[z] <= #TCQ\n                                    old_sr_match_rise0_r[z] &\n                                    old_sr_match_fall0_r[z] &\n                                    old_sr_match_rise1_r[z] &\n                                    old_sr_match_fall1_r[z];\n          prev_sr_match_cyc2_r[z] <= #TCQ\n                                     prev_sr_match_rise0_r[z] &\n                                     prev_sr_match_fall0_r[z] &\n                                     prev_sr_match_rise1_r[z] &\n                                     prev_sr_match_fall1_r[z];\n\n          \n          \n          \n          if (sr_valid_r2 || mpr_valid_r2) begin\n            old_sr_diff_r[z]  <= #TCQ ~old_sr_match_cyc2_r[z];\n            prev_sr_diff_r[z] <= #TCQ ~prev_sr_match_cyc2_r[z];\n          end else begin\n            old_sr_diff_r[z]  <= #TCQ 'b0;\n            prev_sr_diff_r[z] <= #TCQ 'b0;\n          end\n        end\n     end",
        "    end if (nCK_PER_CLK == 2) begin: gen_sr_match_div2",
        "      always @(posedge clk) begin\n        \n        \n        \n        \n        \n        \n        if ((pat_data_match_r || mpr_valid_r1) && (sr_rise0_r[z] == old_sr_rise0_r[z]))\n          old_sr_match_rise0_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          old_sr_match_rise0_r[z] <= #TCQ old_sr_match_rise0_r[z];\n        else\n          old_sr_match_rise0_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_fall0_r[z] == old_sr_fall0_r[z]))\n          old_sr_match_fall0_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          old_sr_match_fall0_r[z] <= #TCQ old_sr_match_fall0_r[z];\n        else\n          old_sr_match_fall0_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_rise1_r[z] == old_sr_rise1_r[z]))\n          old_sr_match_rise1_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          old_sr_match_rise1_r[z] <= #TCQ old_sr_match_rise1_r[z];\n        else\n          old_sr_match_rise1_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_fall1_r[z] == old_sr_fall1_r[z]))\n          old_sr_match_fall1_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          old_sr_match_fall1_r[z] <= #TCQ old_sr_match_fall1_r[z];\n        else\n          old_sr_match_fall1_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_rise2_r[z] == old_sr_rise2_r[z]))\n          old_sr_match_rise2_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          old_sr_match_rise2_r[z] <= #TCQ old_sr_match_rise2_r[z];\n        else\n          old_sr_match_rise2_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_fall2_r[z] == old_sr_fall2_r[z]))\n          old_sr_match_fall2_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          old_sr_match_fall2_r[z] <= #TCQ old_sr_match_fall2_r[z];\n        else\n          old_sr_match_fall2_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_rise3_r[z] == old_sr_rise3_r[z]))\n          old_sr_match_rise3_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          old_sr_match_rise3_r[z] <= #TCQ old_sr_match_rise3_r[z];\n        else\n          old_sr_match_rise3_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_fall3_r[z] == old_sr_fall3_r[z]))\n          old_sr_match_fall3_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          old_sr_match_fall3_r[z] <= #TCQ old_sr_match_fall3_r[z];\n        else\n          old_sr_match_fall3_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_rise0_r[z] == prev_sr_rise0_r[z]))\n          prev_sr_match_rise0_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          prev_sr_match_rise0_r[z] <= #TCQ prev_sr_match_rise0_r[z];\n        else\n          prev_sr_match_rise0_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_fall0_r[z] == prev_sr_fall0_r[z]))\n          prev_sr_match_fall0_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          prev_sr_match_fall0_r[z] <= #TCQ prev_sr_match_fall0_r[z];\n        else\n          prev_sr_match_fall0_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_rise1_r[z] == prev_sr_rise1_r[z]))\n          prev_sr_match_rise1_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          prev_sr_match_rise1_r[z] <= #TCQ prev_sr_match_rise1_r[z];\n        else\n          prev_sr_match_rise1_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_fall1_r[z] == prev_sr_fall1_r[z]))\n          prev_sr_match_fall1_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          prev_sr_match_fall1_r[z] <= #TCQ prev_sr_match_fall1_r[z];\n        else\n          prev_sr_match_fall1_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_rise2_r[z] == prev_sr_rise2_r[z]))\n          prev_sr_match_rise2_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          prev_sr_match_rise2_r[z] <= #TCQ prev_sr_match_rise2_r[z];\n        else\n          prev_sr_match_rise2_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_fall2_r[z] == prev_sr_fall2_r[z]))\n          prev_sr_match_fall2_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          prev_sr_match_fall2_r[z] <= #TCQ prev_sr_match_fall2_r[z];\n        else\n          prev_sr_match_fall2_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_rise3_r[z] == prev_sr_rise3_r[z]))\n          prev_sr_match_rise3_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          prev_sr_match_rise3_r[z] <= #TCQ prev_sr_match_rise3_r[z];\n        else\n          prev_sr_match_rise3_r[z] <= #TCQ 1'b0;\n\n        if ((pat_data_match_r || mpr_valid_r1) && (sr_fall3_r[z] == prev_sr_fall3_r[z]))\n          prev_sr_match_fall3_r[z] <= #TCQ 1'b1;\n        else if (~mpr_valid_r1 && mpr_rdlvl_start && ~mpr_rdlvl_done_r)\n          prev_sr_match_fall3_r[z] <= #TCQ prev_sr_match_fall3_r[z];\n        else\n          prev_sr_match_fall3_r[z] <= #TCQ 1'b0;\n\n        \n        \n        \n          old_sr_match_cyc2_r[z] <= #TCQ\n                                    old_sr_match_rise0_r[z] &\n                                  old_sr_match_fall0_r[z] &\n                                  old_sr_match_rise1_r[z] &\n                                  old_sr_match_fall1_r[z] &\n                                  old_sr_match_rise2_r[z] &\n                                  old_sr_match_fall2_r[z] &\n                                  old_sr_match_rise3_r[z] &\n                                  old_sr_match_fall3_r[z];\n          prev_sr_match_cyc2_r[z] <= #TCQ\n                                     prev_sr_match_rise0_r[z] &\n                                   prev_sr_match_fall0_r[z] &\n                                   prev_sr_match_rise1_r[z] &\n                                   prev_sr_match_fall1_r[z] &\n                                   prev_sr_match_rise2_r[z] &\n                                   prev_sr_match_fall2_r[z] &\n                                   prev_sr_match_rise3_r[z] &\n                                   prev_sr_match_fall3_r[z];\n\n        \n        \n        \n        if (sr_valid_r2 || mpr_valid_r2) begin\n          old_sr_diff_r[z]  <= #TCQ ~old_sr_match_cyc2_r[z];\n          prev_sr_diff_r[z] <= #TCQ ~prev_sr_match_cyc2_r[z];\n        end else begin\n          old_sr_diff_r[z]  <= #TCQ 'b0;\n          prev_sr_diff_r[z] <= #TCQ 'b0;\n        end\n        end\n      end",
        "  generate\n    if (nCK_PER_CLK == 4) begin: gen_sr_match_div4\n    for (z = 0; z < DRAM_WIDTH; z = z + 1) begin: gen_sr_match\n      always @(posedge clk) begin",
        "  always @(posedge clk) begin\n    sr_valid_r1  <= #TCQ sr_valid_r;\n    sr_valid_r2  <= #TCQ sr_valid_r1;\n    mpr_valid_r1 <= #TCQ mpr_valid_r;\n    mpr_valid_r2 <= #TCQ mpr_valid_r1;\n  end",
        "        always @(posedge clk) begin\n          if (sr_valid_r || mpr_valid_r) begin\n            prev_sr_rise0_r[z] <= #TCQ sr_rise0_r[z];\n            prev_sr_fall0_r[z] <= #TCQ sr_fall0_r[z];\n            prev_sr_rise1_r[z] <= #TCQ sr_rise1_r[z];\n            prev_sr_fall1_r[z] <= #TCQ sr_fall1_r[z];\n          end\n          if ((sr_valid_r || mpr_valid_r) && store_sr_r) begin\n            old_sr_rise0_r[z] <= #TCQ sr_rise0_r[z];\n            old_sr_fall0_r[z] <= #TCQ sr_fall0_r[z];\n            old_sr_rise1_r[z] <= #TCQ sr_rise1_r[z];\n            old_sr_fall1_r[z] <= #TCQ sr_fall1_r[z];\n          end\n        end",
        "    end else if (nCK_PER_CLK == 2) begin: gen_old_sr_div2\n      for (z = 0; z < DRAM_WIDTH; z = z + 1) begin: gen_old_sr",
        "      always @(posedge clk) begin\n        if (sr_valid_r || mpr_valid_r) begin\n          \n          prev_sr_rise0_r[z] <= #TCQ sr_rise0_r[z];\n          prev_sr_fall0_r[z] <= #TCQ sr_fall0_r[z];\n          prev_sr_rise1_r[z] <= #TCQ sr_rise1_r[z];\n          prev_sr_fall1_r[z] <= #TCQ sr_fall1_r[z];\n          prev_sr_rise2_r[z] <= #TCQ sr_rise2_r[z];\n          prev_sr_fall2_r[z] <= #TCQ sr_fall2_r[z];\n          prev_sr_rise3_r[z] <= #TCQ sr_rise3_r[z];\n          prev_sr_fall3_r[z] <= #TCQ sr_fall3_r[z];\n        end\n        if ((sr_valid_r || mpr_valid_r) && store_sr_r) begin\n          old_sr_rise0_r[z] <= #TCQ sr_rise0_r[z];\n          old_sr_fall0_r[z] <= #TCQ sr_fall0_r[z];\n          old_sr_rise1_r[z] <= #TCQ sr_rise1_r[z];\n          old_sr_fall1_r[z] <= #TCQ sr_fall1_r[z];\n          old_sr_rise2_r[z] <= #TCQ sr_rise2_r[z];\n          old_sr_fall2_r[z] <= #TCQ sr_fall2_r[z];\n          old_sr_rise3_r[z] <= #TCQ sr_rise3_r[z];\n          old_sr_fall3_r[z] <= #TCQ sr_fall3_r[z];\n        end\n      end",
        "  generate\n    if (nCK_PER_CLK == 4) begin: gen_old_sr_div4\n    for (z = 0; z < DRAM_WIDTH; z = z + 1) begin: gen_old_sr\n      always @(posedge clk) begin\n        if (sr_valid_r || mpr_valid_r) begin\n          ",
        "  always @(posedge clk)\n    if (rst)\n      store_sr_r      <= #TCQ 1'b0;\n    else begin\n      if (store_sr_req_r)\n        store_sr_r <= #TCQ 1'b1;\n      else if ((sr_valid_r || mpr_valid_r) && store_sr_r)\n        store_sr_r <= #TCQ 1'b0;\n    end",
        "  always @(posedge clk)\n    if (rst || (mpr_rdlvl_done_r && ~rdlvl_stg1_start)) begin\n      cnt_shift_r <= #TCQ 'b1;\n      sr_valid_r  <= #TCQ 1'b0;\n      mpr_valid_r <= #TCQ 1'b0;\n    end else begin\n      if (mux_rd_valid_r && mpr_rdlvl_start && ~mpr_rdlvl_done_r) begin\n        if (cnt_shift_r == 'b0)\n          mpr_valid_r <= #TCQ 1'b1;\n        else begin\n          mpr_valid_r <= #TCQ 1'b0;\n          cnt_shift_r <= #TCQ cnt_shift_r + 1;\n        end\n      end else\n        mpr_valid_r <= #TCQ 1'b0;\n\n      if (mux_rd_valid_r && rdlvl_stg1_start) begin\n        if (cnt_shift_r == RD_SHIFT_LEN-1) begin\n          sr_valid_r <= #TCQ 1'b1;\n          cnt_shift_r <= #TCQ 'b0;\n        end else begin\n          sr_valid_r <= #TCQ 1'b0;\n          cnt_shift_r <= #TCQ cnt_shift_r + 1;\n        end\n      end else\n        \n        \n        \n        \n        sr_valid_r <= #TCQ 1'b0;\n    end",
        "  always @(posedge clk) begin\n    rdlvl_stg1_start_r <= #TCQ rdlvl_stg1_start;\n    mpr_rdlvl_done_r1  <= #TCQ mpr_rdlvl_done_r;\n    mpr_rdlvl_done_r2  <= #TCQ mpr_rdlvl_done_r1;\n    mpr_rdlvl_start_r  <= #TCQ mpr_rdlvl_start;\n  end",
        "      assign pat_data_match_r = pat0_data_match_r | pat1_data_match_r;",
        "      always @(posedge clk) begin\n        pat1_match_rise0_and_r <= #TCQ &pat1_match_rise0_r;\n        pat1_match_fall0_and_r <= #TCQ &pat1_match_fall0_r;\n        pat1_match_rise1_and_r <= #TCQ &pat1_match_rise1_r;\n        pat1_match_fall1_and_r <= #TCQ &pat1_match_fall1_r;\n        pat1_data_match_r <= #TCQ (pat1_match_rise0_and_r &&\n                                   pat1_match_fall0_and_r &&\n                                   pat1_match_rise1_and_r &&\n                                   pat1_match_fall1_and_r);\n      end",
        "      always @(posedge clk) begin\n        pat0_match_rise0_and_r <= #TCQ &pat0_match_rise0_r;\n        pat0_match_fall0_and_r <= #TCQ &pat0_match_fall0_r;\n        pat0_match_rise1_and_r <= #TCQ &pat0_match_rise1_r;\n        pat0_match_fall1_and_r <= #TCQ &pat0_match_fall1_r;\n        pat0_data_match_r <= #TCQ (pat0_match_rise0_and_r &&\n                                   pat0_match_fall0_and_r &&\n                                   pat0_match_rise1_and_r &&\n                                   pat0_match_fall1_and_r);\n      end",
        "      always @(posedge clk)\n        idel_pat_data_match_r <= #TCQ idel_pat_data_match;\n",
        "      always @(posedge clk) begin\n        if (sr_valid_r2)\n          idel_pat_data_match <= #TCQ idel_pat0_data_match_r |\n                                      idel_pat1_data_match_r;\n      end",
        "      always @(posedge clk) begin\n        idel_pat1_match_rise0_and_r <= #TCQ &idel_pat1_match_rise0_r;\n        idel_pat1_match_fall0_and_r <= #TCQ &idel_pat1_match_fall0_r;\n        idel_pat1_match_rise1_and_r <= #TCQ &idel_pat1_match_rise1_r;\n        idel_pat1_match_fall1_and_r <= #TCQ &idel_pat1_match_fall1_r;\n        idel_pat1_data_match_r <= #TCQ (idel_pat1_match_rise0_and_r &&\n                                        idel_pat1_match_fall0_and_r &&\n                                        idel_pat1_match_rise1_and_r &&\n                                        idel_pat1_match_fall1_and_r);\n      end",
        "      always @(posedge clk) begin\n        idel_pat0_match_rise0_and_r <= #TCQ &idel_pat0_match_rise0_r;\n        idel_pat0_match_fall0_and_r <= #TCQ &idel_pat0_match_fall0_r;\n        idel_pat0_match_rise1_and_r <= #TCQ &idel_pat0_match_rise1_r;\n        idel_pat0_match_fall1_and_r <= #TCQ &idel_pat0_match_fall1_r;\n        idel_pat0_data_match_r <= #TCQ (idel_pat0_match_rise0_and_r &&\n                                        idel_pat0_match_fall0_and_r &&\n                                        idel_pat0_match_rise1_and_r &&\n                                        idel_pat0_match_fall1_and_r);\n      end",
        "        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat1_rise0[pt_i%4])\n            pat1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat1_fall0[pt_i%4])\n            pat1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat1_rise1[pt_i%4])\n            pat1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat1_fall1[pt_i%4])\n            pat1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end",
        "        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat0_rise0[pt_i%4])\n            pat0_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat0_fall0[pt_i%4])\n            pat0_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat0_rise1[pt_i%4])\n            pat0_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat0_fall1[pt_i%4])\n            pat0_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end",
        "        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == idel_pat1_rise0[pt_i%4])\n            idel_pat1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == idel_pat1_fall0[pt_i%4])\n            idel_pat1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == idel_pat1_rise1[pt_i%4])\n            idel_pat1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == idel_pat1_fall1[pt_i%4])\n            idel_pat1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end",
        "        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == idel_pat0_rise0[pt_i%4])\n            idel_pat0_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == idel_pat0_fall0[pt_i%4])\n            idel_pat0_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == idel_pat0_rise1[pt_i%4])\n            idel_pat0_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == idel_pat0_fall1[pt_i%4])\n            idel_pat0_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end",
        "      for (pt_i = 0; pt_i < DRAM_WIDTH; pt_i = pt_i + 1) begin: gen_pat_match\n\n        ",
        "    end else if (nCK_PER_CLK == 2) begin: gen_pat_match_div2\n      for (pt_i = 0; pt_i < DRAM_WIDTH; pt_i = pt_i + 1) begin: gen_pat_match",
        "      assign pat_data_match_r = pat0_data_match_r | pat1_data_match_r;",
        "      always @(posedge clk) begin\n        pat1_match_rise0_and_r <= #TCQ &pat1_match_rise0_r;\n        pat1_match_fall0_and_r <= #TCQ &pat1_match_fall0_r;\n        pat1_match_rise1_and_r <= #TCQ &pat1_match_rise1_r;\n        pat1_match_fall1_and_r <= #TCQ &pat1_match_fall1_r;\n        pat1_match_rise2_and_r <= #TCQ &pat1_match_rise2_r;\n        pat1_match_fall2_and_r <= #TCQ &pat1_match_fall2_r;\n        pat1_match_rise3_and_r <= #TCQ &pat1_match_rise3_r;\n        pat1_match_fall3_and_r <= #TCQ &pat1_match_fall3_r;\n        pat1_data_match_r <= #TCQ (pat1_match_rise0_and_r &&\n                                   pat1_match_fall0_and_r &&\n                                   pat1_match_rise1_and_r &&\n                                   pat1_match_fall1_and_r &&\n                                   pat1_match_rise2_and_r &&\n                                   pat1_match_fall2_and_r &&\n                                   pat1_match_rise3_and_r &&\n                                   pat1_match_fall3_and_r);\n      end",
        "      always @(posedge clk) begin\n        pat0_match_rise0_and_r <= #TCQ &pat0_match_rise0_r;\n        pat0_match_fall0_and_r <= #TCQ &pat0_match_fall0_r;\n        pat0_match_rise1_and_r <= #TCQ &pat0_match_rise1_r;\n        pat0_match_fall1_and_r <= #TCQ &pat0_match_fall1_r;\n        pat0_match_rise2_and_r <= #TCQ &pat0_match_rise2_r;\n        pat0_match_fall2_and_r <= #TCQ &pat0_match_fall2_r;\n        pat0_match_rise3_and_r <= #TCQ &pat0_match_rise3_r;\n        pat0_match_fall3_and_r <= #TCQ &pat0_match_fall3_r;\n        pat0_data_match_r <= #TCQ (pat0_match_rise0_and_r &&\n                                   pat0_match_fall0_and_r &&\n                                   pat0_match_rise1_and_r &&\n                                   pat0_match_fall1_and_r &&\n                                   pat0_match_rise2_and_r &&\n                                   pat0_match_fall2_and_r &&\n                                   pat0_match_rise3_and_r &&\n                                   pat0_match_fall3_and_r);\n      end",
        "      always @(posedge clk)\n        idel_pat_data_match_r <= #TCQ idel_pat_data_match;\n\n      ",
        "      always @(*)\n        idel_pat_data_match <= #TCQ idel_pat0_data_match_r |\n                                    idel_pat1_data_match_r;\n",
        "      always @(posedge clk) begin\n        idel_pat1_match_rise0_and_r <= #TCQ &idel_pat1_match_rise0_r;\n        idel_pat1_match_fall0_and_r <= #TCQ &idel_pat1_match_fall0_r;\n        idel_pat1_match_rise1_and_r <= #TCQ &idel_pat1_match_rise1_r;\n        idel_pat1_match_fall1_and_r <= #TCQ &idel_pat1_match_fall1_r;\n        idel_pat1_match_rise2_and_r <= #TCQ &idel_pat1_match_rise2_r;\n        idel_pat1_match_fall2_and_r <= #TCQ &idel_pat1_match_fall2_r;\n        idel_pat1_match_rise3_and_r <= #TCQ &idel_pat1_match_rise3_r;\n        idel_pat1_match_fall3_and_r <= #TCQ &idel_pat1_match_fall3_r;\n        idel_pat1_data_match_r <= #TCQ (idel_pat1_match_rise0_and_r &&\n                                        idel_pat1_match_fall0_and_r &&\n                                        idel_pat1_match_rise1_and_r &&\n                                        idel_pat1_match_fall1_and_r &&\n                                        idel_pat1_match_rise2_and_r &&\n                                        idel_pat1_match_fall2_and_r &&\n                                        idel_pat1_match_rise3_and_r &&\n                                        idel_pat1_match_fall3_and_r);\n      end",
        "      always @(posedge clk) begin\n        idel_pat0_match_rise0_and_r <= #TCQ &idel_pat0_match_rise0_r;\n        idel_pat0_match_fall0_and_r <= #TCQ &idel_pat0_match_fall0_r;\n        idel_pat0_match_rise1_and_r <= #TCQ &idel_pat0_match_rise1_r;\n        idel_pat0_match_fall1_and_r <= #TCQ &idel_pat0_match_fall1_r;\n        idel_pat0_match_rise2_and_r <= #TCQ &idel_pat0_match_rise2_r;\n        idel_pat0_match_fall2_and_r <= #TCQ &idel_pat0_match_fall2_r;\n        idel_pat0_match_rise3_and_r <= #TCQ &idel_pat0_match_rise3_r;\n        idel_pat0_match_fall3_and_r <= #TCQ &idel_pat0_match_fall3_r;\n        idel_pat0_data_match_r <= #TCQ (idel_pat0_match_rise0_and_r &&\n                                        idel_pat0_match_fall0_and_r &&\n                                        idel_pat0_match_rise1_and_r &&\n                                        idel_pat0_match_fall1_and_r &&\n                                        idel_pat0_match_rise2_and_r &&\n                                        idel_pat0_match_fall2_and_r &&\n                                        idel_pat0_match_rise3_and_r &&\n                                        idel_pat0_match_fall3_and_r);\n      end",
        "        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat1_rise0[pt_i%4])\n            pat1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat1_fall0[pt_i%4])\n            pat1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat1_rise1[pt_i%4])\n            pat1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat1_fall1[pt_i%4])\n            pat1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == pat1_rise2[pt_i%4])\n            pat1_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == pat1_fall2[pt_i%4])\n            pat1_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == pat1_rise3[pt_i%4])\n            pat1_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == pat1_fall3[pt_i%4])\n            pat1_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end",
        "        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat0_rise0[pt_i%4])\n            pat0_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat0_fall0[pt_i%4])\n            pat0_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat0_rise1[pt_i%4])\n            pat0_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat0_fall1[pt_i%4])\n            pat0_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == pat0_rise2[pt_i%4])\n            pat0_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == pat0_fall2[pt_i%4])\n            pat0_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == pat0_rise3[pt_i%4])\n            pat0_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == pat0_fall3[pt_i%4])\n            pat0_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat0_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end",
        "        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == idel_pat1_rise0[pt_i%4])\n            idel_pat1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == idel_pat1_fall0[pt_i%4])\n            idel_pat1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == idel_pat1_rise1[pt_i%4])\n            idel_pat1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == idel_pat1_fall1[pt_i%4])\n            idel_pat1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == idel_pat1_rise2[pt_i%4])\n            idel_pat1_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == idel_pat1_fall2[pt_i%4])\n            idel_pat1_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == idel_pat1_rise3[pt_i%4])\n            idel_pat1_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == idel_pat1_fall3[pt_i%4])\n            idel_pat1_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat1_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end",
        "        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == idel_pat0_rise0[pt_i%4])\n            idel_pat0_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == idel_pat0_fall0[pt_i%4])\n            idel_pat0_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == idel_pat0_rise1[pt_i%4])\n            idel_pat0_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == idel_pat0_fall1[pt_i%4])\n            idel_pat0_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == idel_pat0_rise2[pt_i%4])\n            idel_pat0_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == idel_pat0_fall2[pt_i%4])\n            idel_pat0_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == idel_pat0_rise3[pt_i%4])\n            idel_pat0_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == idel_pat0_fall3[pt_i%4])\n            idel_pat0_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            idel_pat0_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end",
        "  generate\n    genvar pt_i;\n    if (nCK_PER_CLK == 4) begin: gen_pat_match_div4\n      for (pt_i = 0; pt_i < DRAM_WIDTH; pt_i = pt_i + 1) begin: gen_pat_match\n\n        ",
        "    end else if (nCK_PER_CLK == 2) begin: gen_pat_div2\n\n            \n\n      \n      assign idel_pat0_rise0[3] = 2'b01;\n      assign idel_pat0_fall0[3] = 2'b00;\n      assign idel_pat0_rise1[3] = 2'b10;\n      assign idel_pat0_fall1[3] = 2'b11;\n\n      assign idel_pat0_rise0[2] = 2'b00;\n      assign idel_pat0_fall0[2] = 2'b10;\n      assign idel_pat0_rise1[2] = 2'b11;\n      assign idel_pat0_fall1[2] = 2'b10;\n\n      assign idel_pat0_rise0[1] = 2'b00;\n      assign idel_pat0_fall0[1] = 2'b11;\n      assign idel_pat0_rise1[1] = 2'b10;\n      assign idel_pat0_fall1[1] = 2'b01;\n\n      assign idel_pat0_rise0[0] = 2'b11;\n      assign idel_pat0_fall0[0] = 2'b10;\n      assign idel_pat0_rise1[0] = 2'b00;\n      assign idel_pat0_fall1[0] = 2'b01;\n\n\n      \n      assign idel_pat1_rise0[3] = 2'b01;\n      assign idel_pat1_fall0[3] = 2'b11;\n      assign idel_pat1_rise1[3] = 2'b01;\n      assign idel_pat1_fall1[3] = 2'b00;\n\n      assign idel_pat1_rise0[2] = 2'b11;\n      assign idel_pat1_fall0[2] = 2'b01;\n      assign idel_pat1_rise1[2] = 2'b00;\n      assign idel_pat1_fall1[2] = 2'b10;\n\n      assign idel_pat1_rise0[1] = 2'b01;\n      assign idel_pat1_fall0[1] = 2'b00;\n      assign idel_pat1_rise1[1] = 2'b10;\n      assign idel_pat1_fall1[1] = 2'b11;\n\n      assign idel_pat1_rise0[0] = 2'b00;\n      assign idel_pat1_fall0[0] = 2'b10;\n      assign idel_pat1_rise1[0] = 2'b11;\n      assign idel_pat1_fall1[0] = 2'b10;\n\n\n      \n      assign pat0_rise0[3] = 2'b00;\n      assign pat0_fall0[3] = 2'b10;\n      assign pat0_rise1[3] = 2'b11;\n      assign pat0_fall1[3] = 2'b10;\n\n      assign pat0_rise0[2] = 2'b10;\n      assign pat0_fall0[2] = 2'b11;\n      assign pat0_rise1[2] = 2'b10;\n      assign pat0_fall1[2] = 2'b00;\n\n      assign pat0_rise0[1] = 2'b11;\n      assign pat0_fall0[1] = 2'b10;\n      assign pat0_rise1[1] = 2'b01;\n      assign pat0_fall1[1] = 2'b00;\n\n      assign pat0_rise0[0] = 2'b10;\n      assign pat0_fall0[0] = 2'b00;\n      assign pat0_rise1[0] = 2'b01;\n      assign pat0_fall1[0] = 2'b11;\n\n      \n      assign pat1_rise0[3] = 2'b11;\n      assign pat1_fall0[3] = 2'b01;\n      assign pat1_rise1[3] = 2'b00;\n      assign pat1_fall1[3] = 2'b10;\n\n      assign pat1_rise0[2] = 2'b01;\n      assign pat1_fall0[2] = 2'b00;\n      assign pat1_rise1[2] = 2'b10;\n      assign pat1_fall1[2] = 2'b11;\n\n      assign pat1_rise0[1] = 2'b00;\n      assign pat1_fall0[1] = 2'b10;\n      assign pat1_rise1[1] = 2'b11;\n      assign pat1_fall1[1] = 2'b10;\n\n      assign pat1_rise0[0] = 2'b10;\n      assign pat1_fall0[0] = 2'b11;\n      assign pat1_rise1[0] = 2'b10;\n      assign pat1_fall1[0] = 2'b00;\n    end",
        "      \n      assign {pat1_rise0[3], pat1_rise0[2],\n              pat1_rise0[1], pat1_rise0[0]} = 4'h9;\n      assign {pat1_fall0[3], pat1_fall0[2],\n              pat1_fall0[1], pat1_fall0[0]} = 4'h3;\n      assign {pat1_rise1[3], pat1_rise1[2],\n              pat1_rise1[1], pat1_rise1[0]} = 4'h7;\n      assign {pat1_fall1[3], pat1_fall1[2],\n              pat1_fall1[1], pat1_fall1[0]} = 4'hE;\n      assign {pat1_rise2[3], pat1_rise2[2],\n              pat1_rise2[1], pat1_rise2[0]} = 4'hC;\n      assign {pat1_fall2[3], pat1_fall2[2],\n              pat1_fall2[1], pat1_fall2[0]} = 4'h9;\n      assign {pat1_rise3[3], pat1_rise3[2],\n              pat1_rise3[1], pat1_rise3[0]} = 4'h2;\n      assign {pat1_fall3[3], pat1_fall3[2],\n              pat1_fall3[1], pat1_fall3[0]} = 4'h4;",
        "      \n      assign {pat0_rise0[3], pat0_rise0[2],\n              pat0_rise0[1], pat0_rise0[0]} = 4'h7;\n      assign {pat0_fall0[3], pat0_fall0[2],\n              pat0_fall0[1], pat0_fall0[0]} = 4'hE;\n      assign {pat0_rise1[3], pat0_rise1[2],\n              pat0_rise1[1], pat0_rise1[0]} = 4'hC;\n      assign {pat0_fall1[3], pat0_fall1[2],\n              pat0_fall1[1], pat0_fall1[0]} = 4'h9;\n      assign {pat0_rise2[3], pat0_rise2[2],\n              pat0_rise2[1], pat0_rise2[0]} = 4'h2;\n      assign {pat0_fall2[3], pat0_fall2[2],\n              pat0_fall2[1], pat0_fall2[0]} = 4'h4;\n      assign {pat0_rise3[3], pat0_rise3[2],\n              pat0_rise3[1], pat0_rise3[0]} = 4'hB;\n      assign {pat0_fall3[3], pat0_fall3[2],",
        "      \n      assign {idel_pat1_rise0[3], idel_pat1_rise0[2],\n              idel_pat1_rise0[1], idel_pat1_rise0[0]} = 4'h4;\n      assign {idel_pat1_fall0[3], idel_pat1_fall0[2],\n              idel_pat1_fall0[1], idel_pat1_fall0[0]} = 4'h9;\n      assign {idel_pat1_rise1[3], idel_pat1_rise1[2],\n              idel_pat1_rise1[1], idel_pat1_rise1[0]} = 4'h3;\n      assign {idel_pat1_fall1[3], idel_pat1_fall1[2],\n              idel_pat1_fall1[1], idel_pat1_fall1[0]} = 4'h7;\n      assign {idel_pat1_rise2[3], idel_pat1_rise2[2],\n              idel_pat1_rise2[1], idel_pat1_rise2[0]} = 4'hE;\n      assign {idel_pat1_fall2[3], idel_pat1_fall2[2],\n              idel_pat1_fall2[1], idel_pat1_fall2[0]} = 4'hC;\n      assign {idel_pat1_rise3[3], idel_pat1_rise3[2],\n              idel_pat1_rise3[1], idel_pat1_rise3[0]} = 4'h9;\n      assign {idel_pat1_fall3[3], idel_pat1_fall3[2],\n              idel_pat1_fall3[1], idel_pat1_fall3[0]} = 4'h2;",
        "      assign {idel_pat0_rise0[3], idel_pat0_rise0[2],\n              idel_pat0_rise0[1], idel_pat0_rise0[0]} = 4'h1;\n      assign {idel_pat0_fall0[3], idel_pat0_fall0[2],\n              idel_pat0_fall0[1], idel_pat0_fall0[0]} = 4'h7;\n      assign {idel_pat0_rise1[3], idel_pat0_rise1[2],\n              idel_pat0_rise1[1], idel_pat0_rise1[0]} = 4'hE;\n      assign {idel_pat0_fall1[3], idel_pat0_fall1[2],\n              idel_pat0_fall1[1], idel_pat0_fall1[0]} = 4'hC;\n      assign {idel_pat0_rise2[3], idel_pat0_rise2[2],\n              idel_pat0_rise2[1], idel_pat0_rise2[0]} = 4'h9;\n      assign {idel_pat0_fall2[3], idel_pat0_fall2[2],\n              idel_pat0_fall2[1], idel_pat0_fall2[0]} = 4'h2;\n      assign {idel_pat0_rise3[3], idel_pat0_rise3[2],\n              idel_pat0_rise3[1], idel_pat0_rise3[0]} = 4'h4;\n      assign {idel_pat0_fall3[3], idel_pat0_fall3[2],\n              idel_pat0_fall3[1], idel_pat0_fall3[0]} = 4'hB;",
        "  generate\n    if (nCK_PER_CLK == 4) begin: gen_pat_div4\n      \n\n      \n      assign {idel_pat0_rise0[3], idel_pat0_rise0[2],\n              idel_pat0_rise0[1], idel_pat0_rise0[0]} = 4'h1;\n      assign {idel_pat0_fall0[3], idel_pat0_fall0[2],\n              idel_pat0_fall0[1], idel_pat0_fall0[0]} = 4'h7;\n      assign {idel_pat0_rise1[3], idel_pat0_rise1[2],\n              idel_pat0_rise1[1], idel_pat0_rise1[0]} = 4'hE;\n      assign {idel_pat0_fall1[3], idel_pat0_fall1[2],\n              idel_pat0_fall1[1], idel_pat0_fall1[0]} = 4'hC;\n      assign {idel_pat0_rise2[3], idel_pat0_rise2[2],\n              idel_pat0_rise2[1], idel_pat0_rise2[0]} = 4'h9;\n      assign {idel_pat0_fall2[3], idel_pat0_fall2[2],\n              idel_pat0_fall2[1], idel_pat0_fall2[0]} = 4'h2;\n      assign {idel_pat0_rise3[3], idel_pat0_rise3[2],\n              idel_pat0_rise3[1], idel_pat0_rise3[0]} = 4'h4;\n      assign {idel_pat0_fall3[3], idel_pat0_fall3[2],\n              idel_pat0_fall3[1], idel_pat0_fall3[0]} = 4'hB;\n\n      \n      assign {idel_pat1_rise0[3], idel_pat1_rise0[2],\n              idel_pat1_rise0[1], idel_pat1_rise0[0]} = 4'h4;\n      assign {idel_pat1_fall0[3], idel_pat1_fall0[2],\n              idel_pat1_fall0[1], idel_pat1_fall0[0]} = 4'h9;\n      assign {idel_pat1_rise1[3], idel_pat1_rise1[2],\n              idel_pat1_rise1[1], idel_pat1_rise1[0]} = 4'h3;\n      assign {idel_pat1_fall1[3], idel_pat1_fall1[2],\n              idel_pat1_fall1[1], idel_pat1_fall1[0]} = 4'h7;\n      assign {idel_pat1_rise2[3], idel_pat1_rise2[2],\n              idel_pat1_rise2[1], idel_pat1_rise2[0]} = 4'hE;\n      assign {idel_pat1_fall2[3], idel_pat1_fall2[2],\n              idel_pat1_fall2[1], idel_pat1_fall2[0]} = 4'hC;\n      assign {idel_pat1_rise3[3], idel_pat1_rise3[2],\n              idel_pat1_rise3[1], idel_pat1_rise3[0]} = 4'h9;\n      assign {idel_pat1_fall3[3], idel_pat1_fall3[2],\n              idel_pat1_fall3[1], idel_pat1_fall3[0]} = 4'h2;\n\n\n      \n      assign {pat0_rise0[3], pat0_rise0[2],\n              pat0_rise0[1], pat0_rise0[0]} = 4'h7;\n      assign {pat0_fall0[3], pat0_fall0[2],\n              pat0_fall0[1], pat0_fall0[0]} = 4'hE;\n      assign {pat0_rise1[3], pat0_rise1[2],\n              pat0_rise1[1], pat0_rise1[0]} = 4'hC;\n      assign {pat0_fall1[3], pat0_fall1[2],\n              pat0_fall1[1], pat0_fall1[0]} = 4'h9;\n      assign {pat0_rise2[3], pat0_rise2[2],\n              pat0_rise2[1], pat0_rise2[0]} = 4'h2;\n      assign {pat0_fall2[3], pat0_fall2[2],\n              pat0_fall2[1], pat0_fall2[0]} = 4'h4;\n      assign {pat0_rise3[3], pat0_rise3[2],\n              pat0_rise3[1], pat0_rise3[0]} = 4'hB;\n      assign {pat0_fall3[3], pat0_fall3[2],\n              pat0_fall3[1], pat0_fall3[0]} = 4'h1;\n\n      \n      assign {pat1_rise0[3], pat1_rise0[2],\n              pat1_rise0[1], pat1_rise0[0]} = 4'h9;\n      assign {pat1_fall0[3], pat1_fall0[2],\n              pat1_fall0[1], pat1_fall0[0]} = 4'h3;\n      assign {pat1_rise1[3], pat1_rise1[2],\n              pat1_rise1[1], pat1_rise1[0]} = 4'h7;\n      assign {pat1_fall1[3], pat1_fall1[2],\n              pat1_fall1[1], pat1_fall1[0]} = 4'hE;\n      assign {pat1_rise2[3], pat1_rise2[2],\n              pat1_rise2[1], pat1_rise2[0]} = 4'hC;\n      assign {pat1_fall2[3], pat1_fall2[2],\n              pat1_fall2[1], pat1_fall2[0]} = 4'h9;\n      assign {pat1_rise3[3], pat1_rise3[2],\n              pat1_rise3[1], pat1_rise3[0]} = 4'h2;\n      assign {pat1_fall3[3], pat1_fall3[2],\n              pat1_fall3[1], pat1_fall3[0]} = 4'h4;\n\n    end else if (nCK_PER_CLK == 2) begin: gen_pat_div2\n\n            \n\n      \n      assign idel_pat0_rise0[3] = 2'b01;\n      assign idel_pat0_fall0[3] = 2'b00;\n      assign idel_pat0_rise1[3] = 2'b10;\n      assign idel_pat0_fall1[3] = 2'b11;\n\n      assign idel_pat0_rise0[2] = 2'b00;\n      assign idel_pat0_fall0[2] = 2'b10;\n      assign idel_pat0_rise1[2] = 2'b11;\n      assign idel_pat0_fall1[2] = 2'b10;\n\n      assign idel_pat0_rise0[1] = 2'b00;\n      assign idel_pat0_fall0[1] = 2'b11;\n      assign idel_pat0_rise1[1] = 2'b10;\n      assign idel_pat0_fall1[1] = 2'b01;\n\n      assign idel_pat0_rise0[0] = 2'b11;\n      assign idel_pat0_fall0[0] = 2'b10;\n      assign idel_pat0_rise1[0] = 2'b00;\n      assign idel_pat0_fall1[0] = 2'b01;\n\n\n      \n      assign idel_pat1_rise0[3] = 2'b01;\n      assign idel_pat1_fall0[3] = 2'b11;\n      assign idel_pat1_rise1[3] = 2'b01;\n      assign idel_pat1_fall1[3] = 2'b00;\n\n      assign idel_pat1_rise0[2] = 2'b11;\n      assign idel_pat1_fall0[2] = 2'b01;\n      assign idel_pat1_rise1[2] = 2'b00;\n      assign idel_pat1_fall1[2] = 2'b10;\n\n      assign idel_pat1_rise0[1] = 2'b01;\n      assign idel_pat1_fall0[1] = 2'b00;\n      assign idel_pat1_rise1[1] = 2'b10;\n      assign idel_pat1_fall1[1] = 2'b11;\n\n      assign idel_pat1_rise0[0] = 2'b00;\n      assign idel_pat1_fall0[0] = 2'b10;\n      assign idel_pat1_rise1[0] = 2'b11;\n      assign idel_pat1_fall1[0] = 2'b10;\n\n\n      \n      assign pat0_rise0[3] = 2'b00;\n      assign pat0_fall0[3] = 2'b10;\n      assign pat0_rise1[3] = 2'b11;\n      assign pat0_fall1[3] = 2'b10;\n\n      assign pat0_rise0[2] = 2'b10;\n      assign pat0_fall0[2] = 2'b11;\n      assign pat0_rise1[2] = 2'b10;\n      assign pat0_fall1[2] = 2'b00;\n\n      assign pat0_rise0[1] = 2'b11;\n      assign pat0_fall0[1] = 2'b10;\n      assign pat0_rise1[1] = 2'b01;\n      assign pat0_fall1[1] = 2'b00;\n\n      assign pat0_rise0[0] = 2'b10;\n      assign pat0_fall0[0] = 2'b00;\n      assign pat0_rise1[0] = 2'b01;\n      assign pat0_fall1[0] = 2'b11;\n\n      \n      assign pat1_rise0[3] = 2'b11;\n      assign pat1_fall0[3] = 2'b01;\n      assign pat1_rise1[3] = 2'b00;\n      assign pat1_fall1[3] = 2'b10;\n\n      assign pat1_rise0[2] = 2'b01;\n      assign pat1_fall0[2] = 2'b00;\n      assign pat1_rise1[2] = 2'b10;\n      assign pat1_fall1[2] = 2'b11;\n\n      assign pat1_rise0[1] = 2'b00;\n      assign pat1_fall0[1] = 2'b10;\n      assign pat1_rise1[1] = 2'b11;\n      assign pat1_fall1[1] = 2'b10;\n\n      assign pat1_rise0[0] = 2'b10;\n      assign pat1_fall0[0] = 2'b11;\n      assign pat1_rise1[0] = 2'b10;\n      assign pat1_fall1[0] = 2'b00;\n    end\n  endgenerate",
        "          always @(posedge clk) begin\n            if (mux_rd_valid_r) begin\n              sr_rise0_r[rd_i] <= #TCQ {sr_rise0_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_rise0_r[rd_i]};\n              sr_fall0_r[rd_i] <= #TCQ {sr_fall0_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_fall0_r[rd_i]};\n              sr_rise1_r[rd_i] <= #TCQ {sr_rise1_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_rise1_r[rd_i]};\n              sr_fall1_r[rd_i] <= #TCQ {sr_fall1_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_fall1_r[rd_i]};\n            end\n          end",
        "      end else if (RD_SHIFT_LEN > 1) begin: gen_sr_len_gt1\n        for (rd_i = 0; rd_i < DRAM_WIDTH; rd_i = rd_i + 1) begin: gen_sr",
        "          always @(posedge clk) begin\n            if (mux_rd_valid_r) begin\n              sr_rise0_r[rd_i] <= #TCQ {mux_rd_rise0_r[rd_i]};\n              sr_fall0_r[rd_i] <= #TCQ {mux_rd_fall0_r[rd_i]};\n              sr_rise1_r[rd_i] <= #TCQ {mux_rd_rise1_r[rd_i]};\n              sr_fall1_r[rd_i] <= #TCQ {mux_rd_fall1_r[rd_i]};\n            end\n          end",
        "    end else if (nCK_PER_CLK == 2) begin: gen_sr_div2\n      if (RD_SHIFT_LEN == 1) begin: gen_sr_len_eq1\n        for (rd_i = 0; rd_i < DRAM_WIDTH; rd_i = rd_i + 1) begin: gen_sr",
        "          always @(posedge clk) begin\n            if (mux_rd_valid_r) begin\n              sr_rise0_r[rd_i] <= #TCQ {sr_rise0_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_rise0_r[rd_i]};\n              sr_fall0_r[rd_i] <= #TCQ {sr_fall0_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_fall0_r[rd_i]};\n              sr_rise1_r[rd_i] <= #TCQ {sr_rise1_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_rise1_r[rd_i]};\n              sr_fall1_r[rd_i] <= #TCQ {sr_fall1_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_fall1_r[rd_i]};\n              sr_rise2_r[rd_i] <= #TCQ {sr_rise2_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_rise2_r[rd_i]};\n              sr_fall2_r[rd_i] <= #TCQ {sr_fall2_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_fall2_r[rd_i]};\n              sr_rise3_r[rd_i] <= #TCQ {sr_rise3_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_rise3_r[rd_i]};\n              sr_fall3_r[rd_i] <= #TCQ {sr_fall3_r[rd_i][RD_SHIFT_LEN-2:0],\n                                        mux_rd_fall3_r[rd_i]};\n            end\n          end",
        "      end else if (RD_SHIFT_LEN > 1) begin: gen_sr_len_gt1\n        for (rd_i = 0; rd_i < DRAM_WIDTH; rd_i = rd_i + 1) begin: gen_sr",
        "          always @(posedge clk) begin\n            if (mux_rd_valid_r) begin\n              sr_rise0_r[rd_i] <= #TCQ mux_rd_rise0_r[rd_i];\n              sr_fall0_r[rd_i] <= #TCQ mux_rd_fall0_r[rd_i];\n              sr_rise1_r[rd_i] <= #TCQ mux_rd_rise1_r[rd_i];\n              sr_fall1_r[rd_i] <= #TCQ mux_rd_fall1_r[rd_i];\n              sr_rise2_r[rd_i] <= #TCQ mux_rd_rise2_r[rd_i];\n              sr_fall2_r[rd_i] <= #TCQ mux_rd_fall2_r[rd_i];\n              sr_rise3_r[rd_i] <= #TCQ mux_rd_rise3_r[rd_i];\n              sr_fall3_r[rd_i] <= #TCQ mux_rd_fall3_r[rd_i];\n            end\n          end",
        "  generate\n    genvar rd_i;\n    if (nCK_PER_CLK == 4) begin: gen_sr_div4\n      if (RD_SHIFT_LEN == 1) begin: gen_sr_len_eq1\n        for (rd_i = 0; rd_i < DRAM_WIDTH; rd_i = rd_i + 1) begin: gen_sr",
        "  always @(posedge clk)\n    if (rst)\n      rdlvl_prech_req <= #TCQ 1'b0;\n    else\n      rdlvl_prech_req <= #TCQ cal1_prech_req_r;",
        "  always @(posedge clk)\n    if (!cal1_wait_cnt_en_r) begin\n      cal1_wait_cnt_r <= #TCQ 5'b00000;\n      cal1_wait_r     <= #TCQ 1'b1;\n    end else begin\n      if (cal1_wait_cnt_r != PIPE_WAIT_CNT - 1) begin\n        cal1_wait_cnt_r <= #TCQ cal1_wait_cnt_r + 1;\n        cal1_wait_r     <= #TCQ 1'b1;\n      end else begin\n        \n        \n        cal1_wait_cnt_r <= #TCQ 5'b00000;\n        cal1_wait_r     <= #TCQ 1'b0;\n      end\n    end",
        "  always @(posedge clk)\n    if ((cal1_state_r == CAL1_NEW_DQS_WAIT) ||\n        (cal1_state_r == CAL1_MPR_NEW_DQS_WAIT) ||\n        (cal1_state_r == CAL1_NEW_DQS_PREWAIT) ||\n        (cal1_state_r == CAL1_VALID_WAIT) ||\n        (cal1_state_r == CAL1_PB_STORE_FIRST_WAIT) ||\n        (cal1_state_r == CAL1_PB_INC_CPT_WAIT) ||\n        (cal1_state_r == CAL1_PB_DEC_CPT_LEFT_WAIT) ||\n        (cal1_state_r == CAL1_PB_INC_DQ_WAIT) ||\n        (cal1_state_r == CAL1_PB_DEC_CPT_WAIT) ||\n        (cal1_state_r == CAL1_IDEL_INC_CPT_WAIT) ||\n        (cal1_state_r == CAL1_IDEL_DEC_CPT_WAIT) ||\n        (cal1_state_r == CAL1_STORE_FIRST_WAIT) ||\n        (cal1_state_r == CAL1_DQ_IDEL_TAP_INC_WAIT) ||\n        (cal1_state_r == CAL1_DQ_IDEL_TAP_DEC_WAIT) ||\n        (cal1_state_r == CAL1_CENTER_WAIT) ||\n        (cal1_state_r == CAL1_RD_STOP_FOR_PI_INC))\n      cal1_wait_cnt_en_r <= #TCQ 1'b1;\n    else\n      cal1_wait_cnt_en_r <= #TCQ 1'b0;",
        "  always @(posedge clk) begin\n    for (cc = 0; cc < RANKS; cc = cc + 1) begin: dlyval_dq_assgn\n      for (dd = 0; dd < DQ_WIDTH; dd = dd + 1)\n        dlyval_dq[((5*dd)+(cc*DQ_WIDTH*5))+:5] <= #TCQ dlyval_dq_reg_r[cc][dd];\n      end\n  end",
        "  always @(posedge clk)\n    \n    if (rst | (SIM_CAL_OPTION == \"SKIP_CAL\")) begin\n      for (aa = 0; aa < RANKS; aa = aa + 1) begin: rst_dlyval_dq_reg_r\n        for (bb = 0; bb < DQ_WIDTH; bb = bb + 1)\n          dlyval_dq_reg_r[aa][bb] <= #TCQ 'b0;\n      end\n    end else if (SIM_CAL_OPTION == \"FAST_CAL\") begin\n      for (n = 0; n < RANKS; n = n + 1) begin: gen_dlyval_dq_reg_rnk\n        for (r = 0; r < DQ_WIDTH; r = r + 1) begin: gen_dlyval_dq_reg\n          if (dlyce_dq_r[r]) begin\n            if (dlyinc_dq_r)\n              dlyval_dq_reg_r[n][r] <= #TCQ dlyval_dq_reg_r[n][r] + 5'h01;\n            else\n              dlyval_dq_reg_r[n][r] <= #TCQ dlyval_dq_reg_r[n][r] - 5'h01;\n          end\n        end\n      end\n    end else begin\n      if (dlyce_dq_r[cal1_cnt_cpt_r]) begin\n        if (dlyinc_dq_r)\n          dlyval_dq_reg_r[rnk_cnt_r][cal1_cnt_cpt_r] <= #TCQ\n            dlyval_dq_reg_r[rnk_cnt_r][cal1_cnt_cpt_r] + 5'h01;\n        else\n          dlyval_dq_reg_r[rnk_cnt_r][cal1_cnt_cpt_r] <= #TCQ\n            dlyval_dq_reg_r[rnk_cnt_r][cal1_cnt_cpt_r] - 5'h01;\n      end\n    end",
        "  always @(posedge clk)\n    if (rst)\n      dlyinc_dq_r <= #TCQ 1'b0;\n    else\n      dlyinc_dq_r <= #TCQ cal1_dlyinc_dq_r;",
        "      always @(posedge clk)\n        if (rst)\n          dlyce_dq_r[DRAM_WIDTH*z+:DRAM_WIDTH] <= #TCQ 'b0;\n        else\n          if (SIM_CAL_OPTION == \"SKIP_CAL\")\n            \n            \n            dlyce_dq_r[DRAM_WIDTH*z+:DRAM_WIDTH] <= #TCQ 'b0;\n          else if (SIM_CAL_OPTION == \"FAST_CAL\") begin\n            \n            \n            \n            for (h = 0; h < DRAM_WIDTH; h = h + 1) begin\n              dlyce_dq_r[DRAM_WIDTH*z + h] <= #TCQ cal1_dlyce_dq_r;\n            end\n          end else if ((SIM_CAL_OPTION == \"NONE\") ||\n                   (SIM_CAL_OPTION == \"FAST_WIN_DETECT\")) begin\n            if (cal1_cnt_cpt_r == z) begin\n              for (g = 0; g < DRAM_WIDTH; g = g + 1) begin\n                dlyce_dq_r[DRAM_WIDTH*z + g]\n                <= #TCQ cal1_dlyce_dq_r;\n              end\n            end else\n              dlyce_dq_r[DRAM_WIDTH*z+:DRAM_WIDTH] <= #TCQ 'b0;\n          end\n    end",
        "  generate\n    for (z = 0; z < DQS_WIDTH; z = z + 1) begin: gen_dlyce_dq\n      always @(posedge clk)",
        "   always @(posedge clk)\n     regl_dqs_cnt_r <= #TCQ regl_dqs_cnt;\n  \n  \n  \n  \n  \n  \n  \n",
        "   always @(posedge clk) begin\n     if (rst || (done_cnt == 4'd0) ||\n         (mpr_rdlvl_done_r1 && ~mpr_rdlvl_done_r2))\n       regl_dqs_cnt    <= #TCQ {DQS_CNT_WIDTH+1{1'b0}};\n     else if ((cal1_state_r == CAL1_REGL_LOAD) &&\n              (regl_dqs_cnt == DQS_WIDTH-1) && (done_cnt == 4'd1)) begin\n       if (regl_rank_cnt == RANKS-1)\n         regl_dqs_cnt  <= #TCQ regl_dqs_cnt;\n       else\n         regl_dqs_cnt  <= #TCQ 'b0;\n     end else if ((cal1_state_r == CAL1_REGL_LOAD) && (regl_dqs_cnt != DQS_WIDTH-1)\n                  && (done_cnt == 4'd1))\n       regl_dqs_cnt  <= #TCQ regl_dqs_cnt + 1;\n     else\n       regl_dqs_cnt  <= #TCQ regl_dqs_cnt;\n   end",
        "   always @(posedge clk) begin\n     if (rst || (done_cnt == 4'd0) ||\n         (mpr_rdlvl_done_r1 && ~mpr_rdlvl_done_r2))\n       regl_rank_cnt   <= #TCQ 2'b00;\n     else if ((cal1_state_r == CAL1_REGL_LOAD) &&\n              (regl_dqs_cnt == DQS_WIDTH-1) && (done_cnt == 4'd1)) begin\n       if (regl_rank_cnt == RANKS-1)\n         regl_rank_cnt  <= #TCQ regl_rank_cnt;\n       else\n         regl_rank_cnt <= #TCQ regl_rank_cnt + 1;\n     end\n   end",
        "   always @(posedge clk) begin\n     pi_stg2_load  <= #TCQ pi_stg2_load_timing;\n     pi_stg2_reg_l <= #TCQ pi_stg2_reg_l_timing;\n   end",
        "   always @(posedge clk) begin\n     if (rst || (done_cnt == 4'd0)) begin\n       pi_stg2_load_timing    <= #TCQ 'b0;\n       pi_stg2_reg_l_timing   <= #TCQ 'b0;\n     end else if ((cal1_state_r == CAL1_REGL_LOAD) &&\n                  (regl_dqs_cnt <= DQS_WIDTH-1) && (done_cnt == 4'd1)) begin\n       pi_stg2_load_timing  <= #TCQ 'b1;\n       pi_stg2_reg_l_timing <= #TCQ\n         rdlvl_dqs_tap_cnt_r[rnk_cnt_r][regl_dqs_cnt];\n     end else begin\n       pi_stg2_load_timing  <= #TCQ 'b0;\n       pi_stg2_reg_l_timing <= #TCQ 'b0;\n     end\n   end",
        "   assign regl_dqs_cnt_timing = {2'd0, regl_dqs_cnt};",
        "   always @(posedge clk) begin\n     if (rst || (regl_rank_done_r == 1'b1))\n       regl_rank_done_r <= #TCQ 1'b0;\n     else if ((regl_dqs_cnt == DQS_WIDTH-1) &&\n              (regl_rank_cnt != RANKS-1) &&\n              (done_cnt == 4'd1))\n       regl_rank_done_r <= #TCQ 1'b1;\n   end",
        "   always @(posedge clk) begin\n     if (rst)\n       done_cnt <= #TCQ 'b0;\n     else if (((cal1_state_r == CAL1_REGL_LOAD) &&\n               (cal1_state_r1 == CAL1_NEXT_DQS)) ||\n              ((done_cnt == 4'd1) && (cal1_state_r != CAL1_DONE)))\n       done_cnt <= #TCQ 4'b1010;\n     else if (done_cnt > 'b0)\n       done_cnt <= #TCQ done_cnt - 1;\n   end",
        "  always @(posedge clk) begin\n    pi_en_stg2_f     <= #TCQ pi_en_stg2_f_timing;\n    pi_stg2_f_incdec <= #TCQ pi_stg2_f_incdec_timing;\n  end",
        "  always @(posedge clk) begin\n    if (rst) begin\n      pi_en_stg2_f_timing     <= #TCQ 'b0;\n      pi_stg2_f_incdec_timing <= #TCQ 'b0;\n    end else if (pi_cnt_dec) begin\n      pi_en_stg2_f_timing     <= #TCQ 'b1;\n      pi_stg2_f_incdec_timing <= #TCQ 'b0;\n    end else if (cal1_dlyce_cpt_r) begin\n      if ((SIM_CAL_OPTION == \"NONE\") ||\n          (SIM_CAL_OPTION == \"FAST_WIN_DETECT\")) begin\n        \n        pi_en_stg2_f_timing     <= #TCQ 1'b1;\n        pi_stg2_f_incdec_timing <= #TCQ cal1_dlyinc_cpt_r;\n      end else if (SIM_CAL_OPTION == \"FAST_CAL\") begin\n        \n        \n        \n        pi_en_stg2_f_timing     <= #TCQ 1'b1;\n        pi_stg2_f_incdec_timing <= #TCQ cal1_dlyinc_cpt_r;\n      end\n    end else begin\n      pi_en_stg2_f_timing     <= #TCQ 'b0;\n      pi_stg2_f_incdec_timing <= #TCQ 'b0;\n    end\n  end",
        "   always @(posedge clk) begin\n     if (rst) begin\n       fine_dly_dec_done_r1 <= #TCQ 1'b0;\n     end else if (((pi_cnt_dec == 'd1) && (pi_rdval_cnt == 'd1)) ||\n                  (dqs_po_dec_done_r2 && (pi_rdval_cnt == 'd0))) begin\n       fine_dly_dec_done_r1 <= #TCQ 1'b1;\n     end\n   end",
        "   always @(posedge clk) begin\n     if (rst || (pi_rdval_cnt == 'd0))\n       pi_cnt_dec      <= #TCQ 1'b0;\n     else if (dqs_po_dec_done_r2 && (pi_rdval_cnt > 'd0)\n                  && (wait_cnt_r == 'd1))\n       pi_cnt_dec      <= #TCQ 1'b1;\n     else\n       pi_cnt_dec      <= #TCQ 1'b0;\n   end",
        "     always @(posedge clk) begin\n     if (rst) begin\n       pi_rdval_cnt    <= #TCQ 'd0;\n     end else if (dqs_po_dec_done_r1 && ~dqs_po_dec_done_r2) begin\n       pi_rdval_cnt    <= #TCQ pi_counter_read_val;\n     end else if (pi_rdval_cnt > 'd0) begin\n       if (pi_cnt_dec)\n         pi_rdval_cnt  <= #TCQ pi_rdval_cnt - 1;\n       else\n         pi_rdval_cnt  <= #TCQ pi_rdval_cnt;\n     end else if (pi_rdval_cnt == 'd0) begin\n       pi_rdval_cnt    <= #TCQ pi_rdval_cnt;\n     end\n   end",
        "     always @(posedge clk) begin\n       if (rst || pi_cnt_dec)\n         wait_cnt_r <= #TCQ 'd8;\n       else if (dqs_po_dec_done_r2 && (wait_cnt_r > 'd0))\n         wait_cnt_r <= #TCQ wait_cnt_r - 1;\n     end",
        "     always @(posedge clk) begin\n       dqs_po_dec_done_r1 <= #TCQ dqs_po_dec_done;\n       dqs_po_dec_done_r2 <= #TCQ dqs_po_dec_done_r1;\n       fine_dly_dec_done_r2 <= #TCQ fine_dly_dec_done_r1;\n       fine_dly_dec_done_r3 <= #TCQ fine_dly_dec_done_r2;\n       fine_dly_dec_done_r4 <= #TCQ fine_dly_dec_done_r3;\n       if (PI_DIV2_INCDEC == \"TRUE\")\n         pi_fine_dly_dec_done <= #TCQ fine_dly_dec_done_r4;\n       else\n       pi_fine_dly_dec_done <= #TCQ fine_dly_dec_done_r2;\n     end",
        "  always @(posedge clk)\n    mux_rd_valid_r <= #TCQ ~phy_if_empty;\n",
        "      always @(posedge clk)begin\n        if (rst | (cal1_state_r == CAL1_MPR_NEW_DQS_WAIT) |\n            inhibit_edge_detect_r)\n          idel_mpr_pat_detect_r     <= #TCQ 1'b0;\n        \n        else if ((mpr_rd_rise0_prev_r & ~mpr_rd_fall0_prev_r &\n                  mpr_rd_rise1_prev_r & ~mpr_rd_fall1_prev_r) ||\n                 ((stable_idel_cnt < 3'd2) & (cal1_state_r == CAL1_MPR_PAT_DETECT)\n                 & (idel_pat_detect_valid_r)))\n                 \n          idel_mpr_pat_detect_r     <= #TCQ 1'b0;\n        \n        else if ((~mpr_rd_rise0_prev_r & mpr_rd_fall0_prev_r &\n                  ~mpr_rd_rise1_prev_r & mpr_rd_fall1_prev_r) &\n                  (stable_idel_cnt == 3'd2) &\n                  ((mpr_rd_rise0_prev_r != mux_rd_rise0_r[0]) ||\n                   (mpr_rd_fall0_prev_r != mux_rd_fall0_r[0]) ||\n                   (mpr_rd_rise1_prev_r != mux_rd_rise1_r[0]) ||\n                   (mpr_rd_fall1_prev_r != mux_rd_fall1_r[0])))\n          idel_mpr_pat_detect_r     <= #TCQ 1'b1;\n      end",
        "      always @(posedge clk) begin\n        if (rst |\n            (mpr_rd_rise0_prev_r & ~mpr_rd_fall0_prev_r &\n             mpr_rd_rise1_prev_r & ~mpr_rd_fall1_prev_r))\n          inhibit_edge_detect_r <= 1'b1;\n        else if ((cal1_state_r == CAL1_MPR_PAT_DETECT) &\n                 (idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing] > 5'd1) &\n                 (~mpr_rd_rise0_prev_r & mpr_rd_fall0_prev_r &\n                  ~mpr_rd_rise1_prev_r & mpr_rd_fall1_prev_r))\n          inhibit_edge_detect_r <= 1'b0;\n      end",
        "      always @(posedge clk) begin\n         if (rst | (cal1_state_r == CAL1_MPR_NEW_DQS_WAIT) |\n            (mpr_rd_rise0_prev_r != mux_rd_rise0_r[0]) |\n            (mpr_rd_fall0_prev_r != mux_rd_fall0_r[0]) |\n            (mpr_rd_rise1_prev_r != mux_rd_rise1_r[0]) |\n            (mpr_rd_fall1_prev_r != mux_rd_fall1_r[0]))\n           stable_idel_cnt <= #TCQ 3'd0;\n         else if ((idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing] > 5'd0) &\n                  ((cal1_state_r == CAL1_MPR_PAT_DETECT) &\n                  (idel_pat_detect_valid_r))) begin\n           if ((mpr_rd_rise0_prev_r == mux_rd_rise0_r[0]) &\n               (mpr_rd_fall0_prev_r == mux_rd_fall0_r[0]) &\n               (mpr_rd_rise1_prev_r == mux_rd_rise1_r[0]) &\n               (mpr_rd_fall1_prev_r == mux_rd_fall1_r[0]) &\n               (stable_idel_cnt < 3'd2))\n             stable_idel_cnt <= #TCQ stable_idel_cnt + 1;\n         end\n      end",
        "    end else if (nCK_PER_CLK == 2) begin: mpr_2to1",
        "   always @(posedge clk)begin\n     if (rst | (cal1_state_r == CAL1_MPR_NEW_DQS_WAIT) |\n         inhibit_edge_detect_r)\n       idel_mpr_pat_detect_r     <= #TCQ 1'b0;\n     \n     else if ((mpr_rd_rise0_prev_r & ~mpr_rd_fall0_prev_r &\n               mpr_rd_rise1_prev_r & ~mpr_rd_fall1_prev_r &\n               mpr_rd_rise2_prev_r & ~mpr_rd_fall2_prev_r &\n               mpr_rd_rise3_prev_r & ~mpr_rd_fall3_prev_r) ||\n              ((stable_idel_cnt < 3'd2) & (cal1_state_r == CAL1_MPR_PAT_DETECT)\n               && (idel_pat_detect_valid_r)))\n              \n       idel_mpr_pat_detect_r     <= #TCQ 1'b0;\n     \n     else if ((~mpr_rd_rise0_prev_r & mpr_rd_fall0_prev_r &\n               ~mpr_rd_rise1_prev_r & mpr_rd_fall1_prev_r &\n               ~mpr_rd_rise2_prev_r & mpr_rd_fall2_prev_r &\n               ~mpr_rd_rise3_prev_r & mpr_rd_fall3_prev_r) &\n               (stable_idel_cnt == 3'd2) &\n               ((mpr_rd_rise0_prev_r != mux_rd_rise0_r[0]) ||\n                (mpr_rd_fall0_prev_r != mux_rd_fall0_r[0]) ||\n                (mpr_rd_rise1_prev_r != mux_rd_rise1_r[0]) ||\n                (mpr_rd_fall1_prev_r != mux_rd_fall1_r[0]) ||\n                (mpr_rd_rise2_prev_r != mux_rd_rise2_r[0]) ||\n                (mpr_rd_fall2_prev_r != mux_rd_fall2_r[0]) ||\n                (mpr_rd_rise3_prev_r != mux_rd_rise3_r[0]) ||\n                (mpr_rd_fall3_prev_r != mux_rd_fall3_r[0])))\n       idel_mpr_pat_detect_r     <= #TCQ 1'b1;\n   end",
        "   always @(posedge clk) begin\n     if (rst |\n         (mpr_rd_rise0_prev_r & ~mpr_rd_fall0_prev_r &\n          mpr_rd_rise1_prev_r & ~mpr_rd_fall1_prev_r &\n          mpr_rd_rise2_prev_r & ~mpr_rd_fall2_prev_r &\n          mpr_rd_rise3_prev_r & ~mpr_rd_fall3_prev_r))\n       inhibit_edge_detect_r <= 1'b1;\n     \n     \n     else if ((cal1_state_r == CAL1_MPR_PAT_DETECT) &\n              (idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing] > 5'd1) &\n              (~mpr_rd_rise0_prev_r & mpr_rd_fall0_prev_r &\n               ~mpr_rd_rise1_prev_r & mpr_rd_fall1_prev_r &\n               ~mpr_rd_rise2_prev_r & mpr_rd_fall2_prev_r &\n               ~mpr_rd_rise3_prev_r & mpr_rd_fall3_prev_r))\n       inhibit_edge_detect_r <= 1'b0;\n   end",
        "   always @(posedge clk) begin\n      if (rst | (cal1_state_r == CAL1_NEW_DQS_PREWAIT) |\n         \n         (mpr_rd_rise0_prev_r != mux_rd_rise0_r[0]) |\n         (mpr_rd_fall0_prev_r != mux_rd_fall0_r[0]) |\n         (mpr_rd_rise1_prev_r != mux_rd_rise1_r[0]) |\n         (mpr_rd_fall1_prev_r != mux_rd_fall1_r[0]) |\n         (mpr_rd_rise2_prev_r != mux_rd_rise2_r[0]) |\n         (mpr_rd_fall2_prev_r != mux_rd_fall2_r[0]) |\n         (mpr_rd_rise3_prev_r != mux_rd_rise3_r[0]) |\n         (mpr_rd_fall3_prev_r != mux_rd_fall3_r[0]))\n        stable_idel_cnt <= #TCQ 3'd0;\n      else if ((|idelay_tap_cnt_r[rnk_cnt_r][cal1_cnt_cpt_timing]) &\n               ((cal1_state_r == CAL1_MPR_PAT_DETECT) &\n               (idel_pat_detect_valid_r))) begin\n        if ((mpr_rd_rise0_prev_r == mux_rd_rise0_r[0]) &\n            (mpr_rd_fall0_prev_r == mux_rd_fall0_r[0]) &\n            (mpr_rd_rise1_prev_r == mux_rd_rise1_r[0]) &\n            (mpr_rd_fall1_prev_r == mux_rd_fall1_r[0]) &\n            (mpr_rd_rise2_prev_r == mux_rd_rise2_r[0]) &\n            (mpr_rd_fall2_prev_r == mux_rd_fall2_r[0]) &\n            (mpr_rd_rise3_prev_r == mux_rd_rise3_r[0]) &\n            (mpr_rd_fall3_prev_r == mux_rd_fall3_r[0]) &\n            (stable_idel_cnt < 3'd2))\n          stable_idel_cnt <= #TCQ stable_idel_cnt + 1;\n      end\n   end",
        "   generate\n    if (nCK_PER_CLK == 4) begin: mpr_4to1\n   ",
        "   always @(posedge clk)begin\n     if ((cal1_state_r == CAL1_MPR_NEW_DQS_WAIT) ||\n        ((cal1_state_r == CAL1_MPR_PAT_DETECT) && (idel_pat_detect_valid_r)))begin\n       mpr_rd_rise0_prev_r <= #TCQ mux_rd_rise0_r[0];\n       mpr_rd_fall0_prev_r <= #TCQ mux_rd_fall0_r[0];\n       mpr_rd_rise1_prev_r <= #TCQ mux_rd_rise1_r[0];\n       mpr_rd_fall1_prev_r <= #TCQ mux_rd_fall1_r[0];\n       mpr_rd_rise2_prev_r <= #TCQ mux_rd_rise2_r[0];\n       mpr_rd_fall2_prev_r <= #TCQ mux_rd_fall2_r[0];\n       mpr_rd_rise3_prev_r <= #TCQ mux_rd_rise3_r[0];\n       mpr_rd_fall3_prev_r <= #TCQ mux_rd_fall3_r[0];\n     end\n   end",
        "      always @(posedge clk) begin\n        mux_rd_rise0_r[mux_i] <= #TCQ rd_data_rise0[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];\n        mux_rd_fall0_r[mux_i] <= #TCQ rd_data_fall0[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];\n        mux_rd_rise1_r[mux_i] <= #TCQ rd_data_rise1[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];\n        mux_rd_fall1_r[mux_i] <= #TCQ rd_data_fall1[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];\n        mux_rd_rise2_r[mux_i] <= #TCQ rd_data_rise2[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];\n        mux_rd_fall2_r[mux_i] <= #TCQ rd_data_fall2[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];\n        mux_rd_rise3_r[mux_i] <= #TCQ rd_data_rise3[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];\n        mux_rd_fall3_r[mux_i] <= #TCQ rd_data_fall3[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];\n      end",
        "  generate\n    genvar mux_i;\n    for (mux_i = 0; mux_i < DRAM_WIDTH; mux_i = mux_i + 1) begin: gen_mux_rd\n      always @(posedge clk) begin\n        mux_rd_rise0_r[mux_i] <= #TCQ rd_data_rise0[DRAM_WIDTH*rd_mux_sel_r +\n                                                    mux_i];",
        "  always @(posedge clk) begin\n    rd_mux_sel_r <= #TCQ cal1_cnt_cpt_r;\n  end",
        "  generate\n    if (nCK_PER_CLK == 4) begin: rd_data_div4_logic_clk\n      assign rd_data_rise0 = rd_data[DQ_WIDTH-1:0];\n      assign rd_data_fall0 = rd_data[2*DQ_WIDTH-1:DQ_WIDTH];\n      assign rd_data_rise1 = rd_data[3*DQ_WIDTH-1:2*DQ_WIDTH];\n      assign rd_data_fall1 = rd_data[4*DQ_WIDTH-1:3*DQ_WIDTH];\n      assign rd_data_rise2 = rd_data[5*DQ_WIDTH-1:4*DQ_WIDTH];\n      assign rd_data_fall2 = rd_data[6*DQ_WIDTH-1:5*DQ_WIDTH];\n      assign rd_data_rise3 = rd_data[7*DQ_WIDTH-1:6*DQ_WIDTH];\n      assign rd_data_fall3 = rd_data[8*DQ_WIDTH-1:7*DQ_WIDTH];\n    end else begin: rd_data_div2_logic_clk\n      assign rd_data_rise0 = rd_data[DQ_WIDTH-1:0];\n      assign rd_data_fall0 = rd_data[2*DQ_WIDTH-1:DQ_WIDTH];\n      assign rd_data_rise1 = rd_data[3*DQ_WIDTH-1:2*DQ_WIDTH];\n      assign rd_data_fall1 = rd_data[4*DQ_WIDTH-1:3*DQ_WIDTH];\n    end\n  endgenerate",
        "  always @(posedge clk) begin\n    if (rst)\n      rdlvl_assrt_common <= #TCQ 1'b0;\n    else if ((SIM_CAL_OPTION == \"FAST_CAL\") & rdlvl_stg1_start &\n            !rdlvl_stg1_start_r)\n      rdlvl_assrt_common <= #TCQ 1'b1;\n    else if (!idel_pat_data_match_r & idel_pat_data_match)\n      rdlvl_assrt_common <= #TCQ 1'b0;\n  end",
        "   assign idelay_inc = cal1_dq_idel_inc;",
        "   assign idelay_ce  = cal1_dq_idel_ce;",
        "   always @ (posedge clk) begin\n     rdlvl_stg1_done_int_r1 <= #TCQ rdlvl_stg1_done_int;\n     rdlvl_stg1_done_int_r2 <= #TCQ rdlvl_stg1_done_int_r1;\n     rdlvl_stg1_done_int_r3 <= #TCQ rdlvl_stg1_done_int_r2;\n     rdlvl_last_byte_done_int_r1 <= #TCQ rdlvl_last_byte_done_int;\n     rdlvl_last_byte_done_int_r2 <= #TCQ rdlvl_last_byte_done_int_r1;\n     rdlvl_last_byte_done_int_r3 <= #TCQ rdlvl_last_byte_done_int_r2;\n   end",
        "  assign rdlvl_stg1_rnk_done = rdlvl_rank_done_r;\n  assign mpr_rnk_done        = mpr_rank_done_r;\n  assign mpr_rdlvl_done      = ((DRAM_TYPE == \"DDR3\") && (OCAL_EN == \"ON\")) ? \n                                mpr_rdlvl_done_r : 1'b1;\n\n   \n   \n   \n   \n   assign pi_stg2_rdlvl_cnt = (((PI_DIV2_INCDEC == \"TRUE\") && (cal1_state_r3 == CAL1_REGL_LOAD)) || ((PI_DIV2_INCDEC == \"FALSE\") && (cal1_state_r == CAL1_REGL_LOAD))) ? regl_dqs_cnt_r : cal1_cnt_cpt_r;\n   assign rdlvl_stg1_done   = (PI_DIV2_INCDEC == \"TRUE\") ? rdlvl_stg1_done_int_r3 : rdlvl_stg1_done_int;\n   assign rdlvl_last_byte_done = (PI_DIV2_INCDEC == \"TRUE\") ? rdlvl_last_byte_done_int_r3 : rdlvl_last_byte_done_int;\n",
        "          for (ce_i = 0; ce_i < DQS_WIDTH; ce_i = ce_i + 1) begin: gen_dbg_cpt_edge\n            if (found_first_edge_r)\n              dbg_cpt_first_edge_taps[(6*ce_i)+:6]\n                  <= #TCQ first_edge_taps_r;\n            if (found_second_edge_r)\n              dbg_cpt_second_edge_taps[(6*ce_i)+:6]\n                  <= #TCQ second_edge_taps_r;\n          end",
        "    always @(posedge clk)\n      if (rst || (rdlvl_stg1_start && ~rdlvl_stg1_start_r)) begin\n        dbg_cpt_first_edge_taps  <= #TCQ 'b0;\n        dbg_cpt_second_edge_taps <= #TCQ 'b0;\n      end else if ((SIM_CAL_OPTION == \"FAST_CAL\") & (cal1_state_r1 == CAL1_CALC_IDEL)) begin\n        \n          for (ce_i = 0; ce_i < DQS_WIDTH; ce_i = ce_i + 1) begin: gen_dbg_cpt_edge\n            if (found_first_edge_r)\n              dbg_cpt_first_edge_taps[(6*ce_i)+:6]\n                  <= #TCQ first_edge_taps_r;\n            if (found_second_edge_r)\n              dbg_cpt_second_edge_taps[(6*ce_i)+:6]\n                  <= #TCQ second_edge_taps_r;\n          end\n        \n      end else if (cal1_state_r == CAL1_CALC_IDEL) begin\n        \n        \n        \n          if (found_first_edge_r)\n            dbg_cpt_first_edge_taps[((cal1_cnt_cpt_timing <<2) + (cal1_cnt_cpt_timing <<1))+:6]\n              <= #TCQ first_edge_taps_r;\n          if (found_second_edge_r)\n            dbg_cpt_second_edge_taps[((cal1_cnt_cpt_timing <<2) + (cal1_cnt_cpt_timing <<1))+:6]\n              <= #TCQ second_edge_taps_r;\n      end\n  endgenerate",
        "  generate",
        "  assign dbg_cpt_first_edge_cnt  = dbg_cpt_first_edge_taps;\n  assign dbg_cpt_second_edge_cnt = dbg_cpt_second_edge_taps;\n  assign dbg_cpt_tap_cnt         = dbg_cpt_tap_cnt_w;\n  assign dbg_dq_idelay_tap_cnt   = idelay_tap_cnt_w;",
        "  assign dbg_phy_rdlvl[54:49]  = first_edge_taps_r;\n  assign dbg_phy_rdlvl[60:55]  = second_edge_taps_r;\n  assign dbg_phy_rdlvl[64:61]  = cal1_cnt_cpt_timing_r;\n  assign dbg_phy_rdlvl[65]     = cal1_dlyce_cpt_r;\n  assign dbg_phy_rdlvl[66]     = cal1_dlyinc_cpt_r;\n  assign dbg_phy_rdlvl[67]     = found_edge_r;\n  assign dbg_phy_rdlvl[68]     = found_first_edge_r;\n  assign dbg_phy_rdlvl[73:69]  = 'b0;\n  assign dbg_phy_rdlvl[74]     = idel_pat_data_match;\n  assign dbg_phy_rdlvl[75]     = idel_pat0_data_match_r;\n  assign dbg_phy_rdlvl[76]     = idel_pat1_data_match_r;\n  assign dbg_phy_rdlvl[77]     = pat0_data_match_r;\n  assign dbg_phy_rdlvl[78]     = pat1_data_match_r;\n  assign dbg_phy_rdlvl[79+:5*DQS_WIDTH*RANKS] = idelay_tap_cnt_w;\n  assign dbg_phy_rdlvl[170+:8] = mux_rd_rise0_r;\n  assign dbg_phy_rdlvl[178+:8] = mux_rd_fall0_r;\n  assign dbg_phy_rdlvl[186+:8] = mux_rd_rise1_r;\n  assign dbg_phy_rdlvl[194+:8] = mux_rd_fall1_r;\n  assign dbg_phy_rdlvl[202+:8] = mux_rd_rise2_r;\n  assign dbg_phy_rdlvl[210+:8] = mux_rd_fall2_r;\n  assign dbg_phy_rdlvl[218+:8] = mux_rd_rise3_r;\n  assign dbg_phy_rdlvl[226+:8] = mux_rd_fall3_r;",
        "  assign dbg_phy_rdlvl[40:25]  = 'b0;\n  assign dbg_phy_rdlvl[41]     = sr_valid_r;\n  assign dbg_phy_rdlvl[42]     = found_stable_eye_r;",
        "  assign dbg_phy_rdlvl[0]      = rdlvl_stg1_start;\n  assign dbg_phy_rdlvl[1]      = pat_data_match_r;\n  assign dbg_phy_rdlvl[2]      = mux_rd_valid_r;\n  assign dbg_phy_rdlvl[3]      = idelay_tap_limit_r;\n  assign dbg_phy_rdlvl[8:4]    = 'b0;\n  assign dbg_phy_rdlvl[14:9]   = cal1_state_r[5:0];\n  assign dbg_phy_rdlvl[20:15]  = cnt_idel_dec_cpt_r;\n  assign dbg_phy_rdlvl[21]     = found_first_edge_r;\n  assign dbg_phy_rdlvl[22]     = found_second_edge_r;\n  assign dbg_phy_rdlvl[23]     = found_edge_r;\n  assign dbg_phy_rdlvl[24]     = store_sr_r;",
        "  assign rdlvl_err              = rdlvl_stg1_err & (mpr_rdlvl_done);",
        "  assign mpr_rdlvl_err         = rdlvl_stg1_err & (!mpr_rdlvl_done);",
        "  always @(*) begin\n    for (d = 0; d < RANKS; d = d + 1) begin\n      for (e = 0; e < DQS_WIDTH; e = e + 1) begin\n        idelay_tap_cnt_w[(5*e+5*DQS_WIDTH*d)+:5] = idelay_tap_cnt_r[d][e];\n        dbg_cpt_tap_cnt_w[(6*e+6*DQS_WIDTH*d)+:6] = rdlvl_dqs_tap_cnt_r[d][e];\n      end\n    end\n  end"
    ]
}