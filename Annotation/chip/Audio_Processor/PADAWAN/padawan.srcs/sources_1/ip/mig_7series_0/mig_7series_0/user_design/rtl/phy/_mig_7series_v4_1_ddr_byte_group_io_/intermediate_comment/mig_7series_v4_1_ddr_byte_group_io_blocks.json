{
    "line_num": [
        [
            500,
            532
        ],
        [
            452,
            494
        ],
        [
            406,
            451
        ],
        [
            403,
            495
        ],
        [
            357,
            401
        ],
        [
            353,
            498
        ],
        [
            324,
            328
        ],
        [
            324,
            328
        ],
        [
            264,
            321
        ],
        [
            193,
            330
        ],
        [
            191,
            191
        ],
        [
            183,
            188
        ],
        [
            176,
            181
        ],
        [
            169,
            174
        ],
        [
            160,
            162
        ]
    ],
    "blocks": [
        "generate\n\n if ( PO_DATA_CTL == \"TRUE\" )  begin : dqs_gen\n\n   ODDR  \n      #(.DDR_CLK_EDGE  (ODDR_CLK_EDGE))\n      oddr_dqs \n   (\n       .Q   (oserdes_dqs_buf),\n       .D1  (oserdes_dqs[0]),\n       .D2  (oserdes_dqs[1]),\n       .C   (oserdes_clk_delayed),\n       .R   (1'b0),\n       .S   (),\n       .CE  (1'b1)\n   );\n\n   ODDR\n     #(.DDR_CLK_EDGE  (ODDR_CLK_EDGE))\n     oddr_dqsts \n   (    .Q  (oserdes_dqsts_buf),\n        .D1 (oserdes_dqsts[0]),\n        .D2 (oserdes_dqsts[0]),\n        .C  (oserdes_clk_delayed),\n        .R  (),\n        .S  (1'b0),\n        .CE (1'b1)\n   );\n\n end \n else begin:null_dqs \n end \nendgenerate",
        "           else begin :  sdr \n           OSERDESE2 #(\n               .DATA_RATE_OQ         (OSERDES_DQ_DATA_RATE_OQ),\n               .DATA_RATE_TQ         (OSERDES_DQ_DATA_RATE_TQ),\n               .DATA_WIDTH           (OSERDES_DQ_DATA_WIDTH),\n               .INIT_OQ              (1'b0 ),\n               .INIT_TQ              (OSERDES_DQ_INIT_TQ),\n               .SERDES_MODE          (OSERDES_DQ_SERDES_MODE),\n               .SRVAL_OQ             (1'b0 ),\n               .SRVAL_TQ             (OSERDES_DQ_SRVAL_TQ),\n               .TRISTATE_WIDTH       (OSERDES_DQ_TRISTATE_WIDTH) \n              )\n              oserdes_dq_i \n              (\n                .OFB               (),\n                .OQ                (oserdes_dq_buf[i]),\n                .SHIFTOUT1         (),\t\n                .SHIFTOUT2         (),\t\n                .TBYTEOUT          (),\n                .TFB               (),\n                .TQ                (),\n                .CLK               (oserdes_clk),\n                .CLKDIV            (oserdes_clkdiv),\n                .D1                (oserdes_dq[4 * i + 0]),\n                .D2                (oserdes_dq[4 * i + 1]),\n                .D3                (oserdes_dq[4 * i + 2]),\n                .D4                (oserdes_dq[4 * i + 3]),\n                .D5                (),\n                .D6                (),\n                .D7                (),\n                .D8                (),\n               .OCE                (1'b1),\n               .RST                (oserdes_rst),\n               .SHIFTIN1           (),     \n               .SHIFTIN2           (),     \n               .T1                 (),\n               .T2                 (),\n               .T3                 (),\n               .T4                 (),\n               .TCE                (1'b1),\n               .TBYTEIN            ()\n              );\n           end ",
        "        if ( PO_DATA_CTL == \"TRUE\" ) begin  : ddr\n\n           OSERDESE2 #(\n               .DATA_RATE_OQ         (OSERDES_DQ_DATA_RATE_OQ),\n               .DATA_RATE_TQ         (OSERDES_DQ_DATA_RATE_TQ),\n               .DATA_WIDTH           (OSERDES_DQ_DATA_WIDTH),\n               .INIT_OQ              (OSERDES_DQ_INIT_OQ),\n               .INIT_TQ              (OSERDES_DQ_INIT_TQ),\n               .SERDES_MODE          (OSERDES_DQ_SERDES_MODE),\n               .SRVAL_OQ             (OSERDES_DQ_SRVAL_OQ),\n               .SRVAL_TQ             (OSERDES_DQ_SRVAL_TQ),\n               .TRISTATE_WIDTH       (OSERDES_DQ_TRISTATE_WIDTH),\n               .TBYTE_CTL            (OSERDES_TBYTE_CTL),\n               .TBYTE_SRC            (\"FALSE\")\n             )\n              oserdes_dq_i \n              (\n                .OFB               (),\n                .OQ                (oserdes_dq_buf[i]),\n                .SHIFTOUT1         (),\t\n                .SHIFTOUT2         (),\t\n                .TBYTEOUT          (),\n                .TFB               (),\n                .TQ                (oserdes_dqts_buf[i]),\n                .CLK               (oserdes_clk),\n                .CLKDIV            (oserdes_clkdiv),\n                .D1                (oserdes_dq[4 * i + 0]),\n                .D2                (oserdes_dq[4 * i + 1]),\n                .D3                (oserdes_dq[4 * i + 2]),\n                .D4                (oserdes_dq[4 * i + 3]),\n                .D5                (),\n                .D6                (),\n                .D7                (),\n                .D8                (),\n               .OCE                (1'b1),\n               .RST                (oserdes_rst),\n               .SHIFTIN1           (),     \n               .SHIFTIN2           (),     \n               .T1                 (),\n               .T2                 (),\n               .T3                 (),\n               .T4                 (),\n               .TCE                (1'b1),\n               .TBYTEIN            (tbyte_out)\n              );\n           end",
        "  for (i = 0; i != NUM_BITLANES; i=i+1) begin : output_\n     if ( BITLANES[i]) begin  : oserdes_dq_\n\n        if ( PO_DATA_CTL == \"TRUE\" ) begin  : ddr\n\n           OSERDESE2 #(\n               .DATA_RATE_OQ         (OSERDES_DQ_DATA_RATE_OQ),\n               .DATA_RATE_TQ         (OSERDES_DQ_DATA_RATE_TQ),\n               .DATA_WIDTH           (OSERDES_DQ_DATA_WIDTH),\n               .INIT_OQ              (OSERDES_DQ_INIT_OQ),\n               .INIT_TQ              (OSERDES_DQ_INIT_TQ),\n               .SERDES_MODE          (OSERDES_DQ_SERDES_MODE),\n               .SRVAL_OQ             (OSERDES_DQ_SRVAL_OQ),\n               .SRVAL_TQ             (OSERDES_DQ_SRVAL_TQ),\n               .TRISTATE_WIDTH       (OSERDES_DQ_TRISTATE_WIDTH),\n               .TBYTE_CTL            (OSERDES_TBYTE_CTL),\n               .TBYTE_SRC            (\"FALSE\")\n             )\n              oserdes_dq_i \n              (\n                .OFB               (),\n                .OQ                (oserdes_dq_buf[i]),\n                .SHIFTOUT1         (),\t\n                .SHIFTOUT2         (),\t\n                .TBYTEOUT          (),\n                .TFB               (),\n                .TQ                (oserdes_dqts_buf[i]),\n                .CLK               (oserdes_clk),\n                .CLKDIV            (oserdes_clkdiv),\n                .D1                (oserdes_dq[4 * i + 0]),\n                .D2                (oserdes_dq[4 * i + 1]),\n                .D3                (oserdes_dq[4 * i + 2]),\n                .D4                (oserdes_dq[4 * i + 3]),\n                .D5                (),\n                .D6                (),\n                .D7                (),\n                .D8                (),\n               .OCE                (1'b1),\n               .RST                (oserdes_rst),\n               .SHIFTIN1           (),     \n               .SHIFTIN2           (),     \n               .T1                 (),\n               .T2                 (),\n               .T3                 (),\n               .T4                 (),\n               .TCE                (1'b1),\n               .TBYTEIN            (tbyte_out)\n              );\n           end\n           else begin :  sdr \n           OSERDESE2 #(\n               .DATA_RATE_OQ         (OSERDES_DQ_DATA_RATE_OQ),\n               .DATA_RATE_TQ         (OSERDES_DQ_DATA_RATE_TQ),\n               .DATA_WIDTH           (OSERDES_DQ_DATA_WIDTH),\n               .INIT_OQ              (1'b0 ),\n               .INIT_TQ              (OSERDES_DQ_INIT_TQ),\n               .SERDES_MODE          (OSERDES_DQ_SERDES_MODE),\n               .SRVAL_OQ             (1'b0 ),\n               .SRVAL_TQ             (OSERDES_DQ_SRVAL_TQ),\n               .TRISTATE_WIDTH       (OSERDES_DQ_TRISTATE_WIDTH) \n              )\n              oserdes_dq_i \n              (\n                .OFB               (),\n                .OQ                (oserdes_dq_buf[i]),\n                .SHIFTOUT1         (),\t\n                .SHIFTOUT2         (),\t\n                .TBYTEOUT          (),\n                .TFB               (),\n                .TQ                (),\n                .CLK               (oserdes_clk),\n                .CLKDIV            (oserdes_clkdiv),\n                .D1                (oserdes_dq[4 * i + 0]),\n                .D2                (oserdes_dq[4 * i + 1]),\n                .D3                (oserdes_dq[4 * i + 2]),\n                .D4                (oserdes_dq[4 * i + 3]),\n                .D5                (),\n                .D6                (),\n                .D7                (),\n                .D8                (),\n               .OCE                (1'b1),\n               .RST                (oserdes_rst),\n               .SHIFTIN1           (),     \n               .SHIFTIN2           (),     \n               .T1                 (),\n               .T2                 (),\n               .T3                 (),\n               .T4                 (),\n               .TCE                (1'b1),\n               .TBYTEIN            ()\n              );\n           end \n     end ",
        "     if ( PO_DATA_CTL == \"TRUE\" ) begin  : slave_ts\n           OSERDESE2 #(\n               .DATA_RATE_OQ         (OSERDES_DQ_DATA_RATE_OQ),\n               .DATA_RATE_TQ         (OSERDES_DQ_DATA_RATE_TQ),\n               .DATA_WIDTH           (OSERDES_DQ_DATA_WIDTH),\n               .INIT_OQ              (OSERDES_DQ_INIT_OQ),\n               .INIT_TQ              (OSERDES_DQ_INIT_TQ),\n               .SERDES_MODE          (OSERDES_DQ_SERDES_MODE),\n               .SRVAL_OQ             (OSERDES_DQ_SRVAL_OQ),\n               .SRVAL_TQ             (OSERDES_DQ_SRVAL_TQ),\n               .TRISTATE_WIDTH       (OSERDES_DQ_TRISTATE_WIDTH),\n               .TBYTE_CTL            (\"TRUE\"),\n               .TBYTE_SRC            (\"TRUE\")\n            )\n            oserdes_slave_ts\n            (\n                .OFB                 (),\n                .OQ                  (),\n                .SHIFTOUT1           (),\t\n                .SHIFTOUT2           (),\t\n                .TFB                 (),\n                .TQ                  (),\n                .CLK                 (oserdes_clk),\n                .CLKDIV              (oserdes_clkdiv),\n                .D1                  (),\n                .D2                  (),\n                .D3                  (),\n                .D4                  (),\n                .D5                  (),\n                .D6                  (),\n                .D7                  (),\n                .D8                  (),\n               .OCE                  (1'b1),\n               .RST                  (oserdes_rst),\n               .SHIFTIN1             (),     \n               .SHIFTIN2             (),     \n               .T1                   (oserdes_dqts[0]),\n               .T2                   (oserdes_dqts[0]),\n               .T3                   (oserdes_dqts[1]),\n               .T4                   (oserdes_dqts[1]),\n               .TCE                  (1'b1),\n               .TBYTEOUT             (tbyte_out),\n               .TBYTEIN              (tbyte_out)\n             );\n     end ",
        "generate \n\nlocalparam NUM_BITLANES = PO_DATA_CTL == \"TRUE\" ? 10 : BUS_WIDTH;\n\n     if ( PO_DATA_CTL == \"TRUE\" ) begin  : slave_ts\n           OSERDESE2 #(\n               .DATA_RATE_OQ         (OSERDES_DQ_DATA_RATE_OQ),\n               .DATA_RATE_TQ         (OSERDES_DQ_DATA_RATE_TQ),\n               .DATA_WIDTH           (OSERDES_DQ_DATA_WIDTH),\n               .INIT_OQ              (OSERDES_DQ_INIT_OQ),\n               .INIT_TQ              (OSERDES_DQ_INIT_TQ),\n               .SERDES_MODE          (OSERDES_DQ_SERDES_MODE),\n               .SRVAL_OQ             (OSERDES_DQ_SRVAL_OQ),\n               .SRVAL_TQ             (OSERDES_DQ_SRVAL_TQ),\n               .TRISTATE_WIDTH       (OSERDES_DQ_TRISTATE_WIDTH),\n               .TBYTE_CTL            (\"TRUE\"),\n               .TBYTE_SRC            (\"TRUE\")\n            )\n            oserdes_slave_ts\n            (\n                .OFB                 (),\n                .OQ                  (),\n                .SHIFTOUT1           (),\t\n                .SHIFTOUT2           (),\t\n                .TFB                 (),\n                .TQ                  (),\n                .CLK                 (oserdes_clk),\n                .CLKDIV              (oserdes_clkdiv),\n                .D1                  (),\n                .D2                  (),\n                .D3                  (),\n                .D4                  (),\n                .D5                  (),\n                .D6                  (),\n                .D7                  (),\n                .D8                  (),\n               .OCE                  (1'b1),\n               .RST                  (oserdes_rst),\n               .SHIFTIN1             (),     \n               .SHIFTIN2             (),     \n               .T1                   (oserdes_dqts[0]),\n               .T2                   (oserdes_dqts[0]),\n               .T3                   (oserdes_dqts[1]),\n               .T4                   (oserdes_dqts[1]),\n               .TCE                  (1'b1),\n               .TBYTEOUT             (tbyte_out),\n               .TBYTEIN              (tbyte_out)\n             );\n     end \n\n  for (i = 0; i != NUM_BITLANES; i=i+1) begin : output_\n     if ( BITLANES[i]) begin  : oserdes_dq_\n\n        if ( PO_DATA_CTL == \"TRUE\" ) begin  : ddr\n\n           OSERDESE2 #(\n               .DATA_RATE_OQ         (OSERDES_DQ_DATA_RATE_OQ),\n               .DATA_RATE_TQ         (OSERDES_DQ_DATA_RATE_TQ),\n               .DATA_WIDTH           (OSERDES_DQ_DATA_WIDTH),\n               .INIT_OQ              (OSERDES_DQ_INIT_OQ),\n               .INIT_TQ              (OSERDES_DQ_INIT_TQ),\n               .SERDES_MODE          (OSERDES_DQ_SERDES_MODE),\n               .SRVAL_OQ             (OSERDES_DQ_SRVAL_OQ),\n               .SRVAL_TQ             (OSERDES_DQ_SRVAL_TQ),\n               .TRISTATE_WIDTH       (OSERDES_DQ_TRISTATE_WIDTH),\n               .TBYTE_CTL            (OSERDES_TBYTE_CTL),\n               .TBYTE_SRC            (\"FALSE\")\n             )\n              oserdes_dq_i \n              (\n                .OFB               (),\n                .OQ                (oserdes_dq_buf[i]),\n                .SHIFTOUT1         (),\t\n                .SHIFTOUT2         (),\t\n                .TBYTEOUT          (),\n                .TFB               (),\n                .TQ                (oserdes_dqts_buf[i]),\n                .CLK               (oserdes_clk),\n                .CLKDIV            (oserdes_clkdiv),\n                .D1                (oserdes_dq[4 * i + 0]),\n                .D2                (oserdes_dq[4 * i + 1]),\n                .D3                (oserdes_dq[4 * i + 2]),\n                .D4                (oserdes_dq[4 * i + 3]),\n                .D5                (),\n                .D6                (),\n                .D7                (),\n                .D8                (),\n               .OCE                (1'b1),\n               .RST                (oserdes_rst),\n               .SHIFTIN1           (),     \n               .SHIFTIN2           (),     \n               .T1                 (),\n               .T2                 (),\n               .T3                 (),\n               .T4                 (),\n               .TCE                (1'b1),\n               .TBYTEIN            (tbyte_out)\n              );\n           end\n           else begin :  sdr \n           OSERDESE2 #(\n               .DATA_RATE_OQ         (OSERDES_DQ_DATA_RATE_OQ),\n               .DATA_RATE_TQ         (OSERDES_DQ_DATA_RATE_TQ),\n               .DATA_WIDTH           (OSERDES_DQ_DATA_WIDTH),\n               .INIT_OQ              (1'b0 ),\n               .INIT_TQ              (OSERDES_DQ_INIT_TQ),\n               .SERDES_MODE          (OSERDES_DQ_SERDES_MODE),\n               .SRVAL_OQ             (1'b0 ),\n               .SRVAL_TQ             (OSERDES_DQ_SRVAL_TQ),\n               .TRISTATE_WIDTH       (OSERDES_DQ_TRISTATE_WIDTH) \n              )\n              oserdes_dq_i \n              (\n                .OFB               (),\n                .OQ                (oserdes_dq_buf[i]),\n                .SHIFTOUT1         (),\t\n                .SHIFTOUT2         (),\t\n                .TBYTEOUT          (),\n                .TFB               (),\n                .TQ                (),\n                .CLK               (oserdes_clk),\n                .CLKDIV            (oserdes_clkdiv),\n                .D1                (oserdes_dq[4 * i + 0]),\n                .D2                (oserdes_dq[4 * i + 1]),\n                .D3                (oserdes_dq[4 * i + 2]),\n                .D4                (oserdes_dq[4 * i + 3]),\n                .D5                (),\n                .D6                (),\n                .D7                (),\n                .D8                (),\n               .OCE                (1'b1),\n               .RST                (oserdes_rst),\n               .SHIFTIN1           (),     \n               .SHIFTIN2           (),     \n               .T1                 (),\n               .T2                 (),\n               .T3                 (),\n               .T4                 (),\n               .TCE                (1'b1),\n               .TBYTEIN            ()\n              );\n           end \n     end \n  end \n  \nendgenerate",
        "        assign iserdes_dout[4*i + 3] = 0;\n        assign iserdes_dout[4*i + 2] = 0;\n        assign iserdes_dout[4*i + 1] = 0;\n        assign iserdes_dout[4*i + 0] = 0;\n    end",
        "        assign iserdes_dout[4*i + 3] = 0;\n        assign iserdes_dout[4*i + 2] = 0;\n        assign iserdes_dout[4*i + 1] = 0;\n        assign iserdes_dout[4*i + 0] = 0;\n    end",
        "    if(IDELAY_FINEDELAY_USE == \"TRUE\") begin: idelay_finedelay_dq\n      (* IODELAY_GROUP = IODELAY_GRP *)\n        IDELAYE2_FINEDELAY #(   \n         .CINVCTRL_SEL             ( IDELAYE2_CINVCTRL_SEL),\n         .DELAY_SRC                ( IDELAYE2_DELAY_SRC),\n         .HIGH_PERFORMANCE_MODE    ( IDELAYE2_HIGH_PERFORMANCE_MODE),\n         .IDELAY_TYPE              ( IDELAYE2_IDELAY_TYPE),\n         .IDELAY_VALUE             ( IDELAYE2_IDELAY_VALUE),\n         .PIPE_SEL                 ( IDELAYE2_PIPE_SEL),\n         .FINEDELAY                ( IDELAYE2_FINEDELAY_IN),\n         .REFCLK_FREQUENCY         ( IDELAYE2_REFCLK_FREQUENCY ),\n         .SIGNAL_PATTERN           ( IDELAYE2_SIGNAL_PATTERN)\n         )\n         idelaye2\n         (\n         .CNTVALUEOUT              (),\n         .DATAOUT                  (data_in_dly[i]),\n         .C                        (phy_clk), \n         .CE                       (idelay_ce),\n         .CINVCTRL                 (),\n         .CNTVALUEIN               (5'b00000), \n         .DATAIN                   (1'b0),\n         .IDATAIN                  (data_in[i]),\n         .IFDLY                    (fine_delay_r[i*3+:3]),\n         .INC                      (idelay_inc),\n         .LD                       (idelay_ld | idelay_ld_rst),\n         .LDPIPEEN                 (1'b0),\n         .REGRST                   (rst) \n     );\n    end else begin : idelay_dq\n      (* IODELAY_GROUP = IODELAY_GRP *)\n        IDELAYE2 #(\n         .CINVCTRL_SEL             ( IDELAYE2_CINVCTRL_SEL),\n         .DELAY_SRC                ( IDELAYE2_DELAY_SRC),\n         .HIGH_PERFORMANCE_MODE    ( IDELAYE2_HIGH_PERFORMANCE_MODE),\n         .IDELAY_TYPE              ( IDELAYE2_IDELAY_TYPE),\n         .IDELAY_VALUE             ( IDELAYE2_IDELAY_VALUE),\n         .PIPE_SEL                 ( IDELAYE2_PIPE_SEL),\n         .REFCLK_FREQUENCY         ( IDELAYE2_REFCLK_FREQUENCY ),\n         .SIGNAL_PATTERN           ( IDELAYE2_SIGNAL_PATTERN)\n         )\n         idelaye2\n         (\n         .CNTVALUEOUT              (),\n         .DATAOUT                  (data_in_dly[i]),\n         .C                        (phy_clk), \n         .CE                       (idelay_ce),\n         .CINVCTRL                 (),\n         .CNTVALUEIN               (5'b00000), \n         .DATAIN                   (1'b0),\n         .IDATAIN                  (data_in[i]),\n         .INC                      (idelay_inc),\n         .LD                       (idelay_ld | idelay_ld_rst),\n         .LDPIPEEN                 (1'b0),\n         .REGRST                   (rst) \n     );\n\n     end",
        "generate\n\nfor ( i = 0; i != 10 && PO_DATA_CTL == \"TRUE\" ; i=i+1) begin : input_\n  if ( BITLANES[i] && !BITLANES_OUTONLY[i]) begin  : iserdes_dq_\n\n     ISERDESE2 #(\n         .DATA_RATE                  ( ISERDES_DQ_DATA_RATE),\n         .DATA_WIDTH                 ( ISERDES_DQ_DATA_WIDTH),\n         .DYN_CLKDIV_INV_EN          ( ISERDES_DQ_DYN_CLKDIV_INV_EN),\n         .DYN_CLK_INV_EN             ( ISERDES_DQ_DYN_CLK_INV_EN),\n         .INIT_Q1                    ( ISERDES_DQ_INIT_Q1),\n         .INIT_Q2                    ( ISERDES_DQ_INIT_Q2),\n         .INIT_Q3                    ( ISERDES_DQ_INIT_Q3),\n         .INIT_Q4                    ( ISERDES_DQ_INIT_Q4),\n         .INTERFACE_TYPE             ( ISERDES_DQ_INTERFACE_TYPE),\n         .NUM_CE                     ( ISERDES_NUM_CE),\n         .IOBDELAY                   ( ISERDES_DQ_IOBDELAY),\n         .OFB_USED                   ( ISERDES_DQ_OFB_USED),\n         .SERDES_MODE                ( ISERDES_DQ_SERDES_MODE),\n         .SRVAL_Q1                   ( ISERDES_DQ_SRVAL_Q1),\n         .SRVAL_Q2                   ( ISERDES_DQ_SRVAL_Q2),\n         .SRVAL_Q3                   ( ISERDES_DQ_SRVAL_Q3),\n         .SRVAL_Q4                   ( ISERDES_DQ_SRVAL_Q4)\n         )\n         iserdesdq\n         (\n         .O                          (),\n         .Q1                         (iserdes_dout[4*i + 3]),\n         .Q2                         (iserdes_dout[4*i + 2]),\n         .Q3                         (iserdes_dout[4*i + 1]),\n         .Q4                         (iserdes_dout[4*i + 0]),\n         .Q5                         (),\n         .Q6                         (),\n         .Q7                         (),\n         .Q8                         (),\n         .SHIFTOUT1                  (),\n         .SHIFTOUT2                  (),\n     \n         .BITSLIP                    (1'b0),\n         .CE1                        (1'b1),\n         .CE2                        (1'b1),\n         .CLK                        (iserdes_clk_d),\n         .CLKB                       (!iserdes_clk_d),\n         .CLKDIVP                    (iserdes_clkdiv),\n         .CLKDIV                     (),\n         .DDLY                       (data_in_dly[i]),\n         .D                          (data_in[i]), \n\t                                           \n         .DYNCLKDIVSEL               (1'b0),\n         .DYNCLKSEL                  (1'b0),\n\n\n         .OCLK                       (oserdes_clk),\n         .OCLKB                      (),\n         .OFB                        (),\n         .RST                        (1'b0),\n\n         .SHIFTIN1                   (1'b0),\n         .SHIFTIN2                   (1'b0)\n         );\n\nlocalparam IDELAYE2_CINVCTRL_SEL          = \"FALSE\";\nlocalparam IDELAYE2_DELAY_SRC             = \"IDATAIN\";\nlocalparam IDELAYE2_HIGH_PERFORMANCE_MODE = \"TRUE\";\nlocalparam IDELAYE2_PIPE_SEL              = \"FALSE\";\nlocalparam IDELAYE2_ODELAY_TYPE           = \"FIXED\";\nlocalparam IDELAYE2_REFCLK_FREQUENCY      = ((FPGA_SPEED_GRADE == 2 || FPGA_SPEED_GRADE == 3) && TCK <= 1500) ? 400.0 : \n                                             (FPGA_SPEED_GRADE == 1 && TCK <= 1500) ?  300.0 : 200.0;\nlocalparam IDELAYE2_SIGNAL_PATTERN        = \"DATA\";\nlocalparam IDELAYE2_FINEDELAY_IN          = \"ADD_DLY\";\n\n    if(IDELAY_FINEDELAY_USE == \"TRUE\") begin: idelay_finedelay_dq\n      (* IODELAY_GROUP = IODELAY_GRP *)\n        IDELAYE2_FINEDELAY #(   \n         .CINVCTRL_SEL             ( IDELAYE2_CINVCTRL_SEL),\n         .DELAY_SRC                ( IDELAYE2_DELAY_SRC),\n         .HIGH_PERFORMANCE_MODE    ( IDELAYE2_HIGH_PERFORMANCE_MODE),\n         .IDELAY_TYPE              ( IDELAYE2_IDELAY_TYPE),\n         .IDELAY_VALUE             ( IDELAYE2_IDELAY_VALUE),\n         .PIPE_SEL                 ( IDELAYE2_PIPE_SEL),\n         .FINEDELAY                ( IDELAYE2_FINEDELAY_IN),\n         .REFCLK_FREQUENCY         ( IDELAYE2_REFCLK_FREQUENCY ),\n         .SIGNAL_PATTERN           ( IDELAYE2_SIGNAL_PATTERN)\n         )\n         idelaye2\n         (\n         .CNTVALUEOUT              (),\n         .DATAOUT                  (data_in_dly[i]),\n         .C                        (phy_clk), \n         .CE                       (idelay_ce),\n         .CINVCTRL                 (),\n         .CNTVALUEIN               (5'b00000), \n         .DATAIN                   (1'b0),\n         .IDATAIN                  (data_in[i]),\n         .IFDLY                    (fine_delay_r[i*3+:3]),\n         .INC                      (idelay_inc),\n         .LD                       (idelay_ld | idelay_ld_rst),\n         .LDPIPEEN                 (1'b0),\n         .REGRST                   (rst) \n     );\n    end else begin : idelay_dq\n      (* IODELAY_GROUP = IODELAY_GRP *)\n        IDELAYE2 #(\n         .CINVCTRL_SEL             ( IDELAYE2_CINVCTRL_SEL),\n         .DELAY_SRC                ( IDELAYE2_DELAY_SRC),\n         .HIGH_PERFORMANCE_MODE    ( IDELAYE2_HIGH_PERFORMANCE_MODE),\n         .IDELAY_TYPE              ( IDELAYE2_IDELAY_TYPE),\n         .IDELAY_VALUE             ( IDELAYE2_IDELAY_VALUE),\n         .PIPE_SEL                 ( IDELAYE2_PIPE_SEL),\n         .REFCLK_FREQUENCY         ( IDELAYE2_REFCLK_FREQUENCY ),\n         .SIGNAL_PATTERN           ( IDELAYE2_SIGNAL_PATTERN)\n         )\n         idelaye2\n         (\n         .CNTVALUEOUT              (),\n         .DATAOUT                  (data_in_dly[i]),\n         .C                        (phy_clk), \n         .CE                       (idelay_ce),\n         .CINVCTRL                 (),\n         .CNTVALUEIN               (5'b00000), \n         .DATAIN                   (1'b0),\n         .IDATAIN                  (data_in[i]),\n         .INC                      (idelay_inc),\n         .LD                       (idelay_ld | idelay_ld_rst),\n         .LDPIPEEN                 (1'b0),\n         .REGRST                   (rst) \n     );\n\n     end\n    end \n    else begin \n        assign iserdes_dout[4*i + 3] = 0;\n        assign iserdes_dout[4*i + 2] = 0;\n        assign iserdes_dout[4*i + 1] = 0;\n        assign iserdes_dout[4*i + 0] = 0;\n    end\nend \nendgenerate\t\t\t",
        "genvar i;",
        "always @ (posedge phy_clk) begin\n if(rst)\n   fine_delay_r <= #1 1'b0;\n else if(fine_delay_sel)\n   fine_delay_r <= #1 fine_delay;\nend",
        "always @(posedge phy_clk) begin\n  if (rst)\n    idelay_ld_rst <= #1 1'b1;\n  else if (rst_r4)\n    idelay_ld_rst <= #1 1'b0;\nend    ",
        "always @(posedge phy_clk) begin\n  rst_r1 <= #1 rst;\n  rst_r2 <= #1 rst_r1;\n  rst_r3 <= #1 rst_r2;\n  rst_r4 <= #1 rst_r3;\nend",
        "always @(*) \n   iserdes_clk_d = iserdes_clk;\n"
    ]
}