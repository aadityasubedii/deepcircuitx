{
    "line_num": [
        [
            2265,
            2266
        ],
        [
            2259,
            2263
        ],
        [
            2246,
            2258
        ],
        [
            2245,
            2258
        ],
        [
            2234,
            2241
        ],
        [
            2227,
            2232
        ],
        [
            2156,
            2186
        ],
        [
            2147,
            2152
        ],
        [
            2143,
            2146
        ],
        [
            2121,
            2135
        ],
        [
            2119,
            2136
        ],
        [
            2070,
            2137
        ],
        [
            2043,
            2061
        ],
        [
            2041,
            2067
        ],
        [
            1975,
            2040
        ],
        [
            1974,
            2068
        ],
        [
            1841,
            1969
        ],
        [
            1822,
            1833
        ],
        [
            1820,
            1835
        ],
        [
            1772,
            1818
        ],
        [
            1739,
            1771
        ],
        [
            1738,
            1836
        ],
        [
            1557,
            1736
        ],
        [
            1506,
            1549
        ],
        [
            1318,
            1499
        ],
        [
            1289,
            1310
        ],
        [
            1251,
            1252
        ],
        [
            1243,
            1244
        ],
        [
            1225,
            1237
        ],
        [
            1218,
            1218
        ],
        [
            1210,
            1216
        ],
        [
            1196,
            1208
        ],
        [
            1121,
            1188
        ],
        [
            1039,
            1115
        ],
        [
            960,
            1036
        ],
        [
            958,
            958
        ],
        [
            916,
            957
        ],
        [
            914,
            916
        ],
        [
            897,
            904
        ],
        [
            879,
            889
        ],
        [
            861,
            873
        ],
        [
            845,
            855
        ],
        [
            837,
            840
        ],
        [
            833,
            835
        ],
        [
            827,
            830
        ],
        [
            819,
            821
        ],
        [
            812,
            817
        ],
        [
            806,
            808
        ],
        [
            804,
            804
        ],
        [
            798,
            802
        ],
        [
            758,
            796
        ],
        [
            743,
            755
        ],
        [
            739,
            741
        ],
        [
            737,
            738
        ],
        [
            730,
            731
        ],
        [
            728,
            729
        ],
        [
            726,
            727
        ],
        [
            723,
            724
        ],
        [
            721,
            722
        ],
        [
            715,
            718
        ],
        [
            708,
            713
        ],
        [
            703,
            704
        ],
        [
            700,
            701
        ],
        [
            698,
            698
        ],
        [
            679,
            689
        ],
        [
            345,
            351
        ]
    ],
    "blocks": [
        "end\nendgenerate",
        "    always @(posedge clk) begin\n      calib_tap_req     <= #TCQ 1'b0;\n      calib_device_temp <= #TCQ 'd0;\n      skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n    end",
        "    assign calib_po_f_en          = 1'b0;\n    assign calib_po_f_incdec      = 1'b0;\n    assign calib_po_sel_stg2stg3  = 1'b0;\n    assign calib_po_c_en          = 1'b0;\n    assign calib_po_c_inc         = 1'b0;\n    assign calib_pi_f_en          = 1'b0;\n    assign calib_pi_f_incdec      = 1'b0;\n    assign calib_idelay_ce        = 1'b0;\n    assign calib_idelay_inc       = 1'b0;\n    assign calib_tap_inc_done     = 1'b0;\n    assign calib_tap_inc_byte_cnt = 'd0;\n    assign skip_cal_po_pi_dec_done = 1'b1;\n",
        "  end else begin: skip_calib_tap_off\n    assign calib_po_f_en          = 1'b0;\n    assign calib_po_f_incdec      = 1'b0;\n    assign calib_po_sel_stg2stg3  = 1'b0;\n    assign calib_po_c_en          = 1'b0;\n    assign calib_po_c_inc         = 1'b0;\n    assign calib_pi_f_en          = 1'b0;\n    assign calib_pi_f_incdec      = 1'b0;\n    assign calib_idelay_ce        = 1'b0;\n    assign calib_idelay_inc       = 1'b0;\n    assign calib_tap_inc_done     = 1'b0;\n    assign calib_tap_inc_byte_cnt = 'd0;\n    assign skip_cal_po_pi_dec_done = 1'b1;\n",
        "    always @ (posedge clk) begin\n      if (rst || tempmon_done_skip)\n        skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n      else if (samp_en_cnt == 'd260)\n        skip_cal_tempmon_samp_en <= #TCQ 1'b1;\n      else\n        skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n    end",
        "    always @ (posedge clk) begin\n      if (rst || tempmon_done_skip || (samp_en_cnt == 'd0))\n        samp_en_cnt <= #TCQ 'd267;\n      else if (calib_complete && (samp_en_cnt > 'd0))\n        samp_en_cnt <= #TCQ samp_en_cnt - 1;\n    end",
        "    always @(posedge clk) begin\n      if (rst) begin\n        calib_po_coarse_tap_cnt <= #TCQ 'd0;\n        calib_po_stage3_tap_cnt <= #TCQ 'd0;\n        calib_po_stage2_tap_cnt <= #TCQ 'd0;\n        calib_pi_stage2_tap_cnt <= #TCQ 'd0;\n        calib_idelay_tap_cnt    <= #TCQ 'd0;\n        calib_device_temp       <= #TCQ 'd0;\n      end else if (calib_tap_load) begin\n        case (calib_tap_addr[2:0])\n          3'b000:\n            calib_po_coarse_tap_cnt[3*calib_tap_addr[6:3]+:3] <= #TCQ calib_tap_val[2:0];\n          3'b001:\n            calib_po_stage3_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b010:\n            calib_po_stage2_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b011:\n            calib_pi_stage2_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b100:\n            calib_idelay_tap_cnt[5*calib_tap_addr[6:3]+:5] <= #TCQ calib_tap_val[4:0];\n          3'b110:\n            if (&calib_tap_addr[6:3])\n              calib_device_temp[7:0] <= #TCQ calib_tap_val[7:0];\n          3'b111:\n            if (&calib_tap_addr[6:3])\n              calib_device_temp[11:8] <= #TCQ calib_tap_val[3:0];\n          default:\n            calib_po_coarse_tap_cnt[3*calib_tap_addr[6:3]+:3] <= #TCQ calib_tap_val[2:0];\n        endcase\n      end\n    end",
        "    always @(posedge clk) begin\n      if (rst)\n        calib_tap_req  <= #TCQ 1'b0;\n      else if (phy_ctl_ready)\n        calib_tap_req <= #TCQ 1'b1;\n    end",
        "  generate\n  if (SKIP_CALIB == \"TRUE\") begin: gen_skip_calib_tap\n\n    ",
        "     assign prbs_rdlvl_done_complex = rdlvl_stg1_done ;\n     \n     assign prbs_last_byte_done     = rdlvl_stg1_done;\n     assign reset_rd_addr           = 1'b0;\n     assign prbs_rdlvl_prech_req    = 1'b0 ;\n     assign prbs_pi_stg2_f_en       = 1'b0 ;\n     assign prbs_pi_stg2_f_incdec   = 1'b0 ;\n     assign pi_stg2_prbs_rdlvl_cnt  = 'b0 ;\n     assign dbg_prbs_rdlvl          = 'h0 ;\n     assign prbs_final_dqs_tap_cnt_r  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_first_edge_taps  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_second_edge_taps = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign complex_pi_incdec_done  = 'b0;\n     assign complex_init_pi_dec_done  = 'b1;\n     assign num_samples_done_r      = 'b0;",
        "end else begin:ddr_phy_prbs_rdlvl_off\n\n     assign prbs_rdlvl_done_complex = rdlvl_stg1_done ;\n     \n     assign prbs_last_byte_done     = rdlvl_stg1_done;\n     assign reset_rd_addr           = 1'b0;\n     assign prbs_rdlvl_prech_req    = 1'b0 ;\n     assign prbs_pi_stg2_f_en       = 1'b0 ;\n     assign prbs_pi_stg2_f_incdec   = 1'b0 ;\n     assign pi_stg2_prbs_rdlvl_cnt  = 'b0 ;\n     assign dbg_prbs_rdlvl          = 'h0 ;\n     assign prbs_final_dqs_tap_cnt_r  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_first_edge_taps  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_second_edge_taps = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign complex_pi_incdec_done  = 'b0;\n     assign complex_init_pi_dec_done  = 'b1;\n     assign num_samples_done_r      = 'b0;\nend",
        "generate\nif((DRAM_TYPE == \"DDR3\") && (nCK_PER_CLK == 4) && (BYPASS_COMPLEX_RDLVL==\"FALSE\")) begin:ddr_phy_prbs_rdlvl_gen\n  mig_7series_v4_1_ddr_phy_prbs_rdlvl #\n    (\n     .TCQ            (TCQ),\n     .nCK_PER_CLK    (nCK_PER_CLK),\n     .DQ_WIDTH       (DQ_WIDTH),\n     .DQS_CNT_WIDTH  (DQS_CNT_WIDTH),\n     .DQS_WIDTH      (DQS_WIDTH),\n     .DRAM_WIDTH     (DRAM_WIDTH),\n     .RANKS          (1),\n     .SIM_CAL_OPTION (SIM_CAL_OPTION),\n     .PRBS_WIDTH     (PRBS_WIDTH),\n     .FIXED_VICTIM   (FIXED_VICTIM),\n     .FINE_PER_BIT   (FINE_PER_BIT),\n     .CENTER_COMP_MODE (CENTER_COMP_MODE),\n     .PI_VAL_ADJ       (PI_VAL_ADJ)\n     )\n    u_ddr_phy_prbs_rdlvl\n      (\n       .clk                    (clk),\n       .rst                    (rst),\n       .prbs_rdlvl_start       (prbs_rdlvl_start),\n       .prbs_rdlvl_done        (prbs_rdlvl_done_complex),\n       .prbs_last_byte_done    (prbs_last_byte_done),\n       .prbs_rdlvl_prech_req   (prbs_rdlvl_prech_req),\n       .complex_sample_cnt_inc (complex_sample_cnt_inc),\n       .prech_done             (prech_done),\n       .phy_if_empty           (phy_if_empty),\n       .rd_data                (phy_rddata),\n       .compare_data           (prbs_o),\n       .pi_counter_read_val    (pi_counter_read_val),\n       .pi_en_stg2_f           (prbs_pi_stg2_f_en),\n       .pi_stg2_f_incdec       (prbs_pi_stg2_f_incdec),\n       .dbg_prbs_rdlvl         (dbg_prbs_rdlvl),\n       .pi_stg2_prbs_rdlvl_cnt (pi_stg2_prbs_rdlvl_cnt),\n       .prbs_final_dqs_tap_cnt_r (prbs_final_dqs_tap_cnt_r),\n       .dbg_prbs_first_edge_taps (dbg_prbs_first_edge_taps),\n       .dbg_prbs_second_edge_taps (dbg_prbs_second_edge_taps),\n       .rd_victim_sel          (rd_victim_sel),\n       .complex_victim_inc     (complex_victim_inc),\n       .reset_rd_addr          (reset_rd_addr),\n       .fine_delay_incdec_pb   (fine_delay_incdec_pb),\n       .fine_delay_sel         (fine_delay_sel),\n       .complex_act_start      (complex_act_start),\n       .num_samples_done_r     (num_samples_done_r),\n       .complex_pi_incdec_done (complex_pi_incdec_done),\n       .complex_init_pi_dec_done     (complex_init_pi_dec_done)\n       );\nend else begin:ddr_phy_prbs_rdlvl_off\n\n     assign prbs_rdlvl_done_complex = rdlvl_stg1_done ;\n     \n     assign prbs_last_byte_done     = rdlvl_stg1_done;\n     assign reset_rd_addr           = 1'b0;\n     assign prbs_rdlvl_prech_req    = 1'b0 ;\n     assign prbs_pi_stg2_f_en       = 1'b0 ;\n     assign prbs_pi_stg2_f_incdec   = 1'b0 ;\n     assign pi_stg2_prbs_rdlvl_cnt  = 'b0 ;\n     assign dbg_prbs_rdlvl          = 'h0 ;\n     assign prbs_final_dqs_tap_cnt_r  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_first_edge_taps  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_second_edge_taps = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign complex_pi_incdec_done  = 'b0;\n     assign complex_init_pi_dec_done  = 'b1;\n     assign num_samples_done_r      = 'b0;\nend\nendgenerate",
        "     assign mpr_rdlvl_done          = 1'b1;\n     assign mpr_last_byte_done      = 1'b1;\n     assign mpr_rnk_done            = 1'b1;\n     assign rdlvl_stg1_done         = 1'b1;\n     assign rdlvl_stg1_rank_done    = 1'b1;\n     assign rdlvl_last_byte_done    = 1'b1;\n     assign pi_fine_dly_dec_done    = 1'b1;\n     assign rdlvl_prech_req         = 1'b0;\n     assign rdlvl_stg1_err          = 1'b0;\n     assign mpr_rdlvl_err           = 1'b0;\n     assign rdlvl_err               = 1'b0;\n     assign rdlvl_assrt_common      = 1'b0;\n     assign rdlvl_pi_stg2_f_en      = 1'b0;\n     assign rdlvl_pi_stg2_f_incdec  = 1'b0;\n     assign pi_stg2_rdlvl_cnt       = 'h0;\n     assign idelay_ce_int           = 1'b0;\n     assign idelay_inc_int          = 1'b0;\n     assign rdlvl_pi_incdec         = 1'b0;\n     assign dbg_phy_rdlvl           = 'h0;",
        "end else begin:ddr_phy_rdlvl_off\n\n     assign mpr_rdlvl_done          = 1'b1;\n     assign mpr_last_byte_done      = 1'b1;\n     assign mpr_rnk_done            = 1'b1;\n     assign rdlvl_stg1_done         = 1'b1;\n     assign rdlvl_stg1_rank_done    = 1'b1;\n     assign rdlvl_last_byte_done    = 1'b1;\n     assign pi_fine_dly_dec_done    = 1'b1;\n     assign rdlvl_prech_req         = 1'b0;\n     assign rdlvl_stg1_err          = 1'b0;\n     assign mpr_rdlvl_err           = 1'b0;\n     assign rdlvl_err               = 1'b0;\n     assign rdlvl_assrt_common      = 1'b0;\n     assign rdlvl_pi_stg2_f_en      = 1'b0;\n     assign rdlvl_pi_stg2_f_incdec  = 1'b0;\n     assign pi_stg2_rdlvl_cnt       = 'h0;\n     assign idelay_ce_int           = 1'b0;\n     assign idelay_inc_int          = 1'b0;\n     assign rdlvl_pi_incdec         = 1'b0;\n     assign dbg_phy_rdlvl           = 'h0;\n     assign dbg_cpt_first_edge_cnt  = 'h0;\n     assign dbg_cpt_second_edge_cnt = 'h0;\n     assign dbg_cpt_tap_cnt         = 'h0;\n     assign dbg_dq_idelay_tap_cnt   = 'h0;\n\nend",
        "if (SKIP_CALIB == \"FALSE\") begin:ddr_phy_rdlvl_gen\n  mig_7series_v4_1_ddr_phy_rdlvl #\n    (\n     .TCQ             (TCQ),\n     .nCK_PER_CLK     (nCK_PER_CLK),\n     .CLK_PERIOD      (CLK_PERIOD),\n     .DQ_WIDTH        (DQ_WIDTH),\n     .DQS_CNT_WIDTH   (DQS_CNT_WIDTH),\n     .DQS_WIDTH       (DQS_WIDTH),\n     .DRAM_WIDTH      (DRAM_WIDTH),\n     .RANKS           (1),\n     .PER_BIT_DESKEW  (PER_BIT_DESKEW),\n     .SIM_CAL_OPTION  (SIM_CAL_OPTION),\n     .DEBUG_PORT      (DEBUG_PORT),\n     .DRAM_TYPE       (DRAM_TYPE),\n     .OCAL_EN         (OCAL_EN),\n     .IDELAY_ADJ      (IDELAY_ADJ),\n     .PI_DIV2_INCDEC  (PI_DIV2_INCDEC)\n     )\n    u_ddr_phy_rdlvl\n      (\n       .clk                     (clk),\n       .rst                     (rst),\n       .mpr_rdlvl_done          (mpr_rdlvl_done),\n       .mpr_rdlvl_start         (mpr_rdlvl_start),\n       .mpr_last_byte_done      (mpr_last_byte_done),\n       .mpr_rnk_done            (mpr_rnk_done),\n       .rdlvl_stg1_start        (rdlvl_stg1_start),\n       .rdlvl_stg1_done         (rdlvl_stg1_done),\n       .rdlvl_stg1_rnk_done     (rdlvl_stg1_rank_done),\n       .rdlvl_stg1_err          (rdlvl_stg1_err),\n       .mpr_rdlvl_err           (mpr_rdlvl_err),\n       .rdlvl_err               (rdlvl_err),\n       .rdlvl_prech_req         (rdlvl_prech_req),\n       .rdlvl_last_byte_done    (rdlvl_last_byte_done),\n       .rdlvl_assrt_common      (rdlvl_assrt_common),\n       .prech_done              (prech_done),\n       .phy_if_empty            (phy_if_empty),\n       .idelaye2_init_val       (idelaye2_init_val),\n       .rd_data                 (phy_rddata),\n       .pi_en_stg2_f            (rdlvl_pi_stg2_f_en),\n       .pi_stg2_f_incdec        (rdlvl_pi_stg2_f_incdec),\n       .pi_stg2_load            (pi_stg2_load),\n       .pi_stg2_reg_l           (pi_stg2_reg_l),\n       .dqs_po_dec_done         (dqs_po_dec_done),\n       .pi_counter_read_val     (pi_counter_read_val),\n       .pi_fine_dly_dec_done    (pi_fine_dly_dec_done),\n       .idelay_ce               (idelay_ce_int),\n       .idelay_inc              (idelay_inc_int),\n       .idelay_ld               (idelay_ld),\n       .wrcal_cnt               (po_stg2_wrcal_cnt),\n       .pi_stg2_rdlvl_cnt       (pi_stg2_rdlvl_cnt),\n       .dlyval_dq               (dlyval_dq),\n       .rdlvl_pi_incdec         (rdlvl_pi_incdec),\n       .dbg_cpt_first_edge_cnt  (dbg_cpt_first_edge_cnt),\n       .dbg_cpt_second_edge_cnt (dbg_cpt_second_edge_cnt),\n       .dbg_cpt_tap_cnt         (dbg_cpt_tap_cnt),\n       .dbg_dq_idelay_tap_cnt   (dbg_dq_idelay_tap_cnt),\n       .dbg_idel_up_all         (dbg_idel_up_all),\n       .dbg_idel_down_all       (dbg_idel_down_all),\n       .dbg_idel_up_cpt         (dbg_idel_up_cpt),\n       .dbg_idel_down_cpt       (dbg_idel_down_cpt),\n       .dbg_sel_idel_cpt        (dbg_sel_idel_cpt),\n       .dbg_sel_all_idel_cpt    (dbg_sel_all_idel_cpt),\n       .dbg_phy_rdlvl           (dbg_phy_rdlvl)\n       );",
        "generate\nif (SKIP_CALIB == \"FALSE\") begin:ddr_phy_rdlvl_gen\n  mig_7series_v4_1_ddr_phy_rdlvl #\n    (\n     .TCQ             (TCQ),\n     .nCK_PER_CLK     (nCK_PER_CLK),\n     .CLK_PERIOD      (CLK_PERIOD),\n     .DQ_WIDTH        (DQ_WIDTH),\n     .DQS_CNT_WIDTH   (DQS_CNT_WIDTH),\n     .DQS_WIDTH       (DQS_WIDTH),\n     .DRAM_WIDTH      (DRAM_WIDTH),\n     .RANKS           (1),\n     .PER_BIT_DESKEW  (PER_BIT_DESKEW),\n     .SIM_CAL_OPTION  (SIM_CAL_OPTION),\n     .DEBUG_PORT      (DEBUG_PORT),\n     .DRAM_TYPE       (DRAM_TYPE),\n     .OCAL_EN         (OCAL_EN),\n     .IDELAY_ADJ      (IDELAY_ADJ),\n     .PI_DIV2_INCDEC  (PI_DIV2_INCDEC)\n     )\n    u_ddr_phy_rdlvl\n      (\n       .clk                     (clk),\n       .rst                     (rst),\n       .mpr_rdlvl_done          (mpr_rdlvl_done),\n       .mpr_rdlvl_start         (mpr_rdlvl_start),\n       .mpr_last_byte_done      (mpr_last_byte_done),\n       .mpr_rnk_done            (mpr_rnk_done),\n       .rdlvl_stg1_start        (rdlvl_stg1_start),\n       .rdlvl_stg1_done         (rdlvl_stg1_done),\n       .rdlvl_stg1_rnk_done     (rdlvl_stg1_rank_done),\n       .rdlvl_stg1_err          (rdlvl_stg1_err),\n       .mpr_rdlvl_err           (mpr_rdlvl_err),\n       .rdlvl_err               (rdlvl_err),\n       .rdlvl_prech_req         (rdlvl_prech_req),\n       .rdlvl_last_byte_done    (rdlvl_last_byte_done),\n       .rdlvl_assrt_common      (rdlvl_assrt_common),\n       .prech_done              (prech_done),\n       .phy_if_empty            (phy_if_empty),\n       .idelaye2_init_val       (idelaye2_init_val),\n       .rd_data                 (phy_rddata),\n       .pi_en_stg2_f            (rdlvl_pi_stg2_f_en),\n       .pi_stg2_f_incdec        (rdlvl_pi_stg2_f_incdec),\n       .pi_stg2_load            (pi_stg2_load),\n       .pi_stg2_reg_l           (pi_stg2_reg_l),\n       .dqs_po_dec_done         (dqs_po_dec_done),\n       .pi_counter_read_val     (pi_counter_read_val),\n       .pi_fine_dly_dec_done    (pi_fine_dly_dec_done),\n       .idelay_ce               (idelay_ce_int),\n       .idelay_inc              (idelay_inc_int),\n       .idelay_ld               (idelay_ld),\n       .wrcal_cnt               (po_stg2_wrcal_cnt),\n       .pi_stg2_rdlvl_cnt       (pi_stg2_rdlvl_cnt),\n       .dlyval_dq               (dlyval_dq),\n       .rdlvl_pi_incdec         (rdlvl_pi_incdec),\n       .dbg_cpt_first_edge_cnt  (dbg_cpt_first_edge_cnt),\n       .dbg_cpt_second_edge_cnt (dbg_cpt_second_edge_cnt),\n       .dbg_cpt_tap_cnt         (dbg_cpt_tap_cnt),\n       .dbg_dq_idelay_tap_cnt   (dbg_dq_idelay_tap_cnt),\n       .dbg_idel_up_all         (dbg_idel_up_all),\n       .dbg_idel_down_all       (dbg_idel_down_all),\n       .dbg_idel_up_cpt         (dbg_idel_up_cpt),\n       .dbg_idel_down_cpt       (dbg_idel_down_cpt),\n       .dbg_sel_idel_cpt        (dbg_sel_idel_cpt),\n       .dbg_sel_all_idel_cpt    (dbg_sel_all_idel_cpt),\n       .dbg_phy_rdlvl           (dbg_phy_rdlvl)\n       );\nend else begin:ddr_phy_rdlvl_off\n\n     assign mpr_rdlvl_done          = 1'b1;\n     assign mpr_last_byte_done      = 1'b1;\n     assign mpr_rnk_done            = 1'b1;\n     assign rdlvl_stg1_done         = 1'b1;\n     assign rdlvl_stg1_rank_done    = 1'b1;\n     assign rdlvl_last_byte_done    = 1'b1;\n     assign pi_fine_dly_dec_done    = 1'b1;\n     assign rdlvl_prech_req         = 1'b0;\n     assign rdlvl_stg1_err          = 1'b0;\n     assign mpr_rdlvl_err           = 1'b0;\n     assign rdlvl_err               = 1'b0;\n     assign rdlvl_assrt_common      = 1'b0;\n     assign rdlvl_pi_stg2_f_en      = 1'b0;\n     assign rdlvl_pi_stg2_f_incdec  = 1'b0;\n     assign pi_stg2_rdlvl_cnt       = 'h0;\n     assign idelay_ce_int           = 1'b0;\n     assign idelay_inc_int          = 1'b0;\n     assign rdlvl_pi_incdec         = 1'b0;\n     assign dbg_phy_rdlvl           = 'h0;\n     assign dbg_cpt_first_edge_cnt  = 'h0;\n     assign dbg_cpt_second_edge_cnt = 'h0;\n     assign dbg_cpt_tap_cnt         = 'h0;\n     assign dbg_dq_idelay_tap_cnt   = 'h0;\n\nend\nendgenerate",
        " generate\n   if(DQSFOUND_CAL == \"RIGHT\") begin: dqsfind_calib_right\n     mig_7series_v4_1_ddr_phy_dqs_found_cal #\n        (\n         .TCQ              (TCQ),\n         .nCK_PER_CLK      (nCK_PER_CLK),\n         .nCL              (nCL),\n         .AL               (AL),\n         .nCWL             (nCWL),\n         \n         .RANKS            (1),\n         .DQS_CNT_WIDTH    (DQS_CNT_WIDTH),\n         .DQS_WIDTH        (DQS_WIDTH),\n         .DRAM_WIDTH       (DRAM_WIDTH),\n         .REG_CTRL         (REG_CTRL),\n         .SIM_CAL_OPTION   (SIM_CAL_OPTION),\n         .DRAM_TYPE        (DRAM_TYPE),\n         .NUM_DQSFOUND_CAL (NUM_DQSFOUND_CAL),\n         .N_CTL_LANES      (DQS_FOUND_N_CTL_LANES),\n         .HIGHEST_LANE     (HIGHEST_LANE),\n         .HIGHEST_BANK     (HIGHEST_BANK),\n         .BYTE_LANES_B0    (BYTE_LANES_B0),\n         .BYTE_LANES_B1    (BYTE_LANES_B1),\n         .BYTE_LANES_B2    (BYTE_LANES_B2),\n         .BYTE_LANES_B3    (BYTE_LANES_B3),\n         .BYTE_LANES_B4    (BYTE_LANES_B4),\n         .DATA_CTL_B0      (DATA_CTL_B0),\n         .DATA_CTL_B1      (DATA_CTL_B1),\n         .DATA_CTL_B2      (DATA_CTL_B2),\n         .DATA_CTL_B3      (DATA_CTL_B3),\n         .DATA_CTL_B4      (DATA_CTL_B4)\n         )\n         u_ddr_phy_dqs_found_cal\n           (\n            .clk                       (clk),\n            .rst                       (rst),\n            .pi_dqs_found_start        (pi_dqs_found_start),\n            .dqsfound_retry            (dqsfound_retry),\n            .detect_pi_found_dqs       (detect_pi_found_dqs),\n            .prech_done                (prech_done),\n            .pi_dqs_found_lanes        (pi_dqs_found_lanes),\n            .pi_rst_stg1_cal           (pi_rst_stg1_cal),\n            .rd_data_offset_0          (rd_data_offset_0),\n            .rd_data_offset_1          (rd_data_offset_1),\n            .rd_data_offset_2          (rd_data_offset_2),\n            .pi_dqs_found_rank_done    (pi_dqs_found_rank_done),\n            .pi_dqs_found_done         (pi_dqs_found_done),\n            .dqsfound_retry_done       (dqsfound_retry_done),\n            .dqs_found_prech_req       (dqs_found_prech_req),\n            .pi_dqs_found_err          (pi_dqs_found_err),\n            .rd_data_offset_ranks_0    (rd_data_offset_ranks_0),\n            .rd_data_offset_ranks_1    (rd_data_offset_ranks_1),\n            .rd_data_offset_ranks_2    (rd_data_offset_ranks_2),\n            .rd_data_offset_ranks_mc_0 (rd_data_offset_ranks_mc_0),\n            .rd_data_offset_ranks_mc_1 (rd_data_offset_ranks_mc_1),\n            .rd_data_offset_ranks_mc_2 (rd_data_offset_ranks_mc_2),\n            .po_counter_read_val       (po_counter_read_val),\n            .rd_data_offset_cal_done   (rd_data_offset_cal_done),\n            .fine_adjust_done          (fine_adjust_done),\n            .fine_adjust_lane_cnt      (fine_adjust_lane_cnt),\n            .ck_po_stg2_f_indec        (ck_po_stg2_f_indec),\n            .ck_po_stg2_f_en           (ck_po_stg2_f_en),\n            .dbg_dqs_found_cal         (dbg_dqs_found_cal)\n            );\n   end else begin: dqsfind_calib_left\n     mig_7series_v4_1_ddr_phy_dqs_found_cal_hr #\n        (\n         .TCQ              (TCQ),\n         .nCK_PER_CLK      (nCK_PER_CLK),\n         .nCL              (nCL),\n         .AL               (AL),\n         .nCWL             (nCWL),\n         \n         .RANKS            (1),\n         .DQS_CNT_WIDTH    (DQS_CNT_WIDTH),\n         .DQS_WIDTH        (DQS_WIDTH),\n         .DRAM_WIDTH       (DRAM_WIDTH),\n         .REG_CTRL         (REG_CTRL),\n         .SIM_CAL_OPTION   (SIM_CAL_OPTION),\n         .DRAM_TYPE        (DRAM_TYPE),\n         .NUM_DQSFOUND_CAL (NUM_DQSFOUND_CAL),\n         .N_CTL_LANES      (DQS_FOUND_N_CTL_LANES),\n         .HIGHEST_LANE     (HIGHEST_LANE),\n         .HIGHEST_BANK     (HIGHEST_BANK),\n         .BYTE_LANES_B0    (BYTE_LANES_B0),\n         .BYTE_LANES_B1    (BYTE_LANES_B1),\n         .BYTE_LANES_B2    (BYTE_LANES_B2),\n         .BYTE_LANES_B3    (BYTE_LANES_B3),\n         .BYTE_LANES_B4    (BYTE_LANES_B4),\n         .DATA_CTL_B0      (DATA_CTL_B0),\n         .DATA_CTL_B1      (DATA_CTL_B1),\n         .DATA_CTL_B2      (DATA_CTL_B2),\n         .DATA_CTL_B3      (DATA_CTL_B3),\n         .DATA_CTL_B4      (DATA_CTL_B4)\n         )\n         u_ddr_phy_dqs_found_cal_hr\n           (\n            .clk                       (clk),\n            .rst                       (rst),\n            .pi_dqs_found_start        (pi_dqs_found_start),\n            .dqsfound_retry            (dqsfound_retry),\n            .detect_pi_found_dqs       (detect_pi_found_dqs),\n            .prech_done                (prech_done),\n            .pi_dqs_found_lanes        (pi_dqs_found_lanes),\n            .pi_rst_stg1_cal           (pi_rst_stg1_cal),\n            .rd_data_offset_0          (rd_data_offset_0),\n            .rd_data_offset_1          (rd_data_offset_1),\n            .rd_data_offset_2          (rd_data_offset_2),\n            .pi_dqs_found_rank_done    (pi_dqs_found_rank_done),\n            .pi_dqs_found_done         (pi_dqs_found_done),\n            .dqsfound_retry_done       (dqsfound_retry_done),\n            .dqs_found_prech_req       (dqs_found_prech_req),\n            .pi_dqs_found_err          (pi_dqs_found_err),\n            .rd_data_offset_ranks_0    (rd_data_offset_ranks_0),\n            .rd_data_offset_ranks_1    (rd_data_offset_ranks_1),\n            .rd_data_offset_ranks_2    (rd_data_offset_ranks_2),\n            .rd_data_offset_ranks_mc_0 (rd_data_offset_ranks_mc_0),\n            .rd_data_offset_ranks_mc_1 (rd_data_offset_ranks_mc_1),\n            .rd_data_offset_ranks_mc_2 (rd_data_offset_ranks_mc_2),\n            .po_counter_read_val       (po_counter_read_val),\n            .rd_data_offset_cal_done   (rd_data_offset_cal_done),\n            .fine_adjust_done          (fine_adjust_done),\n            .fine_adjust_lane_cnt      (fine_adjust_lane_cnt),\n            .ck_po_stg2_f_indec        (ck_po_stg2_f_indec),\n            .ck_po_stg2_f_en           (ck_po_stg2_f_en),\n            .dbg_dqs_found_cal         (dbg_dqs_found_cal)\n            );\n   end\n endgenerate",
        "       assign   wrlvl_final = 'b0;\n       assign   psen        = 'b0;\n       assign   psincdec    = 'b0;\n       assign   po_stg23_sel = 'b0;\n       assign   po_stg23_incdec = 'b0;\n       assign   po_en_stg23 = 'b0;\n       assign   oclkdelay_calib_cnt = 'b0;\n       assign   oclk_prech_req = 'b0;\n       assign   oclk_calib_resume = 'b0;\n       assign   oclkdelay_calib_done = 1'b1;\n       assign   dbg_phy_oclkdelay_cal = 'h0;\n       assign   dbg_oclkdelay_rd_data = 'h0;",
        "     end else begin : oclk_calib_disabled\n\n       assign   wrlvl_final = 'b0;\n       assign   psen        = 'b0;\n       assign   psincdec    = 'b0;\n       assign   po_stg23_sel = 'b0;\n       assign   po_stg23_incdec = 'b0;\n       assign   po_en_stg23 = 'b0;\n       assign   oclkdelay_calib_cnt = 'b0;\n       assign   oclk_prech_req = 'b0;\n       assign   oclk_calib_resume = 'b0;\n       assign   oclkdelay_calib_done = 1'b1;\n       assign   dbg_phy_oclkdelay_cal = 'h0;\n       assign   dbg_oclkdelay_rd_data = 'h0;\n\n     end",
        "    )\n     u_ddr_phy_oclkdelay_cal\n       (\n    \n    .prbs_ignore_first_byte           (prbs_ignore_first_byte),\n    .prbs_ignore_last_bytes           (prbs_ignore_last_bytes),\n    .complex_oclkdelay_calib_done   (complex_oclkdelay_calib_done),\n    .dbg_oclkdelay_rd_data          (dbg_oclkdelay_rd_data[16*DRAM_WIDTH-1:0]),\n    .dbg_phy_oclkdelay_cal          (dbg_phy_oclkdelay_cal[255:0]),\n    .lim2init_write_request         (lim2init_write_request),\n    .lim_done                       (lim_done),\n    .oclk_calib_resume              (oclk_calib_resume),\n    .oclk_prech_req                 (oclk_prech_req),\n    .oclkdelay_calib_cnt            (oclkdelay_calib_cnt[DQS_CNT_WIDTH:0]),\n    .oclkdelay_calib_done           (oclkdelay_calib_done),\n    .po_en_stg23                    (po_en_stg23),\n    .po_stg23_incdec                (po_stg23_incdec),\n    .po_stg23_sel                   (po_stg23_sel),\n    .psen                           (psen),\n    .psincdec                       (psincdec),\n    .wrlvl_final                    (wrlvl_final),\n    .rd_victim_sel                  (complex_ocal_rd_victim_sel),\n    .ocal_num_samples_done_r        (complex_ocal_num_samples_done_r),\n    .complex_wrlvl_final            (complex_wrlvl_final),\n    .poc_error                      (poc_error),\n    \n    .clk                            (clk),\n    .complex_oclkdelay_calib_start  (complex_oclkdelay_calib_start_w),\n    .metaQ                          (pd_out),\n    \n    .po_counter_read_val            (po_counter_read_val),\n    .oclkdelay_calib_start          (oclkdelay_calib_start),\n    .oclkdelay_init_val             (oclkdelay_init_val[5:0]),\n    .poc_sample_pd                  (poc_sample_pd),\n    .phy_rddata                     (phy_rddata[2*nCK_PER_CLK*DQ_WIDTH-1:0]),\n    .phy_rddata_en                  (phy_rddata_en),\n    .prbs_o                         (prbs_o[2*nCK_PER_CLK*DQ_WIDTH-1:0]),\n    .prech_done                     (prech_done),\n    .psdone                         (psdone),\n    .rst                            (rst),\n    .wl_po_fine_cnt                 (wl_po_fine_cnt[6*DQS_WIDTH-1:0]),\n    .ocal_num_samples_inc           (complex_ocal_num_samples_inc),\n    .oclkdelay_center_calib_start   (oclkdelay_center_calib_start),\n    .oclk_center_write_resume       (oclk_center_write_resume),\n    .oclkdelay_center_calib_done    (oclkdelay_center_calib_done),\n    .dbg_ocd_lim                    (dbg_ocd_lim),\n    .dbg_poc                         (dbg_poc[1023:0]) );",
        "   if((WRLVL == \"ON\") && (OCAL_EN == \"ON\")) begin: oclk_calib\n\n     localparam SAMPCNTRWIDTH = 17;\n     localparam SAMPLES = (SIM_CAL_OPTION==\"NONE\") ? 512 : 4; \n     localparam TAPCNTRWIDTH = clogb2(TAPSPERKCLK);\n     localparam MMCM_SAMP_WAIT = (SIM_CAL_OPTION==\"NONE\") ? 256 : 10;\n     localparam OCAL_SIMPLE_SCAN_SAMPS = (SIM_CAL_OPTION==\"NONE\") ? 512 : 1; \n     localparam POC_PCT_SAMPS_SOLID = 80;\n     localparam SCAN_PCT_SAMPS_SOLID = 95;\n\n     mig_7series_v4_1_ddr_phy_oclkdelay_cal #\n       (\n    \n    .DQS_CNT_WIDTH      (DQS_CNT_WIDTH),\n    .DQS_WIDTH          (DQS_WIDTH),\n    .DQ_WIDTH           (DQ_WIDTH),\n    \n    .DRAM_WIDTH         (DRAM_WIDTH),\n    \n    .OCAL_SIMPLE_SCAN_SAMPS (OCAL_SIMPLE_SCAN_SAMPS),\n    .PCT_SAMPS_SOLID                (POC_PCT_SAMPS_SOLID),\n    .POC_USE_METASTABLE_SAMP        (POC_USE_METASTABLE_SAMP),\n    .SCAN_PCT_SAMPS_SOLID           (SCAN_PCT_SAMPS_SOLID),\n    .SAMPCNTRWIDTH      (SAMPCNTRWIDTH),\n    .SAMPLES            (SAMPLES),\n    .MMCM_SAMP_WAIT             (MMCM_SAMP_WAIT),\n    .SIM_CAL_OPTION             (SIM_CAL_OPTION),\n    .TAPCNTRWIDTH               (TAPCNTRWIDTH),\n    .TAPSPERKCLK                (TAPSPERKCLK),\n    .TCQ                (TCQ),\n    .nCK_PER_CLK                (nCK_PER_CLK),\n    .BYPASS_COMPLEX_OCAL        (BYPASS_COMPLEX_OCAL)\n    ",
        "   generate\n   if((WRLVL == \"ON\") && (OCAL_EN == \"ON\")) begin: oclk_calib\n\n     localparam SAMPCNTRWIDTH = 17;\n     localparam SAMPLES = (SIM_CAL_OPTION==\"NONE\") ? 512 : 4; \n     localparam TAPCNTRWIDTH = clogb2(TAPSPERKCLK);\n     localparam MMCM_SAMP_WAIT = (SIM_CAL_OPTION==\"NONE\") ? 256 : 10;\n     localparam OCAL_SIMPLE_SCAN_SAMPS = (SIM_CAL_OPTION==\"NONE\") ? 512 : 1; \n     localparam POC_PCT_SAMPS_SOLID = 80;\n     localparam SCAN_PCT_SAMPS_SOLID = 95;\n\n     mig_7series_v4_1_ddr_phy_oclkdelay_cal #\n       (\n    \n    .DQS_CNT_WIDTH      (DQS_CNT_WIDTH),\n    .DQS_WIDTH          (DQS_WIDTH),\n    .DQ_WIDTH           (DQ_WIDTH),\n    \n    .DRAM_WIDTH         (DRAM_WIDTH),\n    \n    .OCAL_SIMPLE_SCAN_SAMPS (OCAL_SIMPLE_SCAN_SAMPS),\n    .PCT_SAMPS_SOLID                (POC_PCT_SAMPS_SOLID),\n    .POC_USE_METASTABLE_SAMP        (POC_USE_METASTABLE_SAMP),\n    .SCAN_PCT_SAMPS_SOLID           (SCAN_PCT_SAMPS_SOLID),\n    .SAMPCNTRWIDTH      (SAMPCNTRWIDTH),\n    .SAMPLES            (SAMPLES),\n    .MMCM_SAMP_WAIT             (MMCM_SAMP_WAIT),\n    .SIM_CAL_OPTION             (SIM_CAL_OPTION),\n    .TAPCNTRWIDTH               (TAPCNTRWIDTH),\n    .TAPSPERKCLK                (TAPSPERKCLK),\n    .TCQ                (TCQ),\n    .nCK_PER_CLK                (nCK_PER_CLK),\n    .BYPASS_COMPLEX_OCAL        (BYPASS_COMPLEX_OCAL)\n    \n    )\n     u_ddr_phy_oclkdelay_cal\n       (\n    \n    .prbs_ignore_first_byte           (prbs_ignore_first_byte),\n    .prbs_ignore_last_bytes           (prbs_ignore_last_bytes),\n    .complex_oclkdelay_calib_done   (complex_oclkdelay_calib_done),\n    .dbg_oclkdelay_rd_data          (dbg_oclkdelay_rd_data[16*DRAM_WIDTH-1:0]),\n    .dbg_phy_oclkdelay_cal          (dbg_phy_oclkdelay_cal[255:0]),\n    .lim2init_write_request         (lim2init_write_request),\n    .lim_done                       (lim_done),\n    .oclk_calib_resume              (oclk_calib_resume),\n    .oclk_prech_req                 (oclk_prech_req),\n    .oclkdelay_calib_cnt            (oclkdelay_calib_cnt[DQS_CNT_WIDTH:0]),\n    .oclkdelay_calib_done           (oclkdelay_calib_done),\n    .po_en_stg23                    (po_en_stg23),\n    .po_stg23_incdec                (po_stg23_incdec),\n    .po_stg23_sel                   (po_stg23_sel),\n    .psen                           (psen),\n    .psincdec                       (psincdec),\n    .wrlvl_final                    (wrlvl_final),\n    .rd_victim_sel                  (complex_ocal_rd_victim_sel),\n    .ocal_num_samples_done_r        (complex_ocal_num_samples_done_r),\n    .complex_wrlvl_final            (complex_wrlvl_final),\n    .poc_error                      (poc_error),\n    \n    .clk                            (clk),\n    .complex_oclkdelay_calib_start  (complex_oclkdelay_calib_start_w),\n    .metaQ                          (pd_out),\n    \n    .po_counter_read_val            (po_counter_read_val),\n    .oclkdelay_calib_start          (oclkdelay_calib_start),\n    .oclkdelay_init_val             (oclkdelay_init_val[5:0]),\n    .poc_sample_pd                  (poc_sample_pd),\n    .phy_rddata                     (phy_rddata[2*nCK_PER_CLK*DQ_WIDTH-1:0]),\n    .phy_rddata_en                  (phy_rddata_en),\n    .prbs_o                         (prbs_o[2*nCK_PER_CLK*DQ_WIDTH-1:0]),\n    .prech_done                     (prech_done),\n    .psdone                         (psdone),\n    .rst                            (rst),\n    .wl_po_fine_cnt                 (wl_po_fine_cnt[6*DQS_WIDTH-1:0]),\n    .ocal_num_samples_inc           (complex_ocal_num_samples_inc),\n    .oclkdelay_center_calib_start   (oclkdelay_center_calib_start),\n    .oclk_center_write_resume       (oclk_center_write_resume),\n    .oclkdelay_center_calib_done    (oclkdelay_center_calib_done),\n    .dbg_ocd_lim                    (dbg_ocd_lim),\n    .dbg_poc                         (dbg_poc[1023:0]) );\n\n     end else begin : oclk_calib_disabled\n\n       assign   wrlvl_final = 'b0;\n       assign   psen        = 'b0;\n       assign   psincdec    = 'b0;\n       assign   po_stg23_sel = 'b0;\n       assign   po_stg23_incdec = 'b0;\n       assign   po_en_stg23 = 'b0;\n       assign   oclkdelay_calib_cnt = 'b0;\n       assign   oclk_prech_req = 'b0;\n       assign   oclk_calib_resume = 'b0;\n       assign   oclkdelay_calib_done = 1'b1;\n       assign   dbg_phy_oclkdelay_cal = 'h0;\n       assign   dbg_oclkdelay_rd_data = 'h0;\n\n     end\n   endgenerate",
        "  generate\n    if ((WRLVL == \"ON\") && (SKIP_CALIB == \"FALSE\")) begin: mb_wrlvl_inst\n\n      mig_7series_v4_1_ddr_phy_wrlvl #\n        (\n         .TCQ               (TCQ),\n         .DQS_CNT_WIDTH     (DQS_CNT_WIDTH),\n         .DQ_WIDTH          (DQ_WIDTH),\n         .DQS_WIDTH         (DQS_WIDTH),\n         .DRAM_WIDTH        (DRAM_WIDTH),\n         .RANKS             (1),\n         .CLK_PERIOD        (CLK_PERIOD),\n         .nCK_PER_CLK       (nCK_PER_CLK),\n         .SIM_CAL_OPTION    (SIM_CAL_OPTION)\n         )\n        u_ddr_phy_wrlvl\n          (\n           .clk                         (clk),\n           .rst                         (rst),\n           .phy_ctl_ready               (phy_ctl_ready),\n           .wr_level_start              (wrlvl_start),\n           .wl_sm_start                 (wl_sm_start),\n           .wrlvl_byte_redo             (wrlvl_byte_redo),\n           .wrcal_cnt                   (po_stg2_wrcal_cnt),\n           .early1_data                 (early1_data),\n           .early2_data                 (early2_data),\n           .wrlvl_final                 (wrlvl_final_mux),\n           .oclkdelay_calib_cnt         (oclkdelay_calib_cnt),\n           .wrlvl_byte_done             (wrlvl_byte_done),\n           .oclkdelay_calib_done        (oclkdelay_calib_done),\n           .rd_data_rise0               (phy_rddata[DQ_WIDTH-1:0]),\n           .dqs_po_dec_done             (dqs_po_dec_done),\n           .phy_ctl_rdy_dly             (phy_ctl_rdy_dly),\n           .wr_level_done               (wrlvl_done),\n           .wrlvl_rank_done             (wrlvl_rank_done),\n           .done_dqs_tap_inc            (done_dqs_tap_inc),\n           .dqs_po_stg2_f_incdec        (dqs_po_stg2_f_incdec),\n           .dqs_po_en_stg2_f            (dqs_po_en_stg2_f),\n           .dqs_wl_po_stg2_c_incdec     (dqs_wl_po_stg2_c_incdec),\n           .dqs_wl_po_en_stg2_c         (dqs_wl_po_en_stg2_c),\n           .po_counter_read_val         (po_counter_read_val),\n           .po_stg2_wl_cnt              (po_stg2_wl_cnt),\n           .wrlvl_err                   (wrlvl_err),\n           .wl_po_coarse_cnt            (wl_po_coarse_cnt),\n           .wl_po_fine_cnt              (wl_po_fine_cnt),\n           .dbg_wl_tap_cnt              (dbg_tap_cnt_during_wrlvl),\n           .dbg_wl_edge_detect_valid    (dbg_wl_edge_detect_valid),\n           .dbg_rd_data_edge_detect     (dbg_rd_data_edge_detect),\n           .dbg_dqs_count               (),\n           .dbg_wl_state                (),\n           .dbg_wrlvl_fine_tap_cnt      (dbg_wrlvl_fine_tap_cnt),\n           .dbg_wrlvl_coarse_tap_cnt    (dbg_wrlvl_coarse_tap_cnt),\n           .dbg_phy_wrlvl               (dbg_phy_wrlvl)\n           );\n\n\n        mig_7series_v4_1_ddr_phy_ck_addr_cmd_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES),\n          .SIM_CAL_OPTION(SIM_CAL_OPTION)\n          )\n          u_ddr_phy_ck_addr_cmd_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .cmd_delay_start            (dqs_po_dec_done & pi_fine_dly_dec_done),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_stg2_f_incdec           (cmd_po_stg2_f_incdec),\n             .po_en_stg2_f               (cmd_po_en_stg2_f),\n             .po_stg2_c_incdec           (cmd_po_stg2_c_incdec),\n             .po_en_stg2_c               (cmd_po_en_stg2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done)\n            );\n\n      assign cmd_po_stg2_incdec_ddr2_c = 1'b0;\n      assign cmd_po_en_stg2_ddr2_c = 1'b0;\n\n    end else if ((WRLVL == \"ON\") && (SKIP_CALIB == \"TRUE\")) begin: wrlvl_on_skip_calib\n\n        mig_7series_v4_1_ddr_phy_ck_addr_cmd_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES),\n          .SIM_CAL_OPTION(SIM_CAL_OPTION)\n          )\n          u_ddr_phy_ck_addr_cmd_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .cmd_delay_start            (skip_cal_po_pi_dec_done),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_stg2_f_incdec           (cmd_po_stg2_f_incdec),\n             .po_en_stg2_f               (cmd_po_en_stg2_f),\n             .po_stg2_c_incdec           (cmd_po_stg2_c_incdec),\n             .po_en_stg2_c               (cmd_po_en_stg2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done)\n            );\n\n      assign dqs_po_dec_done             = 1'b1;\n      assign wrlvl_byte_done             = 1'b1;\n      assign wrlvl_rank_done             = 1'b1;\n      assign phy_ctl_rdy_dly             = 1'b1;\n      assign done_dqs_tap_inc            = 1'b1;\n      assign po_stg2_wl_cnt              = 'h0;\n      assign wl_po_coarse_cnt            = 'h0;\n      assign wl_po_fine_cnt              = 'h0;\n      assign dbg_tap_cnt_during_wrlvl    = 'h0;\n      assign dbg_wl_edge_detect_valid    = 'h0;\n      assign dbg_rd_data_edge_detect     = 'h0;\n      assign dbg_wrlvl_fine_tap_cnt      = 'h0;\n      assign dbg_wrlvl_coarse_tap_cnt    = 'h0;\n      assign dbg_phy_wrlvl               = 'h0;\n\n      assign wrlvl_done   = 1'b1;\n      assign wrlvl_err    = 1'b0;\n      assign dqs_po_stg2_f_incdec = 1'b0;\n      assign dqs_po_en_stg2_f = 1'b0;\n      assign dqs_wl_po_en_stg2_c = 1'b0;\n      assign dqs_wl_po_stg2_c_incdec = 1'b0;\n\n      assign cmd_po_stg2_incdec_ddr2_c = 1'b0;\n      assign cmd_po_en_stg2_ddr2_c = 1'b0;\n\n    end else begin: mb_wrlvl_off\n\n        mig_7series_v4_1_ddr_phy_wrlvl_off_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .nCK_PER_CLK   (nCK_PER_CLK),\n          .CLK_PERIOD    (CLK_PERIOD),\n          .PO_INITIAL_DLY(60),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .DQS_WIDTH     (DQS_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES)\n          )\n          u_phy_wrlvl_off_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .pi_fine_dly_dec_done       (pi_fine_dly_dec_done),\n             .cmd_delay_start            (phy_ctl_ready),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_s2_incdec_f             (cmd_po_stg2_f_incdec),\n             .po_en_s2_f                 (cmd_po_en_stg2_f),\n             .po_s2_incdec_c             (cmd_po_stg2_incdec_ddr2_c),\n             .po_en_s2_c                 (cmd_po_en_stg2_ddr2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done),\n             .po_dec_done                (dqs_po_dec_done),\n             .phy_ctl_rdy_dly            (phy_ctl_rdy_dly)\n            );\n\n      assign wrlvl_byte_done             = 1'b1;\n      assign wrlvl_rank_done             = 1'b1;\n      assign po_stg2_wl_cnt              = 'h0;\n      assign wl_po_coarse_cnt            = 'h0;\n      assign wl_po_fine_cnt              = 'h0;\n      assign dbg_tap_cnt_during_wrlvl    = 'h0;\n      assign dbg_wl_edge_detect_valid    = 'h0;\n      assign dbg_rd_data_edge_detect     = 'h0;\n      assign dbg_wrlvl_fine_tap_cnt      = 'h0;\n      assign dbg_wrlvl_coarse_tap_cnt    = 'h0;\n      assign dbg_phy_wrlvl               = 'h0;\n\n      assign wrlvl_done   = 1'b1;\n      assign wrlvl_err    = 1'b0;\n      assign dqs_po_stg2_f_incdec = 1'b0;\n      assign dqs_po_en_stg2_f = 1'b0;\n      assign dqs_wl_po_en_stg2_c = 1'b0;\n      assign cmd_po_stg2_c_incdec = 1'b0;\n      assign dqs_wl_po_stg2_c_incdec = 1'b0;\n      assign cmd_po_en_stg2_c = 1'b0;\n\n    end\n  endgenerate",
        "  mig_7series_v4_1_ddr_phy_wrcal #\n    (\n     .TCQ            (TCQ),\n     .nCK_PER_CLK    (nCK_PER_CLK),\n     .CLK_PERIOD     (CLK_PERIOD),\n     .DQ_WIDTH       (DQ_WIDTH),\n     .DQS_CNT_WIDTH  (DQS_CNT_WIDTH),\n     .DQS_WIDTH      (DQS_WIDTH),\n     .DRAM_WIDTH     (DRAM_WIDTH),\n     .SIM_CAL_OPTION (SIM_CAL_OPTION)\n     )\n    u_ddr_phy_wrcal\n      (\n       .clk                         (clk),\n       .rst                         (rst),\n       .wrcal_start                 (wrcal_start),\n       .wrcal_rd_wait               (wrcal_rd_wait),\n       .wrcal_sanity_chk            (wrcal_sanity_chk),\n       .dqsfound_retry_done         (pi_dqs_found_done),\n       .dqsfound_retry              (dqsfound_retry),\n       .wrcal_read_req              (wrcal_read_req),\n       .wrcal_act_req               (wrcal_act_req),\n       .phy_rddata_en               (phy_rddata_en),\n       .wrcal_done                  (wrcal_done),\n       .wrcal_pat_err               (wrcal_pat_err),\n       .wrcal_prech_req             (wrcal_prech_req),\n       .temp_wrcal_done             (temp_wrcal_done),\n       .wrcal_sanity_chk_done       (wrcal_sanity_chk_done),\n       .prech_done                  (prech_done),\n       .rd_data                     (phy_rddata),\n       .wrcal_pat_resume            (wrcal_pat_resume),\n       .po_stg2_wrcal_cnt           (po_stg2_wrcal_cnt),\n       .phy_if_reset                (phy_if_reset_w),\n       .wl_po_coarse_cnt            (wl_po_coarse_cnt),\n       .wl_po_fine_cnt              (wl_po_fine_cnt),\n       .wrlvl_byte_redo             (wrlvl_byte_redo),\n       .wrlvl_byte_done             (wrlvl_byte_done),\n       .early1_data                 (early1_data),\n       .early2_data                 (early2_data),\n       .idelay_ld                   (idelay_ld),\n       .dbg_phy_wrcal               (dbg_phy_wrcal),\n       .dbg_final_po_fine_tap_cnt   (dbg_final_po_fine_tap_cnt),\n       .dbg_final_po_coarse_tap_cnt (dbg_final_po_coarse_tap_cnt)\n   );",
        "  mig_7series_v4_1_ddr_phy_init #\n    (\n     .tCK             (tCK),\n     .DDR3_VDD_OP_VOLT (DDR3_VDD_OP_VOLT),\n     .TCQ             (TCQ),\n     .nCK_PER_CLK     (nCK_PER_CLK),\n     .CLK_PERIOD      (CLK_PERIOD),\n     .DRAM_TYPE       (DRAM_TYPE),\n     .PRBS_WIDTH      (PRBS_WIDTH),\n     .BANK_WIDTH      (BANK_WIDTH),\n     .CA_MIRROR       (CA_MIRROR),\n     .COL_WIDTH       (COL_WIDTH),\n     .nCS_PER_RANK    (nCS_PER_RANK),\n     .DQ_WIDTH        (DQ_WIDTH),\n     .DQS_WIDTH       (DQS_WIDTH),\n     .DQS_CNT_WIDTH   (DQS_CNT_WIDTH),\n     .ROW_WIDTH       (ROW_WIDTH),\n     .CS_WIDTH        (CS_WIDTH),\n     .RANKS           (RANKS),\n     .CKE_WIDTH       (CKE_WIDTH),\n     .CALIB_ROW_ADD   (CALIB_ROW_ADD),\n     .CALIB_COL_ADD   (CALIB_COL_ADD),\n     .CALIB_BA_ADD    (CALIB_BA_ADD),\n     .AL              (AL),\n     .BURST_MODE      (BURST_MODE),\n     .BURST_TYPE      (BURST_TYPE),\n     .nCL             (nCL),\n     .nCWL            (nCWL),\n     .tRFC            (tRFC),\n     .REFRESH_TIMER   (REFRESH_TIMER),\n     .REFRESH_TIMER_WIDTH (REFRESH_TIMER_WIDTH),\n     .OUTPUT_DRV      (OUTPUT_DRV),\n     .REG_CTRL        (REG_CTRL),\n     .ADDR_CMD_MODE   (ADDR_CMD_MODE),\n     .RTT_NOM         (RTT_NOM),\n     .RTT_WR          (RTT_WR),\n     .WRLVL           (WRLVL),\n     .USE_ODT_PORT    (USE_ODT_PORT),\n     .DDR2_DQSN_ENABLE(DDR2_DQSN_ENABLE),\n     .nSLOTS          (nSLOTS),\n     .SIM_INIT_OPTION (SIM_INIT_OPTION),\n     .SIM_CAL_OPTION  (SIM_CAL_OPTION),\n     .CKE_ODT_AUX     (CKE_ODT_AUX),\n     .PRE_REV3ES      (PRE_REV3ES),\n     .TEST_AL         (TEST_AL),\n     .FIXED_VICTIM    (FIXED_VICTIM),\n     .BYPASS_COMPLEX_OCAL(BYPASS_COMPLEX_OCAL),\n     .SKIP_CALIB      (SKIP_CALIB)\n     )\n    u_ddr_phy_init\n      (\n       .clk                   (clk),\n       .rst                   (rst),\n       .prbs_o                (prbs_o),\n       .ck_addr_cmd_delay_done(ck_addr_cmd_delay_done),\n       .delay_incdec_done     (ck_addr_cmd_delay_done),\n       .pi_phase_locked_all   (pi_phase_locked_all),\n       .pi_phaselock_start    (pi_phaselock_start),\n       .pi_phase_locked_err   (phase_locked_err),\n       .pi_calib_done         (pi_calib_done),\n       .phy_if_empty          (phy_if_empty),\n       .phy_ctl_ready         (phy_ctl_ready),\n       .phy_ctl_full          (phy_ctl_full),\n       .phy_cmd_full          (phy_cmd_full),\n       .phy_data_full         (phy_data_full),\n       .calib_ctl_wren        (calib_ctl_wren),\n       .calib_cmd_wren        (calib_cmd_wren),\n       .calib_wrdata_en       (calib_wrdata_en),\n       .calib_seq             (calib_seq),\n       .calib_aux_out         (calib_aux_out),\n       .calib_rank_cnt        (calib_rank_cnt),\n       .calib_cas_slot        (calib_cas_slot),\n       .calib_data_offset_0   (calib_data_offset_0),\n       .calib_data_offset_1   (calib_data_offset_1),\n       .calib_data_offset_2   (calib_data_offset_2),\n       .calib_cmd             (calib_cmd),\n       .calib_cke             (calib_cke),\n       .calib_odt             (calib_odt),\n       .write_calib           (write_calib),\n       .read_calib            (read_calib),\n       .wrlvl_done            (wrlvl_done),\n       .wrlvl_rank_done       (wrlvl_rank_done),\n       .wrlvl_byte_done       (wrlvl_byte_done),\n       .wrlvl_byte_redo       (wrlvl_byte_redo),\n       .wrlvl_final           (wrlvl_final_mux),\n       .wrlvl_final_if_rst    (wrlvl_final_if_rst),\n       .oclkdelay_calib_start (oclkdelay_calib_start),\n       .oclkdelay_calib_done  (oclkdelay_calib_done),\n       .oclk_prech_req        (oclk_prech_req),\n       .oclk_calib_resume     (oclk_calib_resume),\n       .lim_wr_req            (lim2init_write_request),\n       .lim_done              (lim_done),\n       .complex_oclkdelay_calib_start (complex_oclkdelay_calib_start),\n       .complex_oclkdelay_calib_done  (complex_oclkdelay_calib_done_w),\n       .complex_oclk_calib_resume     (complex_oclk_calib_resume),\n       .complex_oclkdelay_calib_cnt   (complex_oclkdelay_calib_cnt),\n       .complex_sample_cnt_inc_ocal   (complex_sample_cnt_inc_ocal),\n       .complex_ocal_num_samples_inc  (complex_ocal_num_samples_inc),\n       .complex_ocal_num_samples_done_r (complex_ocal_num_samples_done_r),\n       .complex_ocal_reset_rd_addr      (complex_ocal_reset_rd_addr),\n       .complex_ocal_ref_req            (complex_ocal_ref_req),\n       .complex_ocal_ref_done           (complex_ocal_ref_done),\n       .done_dqs_tap_inc      (done_dqs_tap_inc),\n       .wl_sm_start           (wl_sm_start),\n       .wr_lvl_start          (wrlvl_start),\n       .slot_0_present        (slot_0_present),\n       .slot_1_present        (slot_1_present),\n       .mpr_rdlvl_done        (mpr_rdlvl_done),\n       .mpr_rdlvl_start       (mpr_rdlvl_start),\n       .mpr_last_byte_done    (mpr_last_byte_done),\n       .mpr_rnk_done          (mpr_rnk_done),\n       .mpr_end_if_reset      (mpr_end_if_reset),\n       .rdlvl_stg1_done       (rdlvl_stg1_done),\n       .rdlvl_stg1_rank_done  (rdlvl_stg1_rank_done),\n       .rdlvl_stg1_start      (rdlvl_stg1_start),\n       .rdlvl_prech_req       (rdlvl_prech_req),\n       .rdlvl_last_byte_done  (rdlvl_last_byte_done),\n       .prbs_rdlvl_start      (prbs_rdlvl_start),\n       .complex_wr_done       (complex_wr_done),\n       .prbs_rdlvl_done       (prbs_rdlvl_done),\n       .prbs_last_byte_done   (prbs_last_byte_done),\n       .prbs_rdlvl_prech_req  (prbs_rdlvl_prech_req),\n       .complex_victim_inc    (complex_victim_inc),\n       .rd_victim_sel         (rd_victim_sel),\n       .complex_ocal_rd_victim_sel (complex_ocal_rd_victim_sel),\n       .pi_stg2_prbs_rdlvl_cnt(pi_stg2_prbs_rdlvl_cnt),\n       .victim_sel            (victim_sel),\n       .victim_byte_cnt       (victim_byte_cnt),\n       .prbs_gen_clk_en       (prbs_gen_clk_en),\n       .prbs_gen_oclk_clk_en  (prbs_gen_oclk_clk_en),\n       .complex_sample_cnt_inc(complex_sample_cnt_inc),\n       .pi_dqs_found_start    (pi_dqs_found_start),\n       .dqsfound_retry        (dqsfound_retry),\n       .dqs_found_prech_req   (dqs_found_prech_req),\n       .pi_dqs_found_rank_done(pi_dqs_found_rank_done),\n       .pi_dqs_found_done     (pi_dqs_found_done),\n       .detect_pi_found_dqs   (detect_pi_found_dqs),\n       .rd_data_offset_0      (rd_data_offset_0),\n       .rd_data_offset_1      (rd_data_offset_1),\n       .rd_data_offset_2      (rd_data_offset_2),\n       .rd_data_offset_ranks_0(rd_data_offset_ranks_0),\n       .rd_data_offset_ranks_1(rd_data_offset_ranks_1),\n       .rd_data_offset_ranks_2(rd_data_offset_ranks_2),\n       .wrcal_start           (wrcal_start),\n       .wrcal_rd_wait         (wrcal_rd_wait),\n       .wrcal_prech_req       (wrcal_prech_req),\n       .wrcal_resume          (wrcal_resume_w),\n       .wrcal_read_req        (wrcal_read_req),\n       .wrcal_act_req         (wrcal_act_req),\n       .wrcal_sanity_chk      (wrcal_sanity_chk),\n       .temp_wrcal_done       (temp_wrcal_done),\n       .wrcal_sanity_chk_done (wrcal_sanity_chk_done),\n       .tg_timer_done         (tg_timer_done),\n       .no_rst_tg_mc          (no_rst_tg_mc),\n       .wrcal_done            (wrcal_done),\n       .prech_done            (prech_done),\n       .calib_writes          (calib_writes),\n       .init_calib_complete   (calib_complete),\n       .phy_address           (phy_address),\n       .phy_bank              (phy_bank),\n       .phy_cas_n             (phy_cas_n),\n       .phy_cs_n              (phy_cs_n),\n       .phy_ras_n             (phy_ras_n),\n       .phy_reset_n           (phy_reset_n),\n       .phy_we_n              (phy_we_n),\n       .phy_wrdata            (phy_wrdata),\n       .phy_rddata_en         (phy_rddata_en),\n       .phy_rddata_valid      (phy_rddata_valid),\n       .dbg_phy_init          (dbg_phy_init),\n       .reset_rd_addr         (reset_rd_addr | complex_ocal_reset_rd_addr),\n       .oclkdelay_center_calib_start (oclkdelay_center_calib_start),\n       .oclk_center_write_resume     (oclk_center_write_resume),\n       .oclkdelay_center_calib_done  (oclkdelay_center_calib_done),\n       .rdlvl_pi_incdec              (rdlvl_pi_incdec),\n       .complex_act_start            (complex_act_start),\n       .complex_pi_incdec_done       (complex_pi_incdec_done),\n       .complex_init_pi_dec_done     (complex_init_pi_dec_done),\n       .num_samples_done_r           (num_samples_done_r),\n       .calib_tap_inc_start          (calib_tap_inc_start),\n       .calib_tap_end_if_reset       (calib_tap_end_if_reset),\n       .calib_tap_inc_done           (calib_tap_inc_done)\n       );",
        "  generate\n    if (nCK_PER_CLK == 4) begin: gen_ck_per_clk4\n      assign prbs_o = prbs_out;\n      \n\n\n\n\n\n\n\n\n\n    end else begin :gen_ck_per_clk2\n      assign prbs_o = prbs_out[4*DQ_WIDTH-1:0];\n      \n\n\n\n\n    end\n  endgenerate",
        "  assign prbs_seed = 64'h9966aa559966aa55;\n",
        "  assign init_wrcal_complete = 1'b0;\n",
        "  always @(posedge clk) begin\n    if (rst) begin\n      idelay_ce_r1  <= #TCQ 1'b0;\n      idelay_ce_r2  <= #TCQ 1'b0;\n      idelay_inc_r1 <= #TCQ 1'b0;\n      idelay_inc_r2 <= #TCQ 1'b0;\n    end else begin\n      idelay_ce_r1  <= #TCQ idelay_ce_int;\n      idelay_ce_r2  <= #TCQ idelay_ce_r1;\n      idelay_inc_r1 <= #TCQ idelay_inc_int;\n      idelay_inc_r2 <= #TCQ idelay_inc_r1;\n    end\n  end",
        "  assign phy_if_empty_def = 1'b0;",
        "  always @(posedge clk) begin\n    if (rst || reset_if_r9)\n      reset_if <= #TCQ 1'b0;\n    else if ((rdlvl_stg1_done && ~rdlvl_stg1_done_r1) ||\n             (prbs_rdlvl_done && ~prbs_rdlvl_done_r1))\n      reset_if <= #TCQ 1'b1;\n  end",
        "  always @(posedge clk) begin\n    rdlvl_stg1_done_r1  <= #TCQ rdlvl_stg1_done;\n    prbs_rdlvl_done_r1  <= #TCQ prbs_rdlvl_done;\n    reset_if_r1         <= #TCQ reset_if;\n    reset_if_r2         <= #TCQ reset_if_r1;\n    reset_if_r3         <= #TCQ reset_if_r2;\n    reset_if_r4         <= #TCQ reset_if_r3;\n    reset_if_r5         <= #TCQ reset_if_r4;\n    reset_if_r6         <= #TCQ reset_if_r5;\n    reset_if_r7         <= #TCQ reset_if_r6;\n    reset_if_r8         <= #TCQ reset_if_r7;\n    reset_if_r9         <= #TCQ reset_if_r8;\n  end",
        "  always @(posedge clk) begin\n    if (rst || (calib_complete && ~ (dbg_sel_pi_incdec_r|dbg_sel_po_incdec_r|tempmon_sel_pi_incdec) )) begin\n      calib_sel         <= #TCQ 6'b000100;\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done) || ~skip_cal_po_pi_dec_done) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      if (~dqs_po_dec_done && (WRLVL != \"ON\"))\n      \n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b0}};\n      else\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~ck_addr_cmd_delay_done || (~fine_adjust_done && rd_data_offset_cal_done)) begin\n      if(WRLVL ==\"ON\") begin\n        calib_sel[2]   <= #TCQ 1'b0;\n        calib_sel[1:0] <= #TCQ CTL_BYTE_LANE[(ctl_lane_sel*2)+:2];\n        calib_sel[5:3] <= #TCQ CTL_BANK;\n        if (|pi_rst_stg1_cal) begin\n          calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n        end else begin\n          calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n          calib_zero_inputs[1*CTL_BANK] <= #TCQ 1'b0;\n        end\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n      end else begin \n        calib_sel[2]   <= #TCQ 1'b0;\n        calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n        calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n        if(~ck_addr_cmd_delay_done)\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n        else\n          calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b0}};\n      end \n    end else if ((~wrlvl_done_w) && (SIM_CAL_OPTION == \"FAST_CAL\")) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~rdlvl_stg1_done && (SIM_CAL_OPTION == \"FAST_CAL\") &&\n                 rdlvl_assrt_common) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (tempmon_sel_pi_incdec) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n      if (~calib_in_common) begin\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n        calib_zero_inputs[(1*DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3])] <= #TCQ 1'b0;\n      end else\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n    end\n  end",
        "    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done)) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~wrlvl_done_w) begin\n        if (SIM_CAL_OPTION != \"FAST_CAL\") begin\n          byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end else begin\n          \n          \n          if (!phy_ctl_rdy_dly) begin\n            byte_sel_cnt    <= #TCQ 'd0;\n            calib_in_common <= #TCQ 1'b0;\n          end else begin\n            byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n            calib_in_common <= #TCQ 1'b1;\n          end\n        end\n      end else if (~mpr_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~oclkdelay_calib_done) begin\n        byte_sel_cnt    <= #TCQ oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if ((~wrcal_done)&& (DRAM_TYPE == \"DDR3\")) begin\n        byte_sel_cnt    <= #TCQ po_stg2_wrcal_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~rdlvl_stg1_done && pi_calib_done) begin\n        if ((SIM_CAL_OPTION == \"FAST_CAL\") && rdlvl_assrt_common) begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~prbs_rdlvl_done && rdlvl_stg1_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_prbs_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~complex_oclkdelay_calib_done_w && prbs_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ complex_oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end",
        "    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done)) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~wrlvl_done_w) begin\n        if (SIM_CAL_OPTION != \"FAST_CAL\") begin\n          byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end else begin\n          \n          \n          if (!phy_ctl_rdy_dly) begin\n            byte_sel_cnt    <= #TCQ 'd0;\n            calib_in_common <= #TCQ 1'b0;\n          end else begin\n            byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n            calib_in_common <= #TCQ 1'b1;\n          end\n        end\n      end else if (~mpr_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~oclkdelay_calib_done) begin\n        byte_sel_cnt    <= #TCQ oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~rdlvl_stg1_done && pi_calib_done) begin\n        if ((SIM_CAL_OPTION == \"FAST_CAL\") && rdlvl_assrt_common) begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~prbs_rdlvl_done && rdlvl_stg1_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_prbs_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~complex_oclkdelay_calib_done_w && prbs_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ complex_oclkdelay_calib_cnt;\n            calib_in_common <= #TCQ 1'b0;\n      end else if ((~wrcal_done) && (DRAM_TYPE == \"DDR3\")) begin\n        byte_sel_cnt    <= #TCQ po_stg2_wrcal_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end",
        "  end else if (tCK >= 2500) begin: gen_byte_sel_div2  ",
        "    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~skip_cal_po_pi_dec_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~calib_tap_inc_done) begin\n        byte_sel_cnt    <= #TCQ calib_tap_inc_byte_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end",
        "generate\n  if (SKIP_CALIB == \"TRUE\") begin: gen_byte_sel_skip_calib\n    always @(posedge clk) begin",
        "  always @(posedge clk) begin\n    ck_addr_cmd_delay_done_r1 <= #TCQ ck_addr_cmd_delay_done;\n    ck_addr_cmd_delay_done_r2 <= #TCQ ck_addr_cmd_delay_done_r1;\n    ck_addr_cmd_delay_done_r3 <= #TCQ ck_addr_cmd_delay_done_r2;\n    ck_addr_cmd_delay_done_r4 <= #TCQ ck_addr_cmd_delay_done_r3;\n    ck_addr_cmd_delay_done_r5 <= #TCQ ck_addr_cmd_delay_done_r4;\n    ck_addr_cmd_delay_done_r6 <= #TCQ ck_addr_cmd_delay_done_r5;\n  end",
        "  always @(posedge clk) begin\n    if (rst) begin\n      tempmon_pi_f_inc_r      <= #TCQ 1'b0;\n      tempmon_pi_f_en_r       <= #TCQ 1'b0;\n      tempmon_sel_pi_incdec_r <= #TCQ 1'b0;\n    end else begin\n      tempmon_pi_f_inc_r      <= #TCQ tempmon_pi_f_inc;\n      tempmon_pi_f_en_r       <= #TCQ (tempmon_pi_f_inc | tempmon_pi_f_dec);\n      tempmon_sel_pi_incdec_r <= #TCQ tempmon_sel_pi_incdec;\n    end\n  end",
        "  always @(posedge clk) begin\n    if (rst) begin\n      dbg_po_f_inc_r      <= #TCQ 1'b0;\n      dbg_po_f_stg23_sel_r<= #TCQ 1'b0;\n      dbg_po_f_en_r       <= #TCQ 1'b0;\n      dbg_sel_po_incdec_r <= #TCQ 1'b0;\n    end else begin\n      dbg_po_f_inc_r      <= #TCQ dbg_po_f_inc;\n      dbg_po_f_stg23_sel_r<= #TCQ dbg_po_f_stg23_sel;\n      dbg_po_f_en_r       <= #TCQ (dbg_po_f_inc | dbg_po_f_dec);\n      dbg_sel_po_incdec_r <= #TCQ dbg_sel_po_incdec;\n    end\n  end",
        "  always @(posedge clk) begin\n    if (rst) begin\n      dbg_pi_f_inc_r      <= #TCQ 1'b0;\n      dbg_pi_f_en_r       <= #TCQ 1'b0;\n      dbg_sel_pi_incdec_r <= #TCQ 1'b0;\n    end else begin\n      dbg_pi_f_inc_r      <= #TCQ dbg_pi_f_inc;\n      dbg_pi_f_en_r       <= #TCQ (dbg_pi_f_inc | dbg_pi_f_dec);\n      dbg_sel_pi_incdec_r <= #TCQ dbg_sel_pi_incdec;\n    end\n  end",
        "  always @(posedge clk)\n    phy_if_reset <= #TCQ (phy_if_reset_w | mpr_end_if_reset |\n                          reset_if | wrlvl_final_if_rst | calib_tap_end_if_reset);\n",
        "  always @ (posedge clk)\n    wrlvl_final_mux <= #TCQ complex_oclkdelay_calib_start_w? complex_wrlvl_final_w: wrlvl_final;\n",
        "  assign pi_phase_locked_err = phase_locked_err;\n  assign pi_dqsfound_err     = pi_dqs_found_err;\n  assign wrcal_err           = wrcal_pat_err;\n  assign rst_tg_mc           = 1'b0;",
        "  assign calib_rd_data_offset_0 = rd_data_offset_ranks_mc_0;\n  assign calib_rd_data_offset_1 = rd_data_offset_ranks_mc_1;\n  assign calib_rd_data_offset_2 = rd_data_offset_ranks_mc_2;",
        "  always @(posedge clk) begin\n    if (SKIP_CALIB == \"FALSE\")\n    init_calib_complete <= calib_complete;\n    else\n      init_calib_complete <= tempmon_done_skip;\n  end",
        "  assign complex_oclkdelay_calib_cnt = oclkdelay_calib_cnt;\n  assign complex_oclk_calib_resume   = oclk_calib_resume;\n  assign complex_ocal_ref_req        = oclk_prech_req;",
        "  assign po_counter_load_en = 1'b0;",
        "  assign pi_stg2_f_incdec = (calib_pi_f_incdec | dbg_pi_f_inc_r | rdlvl_pi_stg2_f_incdec | prbs_pi_stg2_f_incdec | tempmon_pi_f_inc_r);\n  assign pi_en_stg2_f     = (calib_pi_f_en | dbg_pi_f_en_r | rdlvl_pi_stg2_f_en | prbs_pi_stg2_f_en | tempmon_pi_f_en_r);\n\n  assign idelay_ce  = (idelay_ce_r2 | calib_idelay_ce);\n  assign idelay_inc = (idelay_inc_r2 | calib_idelay_inc);",
        "  generate\n  genvar i;\n    for (i = 0; i <= 2; i = i+1) begin : bankwise_signal\n\n      assign po_sel_stg2stg3[i]  = ((ck_addr_cmd_delay_done && ~oclkdelay_calib_done && mpr_rdlvl_done) ? po_stg23_sel :\n                                   (complex_oclkdelay_calib_start_w&&~complex_oclkdelay_calib_done_w? po_stg23_sel : 1'b0 )\n                                  \n                                   ) || calib_po_sel_stg2stg3 || dbg_po_f_stg23_sel_r;\n\n      assign po_stg2_c_incdec[i] =  cmd_po_stg2_c_incdec ||\n                                    cmd_po_stg2_incdec_ddr2_c ||\n                                    calib_po_c_inc ||\n                                    dqs_wl_po_stg2_c_incdec;\n\n      assign po_en_stg2_c[i]     = cmd_po_en_stg2_c ||\n                                   cmd_po_en_stg2_ddr2_c ||\n                                   calib_po_c_en ||\n                                   dqs_wl_po_en_stg2_c;\n\n      assign po_stg2_f_incdec[i] = dqs_po_stg2_f_incdec ||\n                                   cmd_po_stg2_f_incdec ||\n                                   ck_po_stg2_f_indec ||\n                                   po_stg23_incdec ||\n                                   calib_po_f_incdec ||\n                                  \n                                  \n                                   dbg_po_f_inc_r;\n\n      assign po_en_stg2_f[i]     = dqs_po_en_stg2_f ||\n                                   cmd_po_en_stg2_f ||\n                                   ck_po_stg2_f_en ||\n                                   po_en_stg23 ||\n                                   calib_po_f_en ||\n                                  \n                                  \n                                   dbg_po_f_en_r;\n\n    end\n  endgenerate",
        "generate\n   if((WRLVL == \"ON\") && (BYPASS_COMPLEX_OCAL==\"FALSE\")) begin: complex_oclk_calib\n    assign complex_oclkdelay_calib_start_w = complex_oclkdelay_calib_start;\n    assign complex_oclkdelay_calib_done_w  = complex_oclkdelay_calib_done;\n    assign complex_ocal_rd_victim_sel_w    = complex_ocal_rd_victim_sel;\n    assign complex_wrlvl_final_w           = complex_wrlvl_final;\n   end else begin: bypass_complex_ocal\n    assign complex_oclkdelay_calib_start_w = 1'b0;\n    assign complex_oclkdelay_calib_done_w  = prbs_rdlvl_done;\n    assign complex_ocal_rd_victim_sel_w    = 'd0;\n    assign complex_wrlvl_final_w           = 1'b0;\n   end\nendgenerate",
        "  assign ck_addr_cmd_delay_done = (WRLVL == \"ON\") ? po_ck_addr_cmd_delay_done :\n                                                    (po_ck_addr_cmd_delay_done\n                                                    && pi_fine_dly_dec_done) ;",
        "  assign wrcal_resume_w = (WRLVL == \"ON\") ? wrcal_pat_resume : 1'b0;\n  assign wrlvl_done_w   = (WRLVL == \"ON\") ? wrlvl_done : 1'b1;",
        "  assign dbg_oclkdelay_calib_done  = oclkdelay_calib_done;\n  assign dbg_oclkdelay_calib_start = oclkdelay_calib_start;",
        "  assign dbg_rdlvl_err             = {mpr_rdlvl_err, rdlvl_err};\n",
        "  assign dbg_rdlvl_start           = {mpr_rdlvl_start, rdlvl_stg1_start};\n  assign dbg_rdlvl_done            = {mpr_rdlvl_done, rdlvl_stg1_done};",
        "  assign dbg_wrlvl_err             = wrlvl_err;\n",
        "  assign dbg_wrlvl_start           = wrlvl_start;\n  assign dbg_wrlvl_done            = wrlvl_done;",
        "  always @ (posedge clk) begin\n    if_empty_reg <= #TCQ  phy_if_empty;\n    pi_stg2_en_reg <= #TCQ pi_en_stg2_f;\n  end",
        "  assign dbg_calib_top[0] = pi_stg2_en_reg ;\n  assign dbg_calib_top[1] = if_empty_reg ;\n  assign dbg_calib_top[3]     = coarse_dec_err;\n  assign dbg_calib_top[4]     = calib_tap_inc_start;\n  assign dbg_calib_top[5]     = calib_tap_inc_done;\n  assign dbg_calib_top[6+:63] = dbg_skip_cal;",
        "  assign dbg_wrcal_start        = wrcal_start;\n  assign dbg_wrcal_done         = wrcal_done;",
        "  assign dbg_pi_phaselock_start = pi_phaselock_start;\n  assign dbg_pi_dqsfound_start  = pi_dqs_found_start;",
        "  assign prbs_rdlvl_done = (SIM_CAL_OPTION == \"FAST_CAL\")? rdlvl_stg1_done : prbs_rdlvl_done_complex;",
        "  initial\n  begin\n    if (RANKS == 0) begin\n      $display (\"Error: Invalid RANKS parameter. Must be 1 or greater\");\n      $finish;\n    end\n    if (phy_ctl_full == 1'b1) begin\n      $display (\"Error: Incorrect phy_ctl_full input value in 2:1 or 4:1 mode\");\n      $finish;\n    end\n  end",
        "   function integer clogb2 (input integer size);\n    begin\n      size = size - 1;\n      for (clogb2=1; size>1; clogb2=clogb2+1)\n        size = size >> 1;\n    end\n   endfunction"
    ]
}