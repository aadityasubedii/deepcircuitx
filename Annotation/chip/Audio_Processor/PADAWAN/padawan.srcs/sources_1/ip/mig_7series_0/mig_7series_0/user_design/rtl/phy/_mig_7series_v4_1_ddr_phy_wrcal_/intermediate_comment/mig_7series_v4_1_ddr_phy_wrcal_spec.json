{
    "spec": "Module name: mig_7series_v4_1_ddr_phy_wrcal. Module specification: This module implements a write calibration (WRCAL) procedure for a DDR memory interface, supporting both 2:1 and 4:1 memory:fabric clock ratios. It performs pattern matching on read data to determine the optimal write timing for each DQS group. Key inputs include clk, rst, wrcal_start, wrcal_rd_wait, and rd_data, while outputs include wrcal_done, wrcal_pat_err, and various debug signals. Internal signals such as cal2_state_r, wrcal_dqs_cnt_r, and pat_data_match_r are used to manage the calibration state machine and pattern matching. The module consists of several blocks: a state machine for controlling the calibration process, pattern generation an",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_phy_wrcal\n\nExplanation: This module implements a write calibration (WRCAL) procedure for a DDR memory interface. It performs pattern matching on read data to determine the optimal write timing for each DQS group. The module supports both 2:1 and 4:1 memory:fabric clock ratios. It includes functionality for detecting early or late data patterns, adjusting delays, and handling various calibration states. The calibration process involves sending known patterns, reading back the data, and comparing it to expected values to determine if timing adjustments are needed. The module also includes sanity checks and error handling mechanisms to ensure reliable calibration results."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nclk, rst, wrcal_start, wrcal_rd_wait, wrcal_sanity_chk, dqsfound_retry_done, phy_rddata_en, prech_done, rd_data, wl_po_coarse_cnt, wl_po_fine_cnt, wrlvl_byte_done\n\nExplanation:\n- clk, rst: Clock and reset signals\n- wrcal_start: Initiates the write calibration process\n- wrcal_rd_wait: Indicates when to wait for read data\n- wrcal_sanity_chk: Triggers a sanity check during calibration\n- dqsfound_retry_done: Indicates completion of DQS retry process\n- phy_rddata_en: Enables read data\n- prech_done: Indicates precharge operation completion\n- rd_data: Read data from memory\n- wl_po_coarse_cnt, wl_po_fine_cnt: Write leveling phase offset counters\n- wrlvl_byte_done: Indicates completion of write leveling for a byte\n\nOutput ports:\ndqsfound_retry, wrcal_read_req, wrcal_act_req, wrcal_done, wrcal_pat_err, wrcal_prech_req, temp_wrcal_done, wrcal_sanity_chk_done, wrlvl_byte_redo, early1_data, early2_data, idelay_ld, wrcal_pat_resume, po_stg2_wrcal_cnt, phy_if_reset, dbg_final_po_fine_tap_cnt, dbg_final_po_coarse_tap_cnt, dbg_phy_wrcal\n\nExplanation:\n- dqsfound_retry: Requests retry of DQS finding process\n- wrcal_read_req: Requests a read operation during calibration\n- wrcal_act_req, wrcal_prech_req: Requests activate and precharge operations\n- wrcal_done: Indicates completion of write calibration\n- wrcal_pat_err: Signals a pattern error during calibration\n- temp_wrcal_done, wrcal_sanity_chk_done: Temporary and sanity check completion signals\n- wrlvl_byte_redo: Requests redo of write leveling for a byte\n- early1_data, early2_data: Indicates early data detection\n- idelay_ld: Controls loading of IDELAY values\n- wrcal_pat_resume: Signals to resume pattern generation\n- po_stg2_wrcal_cnt: Phase offset counter for stage 2 of write calibration\n- phy_if_reset: Resets the PHY interface\n- dbg_final_po_fine_tap_cnt, dbg_final_po_coarse_tap_cnt, dbg_phy_wrcal: Debug outputs for phase offset counters and calibration status"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\ncal2_state_r, wrcal_dqs_cnt_r, po_coarse_tap_cnt, po_fine_tap_cnt, pat_data_match_r, early1_data_match_r, early2_data_match_r, pat_data_match_valid_r, rd_active_r, rd_mux_sel_r, mux_rd_rise0_r, mux_rd_fall0_r, mux_rd_rise1_r, mux_rd_fall1_r, sr_rise0_r, sr_fall0_r, sr_rise1_r, sr_fall1_r, pat_match_rise0_r, pat_match_fall0_r, pat_match_rise1_r, pat_match_fall1_r, early1_match_rise0_r, early1_match_fall0_r, early1_match_rise1_r, early1_match_fall1_r, early2_match_rise0_r, early2_match_fall0_r, early2_match_rise1_r, early2_match_fall1_r, cal2_done_r, cal2_prech_req_r, wrcal_pat_resume_r, idelay_ld_done, pat1_detect, early1_detect.\n\nExplanation:\n- cal2_state_r: Stores the current state of the calibration state machine\n- wrcal_dqs_cnt_r: Counts the current DQS group being calibrated\n- po_coarse_tap_cnt, po_fine_tap_cnt: Store phase offset tap counts for coarse and fine adjustments\n- pat_data_match_r: Indicates if the read data matches the expected pattern\n- early1_data_match_r, early2_data_match_r: Indicate early data detection for different scenarios\n- pat_data_match_valid_r: Validates the pattern match result\n- rd_active_r: Indicates active read operation\n- rd_mux_sel_r: Selects which DQS group's data to process\n- mux_rd_rise0_r, mux_rd_fall0_r, mux_rd_rise1_r, mux_rd_fall1_r: Store muxed read data for rising and falling edges\n- sr_rise0_r, sr_fall0_r, sr_rise1_r, sr_fall1_r: Shift registers for storing read data\n- pat_match_rise0_r, pat_match_fall0_r, pat_match_rise1_r, pat_match_fall1_r: Indicate pattern matches for different data edges\n- early1_match_rise0_r, early1_match_fall0_r, early1_match_rise1_r, early1_match_fall1_r: Indicate early pattern matches for scenario 1\n- early2_match_rise0_r, early2_match_fall0_r, early2_match_rise1_r, early2_match_fall1_r: Indicate early pattern matches for scenario 2\n- cal2_done_r: Indicates completion of calibration stage 2\n- cal2_prech_req_r: Requests precharge operation during calibration\n- wrcal_pat_resume_r: Signals to resume pattern generation\n- idelay_ld_done: Indicates completion of IDELAY loading\n- pat1_detect, early1_detect: Used for detecting specific patterns in 2:1 mode"
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule mig_7series_v4_1_ddr_phy_wrcal #\n  (\n   parameter TCQ             = 100,    \n   parameter nCK_PER_CLK     = 2,      \n   parameter CLK_PERIOD      = 2500,\n   parameter DQ_WIDTH        = 64,     \n   parameter DQS_CNT_WIDTH   = 3,      \n   parameter DQS_WIDTH       = 8,      \n   parameter DRAM_WIDTH      = 8,      \n   parameter PRE_REV3ES      = \"OFF\",  \n   parameter SIM_CAL_OPTION  = \"NONE\"  \n   )\n  (\n   input                        clk,\n   input                        rst,\n   \n   input                        wrcal_start,\n   input                        wrcal_rd_wait,\n   input                        wrcal_sanity_chk,\n   input                        dqsfound_retry_done,\n   input                        phy_rddata_en,\n   output                       dqsfound_retry,\n   output                       wrcal_read_req,\n   output reg                   wrcal_act_req,\n   output reg                   wrcal_done,\n   output reg                   wrcal_pat_err,\n   output reg                   wrcal_prech_req,\n   output reg                   temp_wrcal_done,\n   output reg                   wrcal_sanity_chk_done,\n   input                        prech_done,\n   \n   input [2*nCK_PER_CLK*DQ_WIDTH-1:0] rd_data,\n   \n   \n   input [3*DQS_WIDTH-1:0]      wl_po_coarse_cnt,\n   input [6*DQS_WIDTH-1:0]      wl_po_fine_cnt,\n   input                        wrlvl_byte_done,\n   output reg                   wrlvl_byte_redo,\n   output reg                   early1_data,\n   output reg                   early2_data,\n   \n   output reg                   idelay_ld,\n   output reg                   wrcal_pat_resume,   \n   output reg [DQS_CNT_WIDTH:0] po_stg2_wrcal_cnt,\n   output                       phy_if_reset,\n\n   \n   output [6*DQS_WIDTH-1:0]     dbg_final_po_fine_tap_cnt,\n   output [3*DQS_WIDTH-1:0]     dbg_final_po_coarse_tap_cnt,\n   output [99:0]                dbg_phy_wrcal\n   );\n\n  \n  \n\n  \n  localparam RD_SHIFT_LEN = 1; \n\n  \n  localparam NUM_READS = 2;\n\n  \n  localparam RDEN_WAIT_CNT = 12;\n\n  localparam  COARSE_CNT = (CLK_PERIOD/nCK_PER_CLK <= 2500) ? 3 : 6;\n  localparam  FINE_CNT   = (CLK_PERIOD/nCK_PER_CLK <= 2500) ? 22 : 44;\n\n\n  localparam CAL2_IDLE            = 4'h0;\n  localparam CAL2_READ_WAIT       = 4'h1;\n  localparam CAL2_NEXT_DQS        = 4'h2;\n  localparam CAL2_WRLVL_WAIT      = 4'h3;\n  localparam CAL2_IFIFO_RESET     = 4'h4;\n  localparam CAL2_DQ_IDEL_DEC     = 4'h5;\n  localparam CAL2_DONE            = 4'h6;\n  localparam CAL2_SANITY_WAIT     = 4'h7;\n  localparam CAL2_ERR             = 4'h8;\n\n  integer                 i,j,k,l,m,p,q,d;\n\n  reg [2:0]               po_coarse_tap_cnt [0:DQS_WIDTH-1];\n  reg [3*DQS_WIDTH-1:0]   po_coarse_tap_cnt_w;\n  reg [5:0]               po_fine_tap_cnt [0:DQS_WIDTH-1];\n  reg [6*DQS_WIDTH-1:0]   po_fine_tap_cnt_w;\n reg [DQS_CNT_WIDTH:0] wrcal_dqs_cnt_r;\n  reg [4:0]               not_empty_wait_cnt;\n  reg [3:0]               tap_inc_wait_cnt;\n  reg                     cal2_done_r;\n  reg                     cal2_done_r1;\n  reg                     cal2_prech_req_r;\n  reg [3:0]               cal2_state_r;\n  reg [3:0]               cal2_state_r1;\n  reg [2:0]               wl_po_coarse_cnt_w [0:DQS_WIDTH-1];\n  reg [5:0]               wl_po_fine_cnt_w [0:DQS_WIDTH-1];\n  reg                     cal2_if_reset;\n  reg                     wrcal_pat_resume_r;\n  reg                     wrcal_pat_resume_r1;\n  reg                     wrcal_pat_resume_r2;\n  reg                     wrcal_pat_resume_r3;\n  reg [DRAM_WIDTH-1:0]    mux_rd_fall0_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_fall1_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_rise0_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_rise1_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_fall2_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_fall3_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_rise2_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_rise3_r;\n  reg                     pat_data_match_r;\n  reg                     pat1_data_match_r;\n  reg                     pat1_data_match_r1;\n  reg                     pat2_data_match_r;\n  reg                     pat_data_match_valid_r;\n  wire [RD_SHIFT_LEN-1:0] pat_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_fall2 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_fall3 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat1_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat1_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat2_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat2_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_fall2 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_fall3 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early1_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early1_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early2_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early2_fall1 [3:0];\n  reg [DRAM_WIDTH-1:0]    pat_match_fall0_r;\n  reg                     pat_match_fall0_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_fall1_r;\n  reg                     pat_match_fall1_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_fall2_r;\n  reg                     pat_match_fall2_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_fall3_r;\n  reg                     pat_match_fall3_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_rise0_r;\n  reg                     pat_match_rise0_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_rise1_r;\n  reg                     pat_match_rise1_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_rise2_r;\n  reg                     pat_match_rise2_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_rise3_r;\n  reg                     pat_match_rise3_and_r;\n  reg [DRAM_WIDTH-1:0]    pat1_match_rise0_r;\n  reg [DRAM_WIDTH-1:0]    pat1_match_rise1_r;\n  reg [DRAM_WIDTH-1:0]    pat1_match_fall0_r;\n  reg [DRAM_WIDTH-1:0]    pat1_match_fall1_r;\n  reg [DRAM_WIDTH-1:0]    pat2_match_rise0_r;\n  reg [DRAM_WIDTH-1:0]    pat2_match_rise1_r;\n  reg [DRAM_WIDTH-1:0]    pat2_match_fall0_r;\n  reg [DRAM_WIDTH-1:0]    pat2_match_fall1_r;\n  reg                     pat1_match_rise0_and_r;\n  reg                     pat1_match_rise1_and_r;\n  reg                     pat1_match_fall0_and_r;\n  reg                     pat1_match_fall1_and_r;\n  reg                     pat2_match_rise0_and_r;\n  reg                     pat2_match_rise1_and_r;\n  reg                     pat2_match_fall0_and_r;\n  reg                     pat2_match_fall1_and_r;\n  reg                     early1_data_match_r;\n  reg                     early1_data_match_r1;\n  reg [DRAM_WIDTH-1:0]    early1_match_fall0_r;\n  reg                     early1_match_fall0_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_fall1_r;\n  reg                     early1_match_fall1_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_fall2_r;\n  reg                     early1_match_fall2_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_fall3_r;\n  reg                     early1_match_fall3_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_rise0_r;\n  reg                     early1_match_rise0_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_rise1_r;\n  reg                     early1_match_rise1_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_rise2_r;\n  reg                     early1_match_rise2_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_rise3_r;\n  reg                     early1_match_rise3_and_r;\n  reg                     early2_data_match_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_fall0_r;\n  reg                     early2_match_fall0_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_fall1_r;\n  reg                     early2_match_fall1_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_fall2_r;\n  reg                     early2_match_fall2_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_fall3_r;\n  reg                     early2_match_fall3_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_rise0_r;\n  reg                     early2_match_rise0_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_rise1_r;\n  reg                     early2_match_rise1_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_rise2_r;\n  reg                     early2_match_rise2_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_rise3_r;\n  reg                     early2_match_rise3_and_r;\n  wire [RD_SHIFT_LEN-1:0] pat_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_rise2 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_rise3 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat1_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat1_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat2_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat2_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_rise2 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_rise3 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early1_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early1_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early2_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early2_rise1 [3:0];\n  wire [DQ_WIDTH-1:0]     rd_data_rise0;\n  wire [DQ_WIDTH-1:0]     rd_data_fall0;\n  wire [DQ_WIDTH-1:0]     rd_data_rise1;\n  wire [DQ_WIDTH-1:0]     rd_data_fall1;\n  wire [DQ_WIDTH-1:0]     rd_data_rise2;\n  wire [DQ_WIDTH-1:0]     rd_data_fall2;\n  wire [DQ_WIDTH-1:0]     rd_data_rise3;\n  wire [DQ_WIDTH-1:0]     rd_data_fall3;\n  reg [DQS_CNT_WIDTH:0]   rd_mux_sel_r;\n  reg                     rd_active_posedge_r;\n  reg                     rd_active_r;\n  reg                     rd_active_r1;\n  reg                     rd_active_r2;\n  reg                     rd_active_r3;\n  reg                     rd_active_r4;\n  reg                     rd_active_r5;\n  reg [RD_SHIFT_LEN-1:0]  sr_fall0_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_fall1_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_rise0_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_rise1_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_fall2_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_fall3_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_rise2_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_rise3_r [DRAM_WIDTH-1:0];\n  reg                     wrlvl_byte_done_r;\n  reg                     idelay_ld_done;\n  reg                     pat1_detect;\n  reg                     early1_detect;\n  reg                     wrcal_sanity_chk_r;\n  reg                     wrcal_sanity_chk_err;\n\n\n  \n  \n  \n\n  always @(*) begin\n    for (d = 0; d < DQS_WIDTH; d = d + 1) begin\n      po_fine_tap_cnt_w[(6*d)+:6]   = po_fine_tap_cnt[d];\n      po_coarse_tap_cnt_w[(3*d)+:3] = po_coarse_tap_cnt[d];\n    end\n  end\n\n  assign dbg_final_po_fine_tap_cnt   = po_fine_tap_cnt_w;\n  assign dbg_final_po_coarse_tap_cnt = po_coarse_tap_cnt_w;\n\n  generate\n    if (nCK_PER_CLK == 4) begin: match_data_4\n      assign dbg_phy_wrcal[0]    = pat_data_match_r;\n    end else begin:match_data_2\n      assign dbg_phy_wrcal[0]    = 1'b0;\n    end\n  endgenerate\n  assign dbg_phy_wrcal[4:1]  = cal2_state_r1[3:0];\n  assign dbg_phy_wrcal[5]    = wrcal_sanity_chk_err;\n  assign dbg_phy_wrcal[6]    = wrcal_start;\n  assign dbg_phy_wrcal[7]    = wrcal_done;\n  assign dbg_phy_wrcal[8]    = pat_data_match_valid_r;\n  assign dbg_phy_wrcal[13+:DQS_CNT_WIDTH]= wrcal_dqs_cnt_r;\n  assign dbg_phy_wrcal[17+:5]  = not_empty_wait_cnt;\n  assign dbg_phy_wrcal[22]     = early1_data;\n  assign dbg_phy_wrcal[23]     = early2_data;\n  assign dbg_phy_wrcal[24+:8]     = mux_rd_rise0_r;\n  assign dbg_phy_wrcal[32+:8]     = mux_rd_fall0_r;\n  assign dbg_phy_wrcal[40+:8]     = mux_rd_rise1_r;\n  assign dbg_phy_wrcal[48+:8]     = mux_rd_fall1_r;\n  generate\n    if (nCK_PER_CLK == 4) begin: mux_data_4\n      assign dbg_phy_wrcal[56+:8]     = mux_rd_rise2_r;\n      assign dbg_phy_wrcal[64+:8]     = mux_rd_fall2_r;\n      assign dbg_phy_wrcal[72+:8]     = mux_rd_rise3_r;\n      assign dbg_phy_wrcal[80+:8]     = mux_rd_fall3_r;\n    end else begin: mux_data_2\n      assign dbg_phy_wrcal[56+:8] = {8{1'b0}};\n      assign dbg_phy_wrcal[64+:8] = {8{1'b0}};\n      assign dbg_phy_wrcal[72+:8] = {8{1'b0}};\n      assign dbg_phy_wrcal[80+:8] = {8{1'b0}};\n    end\n  endgenerate\n  assign dbg_phy_wrcal[88]     = early1_data_match_r;\n  assign dbg_phy_wrcal[89]     = early2_data_match_r;\n  assign dbg_phy_wrcal[90]     = wrcal_sanity_chk_r & pat_data_match_valid_r;\n  assign dbg_phy_wrcal[91]     = wrcal_sanity_chk_r;\n  assign dbg_phy_wrcal[92]     = wrcal_sanity_chk_done;\n\n  assign dqsfound_retry        = 1'b0;\n  assign wrcal_read_req        = 1'b0;\n  assign phy_if_reset          = cal2_if_reset;\n\n   \n   \n   \n   \n\n   always @(posedge clk) begin\n     po_stg2_wrcal_cnt  <= #TCQ wrcal_dqs_cnt_r;\n     wrlvl_byte_done_r  <= #TCQ wrlvl_byte_done;\n     wrcal_sanity_chk_r <= #TCQ wrcal_sanity_chk;\n   end\n\n  \n  \n  \n  \n\n  generate\n    if (nCK_PER_CLK == 4) begin: gen_rd_data_div4\n      assign rd_data_rise0 = rd_data[DQ_WIDTH-1:0];\n      assign rd_data_fall0 = rd_data[2*DQ_WIDTH-1:DQ_WIDTH];\n      assign rd_data_rise1 = rd_data[3*DQ_WIDTH-1:2*DQ_WIDTH];\n      assign rd_data_fall1 = rd_data[4*DQ_WIDTH-1:3*DQ_WIDTH];\n      assign rd_data_rise2 = rd_data[5*DQ_WIDTH-1:4*DQ_WIDTH];\n      assign rd_data_fall2 = rd_data[6*DQ_WIDTH-1:5*DQ_WIDTH];\n      assign rd_data_rise3 = rd_data[7*DQ_WIDTH-1:6*DQ_WIDTH];\n      assign rd_data_fall3 = rd_data[8*DQ_WIDTH-1:7*DQ_WIDTH];\n    end else if (nCK_PER_CLK == 2) begin: gen_rd_data_div2\n      assign rd_data_rise0 = rd_data[DQ_WIDTH-1:0];\n      assign rd_data_fall0 = rd_data[2*DQ_WIDTH-1:DQ_WIDTH];\n      assign rd_data_rise1 = rd_data[3*DQ_WIDTH-1:2*DQ_WIDTH];\n      assign rd_data_fall1 = rd_data[4*DQ_WIDTH-1:3*DQ_WIDTH];\n    end\n  endgenerate\n\n  \n  \n  \n  \n\n  always @(*) begin\n    for (m = 0; m < DQS_WIDTH; m = m + 1) begin\n      wl_po_coarse_cnt_w[m] = wl_po_coarse_cnt[3*m+:3];\n      wl_po_fine_cnt_w[m]   = wl_po_fine_cnt[6*m+:6];\n    end\n  end\n\n  always @(posedge clk) begin\n    if (rst) begin\n      for (p = 0; p < DQS_WIDTH; p = p + 1) begin\n        po_coarse_tap_cnt[p] <= #TCQ {3{1'b0}};\n        po_fine_tap_cnt[p]   <= #TCQ {6{1'b0}};\n      end\n    end else if (cal2_done_r && ~cal2_done_r1) begin\n      for (q = 0; q < DQS_WIDTH; q = q + 1) begin\n        po_coarse_tap_cnt[q] <= #TCQ wl_po_coarse_cnt_w[i];\n        po_fine_tap_cnt[q]   <= #TCQ wl_po_fine_cnt_w[i];\n      end\n    end\n  end\n\n  always @(posedge clk) begin\n    rd_mux_sel_r <= #TCQ wrcal_dqs_cnt_r;\n  end\n\n  \n  \n  \n  generate\n    genvar mux_i;\n    if (nCK_PER_CLK == 4) begin: gen_mux_rd_div4\n      for (mux_i = 0; mux_i < DRAM_WIDTH; mux_i = mux_i + 1) begin: gen_mux_rd\n        always @(posedge clk) begin\n          mux_rd_rise0_r[mux_i] <= #TCQ rd_data_rise0[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall0_r[mux_i] <= #TCQ rd_data_fall0[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_rise1_r[mux_i] <= #TCQ rd_data_rise1[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall1_r[mux_i] <= #TCQ rd_data_fall1[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_rise2_r[mux_i] <= #TCQ rd_data_rise2[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall2_r[mux_i] <= #TCQ rd_data_fall2[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_rise3_r[mux_i] <= #TCQ rd_data_rise3[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall3_r[mux_i] <= #TCQ rd_data_fall3[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n        end\n      end\n    end else if (nCK_PER_CLK == 2) begin: gen_mux_rd_div2\n      for (mux_i = 0; mux_i < DRAM_WIDTH; mux_i = mux_i + 1) begin: gen_mux_rd\n        always @(posedge clk) begin\n          mux_rd_rise0_r[mux_i] <= #TCQ rd_data_rise0[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall0_r[mux_i] <= #TCQ rd_data_fall0[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_rise1_r[mux_i] <= #TCQ rd_data_rise1[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall1_r[mux_i] <= #TCQ rd_data_fall1[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n        end\n      end\n    end\n  endgenerate\n\n  \n  \n  \n  \n  \n  \n  \n  \n\n  always @(posedge clk)\n    if (rst)\n      wrcal_prech_req <= #TCQ 1'b0;\n    else\n      \n      wrcal_prech_req <= #TCQ cal2_prech_req_r;\n\n  \n  \n  \n  \n  \n\n  generate\n    genvar rd_i;\n    if (nCK_PER_CLK == 4) begin: gen_sr_div4\n      for (rd_i = 0; rd_i < DRAM_WIDTH; rd_i = rd_i + 1) begin: gen_sr\n        always @(posedge clk) begin\n          sr_rise0_r[rd_i] <= #TCQ mux_rd_rise0_r[rd_i];\n          sr_fall0_r[rd_i] <= #TCQ mux_rd_fall0_r[rd_i];\n          sr_rise1_r[rd_i] <= #TCQ mux_rd_rise1_r[rd_i];\n          sr_fall1_r[rd_i] <= #TCQ mux_rd_fall1_r[rd_i];\n          sr_rise2_r[rd_i] <= #TCQ mux_rd_rise2_r[rd_i];\n          sr_fall2_r[rd_i] <= #TCQ mux_rd_fall2_r[rd_i];\n          sr_rise3_r[rd_i] <= #TCQ mux_rd_rise3_r[rd_i];\n          sr_fall3_r[rd_i] <= #TCQ mux_rd_fall3_r[rd_i];\n        end\n      end\n    end else if (nCK_PER_CLK == 2) begin: gen_sr_div2\n      for (rd_i = 0; rd_i < DRAM_WIDTH; rd_i = rd_i + 1) begin: gen_sr\n        always @(posedge clk) begin\n          sr_rise0_r[rd_i] <= #TCQ mux_rd_rise0_r[rd_i];\n          sr_fall0_r[rd_i] <= #TCQ mux_rd_fall0_r[rd_i];\n          sr_rise1_r[rd_i] <= #TCQ mux_rd_rise1_r[rd_i];\n          sr_fall1_r[rd_i] <= #TCQ mux_rd_fall1_r[rd_i];\n        end\n      end\n    end\n  endgenerate\n\n \n  \n  \n  \n  \n  \n  \n  \n\n  always @(posedge clk) begin\n    rd_active_r         <= #TCQ phy_rddata_en;\n    rd_active_r1        <= #TCQ rd_active_r;\n    rd_active_r2        <= #TCQ rd_active_r1;\n    rd_active_r3        <= #TCQ rd_active_r2;\n    rd_active_r4        <= #TCQ rd_active_r3;\n    rd_active_r5        <= #TCQ rd_active_r4;\n  end\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  generate\n    if (nCK_PER_CLK == 4) begin: gen_pat_div4\n    \n      assign pat_rise0[3] = 1'b1;\n      assign pat_fall0[3] = 1'b0;\n      assign pat_rise1[3] = 1'b1;\n      assign pat_fall1[3] = 1'b0;\n      assign pat_rise2[3] = 1'b0;\n      assign pat_fall2[3] = 1'b1;\n      assign pat_rise3[3] = 1'b1;\n      assign pat_fall3[3] = 1'b0;\n\n      assign pat_rise0[2] = 1'b1;\n      assign pat_fall0[2] = 1'b0;\n      assign pat_rise1[2] = 1'b0;\n      assign pat_fall1[2] = 1'b1;\n      assign pat_rise2[2] = 1'b1;\n      assign pat_fall2[2] = 1'b0;\n      assign pat_rise3[2] = 1'b0;\n      assign pat_fall3[2] = 1'b1;\n\n      assign pat_rise0[1] = 1'b1;\n      assign pat_fall0[1] = 1'b0;\n      assign pat_rise1[1] = 1'b1;\n      assign pat_fall1[1] = 1'b0;\n      assign pat_rise2[1] = 1'b0;\n      assign pat_fall2[1] = 1'b1;\n      assign pat_rise3[1] = 1'b0;\n      assign pat_fall3[1] = 1'b1;\n\n      assign pat_rise0[0] = 1'b1;\n      assign pat_fall0[0] = 1'b0;\n      assign pat_rise1[0] = 1'b0;\n      assign pat_fall1[0] = 1'b1;\n      assign pat_rise2[0] = 1'b1;\n      assign pat_fall2[0] = 1'b0;\n      assign pat_rise3[0] = 1'b1;\n      assign pat_fall3[0] = 1'b0;\n\n      \n      \n      assign early_rise0[3] = 1'b1;\n      assign early_fall0[3] = 1'b0;\n      assign early_rise1[3] = 1'b1;\n      assign early_fall1[3] = 1'b0;\n      assign early_rise2[3] = 1'b0;\n      assign early_fall2[3] = 1'b1;\n      assign early_rise3[3] = 1'b1;\n      assign early_fall3[3] = 1'b1;\n\n      assign early_rise0[2] = 1'b0;\n      assign early_fall0[2] = 1'b0;\n      assign early_rise1[2] = 1'b1;\n      assign early_fall1[2] = 1'b1;\n      assign early_rise2[2] = 1'b1;\n      assign early_fall2[2] = 1'b1;\n      assign early_rise3[2] = 1'b1;\n      assign early_fall3[2] = 1'b0;\n\n      assign early_rise0[1] = 1'b1;\n      assign early_fall0[1] = 1'b0;\n      assign early_rise1[1] = 1'b1;\n      assign early_fall1[1] = 1'b0;\n      assign early_rise2[1] = 1'b0;\n      assign early_fall2[1] = 1'b1;\n      assign early_rise3[1] = 1'b0;\n      assign early_fall3[1] = 1'b0;\n\n      assign early_rise0[0] = 1'b1;\n      assign early_fall0[0] = 1'b1;\n      assign early_rise1[0] = 1'b0;\n      assign early_fall1[0] = 1'b0;\n      assign early_rise2[0] = 1'b0;\n      assign early_fall2[0] = 1'b0;\n      assign early_rise3[0] = 1'b1;\n      assign early_fall3[0] = 1'b0;\n\n    end else if (nCK_PER_CLK == 2) begin: gen_pat_div2\n      \n      assign pat1_rise0[3] = 1'b1;\n      assign pat1_fall0[3] = 1'b0;\n      assign pat1_rise1[3] = 1'b1;\n      assign pat1_fall1[3] = 1'b0;\n\n      assign pat1_rise0[2] = 1'b1;\n      assign pat1_fall0[2] = 1'b0;\n      assign pat1_rise1[2] = 1'b0;\n      assign pat1_fall1[2] = 1'b1;\n\n      assign pat1_rise0[1] = 1'b1;\n      assign pat1_fall0[1] = 1'b0;\n      assign pat1_rise1[1] = 1'b1;\n      assign pat1_fall1[1] = 1'b0;\n\n      assign pat1_rise0[0] = 1'b1;\n      assign pat1_fall0[0] = 1'b0;\n      assign pat1_rise1[0] = 1'b0;\n      assign pat1_fall1[0] = 1'b1;\n\n      \n      assign pat2_rise0[3] = 1'b0;\n      assign pat2_fall0[3] = 1'b1;\n      assign pat2_rise1[3] = 1'b1;\n      assign pat2_fall1[3] = 1'b0;\n\n      assign pat2_rise0[2] = 1'b1;\n      assign pat2_fall0[2] = 1'b0;\n      assign pat2_rise1[2] = 1'b0;\n      assign pat2_fall1[2] = 1'b1;\n\n      assign pat2_rise0[1] = 1'b0;\n      assign pat2_fall0[1] = 1'b1;\n      assign pat2_rise1[1] = 1'b0;\n      assign pat2_fall1[1] = 1'b1;\n\n      assign pat2_rise0[0] = 1'b1;\n      assign pat2_fall0[0] = 1'b0;\n      assign pat2_rise1[0] = 1'b1;\n      assign pat2_fall1[0] = 1'b0;\n\n      \n      \n      assign early1_rise0[3] = 2'b1;\n      assign early1_fall0[3] = 2'b0;\n      assign early1_rise1[3] = 2'b0;\n      assign early1_fall1[3] = 2'b1;\n\n      assign early1_rise0[2] = 2'b0;\n      assign early1_fall0[2] = 2'b1;\n      assign early1_rise1[2] = 2'b1;\n      assign early1_fall1[2] = 2'b0;\n\n      assign early1_rise0[1] = 2'b1;\n      assign early1_fall0[1] = 2'b0;\n      assign early1_rise1[1] = 2'b0;\n      assign early1_fall1[1] = 2'b1;\n\n      assign early1_rise0[0] = 2'b0;\n      assign early1_fall0[0] = 2'b1;\n      assign early1_rise1[0] = 2'b1;\n      assign early1_fall1[0] = 2'b0;\n\n      \n      assign early2_rise0[3] = 2'b1;\n      assign early2_fall0[3] = 2'b0;\n      assign early2_rise1[3] = 2'b1;\n      assign early2_fall1[3] = 2'b0;\n\n      assign early2_rise0[2] = 2'b0;\n      assign early2_fall0[2] = 2'b1;\n      assign early2_rise1[2] = 2'b0;\n      assign early2_fall1[2] = 2'b0;\n\n      assign early2_rise0[1] = 2'b0;\n      assign early2_fall0[1] = 2'b1;\n      assign early2_rise1[1] = 2'b1;\n      assign early2_fall1[1] = 2'b0;\n\n      assign early2_rise0[0] = 2'b1;\n      assign early2_fall0[0] = 2'b0;\n      assign early2_rise1[0] = 2'b1;\n      assign early2_fall1[0] = 2'b1;\n    end\n  endgenerate\n\n  \n  \n  \n  \n  \n  \n  generate\n    genvar pt_i;\n    if (nCK_PER_CLK == 4) begin: gen_pat_match_div4\n      for (pt_i = 0; pt_i < DRAM_WIDTH; pt_i = pt_i + 1) begin: gen_pat_match\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat_rise0[pt_i%4])\n            pat_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat_fall0[pt_i%4])\n            pat_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat_rise1[pt_i%4])\n            pat_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat_fall1[pt_i%4])\n            pat_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == pat_rise2[pt_i%4])\n            pat_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == pat_fall2[pt_i%4])\n            pat_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == pat_rise3[pt_i%4])\n            pat_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == pat_fall3[pt_i%4])\n            pat_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat_rise1[pt_i%4])\n            early1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat_fall1[pt_i%4])\n            early1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat_rise2[pt_i%4])\n            early1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat_fall2[pt_i%4])\n            early1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == pat_rise3[pt_i%4])\n            early1_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == pat_fall3[pt_i%4])\n            early1_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == early_rise0[pt_i%4])\n            early1_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == early_fall0[pt_i%4])\n            early1_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat_rise2[pt_i%4])\n            early2_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat_fall2[pt_i%4])\n            early2_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat_rise3[pt_i%4])\n            early2_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat_fall3[pt_i%4])\n            early2_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == early_rise0[pt_i%4])\n            early2_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == early_fall0[pt_i%4])\n            early2_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == early_rise1[pt_i%4])\n            early2_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == early_fall1[pt_i%4])\n            early2_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end\n      end\n\n\n       always @(posedge clk) begin\n         pat_match_rise0_and_r <= #TCQ &pat_match_rise0_r;\n         pat_match_fall0_and_r <= #TCQ &pat_match_fall0_r;\n         pat_match_rise1_and_r <= #TCQ &pat_match_rise1_r;\n         pat_match_fall1_and_r <= #TCQ &pat_match_fall1_r;\n         pat_match_rise2_and_r <= #TCQ &pat_match_rise2_r;\n         pat_match_fall2_and_r <= #TCQ &pat_match_fall2_r;\n         pat_match_rise3_and_r <= #TCQ &pat_match_rise3_r;\n         pat_match_fall3_and_r <= #TCQ &pat_match_fall3_r;\n         pat_data_match_r <= #TCQ (pat_match_rise0_and_r &&\n                                   pat_match_fall0_and_r &&\n                                   pat_match_rise1_and_r &&\n                                   pat_match_fall1_and_r &&\n                                   pat_match_rise2_and_r &&\n                                   pat_match_fall2_and_r &&\n                                   pat_match_rise3_and_r &&\n                                   pat_match_fall3_and_r);\n         pat_data_match_valid_r <= #TCQ rd_active_r3;\n       end\n\n       always @(posedge clk) begin\n         early1_match_rise0_and_r <= #TCQ &early1_match_rise0_r;\n         early1_match_fall0_and_r <= #TCQ &early1_match_fall0_r;\n         early1_match_rise1_and_r <= #TCQ &early1_match_rise1_r;\n         early1_match_fall1_and_r <= #TCQ &early1_match_fall1_r;\n         early1_match_rise2_and_r <= #TCQ &early1_match_rise2_r;\n         early1_match_fall2_and_r <= #TCQ &early1_match_fall2_r;\n         early1_match_rise3_and_r <= #TCQ &early1_match_rise3_r;\n         early1_match_fall3_and_r <= #TCQ &early1_match_fall3_r;\n         early1_data_match_r <= #TCQ (early1_match_rise0_and_r &&\n                                   early1_match_fall0_and_r &&\n                                   early1_match_rise1_and_r &&\n                                   early1_match_fall1_and_r &&\n                                   early1_match_rise2_and_r &&\n                                   early1_match_fall2_and_r &&\n                                   early1_match_rise3_and_r &&\n                                   early1_match_fall3_and_r);\n       end\n\n       always @(posedge clk) begin\n         early2_match_rise0_and_r <= #TCQ &early2_match_rise0_r;\n         early2_match_fall0_and_r <= #TCQ &early2_match_fall0_r;\n         early2_match_rise1_and_r <= #TCQ &early2_match_rise1_r;\n         early2_match_fall1_and_r <= #TCQ &early2_match_fall1_r;\n         early2_match_rise2_and_r <= #TCQ &early2_match_rise2_r;\n         early2_match_fall2_and_r <= #TCQ &early2_match_fall2_r;\n         early2_match_rise3_and_r <= #TCQ &early2_match_rise3_r;\n         early2_match_fall3_and_r <= #TCQ &early2_match_fall3_r;\n         early2_data_match_r <= #TCQ (early2_match_rise0_and_r &&\n                                   early2_match_fall0_and_r &&\n                                   early2_match_rise1_and_r &&\n                                   early2_match_fall1_and_r &&\n                                   early2_match_rise2_and_r &&\n                                   early2_match_fall2_and_r &&\n                                   early2_match_rise3_and_r &&\n                                   early2_match_fall3_and_r);\n       end\n\n    end else if (nCK_PER_CLK == 2) begin: gen_pat_match_div2\n\n      for (pt_i = 0; pt_i < DRAM_WIDTH; pt_i = pt_i + 1) begin: gen_pat_match\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat1_rise0[pt_i%4])\n            pat1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat1_fall0[pt_i%4])\n            pat1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat1_rise1[pt_i%4])\n            pat1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat1_fall1[pt_i%4])\n            pat1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat2_rise0[pt_i%4])\n            pat2_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat2_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat2_fall0[pt_i%4])\n            pat2_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat2_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat2_rise1[pt_i%4])\n            pat2_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat2_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat2_fall1[pt_i%4])\n            pat2_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat2_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == early1_rise0[pt_i%4])\n            early1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == early1_fall0[pt_i%4])\n            early1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == early1_rise1[pt_i%4])\n            early1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == early1_fall1[pt_i%4])\n            early1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        \n        \n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == early2_rise0[pt_i%4])\n            early2_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == early2_fall0[pt_i%4])\n            early2_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == early2_rise1[pt_i%4])\n            early2_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == early2_fall1[pt_i%4])\n            early2_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end\n      end\n\n        always @(posedge clk) begin\n          pat1_match_rise0_and_r <= #TCQ &pat1_match_rise0_r;\n          pat1_match_fall0_and_r <= #TCQ &pat1_match_fall0_r;\n          pat1_match_rise1_and_r <= #TCQ &pat1_match_rise1_r;\n          pat1_match_fall1_and_r <= #TCQ &pat1_match_fall1_r;\n          pat1_data_match_r <= #TCQ (pat1_match_rise0_and_r &&\n                                    pat1_match_fall0_and_r &&\n                                    pat1_match_rise1_and_r &&\n                                    pat1_match_fall1_and_r);\n          pat1_data_match_r1     <= #TCQ pat1_data_match_r;\n\n          pat2_match_rise0_and_r <= #TCQ &pat2_match_rise0_r && rd_active_r3;\n          pat2_match_fall0_and_r <= #TCQ &pat2_match_fall0_r && rd_active_r3;\n          pat2_match_rise1_and_r <= #TCQ &pat2_match_rise1_r && rd_active_r3;\n          pat2_match_fall1_and_r <= #TCQ &pat2_match_fall1_r && rd_active_r3;\n          pat2_data_match_r <= #TCQ (pat2_match_rise0_and_r &&\n                                    pat2_match_fall0_and_r &&\n                                    pat2_match_rise1_and_r &&\n                                    pat2_match_fall1_and_r);\n\n          \n          \n          \n          \n          pat_data_match_valid_r <= #TCQ rd_active_r4 & ~rd_active_r5;\n        end\n\n        always @(posedge clk) begin\n         early1_match_rise0_and_r <= #TCQ &early1_match_rise0_r;\n         early1_match_fall0_and_r <= #TCQ &early1_match_fall0_r;\n         early1_match_rise1_and_r <= #TCQ &early1_match_rise1_r;\n         early1_match_fall1_and_r <= #TCQ &early1_match_fall1_r;\n         early1_data_match_r <= #TCQ (early1_match_rise0_and_r &&\n                                      early1_match_fall0_and_r &&\n                                      early1_match_rise1_and_r &&\n                                      early1_match_fall1_and_r);\n         early1_data_match_r1 <= #TCQ early1_data_match_r;\n\n         early2_match_rise0_and_r <= #TCQ &early2_match_rise0_r && rd_active_r3;\n         early2_match_fall0_and_r <= #TCQ &early2_match_fall0_r && rd_active_r3;\n         early2_match_rise1_and_r <= #TCQ &early2_match_rise1_r && rd_active_r3;\n         early2_match_fall1_and_r <= #TCQ &early2_match_fall1_r && rd_active_r3;\n         early2_data_match_r <= #TCQ (early2_match_rise0_and_r &&\n                                      early2_match_fall0_and_r &&\n                                      early2_match_rise1_and_r &&\n                                      early2_match_fall1_and_r);\n       end\n\n    end\n  endgenerate\n\n  \n  \n  always @(posedge clk) begin\n    wrcal_pat_resume_r1 <= #TCQ wrcal_pat_resume_r;\n    wrcal_pat_resume_r2 <= #TCQ wrcal_pat_resume_r1;\n    wrcal_pat_resume    <= #TCQ wrcal_pat_resume_r2;\n  end\n\n  always @(posedge clk) begin\n    if (rst)\n      tap_inc_wait_cnt <= #TCQ 'd0;\n    else if ((cal2_state_r == CAL2_DQ_IDEL_DEC) ||\n             (cal2_state_r == CAL2_IFIFO_RESET) ||\n             (cal2_state_r == CAL2_SANITY_WAIT))\n      tap_inc_wait_cnt <= #TCQ tap_inc_wait_cnt + 1;\n    else\n      tap_inc_wait_cnt <= #TCQ 'd0;\n  end\n\n  always @(posedge clk) begin\n    if (rst)\n      not_empty_wait_cnt <= #TCQ 'd0;\n    else if ((cal2_state_r == CAL2_READ_WAIT) && wrcal_rd_wait)\n      not_empty_wait_cnt <= #TCQ not_empty_wait_cnt + 1;\n    else\n      not_empty_wait_cnt <= #TCQ 'd0;\n  end\n\n  always @(posedge clk)\n    cal2_state_r1 <= #TCQ cal2_state_r;\n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n  always @(posedge clk) begin\n    if (rst) begin\n      wrcal_dqs_cnt_r       <= #TCQ 'b0;\n      cal2_done_r           <= #TCQ 1'b0;\n      cal2_prech_req_r      <= #TCQ 1'b0;\n      cal2_state_r          <= #TCQ CAL2_IDLE;\n      wrcal_pat_err         <= #TCQ 1'b0;\n      wrcal_pat_resume_r    <= #TCQ 1'b0;\n      wrcal_act_req         <= #TCQ 1'b0;\n      cal2_if_reset         <= #TCQ 1'b0;\n      temp_wrcal_done       <= #TCQ 1'b0;\n      wrlvl_byte_redo       <= #TCQ 1'b0;\n      early1_data           <= #TCQ 1'b0;\n      early2_data           <= #TCQ 1'b0;\n      idelay_ld             <= #TCQ 1'b0;\n      idelay_ld_done        <= #TCQ 1'b0;\n      pat1_detect           <= #TCQ 1'b0;\n      early1_detect         <= #TCQ 1'b0;\n      wrcal_sanity_chk_done <= #TCQ 1'b0;\n      wrcal_sanity_chk_err  <= #TCQ 1'b0;\n    end else begin\n      cal2_prech_req_r <= #TCQ 1'b0;\n      case (cal2_state_r)\n        CAL2_IDLE: begin\n          wrcal_pat_err         <= #TCQ 1'b0;\n          if (wrcal_start) begin\n            cal2_if_reset  <= #TCQ 1'b0;\n            if (SIM_CAL_OPTION == \"SKIP_CAL\")\n              \n              cal2_state_r <= #TCQ CAL2_DONE;\n            else\n              cal2_state_r <= #TCQ CAL2_READ_WAIT;\n          end\n        end\n\n        \n        \n        CAL2_READ_WAIT: begin\n          wrcal_pat_resume_r <= #TCQ 1'b0;\n          cal2_if_reset      <= #TCQ 1'b0;\n          \n          \n          \n          \n          if (pat_data_match_valid_r && (nCK_PER_CLK == 4)) begin\n            if (pat_data_match_r)\n              \n              cal2_state_r <= #TCQ CAL2_NEXT_DQS;\n            else begin\n              if (wrcal_sanity_chk_r)\n                cal2_state_r <= #TCQ CAL2_ERR;\n              \n              \n              else if (early1_data_match_r) begin\n                early1_data <= #TCQ 1'b1;\n                early2_data <= #TCQ 1'b0;\n                wrlvl_byte_redo <= #TCQ 1'b1;\n                cal2_state_r    <= #TCQ CAL2_WRLVL_WAIT;\n              end else if (early2_data_match_r) begin\n                early1_data <= #TCQ 1'b0;\n                early2_data <= #TCQ 1'b1;\n                wrlvl_byte_redo <= #TCQ 1'b1;\n                cal2_state_r    <= #TCQ CAL2_WRLVL_WAIT;\n              \n              \n              end else if (~idelay_ld_done) begin\n                cal2_state_r <= #TCQ CAL2_DQ_IDEL_DEC;\n                idelay_ld    <= #TCQ 1'b1;\n              end else\n                cal2_state_r <= #TCQ CAL2_ERR;\n            end\n          end else if (pat_data_match_valid_r && (nCK_PER_CLK == 2)) begin\n            if ((pat1_data_match_r1 && pat2_data_match_r) ||\n                (pat1_detect && pat2_data_match_r))\n              \n              cal2_state_r <= #TCQ CAL2_NEXT_DQS;\n            else if (pat1_data_match_r1 && ~pat2_data_match_r) begin\n              cal2_state_r <= #TCQ CAL2_READ_WAIT;\n              pat1_detect  <= #TCQ 1'b1;\n            end else begin\n              \n              \n              if (wrcal_sanity_chk_r)\n                cal2_state_r <= #TCQ CAL2_ERR;\n              else if ((early1_data_match_r1 && early2_data_match_r) ||\n                  (early1_detect && early2_data_match_r)) begin\n                early1_data <= #TCQ 1'b1;\n                early2_data <= #TCQ 1'b0;\n                wrlvl_byte_redo <= #TCQ 1'b1;\n                cal2_state_r    <= #TCQ CAL2_WRLVL_WAIT;\n              end else if (early1_data_match_r1 && ~early2_data_match_r) begin\n                early1_detect <= #TCQ 1'b1;\n                cal2_state_r  <= #TCQ CAL2_READ_WAIT;\n              \n              \n              end else if (~idelay_ld_done) begin\n                cal2_state_r <= #TCQ CAL2_DQ_IDEL_DEC;\n                idelay_ld    <= #TCQ 1'b1;\n              end else\n                cal2_state_r <= #TCQ CAL2_ERR;\n            end\n          end else if (not_empty_wait_cnt == 'd31)\n            cal2_state_r <= #TCQ CAL2_ERR;\n        end\n\n        CAL2_WRLVL_WAIT: begin\n          early1_detect <= #TCQ 1'b0;\n          if (wrlvl_byte_done && ~wrlvl_byte_done_r)\n            wrlvl_byte_redo   <= #TCQ 1'b0;\n          if (wrlvl_byte_done) begin\n            if (rd_active_r1 && ~rd_active_r) begin\n            cal2_state_r  <= #TCQ CAL2_IFIFO_RESET;\n            cal2_if_reset <= #TCQ 1'b1;\n            early1_data   <= #TCQ 1'b0;\n            early2_data   <= #TCQ 1'b0;\n          end\n        end\n        end\n\n        CAL2_DQ_IDEL_DEC: begin\n          if (tap_inc_wait_cnt == 'd4) begin\n            idelay_ld      <= #TCQ 1'b0;\n            cal2_state_r   <= #TCQ CAL2_IFIFO_RESET;\n            cal2_if_reset  <= #TCQ 1'b1;\n            idelay_ld_done <= #TCQ 1'b1;\n          end\n        end\n\n        CAL2_IFIFO_RESET: begin\n          if (tap_inc_wait_cnt == 'd15) begin\n            cal2_if_reset      <= #TCQ 1'b0;\n            if (wrcal_sanity_chk_r)\n              cal2_state_r       <= #TCQ CAL2_DONE;\n            else if (idelay_ld_done) begin\n              wrcal_pat_resume_r <= #TCQ 1'b1;\n              cal2_state_r       <= #TCQ CAL2_READ_WAIT;\n            end else\n              cal2_state_r       <= #TCQ CAL2_IDLE;\n          end\n        end\n\n        \n        CAL2_NEXT_DQS: begin\n          \n          \n\n          \n          \n                    \n          if (wrcal_sanity_chk_r && (wrcal_dqs_cnt_r != DQS_WIDTH-1)) begin\n            cal2_prech_req_r   <= #TCQ 1'b0;\n            wrcal_dqs_cnt_r    <= #TCQ wrcal_dqs_cnt_r + 1;\n            cal2_state_r       <= #TCQ CAL2_SANITY_WAIT;\n          end else\n            cal2_prech_req_r  <= #TCQ 1'b1;\n          idelay_ld_done    <= #TCQ 1'b0;\n          pat1_detect       <= #TCQ 1'b0;\n          if (prech_done)\n            if (((DQS_WIDTH == 1) || (SIM_CAL_OPTION == \"FAST_CAL\")) ||\n                (wrcal_dqs_cnt_r == DQS_WIDTH-1)) begin\n              \n              \n              \n              if (wrcal_sanity_chk_r) begin\n                cal2_if_reset    <= #TCQ 1'b1;\n                cal2_state_r     <= #TCQ CAL2_IFIFO_RESET;\n              end else\n                cal2_state_r     <= #TCQ CAL2_DONE;\n            end else begin\n              \n              wrcal_dqs_cnt_r    <= #TCQ wrcal_dqs_cnt_r + 1;\n              cal2_state_r       <= #TCQ CAL2_READ_WAIT;\n            end\n        end\n    \n        CAL2_SANITY_WAIT: begin\n          if (tap_inc_wait_cnt == 'd15) begin\n            cal2_state_r       <= #TCQ CAL2_READ_WAIT;\n            wrcal_pat_resume_r <= #TCQ 1'b1;\n          end\n        end\n\n        \n        CAL2_DONE: begin\n          if (wrcal_sanity_chk && ~wrcal_sanity_chk_r) begin\n            cal2_done_r     <= #TCQ 1'b0;\n            wrcal_dqs_cnt_r <= #TCQ 'd0;\n            cal2_state_r    <= #TCQ CAL2_IDLE;\n          end else\n            cal2_done_r      <= #TCQ 1'b1;\n            cal2_prech_req_r <= #TCQ 1'b0;\n            cal2_if_reset    <= #TCQ 1'b0;\n            if (wrcal_sanity_chk_r)\n              wrcal_sanity_chk_done <= #TCQ 1'b1;\n        end\n\n        \n        CAL2_ERR: begin\n          wrcal_pat_resume_r <= #TCQ 1'b0;\n          if (wrcal_sanity_chk_r)\n            wrcal_sanity_chk_err <= #TCQ 1'b1;\n          else\n            wrcal_pat_err      <= #TCQ 1'b1;\n          cal2_state_r       <= #TCQ CAL2_ERR;\n        end\n      endcase\n    end\n  end\n\n  \n  \n  always @(posedge clk)\n    if (rst)\n      cal2_done_r1  <= #TCQ 1'b0;\n    else\n      cal2_done_r1  <= #TCQ cal2_done_r;\n\n  always @(posedge clk)\n    if (rst || (wrcal_sanity_chk && ~wrcal_sanity_chk_r))\n      wrcal_done <= #TCQ 1'b0;\n    else if (cal2_done_r)\n      wrcal_done <= #TCQ 1'b1;\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: mig_7series_v4_1_ddr_phy_wrcal. Module specification: This module implements a write calibration (WRCAL) procedure for a DDR memory interface, supporting both 2:1 and 4:1 memory:fabric clock ratios. It performs pattern matching on read data to determine the optimal write timing for each DQS group. Key inputs include clk, rst, wrcal_start, wrcal_rd_wait, and rd_data, while outputs include wrcal_done, wrcal_pat_err, and various debug signals. Internal signals such as cal2_state_r, wrcal_dqs_cnt_r, and pat_data_match_r are used to manage the calibration state machine and pattern matching. The module consists of several blocks: a state machine for controlling the calibration process, pattern generation an"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_phy_wrcal\n\nExplanation: This module implements a write calibration (WRCAL) procedure for a DDR memory interface. It performs pattern matching on read data to determine the optimal write timing for each DQS group. The module supports both 2:1 and 4:1 memory:fabric clock ratios. It includes functionality for detecting early or late data patterns, adjusting delays, and handling various calibration states. The calibration process involves sending known patterns, reading back the data, and comparing it to expected values to determine if timing adjustments are needed. The module also includes sanity checks and error handling mechanisms to ensure reliable calibration results."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nclk, rst, wrcal_start, wrcal_rd_wait, wrcal_sanity_chk, dqsfound_retry_done, phy_rddata_en, prech_done, rd_data, wl_po_coarse_cnt, wl_po_fine_cnt, wrlvl_byte_done\n\nExplanation:\n- clk, rst: Clock and reset signals\n- wrcal_start: Initiates the write calibration process\n- wrcal_rd_wait: Indicates when to wait for read data\n- wrcal_sanity_chk: Triggers a sanity check during calibration\n- dqsfound_retry_done: Indicates completion of DQS retry process\n- phy_rddata_en: Enables read data\n- prech_done: Indicates precharge operation completion\n- rd_data: Read data from memory\n- wl_po_coarse_cnt, wl_po_fine_cnt: Write leveling phase offset counters\n- wrlvl_byte_done: Indicates completion of write leveling for a byte\n\nOutput ports:\ndqsfound_retry, wrcal_read_req, wrcal_act_req, wrcal_done, wrcal_pat_err, wrcal_prech_req, temp_wrcal_done, wrcal_sanity_chk_done, wrlvl_byte_redo, early1_data, early2_data, idelay_ld, wrcal_pat_resume, po_stg2_wrcal_cnt, phy_if_reset, dbg_final_po_fine_tap_cnt, dbg_final_po_coarse_tap_cnt, dbg_phy_wrcal\n\nExplanation:\n- dqsfound_retry: Requests retry of DQS finding process\n- wrcal_read_req: Requests a read operation during calibration\n- wrcal_act_req, wrcal_prech_req: Requests activate and precharge operations\n- wrcal_done: Indicates completion of write calibration\n- wrcal_pat_err: Signals a pattern error during calibration\n- temp_wrcal_done, wrcal_sanity_chk_done: Temporary and sanity check completion signals\n- wrlvl_byte_redo: Requests redo of write leveling for a byte\n- early1_data, early2_data: Indicates early data detection\n- idelay_ld: Controls loading of IDELAY values\n- wrcal_pat_resume: Signals to resume pattern generation\n- po_stg2_wrcal_cnt: Phase offset counter for stage 2 of write calibration\n- phy_if_reset: Resets the PHY interface\n- dbg_final_po_fine_tap_cnt, dbg_final_po_coarse_tap_cnt, dbg_phy_wrcal: Debug outputs for phase offset counters and calibration status"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\ncal2_state_r, wrcal_dqs_cnt_r, po_coarse_tap_cnt, po_fine_tap_cnt, pat_data_match_r, early1_data_match_r, early2_data_match_r, pat_data_match_valid_r, rd_active_r, rd_mux_sel_r, mux_rd_rise0_r, mux_rd_fall0_r, mux_rd_rise1_r, mux_rd_fall1_r, sr_rise0_r, sr_fall0_r, sr_rise1_r, sr_fall1_r, pat_match_rise0_r, pat_match_fall0_r, pat_match_rise1_r, pat_match_fall1_r, early1_match_rise0_r, early1_match_fall0_r, early1_match_rise1_r, early1_match_fall1_r, early2_match_rise0_r, early2_match_fall0_r, early2_match_rise1_r, early2_match_fall1_r, cal2_done_r, cal2_prech_req_r, wrcal_pat_resume_r, idelay_ld_done, pat1_detect, early1_detect.\n\nExplanation:\n- cal2_state_r: Stores the current state of the calibration state machine\n- wrcal_dqs_cnt_r: Counts the current DQS group being calibrated\n- po_coarse_tap_cnt, po_fine_tap_cnt: Store phase offset tap counts for coarse and fine adjustments\n- pat_data_match_r: Indicates if the read data matches the expected pattern\n- early1_data_match_r, early2_data_match_r: Indicate early data detection for different scenarios\n- pat_data_match_valid_r: Validates the pattern match result\n- rd_active_r: Indicates active read operation\n- rd_mux_sel_r: Selects which DQS group's data to process\n- mux_rd_rise0_r, mux_rd_fall0_r, mux_rd_rise1_r, mux_rd_fall1_r: Store muxed read data for rising and falling edges\n- sr_rise0_r, sr_fall0_r, sr_rise1_r, sr_fall1_r: Shift registers for storing read data\n- pat_match_rise0_r, pat_match_fall0_r, pat_match_rise1_r, pat_match_fall1_r: Indicate pattern matches for different data edges\n- early1_match_rise0_r, early1_match_fall0_r, early1_match_rise1_r, early1_match_fall1_r: Indicate early pattern matches for scenario 1\n- early2_match_rise0_r, early2_match_fall0_r, early2_match_rise1_r, early2_match_fall1_r: Indicate early pattern matches for scenario 2\n- cal2_done_r: Indicates completion of calibration stage 2\n- cal2_prech_req_r: Requests precharge operation during calibration\n- wrcal_pat_resume_r: Signals to resume pattern generation\n- idelay_ld_done: Indicates completion of IDELAY loading\n- pat1_detect, early1_detect: Used for detecting specific patterns in 2:1 mode"
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule mig_7series_v4_1_ddr_phy_wrcal #\n  (\n   parameter TCQ             = 100,    \n   parameter nCK_PER_CLK     = 2,      \n   parameter CLK_PERIOD      = 2500,\n   parameter DQ_WIDTH        = 64,     \n   parameter DQS_CNT_WIDTH   = 3,      \n   parameter DQS_WIDTH       = 8,      \n   parameter DRAM_WIDTH      = 8,      \n   parameter PRE_REV3ES      = \"OFF\",  \n   parameter SIM_CAL_OPTION  = \"NONE\"  \n   )\n  (\n   input                        clk,\n   input                        rst,\n   \n   input                        wrcal_start,\n   input                        wrcal_rd_wait,\n   input                        wrcal_sanity_chk,\n   input                        dqsfound_retry_done,\n   input                        phy_rddata_en,\n   output                       dqsfound_retry,\n   output                       wrcal_read_req,\n   output reg                   wrcal_act_req,\n   output reg                   wrcal_done,\n   output reg                   wrcal_pat_err,\n   output reg                   wrcal_prech_req,\n   output reg                   temp_wrcal_done,\n   output reg                   wrcal_sanity_chk_done,\n   input                        prech_done,\n   \n   input [2*nCK_PER_CLK*DQ_WIDTH-1:0] rd_data,\n   \n   \n   input [3*DQS_WIDTH-1:0]      wl_po_coarse_cnt,\n   input [6*DQS_WIDTH-1:0]      wl_po_fine_cnt,\n   input                        wrlvl_byte_done,\n   output reg                   wrlvl_byte_redo,\n   output reg                   early1_data,\n   output reg                   early2_data,\n   \n   output reg                   idelay_ld,\n   output reg                   wrcal_pat_resume,   \n   output reg [DQS_CNT_WIDTH:0] po_stg2_wrcal_cnt,\n   output                       phy_if_reset,\n\n   \n   output [6*DQS_WIDTH-1:0]     dbg_final_po_fine_tap_cnt,\n   output [3*DQS_WIDTH-1:0]     dbg_final_po_coarse_tap_cnt,\n   output [99:0]                dbg_phy_wrcal\n   );\n\n  \n  \n\n  \n  localparam RD_SHIFT_LEN = 1; \n\n  \n  localparam NUM_READS = 2;\n\n  \n  localparam RDEN_WAIT_CNT = 12;\n\n  localparam  COARSE_CNT = (CLK_PERIOD/nCK_PER_CLK <= 2500) ? 3 : 6;\n  localparam  FINE_CNT   = (CLK_PERIOD/nCK_PER_CLK <= 2500) ? 22 : 44;\n\n\n  localparam CAL2_IDLE            = 4'h0;\n  localparam CAL2_READ_WAIT       = 4'h1;\n  localparam CAL2_NEXT_DQS        = 4'h2;\n  localparam CAL2_WRLVL_WAIT      = 4'h3;\n  localparam CAL2_IFIFO_RESET     = 4'h4;\n  localparam CAL2_DQ_IDEL_DEC     = 4'h5;\n  localparam CAL2_DONE            = 4'h6;\n  localparam CAL2_SANITY_WAIT     = 4'h7;\n  localparam CAL2_ERR             = 4'h8;\n\n  integer                 i,j,k,l,m,p,q,d;\n\n  reg [2:0]               po_coarse_tap_cnt [0:DQS_WIDTH-1];\n  reg [3*DQS_WIDTH-1:0]   po_coarse_tap_cnt_w;\n  reg [5:0]               po_fine_tap_cnt [0:DQS_WIDTH-1];\n  reg [6*DQS_WIDTH-1:0]   po_fine_tap_cnt_w;\n reg [DQS_CNT_WIDTH:0] wrcal_dqs_cnt_r;\n  reg [4:0]               not_empty_wait_cnt;\n  reg [3:0]               tap_inc_wait_cnt;\n  reg                     cal2_done_r;\n  reg                     cal2_done_r1;\n  reg                     cal2_prech_req_r;\n  reg [3:0]               cal2_state_r;\n  reg [3:0]               cal2_state_r1;\n  reg [2:0]               wl_po_coarse_cnt_w [0:DQS_WIDTH-1];\n  reg [5:0]               wl_po_fine_cnt_w [0:DQS_WIDTH-1];\n  reg                     cal2_if_reset;\n  reg                     wrcal_pat_resume_r;\n  reg                     wrcal_pat_resume_r1;\n  reg                     wrcal_pat_resume_r2;\n  reg                     wrcal_pat_resume_r3;\n  reg [DRAM_WIDTH-1:0]    mux_rd_fall0_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_fall1_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_rise0_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_rise1_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_fall2_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_fall3_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_rise2_r;\n  reg [DRAM_WIDTH-1:0]    mux_rd_rise3_r;\n  reg                     pat_data_match_r;\n  reg                     pat1_data_match_r;\n  reg                     pat1_data_match_r1;\n  reg                     pat2_data_match_r;\n  reg                     pat_data_match_valid_r;\n  wire [RD_SHIFT_LEN-1:0] pat_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_fall2 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_fall3 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat1_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat1_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat2_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat2_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_fall2 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_fall3 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early1_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early1_fall1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early2_fall0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early2_fall1 [3:0];\n  reg [DRAM_WIDTH-1:0]    pat_match_fall0_r;\n  reg                     pat_match_fall0_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_fall1_r;\n  reg                     pat_match_fall1_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_fall2_r;\n  reg                     pat_match_fall2_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_fall3_r;\n  reg                     pat_match_fall3_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_rise0_r;\n  reg                     pat_match_rise0_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_rise1_r;\n  reg                     pat_match_rise1_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_rise2_r;\n  reg                     pat_match_rise2_and_r;\n  reg [DRAM_WIDTH-1:0]    pat_match_rise3_r;\n  reg                     pat_match_rise3_and_r;\n  reg [DRAM_WIDTH-1:0]    pat1_match_rise0_r;\n  reg [DRAM_WIDTH-1:0]    pat1_match_rise1_r;\n  reg [DRAM_WIDTH-1:0]    pat1_match_fall0_r;\n  reg [DRAM_WIDTH-1:0]    pat1_match_fall1_r;\n  reg [DRAM_WIDTH-1:0]    pat2_match_rise0_r;\n  reg [DRAM_WIDTH-1:0]    pat2_match_rise1_r;\n  reg [DRAM_WIDTH-1:0]    pat2_match_fall0_r;\n  reg [DRAM_WIDTH-1:0]    pat2_match_fall1_r;\n  reg                     pat1_match_rise0_and_r;\n  reg                     pat1_match_rise1_and_r;\n  reg                     pat1_match_fall0_and_r;\n  reg                     pat1_match_fall1_and_r;\n  reg                     pat2_match_rise0_and_r;\n  reg                     pat2_match_rise1_and_r;\n  reg                     pat2_match_fall0_and_r;\n  reg                     pat2_match_fall1_and_r;\n  reg                     early1_data_match_r;\n  reg                     early1_data_match_r1;\n  reg [DRAM_WIDTH-1:0]    early1_match_fall0_r;\n  reg                     early1_match_fall0_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_fall1_r;\n  reg                     early1_match_fall1_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_fall2_r;\n  reg                     early1_match_fall2_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_fall3_r;\n  reg                     early1_match_fall3_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_rise0_r;\n  reg                     early1_match_rise0_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_rise1_r;\n  reg                     early1_match_rise1_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_rise2_r;\n  reg                     early1_match_rise2_and_r;\n  reg [DRAM_WIDTH-1:0]    early1_match_rise3_r;\n  reg                     early1_match_rise3_and_r;\n  reg                     early2_data_match_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_fall0_r;\n  reg                     early2_match_fall0_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_fall1_r;\n  reg                     early2_match_fall1_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_fall2_r;\n  reg                     early2_match_fall2_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_fall3_r;\n  reg                     early2_match_fall3_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_rise0_r;\n  reg                     early2_match_rise0_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_rise1_r;\n  reg                     early2_match_rise1_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_rise2_r;\n  reg                     early2_match_rise2_and_r;\n  reg [DRAM_WIDTH-1:0]    early2_match_rise3_r;\n  reg                     early2_match_rise3_and_r;\n  wire [RD_SHIFT_LEN-1:0] pat_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_rise2 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat_rise3 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat1_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat1_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat2_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] pat2_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_rise2 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early_rise3 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early1_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early1_rise1 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early2_rise0 [3:0];\n  wire [RD_SHIFT_LEN-1:0] early2_rise1 [3:0];\n  wire [DQ_WIDTH-1:0]     rd_data_rise0;\n  wire [DQ_WIDTH-1:0]     rd_data_fall0;\n  wire [DQ_WIDTH-1:0]     rd_data_rise1;\n  wire [DQ_WIDTH-1:0]     rd_data_fall1;\n  wire [DQ_WIDTH-1:0]     rd_data_rise2;\n  wire [DQ_WIDTH-1:0]     rd_data_fall2;\n  wire [DQ_WIDTH-1:0]     rd_data_rise3;\n  wire [DQ_WIDTH-1:0]     rd_data_fall3;\n  reg [DQS_CNT_WIDTH:0]   rd_mux_sel_r;\n  reg                     rd_active_posedge_r;\n  reg                     rd_active_r;\n  reg                     rd_active_r1;\n  reg                     rd_active_r2;\n  reg                     rd_active_r3;\n  reg                     rd_active_r4;\n  reg                     rd_active_r5;\n  reg [RD_SHIFT_LEN-1:0]  sr_fall0_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_fall1_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_rise0_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_rise1_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_fall2_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_fall3_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_rise2_r [DRAM_WIDTH-1:0];\n  reg [RD_SHIFT_LEN-1:0]  sr_rise3_r [DRAM_WIDTH-1:0];\n  reg                     wrlvl_byte_done_r;\n  reg                     idelay_ld_done;\n  reg                     pat1_detect;\n  reg                     early1_detect;\n  reg                     wrcal_sanity_chk_r;\n  reg                     wrcal_sanity_chk_err;\n\n\n  \n  \n  \n\n  always @(*) begin\n    for (d = 0; d < DQS_WIDTH; d = d + 1) begin\n      po_fine_tap_cnt_w[(6*d)+:6]   = po_fine_tap_cnt[d];\n      po_coarse_tap_cnt_w[(3*d)+:3] = po_coarse_tap_cnt[d];\n    end\n  end\n\n  assign dbg_final_po_fine_tap_cnt   = po_fine_tap_cnt_w;\n  assign dbg_final_po_coarse_tap_cnt = po_coarse_tap_cnt_w;\n\n  generate\n    if (nCK_PER_CLK == 4) begin: match_data_4\n      assign dbg_phy_wrcal[0]    = pat_data_match_r;\n    end else begin:match_data_2\n      assign dbg_phy_wrcal[0]    = 1'b0;\n    end\n  endgenerate\n  assign dbg_phy_wrcal[4:1]  = cal2_state_r1[3:0];\n  assign dbg_phy_wrcal[5]    = wrcal_sanity_chk_err;\n  assign dbg_phy_wrcal[6]    = wrcal_start;\n  assign dbg_phy_wrcal[7]    = wrcal_done;\n  assign dbg_phy_wrcal[8]    = pat_data_match_valid_r;\n  assign dbg_phy_wrcal[13+:DQS_CNT_WIDTH]= wrcal_dqs_cnt_r;\n  assign dbg_phy_wrcal[17+:5]  = not_empty_wait_cnt;\n  assign dbg_phy_wrcal[22]     = early1_data;\n  assign dbg_phy_wrcal[23]     = early2_data;\n  assign dbg_phy_wrcal[24+:8]     = mux_rd_rise0_r;\n  assign dbg_phy_wrcal[32+:8]     = mux_rd_fall0_r;\n  assign dbg_phy_wrcal[40+:8]     = mux_rd_rise1_r;\n  assign dbg_phy_wrcal[48+:8]     = mux_rd_fall1_r;\n  generate\n    if (nCK_PER_CLK == 4) begin: mux_data_4\n      assign dbg_phy_wrcal[56+:8]     = mux_rd_rise2_r;\n      assign dbg_phy_wrcal[64+:8]     = mux_rd_fall2_r;\n      assign dbg_phy_wrcal[72+:8]     = mux_rd_rise3_r;\n      assign dbg_phy_wrcal[80+:8]     = mux_rd_fall3_r;\n    end else begin: mux_data_2\n      assign dbg_phy_wrcal[56+:8] = {8{1'b0}};\n      assign dbg_phy_wrcal[64+:8] = {8{1'b0}};\n      assign dbg_phy_wrcal[72+:8] = {8{1'b0}};\n      assign dbg_phy_wrcal[80+:8] = {8{1'b0}};\n    end\n  endgenerate\n  assign dbg_phy_wrcal[88]     = early1_data_match_r;\n  assign dbg_phy_wrcal[89]     = early2_data_match_r;\n  assign dbg_phy_wrcal[90]     = wrcal_sanity_chk_r & pat_data_match_valid_r;\n  assign dbg_phy_wrcal[91]     = wrcal_sanity_chk_r;\n  assign dbg_phy_wrcal[92]     = wrcal_sanity_chk_done;\n\n  assign dqsfound_retry        = 1'b0;\n  assign wrcal_read_req        = 1'b0;\n  assign phy_if_reset          = cal2_if_reset;\n\n   \n   \n   \n   \n\n   always @(posedge clk) begin\n     po_stg2_wrcal_cnt  <= #TCQ wrcal_dqs_cnt_r;\n     wrlvl_byte_done_r  <= #TCQ wrlvl_byte_done;\n     wrcal_sanity_chk_r <= #TCQ wrcal_sanity_chk;\n   end\n\n  \n  \n  \n  \n\n  generate\n    if (nCK_PER_CLK == 4) begin: gen_rd_data_div4\n      assign rd_data_rise0 = rd_data[DQ_WIDTH-1:0];\n      assign rd_data_fall0 = rd_data[2*DQ_WIDTH-1:DQ_WIDTH];\n      assign rd_data_rise1 = rd_data[3*DQ_WIDTH-1:2*DQ_WIDTH];\n      assign rd_data_fall1 = rd_data[4*DQ_WIDTH-1:3*DQ_WIDTH];\n      assign rd_data_rise2 = rd_data[5*DQ_WIDTH-1:4*DQ_WIDTH];\n      assign rd_data_fall2 = rd_data[6*DQ_WIDTH-1:5*DQ_WIDTH];\n      assign rd_data_rise3 = rd_data[7*DQ_WIDTH-1:6*DQ_WIDTH];\n      assign rd_data_fall3 = rd_data[8*DQ_WIDTH-1:7*DQ_WIDTH];\n    end else if (nCK_PER_CLK == 2) begin: gen_rd_data_div2\n      assign rd_data_rise0 = rd_data[DQ_WIDTH-1:0];\n      assign rd_data_fall0 = rd_data[2*DQ_WIDTH-1:DQ_WIDTH];\n      assign rd_data_rise1 = rd_data[3*DQ_WIDTH-1:2*DQ_WIDTH];\n      assign rd_data_fall1 = rd_data[4*DQ_WIDTH-1:3*DQ_WIDTH];\n    end\n  endgenerate\n\n  \n  \n  \n  \n\n  always @(*) begin\n    for (m = 0; m < DQS_WIDTH; m = m + 1) begin\n      wl_po_coarse_cnt_w[m] = wl_po_coarse_cnt[3*m+:3];\n      wl_po_fine_cnt_w[m]   = wl_po_fine_cnt[6*m+:6];\n    end\n  end\n\n  always @(posedge clk) begin\n    if (rst) begin\n      for (p = 0; p < DQS_WIDTH; p = p + 1) begin\n        po_coarse_tap_cnt[p] <= #TCQ {3{1'b0}};\n        po_fine_tap_cnt[p]   <= #TCQ {6{1'b0}};\n      end\n    end else if (cal2_done_r && ~cal2_done_r1) begin\n      for (q = 0; q < DQS_WIDTH; q = q + 1) begin\n        po_coarse_tap_cnt[q] <= #TCQ wl_po_coarse_cnt_w[i];\n        po_fine_tap_cnt[q]   <= #TCQ wl_po_fine_cnt_w[i];\n      end\n    end\n  end\n\n  always @(posedge clk) begin\n    rd_mux_sel_r <= #TCQ wrcal_dqs_cnt_r;\n  end\n\n  \n  \n  \n  generate\n    genvar mux_i;\n    if (nCK_PER_CLK == 4) begin: gen_mux_rd_div4\n      for (mux_i = 0; mux_i < DRAM_WIDTH; mux_i = mux_i + 1) begin: gen_mux_rd\n        always @(posedge clk) begin\n          mux_rd_rise0_r[mux_i] <= #TCQ rd_data_rise0[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall0_r[mux_i] <= #TCQ rd_data_fall0[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_rise1_r[mux_i] <= #TCQ rd_data_rise1[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall1_r[mux_i] <= #TCQ rd_data_fall1[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_rise2_r[mux_i] <= #TCQ rd_data_rise2[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall2_r[mux_i] <= #TCQ rd_data_fall2[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_rise3_r[mux_i] <= #TCQ rd_data_rise3[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall3_r[mux_i] <= #TCQ rd_data_fall3[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n        end\n      end\n    end else if (nCK_PER_CLK == 2) begin: gen_mux_rd_div2\n      for (mux_i = 0; mux_i < DRAM_WIDTH; mux_i = mux_i + 1) begin: gen_mux_rd\n        always @(posedge clk) begin\n          mux_rd_rise0_r[mux_i] <= #TCQ rd_data_rise0[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall0_r[mux_i] <= #TCQ rd_data_fall0[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_rise1_r[mux_i] <= #TCQ rd_data_rise1[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n          mux_rd_fall1_r[mux_i] <= #TCQ rd_data_fall1[DRAM_WIDTH*rd_mux_sel_r + mux_i];\n        end\n      end\n    end\n  endgenerate\n\n  \n  \n  \n  \n  \n  \n  \n  \n\n  always @(posedge clk)\n    if (rst)\n      wrcal_prech_req <= #TCQ 1'b0;\n    else\n      \n      wrcal_prech_req <= #TCQ cal2_prech_req_r;\n\n  \n  \n  \n  \n  \n\n  generate\n    genvar rd_i;\n    if (nCK_PER_CLK == 4) begin: gen_sr_div4\n      for (rd_i = 0; rd_i < DRAM_WIDTH; rd_i = rd_i + 1) begin: gen_sr\n        always @(posedge clk) begin\n          sr_rise0_r[rd_i] <= #TCQ mux_rd_rise0_r[rd_i];\n          sr_fall0_r[rd_i] <= #TCQ mux_rd_fall0_r[rd_i];\n          sr_rise1_r[rd_i] <= #TCQ mux_rd_rise1_r[rd_i];\n          sr_fall1_r[rd_i] <= #TCQ mux_rd_fall1_r[rd_i];\n          sr_rise2_r[rd_i] <= #TCQ mux_rd_rise2_r[rd_i];\n          sr_fall2_r[rd_i] <= #TCQ mux_rd_fall2_r[rd_i];\n          sr_rise3_r[rd_i] <= #TCQ mux_rd_rise3_r[rd_i];\n          sr_fall3_r[rd_i] <= #TCQ mux_rd_fall3_r[rd_i];\n        end\n      end\n    end else if (nCK_PER_CLK == 2) begin: gen_sr_div2\n      for (rd_i = 0; rd_i < DRAM_WIDTH; rd_i = rd_i + 1) begin: gen_sr\n        always @(posedge clk) begin\n          sr_rise0_r[rd_i] <= #TCQ mux_rd_rise0_r[rd_i];\n          sr_fall0_r[rd_i] <= #TCQ mux_rd_fall0_r[rd_i];\n          sr_rise1_r[rd_i] <= #TCQ mux_rd_rise1_r[rd_i];\n          sr_fall1_r[rd_i] <= #TCQ mux_rd_fall1_r[rd_i];\n        end\n      end\n    end\n  endgenerate\n\n \n  \n  \n  \n  \n  \n  \n  \n\n  always @(posedge clk) begin\n    rd_active_r         <= #TCQ phy_rddata_en;\n    rd_active_r1        <= #TCQ rd_active_r;\n    rd_active_r2        <= #TCQ rd_active_r1;\n    rd_active_r3        <= #TCQ rd_active_r2;\n    rd_active_r4        <= #TCQ rd_active_r3;\n    rd_active_r5        <= #TCQ rd_active_r4;\n  end\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  generate\n    if (nCK_PER_CLK == 4) begin: gen_pat_div4\n    \n      assign pat_rise0[3] = 1'b1;\n      assign pat_fall0[3] = 1'b0;\n      assign pat_rise1[3] = 1'b1;\n      assign pat_fall1[3] = 1'b0;\n      assign pat_rise2[3] = 1'b0;\n      assign pat_fall2[3] = 1'b1;\n      assign pat_rise3[3] = 1'b1;\n      assign pat_fall3[3] = 1'b0;\n\n      assign pat_rise0[2] = 1'b1;\n      assign pat_fall0[2] = 1'b0;\n      assign pat_rise1[2] = 1'b0;\n      assign pat_fall1[2] = 1'b1;\n      assign pat_rise2[2] = 1'b1;\n      assign pat_fall2[2] = 1'b0;\n      assign pat_rise3[2] = 1'b0;\n      assign pat_fall3[2] = 1'b1;\n\n      assign pat_rise0[1] = 1'b1;\n      assign pat_fall0[1] = 1'b0;\n      assign pat_rise1[1] = 1'b1;\n      assign pat_fall1[1] = 1'b0;\n      assign pat_rise2[1] = 1'b0;\n      assign pat_fall2[1] = 1'b1;\n      assign pat_rise3[1] = 1'b0;\n      assign pat_fall3[1] = 1'b1;\n\n      assign pat_rise0[0] = 1'b1;\n      assign pat_fall0[0] = 1'b0;\n      assign pat_rise1[0] = 1'b0;\n      assign pat_fall1[0] = 1'b1;\n      assign pat_rise2[0] = 1'b1;\n      assign pat_fall2[0] = 1'b0;\n      assign pat_rise3[0] = 1'b1;\n      assign pat_fall3[0] = 1'b0;\n\n      \n      \n      assign early_rise0[3] = 1'b1;\n      assign early_fall0[3] = 1'b0;\n      assign early_rise1[3] = 1'b1;\n      assign early_fall1[3] = 1'b0;\n      assign early_rise2[3] = 1'b0;\n      assign early_fall2[3] = 1'b1;\n      assign early_rise3[3] = 1'b1;\n      assign early_fall3[3] = 1'b1;\n\n      assign early_rise0[2] = 1'b0;\n      assign early_fall0[2] = 1'b0;\n      assign early_rise1[2] = 1'b1;\n      assign early_fall1[2] = 1'b1;\n      assign early_rise2[2] = 1'b1;\n      assign early_fall2[2] = 1'b1;\n      assign early_rise3[2] = 1'b1;\n      assign early_fall3[2] = 1'b0;\n\n      assign early_rise0[1] = 1'b1;\n      assign early_fall0[1] = 1'b0;\n      assign early_rise1[1] = 1'b1;\n      assign early_fall1[1] = 1'b0;\n      assign early_rise2[1] = 1'b0;\n      assign early_fall2[1] = 1'b1;\n      assign early_rise3[1] = 1'b0;\n      assign early_fall3[1] = 1'b0;\n\n      assign early_rise0[0] = 1'b1;\n      assign early_fall0[0] = 1'b1;\n      assign early_rise1[0] = 1'b0;\n      assign early_fall1[0] = 1'b0;\n      assign early_rise2[0] = 1'b0;\n      assign early_fall2[0] = 1'b0;\n      assign early_rise3[0] = 1'b1;\n      assign early_fall3[0] = 1'b0;\n\n    end else if (nCK_PER_CLK == 2) begin: gen_pat_div2\n      \n      assign pat1_rise0[3] = 1'b1;\n      assign pat1_fall0[3] = 1'b0;\n      assign pat1_rise1[3] = 1'b1;\n      assign pat1_fall1[3] = 1'b0;\n\n      assign pat1_rise0[2] = 1'b1;\n      assign pat1_fall0[2] = 1'b0;\n      assign pat1_rise1[2] = 1'b0;\n      assign pat1_fall1[2] = 1'b1;\n\n      assign pat1_rise0[1] = 1'b1;\n      assign pat1_fall0[1] = 1'b0;\n      assign pat1_rise1[1] = 1'b1;\n      assign pat1_fall1[1] = 1'b0;\n\n      assign pat1_rise0[0] = 1'b1;\n      assign pat1_fall0[0] = 1'b0;\n      assign pat1_rise1[0] = 1'b0;\n      assign pat1_fall1[0] = 1'b1;\n\n      \n      assign pat2_rise0[3] = 1'b0;\n      assign pat2_fall0[3] = 1'b1;\n      assign pat2_rise1[3] = 1'b1;\n      assign pat2_fall1[3] = 1'b0;\n\n      assign pat2_rise0[2] = 1'b1;\n      assign pat2_fall0[2] = 1'b0;\n      assign pat2_rise1[2] = 1'b0;\n      assign pat2_fall1[2] = 1'b1;\n\n      assign pat2_rise0[1] = 1'b0;\n      assign pat2_fall0[1] = 1'b1;\n      assign pat2_rise1[1] = 1'b0;\n      assign pat2_fall1[1] = 1'b1;\n\n      assign pat2_rise0[0] = 1'b1;\n      assign pat2_fall0[0] = 1'b0;\n      assign pat2_rise1[0] = 1'b1;\n      assign pat2_fall1[0] = 1'b0;\n\n      \n      \n      assign early1_rise0[3] = 2'b1;\n      assign early1_fall0[3] = 2'b0;\n      assign early1_rise1[3] = 2'b0;\n      assign early1_fall1[3] = 2'b1;\n\n      assign early1_rise0[2] = 2'b0;\n      assign early1_fall0[2] = 2'b1;\n      assign early1_rise1[2] = 2'b1;\n      assign early1_fall1[2] = 2'b0;\n\n      assign early1_rise0[1] = 2'b1;\n      assign early1_fall0[1] = 2'b0;\n      assign early1_rise1[1] = 2'b0;\n      assign early1_fall1[1] = 2'b1;\n\n      assign early1_rise0[0] = 2'b0;\n      assign early1_fall0[0] = 2'b1;\n      assign early1_rise1[0] = 2'b1;\n      assign early1_fall1[0] = 2'b0;\n\n      \n      assign early2_rise0[3] = 2'b1;\n      assign early2_fall0[3] = 2'b0;\n      assign early2_rise1[3] = 2'b1;\n      assign early2_fall1[3] = 2'b0;\n\n      assign early2_rise0[2] = 2'b0;\n      assign early2_fall0[2] = 2'b1;\n      assign early2_rise1[2] = 2'b0;\n      assign early2_fall1[2] = 2'b0;\n\n      assign early2_rise0[1] = 2'b0;\n      assign early2_fall0[1] = 2'b1;\n      assign early2_rise1[1] = 2'b1;\n      assign early2_fall1[1] = 2'b0;\n\n      assign early2_rise0[0] = 2'b1;\n      assign early2_fall0[0] = 2'b0;\n      assign early2_rise1[0] = 2'b1;\n      assign early2_fall1[0] = 2'b1;\n    end\n  endgenerate\n\n  \n  \n  \n  \n  \n  \n  generate\n    genvar pt_i;\n    if (nCK_PER_CLK == 4) begin: gen_pat_match_div4\n      for (pt_i = 0; pt_i < DRAM_WIDTH; pt_i = pt_i + 1) begin: gen_pat_match\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat_rise0[pt_i%4])\n            pat_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat_fall0[pt_i%4])\n            pat_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat_rise1[pt_i%4])\n            pat_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat_fall1[pt_i%4])\n            pat_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == pat_rise2[pt_i%4])\n            pat_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == pat_fall2[pt_i%4])\n            pat_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == pat_rise3[pt_i%4])\n            pat_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == pat_fall3[pt_i%4])\n            pat_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat_rise1[pt_i%4])\n            early1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat_fall1[pt_i%4])\n            early1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat_rise2[pt_i%4])\n            early1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat_fall2[pt_i%4])\n            early1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == pat_rise3[pt_i%4])\n            early1_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == pat_fall3[pt_i%4])\n            early1_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == early_rise0[pt_i%4])\n            early1_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == early_fall0[pt_i%4])\n            early1_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat_rise2[pt_i%4])\n            early2_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat_fall2[pt_i%4])\n            early2_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat_rise3[pt_i%4])\n            early2_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat_fall3[pt_i%4])\n            early2_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise2_r[pt_i] == early_rise0[pt_i%4])\n            early2_match_rise2_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall2_r[pt_i] == early_fall0[pt_i%4])\n            early2_match_fall2_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall2_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise3_r[pt_i] == early_rise1[pt_i%4])\n            early2_match_rise3_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise3_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall3_r[pt_i] == early_fall1[pt_i%4])\n            early2_match_fall3_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall3_r[pt_i] <= #TCQ 1'b0;\n        end\n      end\n\n\n       always @(posedge clk) begin\n         pat_match_rise0_and_r <= #TCQ &pat_match_rise0_r;\n         pat_match_fall0_and_r <= #TCQ &pat_match_fall0_r;\n         pat_match_rise1_and_r <= #TCQ &pat_match_rise1_r;\n         pat_match_fall1_and_r <= #TCQ &pat_match_fall1_r;\n         pat_match_rise2_and_r <= #TCQ &pat_match_rise2_r;\n         pat_match_fall2_and_r <= #TCQ &pat_match_fall2_r;\n         pat_match_rise3_and_r <= #TCQ &pat_match_rise3_r;\n         pat_match_fall3_and_r <= #TCQ &pat_match_fall3_r;\n         pat_data_match_r <= #TCQ (pat_match_rise0_and_r &&\n                                   pat_match_fall0_and_r &&\n                                   pat_match_rise1_and_r &&\n                                   pat_match_fall1_and_r &&\n                                   pat_match_rise2_and_r &&\n                                   pat_match_fall2_and_r &&\n                                   pat_match_rise3_and_r &&\n                                   pat_match_fall3_and_r);\n         pat_data_match_valid_r <= #TCQ rd_active_r3;\n       end\n\n       always @(posedge clk) begin\n         early1_match_rise0_and_r <= #TCQ &early1_match_rise0_r;\n         early1_match_fall0_and_r <= #TCQ &early1_match_fall0_r;\n         early1_match_rise1_and_r <= #TCQ &early1_match_rise1_r;\n         early1_match_fall1_and_r <= #TCQ &early1_match_fall1_r;\n         early1_match_rise2_and_r <= #TCQ &early1_match_rise2_r;\n         early1_match_fall2_and_r <= #TCQ &early1_match_fall2_r;\n         early1_match_rise3_and_r <= #TCQ &early1_match_rise3_r;\n         early1_match_fall3_and_r <= #TCQ &early1_match_fall3_r;\n         early1_data_match_r <= #TCQ (early1_match_rise0_and_r &&\n                                   early1_match_fall0_and_r &&\n                                   early1_match_rise1_and_r &&\n                                   early1_match_fall1_and_r &&\n                                   early1_match_rise2_and_r &&\n                                   early1_match_fall2_and_r &&\n                                   early1_match_rise3_and_r &&\n                                   early1_match_fall3_and_r);\n       end\n\n       always @(posedge clk) begin\n         early2_match_rise0_and_r <= #TCQ &early2_match_rise0_r;\n         early2_match_fall0_and_r <= #TCQ &early2_match_fall0_r;\n         early2_match_rise1_and_r <= #TCQ &early2_match_rise1_r;\n         early2_match_fall1_and_r <= #TCQ &early2_match_fall1_r;\n         early2_match_rise2_and_r <= #TCQ &early2_match_rise2_r;\n         early2_match_fall2_and_r <= #TCQ &early2_match_fall2_r;\n         early2_match_rise3_and_r <= #TCQ &early2_match_rise3_r;\n         early2_match_fall3_and_r <= #TCQ &early2_match_fall3_r;\n         early2_data_match_r <= #TCQ (early2_match_rise0_and_r &&\n                                   early2_match_fall0_and_r &&\n                                   early2_match_rise1_and_r &&\n                                   early2_match_fall1_and_r &&\n                                   early2_match_rise2_and_r &&\n                                   early2_match_fall2_and_r &&\n                                   early2_match_rise3_and_r &&\n                                   early2_match_fall3_and_r);\n       end\n\n    end else if (nCK_PER_CLK == 2) begin: gen_pat_match_div2\n\n      for (pt_i = 0; pt_i < DRAM_WIDTH; pt_i = pt_i + 1) begin: gen_pat_match\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat1_rise0[pt_i%4])\n            pat1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat1_fall0[pt_i%4])\n            pat1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat1_rise1[pt_i%4])\n            pat1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat1_fall1[pt_i%4])\n            pat1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == pat2_rise0[pt_i%4])\n            pat2_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat2_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == pat2_fall0[pt_i%4])\n            pat2_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat2_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == pat2_rise1[pt_i%4])\n            pat2_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat2_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == pat2_fall1[pt_i%4])\n            pat2_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            pat2_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == early1_rise0[pt_i%4])\n            early1_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == early1_fall0[pt_i%4])\n            early1_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == early1_rise1[pt_i%4])\n            early1_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == early1_fall1[pt_i%4])\n            early1_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early1_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end\n\n        \n        \n        always @(posedge clk) begin\n          if (sr_rise0_r[pt_i] == early2_rise0[pt_i%4])\n            early2_match_rise0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall0_r[pt_i] == early2_fall0[pt_i%4])\n            early2_match_fall0_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall0_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_rise1_r[pt_i] == early2_rise1[pt_i%4])\n            early2_match_rise1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_rise1_r[pt_i] <= #TCQ 1'b0;\n\n          if (sr_fall1_r[pt_i] == early2_fall1[pt_i%4])\n            early2_match_fall1_r[pt_i] <= #TCQ 1'b1;\n          else\n            early2_match_fall1_r[pt_i] <= #TCQ 1'b0;\n        end\n      end\n\n        always @(posedge clk) begin\n          pat1_match_rise0_and_r <= #TCQ &pat1_match_rise0_r;\n          pat1_match_fall0_and_r <= #TCQ &pat1_match_fall0_r;\n          pat1_match_rise1_and_r <= #TCQ &pat1_match_rise1_r;\n          pat1_match_fall1_and_r <= #TCQ &pat1_match_fall1_r;\n          pat1_data_match_r <= #TCQ (pat1_match_rise0_and_r &&\n                                    pat1_match_fall0_and_r &&\n                                    pat1_match_rise1_and_r &&\n                                    pat1_match_fall1_and_r);\n          pat1_data_match_r1     <= #TCQ pat1_data_match_r;\n\n          pat2_match_rise0_and_r <= #TCQ &pat2_match_rise0_r && rd_active_r3;\n          pat2_match_fall0_and_r <= #TCQ &pat2_match_fall0_r && rd_active_r3;\n          pat2_match_rise1_and_r <= #TCQ &pat2_match_rise1_r && rd_active_r3;\n          pat2_match_fall1_and_r <= #TCQ &pat2_match_fall1_r && rd_active_r3;\n          pat2_data_match_r <= #TCQ (pat2_match_rise0_and_r &&\n                                    pat2_match_fall0_and_r &&\n                                    pat2_match_rise1_and_r &&\n                                    pat2_match_fall1_and_r);\n\n          \n          \n          \n          \n          pat_data_match_valid_r <= #TCQ rd_active_r4 & ~rd_active_r5;\n        end\n\n        always @(posedge clk) begin\n         early1_match_rise0_and_r <= #TCQ &early1_match_rise0_r;\n         early1_match_fall0_and_r <= #TCQ &early1_match_fall0_r;\n         early1_match_rise1_and_r <= #TCQ &early1_match_rise1_r;\n         early1_match_fall1_and_r <= #TCQ &early1_match_fall1_r;\n         early1_data_match_r <= #TCQ (early1_match_rise0_and_r &&\n                                      early1_match_fall0_and_r &&\n                                      early1_match_rise1_and_r &&\n                                      early1_match_fall1_and_r);\n         early1_data_match_r1 <= #TCQ early1_data_match_r;\n\n         early2_match_rise0_and_r <= #TCQ &early2_match_rise0_r && rd_active_r3;\n         early2_match_fall0_and_r <= #TCQ &early2_match_fall0_r && rd_active_r3;\n         early2_match_rise1_and_r <= #TCQ &early2_match_rise1_r && rd_active_r3;\n         early2_match_fall1_and_r <= #TCQ &early2_match_fall1_r && rd_active_r3;\n         early2_data_match_r <= #TCQ (early2_match_rise0_and_r &&\n                                      early2_match_fall0_and_r &&\n                                      early2_match_rise1_and_r &&\n                                      early2_match_fall1_and_r);\n       end\n\n    end\n  endgenerate\n\n  \n  \n  always @(posedge clk) begin\n    wrcal_pat_resume_r1 <= #TCQ wrcal_pat_resume_r;\n    wrcal_pat_resume_r2 <= #TCQ wrcal_pat_resume_r1;\n    wrcal_pat_resume    <= #TCQ wrcal_pat_resume_r2;\n  end\n\n  always @(posedge clk) begin\n    if (rst)\n      tap_inc_wait_cnt <= #TCQ 'd0;\n    else if ((cal2_state_r == CAL2_DQ_IDEL_DEC) ||\n             (cal2_state_r == CAL2_IFIFO_RESET) ||\n             (cal2_state_r == CAL2_SANITY_WAIT))\n      tap_inc_wait_cnt <= #TCQ tap_inc_wait_cnt + 1;\n    else\n      tap_inc_wait_cnt <= #TCQ 'd0;\n  end\n\n  always @(posedge clk) begin\n    if (rst)\n      not_empty_wait_cnt <= #TCQ 'd0;\n    else if ((cal2_state_r == CAL2_READ_WAIT) && wrcal_rd_wait)\n      not_empty_wait_cnt <= #TCQ not_empty_wait_cnt + 1;\n    else\n      not_empty_wait_cnt <= #TCQ 'd0;\n  end\n\n  always @(posedge clk)\n    cal2_state_r1 <= #TCQ cal2_state_r;\n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n  always @(posedge clk) begin\n    if (rst) begin\n      wrcal_dqs_cnt_r       <= #TCQ 'b0;\n      cal2_done_r           <= #TCQ 1'b0;\n      cal2_prech_req_r      <= #TCQ 1'b0;\n      cal2_state_r          <= #TCQ CAL2_IDLE;\n      wrcal_pat_err         <= #TCQ 1'b0;\n      wrcal_pat_resume_r    <= #TCQ 1'b0;\n      wrcal_act_req         <= #TCQ 1'b0;\n      cal2_if_reset         <= #TCQ 1'b0;\n      temp_wrcal_done       <= #TCQ 1'b0;\n      wrlvl_byte_redo       <= #TCQ 1'b0;\n      early1_data           <= #TCQ 1'b0;\n      early2_data           <= #TCQ 1'b0;\n      idelay_ld             <= #TCQ 1'b0;\n      idelay_ld_done        <= #TCQ 1'b0;\n      pat1_detect           <= #TCQ 1'b0;\n      early1_detect         <= #TCQ 1'b0;\n      wrcal_sanity_chk_done <= #TCQ 1'b0;\n      wrcal_sanity_chk_err  <= #TCQ 1'b0;\n    end else begin\n      cal2_prech_req_r <= #TCQ 1'b0;\n      case (cal2_state_r)\n        CAL2_IDLE: begin\n          wrcal_pat_err         <= #TCQ 1'b0;\n          if (wrcal_start) begin\n            cal2_if_reset  <= #TCQ 1'b0;\n            if (SIM_CAL_OPTION == \"SKIP_CAL\")\n              \n              cal2_state_r <= #TCQ CAL2_DONE;\n            else\n              cal2_state_r <= #TCQ CAL2_READ_WAIT;\n          end\n        end\n\n        \n        \n        CAL2_READ_WAIT: begin\n          wrcal_pat_resume_r <= #TCQ 1'b0;\n          cal2_if_reset      <= #TCQ 1'b0;\n          \n          \n          \n          \n          if (pat_data_match_valid_r && (nCK_PER_CLK == 4)) begin\n            if (pat_data_match_r)\n              \n              cal2_state_r <= #TCQ CAL2_NEXT_DQS;\n            else begin\n              if (wrcal_sanity_chk_r)\n                cal2_state_r <= #TCQ CAL2_ERR;\n              \n              \n              else if (early1_data_match_r) begin\n                early1_data <= #TCQ 1'b1;\n                early2_data <= #TCQ 1'b0;\n                wrlvl_byte_redo <= #TCQ 1'b1;\n                cal2_state_r    <= #TCQ CAL2_WRLVL_WAIT;\n              end else if (early2_data_match_r) begin\n                early1_data <= #TCQ 1'b0;\n                early2_data <= #TCQ 1'b1;\n                wrlvl_byte_redo <= #TCQ 1'b1;\n                cal2_state_r    <= #TCQ CAL2_WRLVL_WAIT;\n              \n              \n              end else if (~idelay_ld_done) begin\n                cal2_state_r <= #TCQ CAL2_DQ_IDEL_DEC;\n                idelay_ld    <= #TCQ 1'b1;\n              end else\n                cal2_state_r <= #TCQ CAL2_ERR;\n            end\n          end else if (pat_data_match_valid_r && (nCK_PER_CLK == 2)) begin\n            if ((pat1_data_match_r1 && pat2_data_match_r) ||\n                (pat1_detect && pat2_data_match_r))\n              \n              cal2_state_r <= #TCQ CAL2_NEXT_DQS;\n            else if (pat1_data_match_r1 && ~pat2_data_match_r) begin\n              cal2_state_r <= #TCQ CAL2_READ_WAIT;\n              pat1_detect  <= #TCQ 1'b1;\n            end else begin\n              \n              \n              if (wrcal_sanity_chk_r)\n                cal2_state_r <= #TCQ CAL2_ERR;\n              else if ((early1_data_match_r1 && early2_data_match_r) ||\n                  (early1_detect && early2_data_match_r)) begin\n                early1_data <= #TCQ 1'b1;\n                early2_data <= #TCQ 1'b0;\n                wrlvl_byte_redo <= #TCQ 1'b1;\n                cal2_state_r    <= #TCQ CAL2_WRLVL_WAIT;\n              end else if (early1_data_match_r1 && ~early2_data_match_r) begin\n                early1_detect <= #TCQ 1'b1;\n                cal2_state_r  <= #TCQ CAL2_READ_WAIT;\n              \n              \n              end else if (~idelay_ld_done) begin\n                cal2_state_r <= #TCQ CAL2_DQ_IDEL_DEC;\n                idelay_ld    <= #TCQ 1'b1;\n              end else\n                cal2_state_r <= #TCQ CAL2_ERR;\n            end\n          end else if (not_empty_wait_cnt == 'd31)\n            cal2_state_r <= #TCQ CAL2_ERR;\n        end\n\n        CAL2_WRLVL_WAIT: begin\n          early1_detect <= #TCQ 1'b0;\n          if (wrlvl_byte_done && ~wrlvl_byte_done_r)\n            wrlvl_byte_redo   <= #TCQ 1'b0;\n          if (wrlvl_byte_done) begin\n            if (rd_active_r1 && ~rd_active_r) begin\n            cal2_state_r  <= #TCQ CAL2_IFIFO_RESET;\n            cal2_if_reset <= #TCQ 1'b1;\n            early1_data   <= #TCQ 1'b0;\n            early2_data   <= #TCQ 1'b0;\n          end\n        end\n        end\n\n        CAL2_DQ_IDEL_DEC: begin\n          if (tap_inc_wait_cnt == 'd4) begin\n            idelay_ld      <= #TCQ 1'b0;\n            cal2_state_r   <= #TCQ CAL2_IFIFO_RESET;\n            cal2_if_reset  <= #TCQ 1'b1;\n            idelay_ld_done <= #TCQ 1'b1;\n          end\n        end\n\n        CAL2_IFIFO_RESET: begin\n          if (tap_inc_wait_cnt == 'd15) begin\n            cal2_if_reset      <= #TCQ 1'b0;\n            if (wrcal_sanity_chk_r)\n              cal2_state_r       <= #TCQ CAL2_DONE;\n            else if (idelay_ld_done) begin\n              wrcal_pat_resume_r <= #TCQ 1'b1;\n              cal2_state_r       <= #TCQ CAL2_READ_WAIT;\n            end else\n              cal2_state_r       <= #TCQ CAL2_IDLE;\n          end\n        end\n\n        \n        CAL2_NEXT_DQS: begin\n          \n          \n\n          \n          \n                    \n          if (wrcal_sanity_chk_r && (wrcal_dqs_cnt_r != DQS_WIDTH-1)) begin\n            cal2_prech_req_r   <= #TCQ 1'b0;\n            wrcal_dqs_cnt_r    <= #TCQ wrcal_dqs_cnt_r + 1;\n            cal2_state_r       <= #TCQ CAL2_SANITY_WAIT;\n          end else\n            cal2_prech_req_r  <= #TCQ 1'b1;\n          idelay_ld_done    <= #TCQ 1'b0;\n          pat1_detect       <= #TCQ 1'b0;\n          if (prech_done)\n            if (((DQS_WIDTH == 1) || (SIM_CAL_OPTION == \"FAST_CAL\")) ||\n                (wrcal_dqs_cnt_r == DQS_WIDTH-1)) begin\n              \n              \n              \n              if (wrcal_sanity_chk_r) begin\n                cal2_if_reset    <= #TCQ 1'b1;\n                cal2_state_r     <= #TCQ CAL2_IFIFO_RESET;\n              end else\n                cal2_state_r     <= #TCQ CAL2_DONE;\n            end else begin\n              \n              wrcal_dqs_cnt_r    <= #TCQ wrcal_dqs_cnt_r + 1;\n              cal2_state_r       <= #TCQ CAL2_READ_WAIT;\n            end\n        end\n    \n        CAL2_SANITY_WAIT: begin\n          if (tap_inc_wait_cnt == 'd15) begin\n            cal2_state_r       <= #TCQ CAL2_READ_WAIT;\n            wrcal_pat_resume_r <= #TCQ 1'b1;\n          end\n        end\n\n        \n        CAL2_DONE: begin\n          if (wrcal_sanity_chk && ~wrcal_sanity_chk_r) begin\n            cal2_done_r     <= #TCQ 1'b0;\n            wrcal_dqs_cnt_r <= #TCQ 'd0;\n            cal2_state_r    <= #TCQ CAL2_IDLE;\n          end else\n            cal2_done_r      <= #TCQ 1'b1;\n            cal2_prech_req_r <= #TCQ 1'b0;\n            cal2_if_reset    <= #TCQ 1'b0;\n            if (wrcal_sanity_chk_r)\n              wrcal_sanity_chk_done <= #TCQ 1'b1;\n        end\n\n        \n        CAL2_ERR: begin\n          wrcal_pat_resume_r <= #TCQ 1'b0;\n          if (wrcal_sanity_chk_r)\n            wrcal_sanity_chk_err <= #TCQ 1'b1;\n          else\n            wrcal_pat_err      <= #TCQ 1'b1;\n          cal2_state_r       <= #TCQ CAL2_ERR;\n        end\n      endcase\n    end\n  end\n\n  \n  \n  always @(posedge clk)\n    if (rst)\n      cal2_done_r1  <= #TCQ 1'b0;\n    else\n      cal2_done_r1  <= #TCQ cal2_done_r;\n\n  always @(posedge clk)\n    if (rst || (wrcal_sanity_chk && ~wrcal_sanity_chk_r))\n      wrcal_done <= #TCQ 1'b0;\n    else if (cal2_done_r)\n      wrcal_done <= #TCQ 1'b1;\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: mig_7series_v4_1_ddr_phy_wrcal. Module specification: This module implements a write calibration (WRCAL) procedure for a DDR memory interface, supporting both 2:1 and 4:1 memory:fabric clock ratios. It performs pattern matching on read data to determine the optimal write timing for each DQS group. Key inputs include clk, rst, wrcal_start, wrcal_rd_wait, and rd_data, while outputs include wrcal_done, wrcal_pat_err, and various debug signals. Internal signals such as cal2_state_r, wrcal_dqs_cnt_r, and pat_data_match_r are used to manage the calibration state machine and pattern matching. The module consists of several blocks: a state machine for controlling the calibration process, pattern generation an"
                }
            ]
        }
    ]
}