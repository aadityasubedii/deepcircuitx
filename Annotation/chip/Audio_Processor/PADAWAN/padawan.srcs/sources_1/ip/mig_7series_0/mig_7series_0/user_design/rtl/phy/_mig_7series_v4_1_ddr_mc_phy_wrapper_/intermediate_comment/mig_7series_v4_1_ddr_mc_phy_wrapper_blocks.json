{
    "line_num": [
        [
            1579,
            1684
        ],
        [
            1484,
            1578
        ],
        [
            1482,
            1482
        ],
        [
            1419,
            1474
        ],
        [
            1414,
            1418
        ],
        [
            1400,
            1409
        ],
        [
            1085,
            1398
        ],
        [
            1079,
            1083
        ],
        [
            1073,
            1077
        ],
        [
            1066,
            1071
        ],
        [
            1055,
            1055
        ],
        [
            1043,
            1052
        ],
        [
            1016,
            1036
        ],
        [
            993,
            1008
        ],
        [
            966,
            983
        ],
        [
            958,
            962
        ],
        [
            933,
            952
        ],
        [
            918,
            987
        ],
        [
            899,
            911
        ],
        [
            893,
            898
        ],
        [
            883,
            889
        ],
        [
            875,
            881
        ],
        [
            870,
            873
        ],
        [
            859,
            865
        ],
        [
            849,
            857
        ],
        [
            844,
            847
        ],
        [
            835,
            1053
        ],
        [
            813,
            831
        ],
        [
            799,
            811
        ],
        [
            796,
            798
        ],
        [
            782,
            794
        ],
        [
            779,
            781
        ],
        [
            753,
            777
        ],
        [
            750,
            751
        ],
        [
            734,
            744
        ],
        [
            730,
            733
        ],
        [
            728,
            728
        ],
        [
            711,
            721
        ],
        [
            684,
            685
        ],
        [
            671,
            676
        ],
        [
            665,
            670
        ],
        [
            659,
            682
        ],
        [
            647,
            683
        ],
        [
            646,
            686
        ],
        [
            645,
            687
        ],
        [
            616,
            643
        ],
        [
            606,
            607
        ],
        [
            602,
            603
        ],
        [
            599,
            599
        ],
        [
            405,
            418
        ],
        [
            320,
            333
        ],
        [
            304,
            318
        ]
    ],
    "blocks": [
        "    u_ddr_mc_phy\n      (\n       .rst                    (rst),\n       \n       \n       .ddr_rst_in_n           (1'b1),\n       .phy_clk                (clk),\n       .clk_div2               (clk_div2),\n       .freq_refclk            (freq_refclk),\n       .mem_refclk             (mem_refclk),\n       \n       .mem_refclk_div4        (clk),\n       .pll_lock               (pll_lock),\n       .auxout_clk             (),\n       .sync_pulse             (sync_pulse),\n       \n       .idelayctrl_refclk      (),\n       .phy_dout               (phy_dout),\n       .phy_cmd_wr_en          (phy_cmd_wr_en),\n       .phy_data_wr_en         (phy_data_wr_en),\n       .phy_rd_en              (phy_rd_en),\n       .phy_ctl_wd             (phy_ctl_wd_temp),\n       .phy_ctl_wr             (phy_ctl_wr_temp),\n       .if_empty_def           (phy_if_empty_def),\n       .if_rst                 (phy_if_reset),\n       .phyGo                  ('b1),\n       .aux_in_1               (aux_in_1),\n       .aux_in_2               (aux_in_2),\n       \n       \n       .data_offset_1          (data_offset_1_temp),\n       .data_offset_2          (data_offset_2_temp),\n       .cke_in                 (),\n       .if_a_empty             (),\n       .if_empty               (if_empty),\n       .if_empty_or            (),\n       .if_empty_and           (),\n       .of_ctl_a_full          (),\n      \n       .of_ctl_full            (phy_cmd_full),\n       .of_data_full           (),\n       .pre_data_a_full        (phy_pre_data_a_full),\n       .idelay_ld              (idelay_ld),\n       .idelay_ce              (idelay_ce),\n       .idelay_inc             (idelay_inc),\n       .input_sink             (),\n       .phy_din                (phy_din),\n       .phy_ctl_a_full         (),\n       .phy_ctl_full           (phy_ctl_full_temp),\n       .mem_dq_out             (mem_dq_out),\n       .mem_dq_ts              (mem_dq_ts),\n       .mem_dq_in              (mem_dq_in),\n       .mem_dqs_out            (mem_dqs_out),\n       .mem_dqs_ts             (mem_dqs_ts),\n       .mem_dqs_in             (mem_dqs_in),\n       .aux_out                (aux_out),\n       .phy_ctl_ready          (),\n       .rst_out                (),\n       .ddr_clk                (ddr_clk),\n       \n       .mcGo                   (phy_mc_go),\n       .phy_write_calib        (phy_write_calib),\n       .phy_read_calib         (phy_read_calib),\n       .calib_sel              (calib_sel),\n       .calib_in_common        (calib_in_common),\n       .calib_zero_inputs      (calib_zero_inputs),\n       .calib_zero_ctrl        (calib_zero_ctrl),\n       .calib_zero_lanes       ('b0),\n       .po_fine_enable         (po_fine_enable),\n       .po_coarse_enable       (po_coarse_enable),\n       .po_fine_inc            (po_fine_inc),\n       .po_coarse_inc          (po_coarse_inc),\n       .po_counter_load_en     (po_counter_load_en),\n       .po_sel_fine_oclk_delay (po_sel_fine_oclk_delay),\n       .po_counter_load_val    (po_counter_load_val),\n       .po_counter_read_en     (po_counter_read_en),\n       .po_coarse_overflow     (),\n       .po_fine_overflow       (),\n       .po_counter_read_val    (po_counter_read_val),\n       .pi_rst_dqs_find        (pi_rst_dqs_find),\n       .pi_fine_enable         (pi_fine_enable),\n       .pi_fine_inc            (pi_fine_inc),\n       .pi_counter_load_en     (pi_counter_load_en),\n       .pi_counter_read_en     (dbg_pi_counter_read_en),\n       .pi_counter_load_val    (pi_counter_load_val),\n       .pi_fine_overflow       (),\n       .pi_counter_read_val    (pi_counter_read_val),\n       .pi_phase_locked        (pi_phase_locked),\n       .pi_phase_locked_all    (pi_phase_locked_all),\n       .pi_dqs_found           (),\n       .pi_dqs_found_any       (pi_dqs_found),\n       .pi_dqs_found_all       (pi_dqs_found_all),\n       .pi_dqs_found_lanes     (dbg_pi_dqs_found_lanes_phy4lanes),\n       \n       \n       \n       \n       .pi_dqs_out_of_range    (pi_dqs_out_of_range)\n\n       ,.ref_dll_lock          (ref_dll_lock)\n       ,.pi_phase_locked_lanes (dbg_pi_phase_locked_phy4lanes)\n       ,.fine_delay            (fine_delay_mod)\n       ,.fine_delay_sel        (fine_delay_sel_r)\n\n       );\n",
        "  mig_7series_v4_1_ddr_mc_phy #\n    (\n     .BYTE_LANES_B0                 (BYTE_LANES_B0),\n     .BYTE_LANES_B1                 (BYTE_LANES_B1),\n     .BYTE_LANES_B2                 (BYTE_LANES_B2),\n     .BYTE_LANES_B3                 (BYTE_LANES_B3),\n     .BYTE_LANES_B4                 (BYTE_LANES_B4),\n     .DATA_CTL_B0                   (DATA_CTL_B0),\n     .DATA_CTL_B1                   (DATA_CTL_B1),\n     .DATA_CTL_B2                   (DATA_CTL_B2),\n     .DATA_CTL_B3                   (DATA_CTL_B3),\n     .DATA_CTL_B4                   (DATA_CTL_B4),\n     .PHY_0_BITLANES                (PHY_0_BITLANES),\n     .PHY_1_BITLANES                (PHY_1_BITLANES),\n     .PHY_2_BITLANES                (PHY_2_BITLANES),\n     .PHY_0_BITLANES_OUTONLY        (PHY_0_BITLANES_OUTONLY),\n     .PHY_1_BITLANES_OUTONLY        (PHY_1_BITLANES_OUTONLY),\n     .PHY_2_BITLANES_OUTONLY        (PHY_2_BITLANES_OUTONLY),\n     .RCLK_SELECT_BANK              (CKE_ODT_RCLK_SELECT_BANK),\n     .RCLK_SELECT_LANE              (CKE_ODT_RCLK_SELECT_LANE),\n     \n     .GENERATE_DDR_CK_MAP           (TMP_GENERATE_DDR_CK_MAP),\n     .BYTELANES_DDR_CK              (TMP_BYTELANES_DDR_CK),\n     .NUM_DDR_CK                    (CK_WIDTH),\n     .LP_DDR_CK_WIDTH               (LP_DDR_CK_WIDTH),\n     .PO_CTL_COARSE_BYPASS          (\"FALSE\"),\n     .PHYCTL_CMD_FIFO               (\"FALSE\"),\n     .PHY_CLK_RATIO                 (nCK_PER_CLK),\n     .MASTER_PHY_CTL                (MASTER_PHY_CTL),\n     .PHY_FOUR_WINDOW_CLOCKS        (63),\n     .PHY_EVENTS_DELAY              (18),\n     .PHY_COUNT_EN                  (\"FALSE\"), \n     .PHY_SYNC_MODE                 (\"FALSE\"),\n     .SYNTHESIS                     ((SIM_CAL_OPTION == \"NONE\") ? \"TRUE\" : \"FALSE\"),\n     .PHY_DISABLE_SEQ_MATCH         (\"TRUE\"), \n     .PHY_0_GENERATE_IDELAYCTRL     (\"FALSE\"),\n     .PHY_0_A_PI_FREQ_REF_DIV       (PHY_0_A_PI_FREQ_REF_DIV),\n     .PHY_0_CMD_OFFSET              (PHY_0_CMD_OFFSET),   \n     .PHY_0_RD_CMD_OFFSET_0         (PHY_0_RD_CMD_OFFSET_0),\n     .PHY_0_RD_CMD_OFFSET_1         (PHY_0_RD_CMD_OFFSET_1),\n     .PHY_0_RD_CMD_OFFSET_2         (PHY_0_RD_CMD_OFFSET_2),\n     .PHY_0_RD_CMD_OFFSET_3         (PHY_0_RD_CMD_OFFSET_3),\n     .PHY_0_RD_DURATION_0           (6),\n     .PHY_0_RD_DURATION_1           (6),\n     .PHY_0_RD_DURATION_2           (6),\n     .PHY_0_RD_DURATION_3           (6),\n     .PHY_0_WR_CMD_OFFSET_0         (PHY_0_WR_CMD_OFFSET_0),\n     .PHY_0_WR_CMD_OFFSET_1         (PHY_0_WR_CMD_OFFSET_1),\n     .PHY_0_WR_CMD_OFFSET_2         (PHY_0_WR_CMD_OFFSET_2),\n     .PHY_0_WR_CMD_OFFSET_3         (PHY_0_WR_CMD_OFFSET_3),\n     .PHY_0_WR_DURATION_0           (PHY_0_WR_DURATION_0),\n     .PHY_0_WR_DURATION_1           (PHY_0_WR_DURATION_1),\n     .PHY_0_WR_DURATION_2           (PHY_0_WR_DURATION_2),\n     .PHY_0_WR_DURATION_3           (PHY_0_WR_DURATION_3),\n     .PHY_0_AO_TOGGLE               ((RANKS == 1) ? 1 : 5),\n     .PHY_0_A_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_0_B_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_0_C_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_0_D_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_0_A_PO_OCLKDELAY_INV      (PO_OCLKDELAY_INV),\n     .PHY_0_A_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_0_B_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_0_C_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_0_D_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_1_GENERATE_IDELAYCTRL     (\"FALSE\"),\n     \n     \n     .PHY_1_A_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_1_B_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_1_C_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_1_D_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_1_A_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_1_B_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_1_C_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_1_D_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_2_GENERATE_IDELAYCTRL     (\"FALSE\"),\n     \n     \n     .PHY_2_A_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_2_B_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_2_C_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_2_D_PO_OCLK_DELAY         (PHY_0_A_PO_OCLK_DELAY),\n     .PHY_2_A_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_2_B_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_2_C_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .PHY_2_D_IDELAYE2_IDELAY_VALUE (PHY_0_A_IDELAYE2_IDELAY_VALUE),\n     .TCK                           (tCK),\n     .PHY_0_IODELAY_GRP             (IODELAY_GRP),\n     .PHY_1_IODELAY_GRP             (IODELAY_GRP),\n     .PHY_2_IODELAY_GRP             (IODELAY_GRP),\n     .FPGA_SPEED_GRADE              (FPGA_SPEED_GRADE),\n     .BANK_TYPE                     (BANK_TYPE),\n     .CKE_ODT_AUX                   (CKE_ODT_AUX),\n     .PI_DIV2_INCDEC                (PI_DIV2_INCDEC)\n     )",
        "   assign phy_ctl_full = phy_ctl_full_temp[0];",
        "  generate\n    begin\n\n      mig_7series_v4_1_ddr_of_pre_fifo #\n        (\n         .TCQ   (25),\n         .DEPTH (8),\n         .WIDTH (32)\n        )\n        phy_ctl_pre_fifo_0\n        (\n         .clk       (clk),\n         .rst       (rst),\n         .full_in   (phy_ctl_full_temp[1]),\n         .wr_en_in  (phy_ctl_wr),\n         .d_in      (phy_ctl_wd),\n         .wr_en_out (phy_ctl_wr_of),\n         .d_out     (phy_ctl_wd_of)\n        );\n\n      mig_7series_v4_1_ddr_of_pre_fifo #\n        (\n         .TCQ   (25),\n         .DEPTH (8),\n         .WIDTH (6)\n        )\n        phy_ctl_pre_fifo_1\n        (\n         .clk       (clk),\n         .rst       (rst),\n         .full_in   (phy_ctl_full_temp[2]),\n         .wr_en_in  (phy_ctl_wr),\n         .d_in      (data_offset_1),\n         .wr_en_out (),\n         .d_out     (data_offset_1_of)\n        );\n\n      mig_7series_v4_1_ddr_of_pre_fifo #\n        (\n         .TCQ   (25),\n         .DEPTH (8),\n         .WIDTH (6)\n        )\n        phy_ctl_pre_fifo_2\n        (\n         .clk       (clk),\n         .rst       (rst),\n         .full_in   (phy_ctl_full_temp[3]),\n         .wr_en_in  (phy_ctl_wr),\n         .d_in      (data_offset_2),\n         .wr_en_out (),\n         .d_out     (data_offset_2_of)\n        );\n\n    end\n  endgenerate",
        "  assign phy_ctl_wd_temp = (nCK_PER_CLK == 4) ? phy_ctl_wd_i2 : phy_ctl_wd_of;\n  assign phy_ctl_wr_temp = (nCK_PER_CLK == 4) ? phy_ctl_wr_i2 : phy_ctl_wr_of;\n  assign data_offset_1_temp = (nCK_PER_CLK == 4) ? data_offset_1_i2 : data_offset_1_of;\n  assign data_offset_2_temp = (nCK_PER_CLK == 4) ? data_offset_2_i2 : data_offset_2_of;\n",
        "  always @(posedge clk) begin\n    phy_ctl_wd_i1 <= #TCQ phy_ctl_wd;\n    phy_ctl_wr_i1 <= #TCQ phy_ctl_wr;\n    phy_ctl_wd_i2 <= #TCQ phy_ctl_wd_i1;\n    phy_ctl_wr_i2 <= #TCQ phy_ctl_wr_i1;\n    data_offset_1_i1 <= #TCQ data_offset_1;\n    data_offset_1_i2 <= #TCQ data_offset_1_i1;\n    data_offset_2_i1 <= #TCQ data_offset_2;\n    data_offset_2_i2 <= #TCQ data_offset_2_i1;\n  end",
        "  generate\n    genvar p;\n\n    for (p = 0; p < ROW_WIDTH; p = p + 1) begin: gen_addr_obuf\n      OBUF u_addr_obuf\n        (\n         .I (out_addr[p]),\n         .O (ddr_addr[p])\n         );\n    end\n\n    for (p = 0; p < BANK_WIDTH; p = p + 1) begin: gen_bank_obuf\n      OBUF u_bank_obuf\n        (\n         .I (out_ba[p]),\n         .O (ddr_ba[p])\n         );\n    end\n\n    if (USE_CS_PORT == 1) begin: gen_cs_n_obuf\n      for (p = 0; p < CS_WIDTH*nCS_PER_RANK; p = p + 1) begin: gen_cs_obuf\n        OBUF u_cs_n_obuf\n          (\n           .I (out_cs_n[p]),\n           .O (ddr_cs_n[p])\n           );\n      end\n    end\n    if(CKE_ODT_AUX == \"FALSE\")begin:cke_odt_thru_outfifo\n      if (USE_ODT_PORT== 1) begin: gen_odt_obuf\n        for (p = 0; p < ODT_WIDTH; p = p + 1) begin: gen_odt_obuf\n          OBUF u_cs_n_obuf\n            (\n             .I (out_odt[p]),\n             .O (ddr_odt[p])\n             );\n        end\n      end\n        for (p = 0; p < CKE_WIDTH; p = p + 1) begin: gen_cke_obuf\n          OBUF u_cs_n_obuf\n            (\n             .I (out_cke[p]),\n             .O (ddr_cke[p])\n             );\n        end\n    end\n\n    if (REG_CTRL == \"ON\") begin: gen_parity_obuf\n      \n      OBUF u_parity_obuf\n        (\n         .I (out_parity),\n         .O (ddr_parity)\n         );\n    end else begin: gen_parity_tieoff\n      assign ddr_parity = 1'b0;\n    end\n\n    if ((DRAM_TYPE == \"DDR3\") || (REG_CTRL == \"ON\")) begin: gen_reset_obuf\n      \n      OBUF u_reset_obuf\n        (\n         .I (mux_reset_n),\n         .O (ddr_reset_n)\n         );\n    end else begin: gen_reset_tieoff\n      assign ddr_reset_n = 1'b1;\n    end\n\n    if (USE_DM_PORT == 1) begin: gen_dm_obuf\n      for (p = 0; p < DM_WIDTH; p = p + 1) begin: loop_dm\n        OBUFT u_dm_obuf\n          (\n           .I (out_dm[p]),\n           .T (ts_dm[p]),\n           .O (ddr_dm[p])\n           );\n      end\n    end else begin: gen_dm_tieoff\n      assign ddr_dm = 'b0;\n    end\n\n    if (DATA_IO_PRIM_TYPE == \"HP_LP\") begin: gen_dq_iobuf_HP\n      for (p = 0; p < DQ_WIDTH; p = p + 1) begin: gen_dq_iobuf\n        IOBUF_DCIEN #\n          (\n           .IBUF_LOW_PWR (IBUF_LOW_PWR)\n           )\n          u_iobuf_dq\n            (\n             .DCITERMDISABLE (data_io_idle_pwrdwn),\n             .IBUFDISABLE    (data_io_idle_pwrdwn),\n             .I              (out_dq[p]),\n             .T              (ts_dq[p]),\n             .O              (in_dq[p]),\n             .IO             (ddr_dq[p])\n             );\n      end\n    end else if (DATA_IO_PRIM_TYPE == \"HR_LP\") begin: gen_dq_iobuf_HR\n      for (p = 0; p < DQ_WIDTH; p = p + 1) begin: gen_dq_iobuf\n        IOBUF_INTERMDISABLE #\n          (\n           .IBUF_LOW_PWR (IBUF_LOW_PWR)\n           )\n          u_iobuf_dq\n            (\n             .INTERMDISABLE  (data_io_idle_pwrdwn),\n             .IBUFDISABLE    (data_io_idle_pwrdwn),\n             .I              (out_dq[p]),\n             .T              (ts_dq[p]),\n             .O              (in_dq[p]),\n             .IO             (ddr_dq[p])\n             );\n      end\n    end else begin: gen_dq_iobuf_default\n      for (p = 0; p < DQ_WIDTH; p = p + 1) begin: gen_dq_iobuf\n        IOBUF #\n          (\n           .IBUF_LOW_PWR (IBUF_LOW_PWR)\n           )\n          u_iobuf_dq\n            (\n             .I  (out_dq[p]),\n             .T  (ts_dq[p]),\n             .O  (in_dq[p]),\n             .IO (ddr_dq[p])\n             );\n      end\n    end\n\n    \n    if ((BANK_TYPE == \"HP_IO\") || (BANK_TYPE == \"HPL_IO\")) begin: gen_dqs_iobuf_HP\n      for (p = 0; p < DQS_WIDTH; p = p + 1) begin: gen_dqs_iobuf\n        if ((DRAM_TYPE == \"DDR2\") &&\n            (DDR2_DQSN_ENABLE != \"YES\")) begin: gen_ddr2_dqs_se\n          IOBUF_DCIEN #\n            (\n             .IBUF_LOW_PWR (IBUF_LOW_PWR)\n             )\n            u_iobuf_dqs\n              (\n               .DCITERMDISABLE (data_io_idle_pwrdwn),\n               .IBUFDISABLE    (data_io_idle_pwrdwn),\n               .I              (out_dqs[p]),\n               .T              (ts_dqs[p]),\n               .O              (in_dqs[p]),\n               .IO             (ddr_dqs[p])\n               );\n          assign ddr_dqs_n[p] = 1'b0;\n          assign pd_out_pre[p] = 1'b0;\n        end else if ((DRAM_TYPE == \"DDR2\") ||\n                     (tCK > 2500)) begin : gen_ddr2_or_low_dqs_diff\n          IOBUFDS_DCIEN #\n            (\n             .IBUF_LOW_PWR (IBUF_LOW_PWR),\n             .DQS_BIAS     (\"TRUE\")\n             )\n            u_iobuf_dqs\n              (\n               .DCITERMDISABLE (data_io_idle_pwrdwn),\n               .IBUFDISABLE    (data_io_idle_pwrdwn),\n               .I              (out_dqs[p]),\n               .T              (ts_dqs[p]),\n               .O              (in_dqs[p]),\n               .IO             (ddr_dqs[p]),\n               .IOB            (ddr_dqs_n[p])\n               );\n          assign pd_out_pre[p] = 1'b0;\n        end else begin: gen_dqs_diff\n          IOBUFDS_DIFF_OUT_DCIEN #\n            (\n             .IBUF_LOW_PWR (IBUF_LOW_PWR),\n         .DQS_BIAS     (\"TRUE\"),\n         .SIM_DEVICE   (\"7SERIES\"),\n             .USE_IBUFDISABLE (\"FALSE\")\n             )\n            u_iobuf_dqs\n              (\n               .DCITERMDISABLE (data_io_idle_pwrdwn),\n               .I              (out_dqs[p]),\n               .TM             (ts_dqs[p]),\n               .TS             (ts_dqs[p]),\n               .OB             (in_dqs_lpbk_to_iddr[p]),\n               .O              (in_dqs[p]),\n               .IO             (ddr_dqs[p]),\n               .IOB            (ddr_dqs_n[p])\n               );\n\n          mig_7series_v4_1_poc_pd #\n          (\n           .TCQ        (TCQ),\n           .POC_USE_METASTABLE_SAMP (POC_USE_METASTABLE_SAMP)\n          )\n          u_iddr_edge_det\n          (\n            .clk         (clk),\n            .iddr_rst         (iddr_rst_i),\n            .kclk        (in_dqs_lpbk_to_iddr[p]),\n            .mmcm_ps_clk (mmcm_ps_clk),\n            .pd_out      (pd_out_pre[p])\n          );\n        end\n      end\n    \n    end else if ((BANK_TYPE == \"HR_IO\") || (BANK_TYPE == \"HRL_IO\")) begin: gen_dqs_iobuf_HR\n      for (p = 0; p < DQS_WIDTH; p = p + 1) begin: gen_dqs_iobuf\n        if ((DRAM_TYPE == \"DDR2\") &&\n            (DDR2_DQSN_ENABLE != \"YES\")) begin: gen_ddr2_dqs_se\n          IOBUF_INTERMDISABLE #\n            (\n             .IBUF_LOW_PWR (IBUF_LOW_PWR)\n             )\n            u_iobuf_dqs\n              (\n               .INTERMDISABLE  (data_io_idle_pwrdwn),\n               .IBUFDISABLE    (data_io_idle_pwrdwn),\n               .I              (out_dqs[p]),\n               .T              (ts_dqs[p]),\n               .O              (in_dqs[p]),\n               .IO             (ddr_dqs[p])\n               );\n          assign ddr_dqs_n[p] = 1'b0;\n          assign pd_out_pre[p] = 1'b0;\n        end else if ((DRAM_TYPE == \"DDR2\") ||\n                     (tCK > 2500)) begin: gen_ddr2_or_low_dqs_diff\n          IOBUFDS_INTERMDISABLE #\n            (\n             .IBUF_LOW_PWR (IBUF_LOW_PWR),\n             .DQS_BIAS     (\"TRUE\")\n             )\n            u_iobuf_dqs\n              (\n               .INTERMDISABLE  (data_io_idle_pwrdwn),\n               .IBUFDISABLE    (data_io_idle_pwrdwn),\n               .I              (out_dqs[p]),\n               .T              (ts_dqs[p]),\n               .O              (in_dqs[p]),\n               .IO             (ddr_dqs[p]),\n               .IOB            (ddr_dqs_n[p])\n               );\n          assign pd_out_pre[p] = 1'b0;\n        end else begin: gen_dqs_diff\n          IOBUFDS_DIFF_OUT_INTERMDISABLE #\n            (\n             .IBUF_LOW_PWR (IBUF_LOW_PWR),\n             .DQS_BIAS     (\"TRUE\"),\n         .SIM_DEVICE   (\"7SERIES\"),\n             .USE_IBUFDISABLE (\"FALSE\")\n             )\n            u_iobuf_dqs\n              (\n               .INTERMDISABLE  (data_io_idle_pwrdwn),\n               \n               .I              (out_dqs[p]),\n               .TM             (ts_dqs[p]),\n               .TS             (ts_dqs[p]),\n               .OB             (in_dqs_lpbk_to_iddr[p]),\n               .O              (in_dqs[p]),\n               .IO             (ddr_dqs[p]),\n               .IOB            (ddr_dqs_n[p])\n               );\n\n        mig_7series_v4_1_poc_pd #\n        (\n         .TCQ        (TCQ),\n         .POC_USE_METASTABLE_SAMP (POC_USE_METASTABLE_SAMP)\n        )\n        u_iddr_edge_det\n          (\n           .clk         (clk),\n               .iddr_rst    (iddr_rst_i),\n           .kclk        (in_dqs_lpbk_to_iddr[p]),\n               .mmcm_ps_clk (mmcm_ps_clk),\n               .pd_out      (pd_out_pre[p])\n          );\n        end\n      end\n    end else begin: gen_dqs_iobuf_default\n      for (p = 0; p < DQS_WIDTH; p = p + 1) begin: gen_dqs_iobuf\n        if ((DRAM_TYPE == \"DDR2\") &&\n            (DDR2_DQSN_ENABLE != \"YES\")) begin: gen_ddr2_dqs_se\n          IOBUF #\n            (\n             .IBUF_LOW_PWR (IBUF_LOW_PWR)\n             )\n            u_iobuf_dqs\n              (\n               .I   (out_dqs[p]),\n               .T   (ts_dqs[p]),\n               .O   (in_dqs[p]),\n               .IO  (ddr_dqs[p])\n               );\n          assign ddr_dqs_n[p] = 1'b0;\n          assign pd_out_pre[p] = 1'b0;\n        end else begin: gen_dqs_diff\n          IOBUFDS #\n            (\n             .IBUF_LOW_PWR (IBUF_LOW_PWR),\n             .DQS_BIAS     (\"TRUE\")\n             )\n            u_iobuf_dqs\n              (\n               .I   (out_dqs[p]),\n               .T   (ts_dqs[p]),\n               .O   (in_dqs[p]),\n               .IO  (ddr_dqs[p]),\n               .IOB (ddr_dqs_n[p])\n               );\n          assign pd_out_pre[p] = 1'b0;\n        end\n      end\n    end\n\n  endgenerate",
        "  OBUF u_we_n_obuf\n    (\n     .I (out_we_n),\n     .O (ddr_we_n)\n     );",
        "  OBUF u_ras_n_obuf\n    (\n     .I (out_ras_n),\n     .O (ddr_ras_n)\n     );",
        "\n  OBUF u_cas_n_obuf\n    (\n     .I (out_cas_n),\n     .O (ddr_cas_n)\n     );",
        "  assign pd_out = pd_out_pre[byte_sel_cnt_w1];",
        "    for (m = 0; m < DQS_WIDTH; m = m + 1) begin: gen_dqs_inout\n      \n      assign mem_dqs_in[4*DQS_BYTE_MAP[(8*m+4)+:3] + DQS_BYTE_MAP[(8*m)+:2]]\n        = in_dqs[m];\n      \n      assign out_dqs[m]\n        = mem_dqs_out[4*DQS_BYTE_MAP[(8*m+4)+:3] + DQS_BYTE_MAP[(8*m)+:2]];\n      assign ts_dqs[m]\n        = mem_dqs_ts[4*DQS_BYTE_MAP[(8*m+4)+:3] + DQS_BYTE_MAP[(8*m)+:2]];\n    end",
        "    for (m = 0; m < DQ_WIDTH; m = m + 1) begin: gen_dq_inout\n      \n      assign mem_dq_in[40*FULL_DATA_MAP[(12*m+8)+:3] +\n                       10*FULL_DATA_MAP[(12*m+4)+:2] +\n                       FULL_DATA_MAP[12*m+:4]]\n               = in_dq[m];\n      \n      assign out_dq[m]\n               = mem_dq_out[48*FULL_DATA_MAP[(12*m+8)+:3] +\n                            12*FULL_DATA_MAP[(12*m+4)+:2] +\n                            FULL_DATA_MAP[12*m+:4]];\n      assign ts_dq[m]\n               = mem_dq_ts[48*FULL_DATA_MAP[(12*m+8)+:3] +\n                           12*FULL_DATA_MAP[(12*m+4)+:2] +\n                           FULL_DATA_MAP[12*m+:4]];\n      for (n = 0; n < PHASE_PER_CLK; n = n + 1) begin: loop_xpose\n        assign phy_dout[320*FULL_DATA_MAP[(12*m+8)+:3] +\n                        80*FULL_DATA_MAP[(12*m+4)+:2] +\n                        8*FULL_DATA_MAP[12*m+:4] + n]\n                 = mux_wrdata[DQ_WIDTH*n + m];\n      end",
        "    if (USE_DM_PORT == 1) begin: gen_dm_out\n      for (m = 0; m < DM_WIDTH; m = m + 1) begin: gen_dm_out\n        assign out_dm[m]\n                 = mem_dq_out[48*FULL_MASK_MAP[(12*m+8)+:3] +\n                              12*FULL_MASK_MAP[(12*m+4)+:2] +\n                              FULL_MASK_MAP[12*m+:4]];\n        assign ts_dm[m]\n                 = mem_dq_ts[48*FULL_MASK_MAP[(12*m+8)+:3] +\n                             12*FULL_MASK_MAP[(12*m+4)+:2] +\n                             FULL_MASK_MAP[12*m+:4]];\n        for (n = 0; n < PHASE_PER_CLK; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*FULL_MASK_MAP[(12*m+8)+:3] +\n                          80*FULL_MASK_MAP[(12*m+4)+:2] +\n                          8*FULL_MASK_MAP[12*m+:4] + n]\n                   = mux_wrdata_mask[DM_WIDTH*n + m];\n        end",
        "     for (m = 0; m < CKE_WIDTH; m = m + 1) begin: gen_cke_out\n       assign out_cke[m]\n                = mem_dq_out[48*CKE_MAP[(12*m+8)+:3] +\n                             12*CKE_MAP[(12*m+4)+:2] +\n                             CKE_MAP[12*m+:4]];\n       if (CKE_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n         for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n           assign phy_dout[320*CKE_MAP[(12*m+8)+:3] +\n                           80*CKE_MAP[(12*m+4)+:2] +\n                           8*CKE_MAP[12*m+:4] + n]\n                    = mux_cke_remap[CKE_WIDTH*(n/PHASE_DIV) + m];\n         end\n       end else begin: gen_ge10\n         for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n           assign phy_dout[320*CKE_MAP[(12*m+8)+:3] +\n                           80*CKE_MAP[(12*m+4)+:2] +\n                           8*(CKE_MAP[12*m+:4]-5) + 4 + n]\n                    = mux_cke_remap[CKE_WIDTH*(n/PHASE_DIV) + m];",
        "     wire [CKE_WIDTH*nCK_PER_CLK -1:0] mux_cke_remap ;\n\n     for(x = 0 ; x < nCK_PER_CLK ; x = x +1) begin\n      assign  mux_cke_remap[(x*CKE_WIDTH)+:CKE_WIDTH] = {CKE_WIDTH{mux_cke[x]}} ;\n     end",
        "     if (USE_ODT_PORT == 1) begin: gen_odt_out\n       for (m = 0; m < ODT_WIDTH; m = m + 1) begin: gen_odt_out_1\n         assign out_odt[m]\n                  = mem_dq_out[48*ODT_MAP[(12*m+8)+:3] +\n                               12*ODT_MAP[(12*m+4)+:2] +\n                               ODT_MAP[12*m+:4]];\n         if (ODT_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n           for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n             assign phy_dout[320*ODT_MAP[(12*m+8)+:3] +\n                             80*ODT_MAP[(12*m+4)+:2] +\n                             8*ODT_MAP[12*m+:4] + n]\n                      = mux_odt_remap[ODT_WIDTH*(n/PHASE_DIV) + m];\n           end\n         end else begin: gen_ge10\n           for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n             assign phy_dout[320*ODT_MAP[(12*m+8)+:3] +\n                             80*ODT_MAP[(12*m+4)+:2] +\n                             8*(ODT_MAP[12*m+:4]-5) + 4 + n]\n                      = mux_odt_remap[ODT_WIDTH*(n/PHASE_DIV) + m];\n           end",
        "   if(CKE_ODT_AUX == \"FALSE\") begin\n     \n     wire [ODT_WIDTH*nCK_PER_CLK -1 :0] mux_odt_remap  ;\n\n     if(RANKS == 1) begin\n        for(x =0 ; x < nCK_PER_CLK ; x = x+1) begin\n          assign mux_odt_remap[(x*ODT_WIDTH)+:ODT_WIDTH] = {ODT_WIDTH{mux_odt[0]}} ;\n        end\n     end else begin\n        for(x =0 ; x < 2*nCK_PER_CLK ; x = x+2) begin\n          assign mux_odt_remap[(x*ODT_WIDTH/RANKS)+:ODT_WIDTH/RANKS] = {ODT_WIDTH/RANKS{mux_odt[0]}} ;\n          assign mux_odt_remap[((x*ODT_WIDTH/RANKS)+(ODT_WIDTH/RANKS))+:ODT_WIDTH/RANKS] = {ODT_WIDTH/RANKS{mux_odt[1]}} ;\n        end\n     end\n\n     if (USE_ODT_PORT == 1) begin: gen_odt_out\n       for (m = 0; m < ODT_WIDTH; m = m + 1) begin: gen_odt_out_1\n         assign out_odt[m]\n                  = mem_dq_out[48*ODT_MAP[(12*m+8)+:3] +\n                               12*ODT_MAP[(12*m+4)+:2] +\n                               ODT_MAP[12*m+:4]];\n         if (ODT_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n           for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n             assign phy_dout[320*ODT_MAP[(12*m+8)+:3] +\n                             80*ODT_MAP[(12*m+4)+:2] +\n                             8*ODT_MAP[12*m+:4] + n]\n                      = mux_odt_remap[ODT_WIDTH*(n/PHASE_DIV) + m];\n           end\n         end else begin: gen_ge10\n           for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n             assign phy_dout[320*ODT_MAP[(12*m+8)+:3] +\n                             80*ODT_MAP[(12*m+4)+:2] +\n                             8*(ODT_MAP[12*m+:4]-5) + 4 + n]\n                      = mux_odt_remap[ODT_WIDTH*(n/PHASE_DIV) + m];\n           end\n         end\n       end\n     end\n\n\n     wire [CKE_WIDTH*nCK_PER_CLK -1:0] mux_cke_remap ;\n\n     for(x = 0 ; x < nCK_PER_CLK ; x = x +1) begin\n      assign  mux_cke_remap[(x*CKE_WIDTH)+:CKE_WIDTH] = {CKE_WIDTH{mux_cke[x]}} ;\n     end\n\n\n\n     for (m = 0; m < CKE_WIDTH; m = m + 1) begin: gen_cke_out\n       assign out_cke[m]\n                = mem_dq_out[48*CKE_MAP[(12*m+8)+:3] +\n                             12*CKE_MAP[(12*m+4)+:2] +\n                             CKE_MAP[12*m+:4]];\n       if (CKE_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n         for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n           assign phy_dout[320*CKE_MAP[(12*m+8)+:3] +\n                           80*CKE_MAP[(12*m+4)+:2] +\n                           8*CKE_MAP[12*m+:4] + n]\n                    = mux_cke_remap[CKE_WIDTH*(n/PHASE_DIV) + m];\n         end\n       end else begin: gen_ge10\n         for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n           assign phy_dout[320*CKE_MAP[(12*m+8)+:3] +\n                           80*CKE_MAP[(12*m+4)+:2] +\n                           8*(CKE_MAP[12*m+:4]-5) + 4 + n]\n                    = mux_cke_remap[CKE_WIDTH*(n/PHASE_DIV) + m];\n         end\n       end\n     end\n   end",
        "        if (CS_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n          for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n            assign phy_dout[320*CS_MAP[(12*m+8)+:3] +\n                            80*CS_MAP[(12*m+4)+:2] +\n                            8*CS_MAP[12*m+:4] + n]\n                     = mux_cs_n[CS_WIDTH*nCS_PER_RANK*(n/PHASE_DIV) + m];\n          end\n        end else begin: gen_ge10\n          for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n            assign phy_dout[320*CS_MAP[(12*m+8)+:3] +\n                            80*CS_MAP[(12*m+4)+:2] +\n                            8*(CS_MAP[12*m+:4]-5) + 4 + n]\n                     = mux_cs_n[CS_WIDTH*nCS_PER_RANK*(n/PHASE_DIV) + m];",
        "    if (USE_CS_PORT == 1) begin: gen_cs_n_out\n      for (m = 0; m < CS_WIDTH*nCS_PER_RANK; m = m + 1) begin: gen_cs_out\n        assign out_cs_n[m]\n                 = mem_dq_out[48*CS_MAP[(12*m+8)+:3] +\n                              12*CS_MAP[(12*m+4)+:2] +\n                              CS_MAP[12*m+:4]];",
        "        for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*BANK_MAP[(12*m+8)+:3] +\n                          80*BANK_MAP[(12*m+4)+:2] +\n                          8*(BANK_MAP[12*m+:4]-5) + 4 + n]\n                   = mux_bank[BANK_WIDTH*(n/PHASE_DIV) + m];\n        end\n      end",
        "      if (BANK_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n        for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*BANK_MAP[(12*m+8)+:3] +\n                          80*BANK_MAP[(12*m+4)+:2] +\n                          8*BANK_MAP[12*m+:4] + n]\n                   = mux_bank[BANK_WIDTH*(n/PHASE_DIV) + m];\n        end",
        "        assign out_ba[m]\n                 = mem_dq_out[48*BANK_MAP[(12*m+8)+:3] +\n                              12*BANK_MAP[(12*m+4)+:2] +\n                              BANK_MAP[12*m+:4]];",
        "        for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*ADDR_MAP[(12*m+8)+:3] +\n                          80*ADDR_MAP[(12*m+4)+:2] +\n                          8*(ADDR_MAP[12*m+:4]-5) + 4 + n]\n                   = mux_address[ROW_WIDTH*(n/PHASE_DIV) + m];\n        end\n      end",
        "      if (ADDR_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n        \n        \n        for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*ADDR_MAP[(12*m+8)+:3] +\n                          80*ADDR_MAP[(12*m+4)+:2] +\n                          8*ADDR_MAP[12*m+:4] + n]\n                   = mux_address[ROW_WIDTH*(n/PHASE_DIV) + m];\n        end",
        "      assign out_addr[m]\n               = mem_dq_out[48*ADDR_MAP[(12*m+8)+:3] +\n                            12*ADDR_MAP[(12*m+4)+:2] +\n                            ADDR_MAP[12*m+:4]];",
        "  generate\n    genvar m, n,x;\n\n    \n    \n    \n\n    \n    for (m = 0; m < ROW_WIDTH; m = m + 1) begin: gen_addr_out\n      assign out_addr[m]\n               = mem_dq_out[48*ADDR_MAP[(12*m+8)+:3] +\n                            12*ADDR_MAP[(12*m+4)+:2] +\n                            ADDR_MAP[12*m+:4]];\n\n      if (ADDR_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n        \n        \n        for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*ADDR_MAP[(12*m+8)+:3] +\n                          80*ADDR_MAP[(12*m+4)+:2] +\n                          8*ADDR_MAP[12*m+:4] + n]\n                   = mux_address[ROW_WIDTH*(n/PHASE_DIV) + m];\n        end\n      end else begin: gen_ge10\n        for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*ADDR_MAP[(12*m+8)+:3] +\n                          80*ADDR_MAP[(12*m+4)+:2] +\n                          8*(ADDR_MAP[12*m+:4]-5) + 4 + n]\n                   = mux_address[ROW_WIDTH*(n/PHASE_DIV) + m];\n        end\n      end\n    end\n\n    \n    for (m = 0; m < BANK_WIDTH; m = m + 1) begin: gen_ba_out\n        assign out_ba[m]\n                 = mem_dq_out[48*BANK_MAP[(12*m+8)+:3] +\n                              12*BANK_MAP[(12*m+4)+:2] +\n                              BANK_MAP[12*m+:4]];\n\n      if (BANK_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n        for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*BANK_MAP[(12*m+8)+:3] +\n                          80*BANK_MAP[(12*m+4)+:2] +\n                          8*BANK_MAP[12*m+:4] + n]\n                   = mux_bank[BANK_WIDTH*(n/PHASE_DIV) + m];\n        end\n      end else begin: gen_ge10\n        for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*BANK_MAP[(12*m+8)+:3] +\n                          80*BANK_MAP[(12*m+4)+:2] +\n                          8*(BANK_MAP[12*m+:4]-5) + 4 + n]\n                   = mux_bank[BANK_WIDTH*(n/PHASE_DIV) + m];\n        end\n      end\n    end\n\n    \n    if (USE_CS_PORT == 1) begin: gen_cs_n_out\n      for (m = 0; m < CS_WIDTH*nCS_PER_RANK; m = m + 1) begin: gen_cs_out\n        assign out_cs_n[m]\n                 = mem_dq_out[48*CS_MAP[(12*m+8)+:3] +\n                              12*CS_MAP[(12*m+4)+:2] +\n                              CS_MAP[12*m+:4]];\n        if (CS_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n          for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n            assign phy_dout[320*CS_MAP[(12*m+8)+:3] +\n                            80*CS_MAP[(12*m+4)+:2] +\n                            8*CS_MAP[12*m+:4] + n]\n                     = mux_cs_n[CS_WIDTH*nCS_PER_RANK*(n/PHASE_DIV) + m];\n          end\n        end else begin: gen_ge10\n          for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n            assign phy_dout[320*CS_MAP[(12*m+8)+:3] +\n                            80*CS_MAP[(12*m+4)+:2] +\n                            8*(CS_MAP[12*m+:4]-5) + 4 + n]\n                     = mux_cs_n[CS_WIDTH*nCS_PER_RANK*(n/PHASE_DIV) + m];\n          end\n        end\n      end\n    end\n\n\n   if(CKE_ODT_AUX == \"FALSE\") begin\n     \n     wire [ODT_WIDTH*nCK_PER_CLK -1 :0] mux_odt_remap  ;\n\n     if(RANKS == 1) begin\n        for(x =0 ; x < nCK_PER_CLK ; x = x+1) begin\n          assign mux_odt_remap[(x*ODT_WIDTH)+:ODT_WIDTH] = {ODT_WIDTH{mux_odt[0]}} ;\n        end\n     end else begin\n        for(x =0 ; x < 2*nCK_PER_CLK ; x = x+2) begin\n          assign mux_odt_remap[(x*ODT_WIDTH/RANKS)+:ODT_WIDTH/RANKS] = {ODT_WIDTH/RANKS{mux_odt[0]}} ;\n          assign mux_odt_remap[((x*ODT_WIDTH/RANKS)+(ODT_WIDTH/RANKS))+:ODT_WIDTH/RANKS] = {ODT_WIDTH/RANKS{mux_odt[1]}} ;\n        end\n     end\n\n     if (USE_ODT_PORT == 1) begin: gen_odt_out\n       for (m = 0; m < ODT_WIDTH; m = m + 1) begin: gen_odt_out_1\n         assign out_odt[m]\n                  = mem_dq_out[48*ODT_MAP[(12*m+8)+:3] +\n                               12*ODT_MAP[(12*m+4)+:2] +\n                               ODT_MAP[12*m+:4]];\n         if (ODT_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n           for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n             assign phy_dout[320*ODT_MAP[(12*m+8)+:3] +\n                             80*ODT_MAP[(12*m+4)+:2] +\n                             8*ODT_MAP[12*m+:4] + n]\n                      = mux_odt_remap[ODT_WIDTH*(n/PHASE_DIV) + m];\n           end\n         end else begin: gen_ge10\n           for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n             assign phy_dout[320*ODT_MAP[(12*m+8)+:3] +\n                             80*ODT_MAP[(12*m+4)+:2] +\n                             8*(ODT_MAP[12*m+:4]-5) + 4 + n]\n                      = mux_odt_remap[ODT_WIDTH*(n/PHASE_DIV) + m];\n           end\n         end\n       end\n     end\n\n\n     wire [CKE_WIDTH*nCK_PER_CLK -1:0] mux_cke_remap ;\n\n     for(x = 0 ; x < nCK_PER_CLK ; x = x +1) begin\n      assign  mux_cke_remap[(x*CKE_WIDTH)+:CKE_WIDTH] = {CKE_WIDTH{mux_cke[x]}} ;\n     end\n\n\n\n     for (m = 0; m < CKE_WIDTH; m = m + 1) begin: gen_cke_out\n       assign out_cke[m]\n                = mem_dq_out[48*CKE_MAP[(12*m+8)+:3] +\n                             12*CKE_MAP[(12*m+4)+:2] +\n                             CKE_MAP[12*m+:4]];\n       if (CKE_MAP[12*m+:4] < 4'hA) begin: gen_lt10\n         for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n           assign phy_dout[320*CKE_MAP[(12*m+8)+:3] +\n                           80*CKE_MAP[(12*m+4)+:2] +\n                           8*CKE_MAP[12*m+:4] + n]\n                    = mux_cke_remap[CKE_WIDTH*(n/PHASE_DIV) + m];\n         end\n       end else begin: gen_ge10\n         for (n = 0; n < 4; n = n + 1) begin: loop_xpose\n           assign phy_dout[320*CKE_MAP[(12*m+8)+:3] +\n                           80*CKE_MAP[(12*m+4)+:2] +\n                           8*(CKE_MAP[12*m+:4]-5) + 4 + n]\n                    = mux_cke_remap[CKE_WIDTH*(n/PHASE_DIV) + m];\n         end\n       end\n     end\n   end\n\n    \n    \n    \n\n    if (USE_DM_PORT == 1) begin: gen_dm_out\n      for (m = 0; m < DM_WIDTH; m = m + 1) begin: gen_dm_out\n        assign out_dm[m]\n                 = mem_dq_out[48*FULL_MASK_MAP[(12*m+8)+:3] +\n                              12*FULL_MASK_MAP[(12*m+4)+:2] +\n                              FULL_MASK_MAP[12*m+:4]];\n        assign ts_dm[m]\n                 = mem_dq_ts[48*FULL_MASK_MAP[(12*m+8)+:3] +\n                             12*FULL_MASK_MAP[(12*m+4)+:2] +\n                             FULL_MASK_MAP[12*m+:4]];\n        for (n = 0; n < PHASE_PER_CLK; n = n + 1) begin: loop_xpose\n          assign phy_dout[320*FULL_MASK_MAP[(12*m+8)+:3] +\n                          80*FULL_MASK_MAP[(12*m+4)+:2] +\n                          8*FULL_MASK_MAP[12*m+:4] + n]\n                   = mux_wrdata_mask[DM_WIDTH*n + m];\n        end\n      end\n    end\n\n    \n    \n    \n\n    for (m = 0; m < DQ_WIDTH; m = m + 1) begin: gen_dq_inout\n      \n      assign mem_dq_in[40*FULL_DATA_MAP[(12*m+8)+:3] +\n                       10*FULL_DATA_MAP[(12*m+4)+:2] +\n                       FULL_DATA_MAP[12*m+:4]]\n               = in_dq[m];\n      \n      assign out_dq[m]\n               = mem_dq_out[48*FULL_DATA_MAP[(12*m+8)+:3] +\n                            12*FULL_DATA_MAP[(12*m+4)+:2] +\n                            FULL_DATA_MAP[12*m+:4]];\n      assign ts_dq[m]\n               = mem_dq_ts[48*FULL_DATA_MAP[(12*m+8)+:3] +\n                           12*FULL_DATA_MAP[(12*m+4)+:2] +\n                           FULL_DATA_MAP[12*m+:4]];\n      for (n = 0; n < PHASE_PER_CLK; n = n + 1) begin: loop_xpose\n        assign phy_dout[320*FULL_DATA_MAP[(12*m+8)+:3] +\n                        80*FULL_DATA_MAP[(12*m+4)+:2] +\n                        8*FULL_DATA_MAP[12*m+:4] + n]\n                 = mux_wrdata[DQ_WIDTH*n + m];\n      end\n    end\n\n    \n    \n    \n\n    for (m = 0; m < DQS_WIDTH; m = m + 1) begin: gen_dqs_inout\n      \n      assign mem_dqs_in[4*DQS_BYTE_MAP[(8*m+4)+:3] + DQS_BYTE_MAP[(8*m)+:2]]\n        = in_dqs[m];\n      \n      assign out_dqs[m]\n        = mem_dqs_out[4*DQS_BYTE_MAP[(8*m+4)+:3] + DQS_BYTE_MAP[(8*m)+:2]];\n      assign ts_dqs[m]\n        = mem_dqs_ts[4*DQS_BYTE_MAP[(8*m+4)+:3] + DQS_BYTE_MAP[(8*m)+:2]];\n    end\n  endgenerate",
        "  generate\n    if (REG_CTRL == \"ON\") begin: gen_parity_out\n      \n      assign out_parity\n        = mem_dq_out[48*PARITY_MAP[10:8] + 12*PARITY_MAP[5:4] +\n                     PARITY_MAP[3:0]];\n      if (PARITY_MAP[3:0] < 4'hA) begin: gen_lt10\n        assign phy_dout[(320*PARITY_MAP[10:8] + 80*PARITY_MAP[5:4] +\n                         8*PARITY_MAP[3:0])+:4]\n                 = {parity_in[3/PHASE_DIV], parity_in[2/PHASE_DIV],\n                    parity_in[1/PHASE_DIV], parity_in[0]};\n      end else begin: gen_ge10\n        assign phy_dout[(320*PARITY_MAP[10:8] + 80*PARITY_MAP[5:4] +\n                         8*(PARITY_MAP[3:0]-5) + 4)+:4]\n               = {parity_in[3/PHASE_DIV], parity_in[2/PHASE_DIV],\n                  parity_in[1/PHASE_DIV], parity_in[0]};\n      end\n    end\n  endgenerate",
        "  generate\n    if (WE_MAP[3:0] < 4'hA) begin: gen_we_lt10\n      assign phy_dout[(320*WE_MAP[10:8] + 80*WE_MAP[5:4] +\n                       8*WE_MAP[3:0])+:4]\n               = {mux_we_n[3/PHASE_DIV], mux_we_n[2/PHASE_DIV],\n                  mux_we_n[1/PHASE_DIV], mux_we_n[0]};\n    end else begin: gen_we_ge10\n      assign phy_dout[(320*WE_MAP[10:8] + 80*WE_MAP[5:4] +\n                       8*(WE_MAP[3:0]-5) + 4)+:4]\n               = {mux_we_n[3/PHASE_DIV], mux_we_n[2/PHASE_DIV],\n                  mux_we_n[1/PHASE_DIV], mux_we_n[0]};\n    end\n  endgenerate",
        "  assign out_we_n\n    = mem_dq_out[48*WE_MAP[10:8] + 12*WE_MAP[5:4] + WE_MAP[3:0]];\n",
        "  generate\n    if (RAS_MAP[3:0] < 4'hA) begin: gen_ras_lt10\n      assign phy_dout[(320*RAS_MAP[10:8] + 80*RAS_MAP[5:4] +\n                       8*RAS_MAP[3:0])+:4]\n               = {mux_ras_n[3/PHASE_DIV], mux_ras_n[2/PHASE_DIV],\n                  mux_ras_n[1/PHASE_DIV], mux_ras_n[0]};\n    end else begin: gen_ras_ge10\n      assign phy_dout[(320*RAS_MAP[10:8] + 80*RAS_MAP[5:4] +\n                       8*(RAS_MAP[3:0]-5) + 4)+:4]\n               = {mux_ras_n[3/PHASE_DIV], mux_ras_n[2/PHASE_DIV],\n                  mux_ras_n[1/PHASE_DIV], mux_ras_n[0]};\n    end\n  endgenerate",
        "  assign out_ras_n\n    = mem_dq_out[48*RAS_MAP[10:8] + 12*RAS_MAP[5:4] + RAS_MAP[3:0]];\n",
        "  generate\n    \n    if (CAS_MAP[3:0] < 4'hA) begin: gen_cas_lt10\n      \n      \n      \n      \n      \n      \n      assign phy_dout[(320*CAS_MAP[10:8] + 80*CAS_MAP[5:4] +\n                       8*CAS_MAP[3:0])+:4]\n               = {mux_cas_n[3/PHASE_DIV], mux_cas_n[2/PHASE_DIV],\n                  mux_cas_n[1/PHASE_DIV], mux_cas_n[0]};\n    end else begin: gen_cas_ge10\n      \n      \n      \n      \n      \n      assign phy_dout[(320*CAS_MAP[10:8] + 80*CAS_MAP[5:4] +\n                       8*(CAS_MAP[3:0]-5) + 4)+:4]\n               = {mux_cas_n[3/PHASE_DIV], mux_cas_n[2/PHASE_DIV],\n                  mux_cas_n[1/PHASE_DIV], mux_cas_n[0]};\n    end\n  endgenerate",
        "  assign out_cas_n\n    = mem_dq_out[48*CAS_MAP[10:8] + 12*CAS_MAP[5:4] + CAS_MAP[3:0]];",
        "  always @ (posedge clk) begin\n     fine_delay_mod[((byte_sel_data_map[3:0])*3)+:3] <= #TCQ {fine_delay_incdec_pb[0],2'b00};\n     fine_delay_mod[((byte_sel_data_map[12+3:12])*3)+:3] <= #TCQ {fine_delay_incdec_pb[1],2'b00};\n     fine_delay_mod[((byte_sel_data_map[24+3:24])*3)+:3] <= #TCQ {fine_delay_incdec_pb[2],2'b00};\n     fine_delay_mod[((byte_sel_data_map[36+3:36])*3)+:3] <= #TCQ {fine_delay_incdec_pb[3],2'b00};\n     fine_delay_mod[((byte_sel_data_map[48+3:48])*3)+:3] <= #TCQ {fine_delay_incdec_pb[4],2'b00};\n     fine_delay_mod[((byte_sel_data_map[60+3:60])*3)+:3] <= #TCQ {fine_delay_incdec_pb[5],2'b00};\n     fine_delay_mod[((byte_sel_data_map[72+3:72])*3)+:3] <= #TCQ {fine_delay_incdec_pb[6],2'b00};\n     fine_delay_mod[((byte_sel_data_map[84+3:84])*3)+:3] <= #TCQ {fine_delay_incdec_pb[7],2'b00};\n     fine_delay_sel_r <= #TCQ fine_delay_sel;\n  end",
        "  always @ (posedge clk) begin\n     byte_sel_data_map <= #TCQ FULL_DATA_MAP[12*DQ_PER_DQS*byte_sel_cnt_w1+:96];\n  end\n",
        "  assign byte_sel_cnt_w1 = byte_sel_cnt;",
        "  generate\n    genvar i, j;\n    for (i = 0; i < DQ_WIDTH; i = i + 1) begin: gen_loop_rd_data_1\n      for (j = 0; j < PHASE_PER_CLK; j = j + 1) begin: gen_loop_rd_data_2\n        assign rd_data[DQ_WIDTH*j + i]\n                 = phy_din[(320*FULL_DATA_MAP[(12*i+8)+:3]+\n                            80*FULL_DATA_MAP[(12*i+4)+:2] +\n                            8*FULL_DATA_MAP[12*i+:4]) + j];\n      end\n    end\n  endgenerate",
        "        assign ddr_odt = 'b0;\n    end",
        "      end else if (ODT_WIDTH == 3 && RANKS == 1) begin: gen_3port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );",
        "      end else if (ODT_WIDTH == 2 && RANKS == 2) begin: gen_2rank_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[1])\n           );",
        "      if (ODT_WIDTH == 2 && RANKS == 1) begin: gen_2port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );\n      end else if (ODT_WIDTH == 2 && RANKS == 2) begin: gen_2rank_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[1])\n           );\n      end else if (ODT_WIDTH == 3 && RANKS == 1) begin: gen_3port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );\n        OBUF u_odt2_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[2])\n           );\n      end",
        "    if (USE_ODT_PORT == 1) begin : gen_use_odt\n      \n      \n      \n      \n      \n      \n        OBUF u_odt_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+1]),\n           .O (ddr_odt[0])\n           );\n      if (ODT_WIDTH == 2 && RANKS == 1) begin: gen_2port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );\n      end else if (ODT_WIDTH == 2 && RANKS == 2) begin: gen_2rank_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[1])\n           );\n      end else if (ODT_WIDTH == 3 && RANKS == 1) begin: gen_3port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );\n        OBUF u_odt2_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[2])\n           );\n      end\n    end else begin",
        "  if(CKE_ODT_AUX == \"TRUE\")begin:odt_thru_auxpins\n    if (USE_ODT_PORT == 1) begin : gen_use_odt\n      \n      \n      \n      \n      \n      \n        OBUF u_odt_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+1]),\n           .O (ddr_odt[0])\n           );\n      if (ODT_WIDTH == 2 && RANKS == 1) begin: gen_2port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );\n      end else if (ODT_WIDTH == 2 && RANKS == 2) begin: gen_2rank_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[1])\n           );\n      end else if (ODT_WIDTH == 3 && RANKS == 1) begin: gen_3port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );\n        OBUF u_odt2_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[2])\n           );\n      end\n    end else begin\n        assign ddr_odt = 'b0;\n    end\n  end",
        "  generate\n  if(CKE_ODT_AUX == \"TRUE\")begin:odt_thru_auxpins\n    if (USE_ODT_PORT == 1) begin : gen_use_odt\n      \n      \n      \n      \n      \n      \n        OBUF u_odt_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+1]),\n           .O (ddr_odt[0])\n           );\n      if (ODT_WIDTH == 2 && RANKS == 1) begin: gen_2port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );\n      end else if (ODT_WIDTH == 2 && RANKS == 2) begin: gen_2rank_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[1])\n           );\n      end else if (ODT_WIDTH == 3 && RANKS == 1) begin: gen_3port_odt\n        OBUF u_odt1_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n           .O (ddr_odt[1])\n           );\n        OBUF u_odt2_obuf\n          (\n           .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+3]),\n           .O (ddr_odt[2])\n           );\n      end\n    end else begin\n        assign ddr_odt = 'b0;\n    end\n  end\n  endgenerate",
        "  generate\n  if(CKE_ODT_AUX == \"TRUE\")begin:cke_thru_auxpins\n    if (CKE_WIDTH == 1) begin : gen_cke\n      \n      \n      \n      \n      \n      \n      OBUF u_cke_obuf\n        (\n         .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK]),\n         .O (ddr_cke)\n         );\n    end else begin: gen_2rank_cke\n      OBUF u_cke0_obuf\n        (\n         .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK]),\n         .O (ddr_cke[0])\n         );\n      OBUF u_cke1_obuf\n        (\n         .I (aux_out[4*CKE_ODT_RCLK_SELECT_BANK+2]),\n         .O (ddr_cke[1])\n         );\n    end\n  end\n  endgenerate",
        "  assign data_io_idle_pwrdwn = DATA_IO_IDLE_PWRDWN == \"ON\" ? idle : 1'b0;\n  assign iddr_rst_i = iddr_rst;",
        "  assign idelaye2_init_val = PHY_0_A_IDELAYE2_IDELAY_VALUE;\n  assign oclkdelay_init_val = PHY_0_A_PO_OCLK_DELAY;",
        "  assign phy_rd_en = !if_empty;",
        "  function [143:0] calc_phy_bitlanes_outonly;\n    input [215:0] data_mask_in;\n    integer       z;\n    begin\n      calc_phy_bitlanes_outonly = 'b0;\n      \n      \n      if (USE_DM_PORT == 1)\n        for (z = 0; z < DM_WIDTH; z = z + 1)\n          calc_phy_bitlanes_outonly[48*data_mask_in[(12*z+8)+:3] +\n                                    12*data_mask_in[(12*z+4)+:2] +\n                                    data_mask_in[12*z+:4]] = 1'b1;\n    end\n  endfunction",
        "  function [(2*CK_WIDTH*8)-1:0] generate_ddr_ck_map;\n    input [143:0] ck_byte_map;\n    integer g;\n    begin\n      generate_ddr_ck_map = 'b0 ;\n      for(g = 0 ; g < CK_WIDTH ; g= g + 1) begin\n        generate_ddr_ck_map[(g*2*8)+:8]  = (ck_byte_map[(g*8)+:4] == 4'd0) ? \"A\" :\n                                           (ck_byte_map[(g*8)+:4] == 4'd1) ? \"B\" :\n                                           (ck_byte_map[(g*8)+:4] == 4'd2) ? \"C\" : \"D\" ;\n        generate_ddr_ck_map[(((g*2)+1)*8)+:8] = (ck_byte_map[((g*8)+4)+:4] == 4'd0) ? \"0\" :\n                                                (ck_byte_map[((g*8)+4)+:4] == 4'd1) ? \"1\" :  \"2\" ; \n      end\n    end\n  endfunction",
        "  function [71:0] generate_bytelanes_ddr_ck;\n    input [143:0] ck_byte_map;\n    integer v ;\n    begin\n      generate_bytelanes_ddr_ck = 'b0 ;\n      for (v = 0; v < CK_WIDTH; v = v + 1) begin\n        if ((CK_BYTE_MAP[((v*8)+4)+:4]) == 2)\n          generate_bytelanes_ddr_ck[48+(4*v)+1*(CK_BYTE_MAP[(v*8)+:4])] = 1'b1;\n        else if ((CK_BYTE_MAP[((v*8)+4)+:4]) == 1)\n          generate_bytelanes_ddr_ck[24+(4*v)+1*(CK_BYTE_MAP[(v*8)+:4])] = 1'b1;\n        else\n          generate_bytelanes_ddr_ck[4*v+1*(CK_BYTE_MAP[(v*8)+:4])] = 1'b1;\n      end\n    end\n  endfunction"
    ]
}