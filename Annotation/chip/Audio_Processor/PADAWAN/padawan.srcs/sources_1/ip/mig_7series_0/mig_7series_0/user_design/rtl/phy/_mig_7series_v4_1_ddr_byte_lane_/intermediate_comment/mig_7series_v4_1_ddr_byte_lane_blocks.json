{
    "line_num": [
        [
            779,
            798
        ],
        [
            732,
            776
        ],
        [
            693,
            729
        ],
        [
            646,
            689
        ],
        [
            601,
            643
        ],
        [
            589,
            592
        ],
        [
            494,
            594
        ],
        [
            486,
            490
        ],
        [
            482,
            484
        ],
        [
            475,
            480
        ],
        [
            468,
            473
        ],
        [
            461,
            466
        ],
        [
            449,
            459
        ],
        [
            432,
            448
        ],
        [
            395,
            424
        ],
        [
            387,
            387
        ],
        [
            384,
            384
        ],
        [
            377,
            381
        ],
        [
            350,
            356
        ],
        [
            345,
            347
        ],
        [
            339,
            343
        ],
        [
            333,
            338
        ],
        [
            318,
            331
        ],
        [
            315,
            315
        ],
        [
            306,
            310
        ]
    ],
    "blocks": [
        "generate\n  for (i = 0; i <= 5; i = i+1) begin : ddr_ck_gen_loop\n    if (PO_DATA_CTL== \"FALSE\" && (BYTELANES_DDR_CK[i*4+PHASER_INDEX])) begin : ddr_ck_gen\n      ODDR #(.DDR_CLK_EDGE  (ODDR_CLK_EDGE))\n        ddr_ck (\n        .C    (oserdes_clk),\n        .R    (1'b0),\n        .S    (),\n        .D1   (1'b0),\n        .D2   (1'b1),\n        .CE   (1'b1),\n        .Q    (ddr_ck_out_q[i])\n      );\n      OBUFDS ddr_ck_obuf  (.I(ddr_ck_out_q[i]), .O(ddr_ck_out[i*2]), .OB(ddr_ck_out[i*2+1]));\n    end \n    else  begin : ddr_ck_null\n      assign ddr_ck_out[i*2+1:i*2] = 2'b0;\n    end\n  end \nendgenerate",
        "mig_7series_v4_1_ddr_byte_group_io   #\n   (\n   .PO_DATA_CTL             (PO_DATA_CTL),\n   .BITLANES                (BITLANES),\n   .BITLANES_OUTONLY        (BITLANES_OUTONLY),\n   .OSERDES_DATA_RATE       (L_OSERDES_DATA_RATE),\n   .OSERDES_DATA_WIDTH      (L_OSERDES_DATA_WIDTH),\n   .IODELAY_GRP             (IODELAY_GRP),\n   .FPGA_SPEED_GRADE        (FPGA_SPEED_GRADE),\n   .IDELAYE2_IDELAY_TYPE    (IDELAYE2_IDELAY_TYPE),\n   .IDELAYE2_IDELAY_VALUE   (IDELAYE2_IDELAY_VALUE),\n   .TCK                     (TCK),\n   .SYNTHESIS               (SYNTHESIS)\n   )\n   ddr_byte_group_io\n   (\n   .mem_dq_out               (mem_dq_out),\n   .mem_dq_ts                (mem_dq_ts),\n   .mem_dq_in                (mem_dq_in),\n   .mem_dqs_in               (mem_dqs_in),\n   .mem_dqs_out              (mem_dqs_out),\n   .mem_dqs_ts               (mem_dqs_ts),\n   .rst                      (rst),\n   .oserdes_rst              (po_oserdes_rst),\n   .iserdes_rst              (pi_iserdes_rst ),\n   .iserdes_dout             (iserdes_dout),\n   .dqs_to_phaser            (dqs_to_phaser),\n   .phy_clk                  (phy_clk),\n   .iserdes_clk              (iserdes_clk),\n   .iserdes_clkb             (!iserdes_clk),\n   .iserdes_clkdiv           (iserdes_clkdiv),\n   .idelay_inc               (idelay_inc),\n   .idelay_ce                (idelay_ce),\n   .idelay_ld                (idelay_ld),\n   .idelayctrl_refclk        (idelayctrl_refclk),\n   .oserdes_clk              (oserdes_clk),\n   .oserdes_clk_delayed      (oserdes_clk_delayed),\n   .oserdes_clkdiv           (oserdes_clkdiv),\n   .oserdes_dqs              ({oserdes_dqs[1], oserdes_dqs[0]}),\n   .oserdes_dqsts            ({oserdes_dqs_ts[1], oserdes_dqs_ts[0]}),\n   .oserdes_dq               (of_dqbus),\n   .oserdes_dqts             ({oserdes_dq_ts[1], oserdes_dq_ts[0]}),\n   .fine_delay               (fine_delay),\n   .fine_delay_sel           (fine_delay_sel)\n    );",
        "OUT_FIFO #(\n  .ALMOST_EMPTY_VALUE             (OF_ALMOST_EMPTY_VALUE),\n  .ALMOST_FULL_VALUE              (OF_ALMOST_FULL_VALUE),\n  .ARRAY_MODE                     (L_OF_ARRAY_MODE),\n  .OUTPUT_DISABLE                 (OF_OUTPUT_DISABLE),\n  .SYNCHRONOUS_MODE               (OF_SYNCHRONOUS_MODE)\n) out_fifo (\n  .ALMOSTEMPTY                    (of_a_empty),\n  .ALMOSTFULL                     (of_a_full),\n  .EMPTY                          (of_empty),\n  .FULL                           (of_full),\n  .Q0                             (of_q0),\n  .Q1                             (of_q1),\n  .Q2                             (of_q2),\n  .Q3                             (of_q3),\n  .Q4                             (of_q4),\n  .Q5                             (of_q5),\n  .Q6                             (of_q6),\n  .Q7                             (of_q7),\n  .Q8                             (of_q8),\n  .Q9                             (of_q9),\n  .D0                             (of_d0),\n  .D1                             (of_d1),\n  .D2                             (of_d2),\n  .D3                             (of_d3),\n  .D4                             (of_d4),\n  .D5                             (of_d5),\n  .D6                             (of_d6),\n  .D7                             (of_d7),\n  .D8                             (of_d8),\n  .D9                             (of_d9),\n  .RDCLK                          (oserdes_clkdiv),\n  .RDEN                           (po_rd_enable),\n  .RESET                          (ofifo_rst),\n  .WRCLK                          (phy_clk),\n  .WREN                           (of_wren_pre)\n);",
        "generate\n\nif (PO_DATA_CTL == \"TRUE\")   begin : in_fifo_gen\n\nIN_FIFO #(\n  .ALMOST_EMPTY_VALUE                ( IF_ALMOST_EMPTY_VALUE ),\n  .ALMOST_FULL_VALUE                 ( IF_ALMOST_FULL_VALUE ),\n  .ARRAY_MODE                        ( L_IF_ARRAY_MODE),\n  .SYNCHRONOUS_MODE                  ( IF_SYNCHRONOUS_MODE)\n) in_fifo  (\n  .ALMOSTEMPTY                       (if_a_empty_),\n  .ALMOSTFULL                        (if_a_full_),\n  .EMPTY                             (if_empty_),\n  .FULL                              (if_full_),\n  .Q0                                (if_q0),\n  .Q1                                (if_q1),\n  .Q2                                (if_q2),\n  .Q3                                (if_q3),\n  .Q4                                (if_q4),\n  .Q5                                (if_q5),\n  .Q6                                (if_q6),\n  .Q7                                (if_q7),\n  .Q8                                (if_q8),\n  .Q9                                (if_q9),\n\n  .D0                                (if_d0),\n  .D1                                (if_d1),\n  .D2                                (if_d2),\n  .D3                                (if_d3),\n  .D4                                (if_d4),\n  .D5                                ({dummy_i5,if_d5}),\n  .D6                                ({dummy_i6,if_d6}),\n  .D7                                (if_d7),\n  .D8                                (if_d8),\n  .D9                                (if_d9),\n  .RDCLK                             (phy_clk),\n  .RDEN                              (phy_rd_en_),\n  .RESET                             (ififo_rst),\n  .WRCLK                             (iserdes_clkdiv),\n  .WREN                              (ififo_wr_enable)\n);\nend\n\nendgenerate",
        "PHASER_OUT_PHY #(\n  .CLKOUT_DIV                        ( PO_CLKOUT_DIV),\n  .DATA_CTL_N                        ( PO_DATA_CTL ),\n  .FINE_DELAY                        ( PO_FINE_DELAY),\n  .COARSE_BYPASS                     ( PO_COARSE_BYPASS ),\n  .COARSE_DELAY                      ( PO_COARSE_DELAY),\n  .OCLK_DELAY                        ( PO_OCLK_DELAY),\n  .OCLKDELAY_INV                     ( PO_OCLKDELAY_INV),\n  .OUTPUT_CLK_SRC                    ( PO_OUTPUT_CLK_SRC),\n  .SYNC_IN_DIV_RST                   ( PO_SYNC_IN_DIV_RST),\n  .REFCLK_PERIOD                     ( L_FREQ_REF_PERIOD_NS),\n  .PHASEREFCLK_PERIOD                ( 1), \n  .PO                                ( PO_DCD_SETTING ),\n  .MEMREFCLK_PERIOD                  ( L_MEM_REF_PERIOD_NS)\n) phaser_out (\n  .COARSEOVERFLOW                    (po_coarse_overflow),\n  .CTSBUS                            (oserdes_dqs_ts),\n  .DQSBUS                            (oserdes_dqs),\n  .DTSBUS                            (oserdes_dq_ts),\n  .FINEOVERFLOW                      (po_fine_overflow),\n  .OCLKDIV                           (oserdes_clkdiv),\n  .OCLK                              (oserdes_clk),\n  .OCLKDELAYED                       (oserdes_clk_delayed),\n  .COUNTERREADVAL                    (po_counter_read_val),\n  .BURSTPENDINGPHY                   (phaser_ctl_bus[MSB_BURST_PEND_PO -3 + PHASER_INDEX]),\n  .ENCALIBPHY                        (po_en_calib),\n  .RDENABLE                          (po_rd_enable),\n  .FREQREFCLK                        (freq_refclk),\n  .MEMREFCLK                         (mem_refclk),\n  .PHASEREFCLK                       (),\n  .RST                               (rst),\n  .OSERDESRST                        (po_oserdes_rst),\n  .COARSEENABLE                      (po_coarse_enable),\n  .FINEENABLE                        (po_fine_enable),\n  .COARSEINC                         (po_coarse_inc),\n  .FINEINC                           (po_fine_inc),\n  .SELFINEOCLKDELAY                  (po_sel_fine_oclk_delay),\n  .COUNTERLOADEN                     (po_counter_load_en),\n  .COUNTERREADEN                     (po_counter_read_en),\n  .COUNTERLOADVAL                    (po_counter_load_val),\n  .SYNCIN                            (sync_pulse),\n  .SYSCLK                            (phy_clk)\n);",
        "   assign pi_dqs_found_w = 1'b1;\n\n   assign pi_phase_locked_w = 1'b1;\nend",
        "generate\n\nif ( PO_DATA_CTL == \"TRUE\" || ((RCLK_SELECT_LANE==ABCD) && (CKE_ODT_AUX ==\"TRUE\")))  begin : phaser_in_gen\n\n\nif (PI_DIV2_INCDEC == \"TRUE\") begin\n\nPHASER_IN_PHY #(\n  .BURST_MODE                       ( PI_BURST_MODE),\n  .CLKOUT_DIV                       ( PI_CLKOUT_DIV),\n  .DQS_AUTO_RECAL                   ( DQS_AUTO_RECAL),\n  .DQS_FIND_PATTERN                 ( DQS_FIND_PATTERN),\n  .SEL_CLK_OFFSET                   ( PI_SEL_CLK_OFFSET),\n  .FINE_DELAY                       ( PI_FINE_DELAY),\n  .FREQ_REF_DIV                     ( PI_FREQ_REF_DIV),\n  .OUTPUT_CLK_SRC                   ( PI_OUTPUT_CLK_SRC),\n  .SYNC_IN_DIV_RST                  ( PI_SYNC_IN_DIV_RST),\n  .REFCLK_PERIOD                    ( L_FREQ_REF_PERIOD_NS),\n  .MEMREFCLK_PERIOD                 ( L_MEM_REF_PERIOD_NS),\n  .PHASEREFCLK_PERIOD               ( L_PHASE_REF_PERIOD_NS)\n) phaser_in (\n  .DQSFOUND                         (pi_dqs_found_w),\n  .DQSOUTOFRANGE                    (dqs_out_of_range),\n  .FINEOVERFLOW                     (pi_fine_overflow),\n  .PHASELOCKED                      (pi_phase_locked_w),\n  .ISERDESRST                       (pi_iserdes_rst),\n  .ICLKDIV                          (iserdes_clkdiv),\n  .ICLK                             (iserdes_clk),\n  .COUNTERREADVAL                   (pi_counter_read_val_w),\n  .RCLK                             (rclk),\n  .WRENABLE                         (ififo_wr_enable),\n  .BURSTPENDINGPHY                  (phaser_ctl_bus[MSB_BURST_PEND_PI - 3 + PHASER_INDEX]),\n  .ENCALIBPHY                       (pi_en_calib),\n  .FINEENABLE                       (pi_fine_enable),\n  .FREQREFCLK                       (freq_refclk),\n  .MEMREFCLK                        (mem_refclk),\n  .RANKSELPHY                       (rank_sel_i),\n  .PHASEREFCLK                      (dqs_to_phaser),\n  .RSTDQSFIND                       (pi_rst_dqs_find),\n  .RST                              (rst_pi_div2),\n  .FINEINC                          (pi_fine_inc),\n  .COUNTERLOADEN                    (pi_counter_load_en),\n  .COUNTERREADEN                    (pi_counter_read_en),\n  .COUNTERLOADVAL                   (pi_counter_load_val),\n  .SYNCIN                           (sync_pulse),\n  .SYSCLK                           (clk_div2)\n);\nend\n\nelse begin\n\nPHASER_IN_PHY #(\n  .BURST_MODE                       ( PI_BURST_MODE),\n  .CLKOUT_DIV                       ( PI_CLKOUT_DIV),\n  .DQS_AUTO_RECAL                   ( DQS_AUTO_RECAL),\n  .DQS_FIND_PATTERN                 ( DQS_FIND_PATTERN),\n  .SEL_CLK_OFFSET                   ( PI_SEL_CLK_OFFSET),\n  .FINE_DELAY                       ( PI_FINE_DELAY),\n  .FREQ_REF_DIV                     ( PI_FREQ_REF_DIV),\n  .OUTPUT_CLK_SRC                   ( PI_OUTPUT_CLK_SRC),\n  .SYNC_IN_DIV_RST                  ( PI_SYNC_IN_DIV_RST),\n  .REFCLK_PERIOD                    ( L_FREQ_REF_PERIOD_NS),\n  .MEMREFCLK_PERIOD                 ( L_MEM_REF_PERIOD_NS),\n  .PHASEREFCLK_PERIOD               ( L_PHASE_REF_PERIOD_NS)\n) phaser_in (\n  .DQSFOUND                         (pi_dqs_found_w),\n  .DQSOUTOFRANGE                    (dqs_out_of_range),\n  .FINEOVERFLOW                     (pi_fine_overflow),\n  .PHASELOCKED                      (pi_phase_locked_w),\n  .ISERDESRST                       (pi_iserdes_rst),\n  .ICLKDIV                          (iserdes_clkdiv),\n  .ICLK                             (iserdes_clk),\n  .COUNTERREADVAL                   (pi_counter_read_val_w),\n  .RCLK                             (rclk),\n  .WRENABLE                         (ififo_wr_enable),\n  .BURSTPENDINGPHY                  (phaser_ctl_bus[MSB_BURST_PEND_PI - 3 + PHASER_INDEX]),\n  .ENCALIBPHY                       (pi_en_calib),\n  .FINEENABLE                       (pi_fine_enable),\n  .FREQREFCLK                       (freq_refclk),\n  .MEMREFCLK                        (mem_refclk),\n  .RANKSELPHY                       (rank_sel_i),\n  .PHASEREFCLK                      (dqs_to_phaser),\n  .RSTDQSFIND                       (pi_rst_dqs_find),\n  .RST                              (rst),\n  .FINEINC                          (pi_fine_inc),\n  .COUNTERLOADEN                    (pi_counter_load_en),\n  .COUNTERREADEN                    (pi_counter_read_en),\n  .COUNTERLOADVAL                   (pi_counter_load_val),\n  .SYNCIN                           (sync_pulse),\n  .SYSCLK                           (phy_clk)\n);\n\nend\nend\nelse begin\n   assign pi_dqs_found_w = 1'b1;\n\n   assign pi_phase_locked_w = 1'b1;\nend\n\nendgenerate",
        "  end else begin: pahser_in_div4_clk\n    assign pi_phase_locked     = pi_phase_locked_w;\n    assign pi_dqs_found        = pi_dqs_found_w;\n    assign pi_counter_read_val = pi_counter_read_val_w;\n  end",
        "    assign pi_phase_locked     = pi_phase_locked_r4;\n    assign pi_dqs_found        = pi_dqs_found_r4;\n    assign pi_counter_read_val = pi_counter_read_val_r4;",
        "    always @ (posedge phy_clk) begin\n      if (rst)\n        pi_counter_read_val_r4 <= 1'b0;\n      else if (pi_counter_read_val_r2 == pi_counter_read_val_r3)\n        pi_counter_read_val_r4 <= pi_counter_read_val_r3;\n    end",
        "    always @ (posedge phy_clk) begin\n      if (rst)\n        pi_dqs_found_r4 <= 1'b0;\n      else if (pi_dqs_found_r2 == pi_dqs_found_r3)\n        pi_dqs_found_r4 <= pi_dqs_found_r3;\n    end",
        "    always @ (posedge phy_clk) begin\n      if (rst)\n        pi_phase_locked_r4 <= 1'b0;\n      else if (pi_phase_locked_r2 == pi_phase_locked_r3)\n        pi_phase_locked_r4 <= pi_phase_locked_r3;\n    end",
        "    always @ (posedge phy_clk) begin\n      pi_phase_locked_r1 <= pi_phase_locked_w;\n      pi_phase_locked_r2 <= pi_phase_locked_r1;\n      pi_phase_locked_r3 <= pi_phase_locked_r2;\n      pi_dqs_found_r1    <= pi_dqs_found_w;\n      pi_dqs_found_r2    <= pi_dqs_found_r1;\n      pi_dqs_found_r3    <= pi_dqs_found_r2;\n      pi_counter_read_val_r1 <= pi_counter_read_val_w;\n      pi_counter_read_val_r2 <= pi_counter_read_val_r1;\n      pi_counter_read_val_r3 <= pi_counter_read_val_r2;\n    end",
        "generate\n  if (PI_DIV2_INCDEC == \"TRUE\") begin: phaser_in_div2_clk\n    (* ASYNC_REG = \"TRUE\" *) reg  pi_phase_locked_r1;\n    (* ASYNC_REG = \"TRUE\" *) reg  pi_phase_locked_r2;\n    (* ASYNC_REG = \"TRUE\" *) reg  pi_phase_locked_r3;\n    reg  pi_phase_locked_r4;\n\n    (* ASYNC_REG = \"TRUE\" *) reg  pi_dqs_found_r1;\n    (* ASYNC_REG = \"TRUE\" *) reg  pi_dqs_found_r2;\n    (* ASYNC_REG = \"TRUE\" *) reg  pi_dqs_found_r3;\n    reg  pi_dqs_found_r4;\n\n    (* ASYNC_REG = \"TRUE\" *) reg [5:0] pi_counter_read_val_r1;\n    (* ASYNC_REG = \"TRUE\" *) reg [5:0] pi_counter_read_val_r2;\n    (* ASYNC_REG = \"TRUE\" *) reg [5:0] pi_counter_read_val_r3;\n    reg [5:0] pi_counter_read_val_r4;\n",
        "generate\n\nif ( USE_PRE_POST_FIFO == \"TRUE\" ) begin : of_pre_fifo_gen\n  assign {of_d9, of_d8, of_d7, of_d6, of_d5, of_d4, of_d3, of_d2, of_d1, of_d0} = pre_fifo_dout;\n  mig_7series_v4_1_ddr_of_pre_fifo #\n    (\n     .TCQ   (25),    \n     .DEPTH (9),     \n     .WIDTH (80)     \n     )\n    u_ddr_of_pre_fifo\n        (\n       .clk       (phy_clk),\n       .rst       (ofifo_rst),\n       .full_in   (of_full),\n       .wr_en_in  (phy_wr_en),\n       .d_in      (phy_dout),\n       .wr_en_out (of_wren_pre),\n       .d_out     (pre_fifo_dout),\n       .afull     (pre_fifo_a_full)\n       );\nend\nelse begin\n\n  assign {of_d9, of_d8, of_d7, of_d6, of_d5, of_d4, of_d3, of_d2, of_d1, of_d0} = phy_dout;\n  assign of_wren_pre = phy_wr_en;\nend\n\n\nendgenerate",
        "assign { if_d9, if_d8, if_d7, if_d6, if_d5, if_d4, if_d3, if_d2, if_d1, if_d0} = iserdes_dout;",
        "endgenerate",
        "  end\n  else begin :  phy_din_gen\n     assign phy_din =  {if_q9, if_q8, if_q7, if_q6, if_q5, if_q4, if_q3, if_q2, if_q1, if_q0};\n     assign empty_post_fifo = if_empty_;\n  end",
        "   always @(posedge phy_clk) begin\n     rd_data_r      <= #(025) rd_data;\n     if_empty_r[0]  <= #(025) if_empty_;\n     if_empty_r[1]  <= #(025) if_empty_;\n     if_empty_r[2]  <= #(025) if_empty_;\n     if_empty_r[3]  <= #(025) if_empty_;\n   end",
        "  if (USE_PRE_POST_FIFO == \"TRUE\") begin : if_post_fifo_gen\n\n   ",
        "else begin : dq_gen_40\n\n  assign of_dqbus[40-1:0] = {of_q9, of_q8, of_q7, of_q6[3:0], of_q5[3:0], of_q4, of_q3, of_q2, of_q1, of_q0};\n  assign ififo_rd_en_in   = !if_empty_def ? ((&byte_rd_en_oth_banks) && (&byte_rd_en_oth_lanes) && byte_rd_en) :\n                                            ((|byte_rd_en_oth_banks) || (|byte_rd_en_oth_lanes) || byte_rd_en);",
        "generate\nif ( PO_DATA_CTL == \"FALSE\" ) begin : dq_gen_48\n   assign of_dqbus[48-1:0] = {of_q6[7:4], of_q5[7:4], of_q9, of_q8, of_q7, of_q6[3:0], of_q5[3:0], of_q4, of_q3, of_q2, of_q1, of_q0};\n   assign phy_din =  80'h0;\n   assign byte_rd_en = 1'b1;\nend",
        "generate\nif ( PO_DATA_CTL == \"FALSE\" ) begin : if_empty_null\n    assign if_empty = 0;\n    assign if_a_empty = 0;\n    assign if_full = 0;\n    assign if_a_full = 0;\nend\nelse begin : if_empty_gen\n    assign if_empty   = empty_post_fifo;\n    assign if_a_empty = if_a_empty_;\n    assign if_full    = if_full_;\n    assign if_a_full  = if_a_full_;\nend\nendgenerate",
        "assign #(25) phy_rd_en_ = 1'b1;",
        "always @(posedge phy_clk)  begin\n   ififo_rst <= #1  pi_rst_dqs_find | if_rst ;\n\n   ofifo_rst <= #1 (pi_rst_dqs_find & PO_DATA_CTL == \"TRUE\") | rst;\nend"
    ]
}