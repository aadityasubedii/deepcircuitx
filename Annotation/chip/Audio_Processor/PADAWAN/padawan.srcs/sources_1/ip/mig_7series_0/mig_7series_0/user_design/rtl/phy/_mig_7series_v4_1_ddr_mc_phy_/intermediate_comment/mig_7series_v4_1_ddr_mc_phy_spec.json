{
    "spec": "Module name: mig_7series_v4_1_ddr_mc_phy. Module specification: This module implements a DDR (Double Data Rate) memory controller PHY (Physical Layer) interface for 7 series FPGAs. It handles the physical layer communication between the memory controller and DDR memory devices, supporting multiple byte lanes and banks. The module has numerous input ports for control signals, clocks, and data, including rst, phy_clk, phy_ctl_wd, and phy_dout. Output ports include phy_din, mem_dq_out, mem_dqs_out, and various status signals. Internal signals are used for calibration, phaser control, and FIFO management. The module is highly configurable through parameters and consists of several sub-blocks, including ddr_phy_4lanes instances for each bank, PHASER_IN_",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_mc_phy\n\nExplanation: This module appears to be a DDR (Double Data Rate) memory controller PHY (Physical Layer) interface for 7 series FPGAs. It handles the physical layer communication between the memory controller and DDR memory devices. The module supports multiple byte lanes and banks, implements timing calibration for read and write operations, and manages various clock domains. It includes features such as phaser control, input/output FIFOs, and delay adjustments for optimal data transfer. The module is highly configurable through numerous parameters to adapt to different memory configurations and FPGA designs."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nBased on the provided Verilog code for the mig_7series_v4_1_ddr_mc_phy module, here are the input and output ports along with brief explanations:\n\nInput ports: rst, ddr_rst_in_n, phy_clk, clk_div2, freq_refclk, mem_refclk, mem_refclk_div4, pll_lock, sync_pulse, auxout_clk, idelayctrl_refclk, phy_dout, phy_cmd_wr_en, phy_data_wr_en, phy_rd_en, phy_ctl_wd, aux_in_1, aux_in_2, data_offset_1, data_offset_2, phy_ctl_wr, if_rst, if_empty_def, cke_in, idelay_ce, idelay_ld, idelay_inc, phyGo, input_sink, phy_write_calib, phy_read_calib, calib_sel, calib_zero_inputs, calib_zero_ctrl, calib_zero_lanes, calib_in_common, po_fine_enable, po_coarse_enable, po_fine_inc, po_coarse_inc, po_counter_load_en, po_sel_fine_oclk_delay, po_counter_load_val, po_counter_read_en, pi_rst_dqs_find, pi_fine_enable, pi_fine_inc, pi_counter_load_en, pi_counter_read_en, pi_counter_load_val, fine_delay, fine_delay_sel.\n\nExplanation: These inputs control various aspects of the DDR PHY, including reset signals, clocks, calibration settings, and control signals for phaser input/output operations.\n\nOutput ports: if_a_empty, if_empty, if_empty_or, if_empty_and, of_ctl_a_full, of_data_a_full, of_ctl_full, of_data_full, pre_data_a_full, phy_din, phy_ctl_a_full, phy_ctl_full, mem_dq_out, mem_dq_ts, mem_dq_in, mem_dqs_out, mem_dqs_ts, mem_dqs_in, aux_out, phy_ctl_ready, rst_out, ddr_clk, mcGo, ref_dll_lock, po_coarse_overflow, po_fine_overflow, po_counter_read_val, pi_fine_overflow, pi_counter_read_val, pi_phase_locked, pi_phase_locked_all, pi_dqs_found, pi_dqs_found_all, pi_dqs_found_any, pi_phase_locked_lanes, pi_dqs_found_lanes, pi_dqs_out_of_range.\n\nExplanation: These outputs provide status information about the PHY operation, including FIFO statuses, data signals for memory interface, control signals, calibration results, and various flags indicating the state of phaser input/output operations and DQS (Data Strobe) detection."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the provided code, here are the internal signals and their explanations:\n\nInternal signals: calib_zero_inputs_int, calib_zero_lanes_int, calib_sel_byte0, calib_sel_byte1, calib_sel_byte2, po_coarse_overflow_w, po_fine_overflow_w, po_counter_read_val_w, pi_fine_overflow_w, pi_counter_read_val_w, pi_dqs_found_w, pi_dqs_found_all_w, pi_dqs_found_any_w, pi_dqs_out_of_range_w, pi_phase_locked_w, pi_phase_locked_all_w, rclk_w, phy_ctl_ready_w, ddr_clk_w, aux_out_, if_q0 to if_q9, _phy_ctl_wd, aux_in_, rst_out_w, freq_refclk_split, mem_refclk_split, mem_refclk_div4_split, sync_pulse_split, phy_clk_split0/1/2, phy_ctl_clk_split0/1/2, phy_ctl_wd_split0/1/2, phy_ctl_wr_split0/1/2, phy_data_offset_1_split1, phy_data_offset_2_split2, phy_dout_split0/1/2, phy_cmd_wr_en_split0/1/2, phy_data_wr_en_split0/1/2, phy_rd_en_split0/1/2, phy_ctl_mstr_empty, phy_ctl_empty, _phy_ctl_a_full_f, _phy_ctl_a_empty_f, _phy_ctl_full_f, _phy_ctl_empty_f, _phy_ctl_a_full_p, _phy_ctl_full_p, of_ctl_a_full_v, of_ctl_full_v, of_data_a_full_v, of_data_full_v, pre_data_a_full_v, if_empty_v, byte_rd_en_v, byte_rd_en_oth_banks, if_empty_or_v, if_empty_and_v, if_a_empty_v, rst_auxout, rst_auxout_r, rst_auxout_rr, mcGo_r.\n\nExplanation: These internal signals serve various purposes within the module:\n- Calibration-related signals (calib_zero_inputs_int, calib_sel_byte0/1/2) are used for configuring and controlling the calibration process.\n- Overflow and counter signals (po_coarse_overflow_w, pi_fine_overflow_w, etc.) are used for tracking phaser input/output operations.\n- DQS-related signals (pi_dqs_found_w, pi_dqs_out_of_range_w, etc.) monitor the status of DQS detection and locking.\n- Clock and reset signals (rclk_w, rst_out_w, etc.) manage timing and reset operations across the module.\n- Split signals (phy_clk_split0/1/2, phy_dout_split0/1/2, etc.) distribute inputs to different banks or lanes.\n- FIFO-related signals (_phy_ctl_a_full_f, of_ctl_full_v, etc.) track the status of various FIFOs in the design.\n- Auxiliary signals (aux_out_, aux_in_) handle additional input/output operations.\n- Synchronization and control signals (mcGo_r, sync_pulse_split) manage overall module operation and synchronization.\n\nThese internal signals work together to implement the complex functionality of the DDR memory controller PHY, handling data transfer, timing, calibration, and control across multiple banks and lanes."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule mig_7series_v4_1_ddr_mc_phy\n #(\n\n      parameter        BYTE_LANES_B0                 = 4'b1111,\n      parameter        BYTE_LANES_B1                 = 4'b0000,\n      parameter        BYTE_LANES_B2                 = 4'b0000,\n      parameter        BYTE_LANES_B3                 = 4'b0000,\n      parameter        BYTE_LANES_B4                 = 4'b0000,\n      parameter        DATA_CTL_B0                   = 4'hc,\n      parameter        DATA_CTL_B1                   = 4'hf,\n      parameter        DATA_CTL_B2                   = 4'hf,\n      parameter        DATA_CTL_B3                   = 4'hf,\n      parameter        DATA_CTL_B4                   = 4'hf,\n      parameter        RCLK_SELECT_BANK              = 0,\n      parameter        RCLK_SELECT_LANE              = \"B\",\n      parameter        RCLK_SELECT_EDGE              = 4'b1111,\n      parameter        GENERATE_DDR_CK_MAP           = \"0B\",\n      parameter        BYTELANES_DDR_CK              = 72'h00_0000_0000_0000_0002,\n      parameter        USE_PRE_POST_FIFO             = \"TRUE\",\n      parameter        SYNTHESIS                     = \"FALSE\",\n      parameter        PO_CTL_COARSE_BYPASS          = \"FALSE\",\n      parameter        PI_SEL_CLK_OFFSET             = 6,\n\n      parameter        PHYCTL_CMD_FIFO               = \"FALSE\",\n      parameter        PHY_CLK_RATIO                 = 4,          \n\n\n      parameter        PHY_FOUR_WINDOW_CLOCKS        = 63,\n      parameter        PHY_EVENTS_DELAY              = 18,\n      parameter        PHY_COUNT_EN                  = \"TRUE\",\n      parameter        PHY_SYNC_MODE                 = \"TRUE\",\n      parameter        PHY_DISABLE_SEQ_MATCH         = \"FALSE\",\n      parameter        MASTER_PHY_CTL                = 0,\n\n      parameter        PHY_0_BITLANES                = 48'hdffd_fffe_dfff,\n      parameter        PHY_0_BITLANES_OUTONLY        = 48'h0000_0000_0000,\n      parameter        PHY_0_LANE_REMAP              = 16'h3210,\n      parameter        PHY_0_GENERATE_IDELAYCTRL     = \"FALSE\",\n      parameter        PHY_0_IODELAY_GRP             = \"IODELAY_MIG\",\n      parameter        FPGA_SPEED_GRADE              = 1,\n      parameter        BANK_TYPE                     = \"HP_IO\", \n      parameter        NUM_DDR_CK                    = 1,\n      parameter        PHY_0_DATA_CTL                = DATA_CTL_B0,\n      parameter        PHY_0_CMD_OFFSET              = 0,\n      parameter        PHY_0_RD_CMD_OFFSET_0         = 0,\n      parameter        PHY_0_RD_CMD_OFFSET_1         = 0,\n      parameter        PHY_0_RD_CMD_OFFSET_2         = 0,\n      parameter        PHY_0_RD_CMD_OFFSET_3         = 0,\n      parameter        PHY_0_RD_DURATION_0           = 0,\n      parameter        PHY_0_RD_DURATION_1           = 0,\n      parameter        PHY_0_RD_DURATION_2           = 0,\n      parameter        PHY_0_RD_DURATION_3           = 0,\n      parameter        PHY_0_WR_CMD_OFFSET_0         = 0,\n      parameter        PHY_0_WR_CMD_OFFSET_1         = 0,\n      parameter        PHY_0_WR_CMD_OFFSET_2         = 0,\n      parameter        PHY_0_WR_CMD_OFFSET_3         = 0,\n      parameter        PHY_0_WR_DURATION_0           = 0,\n      parameter        PHY_0_WR_DURATION_1           = 0,\n      parameter        PHY_0_WR_DURATION_2           = 0,\n      parameter        PHY_0_WR_DURATION_3           = 0,\n      parameter        PHY_0_AO_WRLVL_EN             = 0,\n      parameter        PHY_0_AO_TOGGLE               = 4'b0101, \n      parameter        PHY_0_OF_ALMOST_FULL_VALUE    = 1,\n      parameter        PHY_0_IF_ALMOST_EMPTY_VALUE   = 1,\n\n      parameter        PHY_0_A_PI_FREQ_REF_DIV       = \"NONE\",\n      parameter        PHY_0_A_PI_CLKOUT_DIV         = 2,\n      parameter        PHY_0_A_PO_CLKOUT_DIV         = 2,\n      parameter        PHY_0_A_BURST_MODE            = \"TRUE\",\n      parameter        PHY_0_A_PI_OUTPUT_CLK_SRC     = \"DELAYED_REF\",\n      parameter        PHY_0_A_PO_OUTPUT_CLK_SRC     = \"DELAYED_REF\",\n      parameter        PHY_0_A_PO_OCLK_DELAY         = 25,\n      parameter        PHY_0_B_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_0_C_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_0_D_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_0_A_PO_OCLKDELAY_INV      = \"FALSE\",\n      parameter        PHY_0_A_OF_ARRAY_MODE         = \"ARRAY_MODE_8_X_4\",\n      parameter        PHY_0_B_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_C_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_D_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_A_IF_ARRAY_MODE         = \"ARRAY_MODE_8_X_4\",\n      parameter        PHY_0_B_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_C_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_D_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_A_OSERDES_DATA_RATE     = \"UNDECLARED\",\n      parameter        PHY_0_A_OSERDES_DATA_WIDTH    = \"UNDECLARED\",\n      parameter        PHY_0_B_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_0_B_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_0_C_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_0_C_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_0_D_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_0_D_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_0_A_IDELAYE2_IDELAY_TYPE  = \"VARIABLE\",\n      parameter        PHY_0_A_IDELAYE2_IDELAY_VALUE = 00,\n      parameter        PHY_0_B_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_0_B_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_0_C_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_0_C_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_0_D_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_0_D_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n\n\n      parameter        PHY_1_BITLANES                = PHY_0_BITLANES,\n      parameter        PHY_1_BITLANES_OUTONLY        = 48'h0000_0000_0000,\n      parameter        PHY_1_LANE_REMAP              = 16'h3210,\n      parameter        PHY_1_GENERATE_IDELAYCTRL     =  \"FALSE\",\n      parameter        PHY_1_IODELAY_GRP             = PHY_0_IODELAY_GRP,\n      parameter        PHY_1_DATA_CTL                = DATA_CTL_B1,\n      parameter        PHY_1_CMD_OFFSET              = PHY_0_CMD_OFFSET,\n      parameter        PHY_1_RD_CMD_OFFSET_0         = PHY_0_RD_CMD_OFFSET_0,\n      parameter        PHY_1_RD_CMD_OFFSET_1         = PHY_0_RD_CMD_OFFSET_1,\n      parameter        PHY_1_RD_CMD_OFFSET_2         = PHY_0_RD_CMD_OFFSET_2,\n      parameter        PHY_1_RD_CMD_OFFSET_3         = PHY_0_RD_CMD_OFFSET_3,\n      parameter        PHY_1_RD_DURATION_0           = PHY_0_RD_DURATION_0,\n      parameter        PHY_1_RD_DURATION_1           = PHY_0_RD_DURATION_1,\n      parameter        PHY_1_RD_DURATION_2           = PHY_0_RD_DURATION_2,\n      parameter        PHY_1_RD_DURATION_3           = PHY_0_RD_DURATION_3,\n      parameter        PHY_1_WR_CMD_OFFSET_0         = PHY_0_WR_CMD_OFFSET_0,\n      parameter        PHY_1_WR_CMD_OFFSET_1         = PHY_0_WR_CMD_OFFSET_1,\n      parameter        PHY_1_WR_CMD_OFFSET_2         = PHY_0_WR_CMD_OFFSET_2,\n      parameter        PHY_1_WR_CMD_OFFSET_3         = PHY_0_WR_CMD_OFFSET_3,\n      parameter        PHY_1_WR_DURATION_0           = PHY_0_WR_DURATION_0,\n      parameter        PHY_1_WR_DURATION_1           = PHY_0_WR_DURATION_1,\n      parameter        PHY_1_WR_DURATION_2           = PHY_0_WR_DURATION_2,\n      parameter        PHY_1_WR_DURATION_3           = PHY_0_WR_DURATION_3,\n      parameter        PHY_1_AO_WRLVL_EN             = PHY_0_AO_WRLVL_EN,\n      parameter        PHY_1_AO_TOGGLE               = PHY_0_AO_TOGGLE, \n      parameter        PHY_1_OF_ALMOST_FULL_VALUE    = 1,\n      parameter        PHY_1_IF_ALMOST_EMPTY_VALUE   = 1,\n\n      parameter        PHY_1_A_PI_FREQ_REF_DIV       = PHY_0_A_PI_FREQ_REF_DIV,\n      parameter        PHY_1_A_PI_CLKOUT_DIV         = PHY_0_A_PI_CLKOUT_DIV,\n      parameter        PHY_1_A_PO_CLKOUT_DIV         = PHY_0_A_PO_CLKOUT_DIV,\n      parameter        PHY_1_A_BURST_MODE            = PHY_0_A_BURST_MODE,\n      parameter        PHY_1_A_PI_OUTPUT_CLK_SRC     = PHY_0_A_PI_OUTPUT_CLK_SRC,\n      parameter        PHY_1_A_PO_OUTPUT_CLK_SRC     = PHY_0_A_PO_OUTPUT_CLK_SRC ,\n      parameter        PHY_1_A_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_1_B_PO_OCLK_DELAY         = PHY_1_A_PO_OCLK_DELAY,\n      parameter        PHY_1_C_PO_OCLK_DELAY         = PHY_1_A_PO_OCLK_DELAY,\n      parameter        PHY_1_D_PO_OCLK_DELAY         = PHY_1_A_PO_OCLK_DELAY,\n      parameter        PHY_1_A_PO_OCLKDELAY_INV      = PHY_0_A_PO_OCLKDELAY_INV,\n      parameter        PHY_1_A_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_1_A_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_1_B_IDELAYE2_IDELAY_TYPE  = PHY_1_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_1_B_IDELAYE2_IDELAY_VALUE = PHY_1_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_1_C_IDELAYE2_IDELAY_TYPE  = PHY_1_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_1_C_IDELAYE2_IDELAY_VALUE = PHY_1_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_1_D_IDELAYE2_IDELAY_TYPE  = PHY_1_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_1_D_IDELAYE2_IDELAY_VALUE = PHY_1_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_1_A_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_B_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_C_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_D_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_A_IF_ARRAY_MODE         = PHY_0_A_IF_ARRAY_MODE,\n      parameter        PHY_1_B_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_C_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_D_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_A_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_1_A_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_1_B_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_1_B_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_1_C_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_1_C_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_1_D_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_1_D_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n\n\n      parameter        PHY_2_BITLANES                = PHY_0_BITLANES,\n      parameter        PHY_2_BITLANES_OUTONLY        = 48'h0000_0000_0000,\n      parameter        PHY_2_LANE_REMAP              = 16'h3210,\n      parameter        PHY_2_GENERATE_IDELAYCTRL     =  \"FALSE\",\n      parameter        PHY_2_IODELAY_GRP             = PHY_0_IODELAY_GRP,\n      parameter        PHY_2_DATA_CTL                = DATA_CTL_B2,\n      parameter        PHY_2_CMD_OFFSET              = PHY_0_CMD_OFFSET,\n      parameter        PHY_2_RD_CMD_OFFSET_0         = PHY_0_RD_CMD_OFFSET_0,\n      parameter        PHY_2_RD_CMD_OFFSET_1         = PHY_0_RD_CMD_OFFSET_1,\n      parameter        PHY_2_RD_CMD_OFFSET_2         = PHY_0_RD_CMD_OFFSET_2,\n      parameter        PHY_2_RD_CMD_OFFSET_3         = PHY_0_RD_CMD_OFFSET_3,\n      parameter        PHY_2_RD_DURATION_0           = PHY_0_RD_DURATION_0,\n      parameter        PHY_2_RD_DURATION_1           = PHY_0_RD_DURATION_1,\n      parameter        PHY_2_RD_DURATION_2           = PHY_0_RD_DURATION_2,\n      parameter        PHY_2_RD_DURATION_3           = PHY_0_RD_DURATION_3,\n      parameter        PHY_2_WR_CMD_OFFSET_0         = PHY_0_WR_CMD_OFFSET_0,\n      parameter        PHY_2_WR_CMD_OFFSET_1         = PHY_0_WR_CMD_OFFSET_1,\n      parameter        PHY_2_WR_CMD_OFFSET_2         = PHY_0_WR_CMD_OFFSET_2,\n      parameter        PHY_2_WR_CMD_OFFSET_3         = PHY_0_WR_CMD_OFFSET_3,\n      parameter        PHY_2_WR_DURATION_0           = PHY_0_WR_DURATION_0,\n      parameter        PHY_2_WR_DURATION_1           = PHY_0_WR_DURATION_1,\n      parameter        PHY_2_WR_DURATION_2           = PHY_0_WR_DURATION_2,\n      parameter        PHY_2_WR_DURATION_3           = PHY_0_WR_DURATION_3,\n      parameter        PHY_2_AO_WRLVL_EN             = PHY_0_AO_WRLVL_EN,\n      parameter        PHY_2_AO_TOGGLE               = PHY_0_AO_TOGGLE, \n      parameter        PHY_2_OF_ALMOST_FULL_VALUE    = 1,\n      parameter        PHY_2_IF_ALMOST_EMPTY_VALUE   = 1,\n\n      parameter        PHY_2_A_PI_FREQ_REF_DIV       = PHY_0_A_PI_FREQ_REF_DIV,\n      parameter        PHY_2_A_PI_CLKOUT_DIV         = PHY_0_A_PI_CLKOUT_DIV ,\n      parameter        PHY_2_A_PO_CLKOUT_DIV         = PHY_0_A_PO_CLKOUT_DIV,\n      parameter        PHY_2_A_BURST_MODE            = PHY_0_A_BURST_MODE ,\n      parameter        PHY_2_A_PI_OUTPUT_CLK_SRC     = PHY_0_A_PI_OUTPUT_CLK_SRC,\n      parameter        PHY_2_A_PO_OUTPUT_CLK_SRC     = PHY_0_A_PO_OUTPUT_CLK_SRC,\n      parameter        PHY_2_A_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_B_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_C_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_D_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_A_IF_ARRAY_MODE         = PHY_0_A_IF_ARRAY_MODE,\n      parameter        PHY_2_B_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_C_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_D_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_A_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_2_B_PO_OCLK_DELAY         = PHY_2_A_PO_OCLK_DELAY,\n      parameter        PHY_2_C_PO_OCLK_DELAY         = PHY_2_A_PO_OCLK_DELAY,\n      parameter        PHY_2_D_PO_OCLK_DELAY         = PHY_2_A_PO_OCLK_DELAY,\n      parameter        PHY_2_A_PO_OCLKDELAY_INV      = PHY_0_A_PO_OCLKDELAY_INV,\n      parameter        PHY_2_A_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_2_A_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_2_B_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_2_B_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_2_C_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_2_C_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_2_D_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_2_D_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_2_A_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_2_A_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_2_B_IDELAYE2_IDELAY_TYPE  = PHY_2_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_2_B_IDELAYE2_IDELAY_VALUE = PHY_2_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_2_C_IDELAYE2_IDELAY_TYPE  = PHY_2_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_2_C_IDELAYE2_IDELAY_VALUE = PHY_2_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_2_D_IDELAYE2_IDELAY_TYPE  = PHY_2_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_2_D_IDELAYE2_IDELAY_VALUE = PHY_2_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_0_IS_LAST_BANK   = ((BYTE_LANES_B1 != 0) || (BYTE_LANES_B2 != 0) || (BYTE_LANES_B3 != 0) || (BYTE_LANES_B4 != 0)) ?  \"FALSE\" : \"TRUE\",\n      parameter        PHY_1_IS_LAST_BANK   = ((BYTE_LANES_B1 != 0) && ((BYTE_LANES_B2 != 0) || (BYTE_LANES_B3 != 0) || (BYTE_LANES_B4 != 0))) ?  \"FALSE\" : ((PHY_0_IS_LAST_BANK) ? \"FALSE\" : \"TRUE\"),\n      parameter        PHY_2_IS_LAST_BANK   = (BYTE_LANES_B2 != 0) && ((BYTE_LANES_B3 != 0) || (BYTE_LANES_B4 != 0)) ?  \"FALSE\" : ((PHY_0_IS_LAST_BANK || PHY_1_IS_LAST_BANK) ? \"FALSE\" : \"TRUE\"),\n      parameter        TCK = 2500,\n\n\n      parameter        N_LANES = (0+BYTE_LANES_B0[0]) + (0+BYTE_LANES_B0[1]) + (0+BYTE_LANES_B0[2]) + (0+BYTE_LANES_B0[3])\n      +  (0+BYTE_LANES_B1[0]) + (0+BYTE_LANES_B1[1]) + (0+BYTE_LANES_B1[2]) + (0+BYTE_LANES_B1[3])  + (0+BYTE_LANES_B2[0]) + (0+BYTE_LANES_B2[1]) + (0+BYTE_LANES_B2[2]) + (0+BYTE_LANES_B2[3])\n      ,  \n      parameter HIGHEST_BANK = (BYTE_LANES_B4 != 0 ? 5 : (BYTE_LANES_B3 != 0 ? 4 : (BYTE_LANES_B2 != 0 ? 3 :  (BYTE_LANES_B1 != 0  ? 2 : 1)))),\n      parameter HIGHEST_LANE_B0  =   ((PHY_0_IS_LAST_BANK == \"FALSE\") ? 4 : BYTE_LANES_B0[3] ? 4 : BYTE_LANES_B0[2] ? 3 : BYTE_LANES_B0[1] ? 2 : BYTE_LANES_B0[0] ? 1 : 0)  ,\n      parameter HIGHEST_LANE_B1  = (HIGHEST_BANK > 2) ? 4 : ( BYTE_LANES_B1[3] ? 4 : BYTE_LANES_B1[2] ? 3 : BYTE_LANES_B1[1] ? 2 : BYTE_LANES_B1[0] ? 1 : 0) ,\n      parameter HIGHEST_LANE_B2  = (HIGHEST_BANK > 3) ? 4 : ( BYTE_LANES_B2[3] ? 4 : BYTE_LANES_B2[2] ? 3 : BYTE_LANES_B2[1] ? 2 : BYTE_LANES_B2[0] ? 1 : 0) ,\n      parameter HIGHEST_LANE_B3  = 0,\n      parameter HIGHEST_LANE_B4  = 0,\n\n      parameter HIGHEST_LANE = (HIGHEST_LANE_B4 != 0) ? (HIGHEST_LANE_B4+16) : ((HIGHEST_LANE_B3 != 0) ? (HIGHEST_LANE_B3 + 12) : ((HIGHEST_LANE_B2 != 0) ? (HIGHEST_LANE_B2 + 8)  : ((HIGHEST_LANE_B1 != 0) ? (HIGHEST_LANE_B1 + 4) : HIGHEST_LANE_B0))),\n      parameter LP_DDR_CK_WIDTH = 2,\n      parameter GENERATE_SIGNAL_SPLIT = \"FALSE\"\n      ,parameter CKE_ODT_AUX = \"FALSE\"\n      ,parameter PI_DIV2_INCDEC = \"FALSE\"\n )\n (\n      input            rst,\n      input            ddr_rst_in_n ,\n      input            phy_clk,\n      input            clk_div2,\n      input            freq_refclk,\n      input            mem_refclk,\n      input            mem_refclk_div4,\n      input            pll_lock,\n      input            sync_pulse,\n      input            auxout_clk,\n      input            idelayctrl_refclk,\n      input [HIGHEST_LANE*80-1:0]    phy_dout,\n      input            phy_cmd_wr_en,\n      input            phy_data_wr_en,\n      input            phy_rd_en,\n      input [31:0]     phy_ctl_wd,\n      input [3:0]      aux_in_1,\n      input [3:0]      aux_in_2,\n      input [5:0]      data_offset_1,\n      input [5:0]      data_offset_2,\n      input            phy_ctl_wr,\n      input            if_rst,\n      input            if_empty_def,\n      input            cke_in,\n      input            idelay_ce,\n      input            idelay_ld,\n      input            idelay_inc,\n      input            phyGo,\n      input            input_sink,\n      output           if_a_empty,\n      output           if_empty ,\n      output           if_empty_or,\n      output           if_empty_and,\n      output           of_ctl_a_full,\n      output           of_data_a_full,\n      output           of_ctl_full,\n      output           of_data_full,\n      output           pre_data_a_full,\n      output [HIGHEST_LANE*80-1:0]   phy_din,\n      output           phy_ctl_a_full,\n      output wire [3:0]      phy_ctl_full,\n      output [HIGHEST_LANE*12-1:0] mem_dq_out,\n      output [HIGHEST_LANE*12-1:0] mem_dq_ts,\n      input  [HIGHEST_LANE*10-1:0] mem_dq_in,\n      output [HIGHEST_LANE-1:0]    mem_dqs_out,\n      output [HIGHEST_LANE-1:0]    mem_dqs_ts,\n      input  [HIGHEST_LANE-1:0]    mem_dqs_in,\n\n(* IOB = \"FORCE\" *) output reg [(((HIGHEST_LANE+3)/4)*4)-1:0] aux_out, \n      output           phy_ctl_ready,          \n      output reg       rst_out,                \n      output [(NUM_DDR_CK * LP_DDR_CK_WIDTH)-1:0]  ddr_clk,\n\n      output           mcGo,\n      output           ref_dll_lock,\n\n      input            phy_write_calib,\n      input            phy_read_calib,\n      input  [5:0]     calib_sel,\n      input  [HIGHEST_BANK-1:0]calib_zero_inputs, \n      input  [HIGHEST_BANK-1:0]calib_zero_ctrl,  \n      input  [HIGHEST_LANE-1:0] calib_zero_lanes, \n      input            calib_in_common,\n      input  [2:0]     po_fine_enable,\n      input  [2:0]     po_coarse_enable,\n      input  [2:0]     po_fine_inc,\n      input  [2:0]     po_coarse_inc,\n      input            po_counter_load_en,\n      input  [2:0]     po_sel_fine_oclk_delay,\n      input  [8:0]     po_counter_load_val,\n      input            po_counter_read_en,\n      output reg       po_coarse_overflow,\n      output reg       po_fine_overflow,\n      output reg [8:0] po_counter_read_val,\n\n\n      input [HIGHEST_BANK-1:0] pi_rst_dqs_find,\n      input            pi_fine_enable,\n      input            pi_fine_inc,\n      input            pi_counter_load_en,\n      input            pi_counter_read_en,\n      input  [5:0]     pi_counter_load_val,\n      output reg       pi_fine_overflow,\n      output reg [5:0] pi_counter_read_val,\n\n      output reg       pi_phase_locked,\n      output           pi_phase_locked_all,\n      output reg       pi_dqs_found,\n      output           pi_dqs_found_all,\n      output           pi_dqs_found_any,\n      output [HIGHEST_LANE-1:0] pi_phase_locked_lanes,\n      output [HIGHEST_LANE-1:0] pi_dqs_found_lanes,\n      output reg       pi_dqs_out_of_range,\n      input [29:0]     fine_delay,\n      input            fine_delay_sel\n );\n\n\nwire  [7:0]     calib_zero_inputs_int ;\nwire  [HIGHEST_BANK*4-1:0]     calib_zero_lanes_int ;\n\n\nwire  [2:0]     calib_sel_byte0 ;\nwire  [2:0]     calib_sel_byte1 ;\nwire  [2:0]     calib_sel_byte2 ;\n\nwire  [4:0]     po_coarse_overflow_w;\nwire  [4:0]     po_fine_overflow_w;\nwire  [8:0]     po_counter_read_val_w[4:0];\nwire  [4:0]     pi_fine_overflow_w;\nwire  [5:0]     pi_counter_read_val_w[4:0];\nwire  [4:0]     pi_dqs_found_w;\nwire  [4:0]     pi_dqs_found_all_w;\nwire  [4:0]     pi_dqs_found_any_w;\nwire  [4:0]     pi_dqs_out_of_range_w;\nwire  [4:0]     pi_phase_locked_w;\nwire  [4:0]     pi_phase_locked_all_w;\nwire  [4:0]     rclk_w;\nwire  [HIGHEST_BANK-1:0]     phy_ctl_ready_w;\nwire  [(LP_DDR_CK_WIDTH*24)-1:0]     ddr_clk_w [HIGHEST_BANK-1:0];\nwire  [(((HIGHEST_LANE+3)/4)*4)-1:0] aux_out_;\n\n\nwire [3:0]    if_q0;\nwire [3:0]    if_q1;\nwire [3:0]    if_q2;\nwire [3:0]    if_q3;\nwire [3:0]    if_q4;\nwire [7:0]    if_q5;\nwire [7:0]    if_q6;\nwire [3:0]    if_q7;\nwire [3:0]    if_q8;\nwire [3:0]    if_q9;\n\nwire [31:0]   _phy_ctl_wd;\nwire [3:0]    aux_in_[4:1];\nwire [3:0]    rst_out_w;\n\nwire           freq_refclk_split;\nwire           mem_refclk_split;\nwire           mem_refclk_div4_split;\nwire           sync_pulse_split;\nwire           phy_clk_split0;\nwire           phy_ctl_clk_split0;\nwire  [31:0]   phy_ctl_wd_split0;\nwire           phy_ctl_wr_split0;\nwire           phy_ctl_clk_split1;\nwire           phy_clk_split1;\nwire  [31:0]   phy_ctl_wd_split1;\nwire           phy_ctl_wr_split1;\nwire  [5:0]    phy_data_offset_1_split1;\nwire           phy_ctl_clk_split2;\nwire           phy_clk_split2;\nwire  [31:0]   phy_ctl_wd_split2;\nwire           phy_ctl_wr_split2;\nwire  [5:0]    phy_data_offset_2_split2;\nwire  [HIGHEST_LANE*80-1:0] phy_dout_split0;\nwire           phy_cmd_wr_en_split0;\nwire           phy_data_wr_en_split0;\nwire           phy_rd_en_split0;\nwire  [HIGHEST_LANE*80-1:0] phy_dout_split1;\nwire           phy_cmd_wr_en_split1;\nwire           phy_data_wr_en_split1;\nwire           phy_rd_en_split1;\nwire  [HIGHEST_LANE*80-1:0] phy_dout_split2;\nwire           phy_cmd_wr_en_split2;\nwire           phy_data_wr_en_split2;\nwire           phy_rd_en_split2;\n\nwire          phy_ctl_mstr_empty;\nwire  [HIGHEST_BANK-1:0] phy_ctl_empty;\n\nwire          _phy_ctl_a_full_f;\nwire          _phy_ctl_a_empty_f;\nwire          _phy_ctl_full_f;\nwire          _phy_ctl_empty_f;\nwire  [HIGHEST_BANK-1:0] _phy_ctl_a_full_p;\nwire  [HIGHEST_BANK-1:0] _phy_ctl_full_p;\nwire  [HIGHEST_BANK-1:0]  of_ctl_a_full_v;\nwire  [HIGHEST_BANK-1:0]  of_ctl_full_v;\nwire  [HIGHEST_BANK-1:0]  of_data_a_full_v;\nwire  [HIGHEST_BANK-1:0]  of_data_full_v;\nwire  [HIGHEST_BANK-1:0]  pre_data_a_full_v;\nwire  [HIGHEST_BANK-1:0]  if_empty_v;\nwire  [HIGHEST_BANK-1:0]  byte_rd_en_v;\nwire  [HIGHEST_BANK*2-1:0]  byte_rd_en_oth_banks;\nwire  [HIGHEST_BANK-1:0]  if_empty_or_v;\nwire  [HIGHEST_BANK-1:0]  if_empty_and_v;\nwire  [HIGHEST_BANK-1:0]  if_a_empty_v;\n\nlocalparam IF_ARRAY_MODE         = \"ARRAY_MODE_4_X_4\";\nlocalparam IF_SYNCHRONOUS_MODE   = \"FALSE\";\nlocalparam IF_SLOW_WR_CLK        = \"FALSE\";\nlocalparam IF_SLOW_RD_CLK        = \"FALSE\";\n\nlocalparam PHY_MULTI_REGION      = (HIGHEST_BANK > 1) ? \"TRUE\" : \"FALSE\";\nlocalparam RCLK_NEG_EDGE         = 3'b000;\nlocalparam RCLK_POS_EDGE         = 3'b111;\n\nlocalparam LP_PHY_0_BYTELANES_DDR_CK     =  BYTELANES_DDR_CK & 24'hFF_FFFF;\nlocalparam LP_PHY_1_BYTELANES_DDR_CK     = (BYTELANES_DDR_CK >> 24) & 24'hFF_FFFF;\nlocalparam LP_PHY_2_BYTELANES_DDR_CK     = (BYTELANES_DDR_CK >> 48) & 24'hFF_FFFF;\n\n\nlocalparam PC_DATA_OFFSET_RANGE_HI    = 22;\nlocalparam PC_DATA_OFFSET_RANGE_LO    = 17;\n\n\n\n\n\n\n\n\n\n\nlocalparam  RCLK_PI_OUTPUT_CLK_SRC = \"DELAYED_MEM_REF\";\n\n\nlocalparam  DDR_TCK = TCK;\n\nlocalparam  real FREQ_REF_PERIOD = DDR_TCK / (PHY_0_A_PI_FREQ_REF_DIV == \"DIV2\" ? 2 : 1);\nlocalparam  real L_FREQ_REF_PERIOD_NS = FREQ_REF_PERIOD /1000.0;\nlocalparam  PO_S3_TAPS      = 64 ;  \nlocalparam  PI_S2_TAPS      = 128 ; \nlocalparam  PO_S2_TAPS      = 128 ; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocalparam  real PI_STG1_INTRINSIC_DELAY  =  (RCLK_PI_OUTPUT_CLK_SRC == \"DELAYED_MEM_REF\") ? 0.0 :\n                     ((DDR_TCK < 1005) ? 0.667 :\n                      (DDR_TCK < 1160) ? 0.752 :\n                      (DDR_TCK < 1375) ? 0.868 :\n                      (DDR_TCK < 1685) ? 1.021 :\n                      (DDR_TCK < 2185) ? 1.263 :\n                      (DDR_TCK < 2900) ? 1.657 :\n                      (DDR_TCK < 3100) ? 1.771 : 1.939)*1000;\n\n\n\n\n\n\n\n\n\n\n\n\nlocalparam  real PI_STG2_INTRINSIC_DELAY  = (0.4218*FREQ_REF_PERIOD + 200) + 16.75;  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocalparam  real  PO_STG1_INTRINSIC_DELAY  = 0;\nlocalparam  real  PO_STG2_FINE_INTRINSIC_DELAY    = 0.4218*FREQ_REF_PERIOD + 200 + 42; \nlocalparam  real  PO_STG2_COARSE_INTRINSIC_DELAY  = 0.2256*FREQ_REF_PERIOD + 200 + 29; \nlocalparam  real  PO_STG2_INTRINSIC_DELAY  = PO_STG2_FINE_INTRINSIC_DELAY +\n                                            (PO_CTL_COARSE_BYPASS  == \"TRUE\" ? 30 : PO_STG2_COARSE_INTRINSIC_DELAY);\n\n\n\n\n\n\nlocalparam  real    PO_S2_TAPS_SIZE        = 1.0*FREQ_REF_PERIOD / PO_S2_TAPS ; \nlocalparam  real    PO_CIRC_BUF_META_ZONE  = 200.0;\nlocalparam          PO_CIRC_BUF_EARLY      = (PO_STG2_INTRINSIC_DELAY < DDR_TCK) ? 1'b1 : 1'b0;\nlocalparam  real    PO_CIRC_BUF_OFFSET     = (PO_STG2_INTRINSIC_DELAY < DDR_TCK) ? DDR_TCK - PO_STG2_INTRINSIC_DELAY : PO_STG2_INTRINSIC_DELAY - DDR_TCK;\n\n\n\n\nlocalparam  integer PO_CIRC_BUF_DELAY   = 60;\n\n\n\n\n\nlocalparam  real    PI_S2_TAPS_SIZE     = 1.0*FREQ_REF_PERIOD / PI_S2_TAPS ; \nlocalparam  real    PI_MAX_STG2_DELAY   = (PI_S2_TAPS/2 - 1) * PI_S2_TAPS_SIZE;\nlocalparam  real    PI_INTRINSIC_DELAY  = PI_STG1_INTRINSIC_DELAY + PI_STG2_INTRINSIC_DELAY;\nlocalparam  real    PO_INTRINSIC_DELAY  = PO_STG1_INTRINSIC_DELAY + PO_STG2_INTRINSIC_DELAY;\nlocalparam  real    PO_DELAY            = PO_INTRINSIC_DELAY + (PO_CIRC_BUF_DELAY*PO_S2_TAPS_SIZE);\nlocalparam          RCLK_BUFIO_DELAY    = 1200; \n\n\n\n\nlocalparam integer  RCLK_DELAY_INT= (PI_INTRINSIC_DELAY + RCLK_BUFIO_DELAY);\nlocalparam integer  PO_DELAY_INT  = PO_DELAY;\nlocalparam PI_OFFSET   = (PO_DELAY_INT % DDR_TCK) - (RCLK_DELAY_INT % DDR_TCK);\n\n\n\n\nlocalparam  real    PI_STG2_DELAY_CAND = PI_OFFSET >= 0\n                                          ? PI_OFFSET\n                                          : ((-PI_OFFSET) <  DDR_TCK/2) ?\n                                            (DDR_TCK/2 - (- PI_OFFSET)) :\n                                            (DDR_TCK   - (- PI_OFFSET)) ;\n\nlocalparam  real    PI_STG2_DELAY       =\n                                          (PI_STG2_DELAY_CAND > PI_MAX_STG2_DELAY ?\n                                          PI_MAX_STG2_DELAY : PI_STG2_DELAY_CAND);\nlocalparam  integer DEFAULT_RCLK_DELAY  = PI_STG2_DELAY / PI_S2_TAPS_SIZE;\n\nlocalparam          LP_RCLK_SELECT_EDGE    = (RCLK_SELECT_EDGE != 4'b1111 ) ? RCLK_SELECT_EDGE : (PI_OFFSET >= 0 ? RCLK_POS_EDGE : (PI_OFFSET <= TCK/2 ?  RCLK_NEG_EDGE : RCLK_POS_EDGE));\n\nlocalparam  integer L_PHY_0_PO_FINE_DELAY = PO_CIRC_BUF_DELAY ;\nlocalparam  integer L_PHY_1_PO_FINE_DELAY = PO_CIRC_BUF_DELAY ;\nlocalparam  integer L_PHY_2_PO_FINE_DELAY = PO_CIRC_BUF_DELAY ;\n\nlocalparam  L_PHY_0_A_PI_FINE_DELAY = (RCLK_SELECT_BANK == 0 && ! DATA_CTL_B0[0]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_0_B_PI_FINE_DELAY = (RCLK_SELECT_BANK == 0 && ! DATA_CTL_B0[1]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_0_C_PI_FINE_DELAY = (RCLK_SELECT_BANK == 0 && ! DATA_CTL_B0[2]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_0_D_PI_FINE_DELAY = (RCLK_SELECT_BANK == 0 && ! DATA_CTL_B0[3]) ? DEFAULT_RCLK_DELAY  : 33 ;\n\nlocalparam  L_PHY_1_A_PI_FINE_DELAY = (RCLK_SELECT_BANK == 1 && ! DATA_CTL_B1[0]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_1_B_PI_FINE_DELAY = (RCLK_SELECT_BANK == 1 && ! DATA_CTL_B1[1]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_1_C_PI_FINE_DELAY = (RCLK_SELECT_BANK == 1 && ! DATA_CTL_B1[2]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_1_D_PI_FINE_DELAY = (RCLK_SELECT_BANK == 1 && ! DATA_CTL_B1[3]) ? DEFAULT_RCLK_DELAY  : 33 ;\n\nlocalparam  L_PHY_2_A_PI_FINE_DELAY = (RCLK_SELECT_BANK == 2 && ! DATA_CTL_B2[0]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_2_B_PI_FINE_DELAY = (RCLK_SELECT_BANK == 2 && ! DATA_CTL_B2[1]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_2_C_PI_FINE_DELAY = (RCLK_SELECT_BANK == 2 && ! DATA_CTL_B2[2]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_2_D_PI_FINE_DELAY = (RCLK_SELECT_BANK == 2 && ! DATA_CTL_B2[3]) ? DEFAULT_RCLK_DELAY  : 33 ;\n\n\nlocalparam  L_PHY_0_A_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 0) ? (RCLK_SELECT_LANE == \"A\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_0_B_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 0) ? (RCLK_SELECT_LANE == \"B\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_0_C_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 0) ? (RCLK_SELECT_LANE == \"C\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_0_D_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 0) ? (RCLK_SELECT_LANE == \"D\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC;\n\nlocalparam  L_PHY_1_A_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 1) ? (RCLK_SELECT_LANE == \"A\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_1_B_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 1) ? (RCLK_SELECT_LANE == \"B\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_1_C_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 1) ? (RCLK_SELECT_LANE == \"C\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_1_D_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 1) ? (RCLK_SELECT_LANE == \"D\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC;\n\nlocalparam  L_PHY_2_A_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 2) ? (RCLK_SELECT_LANE == \"A\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_2_B_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 2) ? (RCLK_SELECT_LANE == \"B\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_2_C_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 2) ? (RCLK_SELECT_LANE == \"C\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_2_D_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 2) ? (RCLK_SELECT_LANE == \"D\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC;\n\nwire _phy_clk;\n\nwire [2:0] mcGo_w;\nwire [HIGHEST_BANK-1:0] ref_dll_lock_w;\nreg  [15:0] mcGo_r;\n\n\nassign ref_dll_lock = & ref_dll_lock_w;\n\ninitial begin\n  if ( SYNTHESIS == \"FALSE\" ) begin\n  $display(\"%m : BYTE_LANES_B0 = %x BYTE_LANES_B1 = %x DATA_CTL_B0 = %x DATA_CTL_B1 = %x\", BYTE_LANES_B0, BYTE_LANES_B1, DATA_CTL_B0, DATA_CTL_B1);\n  $display(\"%m : HIGHEST_LANE = %d HIGHEST_LANE_B0 = %d HIGHEST_LANE_B1 = %d\",  HIGHEST_LANE, HIGHEST_LANE_B0, HIGHEST_LANE_B1);\n  $display(\"%m : HIGHEST_BANK = %d\", HIGHEST_BANK);\n\n  $display(\"%m : FREQ_REF_PERIOD         = %0.2f \", FREQ_REF_PERIOD);\n  $display(\"%m : DDR_TCK                 = %0d \", DDR_TCK);\n  $display(\"%m : PO_S2_TAPS_SIZE         = %0.2f \", PO_S2_TAPS_SIZE);\n  $display(\"%m : PO_CIRC_BUF_EARLY       = %0d \", PO_CIRC_BUF_EARLY);\n  $display(\"%m : PO_CIRC_BUF_OFFSET      = %0.2f \", PO_CIRC_BUF_OFFSET);\n  $display(\"%m : PO_CIRC_BUF_META_ZONE   = %0.2f \", PO_CIRC_BUF_META_ZONE);\n  $display(\"%m : PO_STG2_FINE_INTR_DLY   = %0.2f \", PO_STG2_FINE_INTRINSIC_DELAY);\n  $display(\"%m : PO_STG2_COARSE_INTR_DLY = %0.2f \", PO_STG2_COARSE_INTRINSIC_DELAY);\n  $display(\"%m : PO_STG2_INTRINSIC_DELAY = %0.2f \", PO_STG2_INTRINSIC_DELAY);\n  $display(\"%m : PO_CIRC_BUF_DELAY       = %0d \", PO_CIRC_BUF_DELAY);\n  $display(\"%m : PO_INTRINSIC_DELAY      = %0.2f \", PO_INTRINSIC_DELAY);\n  $display(\"%m : PO_DELAY                = %0.2f \", PO_DELAY);\n  $display(\"%m : PO_OCLK_DELAY           = %0d \", PHY_0_A_PO_OCLK_DELAY);\n  $display(\"%m : L_PHY_0_PO_FINE_DELAY   = %0d \", L_PHY_0_PO_FINE_DELAY);\n\n  $display(\"%m : PI_STG1_INTRINSIC_DELAY = %0.2f \", PI_STG1_INTRINSIC_DELAY);\n  $display(\"%m : PI_STG2_INTRINSIC_DELAY = %0.2f \", PI_STG2_INTRINSIC_DELAY);\n  $display(\"%m : PI_INTRINSIC_DELAY      = %0.2f \", PI_INTRINSIC_DELAY);\n  $display(\"%m : PI_MAX_STG2_DELAY       = %0.2f \", PI_MAX_STG2_DELAY);\n  $display(\"%m : PI_OFFSET               = %0.2f \", PI_OFFSET);\n  if ( PI_OFFSET < 0) $display(\"%m : a negative PI_OFFSET means that rclk path is longer than oclk path so rclk will be delayed to next oclk edge and the negedge of rclk may be used.\");\n  $display(\"%m : PI_STG2_DELAY           = %0.2f \", PI_STG2_DELAY);\n  $display(\"%m :PI_STG2_DELAY_CAND       = %0.2f \",PI_STG2_DELAY_CAND);\n  $display(\"%m : DEFAULT_RCLK_DELAY      = %0d \", DEFAULT_RCLK_DELAY);\n  $display(\"%m : RCLK_SELECT_EDGE        = %0b \", LP_RCLK_SELECT_EDGE);\n  end \n  if ( PI_STG2_DELAY_CAND > PI_MAX_STG2_DELAY) $display(\"WARNING: %m: The required delay though the phaser_in to internally match the aux_out clock  to ddr clock exceeds the maximum allowable delay. The clock edge  will occur at the output registers of aux_out %0.2f ps before the ddr clock  edge. If aux_out is used for memory inputs, this may violate setup or hold time.\", PI_STG2_DELAY_CAND - PI_MAX_STG2_DELAY);\nend\n\n  assign sync_pulse_split       = sync_pulse;\n  assign mem_refclk_split       = mem_refclk;\n  assign freq_refclk_split      = freq_refclk;\n  assign mem_refclk_div4_split  = mem_refclk_div4;\n  assign phy_ctl_clk_split0     = _phy_clk;\n  assign phy_ctl_wd_split0      = phy_ctl_wd;\n  assign phy_ctl_wr_split0      = phy_ctl_wr;\n  assign phy_clk_split0         = phy_clk;\n  assign phy_cmd_wr_en_split0   = phy_cmd_wr_en;\n  assign phy_data_wr_en_split0  = phy_data_wr_en;\n  assign phy_rd_en_split0       = phy_rd_en;\n  assign phy_dout_split0        = phy_dout;\n  assign phy_ctl_clk_split1     = phy_clk;\n  assign phy_ctl_wd_split1      = phy_ctl_wd;\n  assign phy_data_offset_1_split1   = data_offset_1;\n  assign phy_ctl_wr_split1      = phy_ctl_wr;\n  assign phy_clk_split1         = phy_clk;\n  assign phy_cmd_wr_en_split1   = phy_cmd_wr_en;\n  assign phy_data_wr_en_split1  = phy_data_wr_en;\n  assign phy_rd_en_split1       = phy_rd_en;\n  assign phy_dout_split1        = phy_dout;\n  assign phy_ctl_clk_split2     = phy_clk;\n  assign phy_ctl_wd_split2      = phy_ctl_wd;\n  assign phy_data_offset_2_split2   = data_offset_2;\n  assign phy_ctl_wr_split2      = phy_ctl_wr;\n  assign phy_clk_split2         = phy_clk;\n  assign phy_cmd_wr_en_split2   = phy_cmd_wr_en;\n  assign phy_data_wr_en_split2  = phy_data_wr_en;\n  assign phy_rd_en_split2       = phy_rd_en;\n  assign phy_dout_split2        = phy_dout;\n\n\n\n\n\nwire [3:0] blb0 = BYTE_LANES_B0;\nwire [3:0] blb1 = BYTE_LANES_B1;\nwire [3:0] blb2 = BYTE_LANES_B2;\n\nwire [3:0] dcb0 = DATA_CTL_B0;\nwire [3:0] dcb1 = DATA_CTL_B1;\nwire [3:0] dcb2 = DATA_CTL_B2;\n\nassign pi_dqs_found_all      = & (pi_dqs_found_lanes | ~ {blb2, blb1, blb0} |  ~ {dcb2, dcb1, dcb0});\nassign pi_dqs_found_any      = | (pi_dqs_found_lanes & {blb2, blb1, blb0} & {dcb2, dcb1, dcb0});\nassign pi_phase_locked_all   = & pi_phase_locked_all_w[HIGHEST_BANK-1:0];\nassign calib_zero_inputs_int = {3'bxxx, calib_zero_inputs};\n\nassign calib_sel_byte0       = {calib_zero_inputs_int[0], calib_sel[1:0]} ;\nassign calib_sel_byte1       = {calib_zero_inputs_int[1], calib_sel[1:0]} ;\nassign calib_sel_byte2       = {calib_zero_inputs_int[2], calib_sel[1:0]} ;\n\nassign calib_zero_lanes_int = calib_zero_lanes;\n\nassign phy_ctl_ready = &phy_ctl_ready_w[HIGHEST_BANK-1:0];\n\nassign phy_ctl_mstr_empty  = phy_ctl_empty[MASTER_PHY_CTL];\n\nassign of_ctl_a_full  = |of_ctl_a_full_v;\nassign of_ctl_full    = |of_ctl_full_v;\nassign of_data_a_full = |of_data_a_full_v;\nassign of_data_full   = |of_data_full_v;\nassign pre_data_a_full= |pre_data_a_full_v;\n\n\n\nassign if_empty       = !if_empty_def ? |if_empty_v : &if_empty_v;\nassign if_empty_or    =  |if_empty_or_v;\nassign if_empty_and   =  &if_empty_and_v;\nassign if_a_empty     = |if_a_empty_v;\n\n\ngenerate\ngenvar i;\nfor (i = 0; i != NUM_DDR_CK; i = i + 1) begin : ddr_clk_gen\n   case  ((GENERATE_DDR_CK_MAP >> (16*i)) & 16'hffff)\n      16'h3041: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[0] >> (LP_DDR_CK_WIDTH*i)) & 2'b11;\n      16'h3042: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[0] >> (LP_DDR_CK_WIDTH*i+12)) & 2'b11;\n      16'h3043: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[0] >> (LP_DDR_CK_WIDTH*i+24)) & 2'b11;\n      16'h3044: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[0] >> (LP_DDR_CK_WIDTH*i+36)) & 2'b11;\n      16'h3141: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[1] >> (LP_DDR_CK_WIDTH*i)) & 2'b11;\n      16'h3142: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[1] >> (LP_DDR_CK_WIDTH*i+12)) & 2'b11;\n      16'h3143: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[1] >> (LP_DDR_CK_WIDTH*i+24)) & 2'b11;\n      16'h3144: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[1] >> (LP_DDR_CK_WIDTH*i+36)) & 2'b11;\n      16'h3241: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[2] >> (LP_DDR_CK_WIDTH*i)) & 2'b11;\n      16'h3242: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[2] >> (LP_DDR_CK_WIDTH*i+12)) & 2'b11;\n      16'h3243: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[2] >> (LP_DDR_CK_WIDTH*i+24)) & 2'b11;\n      16'h3244: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[2] >> (LP_DDR_CK_WIDTH*i+36)) & 2'b11;\n      default : initial $display(\"ERROR: mc_phy ddr_clk_gen : invalid specification for parameter GENERATE_DDR_CK_MAP , clock index =  %d, spec= %x (hex) \",  i, (( GENERATE_DDR_CK_MAP >> (16 * i )) & 16'hffff ));\n   endcase\nend\nendgenerate\n\n\n\nreg rst_auxout;\nreg rst_auxout_r;\nreg rst_auxout_rr;\n\nalways @(posedge auxout_clk or posedge rst) begin\n  if ( rst) begin\n     rst_auxout_r   <= #(1) 1'b1;\n     rst_auxout_rr  <= #(1) 1'b1;\n  end\n  else begin\n     rst_auxout_r   <= #(1) rst;\n     rst_auxout_rr  <= #(1) rst_auxout_r;\n  end\nend\nif ( LP_RCLK_SELECT_EDGE[0]) begin\n  always @(posedge auxout_clk or posedge rst)  begin\n    if ( rst) begin\n       rst_auxout     <= #(1) 1'b1;\n    end\n    else begin\n       rst_auxout     <= #(1) rst_auxout_rr;\n    end\n  end\nend\nelse begin\n  always @(negedge auxout_clk or posedge rst)  begin\n    if ( rst) begin\n       rst_auxout     <= #(1) 1'b1;\n    end\n    else begin\n       rst_auxout     <= #(1) rst_auxout_rr;\n    end\n  end\nend\n\nlocalparam L_RESET_SELECT_BANK =\n    (BYTE_LANES_B1 == 0 && BYTE_LANES_B2 == 0 && RCLK_SELECT_BANK) ? 0 : RCLK_SELECT_BANK;\n\nalways @(*) begin\n      rst_out =  rst_out_w[L_RESET_SELECT_BANK] & ddr_rst_in_n;\nend\n\nalways @(posedge phy_clk) begin\n    if ( rst)\n       mcGo_r <= #(1) 0;\n    else\n       mcGo_r <= #(1) (mcGo_r << 1) |  &mcGo_w;\nend\n\nassign mcGo = mcGo_r[15];\n\n\ngenerate\n\n\n\n\nif (PHYCTL_CMD_FIFO == \"TRUE\") begin : cmd_fifo_soft\n    reg  [31:0] phy_wd_reg = 0;\n    reg  [3:0]  aux_in1_reg = 0;\n    reg  [3:0]  aux_in2_reg = 0;\n    reg         sfifo_ready = 0;\n    assign _phy_ctl_wd     = phy_wd_reg;\n    assign aux_in_[1]      = aux_in1_reg;\n    assign aux_in_[2]      = aux_in2_reg;\n    assign phy_ctl_a_full  = |_phy_ctl_a_full_p;\n    assign phy_ctl_full[0] = |_phy_ctl_full_p;\n    assign phy_ctl_full[1] = |_phy_ctl_full_p;\n    assign phy_ctl_full[2] = |_phy_ctl_full_p;\n    assign phy_ctl_full[3] = |_phy_ctl_full_p;\n    assign _phy_clk        = phy_clk;\n\n    always @(posedge phy_clk) begin\n          phy_wd_reg   <= #1 phy_ctl_wd;\n          aux_in1_reg  <= #1 aux_in_1;\n          aux_in2_reg  <= #1 aux_in_2;\n          sfifo_ready  <= #1 phy_ctl_wr;\n    end\n\nend\n\nelse if (PHYCTL_CMD_FIFO == \"FALSE\") begin\n    assign _phy_ctl_wd     = phy_ctl_wd;\n    assign aux_in_[1]      = aux_in_1;\n    assign aux_in_[2]      = aux_in_2;\n    assign phy_ctl_a_full  = |_phy_ctl_a_full_p;\n    assign phy_ctl_full[0] = |_phy_ctl_full_p;\n    assign phy_ctl_full[3:1] = 3'b000;\n    assign _phy_clk        = phy_clk;\n\nend\nendgenerate\n\n\n\n\ngenerate\n\nif (HIGHEST_BANK == 3) begin : banks_3\n  assign byte_rd_en_oth_banks[1:0] = {byte_rd_en_v[1],byte_rd_en_v[2]};\n  assign byte_rd_en_oth_banks[3:2] = {byte_rd_en_v[0],byte_rd_en_v[2]};\n  assign byte_rd_en_oth_banks[5:4] = {byte_rd_en_v[0],byte_rd_en_v[1]};\nend\nelse if (HIGHEST_BANK == 2) begin : banks_2\n  assign byte_rd_en_oth_banks[1:0] = {byte_rd_en_v[1],1'b1};\n  assign byte_rd_en_oth_banks[3:2] = {byte_rd_en_v[0],1'b1};\nend\nelse begin : banks_1\n  assign byte_rd_en_oth_banks[1:0] = {1'b1,1'b1};\nend\n\nif ( BYTE_LANES_B0 != 0)  begin : ddr_phy_4lanes_0\nmig_7series_v4_1_ddr_phy_4lanes #\n  (\n     .BYTE_LANES                (BYTE_LANES_B0),        \n     .DATA_CTL_N                (PHY_0_DATA_CTL), \n     .PO_CTL_COARSE_BYPASS      (PO_CTL_COARSE_BYPASS),\n     .PO_FINE_DELAY             (L_PHY_0_PO_FINE_DELAY),\n     .BITLANES                  (PHY_0_BITLANES),\n     .BITLANES_OUTONLY          (PHY_0_BITLANES_OUTONLY),\n     .BYTELANES_DDR_CK          (LP_PHY_0_BYTELANES_DDR_CK),\n     .LAST_BANK                 (PHY_0_IS_LAST_BANK),\n     .LANE_REMAP                (PHY_0_LANE_REMAP),\n     .OF_ALMOST_FULL_VALUE      (PHY_0_OF_ALMOST_FULL_VALUE),\n     .IF_ALMOST_EMPTY_VALUE     (PHY_0_IF_ALMOST_EMPTY_VALUE),\n     .GENERATE_IDELAYCTRL       (PHY_0_GENERATE_IDELAYCTRL),\n     .IODELAY_GRP               (PHY_0_IODELAY_GRP),\n     .FPGA_SPEED_GRADE          (FPGA_SPEED_GRADE),\n     .BANK_TYPE                 (BANK_TYPE),\n     .NUM_DDR_CK                (NUM_DDR_CK),\n     .TCK                       (TCK),\n     .RCLK_SELECT_LANE          (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO         (USE_PRE_POST_FIFO),\n     .SYNTHESIS                 (SYNTHESIS),\n     .PC_CLK_RATIO              (PHY_CLK_RATIO),\n     .PC_EVENTS_DELAY           (PHY_EVENTS_DELAY),\n     .PC_FOUR_WINDOW_CLOCKS     (PHY_FOUR_WINDOW_CLOCKS),\n     .PC_BURST_MODE             (PHY_0_A_BURST_MODE),\n     .PC_SYNC_MODE              (PHY_SYNC_MODE),\n     .PC_MULTI_REGION           (PHY_MULTI_REGION),\n     .PC_PHY_COUNT_EN           (PHY_COUNT_EN),\n     .PC_DISABLE_SEQ_MATCH      (PHY_DISABLE_SEQ_MATCH),\n     .PC_CMD_OFFSET             (PHY_0_CMD_OFFSET),\n     .PC_RD_CMD_OFFSET_0        (PHY_0_RD_CMD_OFFSET_0),\n     .PC_RD_CMD_OFFSET_1        (PHY_0_RD_CMD_OFFSET_1),\n     .PC_RD_CMD_OFFSET_2        (PHY_0_RD_CMD_OFFSET_2),\n     .PC_RD_CMD_OFFSET_3        (PHY_0_RD_CMD_OFFSET_3),\n     .PC_RD_DURATION_0          (PHY_0_RD_DURATION_0),\n     .PC_RD_DURATION_1          (PHY_0_RD_DURATION_1),\n     .PC_RD_DURATION_2          (PHY_0_RD_DURATION_2),\n     .PC_RD_DURATION_3          (PHY_0_RD_DURATION_3),\n     .PC_WR_CMD_OFFSET_0        (PHY_0_WR_CMD_OFFSET_0),\n     .PC_WR_CMD_OFFSET_1        (PHY_0_WR_CMD_OFFSET_1),\n     .PC_WR_CMD_OFFSET_2        (PHY_0_WR_CMD_OFFSET_2),\n     .PC_WR_CMD_OFFSET_3        (PHY_0_WR_CMD_OFFSET_3),\n     .PC_WR_DURATION_0          (PHY_0_WR_DURATION_0),\n     .PC_WR_DURATION_1          (PHY_0_WR_DURATION_1),\n     .PC_WR_DURATION_2          (PHY_0_WR_DURATION_2),\n     .PC_WR_DURATION_3          (PHY_0_WR_DURATION_3),\n     .PC_AO_WRLVL_EN            (PHY_0_AO_WRLVL_EN),\n     .PC_AO_TOGGLE              (PHY_0_AO_TOGGLE),\n\n     .PI_SEL_CLK_OFFSET         (PI_SEL_CLK_OFFSET),\n\n     .A_PI_FINE_DELAY           (L_PHY_0_A_PI_FINE_DELAY),\n     .B_PI_FINE_DELAY           (L_PHY_0_B_PI_FINE_DELAY),\n     .C_PI_FINE_DELAY           (L_PHY_0_C_PI_FINE_DELAY),\n     .D_PI_FINE_DELAY           (L_PHY_0_D_PI_FINE_DELAY),\n\n     .A_PI_FREQ_REF_DIV         (PHY_0_A_PI_FREQ_REF_DIV),\n     .A_PI_BURST_MODE           (PHY_0_A_BURST_MODE),\n     .A_PI_OUTPUT_CLK_SRC       (L_PHY_0_A_PI_OUTPUT_CLK_SRC),\n     .B_PI_OUTPUT_CLK_SRC       (L_PHY_0_B_PI_OUTPUT_CLK_SRC),\n     .C_PI_OUTPUT_CLK_SRC       (L_PHY_0_C_PI_OUTPUT_CLK_SRC),\n     .D_PI_OUTPUT_CLK_SRC       (L_PHY_0_D_PI_OUTPUT_CLK_SRC),\n     .A_PO_OUTPUT_CLK_SRC       (PHY_0_A_PO_OUTPUT_CLK_SRC),\n     .A_PO_OCLK_DELAY           (PHY_0_A_PO_OCLK_DELAY),\n     .A_PO_OCLKDELAY_INV        (PHY_0_A_PO_OCLKDELAY_INV),\n     .A_OF_ARRAY_MODE           (PHY_0_A_OF_ARRAY_MODE),\n     .B_OF_ARRAY_MODE           (PHY_0_B_OF_ARRAY_MODE),\n     .C_OF_ARRAY_MODE           (PHY_0_C_OF_ARRAY_MODE),\n     .D_OF_ARRAY_MODE           (PHY_0_D_OF_ARRAY_MODE),\n     .A_IF_ARRAY_MODE           (PHY_0_A_IF_ARRAY_MODE),\n     .B_IF_ARRAY_MODE           (PHY_0_B_IF_ARRAY_MODE),\n     .C_IF_ARRAY_MODE           (PHY_0_C_IF_ARRAY_MODE),\n     .D_IF_ARRAY_MODE           (PHY_0_D_IF_ARRAY_MODE),\n     .A_OS_DATA_RATE            (PHY_0_A_OSERDES_DATA_RATE),\n     .A_OS_DATA_WIDTH           (PHY_0_A_OSERDES_DATA_WIDTH),\n     .B_OS_DATA_RATE            (PHY_0_B_OSERDES_DATA_RATE),\n     .B_OS_DATA_WIDTH           (PHY_0_B_OSERDES_DATA_WIDTH),\n     .C_OS_DATA_RATE            (PHY_0_C_OSERDES_DATA_RATE),\n     .C_OS_DATA_WIDTH           (PHY_0_C_OSERDES_DATA_WIDTH),\n     .D_OS_DATA_RATE            (PHY_0_D_OSERDES_DATA_RATE),\n     .D_OS_DATA_WIDTH           (PHY_0_D_OSERDES_DATA_WIDTH),\n     .A_IDELAYE2_IDELAY_TYPE    (PHY_0_A_IDELAYE2_IDELAY_TYPE),\n     .A_IDELAYE2_IDELAY_VALUE   (PHY_0_A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC           (PI_DIV2_INCDEC)\n)\n u_ddr_phy_4lanes\n(\n      .rst                      (rst),\n      .phy_clk                  (phy_clk_split0),\n      .clk_div2                 (clk_div2),\n      .phy_ctl_clk              (phy_ctl_clk_split0),\n      .phy_ctl_wd               (phy_ctl_wd_split0),\n      .data_offset              (phy_ctl_wd_split0[PC_DATA_OFFSET_RANGE_HI : PC_DATA_OFFSET_RANGE_LO]),\n      .phy_ctl_wr               (phy_ctl_wr_split0),\n      .mem_refclk               (mem_refclk_split),\n      .freq_refclk              (freq_refclk_split),\n      .mem_refclk_div4          (mem_refclk_div4_split),\n      .sync_pulse               (sync_pulse_split),\n      .phy_dout                 (phy_dout_split0[HIGHEST_LANE_B0*80-1:0]),\n      .phy_cmd_wr_en            (phy_cmd_wr_en_split0),\n      .phy_data_wr_en           (phy_data_wr_en_split0),\n      .phy_rd_en                (phy_rd_en_split0),\n      .pll_lock                 (pll_lock),\n      .ddr_clk                  (ddr_clk_w[0]),\n      .rclk                     (),\n      .rst_out                  (rst_out_w[0]),\n      .mcGo                     (mcGo_w[0]),\n      .ref_dll_lock             (ref_dll_lock_w[0]),\n      .idelayctrl_refclk        (idelayctrl_refclk),\n      .idelay_inc               (idelay_inc),\n      .idelay_ce                (idelay_ce),\n      .idelay_ld                (idelay_ld),\n      .phy_ctl_mstr_empty       (phy_ctl_mstr_empty),\n      .if_rst                   (if_rst),\n      .if_empty_def             (if_empty_def),\n      .byte_rd_en_oth_banks     (byte_rd_en_oth_banks[1:0]),\n      .if_a_empty               (if_a_empty_v[0]),\n      .if_empty                 (if_empty_v[0]),\n      .byte_rd_en               (byte_rd_en_v[0]),\n      .if_empty_or              (if_empty_or_v[0]),\n      .if_empty_and             (if_empty_and_v[0]),\n      .of_ctl_a_full            (of_ctl_a_full_v[0]),\n      .of_data_a_full           (of_data_a_full_v[0]),\n      .of_ctl_full              (of_ctl_full_v[0]),\n      .of_data_full             (of_data_full_v[0]),\n      .pre_data_a_full          (pre_data_a_full_v[0]),\n      .phy_din                  (phy_din[HIGHEST_LANE_B0*80-1:0]),\n      .phy_ctl_a_full           (_phy_ctl_a_full_p[0]),\n      .phy_ctl_full             (_phy_ctl_full_p[0]),\n      .phy_ctl_empty            (phy_ctl_empty[0]),\n      .mem_dq_out               (mem_dq_out[HIGHEST_LANE_B0*12-1:0]),\n      .mem_dq_ts                (mem_dq_ts[HIGHEST_LANE_B0*12-1:0]),\n      .mem_dq_in                (mem_dq_in[HIGHEST_LANE_B0*10-1:0]),\n      .mem_dqs_out              (mem_dqs_out[HIGHEST_LANE_B0-1:0]),\n      .mem_dqs_ts               (mem_dqs_ts[HIGHEST_LANE_B0-1:0]),\n      .mem_dqs_in               (mem_dqs_in[HIGHEST_LANE_B0-1:0]),\n      .aux_out                  (aux_out_[3:0]),\n      .phy_ctl_ready            (phy_ctl_ready_w[0]),\n      .phy_write_calib          (phy_write_calib),\n      .phy_read_calib           (phy_read_calib),\n\n\n\n\n      .phyGo                    (phyGo),\n      .input_sink               (input_sink),\n\n      .calib_sel                (calib_sel_byte0),\n      .calib_zero_ctrl          (calib_zero_ctrl[0]),\n      .calib_zero_lanes         (calib_zero_lanes_int[3:0]),\n      .calib_in_common          (calib_in_common),\n      .po_coarse_enable         (po_coarse_enable[0]),\n      .po_fine_enable           (po_fine_enable[0]),\n      .po_fine_inc              (po_fine_inc[0]),\n      .po_coarse_inc            (po_coarse_inc[0]),\n      .po_counter_load_en       (po_counter_load_en),\n      .po_sel_fine_oclk_delay   (po_sel_fine_oclk_delay[0]),\n      .po_counter_load_val      (po_counter_load_val),\n      .po_counter_read_en       (po_counter_read_en),\n      .po_coarse_overflow       (po_coarse_overflow_w[0]),\n      .po_fine_overflow         (po_fine_overflow_w[0]),\n      .po_counter_read_val      (po_counter_read_val_w[0]),\n\n      .pi_rst_dqs_find          (pi_rst_dqs_find[0]),\n      .pi_fine_enable           (pi_fine_enable),\n      .pi_fine_inc              (pi_fine_inc),\n      .pi_counter_load_en       (pi_counter_load_en),\n      .pi_counter_read_en       (pi_counter_read_en),\n      .pi_counter_load_val      (pi_counter_load_val),\n      .pi_fine_overflow         (pi_fine_overflow_w[0]),\n      .pi_counter_read_val      (pi_counter_read_val_w[0]),\n      .pi_dqs_found             (pi_dqs_found_w[0]),\n      .pi_dqs_found_all         (pi_dqs_found_all_w[0]),\n      .pi_dqs_found_any         (pi_dqs_found_any_w[0]),\n      .pi_phase_locked_lanes      (pi_phase_locked_lanes[HIGHEST_LANE_B0-1:0]),\n      .pi_dqs_found_lanes       (pi_dqs_found_lanes[HIGHEST_LANE_B0-1:0]),\n      .pi_dqs_out_of_range      (pi_dqs_out_of_range_w[0]),\n      .pi_phase_locked          (pi_phase_locked_w[0]),\n      .pi_phase_locked_all      (pi_phase_locked_all_w[0]),\n      .fine_delay               (fine_delay),\n      .fine_delay_sel           (fine_delay_sel)\n);\n\n   always @(posedge auxout_clk or posedge rst_auxout)  begin\n     if (rst_auxout) begin\n         aux_out[0]  <= #100 0;\n         aux_out[2]  <= #100 0;\n     end\n     else begin\n         aux_out[0]  <= #100 aux_out_[0];\n         aux_out[2]  <= #100 aux_out_[2];\n     end\n   end\n   if ( LP_RCLK_SELECT_EDGE[0]) begin\n      always @(posedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[1]  <= #100 0;\n            aux_out[3]  <= #100 0;\n        end\n        else begin\n            aux_out[1]  <= #100 aux_out_[1];\n            aux_out[3]  <= #100 aux_out_[3];\n        end\n      end\n   end\n   else begin\n      always @(negedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[1]  <= #100 0;\n            aux_out[3]  <= #100 0;\n        end\n        else begin\n            aux_out[1]  <= #100 aux_out_[1];\n            aux_out[3]  <= #100 aux_out_[3];\n        end\n      end\n   end\nend\nelse begin\n   if ( HIGHEST_BANK > 0) begin\n       assign phy_din[HIGHEST_LANE_B0*80-1:0] = 0;\n       assign _phy_ctl_a_full_p[0] = 0;\n       assign of_ctl_a_full_v[0]   = 0;\n       assign of_ctl_full_v[0]     = 0;\n       assign of_data_a_full_v[0]  = 0;\n       assign of_data_full_v[0]    = 0;\n       assign pre_data_a_full_v[0] = 0;\n       assign if_empty_v[0]        = 0;\n       assign byte_rd_en_v[0]      = 1;\n       always @(*)\n           aux_out[3:0] = 0;\n   end\n   assign pi_dqs_found_w[0]    = 1;\n   assign pi_dqs_found_all_w[0]    = 1;\n   assign pi_dqs_found_any_w[0]    = 0;\n   assign pi_phase_locked_lanes[HIGHEST_LANE_B0-1:0]  = 4'b1111;\n   assign pi_dqs_found_lanes[HIGHEST_LANE_B0-1:0]  = 4'b1111;\n   assign pi_dqs_out_of_range_w[0]    = 0;\n   assign pi_phase_locked_w[0]    = 1;\n   assign po_fine_overflow_w[0] = 0;\n   assign po_coarse_overflow_w[0] = 0;\n   assign po_fine_overflow_w[0] = 0;\n   assign pi_fine_overflow_w[0] = 0;\n   assign po_counter_read_val_w[0] = 0;\n   assign pi_counter_read_val_w[0] = 0;\n   assign mcGo_w[0] = 1;\n   if ( RCLK_SELECT_BANK == 0)\n     always @(*)\n        aux_out[3:0] = 0;\nend\n\nif ( BYTE_LANES_B1 != 0) begin : ddr_phy_4lanes_1\n\nmig_7series_v4_1_ddr_phy_4lanes #\n  (\n     .BYTE_LANES                (BYTE_LANES_B1),        \n     .DATA_CTL_N                (PHY_1_DATA_CTL), \n     .PO_CTL_COARSE_BYPASS      (PO_CTL_COARSE_BYPASS),\n     .PO_FINE_DELAY             (L_PHY_1_PO_FINE_DELAY),\n     .BITLANES                  (PHY_1_BITLANES),\n     .BITLANES_OUTONLY          (PHY_1_BITLANES_OUTONLY),\n     .BYTELANES_DDR_CK          (LP_PHY_1_BYTELANES_DDR_CK),\n     .LAST_BANK                 (PHY_1_IS_LAST_BANK ),\n     .LANE_REMAP                (PHY_1_LANE_REMAP),\n     .OF_ALMOST_FULL_VALUE      (PHY_1_OF_ALMOST_FULL_VALUE),\n     .IF_ALMOST_EMPTY_VALUE     (PHY_1_IF_ALMOST_EMPTY_VALUE),\n     .GENERATE_IDELAYCTRL       (PHY_1_GENERATE_IDELAYCTRL),\n     .IODELAY_GRP               (PHY_1_IODELAY_GRP),\n     .FPGA_SPEED_GRADE          (FPGA_SPEED_GRADE),\n     .BANK_TYPE                 (BANK_TYPE),\n     .NUM_DDR_CK                (NUM_DDR_CK),\n     .TCK                       (TCK),\n     .RCLK_SELECT_LANE          (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO         (USE_PRE_POST_FIFO),\n     .SYNTHESIS                 (SYNTHESIS),\n     .PC_CLK_RATIO              (PHY_CLK_RATIO),\n     .PC_EVENTS_DELAY           (PHY_EVENTS_DELAY),\n     .PC_FOUR_WINDOW_CLOCKS     (PHY_FOUR_WINDOW_CLOCKS),\n     .PC_BURST_MODE             (PHY_1_A_BURST_MODE),\n     .PC_SYNC_MODE              (PHY_SYNC_MODE),\n     .PC_MULTI_REGION           (PHY_MULTI_REGION),\n     .PC_PHY_COUNT_EN           (PHY_COUNT_EN),\n     .PC_DISABLE_SEQ_MATCH      (PHY_DISABLE_SEQ_MATCH),\n     .PC_CMD_OFFSET             (PHY_1_CMD_OFFSET),\n     .PC_RD_CMD_OFFSET_0        (PHY_1_RD_CMD_OFFSET_0),\n     .PC_RD_CMD_OFFSET_1        (PHY_1_RD_CMD_OFFSET_1),\n     .PC_RD_CMD_OFFSET_2        (PHY_1_RD_CMD_OFFSET_2),\n     .PC_RD_CMD_OFFSET_3        (PHY_1_RD_CMD_OFFSET_3),\n     .PC_RD_DURATION_0          (PHY_1_RD_DURATION_0),\n     .PC_RD_DURATION_1          (PHY_1_RD_DURATION_1),\n     .PC_RD_DURATION_2          (PHY_1_RD_DURATION_2),\n     .PC_RD_DURATION_3          (PHY_1_RD_DURATION_3),\n     .PC_WR_CMD_OFFSET_0        (PHY_1_WR_CMD_OFFSET_0),\n     .PC_WR_CMD_OFFSET_1        (PHY_1_WR_CMD_OFFSET_1),\n     .PC_WR_CMD_OFFSET_2        (PHY_1_WR_CMD_OFFSET_2),\n     .PC_WR_CMD_OFFSET_3        (PHY_1_WR_CMD_OFFSET_3),\n     .PC_WR_DURATION_0          (PHY_1_WR_DURATION_0),\n     .PC_WR_DURATION_1          (PHY_1_WR_DURATION_1),\n     .PC_WR_DURATION_2          (PHY_1_WR_DURATION_2),\n     .PC_WR_DURATION_3          (PHY_1_WR_DURATION_3),\n     .PC_AO_WRLVL_EN            (PHY_1_AO_WRLVL_EN),\n     .PC_AO_TOGGLE              (PHY_1_AO_TOGGLE),\n\n     .PI_SEL_CLK_OFFSET         (PI_SEL_CLK_OFFSET),\n\n     .A_PI_FINE_DELAY           (L_PHY_1_A_PI_FINE_DELAY),\n     .B_PI_FINE_DELAY           (L_PHY_1_B_PI_FINE_DELAY),\n     .C_PI_FINE_DELAY           (L_PHY_1_C_PI_FINE_DELAY),\n     .D_PI_FINE_DELAY           (L_PHY_1_D_PI_FINE_DELAY),\n\n     .A_PI_FREQ_REF_DIV         (PHY_1_A_PI_FREQ_REF_DIV),\n     .A_PI_BURST_MODE           (PHY_1_A_BURST_MODE),\n     .A_PI_OUTPUT_CLK_SRC       (L_PHY_1_A_PI_OUTPUT_CLK_SRC),\n     .B_PI_OUTPUT_CLK_SRC       (L_PHY_1_B_PI_OUTPUT_CLK_SRC),\n     .C_PI_OUTPUT_CLK_SRC       (L_PHY_1_C_PI_OUTPUT_CLK_SRC),\n     .D_PI_OUTPUT_CLK_SRC       (L_PHY_1_D_PI_OUTPUT_CLK_SRC),\n     .A_PO_OUTPUT_CLK_SRC       (PHY_1_A_PO_OUTPUT_CLK_SRC),\n     .A_PO_OCLK_DELAY           (PHY_1_A_PO_OCLK_DELAY),\n     .A_PO_OCLKDELAY_INV        (PHY_1_A_PO_OCLKDELAY_INV),\n     .A_OF_ARRAY_MODE           (PHY_1_A_OF_ARRAY_MODE),\n     .B_OF_ARRAY_MODE           (PHY_1_B_OF_ARRAY_MODE),\n     .C_OF_ARRAY_MODE           (PHY_1_C_OF_ARRAY_MODE),\n     .D_OF_ARRAY_MODE           (PHY_1_D_OF_ARRAY_MODE),\n     .A_IF_ARRAY_MODE           (PHY_1_A_IF_ARRAY_MODE),\n     .B_IF_ARRAY_MODE           (PHY_1_B_IF_ARRAY_MODE),\n     .C_IF_ARRAY_MODE           (PHY_1_C_IF_ARRAY_MODE),\n     .D_IF_ARRAY_MODE           (PHY_1_D_IF_ARRAY_MODE),\n     .A_OS_DATA_RATE            (PHY_1_A_OSERDES_DATA_RATE),\n     .A_OS_DATA_WIDTH           (PHY_1_A_OSERDES_DATA_WIDTH),\n     .B_OS_DATA_RATE            (PHY_1_B_OSERDES_DATA_RATE),\n     .B_OS_DATA_WIDTH           (PHY_1_B_OSERDES_DATA_WIDTH),\n     .C_OS_DATA_RATE            (PHY_1_C_OSERDES_DATA_RATE),\n     .C_OS_DATA_WIDTH           (PHY_1_C_OSERDES_DATA_WIDTH),\n     .D_OS_DATA_RATE            (PHY_1_D_OSERDES_DATA_RATE),\n     .D_OS_DATA_WIDTH           (PHY_1_D_OSERDES_DATA_WIDTH),\n     .A_IDELAYE2_IDELAY_TYPE    (PHY_1_A_IDELAYE2_IDELAY_TYPE),\n     .A_IDELAYE2_IDELAY_VALUE   (PHY_1_A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC           (PI_DIV2_INCDEC)\n)\n u_ddr_phy_4lanes\n(\n      .rst                      (rst),\n      .phy_clk                  (phy_clk_split1),\n      .clk_div2                 (clk_div2),\n      .phy_ctl_clk              (phy_ctl_clk_split1),\n      .phy_ctl_wd               (phy_ctl_wd_split1),\n      .data_offset              (phy_data_offset_1_split1),\n      .phy_ctl_wr               (phy_ctl_wr_split1),\n      .mem_refclk               (mem_refclk_split),\n      .freq_refclk              (freq_refclk_split),\n      .mem_refclk_div4          (mem_refclk_div4_split),\n      .sync_pulse               (sync_pulse_split),\n      .phy_dout                 (phy_dout_split1[HIGHEST_LANE_B1*80+320-1:320]),\n      .phy_cmd_wr_en            (phy_cmd_wr_en_split1),\n      .phy_data_wr_en           (phy_data_wr_en_split1),\n      .phy_rd_en                (phy_rd_en_split1),\n      .pll_lock                 (pll_lock),\n      .ddr_clk                  (ddr_clk_w[1]),\n      .rclk                     (),\n      .rst_out                  (rst_out_w[1]),\n      .mcGo                     (mcGo_w[1]),\n      .ref_dll_lock             (ref_dll_lock_w[1]),\n      .idelayctrl_refclk        (idelayctrl_refclk),\n      .idelay_inc               (idelay_inc),\n      .idelay_ce                (idelay_ce),\n      .idelay_ld                (idelay_ld),\n      .phy_ctl_mstr_empty       (phy_ctl_mstr_empty),\n      .if_rst                   (if_rst),\n      .if_empty_def             (if_empty_def),\n      .byte_rd_en_oth_banks     (byte_rd_en_oth_banks[3:2]),\n      .if_a_empty               (if_a_empty_v[1]),\n      .if_empty                 (if_empty_v[1]),\n      .byte_rd_en               (byte_rd_en_v[1]),\n      .if_empty_or              (if_empty_or_v[1]),\n      .if_empty_and             (if_empty_and_v[1]),\n      .of_ctl_a_full            (of_ctl_a_full_v[1]),\n      .of_data_a_full           (of_data_a_full_v[1]),\n      .of_ctl_full              (of_ctl_full_v[1]),\n      .of_data_full             (of_data_full_v[1]),\n      .pre_data_a_full          (pre_data_a_full_v[1]),\n      .phy_din                  (phy_din[HIGHEST_LANE_B1*80+320-1:320]),\n      .phy_ctl_a_full           (_phy_ctl_a_full_p[1]),\n      .phy_ctl_full             (_phy_ctl_full_p[1]),\n      .phy_ctl_empty            (phy_ctl_empty[1]),\n      .mem_dq_out               (mem_dq_out[HIGHEST_LANE_B1*12+48-1:48]),\n      .mem_dq_ts                (mem_dq_ts[HIGHEST_LANE_B1*12+48-1:48]),\n      .mem_dq_in                (mem_dq_in[HIGHEST_LANE_B1*10+40-1:40]),\n      .mem_dqs_out              (mem_dqs_out[HIGHEST_LANE_B1+4-1:4]),\n      .mem_dqs_ts               (mem_dqs_ts[HIGHEST_LANE_B1+4-1:4]),\n      .mem_dqs_in               (mem_dqs_in[HIGHEST_LANE_B1+4-1:4]),\n      .aux_out                  (aux_out_[7:4]),\n      .phy_ctl_ready            (phy_ctl_ready_w[1]),\n      .phy_write_calib          (phy_write_calib),\n      .phy_read_calib           (phy_read_calib),\n\n\n\n\n      .phyGo                    (phyGo),\n      .input_sink               (input_sink),\n\n      .calib_sel                (calib_sel_byte1),\n      .calib_zero_ctrl          (calib_zero_ctrl[1]),\n      .calib_zero_lanes         (calib_zero_lanes_int[7:4]),\n      .calib_in_common          (calib_in_common),\n      .po_coarse_enable         (po_coarse_enable[1]),\n      .po_fine_enable           (po_fine_enable[1]),\n      .po_fine_inc              (po_fine_inc[1]),\n      .po_coarse_inc            (po_coarse_inc[1]),\n      .po_counter_load_en       (po_counter_load_en),\n      .po_sel_fine_oclk_delay   (po_sel_fine_oclk_delay[1]),\n      .po_counter_load_val      (po_counter_load_val),\n      .po_counter_read_en       (po_counter_read_en),\n      .po_coarse_overflow       (po_coarse_overflow_w[1]),\n      .po_fine_overflow         (po_fine_overflow_w[1]),\n      .po_counter_read_val      (po_counter_read_val_w[1]),\n\n      .pi_rst_dqs_find          (pi_rst_dqs_find[1]),\n      .pi_fine_enable           (pi_fine_enable),\n      .pi_fine_inc              (pi_fine_inc),\n      .pi_counter_load_en       (pi_counter_load_en),\n      .pi_counter_read_en       (pi_counter_read_en),\n      .pi_counter_load_val      (pi_counter_load_val),\n      .pi_fine_overflow         (pi_fine_overflow_w[1]),\n      .pi_counter_read_val      (pi_counter_read_val_w[1]),\n      .pi_dqs_found             (pi_dqs_found_w[1]),\n      .pi_dqs_found_all         (pi_dqs_found_all_w[1]),\n      .pi_dqs_found_any         (pi_dqs_found_any_w[1]),\n      .pi_phase_locked_lanes    (pi_phase_locked_lanes[HIGHEST_LANE_B1+4-1:4]),\n      .pi_dqs_found_lanes       (pi_dqs_found_lanes[HIGHEST_LANE_B1+4-1:4]),\n      .pi_dqs_out_of_range      (pi_dqs_out_of_range_w[1]),\n      .pi_phase_locked          (pi_phase_locked_w[1]),\n      .pi_phase_locked_all      (pi_phase_locked_all_w[1]),\n      .fine_delay               (fine_delay),\n      .fine_delay_sel           (fine_delay_sel)\n);\n\n   always @(posedge auxout_clk or posedge rst_auxout)  begin\n     if (rst_auxout) begin\n         aux_out[4]  <= #100 0;\n         aux_out[6]  <= #100 0;\n     end\n     else begin\n         aux_out[4]  <= #100 aux_out_[4];\n         aux_out[6]  <= #100 aux_out_[6];\n     end\n   end\n   if ( LP_RCLK_SELECT_EDGE[1]) begin\n      always @(posedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[5]  <= #100 0;\n            aux_out[7]  <= #100 0;\n        end\n        else begin\n            aux_out[5]  <= #100 aux_out_[5];\n            aux_out[7]  <= #100 aux_out_[7];\n        end\n      end\n   end\n   else begin\n      always @(negedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[5]  <= #100 0;\n            aux_out[7]  <= #100 0;\n        end\n        else begin\n            aux_out[5]  <= #100 aux_out_[5];\n            aux_out[7]  <= #100 aux_out_[7];\n        end\n      end\n   end\nend\nelse begin\n   if ( HIGHEST_BANK > 1)  begin\n       assign phy_din[HIGHEST_LANE_B1*80+320-1:320] = 0;\n       assign _phy_ctl_a_full_p[1] = 0;\n       assign of_ctl_a_full_v[1]   = 0;\n       assign of_ctl_full_v[1]     = 0;\n       assign of_data_a_full_v[1]  = 0;\n       assign of_data_full_v[1]    = 0;\n       assign pre_data_a_full_v[1] = 0;\n       assign if_empty_v[1]        = 0;\n       assign byte_rd_en_v[1]      = 1;\n       assign pi_phase_locked_lanes[HIGHEST_LANE_B1+4-1:4]  = 4'b1111;\n       assign pi_dqs_found_lanes[HIGHEST_LANE_B1+4-1:4]  = 4'b1111;\n       always @(*)\n          aux_out[7:4] = 0;\n   end\n       assign pi_dqs_found_w[1]    = 1;\n       assign pi_dqs_found_all_w[1]    = 1;\n       assign pi_dqs_found_any_w[1]    = 0;\n       assign pi_dqs_out_of_range_w[1]    = 0;\n       assign pi_phase_locked_w[1]    = 1;\n       assign po_coarse_overflow_w[1] = 0;\n       assign po_fine_overflow_w[1] = 0;\n       assign pi_fine_overflow_w[1] = 0;\n       assign po_counter_read_val_w[1] = 0;\n       assign pi_counter_read_val_w[1] = 0;\n       assign mcGo_w[1] = 1;\nend\n\nif ( BYTE_LANES_B2 != 0) begin : ddr_phy_4lanes_2\n\nmig_7series_v4_1_ddr_phy_4lanes #\n  (\n     .BYTE_LANES                (BYTE_LANES_B2),        \n     .DATA_CTL_N                (PHY_2_DATA_CTL), \n     .PO_CTL_COARSE_BYPASS      (PO_CTL_COARSE_BYPASS),\n     .PO_FINE_DELAY             (L_PHY_2_PO_FINE_DELAY),\n     .BITLANES                  (PHY_2_BITLANES),\n     .BITLANES_OUTONLY          (PHY_2_BITLANES_OUTONLY),\n     .BYTELANES_DDR_CK          (LP_PHY_2_BYTELANES_DDR_CK),\n     .LAST_BANK                 (PHY_2_IS_LAST_BANK ),\n     .LANE_REMAP                (PHY_2_LANE_REMAP),\n     .OF_ALMOST_FULL_VALUE      (PHY_2_OF_ALMOST_FULL_VALUE),\n     .IF_ALMOST_EMPTY_VALUE     (PHY_2_IF_ALMOST_EMPTY_VALUE),\n     .GENERATE_IDELAYCTRL       (PHY_2_GENERATE_IDELAYCTRL),\n     .IODELAY_GRP               (PHY_2_IODELAY_GRP),\n     .FPGA_SPEED_GRADE          (FPGA_SPEED_GRADE),\n     .BANK_TYPE                 (BANK_TYPE),\n     .NUM_DDR_CK                (NUM_DDR_CK),\n     .TCK                       (TCK),\n     .RCLK_SELECT_LANE          (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO         (USE_PRE_POST_FIFO),\n     .SYNTHESIS                 (SYNTHESIS),\n     .PC_CLK_RATIO              (PHY_CLK_RATIO),\n     .PC_EVENTS_DELAY           (PHY_EVENTS_DELAY),\n     .PC_FOUR_WINDOW_CLOCKS     (PHY_FOUR_WINDOW_CLOCKS),\n     .PC_BURST_MODE             (PHY_2_A_BURST_MODE),\n     .PC_SYNC_MODE              (PHY_SYNC_MODE),\n     .PC_MULTI_REGION           (PHY_MULTI_REGION),\n     .PC_PHY_COUNT_EN           (PHY_COUNT_EN),\n     .PC_DISABLE_SEQ_MATCH      (PHY_DISABLE_SEQ_MATCH),\n     .PC_CMD_OFFSET             (PHY_2_CMD_OFFSET),\n     .PC_RD_CMD_OFFSET_0        (PHY_2_RD_CMD_OFFSET_0),\n     .PC_RD_CMD_OFFSET_1        (PHY_2_RD_CMD_OFFSET_1),\n     .PC_RD_CMD_OFFSET_2        (PHY_2_RD_CMD_OFFSET_2),\n     .PC_RD_CMD_OFFSET_3        (PHY_2_RD_CMD_OFFSET_3),\n     .PC_RD_DURATION_0          (PHY_2_RD_DURATION_0),\n     .PC_RD_DURATION_1          (PHY_2_RD_DURATION_1),\n     .PC_RD_DURATION_2          (PHY_2_RD_DURATION_2),\n     .PC_RD_DURATION_3          (PHY_2_RD_DURATION_3),\n     .PC_WR_CMD_OFFSET_0        (PHY_2_WR_CMD_OFFSET_0),\n     .PC_WR_CMD_OFFSET_1        (PHY_2_WR_CMD_OFFSET_1),\n     .PC_WR_CMD_OFFSET_2        (PHY_2_WR_CMD_OFFSET_2),\n     .PC_WR_CMD_OFFSET_3        (PHY_2_WR_CMD_OFFSET_3),\n     .PC_WR_DURATION_0          (PHY_2_WR_DURATION_0),\n     .PC_WR_DURATION_1          (PHY_2_WR_DURATION_1),\n     .PC_WR_DURATION_2          (PHY_2_WR_DURATION_2),\n     .PC_WR_DURATION_3          (PHY_2_WR_DURATION_3),\n     .PC_AO_WRLVL_EN            (PHY_2_AO_WRLVL_EN),\n     .PC_AO_TOGGLE              (PHY_2_AO_TOGGLE),\n\n     .PI_SEL_CLK_OFFSET         (PI_SEL_CLK_OFFSET),\n\n     .A_PI_FINE_DELAY           (L_PHY_2_A_PI_FINE_DELAY),\n     .B_PI_FINE_DELAY           (L_PHY_2_B_PI_FINE_DELAY),\n     .C_PI_FINE_DELAY           (L_PHY_2_C_PI_FINE_DELAY),\n     .D_PI_FINE_DELAY           (L_PHY_2_D_PI_FINE_DELAY),\n     .A_PI_FREQ_REF_DIV         (PHY_2_A_PI_FREQ_REF_DIV),\n     .A_PI_BURST_MODE           (PHY_2_A_BURST_MODE),\n     .A_PI_OUTPUT_CLK_SRC       (L_PHY_2_A_PI_OUTPUT_CLK_SRC),\n     .B_PI_OUTPUT_CLK_SRC       (L_PHY_2_B_PI_OUTPUT_CLK_SRC),\n     .C_PI_OUTPUT_CLK_SRC       (L_PHY_2_C_PI_OUTPUT_CLK_SRC),\n     .D_PI_OUTPUT_CLK_SRC       (L_PHY_2_D_PI_OUTPUT_CLK_SRC),\n     .A_PO_OUTPUT_CLK_SRC       (PHY_2_A_PO_OUTPUT_CLK_SRC),\n     .A_PO_OCLK_DELAY           (PHY_2_A_PO_OCLK_DELAY),\n     .A_PO_OCLKDELAY_INV        (PHY_2_A_PO_OCLKDELAY_INV),\n     .A_OF_ARRAY_MODE           (PHY_2_A_OF_ARRAY_MODE),\n     .B_OF_ARRAY_MODE           (PHY_2_B_OF_ARRAY_MODE),\n     .C_OF_ARRAY_MODE           (PHY_2_C_OF_ARRAY_MODE),\n     .D_OF_ARRAY_MODE           (PHY_2_D_OF_ARRAY_MODE),\n     .A_IF_ARRAY_MODE           (PHY_2_A_IF_ARRAY_MODE),\n     .B_IF_ARRAY_MODE           (PHY_2_B_IF_ARRAY_MODE),\n     .C_IF_ARRAY_MODE           (PHY_2_C_IF_ARRAY_MODE),\n     .D_IF_ARRAY_MODE           (PHY_2_D_IF_ARRAY_MODE),\n     .A_OS_DATA_RATE            (PHY_2_A_OSERDES_DATA_RATE),\n     .A_OS_DATA_WIDTH           (PHY_2_A_OSERDES_DATA_WIDTH),\n     .B_OS_DATA_RATE            (PHY_2_B_OSERDES_DATA_RATE),\n     .B_OS_DATA_WIDTH           (PHY_2_B_OSERDES_DATA_WIDTH),\n     .C_OS_DATA_RATE            (PHY_2_C_OSERDES_DATA_RATE),\n     .C_OS_DATA_WIDTH           (PHY_2_C_OSERDES_DATA_WIDTH),\n     .D_OS_DATA_RATE            (PHY_2_D_OSERDES_DATA_RATE),\n     .D_OS_DATA_WIDTH           (PHY_2_D_OSERDES_DATA_WIDTH),\n     .A_IDELAYE2_IDELAY_TYPE    (PHY_2_A_IDELAYE2_IDELAY_TYPE),\n     .A_IDELAYE2_IDELAY_VALUE   (PHY_2_A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC           (PI_DIV2_INCDEC)\n)\n u_ddr_phy_4lanes\n(\n      .rst                      (rst),\n      .phy_clk                  (phy_clk_split2),\n      .clk_div2                 (clk_div2),\n      .phy_ctl_clk              (phy_ctl_clk_split2),\n      .phy_ctl_wd               (phy_ctl_wd_split2),\n      .data_offset              (phy_data_offset_2_split2),\n      .phy_ctl_wr               (phy_ctl_wr_split2),\n      .mem_refclk               (mem_refclk_split),\n      .freq_refclk              (freq_refclk_split),\n      .mem_refclk_div4          (mem_refclk_div4_split),\n      .sync_pulse               (sync_pulse_split),\n      .phy_dout                 (phy_dout_split2[HIGHEST_LANE_B2*80+640-1:640]),\n      .phy_cmd_wr_en            (phy_cmd_wr_en_split2),\n      .phy_data_wr_en           (phy_data_wr_en_split2),\n      .phy_rd_en                (phy_rd_en_split2),\n      .pll_lock                 (pll_lock),\n      .ddr_clk                  (ddr_clk_w[2]),\n      .rclk                     (),\n      .rst_out                  (rst_out_w[2]),\n      .mcGo                     (mcGo_w[2]),\n      .ref_dll_lock             (ref_dll_lock_w[2]),\n      .idelayctrl_refclk        (idelayctrl_refclk),\n      .idelay_inc               (idelay_inc),\n      .idelay_ce                (idelay_ce),\n      .idelay_ld                (idelay_ld),\n      .phy_ctl_mstr_empty       (phy_ctl_mstr_empty),\n      .if_rst                   (if_rst),\n      .if_empty_def             (if_empty_def),\n      .byte_rd_en_oth_banks     (byte_rd_en_oth_banks[5:4]),\n      .if_a_empty               (if_a_empty_v[2]),\n      .if_empty                 (if_empty_v[2]),\n      .byte_rd_en               (byte_rd_en_v[2]),\n      .if_empty_or              (if_empty_or_v[2]),\n      .if_empty_and             (if_empty_and_v[2]),\n      .of_ctl_a_full            (of_ctl_a_full_v[2]),\n      .of_data_a_full           (of_data_a_full_v[2]),\n      .of_ctl_full              (of_ctl_full_v[2]),\n      .of_data_full             (of_data_full_v[2]),\n      .pre_data_a_full          (pre_data_a_full_v[2]),\n      .phy_din                  (phy_din[HIGHEST_LANE_B2*80+640-1:640]),\n      .phy_ctl_a_full           (_phy_ctl_a_full_p[2]),\n      .phy_ctl_full             (_phy_ctl_full_p[2]),\n      .phy_ctl_empty            (phy_ctl_empty[2]),\n      .mem_dq_out               (mem_dq_out[HIGHEST_LANE_B2*12+96-1:96]),\n      .mem_dq_ts                (mem_dq_ts[HIGHEST_LANE_B2*12+96-1:96]),\n      .mem_dq_in                (mem_dq_in[HIGHEST_LANE_B2*10+80-1:80]),\n      .mem_dqs_out              (mem_dqs_out[HIGHEST_LANE_B2-1+8:8]),\n      .mem_dqs_ts               (mem_dqs_ts[HIGHEST_LANE_B2-1+8:8]),\n      .mem_dqs_in               (mem_dqs_in[HIGHEST_LANE_B2-1+8:8]),\n      .aux_out                  (aux_out_[11:8]),\n      .phy_ctl_ready            (phy_ctl_ready_w[2]),\n      .phy_write_calib          (phy_write_calib),\n      .phy_read_calib           (phy_read_calib),\n\n\n\n\n      .phyGo                    (phyGo),\n      .input_sink               (input_sink),\n\n      .calib_sel                (calib_sel_byte2),\n      .calib_zero_ctrl          (calib_zero_ctrl[2]),\n      .calib_zero_lanes         (calib_zero_lanes_int[11:8]),\n      .calib_in_common          (calib_in_common),\n      .po_coarse_enable         (po_coarse_enable[2]),\n      .po_fine_enable           (po_fine_enable[2]),\n      .po_fine_inc              (po_fine_inc[2]),\n      .po_coarse_inc            (po_coarse_inc[2]),\n      .po_counter_load_en       (po_counter_load_en),\n      .po_sel_fine_oclk_delay   (po_sel_fine_oclk_delay[2]),\n      .po_counter_load_val      (po_counter_load_val),\n      .po_counter_read_en       (po_counter_read_en),\n      .po_coarse_overflow       (po_coarse_overflow_w[2]),\n      .po_fine_overflow         (po_fine_overflow_w[2]),\n      .po_counter_read_val      (po_counter_read_val_w[2]),\n\n      .pi_rst_dqs_find          (pi_rst_dqs_find[2]),\n      .pi_fine_enable           (pi_fine_enable),\n      .pi_fine_inc              (pi_fine_inc),\n      .pi_counter_load_en       (pi_counter_load_en),\n      .pi_counter_read_en       (pi_counter_read_en),\n      .pi_counter_load_val      (pi_counter_load_val),\n      .pi_fine_overflow         (pi_fine_overflow_w[2]),\n      .pi_counter_read_val      (pi_counter_read_val_w[2]),\n      .pi_dqs_found             (pi_dqs_found_w[2]),\n      .pi_dqs_found_all         (pi_dqs_found_all_w[2]),\n      .pi_dqs_found_any         (pi_dqs_found_any_w[2]),\n      .pi_phase_locked_lanes    (pi_phase_locked_lanes[HIGHEST_LANE_B2+8-1:8]),\n      .pi_dqs_found_lanes       (pi_dqs_found_lanes[HIGHEST_LANE_B2+8-1:8]),\n      .pi_dqs_out_of_range      (pi_dqs_out_of_range_w[2]),\n      .pi_phase_locked          (pi_phase_locked_w[2]),\n      .pi_phase_locked_all      (pi_phase_locked_all_w[2]),\n      .fine_delay               (fine_delay),\n      .fine_delay_sel           (fine_delay_sel)\n);\n   always @(posedge auxout_clk or posedge rst_auxout)  begin\n     if (rst_auxout) begin\n         aux_out[8]  <= #100 0;\n         aux_out[10] <= #100 0;\n     end\n     else begin\n         aux_out[8]  <= #100 aux_out_[8];\n         aux_out[10] <= #100 aux_out_[10];\n     end\n   end\n   if ( LP_RCLK_SELECT_EDGE[1]) begin\n      always @(posedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[9]  <= #100 0;\n            aux_out[11] <= #100 0;\n        end\n        else begin\n            aux_out[9]  <= #100 aux_out_[9];\n            aux_out[11] <= #100 aux_out_[11];\n        end\n      end\n   end\n   else begin\n      always @(negedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[9]  <= #100 0;\n            aux_out[11] <= #100 0;\n        end\n        else begin\n            aux_out[9]  <= #100 aux_out_[9];\n            aux_out[11] <= #100 aux_out_[11];\n        end\n      end\n   end\nend\nelse begin\n   if ( HIGHEST_BANK > 2)  begin\n       assign phy_din[HIGHEST_LANE_B2*80+640-1:640] = 0;\n       assign _phy_ctl_a_full_p[2] = 0;\n       assign of_ctl_a_full_v[2]   = 0;\n       assign of_ctl_full_v[2]     = 0;\n       assign of_data_a_full_v[2]  = 0;\n       assign of_data_full_v[2]    = 0;\n       assign pre_data_a_full_v[2] = 0;\n       assign if_empty_v[2]        = 0;\n       assign byte_rd_en_v[2]      = 1;\n       assign pi_phase_locked_lanes[HIGHEST_LANE_B2+8-1:8]  = 4'b1111;\n       assign pi_dqs_found_lanes[HIGHEST_LANE_B2+8-1:8]  = 4'b1111;\n       always @(*)\n         aux_out[11:8] = 0;\n   end\n       assign pi_dqs_found_w[2]    = 1;\n       assign pi_dqs_found_all_w[2]    = 1;\n       assign pi_dqs_found_any_w[2]    = 0;\n       assign pi_dqs_out_of_range_w[2]    = 0;\n       assign pi_phase_locked_w[2]    = 1;\n       assign po_coarse_overflow_w[2] = 0;\n       assign po_fine_overflow_w[2] = 0;\n       assign po_counter_read_val_w[2] = 0;\n       assign pi_counter_read_val_w[2] = 0;\n       assign mcGo_w[2] = 1;\nend\nendgenerate\n\ngenerate\n\n\n\n\n\nif ( BYTE_LANES_B1 == 0 && BYTE_LANES_B2 == 0 && RCLK_SELECT_BANK>0)\nbegin : phaser_in_rclk\n\nlocalparam L_EXTRA_PI_FINE_DELAY = DEFAULT_RCLK_DELAY;\n\nPHASER_IN_PHY #(\n  .BURST_MODE                       ( PHY_0_A_BURST_MODE),\n  .CLKOUT_DIV                       ( PHY_0_A_PI_CLKOUT_DIV),\n  .FREQ_REF_DIV                     ( PHY_0_A_PI_FREQ_REF_DIV),\n  .REFCLK_PERIOD                    ( L_FREQ_REF_PERIOD_NS),\n  .FINE_DELAY                       ( L_EXTRA_PI_FINE_DELAY),\n  .OUTPUT_CLK_SRC                   ( RCLK_PI_OUTPUT_CLK_SRC)\n) phaser_in_rclk (\n  .DQSFOUND                         (),\n  .DQSOUTOFRANGE                    (),\n  .FINEOVERFLOW                     (),\n  .PHASELOCKED                      (),\n  .ISERDESRST                       (),\n  .ICLKDIV                          (),\n  .ICLK                             (),\n  .COUNTERREADVAL                   (),\n  .RCLK                             (),\n  .WRENABLE                         (),\n  .BURSTPENDINGPHY                  (),\n  .ENCALIBPHY                       (),\n  .FINEENABLE                       (0),\n  .FREQREFCLK                       (freq_refclk),\n  .MEMREFCLK                        (mem_refclk),\n  .RANKSELPHY                       (0),\n  .PHASEREFCLK                      (),\n  .RSTDQSFIND                       (0),\n  .RST                              (rst),\n  .FINEINC                          (),\n  .COUNTERLOADEN                    (),\n  .COUNTERREADEN                    (),\n  .COUNTERLOADVAL                   (),\n  .SYNCIN                           (sync_pulse),\n  .SYSCLK                           (phy_clk)\n);\n\nend\n\nendgenerate\n\n\n\nalways @(*) begin\n      case (calib_sel[5:3])\n      3'b000: begin\n          po_coarse_overflow  = po_coarse_overflow_w[0];\n          po_fine_overflow    = po_fine_overflow_w[0];\n          po_counter_read_val = po_counter_read_val_w[0];\n          pi_fine_overflow    = pi_fine_overflow_w[0];\n          pi_counter_read_val = pi_counter_read_val_w[0];\n          pi_phase_locked     = pi_phase_locked_w[0];\n          if ( calib_in_common)\n             pi_dqs_found        = pi_dqs_found_any;\n          else\n             pi_dqs_found        = pi_dqs_found_w[0];\n          pi_dqs_out_of_range = pi_dqs_out_of_range_w[0];\n        end\n      3'b001: begin\n          po_coarse_overflow  = po_coarse_overflow_w[1];\n          po_fine_overflow    = po_fine_overflow_w[1];\n          po_counter_read_val = po_counter_read_val_w[1];\n          pi_fine_overflow    = pi_fine_overflow_w[1];\n          pi_counter_read_val = pi_counter_read_val_w[1];\n          pi_phase_locked     = pi_phase_locked_w[1];\n          if ( calib_in_common)\n              pi_dqs_found        = pi_dqs_found_any;\n          else\n              pi_dqs_found        = pi_dqs_found_w[1];\n          pi_dqs_out_of_range = pi_dqs_out_of_range_w[1];\n        end\n      3'b010: begin\n          po_coarse_overflow  = po_coarse_overflow_w[2];\n          po_fine_overflow    = po_fine_overflow_w[2];\n          po_counter_read_val = po_counter_read_val_w[2];\n          pi_fine_overflow    = pi_fine_overflow_w[2];\n          pi_counter_read_val = pi_counter_read_val_w[2];\n          pi_phase_locked     = pi_phase_locked_w[2];\n          if ( calib_in_common)\n             pi_dqs_found        = pi_dqs_found_any;\n          else\n             pi_dqs_found        = pi_dqs_found_w[2];\n          pi_dqs_out_of_range = pi_dqs_out_of_range_w[2];\n        end\n       default: begin\n          po_coarse_overflow  = 0;\n          po_fine_overflow    = 0;\n          po_counter_read_val = 0;\n          pi_fine_overflow    = 0;\n          pi_counter_read_val = 0;\n          pi_phase_locked     = 0;\n          pi_dqs_found        = 0;\n          pi_dqs_out_of_range = 0;\n        end\n       endcase\nend\n\nendmodule \n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: mig_7series_v4_1_ddr_mc_phy. Module specification: This module implements a DDR (Double Data Rate) memory controller PHY (Physical Layer) interface for 7 series FPGAs. It handles the physical layer communication between the memory controller and DDR memory devices, supporting multiple byte lanes and banks. The module has numerous input ports for control signals, clocks, and data, including rst, phy_clk, phy_ctl_wd, and phy_dout. Output ports include phy_din, mem_dq_out, mem_dqs_out, and various status signals. Internal signals are used for calibration, phaser control, and FIFO management. The module is highly configurable through parameters and consists of several sub-blocks, including ddr_phy_4lanes instances for each bank, PHASER_IN_"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_mc_phy\n\nExplanation: This module appears to be a DDR (Double Data Rate) memory controller PHY (Physical Layer) interface for 7 series FPGAs. It handles the physical layer communication between the memory controller and DDR memory devices. The module supports multiple byte lanes and banks, implements timing calibration for read and write operations, and manages various clock domains. It includes features such as phaser control, input/output FIFOs, and delay adjustments for optimal data transfer. The module is highly configurable through numerous parameters to adapt to different memory configurations and FPGA designs."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nBased on the provided Verilog code for the mig_7series_v4_1_ddr_mc_phy module, here are the input and output ports along with brief explanations:\n\nInput ports: rst, ddr_rst_in_n, phy_clk, clk_div2, freq_refclk, mem_refclk, mem_refclk_div4, pll_lock, sync_pulse, auxout_clk, idelayctrl_refclk, phy_dout, phy_cmd_wr_en, phy_data_wr_en, phy_rd_en, phy_ctl_wd, aux_in_1, aux_in_2, data_offset_1, data_offset_2, phy_ctl_wr, if_rst, if_empty_def, cke_in, idelay_ce, idelay_ld, idelay_inc, phyGo, input_sink, phy_write_calib, phy_read_calib, calib_sel, calib_zero_inputs, calib_zero_ctrl, calib_zero_lanes, calib_in_common, po_fine_enable, po_coarse_enable, po_fine_inc, po_coarse_inc, po_counter_load_en, po_sel_fine_oclk_delay, po_counter_load_val, po_counter_read_en, pi_rst_dqs_find, pi_fine_enable, pi_fine_inc, pi_counter_load_en, pi_counter_read_en, pi_counter_load_val, fine_delay, fine_delay_sel.\n\nExplanation: These inputs control various aspects of the DDR PHY, including reset signals, clocks, calibration settings, and control signals for phaser input/output operations.\n\nOutput ports: if_a_empty, if_empty, if_empty_or, if_empty_and, of_ctl_a_full, of_data_a_full, of_ctl_full, of_data_full, pre_data_a_full, phy_din, phy_ctl_a_full, phy_ctl_full, mem_dq_out, mem_dq_ts, mem_dq_in, mem_dqs_out, mem_dqs_ts, mem_dqs_in, aux_out, phy_ctl_ready, rst_out, ddr_clk, mcGo, ref_dll_lock, po_coarse_overflow, po_fine_overflow, po_counter_read_val, pi_fine_overflow, pi_counter_read_val, pi_phase_locked, pi_phase_locked_all, pi_dqs_found, pi_dqs_found_all, pi_dqs_found_any, pi_phase_locked_lanes, pi_dqs_found_lanes, pi_dqs_out_of_range.\n\nExplanation: These outputs provide status information about the PHY operation, including FIFO statuses, data signals for memory interface, control signals, calibration results, and various flags indicating the state of phaser input/output operations and DQS (Data Strobe) detection."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the provided code, here are the internal signals and their explanations:\n\nInternal signals: calib_zero_inputs_int, calib_zero_lanes_int, calib_sel_byte0, calib_sel_byte1, calib_sel_byte2, po_coarse_overflow_w, po_fine_overflow_w, po_counter_read_val_w, pi_fine_overflow_w, pi_counter_read_val_w, pi_dqs_found_w, pi_dqs_found_all_w, pi_dqs_found_any_w, pi_dqs_out_of_range_w, pi_phase_locked_w, pi_phase_locked_all_w, rclk_w, phy_ctl_ready_w, ddr_clk_w, aux_out_, if_q0 to if_q9, _phy_ctl_wd, aux_in_, rst_out_w, freq_refclk_split, mem_refclk_split, mem_refclk_div4_split, sync_pulse_split, phy_clk_split0/1/2, phy_ctl_clk_split0/1/2, phy_ctl_wd_split0/1/2, phy_ctl_wr_split0/1/2, phy_data_offset_1_split1, phy_data_offset_2_split2, phy_dout_split0/1/2, phy_cmd_wr_en_split0/1/2, phy_data_wr_en_split0/1/2, phy_rd_en_split0/1/2, phy_ctl_mstr_empty, phy_ctl_empty, _phy_ctl_a_full_f, _phy_ctl_a_empty_f, _phy_ctl_full_f, _phy_ctl_empty_f, _phy_ctl_a_full_p, _phy_ctl_full_p, of_ctl_a_full_v, of_ctl_full_v, of_data_a_full_v, of_data_full_v, pre_data_a_full_v, if_empty_v, byte_rd_en_v, byte_rd_en_oth_banks, if_empty_or_v, if_empty_and_v, if_a_empty_v, rst_auxout, rst_auxout_r, rst_auxout_rr, mcGo_r.\n\nExplanation: These internal signals serve various purposes within the module:\n- Calibration-related signals (calib_zero_inputs_int, calib_sel_byte0/1/2) are used for configuring and controlling the calibration process.\n- Overflow and counter signals (po_coarse_overflow_w, pi_fine_overflow_w, etc.) are used for tracking phaser input/output operations.\n- DQS-related signals (pi_dqs_found_w, pi_dqs_out_of_range_w, etc.) monitor the status of DQS detection and locking.\n- Clock and reset signals (rclk_w, rst_out_w, etc.) manage timing and reset operations across the module.\n- Split signals (phy_clk_split0/1/2, phy_dout_split0/1/2, etc.) distribute inputs to different banks or lanes.\n- FIFO-related signals (_phy_ctl_a_full_f, of_ctl_full_v, etc.) track the status of various FIFOs in the design.\n- Auxiliary signals (aux_out_, aux_in_) handle additional input/output operations.\n- Synchronization and control signals (mcGo_r, sync_pulse_split) manage overall module operation and synchronization.\n\nThese internal signals work together to implement the complex functionality of the DDR memory controller PHY, handling data transfer, timing, calibration, and control across multiple banks and lanes."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule mig_7series_v4_1_ddr_mc_phy\n #(\n\n      parameter        BYTE_LANES_B0                 = 4'b1111,\n      parameter        BYTE_LANES_B1                 = 4'b0000,\n      parameter        BYTE_LANES_B2                 = 4'b0000,\n      parameter        BYTE_LANES_B3                 = 4'b0000,\n      parameter        BYTE_LANES_B4                 = 4'b0000,\n      parameter        DATA_CTL_B0                   = 4'hc,\n      parameter        DATA_CTL_B1                   = 4'hf,\n      parameter        DATA_CTL_B2                   = 4'hf,\n      parameter        DATA_CTL_B3                   = 4'hf,\n      parameter        DATA_CTL_B4                   = 4'hf,\n      parameter        RCLK_SELECT_BANK              = 0,\n      parameter        RCLK_SELECT_LANE              = \"B\",\n      parameter        RCLK_SELECT_EDGE              = 4'b1111,\n      parameter        GENERATE_DDR_CK_MAP           = \"0B\",\n      parameter        BYTELANES_DDR_CK              = 72'h00_0000_0000_0000_0002,\n      parameter        USE_PRE_POST_FIFO             = \"TRUE\",\n      parameter        SYNTHESIS                     = \"FALSE\",\n      parameter        PO_CTL_COARSE_BYPASS          = \"FALSE\",\n      parameter        PI_SEL_CLK_OFFSET             = 6,\n\n      parameter        PHYCTL_CMD_FIFO               = \"FALSE\",\n      parameter        PHY_CLK_RATIO                 = 4,          \n\n\n      parameter        PHY_FOUR_WINDOW_CLOCKS        = 63,\n      parameter        PHY_EVENTS_DELAY              = 18,\n      parameter        PHY_COUNT_EN                  = \"TRUE\",\n      parameter        PHY_SYNC_MODE                 = \"TRUE\",\n      parameter        PHY_DISABLE_SEQ_MATCH         = \"FALSE\",\n      parameter        MASTER_PHY_CTL                = 0,\n\n      parameter        PHY_0_BITLANES                = 48'hdffd_fffe_dfff,\n      parameter        PHY_0_BITLANES_OUTONLY        = 48'h0000_0000_0000,\n      parameter        PHY_0_LANE_REMAP              = 16'h3210,\n      parameter        PHY_0_GENERATE_IDELAYCTRL     = \"FALSE\",\n      parameter        PHY_0_IODELAY_GRP             = \"IODELAY_MIG\",\n      parameter        FPGA_SPEED_GRADE              = 1,\n      parameter        BANK_TYPE                     = \"HP_IO\", \n      parameter        NUM_DDR_CK                    = 1,\n      parameter        PHY_0_DATA_CTL                = DATA_CTL_B0,\n      parameter        PHY_0_CMD_OFFSET              = 0,\n      parameter        PHY_0_RD_CMD_OFFSET_0         = 0,\n      parameter        PHY_0_RD_CMD_OFFSET_1         = 0,\n      parameter        PHY_0_RD_CMD_OFFSET_2         = 0,\n      parameter        PHY_0_RD_CMD_OFFSET_3         = 0,\n      parameter        PHY_0_RD_DURATION_0           = 0,\n      parameter        PHY_0_RD_DURATION_1           = 0,\n      parameter        PHY_0_RD_DURATION_2           = 0,\n      parameter        PHY_0_RD_DURATION_3           = 0,\n      parameter        PHY_0_WR_CMD_OFFSET_0         = 0,\n      parameter        PHY_0_WR_CMD_OFFSET_1         = 0,\n      parameter        PHY_0_WR_CMD_OFFSET_2         = 0,\n      parameter        PHY_0_WR_CMD_OFFSET_3         = 0,\n      parameter        PHY_0_WR_DURATION_0           = 0,\n      parameter        PHY_0_WR_DURATION_1           = 0,\n      parameter        PHY_0_WR_DURATION_2           = 0,\n      parameter        PHY_0_WR_DURATION_3           = 0,\n      parameter        PHY_0_AO_WRLVL_EN             = 0,\n      parameter        PHY_0_AO_TOGGLE               = 4'b0101, \n      parameter        PHY_0_OF_ALMOST_FULL_VALUE    = 1,\n      parameter        PHY_0_IF_ALMOST_EMPTY_VALUE   = 1,\n\n      parameter        PHY_0_A_PI_FREQ_REF_DIV       = \"NONE\",\n      parameter        PHY_0_A_PI_CLKOUT_DIV         = 2,\n      parameter        PHY_0_A_PO_CLKOUT_DIV         = 2,\n      parameter        PHY_0_A_BURST_MODE            = \"TRUE\",\n      parameter        PHY_0_A_PI_OUTPUT_CLK_SRC     = \"DELAYED_REF\",\n      parameter        PHY_0_A_PO_OUTPUT_CLK_SRC     = \"DELAYED_REF\",\n      parameter        PHY_0_A_PO_OCLK_DELAY         = 25,\n      parameter        PHY_0_B_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_0_C_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_0_D_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_0_A_PO_OCLKDELAY_INV      = \"FALSE\",\n      parameter        PHY_0_A_OF_ARRAY_MODE         = \"ARRAY_MODE_8_X_4\",\n      parameter        PHY_0_B_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_C_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_D_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_A_IF_ARRAY_MODE         = \"ARRAY_MODE_8_X_4\",\n      parameter        PHY_0_B_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_C_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_D_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_0_A_OSERDES_DATA_RATE     = \"UNDECLARED\",\n      parameter        PHY_0_A_OSERDES_DATA_WIDTH    = \"UNDECLARED\",\n      parameter        PHY_0_B_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_0_B_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_0_C_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_0_C_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_0_D_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_0_D_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_0_A_IDELAYE2_IDELAY_TYPE  = \"VARIABLE\",\n      parameter        PHY_0_A_IDELAYE2_IDELAY_VALUE = 00,\n      parameter        PHY_0_B_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_0_B_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_0_C_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_0_C_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_0_D_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_0_D_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n\n\n      parameter        PHY_1_BITLANES                = PHY_0_BITLANES,\n      parameter        PHY_1_BITLANES_OUTONLY        = 48'h0000_0000_0000,\n      parameter        PHY_1_LANE_REMAP              = 16'h3210,\n      parameter        PHY_1_GENERATE_IDELAYCTRL     =  \"FALSE\",\n      parameter        PHY_1_IODELAY_GRP             = PHY_0_IODELAY_GRP,\n      parameter        PHY_1_DATA_CTL                = DATA_CTL_B1,\n      parameter        PHY_1_CMD_OFFSET              = PHY_0_CMD_OFFSET,\n      parameter        PHY_1_RD_CMD_OFFSET_0         = PHY_0_RD_CMD_OFFSET_0,\n      parameter        PHY_1_RD_CMD_OFFSET_1         = PHY_0_RD_CMD_OFFSET_1,\n      parameter        PHY_1_RD_CMD_OFFSET_2         = PHY_0_RD_CMD_OFFSET_2,\n      parameter        PHY_1_RD_CMD_OFFSET_3         = PHY_0_RD_CMD_OFFSET_3,\n      parameter        PHY_1_RD_DURATION_0           = PHY_0_RD_DURATION_0,\n      parameter        PHY_1_RD_DURATION_1           = PHY_0_RD_DURATION_1,\n      parameter        PHY_1_RD_DURATION_2           = PHY_0_RD_DURATION_2,\n      parameter        PHY_1_RD_DURATION_3           = PHY_0_RD_DURATION_3,\n      parameter        PHY_1_WR_CMD_OFFSET_0         = PHY_0_WR_CMD_OFFSET_0,\n      parameter        PHY_1_WR_CMD_OFFSET_1         = PHY_0_WR_CMD_OFFSET_1,\n      parameter        PHY_1_WR_CMD_OFFSET_2         = PHY_0_WR_CMD_OFFSET_2,\n      parameter        PHY_1_WR_CMD_OFFSET_3         = PHY_0_WR_CMD_OFFSET_3,\n      parameter        PHY_1_WR_DURATION_0           = PHY_0_WR_DURATION_0,\n      parameter        PHY_1_WR_DURATION_1           = PHY_0_WR_DURATION_1,\n      parameter        PHY_1_WR_DURATION_2           = PHY_0_WR_DURATION_2,\n      parameter        PHY_1_WR_DURATION_3           = PHY_0_WR_DURATION_3,\n      parameter        PHY_1_AO_WRLVL_EN             = PHY_0_AO_WRLVL_EN,\n      parameter        PHY_1_AO_TOGGLE               = PHY_0_AO_TOGGLE, \n      parameter        PHY_1_OF_ALMOST_FULL_VALUE    = 1,\n      parameter        PHY_1_IF_ALMOST_EMPTY_VALUE   = 1,\n\n      parameter        PHY_1_A_PI_FREQ_REF_DIV       = PHY_0_A_PI_FREQ_REF_DIV,\n      parameter        PHY_1_A_PI_CLKOUT_DIV         = PHY_0_A_PI_CLKOUT_DIV,\n      parameter        PHY_1_A_PO_CLKOUT_DIV         = PHY_0_A_PO_CLKOUT_DIV,\n      parameter        PHY_1_A_BURST_MODE            = PHY_0_A_BURST_MODE,\n      parameter        PHY_1_A_PI_OUTPUT_CLK_SRC     = PHY_0_A_PI_OUTPUT_CLK_SRC,\n      parameter        PHY_1_A_PO_OUTPUT_CLK_SRC     = PHY_0_A_PO_OUTPUT_CLK_SRC ,\n      parameter        PHY_1_A_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_1_B_PO_OCLK_DELAY         = PHY_1_A_PO_OCLK_DELAY,\n      parameter        PHY_1_C_PO_OCLK_DELAY         = PHY_1_A_PO_OCLK_DELAY,\n      parameter        PHY_1_D_PO_OCLK_DELAY         = PHY_1_A_PO_OCLK_DELAY,\n      parameter        PHY_1_A_PO_OCLKDELAY_INV      = PHY_0_A_PO_OCLKDELAY_INV,\n      parameter        PHY_1_A_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_1_A_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_1_B_IDELAYE2_IDELAY_TYPE  = PHY_1_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_1_B_IDELAYE2_IDELAY_VALUE = PHY_1_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_1_C_IDELAYE2_IDELAY_TYPE  = PHY_1_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_1_C_IDELAYE2_IDELAY_VALUE = PHY_1_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_1_D_IDELAYE2_IDELAY_TYPE  = PHY_1_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_1_D_IDELAYE2_IDELAY_VALUE = PHY_1_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_1_A_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_B_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_C_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_D_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_A_IF_ARRAY_MODE         = PHY_0_A_IF_ARRAY_MODE,\n      parameter        PHY_1_B_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_C_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_D_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_1_A_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_1_A_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_1_B_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_1_B_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_1_C_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_1_C_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_1_D_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_1_D_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n\n\n      parameter        PHY_2_BITLANES                = PHY_0_BITLANES,\n      parameter        PHY_2_BITLANES_OUTONLY        = 48'h0000_0000_0000,\n      parameter        PHY_2_LANE_REMAP              = 16'h3210,\n      parameter        PHY_2_GENERATE_IDELAYCTRL     =  \"FALSE\",\n      parameter        PHY_2_IODELAY_GRP             = PHY_0_IODELAY_GRP,\n      parameter        PHY_2_DATA_CTL                = DATA_CTL_B2,\n      parameter        PHY_2_CMD_OFFSET              = PHY_0_CMD_OFFSET,\n      parameter        PHY_2_RD_CMD_OFFSET_0         = PHY_0_RD_CMD_OFFSET_0,\n      parameter        PHY_2_RD_CMD_OFFSET_1         = PHY_0_RD_CMD_OFFSET_1,\n      parameter        PHY_2_RD_CMD_OFFSET_2         = PHY_0_RD_CMD_OFFSET_2,\n      parameter        PHY_2_RD_CMD_OFFSET_3         = PHY_0_RD_CMD_OFFSET_3,\n      parameter        PHY_2_RD_DURATION_0           = PHY_0_RD_DURATION_0,\n      parameter        PHY_2_RD_DURATION_1           = PHY_0_RD_DURATION_1,\n      parameter        PHY_2_RD_DURATION_2           = PHY_0_RD_DURATION_2,\n      parameter        PHY_2_RD_DURATION_3           = PHY_0_RD_DURATION_3,\n      parameter        PHY_2_WR_CMD_OFFSET_0         = PHY_0_WR_CMD_OFFSET_0,\n      parameter        PHY_2_WR_CMD_OFFSET_1         = PHY_0_WR_CMD_OFFSET_1,\n      parameter        PHY_2_WR_CMD_OFFSET_2         = PHY_0_WR_CMD_OFFSET_2,\n      parameter        PHY_2_WR_CMD_OFFSET_3         = PHY_0_WR_CMD_OFFSET_3,\n      parameter        PHY_2_WR_DURATION_0           = PHY_0_WR_DURATION_0,\n      parameter        PHY_2_WR_DURATION_1           = PHY_0_WR_DURATION_1,\n      parameter        PHY_2_WR_DURATION_2           = PHY_0_WR_DURATION_2,\n      parameter        PHY_2_WR_DURATION_3           = PHY_0_WR_DURATION_3,\n      parameter        PHY_2_AO_WRLVL_EN             = PHY_0_AO_WRLVL_EN,\n      parameter        PHY_2_AO_TOGGLE               = PHY_0_AO_TOGGLE, \n      parameter        PHY_2_OF_ALMOST_FULL_VALUE    = 1,\n      parameter        PHY_2_IF_ALMOST_EMPTY_VALUE   = 1,\n\n      parameter        PHY_2_A_PI_FREQ_REF_DIV       = PHY_0_A_PI_FREQ_REF_DIV,\n      parameter        PHY_2_A_PI_CLKOUT_DIV         = PHY_0_A_PI_CLKOUT_DIV ,\n      parameter        PHY_2_A_PO_CLKOUT_DIV         = PHY_0_A_PO_CLKOUT_DIV,\n      parameter        PHY_2_A_BURST_MODE            = PHY_0_A_BURST_MODE ,\n      parameter        PHY_2_A_PI_OUTPUT_CLK_SRC     = PHY_0_A_PI_OUTPUT_CLK_SRC,\n      parameter        PHY_2_A_PO_OUTPUT_CLK_SRC     = PHY_0_A_PO_OUTPUT_CLK_SRC,\n      parameter        PHY_2_A_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_B_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_C_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_D_OF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_A_IF_ARRAY_MODE         = PHY_0_A_IF_ARRAY_MODE,\n      parameter        PHY_2_B_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_C_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_D_IF_ARRAY_MODE         = PHY_0_A_OF_ARRAY_MODE,\n      parameter        PHY_2_A_PO_OCLK_DELAY         = PHY_0_A_PO_OCLK_DELAY,\n      parameter        PHY_2_B_PO_OCLK_DELAY         = PHY_2_A_PO_OCLK_DELAY,\n      parameter        PHY_2_C_PO_OCLK_DELAY         = PHY_2_A_PO_OCLK_DELAY,\n      parameter        PHY_2_D_PO_OCLK_DELAY         = PHY_2_A_PO_OCLK_DELAY,\n      parameter        PHY_2_A_PO_OCLKDELAY_INV      = PHY_0_A_PO_OCLKDELAY_INV,\n      parameter        PHY_2_A_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_2_A_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_2_B_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_2_B_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_2_C_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_2_C_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_2_D_OSERDES_DATA_RATE     = PHY_0_A_OSERDES_DATA_RATE,\n      parameter        PHY_2_D_OSERDES_DATA_WIDTH    = PHY_0_A_OSERDES_DATA_WIDTH,\n      parameter        PHY_2_A_IDELAYE2_IDELAY_TYPE  = PHY_0_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_2_A_IDELAYE2_IDELAY_VALUE = PHY_0_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_2_B_IDELAYE2_IDELAY_TYPE  = PHY_2_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_2_B_IDELAYE2_IDELAY_VALUE = PHY_2_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_2_C_IDELAYE2_IDELAY_TYPE  = PHY_2_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_2_C_IDELAYE2_IDELAY_VALUE = PHY_2_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_2_D_IDELAYE2_IDELAY_TYPE  = PHY_2_A_IDELAYE2_IDELAY_TYPE,\n      parameter        PHY_2_D_IDELAYE2_IDELAY_VALUE = PHY_2_A_IDELAYE2_IDELAY_VALUE,\n      parameter        PHY_0_IS_LAST_BANK   = ((BYTE_LANES_B1 != 0) || (BYTE_LANES_B2 != 0) || (BYTE_LANES_B3 != 0) || (BYTE_LANES_B4 != 0)) ?  \"FALSE\" : \"TRUE\",\n      parameter        PHY_1_IS_LAST_BANK   = ((BYTE_LANES_B1 != 0) && ((BYTE_LANES_B2 != 0) || (BYTE_LANES_B3 != 0) || (BYTE_LANES_B4 != 0))) ?  \"FALSE\" : ((PHY_0_IS_LAST_BANK) ? \"FALSE\" : \"TRUE\"),\n      parameter        PHY_2_IS_LAST_BANK   = (BYTE_LANES_B2 != 0) && ((BYTE_LANES_B3 != 0) || (BYTE_LANES_B4 != 0)) ?  \"FALSE\" : ((PHY_0_IS_LAST_BANK || PHY_1_IS_LAST_BANK) ? \"FALSE\" : \"TRUE\"),\n      parameter        TCK = 2500,\n\n\n      parameter        N_LANES = (0+BYTE_LANES_B0[0]) + (0+BYTE_LANES_B0[1]) + (0+BYTE_LANES_B0[2]) + (0+BYTE_LANES_B0[3])\n      +  (0+BYTE_LANES_B1[0]) + (0+BYTE_LANES_B1[1]) + (0+BYTE_LANES_B1[2]) + (0+BYTE_LANES_B1[3])  + (0+BYTE_LANES_B2[0]) + (0+BYTE_LANES_B2[1]) + (0+BYTE_LANES_B2[2]) + (0+BYTE_LANES_B2[3])\n      ,  \n      parameter HIGHEST_BANK = (BYTE_LANES_B4 != 0 ? 5 : (BYTE_LANES_B3 != 0 ? 4 : (BYTE_LANES_B2 != 0 ? 3 :  (BYTE_LANES_B1 != 0  ? 2 : 1)))),\n      parameter HIGHEST_LANE_B0  =   ((PHY_0_IS_LAST_BANK == \"FALSE\") ? 4 : BYTE_LANES_B0[3] ? 4 : BYTE_LANES_B0[2] ? 3 : BYTE_LANES_B0[1] ? 2 : BYTE_LANES_B0[0] ? 1 : 0)  ,\n      parameter HIGHEST_LANE_B1  = (HIGHEST_BANK > 2) ? 4 : ( BYTE_LANES_B1[3] ? 4 : BYTE_LANES_B1[2] ? 3 : BYTE_LANES_B1[1] ? 2 : BYTE_LANES_B1[0] ? 1 : 0) ,\n      parameter HIGHEST_LANE_B2  = (HIGHEST_BANK > 3) ? 4 : ( BYTE_LANES_B2[3] ? 4 : BYTE_LANES_B2[2] ? 3 : BYTE_LANES_B2[1] ? 2 : BYTE_LANES_B2[0] ? 1 : 0) ,\n      parameter HIGHEST_LANE_B3  = 0,\n      parameter HIGHEST_LANE_B4  = 0,\n\n      parameter HIGHEST_LANE = (HIGHEST_LANE_B4 != 0) ? (HIGHEST_LANE_B4+16) : ((HIGHEST_LANE_B3 != 0) ? (HIGHEST_LANE_B3 + 12) : ((HIGHEST_LANE_B2 != 0) ? (HIGHEST_LANE_B2 + 8)  : ((HIGHEST_LANE_B1 != 0) ? (HIGHEST_LANE_B1 + 4) : HIGHEST_LANE_B0))),\n      parameter LP_DDR_CK_WIDTH = 2,\n      parameter GENERATE_SIGNAL_SPLIT = \"FALSE\"\n      ,parameter CKE_ODT_AUX = \"FALSE\"\n      ,parameter PI_DIV2_INCDEC = \"FALSE\"\n )\n (\n      input            rst,\n      input            ddr_rst_in_n ,\n      input            phy_clk,\n      input            clk_div2,\n      input            freq_refclk,\n      input            mem_refclk,\n      input            mem_refclk_div4,\n      input            pll_lock,\n      input            sync_pulse,\n      input            auxout_clk,\n      input            idelayctrl_refclk,\n      input [HIGHEST_LANE*80-1:0]    phy_dout,\n      input            phy_cmd_wr_en,\n      input            phy_data_wr_en,\n      input            phy_rd_en,\n      input [31:0]     phy_ctl_wd,\n      input [3:0]      aux_in_1,\n      input [3:0]      aux_in_2,\n      input [5:0]      data_offset_1,\n      input [5:0]      data_offset_2,\n      input            phy_ctl_wr,\n      input            if_rst,\n      input            if_empty_def,\n      input            cke_in,\n      input            idelay_ce,\n      input            idelay_ld,\n      input            idelay_inc,\n      input            phyGo,\n      input            input_sink,\n      output           if_a_empty,\n      output           if_empty ,\n      output           if_empty_or,\n      output           if_empty_and,\n      output           of_ctl_a_full,\n      output           of_data_a_full,\n      output           of_ctl_full,\n      output           of_data_full,\n      output           pre_data_a_full,\n      output [HIGHEST_LANE*80-1:0]   phy_din,\n      output           phy_ctl_a_full,\n      output wire [3:0]      phy_ctl_full,\n      output [HIGHEST_LANE*12-1:0] mem_dq_out,\n      output [HIGHEST_LANE*12-1:0] mem_dq_ts,\n      input  [HIGHEST_LANE*10-1:0] mem_dq_in,\n      output [HIGHEST_LANE-1:0]    mem_dqs_out,\n      output [HIGHEST_LANE-1:0]    mem_dqs_ts,\n      input  [HIGHEST_LANE-1:0]    mem_dqs_in,\n\n(* IOB = \"FORCE\" *) output reg [(((HIGHEST_LANE+3)/4)*4)-1:0] aux_out, \n      output           phy_ctl_ready,          \n      output reg       rst_out,                \n      output [(NUM_DDR_CK * LP_DDR_CK_WIDTH)-1:0]  ddr_clk,\n\n      output           mcGo,\n      output           ref_dll_lock,\n\n      input            phy_write_calib,\n      input            phy_read_calib,\n      input  [5:0]     calib_sel,\n      input  [HIGHEST_BANK-1:0]calib_zero_inputs, \n      input  [HIGHEST_BANK-1:0]calib_zero_ctrl,  \n      input  [HIGHEST_LANE-1:0] calib_zero_lanes, \n      input            calib_in_common,\n      input  [2:0]     po_fine_enable,\n      input  [2:0]     po_coarse_enable,\n      input  [2:0]     po_fine_inc,\n      input  [2:0]     po_coarse_inc,\n      input            po_counter_load_en,\n      input  [2:0]     po_sel_fine_oclk_delay,\n      input  [8:0]     po_counter_load_val,\n      input            po_counter_read_en,\n      output reg       po_coarse_overflow,\n      output reg       po_fine_overflow,\n      output reg [8:0] po_counter_read_val,\n\n\n      input [HIGHEST_BANK-1:0] pi_rst_dqs_find,\n      input            pi_fine_enable,\n      input            pi_fine_inc,\n      input            pi_counter_load_en,\n      input            pi_counter_read_en,\n      input  [5:0]     pi_counter_load_val,\n      output reg       pi_fine_overflow,\n      output reg [5:0] pi_counter_read_val,\n\n      output reg       pi_phase_locked,\n      output           pi_phase_locked_all,\n      output reg       pi_dqs_found,\n      output           pi_dqs_found_all,\n      output           pi_dqs_found_any,\n      output [HIGHEST_LANE-1:0] pi_phase_locked_lanes,\n      output [HIGHEST_LANE-1:0] pi_dqs_found_lanes,\n      output reg       pi_dqs_out_of_range,\n      input [29:0]     fine_delay,\n      input            fine_delay_sel\n );\n\n\nwire  [7:0]     calib_zero_inputs_int ;\nwire  [HIGHEST_BANK*4-1:0]     calib_zero_lanes_int ;\n\n\nwire  [2:0]     calib_sel_byte0 ;\nwire  [2:0]     calib_sel_byte1 ;\nwire  [2:0]     calib_sel_byte2 ;\n\nwire  [4:0]     po_coarse_overflow_w;\nwire  [4:0]     po_fine_overflow_w;\nwire  [8:0]     po_counter_read_val_w[4:0];\nwire  [4:0]     pi_fine_overflow_w;\nwire  [5:0]     pi_counter_read_val_w[4:0];\nwire  [4:0]     pi_dqs_found_w;\nwire  [4:0]     pi_dqs_found_all_w;\nwire  [4:0]     pi_dqs_found_any_w;\nwire  [4:0]     pi_dqs_out_of_range_w;\nwire  [4:0]     pi_phase_locked_w;\nwire  [4:0]     pi_phase_locked_all_w;\nwire  [4:0]     rclk_w;\nwire  [HIGHEST_BANK-1:0]     phy_ctl_ready_w;\nwire  [(LP_DDR_CK_WIDTH*24)-1:0]     ddr_clk_w [HIGHEST_BANK-1:0];\nwire  [(((HIGHEST_LANE+3)/4)*4)-1:0] aux_out_;\n\n\nwire [3:0]    if_q0;\nwire [3:0]    if_q1;\nwire [3:0]    if_q2;\nwire [3:0]    if_q3;\nwire [3:0]    if_q4;\nwire [7:0]    if_q5;\nwire [7:0]    if_q6;\nwire [3:0]    if_q7;\nwire [3:0]    if_q8;\nwire [3:0]    if_q9;\n\nwire [31:0]   _phy_ctl_wd;\nwire [3:0]    aux_in_[4:1];\nwire [3:0]    rst_out_w;\n\nwire           freq_refclk_split;\nwire           mem_refclk_split;\nwire           mem_refclk_div4_split;\nwire           sync_pulse_split;\nwire           phy_clk_split0;\nwire           phy_ctl_clk_split0;\nwire  [31:0]   phy_ctl_wd_split0;\nwire           phy_ctl_wr_split0;\nwire           phy_ctl_clk_split1;\nwire           phy_clk_split1;\nwire  [31:0]   phy_ctl_wd_split1;\nwire           phy_ctl_wr_split1;\nwire  [5:0]    phy_data_offset_1_split1;\nwire           phy_ctl_clk_split2;\nwire           phy_clk_split2;\nwire  [31:0]   phy_ctl_wd_split2;\nwire           phy_ctl_wr_split2;\nwire  [5:0]    phy_data_offset_2_split2;\nwire  [HIGHEST_LANE*80-1:0] phy_dout_split0;\nwire           phy_cmd_wr_en_split0;\nwire           phy_data_wr_en_split0;\nwire           phy_rd_en_split0;\nwire  [HIGHEST_LANE*80-1:0] phy_dout_split1;\nwire           phy_cmd_wr_en_split1;\nwire           phy_data_wr_en_split1;\nwire           phy_rd_en_split1;\nwire  [HIGHEST_LANE*80-1:0] phy_dout_split2;\nwire           phy_cmd_wr_en_split2;\nwire           phy_data_wr_en_split2;\nwire           phy_rd_en_split2;\n\nwire          phy_ctl_mstr_empty;\nwire  [HIGHEST_BANK-1:0] phy_ctl_empty;\n\nwire          _phy_ctl_a_full_f;\nwire          _phy_ctl_a_empty_f;\nwire          _phy_ctl_full_f;\nwire          _phy_ctl_empty_f;\nwire  [HIGHEST_BANK-1:0] _phy_ctl_a_full_p;\nwire  [HIGHEST_BANK-1:0] _phy_ctl_full_p;\nwire  [HIGHEST_BANK-1:0]  of_ctl_a_full_v;\nwire  [HIGHEST_BANK-1:0]  of_ctl_full_v;\nwire  [HIGHEST_BANK-1:0]  of_data_a_full_v;\nwire  [HIGHEST_BANK-1:0]  of_data_full_v;\nwire  [HIGHEST_BANK-1:0]  pre_data_a_full_v;\nwire  [HIGHEST_BANK-1:0]  if_empty_v;\nwire  [HIGHEST_BANK-1:0]  byte_rd_en_v;\nwire  [HIGHEST_BANK*2-1:0]  byte_rd_en_oth_banks;\nwire  [HIGHEST_BANK-1:0]  if_empty_or_v;\nwire  [HIGHEST_BANK-1:0]  if_empty_and_v;\nwire  [HIGHEST_BANK-1:0]  if_a_empty_v;\n\nlocalparam IF_ARRAY_MODE         = \"ARRAY_MODE_4_X_4\";\nlocalparam IF_SYNCHRONOUS_MODE   = \"FALSE\";\nlocalparam IF_SLOW_WR_CLK        = \"FALSE\";\nlocalparam IF_SLOW_RD_CLK        = \"FALSE\";\n\nlocalparam PHY_MULTI_REGION      = (HIGHEST_BANK > 1) ? \"TRUE\" : \"FALSE\";\nlocalparam RCLK_NEG_EDGE         = 3'b000;\nlocalparam RCLK_POS_EDGE         = 3'b111;\n\nlocalparam LP_PHY_0_BYTELANES_DDR_CK     =  BYTELANES_DDR_CK & 24'hFF_FFFF;\nlocalparam LP_PHY_1_BYTELANES_DDR_CK     = (BYTELANES_DDR_CK >> 24) & 24'hFF_FFFF;\nlocalparam LP_PHY_2_BYTELANES_DDR_CK     = (BYTELANES_DDR_CK >> 48) & 24'hFF_FFFF;\n\n\nlocalparam PC_DATA_OFFSET_RANGE_HI    = 22;\nlocalparam PC_DATA_OFFSET_RANGE_LO    = 17;\n\n\n\n\n\n\n\n\n\n\nlocalparam  RCLK_PI_OUTPUT_CLK_SRC = \"DELAYED_MEM_REF\";\n\n\nlocalparam  DDR_TCK = TCK;\n\nlocalparam  real FREQ_REF_PERIOD = DDR_TCK / (PHY_0_A_PI_FREQ_REF_DIV == \"DIV2\" ? 2 : 1);\nlocalparam  real L_FREQ_REF_PERIOD_NS = FREQ_REF_PERIOD /1000.0;\nlocalparam  PO_S3_TAPS      = 64 ;  \nlocalparam  PI_S2_TAPS      = 128 ; \nlocalparam  PO_S2_TAPS      = 128 ; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocalparam  real PI_STG1_INTRINSIC_DELAY  =  (RCLK_PI_OUTPUT_CLK_SRC == \"DELAYED_MEM_REF\") ? 0.0 :\n                     ((DDR_TCK < 1005) ? 0.667 :\n                      (DDR_TCK < 1160) ? 0.752 :\n                      (DDR_TCK < 1375) ? 0.868 :\n                      (DDR_TCK < 1685) ? 1.021 :\n                      (DDR_TCK < 2185) ? 1.263 :\n                      (DDR_TCK < 2900) ? 1.657 :\n                      (DDR_TCK < 3100) ? 1.771 : 1.939)*1000;\n\n\n\n\n\n\n\n\n\n\n\n\nlocalparam  real PI_STG2_INTRINSIC_DELAY  = (0.4218*FREQ_REF_PERIOD + 200) + 16.75;  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocalparam  real  PO_STG1_INTRINSIC_DELAY  = 0;\nlocalparam  real  PO_STG2_FINE_INTRINSIC_DELAY    = 0.4218*FREQ_REF_PERIOD + 200 + 42; \nlocalparam  real  PO_STG2_COARSE_INTRINSIC_DELAY  = 0.2256*FREQ_REF_PERIOD + 200 + 29; \nlocalparam  real  PO_STG2_INTRINSIC_DELAY  = PO_STG2_FINE_INTRINSIC_DELAY +\n                                            (PO_CTL_COARSE_BYPASS  == \"TRUE\" ? 30 : PO_STG2_COARSE_INTRINSIC_DELAY);\n\n\n\n\n\n\nlocalparam  real    PO_S2_TAPS_SIZE        = 1.0*FREQ_REF_PERIOD / PO_S2_TAPS ; \nlocalparam  real    PO_CIRC_BUF_META_ZONE  = 200.0;\nlocalparam          PO_CIRC_BUF_EARLY      = (PO_STG2_INTRINSIC_DELAY < DDR_TCK) ? 1'b1 : 1'b0;\nlocalparam  real    PO_CIRC_BUF_OFFSET     = (PO_STG2_INTRINSIC_DELAY < DDR_TCK) ? DDR_TCK - PO_STG2_INTRINSIC_DELAY : PO_STG2_INTRINSIC_DELAY - DDR_TCK;\n\n\n\n\nlocalparam  integer PO_CIRC_BUF_DELAY   = 60;\n\n\n\n\n\nlocalparam  real    PI_S2_TAPS_SIZE     = 1.0*FREQ_REF_PERIOD / PI_S2_TAPS ; \nlocalparam  real    PI_MAX_STG2_DELAY   = (PI_S2_TAPS/2 - 1) * PI_S2_TAPS_SIZE;\nlocalparam  real    PI_INTRINSIC_DELAY  = PI_STG1_INTRINSIC_DELAY + PI_STG2_INTRINSIC_DELAY;\nlocalparam  real    PO_INTRINSIC_DELAY  = PO_STG1_INTRINSIC_DELAY + PO_STG2_INTRINSIC_DELAY;\nlocalparam  real    PO_DELAY            = PO_INTRINSIC_DELAY + (PO_CIRC_BUF_DELAY*PO_S2_TAPS_SIZE);\nlocalparam          RCLK_BUFIO_DELAY    = 1200; \n\n\n\n\nlocalparam integer  RCLK_DELAY_INT= (PI_INTRINSIC_DELAY + RCLK_BUFIO_DELAY);\nlocalparam integer  PO_DELAY_INT  = PO_DELAY;\nlocalparam PI_OFFSET   = (PO_DELAY_INT % DDR_TCK) - (RCLK_DELAY_INT % DDR_TCK);\n\n\n\n\nlocalparam  real    PI_STG2_DELAY_CAND = PI_OFFSET >= 0\n                                          ? PI_OFFSET\n                                          : ((-PI_OFFSET) <  DDR_TCK/2) ?\n                                            (DDR_TCK/2 - (- PI_OFFSET)) :\n                                            (DDR_TCK   - (- PI_OFFSET)) ;\n\nlocalparam  real    PI_STG2_DELAY       =\n                                          (PI_STG2_DELAY_CAND > PI_MAX_STG2_DELAY ?\n                                          PI_MAX_STG2_DELAY : PI_STG2_DELAY_CAND);\nlocalparam  integer DEFAULT_RCLK_DELAY  = PI_STG2_DELAY / PI_S2_TAPS_SIZE;\n\nlocalparam          LP_RCLK_SELECT_EDGE    = (RCLK_SELECT_EDGE != 4'b1111 ) ? RCLK_SELECT_EDGE : (PI_OFFSET >= 0 ? RCLK_POS_EDGE : (PI_OFFSET <= TCK/2 ?  RCLK_NEG_EDGE : RCLK_POS_EDGE));\n\nlocalparam  integer L_PHY_0_PO_FINE_DELAY = PO_CIRC_BUF_DELAY ;\nlocalparam  integer L_PHY_1_PO_FINE_DELAY = PO_CIRC_BUF_DELAY ;\nlocalparam  integer L_PHY_2_PO_FINE_DELAY = PO_CIRC_BUF_DELAY ;\n\nlocalparam  L_PHY_0_A_PI_FINE_DELAY = (RCLK_SELECT_BANK == 0 && ! DATA_CTL_B0[0]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_0_B_PI_FINE_DELAY = (RCLK_SELECT_BANK == 0 && ! DATA_CTL_B0[1]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_0_C_PI_FINE_DELAY = (RCLK_SELECT_BANK == 0 && ! DATA_CTL_B0[2]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_0_D_PI_FINE_DELAY = (RCLK_SELECT_BANK == 0 && ! DATA_CTL_B0[3]) ? DEFAULT_RCLK_DELAY  : 33 ;\n\nlocalparam  L_PHY_1_A_PI_FINE_DELAY = (RCLK_SELECT_BANK == 1 && ! DATA_CTL_B1[0]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_1_B_PI_FINE_DELAY = (RCLK_SELECT_BANK == 1 && ! DATA_CTL_B1[1]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_1_C_PI_FINE_DELAY = (RCLK_SELECT_BANK == 1 && ! DATA_CTL_B1[2]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_1_D_PI_FINE_DELAY = (RCLK_SELECT_BANK == 1 && ! DATA_CTL_B1[3]) ? DEFAULT_RCLK_DELAY  : 33 ;\n\nlocalparam  L_PHY_2_A_PI_FINE_DELAY = (RCLK_SELECT_BANK == 2 && ! DATA_CTL_B2[0]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_2_B_PI_FINE_DELAY = (RCLK_SELECT_BANK == 2 && ! DATA_CTL_B2[1]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_2_C_PI_FINE_DELAY = (RCLK_SELECT_BANK == 2 && ! DATA_CTL_B2[2]) ? DEFAULT_RCLK_DELAY  : 33 ;\nlocalparam  L_PHY_2_D_PI_FINE_DELAY = (RCLK_SELECT_BANK == 2 && ! DATA_CTL_B2[3]) ? DEFAULT_RCLK_DELAY  : 33 ;\n\n\nlocalparam  L_PHY_0_A_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 0) ? (RCLK_SELECT_LANE == \"A\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_0_B_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 0) ? (RCLK_SELECT_LANE == \"B\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_0_C_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 0) ? (RCLK_SELECT_LANE == \"C\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_0_D_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 0) ? (RCLK_SELECT_LANE == \"D\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC : PHY_0_A_PI_OUTPUT_CLK_SRC;\n\nlocalparam  L_PHY_1_A_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 1) ? (RCLK_SELECT_LANE == \"A\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_1_B_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 1) ? (RCLK_SELECT_LANE == \"B\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_1_C_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 1) ? (RCLK_SELECT_LANE == \"C\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_1_D_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 1) ? (RCLK_SELECT_LANE == \"D\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC : PHY_1_A_PI_OUTPUT_CLK_SRC;\n\nlocalparam  L_PHY_2_A_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 2) ? (RCLK_SELECT_LANE == \"A\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_2_B_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 2) ? (RCLK_SELECT_LANE == \"B\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_2_C_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 2) ? (RCLK_SELECT_LANE == \"C\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC;\nlocalparam  L_PHY_2_D_PI_OUTPUT_CLK_SRC = (RCLK_SELECT_BANK == 2) ? (RCLK_SELECT_LANE == \"D\") ? RCLK_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC : PHY_2_A_PI_OUTPUT_CLK_SRC;\n\nwire _phy_clk;\n\nwire [2:0] mcGo_w;\nwire [HIGHEST_BANK-1:0] ref_dll_lock_w;\nreg  [15:0] mcGo_r;\n\n\nassign ref_dll_lock = & ref_dll_lock_w;\n\ninitial begin\n  if ( SYNTHESIS == \"FALSE\" ) begin\n  $display(\"%m : BYTE_LANES_B0 = %x BYTE_LANES_B1 = %x DATA_CTL_B0 = %x DATA_CTL_B1 = %x\", BYTE_LANES_B0, BYTE_LANES_B1, DATA_CTL_B0, DATA_CTL_B1);\n  $display(\"%m : HIGHEST_LANE = %d HIGHEST_LANE_B0 = %d HIGHEST_LANE_B1 = %d\",  HIGHEST_LANE, HIGHEST_LANE_B0, HIGHEST_LANE_B1);\n  $display(\"%m : HIGHEST_BANK = %d\", HIGHEST_BANK);\n\n  $display(\"%m : FREQ_REF_PERIOD         = %0.2f \", FREQ_REF_PERIOD);\n  $display(\"%m : DDR_TCK                 = %0d \", DDR_TCK);\n  $display(\"%m : PO_S2_TAPS_SIZE         = %0.2f \", PO_S2_TAPS_SIZE);\n  $display(\"%m : PO_CIRC_BUF_EARLY       = %0d \", PO_CIRC_BUF_EARLY);\n  $display(\"%m : PO_CIRC_BUF_OFFSET      = %0.2f \", PO_CIRC_BUF_OFFSET);\n  $display(\"%m : PO_CIRC_BUF_META_ZONE   = %0.2f \", PO_CIRC_BUF_META_ZONE);\n  $display(\"%m : PO_STG2_FINE_INTR_DLY   = %0.2f \", PO_STG2_FINE_INTRINSIC_DELAY);\n  $display(\"%m : PO_STG2_COARSE_INTR_DLY = %0.2f \", PO_STG2_COARSE_INTRINSIC_DELAY);\n  $display(\"%m : PO_STG2_INTRINSIC_DELAY = %0.2f \", PO_STG2_INTRINSIC_DELAY);\n  $display(\"%m : PO_CIRC_BUF_DELAY       = %0d \", PO_CIRC_BUF_DELAY);\n  $display(\"%m : PO_INTRINSIC_DELAY      = %0.2f \", PO_INTRINSIC_DELAY);\n  $display(\"%m : PO_DELAY                = %0.2f \", PO_DELAY);\n  $display(\"%m : PO_OCLK_DELAY           = %0d \", PHY_0_A_PO_OCLK_DELAY);\n  $display(\"%m : L_PHY_0_PO_FINE_DELAY   = %0d \", L_PHY_0_PO_FINE_DELAY);\n\n  $display(\"%m : PI_STG1_INTRINSIC_DELAY = %0.2f \", PI_STG1_INTRINSIC_DELAY);\n  $display(\"%m : PI_STG2_INTRINSIC_DELAY = %0.2f \", PI_STG2_INTRINSIC_DELAY);\n  $display(\"%m : PI_INTRINSIC_DELAY      = %0.2f \", PI_INTRINSIC_DELAY);\n  $display(\"%m : PI_MAX_STG2_DELAY       = %0.2f \", PI_MAX_STG2_DELAY);\n  $display(\"%m : PI_OFFSET               = %0.2f \", PI_OFFSET);\n  if ( PI_OFFSET < 0) $display(\"%m : a negative PI_OFFSET means that rclk path is longer than oclk path so rclk will be delayed to next oclk edge and the negedge of rclk may be used.\");\n  $display(\"%m : PI_STG2_DELAY           = %0.2f \", PI_STG2_DELAY);\n  $display(\"%m :PI_STG2_DELAY_CAND       = %0.2f \",PI_STG2_DELAY_CAND);\n  $display(\"%m : DEFAULT_RCLK_DELAY      = %0d \", DEFAULT_RCLK_DELAY);\n  $display(\"%m : RCLK_SELECT_EDGE        = %0b \", LP_RCLK_SELECT_EDGE);\n  end \n  if ( PI_STG2_DELAY_CAND > PI_MAX_STG2_DELAY) $display(\"WARNING: %m: The required delay though the phaser_in to internally match the aux_out clock  to ddr clock exceeds the maximum allowable delay. The clock edge  will occur at the output registers of aux_out %0.2f ps before the ddr clock  edge. If aux_out is used for memory inputs, this may violate setup or hold time.\", PI_STG2_DELAY_CAND - PI_MAX_STG2_DELAY);\nend\n\n  assign sync_pulse_split       = sync_pulse;\n  assign mem_refclk_split       = mem_refclk;\n  assign freq_refclk_split      = freq_refclk;\n  assign mem_refclk_div4_split  = mem_refclk_div4;\n  assign phy_ctl_clk_split0     = _phy_clk;\n  assign phy_ctl_wd_split0      = phy_ctl_wd;\n  assign phy_ctl_wr_split0      = phy_ctl_wr;\n  assign phy_clk_split0         = phy_clk;\n  assign phy_cmd_wr_en_split0   = phy_cmd_wr_en;\n  assign phy_data_wr_en_split0  = phy_data_wr_en;\n  assign phy_rd_en_split0       = phy_rd_en;\n  assign phy_dout_split0        = phy_dout;\n  assign phy_ctl_clk_split1     = phy_clk;\n  assign phy_ctl_wd_split1      = phy_ctl_wd;\n  assign phy_data_offset_1_split1   = data_offset_1;\n  assign phy_ctl_wr_split1      = phy_ctl_wr;\n  assign phy_clk_split1         = phy_clk;\n  assign phy_cmd_wr_en_split1   = phy_cmd_wr_en;\n  assign phy_data_wr_en_split1  = phy_data_wr_en;\n  assign phy_rd_en_split1       = phy_rd_en;\n  assign phy_dout_split1        = phy_dout;\n  assign phy_ctl_clk_split2     = phy_clk;\n  assign phy_ctl_wd_split2      = phy_ctl_wd;\n  assign phy_data_offset_2_split2   = data_offset_2;\n  assign phy_ctl_wr_split2      = phy_ctl_wr;\n  assign phy_clk_split2         = phy_clk;\n  assign phy_cmd_wr_en_split2   = phy_cmd_wr_en;\n  assign phy_data_wr_en_split2  = phy_data_wr_en;\n  assign phy_rd_en_split2       = phy_rd_en;\n  assign phy_dout_split2        = phy_dout;\n\n\n\n\n\nwire [3:0] blb0 = BYTE_LANES_B0;\nwire [3:0] blb1 = BYTE_LANES_B1;\nwire [3:0] blb2 = BYTE_LANES_B2;\n\nwire [3:0] dcb0 = DATA_CTL_B0;\nwire [3:0] dcb1 = DATA_CTL_B1;\nwire [3:0] dcb2 = DATA_CTL_B2;\n\nassign pi_dqs_found_all      = & (pi_dqs_found_lanes | ~ {blb2, blb1, blb0} |  ~ {dcb2, dcb1, dcb0});\nassign pi_dqs_found_any      = | (pi_dqs_found_lanes & {blb2, blb1, blb0} & {dcb2, dcb1, dcb0});\nassign pi_phase_locked_all   = & pi_phase_locked_all_w[HIGHEST_BANK-1:0];\nassign calib_zero_inputs_int = {3'bxxx, calib_zero_inputs};\n\nassign calib_sel_byte0       = {calib_zero_inputs_int[0], calib_sel[1:0]} ;\nassign calib_sel_byte1       = {calib_zero_inputs_int[1], calib_sel[1:0]} ;\nassign calib_sel_byte2       = {calib_zero_inputs_int[2], calib_sel[1:0]} ;\n\nassign calib_zero_lanes_int = calib_zero_lanes;\n\nassign phy_ctl_ready = &phy_ctl_ready_w[HIGHEST_BANK-1:0];\n\nassign phy_ctl_mstr_empty  = phy_ctl_empty[MASTER_PHY_CTL];\n\nassign of_ctl_a_full  = |of_ctl_a_full_v;\nassign of_ctl_full    = |of_ctl_full_v;\nassign of_data_a_full = |of_data_a_full_v;\nassign of_data_full   = |of_data_full_v;\nassign pre_data_a_full= |pre_data_a_full_v;\n\n\n\nassign if_empty       = !if_empty_def ? |if_empty_v : &if_empty_v;\nassign if_empty_or    =  |if_empty_or_v;\nassign if_empty_and   =  &if_empty_and_v;\nassign if_a_empty     = |if_a_empty_v;\n\n\ngenerate\ngenvar i;\nfor (i = 0; i != NUM_DDR_CK; i = i + 1) begin : ddr_clk_gen\n   case  ((GENERATE_DDR_CK_MAP >> (16*i)) & 16'hffff)\n      16'h3041: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[0] >> (LP_DDR_CK_WIDTH*i)) & 2'b11;\n      16'h3042: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[0] >> (LP_DDR_CK_WIDTH*i+12)) & 2'b11;\n      16'h3043: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[0] >> (LP_DDR_CK_WIDTH*i+24)) & 2'b11;\n      16'h3044: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[0] >> (LP_DDR_CK_WIDTH*i+36)) & 2'b11;\n      16'h3141: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[1] >> (LP_DDR_CK_WIDTH*i)) & 2'b11;\n      16'h3142: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[1] >> (LP_DDR_CK_WIDTH*i+12)) & 2'b11;\n      16'h3143: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[1] >> (LP_DDR_CK_WIDTH*i+24)) & 2'b11;\n      16'h3144: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[1] >> (LP_DDR_CK_WIDTH*i+36)) & 2'b11;\n      16'h3241: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[2] >> (LP_DDR_CK_WIDTH*i)) & 2'b11;\n      16'h3242: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[2] >> (LP_DDR_CK_WIDTH*i+12)) & 2'b11;\n      16'h3243: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[2] >> (LP_DDR_CK_WIDTH*i+24)) & 2'b11;\n      16'h3244: assign ddr_clk[(i+1)*LP_DDR_CK_WIDTH-1:(i*LP_DDR_CK_WIDTH)] = (ddr_clk_w[2] >> (LP_DDR_CK_WIDTH*i+36)) & 2'b11;\n      default : initial $display(\"ERROR: mc_phy ddr_clk_gen : invalid specification for parameter GENERATE_DDR_CK_MAP , clock index =  %d, spec= %x (hex) \",  i, (( GENERATE_DDR_CK_MAP >> (16 * i )) & 16'hffff ));\n   endcase\nend\nendgenerate\n\n\n\nreg rst_auxout;\nreg rst_auxout_r;\nreg rst_auxout_rr;\n\nalways @(posedge auxout_clk or posedge rst) begin\n  if ( rst) begin\n     rst_auxout_r   <= #(1) 1'b1;\n     rst_auxout_rr  <= #(1) 1'b1;\n  end\n  else begin\n     rst_auxout_r   <= #(1) rst;\n     rst_auxout_rr  <= #(1) rst_auxout_r;\n  end\nend\nif ( LP_RCLK_SELECT_EDGE[0]) begin\n  always @(posedge auxout_clk or posedge rst)  begin\n    if ( rst) begin\n       rst_auxout     <= #(1) 1'b1;\n    end\n    else begin\n       rst_auxout     <= #(1) rst_auxout_rr;\n    end\n  end\nend\nelse begin\n  always @(negedge auxout_clk or posedge rst)  begin\n    if ( rst) begin\n       rst_auxout     <= #(1) 1'b1;\n    end\n    else begin\n       rst_auxout     <= #(1) rst_auxout_rr;\n    end\n  end\nend\n\nlocalparam L_RESET_SELECT_BANK =\n    (BYTE_LANES_B1 == 0 && BYTE_LANES_B2 == 0 && RCLK_SELECT_BANK) ? 0 : RCLK_SELECT_BANK;\n\nalways @(*) begin\n      rst_out =  rst_out_w[L_RESET_SELECT_BANK] & ddr_rst_in_n;\nend\n\nalways @(posedge phy_clk) begin\n    if ( rst)\n       mcGo_r <= #(1) 0;\n    else\n       mcGo_r <= #(1) (mcGo_r << 1) |  &mcGo_w;\nend\n\nassign mcGo = mcGo_r[15];\n\n\ngenerate\n\n\n\n\nif (PHYCTL_CMD_FIFO == \"TRUE\") begin : cmd_fifo_soft\n    reg  [31:0] phy_wd_reg = 0;\n    reg  [3:0]  aux_in1_reg = 0;\n    reg  [3:0]  aux_in2_reg = 0;\n    reg         sfifo_ready = 0;\n    assign _phy_ctl_wd     = phy_wd_reg;\n    assign aux_in_[1]      = aux_in1_reg;\n    assign aux_in_[2]      = aux_in2_reg;\n    assign phy_ctl_a_full  = |_phy_ctl_a_full_p;\n    assign phy_ctl_full[0] = |_phy_ctl_full_p;\n    assign phy_ctl_full[1] = |_phy_ctl_full_p;\n    assign phy_ctl_full[2] = |_phy_ctl_full_p;\n    assign phy_ctl_full[3] = |_phy_ctl_full_p;\n    assign _phy_clk        = phy_clk;\n\n    always @(posedge phy_clk) begin\n          phy_wd_reg   <= #1 phy_ctl_wd;\n          aux_in1_reg  <= #1 aux_in_1;\n          aux_in2_reg  <= #1 aux_in_2;\n          sfifo_ready  <= #1 phy_ctl_wr;\n    end\n\nend\n\nelse if (PHYCTL_CMD_FIFO == \"FALSE\") begin\n    assign _phy_ctl_wd     = phy_ctl_wd;\n    assign aux_in_[1]      = aux_in_1;\n    assign aux_in_[2]      = aux_in_2;\n    assign phy_ctl_a_full  = |_phy_ctl_a_full_p;\n    assign phy_ctl_full[0] = |_phy_ctl_full_p;\n    assign phy_ctl_full[3:1] = 3'b000;\n    assign _phy_clk        = phy_clk;\n\nend\nendgenerate\n\n\n\n\ngenerate\n\nif (HIGHEST_BANK == 3) begin : banks_3\n  assign byte_rd_en_oth_banks[1:0] = {byte_rd_en_v[1],byte_rd_en_v[2]};\n  assign byte_rd_en_oth_banks[3:2] = {byte_rd_en_v[0],byte_rd_en_v[2]};\n  assign byte_rd_en_oth_banks[5:4] = {byte_rd_en_v[0],byte_rd_en_v[1]};\nend\nelse if (HIGHEST_BANK == 2) begin : banks_2\n  assign byte_rd_en_oth_banks[1:0] = {byte_rd_en_v[1],1'b1};\n  assign byte_rd_en_oth_banks[3:2] = {byte_rd_en_v[0],1'b1};\nend\nelse begin : banks_1\n  assign byte_rd_en_oth_banks[1:0] = {1'b1,1'b1};\nend\n\nif ( BYTE_LANES_B0 != 0)  begin : ddr_phy_4lanes_0\nmig_7series_v4_1_ddr_phy_4lanes #\n  (\n     .BYTE_LANES                (BYTE_LANES_B0),        \n     .DATA_CTL_N                (PHY_0_DATA_CTL), \n     .PO_CTL_COARSE_BYPASS      (PO_CTL_COARSE_BYPASS),\n     .PO_FINE_DELAY             (L_PHY_0_PO_FINE_DELAY),\n     .BITLANES                  (PHY_0_BITLANES),\n     .BITLANES_OUTONLY          (PHY_0_BITLANES_OUTONLY),\n     .BYTELANES_DDR_CK          (LP_PHY_0_BYTELANES_DDR_CK),\n     .LAST_BANK                 (PHY_0_IS_LAST_BANK),\n     .LANE_REMAP                (PHY_0_LANE_REMAP),\n     .OF_ALMOST_FULL_VALUE      (PHY_0_OF_ALMOST_FULL_VALUE),\n     .IF_ALMOST_EMPTY_VALUE     (PHY_0_IF_ALMOST_EMPTY_VALUE),\n     .GENERATE_IDELAYCTRL       (PHY_0_GENERATE_IDELAYCTRL),\n     .IODELAY_GRP               (PHY_0_IODELAY_GRP),\n     .FPGA_SPEED_GRADE          (FPGA_SPEED_GRADE),\n     .BANK_TYPE                 (BANK_TYPE),\n     .NUM_DDR_CK                (NUM_DDR_CK),\n     .TCK                       (TCK),\n     .RCLK_SELECT_LANE          (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO         (USE_PRE_POST_FIFO),\n     .SYNTHESIS                 (SYNTHESIS),\n     .PC_CLK_RATIO              (PHY_CLK_RATIO),\n     .PC_EVENTS_DELAY           (PHY_EVENTS_DELAY),\n     .PC_FOUR_WINDOW_CLOCKS     (PHY_FOUR_WINDOW_CLOCKS),\n     .PC_BURST_MODE             (PHY_0_A_BURST_MODE),\n     .PC_SYNC_MODE              (PHY_SYNC_MODE),\n     .PC_MULTI_REGION           (PHY_MULTI_REGION),\n     .PC_PHY_COUNT_EN           (PHY_COUNT_EN),\n     .PC_DISABLE_SEQ_MATCH      (PHY_DISABLE_SEQ_MATCH),\n     .PC_CMD_OFFSET             (PHY_0_CMD_OFFSET),\n     .PC_RD_CMD_OFFSET_0        (PHY_0_RD_CMD_OFFSET_0),\n     .PC_RD_CMD_OFFSET_1        (PHY_0_RD_CMD_OFFSET_1),\n     .PC_RD_CMD_OFFSET_2        (PHY_0_RD_CMD_OFFSET_2),\n     .PC_RD_CMD_OFFSET_3        (PHY_0_RD_CMD_OFFSET_3),\n     .PC_RD_DURATION_0          (PHY_0_RD_DURATION_0),\n     .PC_RD_DURATION_1          (PHY_0_RD_DURATION_1),\n     .PC_RD_DURATION_2          (PHY_0_RD_DURATION_2),\n     .PC_RD_DURATION_3          (PHY_0_RD_DURATION_3),\n     .PC_WR_CMD_OFFSET_0        (PHY_0_WR_CMD_OFFSET_0),\n     .PC_WR_CMD_OFFSET_1        (PHY_0_WR_CMD_OFFSET_1),\n     .PC_WR_CMD_OFFSET_2        (PHY_0_WR_CMD_OFFSET_2),\n     .PC_WR_CMD_OFFSET_3        (PHY_0_WR_CMD_OFFSET_3),\n     .PC_WR_DURATION_0          (PHY_0_WR_DURATION_0),\n     .PC_WR_DURATION_1          (PHY_0_WR_DURATION_1),\n     .PC_WR_DURATION_2          (PHY_0_WR_DURATION_2),\n     .PC_WR_DURATION_3          (PHY_0_WR_DURATION_3),\n     .PC_AO_WRLVL_EN            (PHY_0_AO_WRLVL_EN),\n     .PC_AO_TOGGLE              (PHY_0_AO_TOGGLE),\n\n     .PI_SEL_CLK_OFFSET         (PI_SEL_CLK_OFFSET),\n\n     .A_PI_FINE_DELAY           (L_PHY_0_A_PI_FINE_DELAY),\n     .B_PI_FINE_DELAY           (L_PHY_0_B_PI_FINE_DELAY),\n     .C_PI_FINE_DELAY           (L_PHY_0_C_PI_FINE_DELAY),\n     .D_PI_FINE_DELAY           (L_PHY_0_D_PI_FINE_DELAY),\n\n     .A_PI_FREQ_REF_DIV         (PHY_0_A_PI_FREQ_REF_DIV),\n     .A_PI_BURST_MODE           (PHY_0_A_BURST_MODE),\n     .A_PI_OUTPUT_CLK_SRC       (L_PHY_0_A_PI_OUTPUT_CLK_SRC),\n     .B_PI_OUTPUT_CLK_SRC       (L_PHY_0_B_PI_OUTPUT_CLK_SRC),\n     .C_PI_OUTPUT_CLK_SRC       (L_PHY_0_C_PI_OUTPUT_CLK_SRC),\n     .D_PI_OUTPUT_CLK_SRC       (L_PHY_0_D_PI_OUTPUT_CLK_SRC),\n     .A_PO_OUTPUT_CLK_SRC       (PHY_0_A_PO_OUTPUT_CLK_SRC),\n     .A_PO_OCLK_DELAY           (PHY_0_A_PO_OCLK_DELAY),\n     .A_PO_OCLKDELAY_INV        (PHY_0_A_PO_OCLKDELAY_INV),\n     .A_OF_ARRAY_MODE           (PHY_0_A_OF_ARRAY_MODE),\n     .B_OF_ARRAY_MODE           (PHY_0_B_OF_ARRAY_MODE),\n     .C_OF_ARRAY_MODE           (PHY_0_C_OF_ARRAY_MODE),\n     .D_OF_ARRAY_MODE           (PHY_0_D_OF_ARRAY_MODE),\n     .A_IF_ARRAY_MODE           (PHY_0_A_IF_ARRAY_MODE),\n     .B_IF_ARRAY_MODE           (PHY_0_B_IF_ARRAY_MODE),\n     .C_IF_ARRAY_MODE           (PHY_0_C_IF_ARRAY_MODE),\n     .D_IF_ARRAY_MODE           (PHY_0_D_IF_ARRAY_MODE),\n     .A_OS_DATA_RATE            (PHY_0_A_OSERDES_DATA_RATE),\n     .A_OS_DATA_WIDTH           (PHY_0_A_OSERDES_DATA_WIDTH),\n     .B_OS_DATA_RATE            (PHY_0_B_OSERDES_DATA_RATE),\n     .B_OS_DATA_WIDTH           (PHY_0_B_OSERDES_DATA_WIDTH),\n     .C_OS_DATA_RATE            (PHY_0_C_OSERDES_DATA_RATE),\n     .C_OS_DATA_WIDTH           (PHY_0_C_OSERDES_DATA_WIDTH),\n     .D_OS_DATA_RATE            (PHY_0_D_OSERDES_DATA_RATE),\n     .D_OS_DATA_WIDTH           (PHY_0_D_OSERDES_DATA_WIDTH),\n     .A_IDELAYE2_IDELAY_TYPE    (PHY_0_A_IDELAYE2_IDELAY_TYPE),\n     .A_IDELAYE2_IDELAY_VALUE   (PHY_0_A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC           (PI_DIV2_INCDEC)\n)\n u_ddr_phy_4lanes\n(\n      .rst                      (rst),\n      .phy_clk                  (phy_clk_split0),\n      .clk_div2                 (clk_div2),\n      .phy_ctl_clk              (phy_ctl_clk_split0),\n      .phy_ctl_wd               (phy_ctl_wd_split0),\n      .data_offset              (phy_ctl_wd_split0[PC_DATA_OFFSET_RANGE_HI : PC_DATA_OFFSET_RANGE_LO]),\n      .phy_ctl_wr               (phy_ctl_wr_split0),\n      .mem_refclk               (mem_refclk_split),\n      .freq_refclk              (freq_refclk_split),\n      .mem_refclk_div4          (mem_refclk_div4_split),\n      .sync_pulse               (sync_pulse_split),\n      .phy_dout                 (phy_dout_split0[HIGHEST_LANE_B0*80-1:0]),\n      .phy_cmd_wr_en            (phy_cmd_wr_en_split0),\n      .phy_data_wr_en           (phy_data_wr_en_split0),\n      .phy_rd_en                (phy_rd_en_split0),\n      .pll_lock                 (pll_lock),\n      .ddr_clk                  (ddr_clk_w[0]),\n      .rclk                     (),\n      .rst_out                  (rst_out_w[0]),\n      .mcGo                     (mcGo_w[0]),\n      .ref_dll_lock             (ref_dll_lock_w[0]),\n      .idelayctrl_refclk        (idelayctrl_refclk),\n      .idelay_inc               (idelay_inc),\n      .idelay_ce                (idelay_ce),\n      .idelay_ld                (idelay_ld),\n      .phy_ctl_mstr_empty       (phy_ctl_mstr_empty),\n      .if_rst                   (if_rst),\n      .if_empty_def             (if_empty_def),\n      .byte_rd_en_oth_banks     (byte_rd_en_oth_banks[1:0]),\n      .if_a_empty               (if_a_empty_v[0]),\n      .if_empty                 (if_empty_v[0]),\n      .byte_rd_en               (byte_rd_en_v[0]),\n      .if_empty_or              (if_empty_or_v[0]),\n      .if_empty_and             (if_empty_and_v[0]),\n      .of_ctl_a_full            (of_ctl_a_full_v[0]),\n      .of_data_a_full           (of_data_a_full_v[0]),\n      .of_ctl_full              (of_ctl_full_v[0]),\n      .of_data_full             (of_data_full_v[0]),\n      .pre_data_a_full          (pre_data_a_full_v[0]),\n      .phy_din                  (phy_din[HIGHEST_LANE_B0*80-1:0]),\n      .phy_ctl_a_full           (_phy_ctl_a_full_p[0]),\n      .phy_ctl_full             (_phy_ctl_full_p[0]),\n      .phy_ctl_empty            (phy_ctl_empty[0]),\n      .mem_dq_out               (mem_dq_out[HIGHEST_LANE_B0*12-1:0]),\n      .mem_dq_ts                (mem_dq_ts[HIGHEST_LANE_B0*12-1:0]),\n      .mem_dq_in                (mem_dq_in[HIGHEST_LANE_B0*10-1:0]),\n      .mem_dqs_out              (mem_dqs_out[HIGHEST_LANE_B0-1:0]),\n      .mem_dqs_ts               (mem_dqs_ts[HIGHEST_LANE_B0-1:0]),\n      .mem_dqs_in               (mem_dqs_in[HIGHEST_LANE_B0-1:0]),\n      .aux_out                  (aux_out_[3:0]),\n      .phy_ctl_ready            (phy_ctl_ready_w[0]),\n      .phy_write_calib          (phy_write_calib),\n      .phy_read_calib           (phy_read_calib),\n\n\n\n\n      .phyGo                    (phyGo),\n      .input_sink               (input_sink),\n\n      .calib_sel                (calib_sel_byte0),\n      .calib_zero_ctrl          (calib_zero_ctrl[0]),\n      .calib_zero_lanes         (calib_zero_lanes_int[3:0]),\n      .calib_in_common          (calib_in_common),\n      .po_coarse_enable         (po_coarse_enable[0]),\n      .po_fine_enable           (po_fine_enable[0]),\n      .po_fine_inc              (po_fine_inc[0]),\n      .po_coarse_inc            (po_coarse_inc[0]),\n      .po_counter_load_en       (po_counter_load_en),\n      .po_sel_fine_oclk_delay   (po_sel_fine_oclk_delay[0]),\n      .po_counter_load_val      (po_counter_load_val),\n      .po_counter_read_en       (po_counter_read_en),\n      .po_coarse_overflow       (po_coarse_overflow_w[0]),\n      .po_fine_overflow         (po_fine_overflow_w[0]),\n      .po_counter_read_val      (po_counter_read_val_w[0]),\n\n      .pi_rst_dqs_find          (pi_rst_dqs_find[0]),\n      .pi_fine_enable           (pi_fine_enable),\n      .pi_fine_inc              (pi_fine_inc),\n      .pi_counter_load_en       (pi_counter_load_en),\n      .pi_counter_read_en       (pi_counter_read_en),\n      .pi_counter_load_val      (pi_counter_load_val),\n      .pi_fine_overflow         (pi_fine_overflow_w[0]),\n      .pi_counter_read_val      (pi_counter_read_val_w[0]),\n      .pi_dqs_found             (pi_dqs_found_w[0]),\n      .pi_dqs_found_all         (pi_dqs_found_all_w[0]),\n      .pi_dqs_found_any         (pi_dqs_found_any_w[0]),\n      .pi_phase_locked_lanes      (pi_phase_locked_lanes[HIGHEST_LANE_B0-1:0]),\n      .pi_dqs_found_lanes       (pi_dqs_found_lanes[HIGHEST_LANE_B0-1:0]),\n      .pi_dqs_out_of_range      (pi_dqs_out_of_range_w[0]),\n      .pi_phase_locked          (pi_phase_locked_w[0]),\n      .pi_phase_locked_all      (pi_phase_locked_all_w[0]),\n      .fine_delay               (fine_delay),\n      .fine_delay_sel           (fine_delay_sel)\n);\n\n   always @(posedge auxout_clk or posedge rst_auxout)  begin\n     if (rst_auxout) begin\n         aux_out[0]  <= #100 0;\n         aux_out[2]  <= #100 0;\n     end\n     else begin\n         aux_out[0]  <= #100 aux_out_[0];\n         aux_out[2]  <= #100 aux_out_[2];\n     end\n   end\n   if ( LP_RCLK_SELECT_EDGE[0]) begin\n      always @(posedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[1]  <= #100 0;\n            aux_out[3]  <= #100 0;\n        end\n        else begin\n            aux_out[1]  <= #100 aux_out_[1];\n            aux_out[3]  <= #100 aux_out_[3];\n        end\n      end\n   end\n   else begin\n      always @(negedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[1]  <= #100 0;\n            aux_out[3]  <= #100 0;\n        end\n        else begin\n            aux_out[1]  <= #100 aux_out_[1];\n            aux_out[3]  <= #100 aux_out_[3];\n        end\n      end\n   end\nend\nelse begin\n   if ( HIGHEST_BANK > 0) begin\n       assign phy_din[HIGHEST_LANE_B0*80-1:0] = 0;\n       assign _phy_ctl_a_full_p[0] = 0;\n       assign of_ctl_a_full_v[0]   = 0;\n       assign of_ctl_full_v[0]     = 0;\n       assign of_data_a_full_v[0]  = 0;\n       assign of_data_full_v[0]    = 0;\n       assign pre_data_a_full_v[0] = 0;\n       assign if_empty_v[0]        = 0;\n       assign byte_rd_en_v[0]      = 1;\n       always @(*)\n           aux_out[3:0] = 0;\n   end\n   assign pi_dqs_found_w[0]    = 1;\n   assign pi_dqs_found_all_w[0]    = 1;\n   assign pi_dqs_found_any_w[0]    = 0;\n   assign pi_phase_locked_lanes[HIGHEST_LANE_B0-1:0]  = 4'b1111;\n   assign pi_dqs_found_lanes[HIGHEST_LANE_B0-1:0]  = 4'b1111;\n   assign pi_dqs_out_of_range_w[0]    = 0;\n   assign pi_phase_locked_w[0]    = 1;\n   assign po_fine_overflow_w[0] = 0;\n   assign po_coarse_overflow_w[0] = 0;\n   assign po_fine_overflow_w[0] = 0;\n   assign pi_fine_overflow_w[0] = 0;\n   assign po_counter_read_val_w[0] = 0;\n   assign pi_counter_read_val_w[0] = 0;\n   assign mcGo_w[0] = 1;\n   if ( RCLK_SELECT_BANK == 0)\n     always @(*)\n        aux_out[3:0] = 0;\nend\n\nif ( BYTE_LANES_B1 != 0) begin : ddr_phy_4lanes_1\n\nmig_7series_v4_1_ddr_phy_4lanes #\n  (\n     .BYTE_LANES                (BYTE_LANES_B1),        \n     .DATA_CTL_N                (PHY_1_DATA_CTL), \n     .PO_CTL_COARSE_BYPASS      (PO_CTL_COARSE_BYPASS),\n     .PO_FINE_DELAY             (L_PHY_1_PO_FINE_DELAY),\n     .BITLANES                  (PHY_1_BITLANES),\n     .BITLANES_OUTONLY          (PHY_1_BITLANES_OUTONLY),\n     .BYTELANES_DDR_CK          (LP_PHY_1_BYTELANES_DDR_CK),\n     .LAST_BANK                 (PHY_1_IS_LAST_BANK ),\n     .LANE_REMAP                (PHY_1_LANE_REMAP),\n     .OF_ALMOST_FULL_VALUE      (PHY_1_OF_ALMOST_FULL_VALUE),\n     .IF_ALMOST_EMPTY_VALUE     (PHY_1_IF_ALMOST_EMPTY_VALUE),\n     .GENERATE_IDELAYCTRL       (PHY_1_GENERATE_IDELAYCTRL),\n     .IODELAY_GRP               (PHY_1_IODELAY_GRP),\n     .FPGA_SPEED_GRADE          (FPGA_SPEED_GRADE),\n     .BANK_TYPE                 (BANK_TYPE),\n     .NUM_DDR_CK                (NUM_DDR_CK),\n     .TCK                       (TCK),\n     .RCLK_SELECT_LANE          (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO         (USE_PRE_POST_FIFO),\n     .SYNTHESIS                 (SYNTHESIS),\n     .PC_CLK_RATIO              (PHY_CLK_RATIO),\n     .PC_EVENTS_DELAY           (PHY_EVENTS_DELAY),\n     .PC_FOUR_WINDOW_CLOCKS     (PHY_FOUR_WINDOW_CLOCKS),\n     .PC_BURST_MODE             (PHY_1_A_BURST_MODE),\n     .PC_SYNC_MODE              (PHY_SYNC_MODE),\n     .PC_MULTI_REGION           (PHY_MULTI_REGION),\n     .PC_PHY_COUNT_EN           (PHY_COUNT_EN),\n     .PC_DISABLE_SEQ_MATCH      (PHY_DISABLE_SEQ_MATCH),\n     .PC_CMD_OFFSET             (PHY_1_CMD_OFFSET),\n     .PC_RD_CMD_OFFSET_0        (PHY_1_RD_CMD_OFFSET_0),\n     .PC_RD_CMD_OFFSET_1        (PHY_1_RD_CMD_OFFSET_1),\n     .PC_RD_CMD_OFFSET_2        (PHY_1_RD_CMD_OFFSET_2),\n     .PC_RD_CMD_OFFSET_3        (PHY_1_RD_CMD_OFFSET_3),\n     .PC_RD_DURATION_0          (PHY_1_RD_DURATION_0),\n     .PC_RD_DURATION_1          (PHY_1_RD_DURATION_1),\n     .PC_RD_DURATION_2          (PHY_1_RD_DURATION_2),\n     .PC_RD_DURATION_3          (PHY_1_RD_DURATION_3),\n     .PC_WR_CMD_OFFSET_0        (PHY_1_WR_CMD_OFFSET_0),\n     .PC_WR_CMD_OFFSET_1        (PHY_1_WR_CMD_OFFSET_1),\n     .PC_WR_CMD_OFFSET_2        (PHY_1_WR_CMD_OFFSET_2),\n     .PC_WR_CMD_OFFSET_3        (PHY_1_WR_CMD_OFFSET_3),\n     .PC_WR_DURATION_0          (PHY_1_WR_DURATION_0),\n     .PC_WR_DURATION_1          (PHY_1_WR_DURATION_1),\n     .PC_WR_DURATION_2          (PHY_1_WR_DURATION_2),\n     .PC_WR_DURATION_3          (PHY_1_WR_DURATION_3),\n     .PC_AO_WRLVL_EN            (PHY_1_AO_WRLVL_EN),\n     .PC_AO_TOGGLE              (PHY_1_AO_TOGGLE),\n\n     .PI_SEL_CLK_OFFSET         (PI_SEL_CLK_OFFSET),\n\n     .A_PI_FINE_DELAY           (L_PHY_1_A_PI_FINE_DELAY),\n     .B_PI_FINE_DELAY           (L_PHY_1_B_PI_FINE_DELAY),\n     .C_PI_FINE_DELAY           (L_PHY_1_C_PI_FINE_DELAY),\n     .D_PI_FINE_DELAY           (L_PHY_1_D_PI_FINE_DELAY),\n\n     .A_PI_FREQ_REF_DIV         (PHY_1_A_PI_FREQ_REF_DIV),\n     .A_PI_BURST_MODE           (PHY_1_A_BURST_MODE),\n     .A_PI_OUTPUT_CLK_SRC       (L_PHY_1_A_PI_OUTPUT_CLK_SRC),\n     .B_PI_OUTPUT_CLK_SRC       (L_PHY_1_B_PI_OUTPUT_CLK_SRC),\n     .C_PI_OUTPUT_CLK_SRC       (L_PHY_1_C_PI_OUTPUT_CLK_SRC),\n     .D_PI_OUTPUT_CLK_SRC       (L_PHY_1_D_PI_OUTPUT_CLK_SRC),\n     .A_PO_OUTPUT_CLK_SRC       (PHY_1_A_PO_OUTPUT_CLK_SRC),\n     .A_PO_OCLK_DELAY           (PHY_1_A_PO_OCLK_DELAY),\n     .A_PO_OCLKDELAY_INV        (PHY_1_A_PO_OCLKDELAY_INV),\n     .A_OF_ARRAY_MODE           (PHY_1_A_OF_ARRAY_MODE),\n     .B_OF_ARRAY_MODE           (PHY_1_B_OF_ARRAY_MODE),\n     .C_OF_ARRAY_MODE           (PHY_1_C_OF_ARRAY_MODE),\n     .D_OF_ARRAY_MODE           (PHY_1_D_OF_ARRAY_MODE),\n     .A_IF_ARRAY_MODE           (PHY_1_A_IF_ARRAY_MODE),\n     .B_IF_ARRAY_MODE           (PHY_1_B_IF_ARRAY_MODE),\n     .C_IF_ARRAY_MODE           (PHY_1_C_IF_ARRAY_MODE),\n     .D_IF_ARRAY_MODE           (PHY_1_D_IF_ARRAY_MODE),\n     .A_OS_DATA_RATE            (PHY_1_A_OSERDES_DATA_RATE),\n     .A_OS_DATA_WIDTH           (PHY_1_A_OSERDES_DATA_WIDTH),\n     .B_OS_DATA_RATE            (PHY_1_B_OSERDES_DATA_RATE),\n     .B_OS_DATA_WIDTH           (PHY_1_B_OSERDES_DATA_WIDTH),\n     .C_OS_DATA_RATE            (PHY_1_C_OSERDES_DATA_RATE),\n     .C_OS_DATA_WIDTH           (PHY_1_C_OSERDES_DATA_WIDTH),\n     .D_OS_DATA_RATE            (PHY_1_D_OSERDES_DATA_RATE),\n     .D_OS_DATA_WIDTH           (PHY_1_D_OSERDES_DATA_WIDTH),\n     .A_IDELAYE2_IDELAY_TYPE    (PHY_1_A_IDELAYE2_IDELAY_TYPE),\n     .A_IDELAYE2_IDELAY_VALUE   (PHY_1_A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC           (PI_DIV2_INCDEC)\n)\n u_ddr_phy_4lanes\n(\n      .rst                      (rst),\n      .phy_clk                  (phy_clk_split1),\n      .clk_div2                 (clk_div2),\n      .phy_ctl_clk              (phy_ctl_clk_split1),\n      .phy_ctl_wd               (phy_ctl_wd_split1),\n      .data_offset              (phy_data_offset_1_split1),\n      .phy_ctl_wr               (phy_ctl_wr_split1),\n      .mem_refclk               (mem_refclk_split),\n      .freq_refclk              (freq_refclk_split),\n      .mem_refclk_div4          (mem_refclk_div4_split),\n      .sync_pulse               (sync_pulse_split),\n      .phy_dout                 (phy_dout_split1[HIGHEST_LANE_B1*80+320-1:320]),\n      .phy_cmd_wr_en            (phy_cmd_wr_en_split1),\n      .phy_data_wr_en           (phy_data_wr_en_split1),\n      .phy_rd_en                (phy_rd_en_split1),\n      .pll_lock                 (pll_lock),\n      .ddr_clk                  (ddr_clk_w[1]),\n      .rclk                     (),\n      .rst_out                  (rst_out_w[1]),\n      .mcGo                     (mcGo_w[1]),\n      .ref_dll_lock             (ref_dll_lock_w[1]),\n      .idelayctrl_refclk        (idelayctrl_refclk),\n      .idelay_inc               (idelay_inc),\n      .idelay_ce                (idelay_ce),\n      .idelay_ld                (idelay_ld),\n      .phy_ctl_mstr_empty       (phy_ctl_mstr_empty),\n      .if_rst                   (if_rst),\n      .if_empty_def             (if_empty_def),\n      .byte_rd_en_oth_banks     (byte_rd_en_oth_banks[3:2]),\n      .if_a_empty               (if_a_empty_v[1]),\n      .if_empty                 (if_empty_v[1]),\n      .byte_rd_en               (byte_rd_en_v[1]),\n      .if_empty_or              (if_empty_or_v[1]),\n      .if_empty_and             (if_empty_and_v[1]),\n      .of_ctl_a_full            (of_ctl_a_full_v[1]),\n      .of_data_a_full           (of_data_a_full_v[1]),\n      .of_ctl_full              (of_ctl_full_v[1]),\n      .of_data_full             (of_data_full_v[1]),\n      .pre_data_a_full          (pre_data_a_full_v[1]),\n      .phy_din                  (phy_din[HIGHEST_LANE_B1*80+320-1:320]),\n      .phy_ctl_a_full           (_phy_ctl_a_full_p[1]),\n      .phy_ctl_full             (_phy_ctl_full_p[1]),\n      .phy_ctl_empty            (phy_ctl_empty[1]),\n      .mem_dq_out               (mem_dq_out[HIGHEST_LANE_B1*12+48-1:48]),\n      .mem_dq_ts                (mem_dq_ts[HIGHEST_LANE_B1*12+48-1:48]),\n      .mem_dq_in                (mem_dq_in[HIGHEST_LANE_B1*10+40-1:40]),\n      .mem_dqs_out              (mem_dqs_out[HIGHEST_LANE_B1+4-1:4]),\n      .mem_dqs_ts               (mem_dqs_ts[HIGHEST_LANE_B1+4-1:4]),\n      .mem_dqs_in               (mem_dqs_in[HIGHEST_LANE_B1+4-1:4]),\n      .aux_out                  (aux_out_[7:4]),\n      .phy_ctl_ready            (phy_ctl_ready_w[1]),\n      .phy_write_calib          (phy_write_calib),\n      .phy_read_calib           (phy_read_calib),\n\n\n\n\n      .phyGo                    (phyGo),\n      .input_sink               (input_sink),\n\n      .calib_sel                (calib_sel_byte1),\n      .calib_zero_ctrl          (calib_zero_ctrl[1]),\n      .calib_zero_lanes         (calib_zero_lanes_int[7:4]),\n      .calib_in_common          (calib_in_common),\n      .po_coarse_enable         (po_coarse_enable[1]),\n      .po_fine_enable           (po_fine_enable[1]),\n      .po_fine_inc              (po_fine_inc[1]),\n      .po_coarse_inc            (po_coarse_inc[1]),\n      .po_counter_load_en       (po_counter_load_en),\n      .po_sel_fine_oclk_delay   (po_sel_fine_oclk_delay[1]),\n      .po_counter_load_val      (po_counter_load_val),\n      .po_counter_read_en       (po_counter_read_en),\n      .po_coarse_overflow       (po_coarse_overflow_w[1]),\n      .po_fine_overflow         (po_fine_overflow_w[1]),\n      .po_counter_read_val      (po_counter_read_val_w[1]),\n\n      .pi_rst_dqs_find          (pi_rst_dqs_find[1]),\n      .pi_fine_enable           (pi_fine_enable),\n      .pi_fine_inc              (pi_fine_inc),\n      .pi_counter_load_en       (pi_counter_load_en),\n      .pi_counter_read_en       (pi_counter_read_en),\n      .pi_counter_load_val      (pi_counter_load_val),\n      .pi_fine_overflow         (pi_fine_overflow_w[1]),\n      .pi_counter_read_val      (pi_counter_read_val_w[1]),\n      .pi_dqs_found             (pi_dqs_found_w[1]),\n      .pi_dqs_found_all         (pi_dqs_found_all_w[1]),\n      .pi_dqs_found_any         (pi_dqs_found_any_w[1]),\n      .pi_phase_locked_lanes    (pi_phase_locked_lanes[HIGHEST_LANE_B1+4-1:4]),\n      .pi_dqs_found_lanes       (pi_dqs_found_lanes[HIGHEST_LANE_B1+4-1:4]),\n      .pi_dqs_out_of_range      (pi_dqs_out_of_range_w[1]),\n      .pi_phase_locked          (pi_phase_locked_w[1]),\n      .pi_phase_locked_all      (pi_phase_locked_all_w[1]),\n      .fine_delay               (fine_delay),\n      .fine_delay_sel           (fine_delay_sel)\n);\n\n   always @(posedge auxout_clk or posedge rst_auxout)  begin\n     if (rst_auxout) begin\n         aux_out[4]  <= #100 0;\n         aux_out[6]  <= #100 0;\n     end\n     else begin\n         aux_out[4]  <= #100 aux_out_[4];\n         aux_out[6]  <= #100 aux_out_[6];\n     end\n   end\n   if ( LP_RCLK_SELECT_EDGE[1]) begin\n      always @(posedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[5]  <= #100 0;\n            aux_out[7]  <= #100 0;\n        end\n        else begin\n            aux_out[5]  <= #100 aux_out_[5];\n            aux_out[7]  <= #100 aux_out_[7];\n        end\n      end\n   end\n   else begin\n      always @(negedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[5]  <= #100 0;\n            aux_out[7]  <= #100 0;\n        end\n        else begin\n            aux_out[5]  <= #100 aux_out_[5];\n            aux_out[7]  <= #100 aux_out_[7];\n        end\n      end\n   end\nend\nelse begin\n   if ( HIGHEST_BANK > 1)  begin\n       assign phy_din[HIGHEST_LANE_B1*80+320-1:320] = 0;\n       assign _phy_ctl_a_full_p[1] = 0;\n       assign of_ctl_a_full_v[1]   = 0;\n       assign of_ctl_full_v[1]     = 0;\n       assign of_data_a_full_v[1]  = 0;\n       assign of_data_full_v[1]    = 0;\n       assign pre_data_a_full_v[1] = 0;\n       assign if_empty_v[1]        = 0;\n       assign byte_rd_en_v[1]      = 1;\n       assign pi_phase_locked_lanes[HIGHEST_LANE_B1+4-1:4]  = 4'b1111;\n       assign pi_dqs_found_lanes[HIGHEST_LANE_B1+4-1:4]  = 4'b1111;\n       always @(*)\n          aux_out[7:4] = 0;\n   end\n       assign pi_dqs_found_w[1]    = 1;\n       assign pi_dqs_found_all_w[1]    = 1;\n       assign pi_dqs_found_any_w[1]    = 0;\n       assign pi_dqs_out_of_range_w[1]    = 0;\n       assign pi_phase_locked_w[1]    = 1;\n       assign po_coarse_overflow_w[1] = 0;\n       assign po_fine_overflow_w[1] = 0;\n       assign pi_fine_overflow_w[1] = 0;\n       assign po_counter_read_val_w[1] = 0;\n       assign pi_counter_read_val_w[1] = 0;\n       assign mcGo_w[1] = 1;\nend\n\nif ( BYTE_LANES_B2 != 0) begin : ddr_phy_4lanes_2\n\nmig_7series_v4_1_ddr_phy_4lanes #\n  (\n     .BYTE_LANES                (BYTE_LANES_B2),        \n     .DATA_CTL_N                (PHY_2_DATA_CTL), \n     .PO_CTL_COARSE_BYPASS      (PO_CTL_COARSE_BYPASS),\n     .PO_FINE_DELAY             (L_PHY_2_PO_FINE_DELAY),\n     .BITLANES                  (PHY_2_BITLANES),\n     .BITLANES_OUTONLY          (PHY_2_BITLANES_OUTONLY),\n     .BYTELANES_DDR_CK          (LP_PHY_2_BYTELANES_DDR_CK),\n     .LAST_BANK                 (PHY_2_IS_LAST_BANK ),\n     .LANE_REMAP                (PHY_2_LANE_REMAP),\n     .OF_ALMOST_FULL_VALUE      (PHY_2_OF_ALMOST_FULL_VALUE),\n     .IF_ALMOST_EMPTY_VALUE     (PHY_2_IF_ALMOST_EMPTY_VALUE),\n     .GENERATE_IDELAYCTRL       (PHY_2_GENERATE_IDELAYCTRL),\n     .IODELAY_GRP               (PHY_2_IODELAY_GRP),\n     .FPGA_SPEED_GRADE          (FPGA_SPEED_GRADE),\n     .BANK_TYPE                 (BANK_TYPE),\n     .NUM_DDR_CK                (NUM_DDR_CK),\n     .TCK                       (TCK),\n     .RCLK_SELECT_LANE          (RCLK_SELECT_LANE),\n     .USE_PRE_POST_FIFO         (USE_PRE_POST_FIFO),\n     .SYNTHESIS                 (SYNTHESIS),\n     .PC_CLK_RATIO              (PHY_CLK_RATIO),\n     .PC_EVENTS_DELAY           (PHY_EVENTS_DELAY),\n     .PC_FOUR_WINDOW_CLOCKS     (PHY_FOUR_WINDOW_CLOCKS),\n     .PC_BURST_MODE             (PHY_2_A_BURST_MODE),\n     .PC_SYNC_MODE              (PHY_SYNC_MODE),\n     .PC_MULTI_REGION           (PHY_MULTI_REGION),\n     .PC_PHY_COUNT_EN           (PHY_COUNT_EN),\n     .PC_DISABLE_SEQ_MATCH      (PHY_DISABLE_SEQ_MATCH),\n     .PC_CMD_OFFSET             (PHY_2_CMD_OFFSET),\n     .PC_RD_CMD_OFFSET_0        (PHY_2_RD_CMD_OFFSET_0),\n     .PC_RD_CMD_OFFSET_1        (PHY_2_RD_CMD_OFFSET_1),\n     .PC_RD_CMD_OFFSET_2        (PHY_2_RD_CMD_OFFSET_2),\n     .PC_RD_CMD_OFFSET_3        (PHY_2_RD_CMD_OFFSET_3),\n     .PC_RD_DURATION_0          (PHY_2_RD_DURATION_0),\n     .PC_RD_DURATION_1          (PHY_2_RD_DURATION_1),\n     .PC_RD_DURATION_2          (PHY_2_RD_DURATION_2),\n     .PC_RD_DURATION_3          (PHY_2_RD_DURATION_3),\n     .PC_WR_CMD_OFFSET_0        (PHY_2_WR_CMD_OFFSET_0),\n     .PC_WR_CMD_OFFSET_1        (PHY_2_WR_CMD_OFFSET_1),\n     .PC_WR_CMD_OFFSET_2        (PHY_2_WR_CMD_OFFSET_2),\n     .PC_WR_CMD_OFFSET_3        (PHY_2_WR_CMD_OFFSET_3),\n     .PC_WR_DURATION_0          (PHY_2_WR_DURATION_0),\n     .PC_WR_DURATION_1          (PHY_2_WR_DURATION_1),\n     .PC_WR_DURATION_2          (PHY_2_WR_DURATION_2),\n     .PC_WR_DURATION_3          (PHY_2_WR_DURATION_3),\n     .PC_AO_WRLVL_EN            (PHY_2_AO_WRLVL_EN),\n     .PC_AO_TOGGLE              (PHY_2_AO_TOGGLE),\n\n     .PI_SEL_CLK_OFFSET         (PI_SEL_CLK_OFFSET),\n\n     .A_PI_FINE_DELAY           (L_PHY_2_A_PI_FINE_DELAY),\n     .B_PI_FINE_DELAY           (L_PHY_2_B_PI_FINE_DELAY),\n     .C_PI_FINE_DELAY           (L_PHY_2_C_PI_FINE_DELAY),\n     .D_PI_FINE_DELAY           (L_PHY_2_D_PI_FINE_DELAY),\n     .A_PI_FREQ_REF_DIV         (PHY_2_A_PI_FREQ_REF_DIV),\n     .A_PI_BURST_MODE           (PHY_2_A_BURST_MODE),\n     .A_PI_OUTPUT_CLK_SRC       (L_PHY_2_A_PI_OUTPUT_CLK_SRC),\n     .B_PI_OUTPUT_CLK_SRC       (L_PHY_2_B_PI_OUTPUT_CLK_SRC),\n     .C_PI_OUTPUT_CLK_SRC       (L_PHY_2_C_PI_OUTPUT_CLK_SRC),\n     .D_PI_OUTPUT_CLK_SRC       (L_PHY_2_D_PI_OUTPUT_CLK_SRC),\n     .A_PO_OUTPUT_CLK_SRC       (PHY_2_A_PO_OUTPUT_CLK_SRC),\n     .A_PO_OCLK_DELAY           (PHY_2_A_PO_OCLK_DELAY),\n     .A_PO_OCLKDELAY_INV        (PHY_2_A_PO_OCLKDELAY_INV),\n     .A_OF_ARRAY_MODE           (PHY_2_A_OF_ARRAY_MODE),\n     .B_OF_ARRAY_MODE           (PHY_2_B_OF_ARRAY_MODE),\n     .C_OF_ARRAY_MODE           (PHY_2_C_OF_ARRAY_MODE),\n     .D_OF_ARRAY_MODE           (PHY_2_D_OF_ARRAY_MODE),\n     .A_IF_ARRAY_MODE           (PHY_2_A_IF_ARRAY_MODE),\n     .B_IF_ARRAY_MODE           (PHY_2_B_IF_ARRAY_MODE),\n     .C_IF_ARRAY_MODE           (PHY_2_C_IF_ARRAY_MODE),\n     .D_IF_ARRAY_MODE           (PHY_2_D_IF_ARRAY_MODE),\n     .A_OS_DATA_RATE            (PHY_2_A_OSERDES_DATA_RATE),\n     .A_OS_DATA_WIDTH           (PHY_2_A_OSERDES_DATA_WIDTH),\n     .B_OS_DATA_RATE            (PHY_2_B_OSERDES_DATA_RATE),\n     .B_OS_DATA_WIDTH           (PHY_2_B_OSERDES_DATA_WIDTH),\n     .C_OS_DATA_RATE            (PHY_2_C_OSERDES_DATA_RATE),\n     .C_OS_DATA_WIDTH           (PHY_2_C_OSERDES_DATA_WIDTH),\n     .D_OS_DATA_RATE            (PHY_2_D_OSERDES_DATA_RATE),\n     .D_OS_DATA_WIDTH           (PHY_2_D_OSERDES_DATA_WIDTH),\n     .A_IDELAYE2_IDELAY_TYPE    (PHY_2_A_IDELAYE2_IDELAY_TYPE),\n     .A_IDELAYE2_IDELAY_VALUE   (PHY_2_A_IDELAYE2_IDELAY_VALUE)\n     ,.CKE_ODT_AUX                   (CKE_ODT_AUX)\n     ,.PI_DIV2_INCDEC           (PI_DIV2_INCDEC)\n)\n u_ddr_phy_4lanes\n(\n      .rst                      (rst),\n      .phy_clk                  (phy_clk_split2),\n      .clk_div2                 (clk_div2),\n      .phy_ctl_clk              (phy_ctl_clk_split2),\n      .phy_ctl_wd               (phy_ctl_wd_split2),\n      .data_offset              (phy_data_offset_2_split2),\n      .phy_ctl_wr               (phy_ctl_wr_split2),\n      .mem_refclk               (mem_refclk_split),\n      .freq_refclk              (freq_refclk_split),\n      .mem_refclk_div4          (mem_refclk_div4_split),\n      .sync_pulse               (sync_pulse_split),\n      .phy_dout                 (phy_dout_split2[HIGHEST_LANE_B2*80+640-1:640]),\n      .phy_cmd_wr_en            (phy_cmd_wr_en_split2),\n      .phy_data_wr_en           (phy_data_wr_en_split2),\n      .phy_rd_en                (phy_rd_en_split2),\n      .pll_lock                 (pll_lock),\n      .ddr_clk                  (ddr_clk_w[2]),\n      .rclk                     (),\n      .rst_out                  (rst_out_w[2]),\n      .mcGo                     (mcGo_w[2]),\n      .ref_dll_lock             (ref_dll_lock_w[2]),\n      .idelayctrl_refclk        (idelayctrl_refclk),\n      .idelay_inc               (idelay_inc),\n      .idelay_ce                (idelay_ce),\n      .idelay_ld                (idelay_ld),\n      .phy_ctl_mstr_empty       (phy_ctl_mstr_empty),\n      .if_rst                   (if_rst),\n      .if_empty_def             (if_empty_def),\n      .byte_rd_en_oth_banks     (byte_rd_en_oth_banks[5:4]),\n      .if_a_empty               (if_a_empty_v[2]),\n      .if_empty                 (if_empty_v[2]),\n      .byte_rd_en               (byte_rd_en_v[2]),\n      .if_empty_or              (if_empty_or_v[2]),\n      .if_empty_and             (if_empty_and_v[2]),\n      .of_ctl_a_full            (of_ctl_a_full_v[2]),\n      .of_data_a_full           (of_data_a_full_v[2]),\n      .of_ctl_full              (of_ctl_full_v[2]),\n      .of_data_full             (of_data_full_v[2]),\n      .pre_data_a_full          (pre_data_a_full_v[2]),\n      .phy_din                  (phy_din[HIGHEST_LANE_B2*80+640-1:640]),\n      .phy_ctl_a_full           (_phy_ctl_a_full_p[2]),\n      .phy_ctl_full             (_phy_ctl_full_p[2]),\n      .phy_ctl_empty            (phy_ctl_empty[2]),\n      .mem_dq_out               (mem_dq_out[HIGHEST_LANE_B2*12+96-1:96]),\n      .mem_dq_ts                (mem_dq_ts[HIGHEST_LANE_B2*12+96-1:96]),\n      .mem_dq_in                (mem_dq_in[HIGHEST_LANE_B2*10+80-1:80]),\n      .mem_dqs_out              (mem_dqs_out[HIGHEST_LANE_B2-1+8:8]),\n      .mem_dqs_ts               (mem_dqs_ts[HIGHEST_LANE_B2-1+8:8]),\n      .mem_dqs_in               (mem_dqs_in[HIGHEST_LANE_B2-1+8:8]),\n      .aux_out                  (aux_out_[11:8]),\n      .phy_ctl_ready            (phy_ctl_ready_w[2]),\n      .phy_write_calib          (phy_write_calib),\n      .phy_read_calib           (phy_read_calib),\n\n\n\n\n      .phyGo                    (phyGo),\n      .input_sink               (input_sink),\n\n      .calib_sel                (calib_sel_byte2),\n      .calib_zero_ctrl          (calib_zero_ctrl[2]),\n      .calib_zero_lanes         (calib_zero_lanes_int[11:8]),\n      .calib_in_common          (calib_in_common),\n      .po_coarse_enable         (po_coarse_enable[2]),\n      .po_fine_enable           (po_fine_enable[2]),\n      .po_fine_inc              (po_fine_inc[2]),\n      .po_coarse_inc            (po_coarse_inc[2]),\n      .po_counter_load_en       (po_counter_load_en),\n      .po_sel_fine_oclk_delay   (po_sel_fine_oclk_delay[2]),\n      .po_counter_load_val      (po_counter_load_val),\n      .po_counter_read_en       (po_counter_read_en),\n      .po_coarse_overflow       (po_coarse_overflow_w[2]),\n      .po_fine_overflow         (po_fine_overflow_w[2]),\n      .po_counter_read_val      (po_counter_read_val_w[2]),\n\n      .pi_rst_dqs_find          (pi_rst_dqs_find[2]),\n      .pi_fine_enable           (pi_fine_enable),\n      .pi_fine_inc              (pi_fine_inc),\n      .pi_counter_load_en       (pi_counter_load_en),\n      .pi_counter_read_en       (pi_counter_read_en),\n      .pi_counter_load_val      (pi_counter_load_val),\n      .pi_fine_overflow         (pi_fine_overflow_w[2]),\n      .pi_counter_read_val      (pi_counter_read_val_w[2]),\n      .pi_dqs_found             (pi_dqs_found_w[2]),\n      .pi_dqs_found_all         (pi_dqs_found_all_w[2]),\n      .pi_dqs_found_any         (pi_dqs_found_any_w[2]),\n      .pi_phase_locked_lanes    (pi_phase_locked_lanes[HIGHEST_LANE_B2+8-1:8]),\n      .pi_dqs_found_lanes       (pi_dqs_found_lanes[HIGHEST_LANE_B2+8-1:8]),\n      .pi_dqs_out_of_range      (pi_dqs_out_of_range_w[2]),\n      .pi_phase_locked          (pi_phase_locked_w[2]),\n      .pi_phase_locked_all      (pi_phase_locked_all_w[2]),\n      .fine_delay               (fine_delay),\n      .fine_delay_sel           (fine_delay_sel)\n);\n   always @(posedge auxout_clk or posedge rst_auxout)  begin\n     if (rst_auxout) begin\n         aux_out[8]  <= #100 0;\n         aux_out[10] <= #100 0;\n     end\n     else begin\n         aux_out[8]  <= #100 aux_out_[8];\n         aux_out[10] <= #100 aux_out_[10];\n     end\n   end\n   if ( LP_RCLK_SELECT_EDGE[1]) begin\n      always @(posedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[9]  <= #100 0;\n            aux_out[11] <= #100 0;\n        end\n        else begin\n            aux_out[9]  <= #100 aux_out_[9];\n            aux_out[11] <= #100 aux_out_[11];\n        end\n      end\n   end\n   else begin\n      always @(negedge auxout_clk or posedge rst_auxout)  begin\n        if (rst_auxout) begin\n            aux_out[9]  <= #100 0;\n            aux_out[11] <= #100 0;\n        end\n        else begin\n            aux_out[9]  <= #100 aux_out_[9];\n            aux_out[11] <= #100 aux_out_[11];\n        end\n      end\n   end\nend\nelse begin\n   if ( HIGHEST_BANK > 2)  begin\n       assign phy_din[HIGHEST_LANE_B2*80+640-1:640] = 0;\n       assign _phy_ctl_a_full_p[2] = 0;\n       assign of_ctl_a_full_v[2]   = 0;\n       assign of_ctl_full_v[2]     = 0;\n       assign of_data_a_full_v[2]  = 0;\n       assign of_data_full_v[2]    = 0;\n       assign pre_data_a_full_v[2] = 0;\n       assign if_empty_v[2]        = 0;\n       assign byte_rd_en_v[2]      = 1;\n       assign pi_phase_locked_lanes[HIGHEST_LANE_B2+8-1:8]  = 4'b1111;\n       assign pi_dqs_found_lanes[HIGHEST_LANE_B2+8-1:8]  = 4'b1111;\n       always @(*)\n         aux_out[11:8] = 0;\n   end\n       assign pi_dqs_found_w[2]    = 1;\n       assign pi_dqs_found_all_w[2]    = 1;\n       assign pi_dqs_found_any_w[2]    = 0;\n       assign pi_dqs_out_of_range_w[2]    = 0;\n       assign pi_phase_locked_w[2]    = 1;\n       assign po_coarse_overflow_w[2] = 0;\n       assign po_fine_overflow_w[2] = 0;\n       assign po_counter_read_val_w[2] = 0;\n       assign pi_counter_read_val_w[2] = 0;\n       assign mcGo_w[2] = 1;\nend\nendgenerate\n\ngenerate\n\n\n\n\n\nif ( BYTE_LANES_B1 == 0 && BYTE_LANES_B2 == 0 && RCLK_SELECT_BANK>0)\nbegin : phaser_in_rclk\n\nlocalparam L_EXTRA_PI_FINE_DELAY = DEFAULT_RCLK_DELAY;\n\nPHASER_IN_PHY #(\n  .BURST_MODE                       ( PHY_0_A_BURST_MODE),\n  .CLKOUT_DIV                       ( PHY_0_A_PI_CLKOUT_DIV),\n  .FREQ_REF_DIV                     ( PHY_0_A_PI_FREQ_REF_DIV),\n  .REFCLK_PERIOD                    ( L_FREQ_REF_PERIOD_NS),\n  .FINE_DELAY                       ( L_EXTRA_PI_FINE_DELAY),\n  .OUTPUT_CLK_SRC                   ( RCLK_PI_OUTPUT_CLK_SRC)\n) phaser_in_rclk (\n  .DQSFOUND                         (),\n  .DQSOUTOFRANGE                    (),\n  .FINEOVERFLOW                     (),\n  .PHASELOCKED                      (),\n  .ISERDESRST                       (),\n  .ICLKDIV                          (),\n  .ICLK                             (),\n  .COUNTERREADVAL                   (),\n  .RCLK                             (),\n  .WRENABLE                         (),\n  .BURSTPENDINGPHY                  (),\n  .ENCALIBPHY                       (),\n  .FINEENABLE                       (0),\n  .FREQREFCLK                       (freq_refclk),\n  .MEMREFCLK                        (mem_refclk),\n  .RANKSELPHY                       (0),\n  .PHASEREFCLK                      (),\n  .RSTDQSFIND                       (0),\n  .RST                              (rst),\n  .FINEINC                          (),\n  .COUNTERLOADEN                    (),\n  .COUNTERREADEN                    (),\n  .COUNTERLOADVAL                   (),\n  .SYNCIN                           (sync_pulse),\n  .SYSCLK                           (phy_clk)\n);\n\nend\n\nendgenerate\n\n\n\nalways @(*) begin\n      case (calib_sel[5:3])\n      3'b000: begin\n          po_coarse_overflow  = po_coarse_overflow_w[0];\n          po_fine_overflow    = po_fine_overflow_w[0];\n          po_counter_read_val = po_counter_read_val_w[0];\n          pi_fine_overflow    = pi_fine_overflow_w[0];\n          pi_counter_read_val = pi_counter_read_val_w[0];\n          pi_phase_locked     = pi_phase_locked_w[0];\n          if ( calib_in_common)\n             pi_dqs_found        = pi_dqs_found_any;\n          else\n             pi_dqs_found        = pi_dqs_found_w[0];\n          pi_dqs_out_of_range = pi_dqs_out_of_range_w[0];\n        end\n      3'b001: begin\n          po_coarse_overflow  = po_coarse_overflow_w[1];\n          po_fine_overflow    = po_fine_overflow_w[1];\n          po_counter_read_val = po_counter_read_val_w[1];\n          pi_fine_overflow    = pi_fine_overflow_w[1];\n          pi_counter_read_val = pi_counter_read_val_w[1];\n          pi_phase_locked     = pi_phase_locked_w[1];\n          if ( calib_in_common)\n              pi_dqs_found        = pi_dqs_found_any;\n          else\n              pi_dqs_found        = pi_dqs_found_w[1];\n          pi_dqs_out_of_range = pi_dqs_out_of_range_w[1];\n        end\n      3'b010: begin\n          po_coarse_overflow  = po_coarse_overflow_w[2];\n          po_fine_overflow    = po_fine_overflow_w[2];\n          po_counter_read_val = po_counter_read_val_w[2];\n          pi_fine_overflow    = pi_fine_overflow_w[2];\n          pi_counter_read_val = pi_counter_read_val_w[2];\n          pi_phase_locked     = pi_phase_locked_w[2];\n          if ( calib_in_common)\n             pi_dqs_found        = pi_dqs_found_any;\n          else\n             pi_dqs_found        = pi_dqs_found_w[2];\n          pi_dqs_out_of_range = pi_dqs_out_of_range_w[2];\n        end\n       default: begin\n          po_coarse_overflow  = 0;\n          po_fine_overflow    = 0;\n          po_counter_read_val = 0;\n          pi_fine_overflow    = 0;\n          pi_counter_read_val = 0;\n          pi_phase_locked     = 0;\n          pi_dqs_found        = 0;\n          pi_dqs_out_of_range = 0;\n        end\n       endcase\nend\n\nendmodule \n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: mig_7series_v4_1_ddr_mc_phy. Module specification: This module implements a DDR (Double Data Rate) memory controller PHY (Physical Layer) interface for 7 series FPGAs. It handles the physical layer communication between the memory controller and DDR memory devices, supporting multiple byte lanes and banks. The module has numerous input ports for control signals, clocks, and data, including rst, phy_clk, phy_ctl_wd, and phy_dout. Output ports include phy_din, mem_dq_out, mem_dqs_out, and various status signals. Internal signals are used for calibration, phaser control, and FIFO management. The module is highly configurable through parameters and consists of several sub-blocks, including ddr_phy_4lanes instances for each bank, PHASER_IN_"
                }
            ]
        }
    ]
}