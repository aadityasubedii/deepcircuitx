{
    "spec": "Module name: mig_7series_v4_1_ddr_calib_top. Module specification: This module serves as the top-level calibration module for a DDR (Double Data Rate) memory interface. It orchestrates various calibration processes including write leveling, read leveling, DQS (Data Strobe) calibration, and temperature monitoring. The module integrates several sub-modules to perform these calibration tasks, manages calibration sequences, and handles timing adjustments for different aspects of the DDR interface. Key input ports include clock (clk), reset (rst), and various status signals from DDR interface components. Output ports comprise calibration control signals, memory interface signals, and debug outputs. Internal signals are used for inter-module communication, state management, and calibration process control. The module is structured into several main blocks: initialization logic, write leveling, read leveling, DQS calibration, ",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_calib_top\n\nExplanation: This module appears to be the top-level calibration module for a DDR (Double Data Rate) memory interface. It orchestrates various calibration processes such as write leveling, read leveling, DQS (Data Strobe) calibration, and temperature monitoring. The module integrates several sub-modules to perform these calibration tasks, manages calibration sequences, and handles timing adjustments for different aspects of the DDR interface. It also includes debug features and supports different DRAM types and configurations. The overall purpose is to ensure proper timing and signal integrity for reliable DDR memory operations."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nclk, rst, slot_0_present, slot_1_present, phy_ctl_ready, phy_ctl_full, phy_cmd_full, phy_data_full, pi_phaselocked, pi_phase_locked_all, pi_found_dqs, pi_dqs_found_all, pi_dqs_found_lanes, pi_counter_read_val, phy_if_empty, idelaye2_init_val, oclkdelay_init_val, tg_err, phy_rddata, pd_out, poc_sample_pd, calib_tap_load, calib_tap_addr, calib_tap_load_done, calib_tap_val, device_temp, tempmon_sample_en, dbg_sel_pi_incdec, dbg_sel_po_incdec, dbg_byte_sel, dbg_pi_f_inc, dbg_pi_f_dec, dbg_po_f_inc, dbg_po_f_stg23_sel, dbg_po_f_dec, dbg_idel_up_all, dbg_idel_down_all, dbg_idel_up_cpt, dbg_idel_down_cpt, dbg_sel_idel_cpt, dbg_sel_all_idel_cpt, psdone.\n\nExplanation: These inputs include clock and reset signals, status signals from various DDR interface components, calibration control signals, debug inputs, and temperature monitoring inputs.\n\nOutput ports:\nwrite_calib, read_calib, calib_ctl_wren, calib_cmd_wren, calib_seq, calib_aux_out, calib_cke, calib_odt, calib_cmd, calib_wrdata_en, calib_rank_cnt, calib_cas_slot, calib_data_offset_0, calib_data_offset_1, calib_data_offset_2, phy_address, phy_bank, phy_cs_n, phy_ras_n, phy_cas_n, phy_we_n, phy_reset_n, calib_sel, calib_in_common, calib_zero_inputs, calib_zero_ctrl, phy_if_empty_def, phy_if_reset, pi_rst_stg1_cal, pi_en_stg2_f, pi_stg2_f_incdec, pi_stg2_load, pi_stg2_reg_l, idelay_ce, idelay_inc, idelay_ld, po_sel_stg2stg3, po_stg2_c_incdec, po_en_stg2_c, po_stg2_f_incdec, po_en_stg2_f, po_counter_load_en, phy_wrdata, dlyval_dq, calib_rd_data_offset_0, calib_rd_data_offset_1, calib_rd_data_offset_2, phy_rddata_valid, calib_writes, init_calib_complete, init_wrcal_complete, pi_phase_locked_err, pi_dqsfound_err, wrcal_err, psen, psincdec, calib_tap_req, dbg_pi_phaselock_start, dbg_pi_dqsfound_start, dbg_pi_dqsfound_done, dbg_wrcal_start, dbg_wrcal_done, dbg_wrlvl_start, dbg_wrlvl_done, dbg_wrlvl_err, dbg_wrlvl_fine_tap_cnt, dbg_wrlvl_coarse_tap_cnt, dbg_phy_wrlvl, dbg_tap_cnt_during_wrlvl, dbg_wl_edge_detect_valid, dbg_rd_data_edge_detect, dbg_final_po_fine_tap_cnt, dbg_final_po_coarse_tap_cnt, dbg_phy_wrcal, dbg_rdlvl_start, dbg_rdlvl_done, dbg_rdlvl_err, dbg_cpt_first_edge_cnt, dbg_cpt_second_edge_cnt, dbg_cpt_tap_cnt, dbg_dq_idelay_tap_cnt, dbg_phy_rdlvl, dbg_calib_top, dbg_oclkdelay_calib_start, dbg_oclkdelay_calib_done, dbg_phy_oclkdelay_cal, dbg_oclkdelay_rd_data, dbg_phy_init, dbg_prbs_rdlvl, dbg_dqs_found_cal, dbg_poc, prbs_final_dqs_tap_cnt_r, dbg_prbs_first_edge_taps, dbg_prbs_second_edge_taps, byte_sel_cnt, fine_delay_incdec_pb, fine_delay_sel.\n\nExplanation: These outputs include calibration control signals, memory interface signals, delay adjustment signals, debug outputs, and various status signals related to the calibration process and DDR interface operation."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\nprbs_seed, prbs_out, prbs_rise0, prbs_fall0, prbs_rise1, prbs_fall1, prbs_rise2, prbs_fall2, prbs_rise3, prbs_fall3, prbs_o, dqsfound_retry, dqsfound_retry_done, phy_rddata_en, prech_done, rdlvl_stg1_done, rdlvl_stg1_done_r1, pi_dqs_found_done, rdlvl_stg1_err, pi_dqs_found_err, wrcal_pat_resume, wrcal_resume_w, rdlvl_prech_req, rdlvl_last_byte_done, rdlvl_stg1_start, rdlvl_stg1_rank_done, rdlvl_assrt_common, pi_dqs_found_start, pi_dqs_found_rank_done, wl_sm_start, wrcal_start, wrcal_rd_wait, wrcal_prech_req, wrcal_pat_err, wrcal_done, wrlvl_done, wrlvl_err, wrlvl_start, ck_addr_cmd_delay_done, po_ck_addr_cmd_delay_done, pi_calib_done, detect_pi_found_dqs, rd_data_offset_0, rd_data_offset_1, rd_data_offset_2, rd_data_offset_ranks_0, rd_data_offset_ranks_1, rd_data_offset_ranks_2, rd_data_offset_ranks_mc_0, rd_data_offset_ranks_mc_1, rd_data_offset_ranks_mc_2, cmd_po_stg2_f_incdec, cmd_po_stg2_incdec_ddr2_c, cmd_po_en_stg2_f, cmd_po_en_stg2_ddr2_c, cmd_po_stg2_c_incdec, cmd_po_en_stg2_c, po_stg2_ddr2_incdec, po_en_stg2_ddr2, dqs_po_stg2_f_incdec, dqs_po_en_stg2_f, dqs_wl_po_stg2_c_incdec, wrcal_po_stg2_c_incdec, dqs_wl_po_en_stg2_c, wrcal_po_en_stg2_c, ctl_lane_cnt, ctl_lane_sel, po_stg2_wrcal_cnt, po_stg2_wl_cnt, po_stg2_ddr2_cnt, dqs_wl_po_stg2_reg_l, dqs_wl_po_stg2_load, dqs_po_stg2_reg_l, dqs_po_stg2_load, dqs_po_dec_done, pi_fine_dly_dec_done, rdlvl_pi_stg2_f_incdec, rdlvl_pi_stg2_f_en, pi_stg2_rdlvl_cnt, wl_po_coarse_cnt, wl_po_fine_cnt, phase_locked_err, phy_ctl_rdy_dly, idelay_ce_int, idelay_inc_int, idelay_ce_r1, idelay_ce_r2, idelay_inc_r1, idelay_inc_r2, po_dly_req_r, wrcal_read_req, wrcal_act_req, temp_wrcal_done, tg_timer_done, no_rst_tg_mc, calib_complete, reset_if_r1, reset_if_r2, reset_if_r3, reset_if_r4, reset_if_r5, reset_if_r6, reset_if_r7, reset_if_r8, reset_if_r9, reset_if, phy_if_reset_w, pi_phaselock_start.\n\nExplanation:\nThese internal signals serve various purposes within the module:\n- prbs_* signals are related to Pseudo-Random Binary Sequence generation and processing.\n- *_done and *_start signals indicate completion and initiation of various calibration stages.\n- phy_* signals interface with the physical layer of the DDR memory.\n- pi_* and po_* signals are related to Phase Interpolator and Phase Offset adjustments.\n- cmd_* signals control command-related operations.\n- wrcal_* and wrlvl_* signals are associated with write calibration and write leveling.\n- rdlvl_* signals are related to read leveling processes.\n- dqs_* signals deal with Data Strobe signal management.\n- ctl_* signals are for control lane operations.\n- idelay_* signals manage input delay adjustments.\n- reset_* signals handle various reset scenarios.\n- Other signals support debug, error detection, and specific calibration processes."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule mig_7series_v4_1_ddr_calib_top #\n  (\n   parameter TCQ             = 100,\n   parameter nCK_PER_CLK     = 2,       \n   parameter tCK             = 2500,    \n   parameter DDR3_VDD_OP_VOLT = \"135\",     \n   parameter CLK_PERIOD      = 3333,    \n   parameter N_CTL_LANES     = 3,       \n   parameter DRAM_TYPE       = \"DDR3\",  \n   parameter PRBS_WIDTH      = 8,      \n   parameter HIGHEST_LANE    = 4,\n   parameter HIGHEST_BANK    = 3,\n   parameter BANK_TYPE       = \"HP_IO\", \n   \n   \n   parameter DATA_CTL_B0     = 4'hc,\n   parameter DATA_CTL_B1     = 4'hf,\n   parameter DATA_CTL_B2     = 4'hf,\n   parameter DATA_CTL_B3     = 4'hf,\n   parameter DATA_CTL_B4     = 4'hf,\n   \n   \n   parameter BYTE_LANES_B0   = 4'b1111,\n   parameter BYTE_LANES_B1   = 4'b0000,\n   parameter BYTE_LANES_B2   = 4'b0000,\n   parameter BYTE_LANES_B3   = 4'b0000,\n   parameter BYTE_LANES_B4   = 4'b0000,\n   parameter DQS_BYTE_MAP\n     = 144'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00,\n   parameter CTL_BYTE_LANE   = 8'hE4,    \n   parameter CTL_BANK        = 3'b000,  \n   \n   parameter [7:0] SLOT_1_CONFIG = 8'b0000_0000,\n   \n   parameter BANK_WIDTH      = 2,       \n   parameter CA_MIRROR       = \"OFF\",   \n   parameter COL_WIDTH       = 10,      \n   parameter nCS_PER_RANK    = 1,       \n   parameter DQ_WIDTH        = 64,      \n   parameter DQS_CNT_WIDTH   = 3,       \n   parameter DQS_WIDTH       = 8,       \n   parameter DRAM_WIDTH      = 8,       \n   parameter ROW_WIDTH       = 14,      \n   parameter RANKS           = 1,       \n   parameter CS_WIDTH        = 1,       \n   parameter CKE_WIDTH       = 1,       \n   parameter DDR2_DQSN_ENABLE = \"YES\",  \n   parameter PER_BIT_DESKEW  = \"ON\",\n   \n   \n   parameter NUM_DQSFOUND_CAL = 1020,      \n   parameter CALIB_ROW_ADD   = 16'h0000,\n   parameter CALIB_COL_ADD   = 12'h000, \n   parameter CALIB_BA_ADD    = 3'h0,    \n   \n   parameter AL              = \"0\",     \n   parameter TEST_AL         = \"0\",     \n   parameter ADDR_CMD_MODE   = \"1T\",    \n   parameter BURST_MODE      = \"8\",     \n   parameter BURST_TYPE      = \"SEQ\",   \n   parameter nCL             = 5,       \n   parameter nCWL            = 5,       \n   parameter tRFC            = 110000,  \n   parameter tREFI           = 7800000, \n   parameter OUTPUT_DRV      = \"HIGH\",  \n   parameter REG_CTRL        = \"ON\",    \n   parameter RTT_NOM         = \"60\",    \n   parameter RTT_WR          = \"60\",    \n   parameter USE_ODT_PORT    = 0,       \n                                        \n   parameter WRLVL           = \"OFF\",   \n   parameter PRE_REV3ES       = \"OFF\",       \n   parameter POC_USE_METASTABLE_SAMP = \"FALSE\",\n\n    \n   parameter SIM_INIT_OPTION = \"NONE\",  \n   parameter SIM_CAL_OPTION  = \"NONE\",  \n   parameter CKE_ODT_AUX     = \"FALSE\",\n   parameter IDELAY_ADJ      = \"ON\",\n   parameter FINE_PER_BIT    = \"ON\",\n   parameter CENTER_COMP_MODE = \"ON\",\n   parameter PI_VAL_ADJ       = \"ON\",\n   parameter TAPSPERKCLK      = 56,\n   parameter DEBUG_PORT       = \"OFF\",    \n   parameter SKIP_CALIB       = \"FALSE\",\n   parameter PI_DIV2_INCDEC   = \"TRUE\"\n   )\n  (\n   input                              clk,         \n   input                              rst,         \n   \n   input [7:0]                        slot_0_present,\n   input [7:0]                        slot_1_present,\n   \n   \n   input                              phy_ctl_ready,\n   input                              phy_ctl_full,\n   input                              phy_cmd_full,\n   input                              phy_data_full,\n   \n   output                             write_calib,\n   output                             read_calib,\n   output                             calib_ctl_wren,\n   output                             calib_cmd_wren,\n   output [1:0]                       calib_seq,\n   output [3:0]                       calib_aux_out,\n   output [nCK_PER_CLK -1:0]          calib_cke,\n   output [1:0]               calib_odt,\n   output [2:0]                       calib_cmd,\n   output                             calib_wrdata_en,\n   output [1:0]                       calib_rank_cnt,\n   output [1:0]                       calib_cas_slot,\n   output [5:0]                       calib_data_offset_0,\n   output [5:0]                       calib_data_offset_1,\n   output [5:0]                       calib_data_offset_2,\n   output [nCK_PER_CLK*ROW_WIDTH-1:0] phy_address,\n   output [nCK_PER_CLK*BANK_WIDTH-1:0]phy_bank,\n   output [CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK-1:0] phy_cs_n,\n   output [nCK_PER_CLK-1:0]           phy_ras_n,\n   output [nCK_PER_CLK-1:0]           phy_cas_n,\n   output [nCK_PER_CLK-1:0]           phy_we_n,\n   output                             phy_reset_n,\n   \n output reg [5:0] calib_sel,\n output reg       calib_in_common,\n output reg [HIGHEST_BANK-1:0] calib_zero_inputs,\n   output reg [HIGHEST_BANK-1:0]      calib_zero_ctrl,\n   output                             phy_if_empty_def,\n   output reg                         phy_if_reset,\n\n   \n   input                              pi_phaselocked,\n   input                              pi_phase_locked_all,\n   input                              pi_found_dqs,\n   input                              pi_dqs_found_all,\n   input [HIGHEST_LANE-1:0]           pi_dqs_found_lanes,\n   input [5:0]                        pi_counter_read_val,\n   \n   output [HIGHEST_BANK-1:0]          pi_rst_stg1_cal,\n   output                             pi_en_stg2_f,\n   output                             pi_stg2_f_incdec,\n   output                             pi_stg2_load,\n   output [5:0]                       pi_stg2_reg_l,\n   \n   output                             idelay_ce,\n   output                             idelay_inc,\n   output                             idelay_ld,\n   \n output [2:0]       po_sel_stg2stg3 ,\n output [2:0]       po_stg2_c_incdec ,\n output [2:0]       po_en_stg2_c ,\n output [2:0]       po_stg2_f_incdec ,\n output [2:0]       po_en_stg2_f ,\n   output                             po_counter_load_en,\n   input [8:0]                        po_counter_read_val,\n   \n   input                              phy_if_empty,\n   input [4:0]                        idelaye2_init_val,\n   input [5:0]                        oclkdelay_init_val,\n\n   input                              tg_err,\n   output                             rst_tg_mc,\n   \n   output [2*nCK_PER_CLK*DQ_WIDTH-1:0]phy_wrdata,\n   \n   output [5*RANKS*DQ_WIDTH-1:0]      dlyval_dq,\n   \n   \n   \n   input[2*nCK_PER_CLK*DQ_WIDTH-1:0]  phy_rddata,\n   \n   output [6*RANKS-1:0]               calib_rd_data_offset_0,\n   output [6*RANKS-1:0]               calib_rd_data_offset_1,\n   output [6*RANKS-1:0]               calib_rd_data_offset_2,\n   output                             phy_rddata_valid,\n   output                             calib_writes,\n   (* max_fanout = 50 *) output reg   init_calib_complete,\n   output                             init_wrcal_complete,\n   output                             pi_phase_locked_err,\n   output                             pi_dqsfound_err,\n   output                             wrcal_err,\n   input                              pd_out,\n  \n  \n   \n   output                             psen,\n   output                             psincdec,\n   input                              psdone,\n   input                              poc_sample_pd,\n\n   \n   output reg                         calib_tap_req,\n   input [6:0]                        calib_tap_addr,\n   input                              calib_tap_load,\n   input [7:0]                        calib_tap_val,\n   input                              calib_tap_load_done,\n\n   \n   output                             dbg_pi_phaselock_start,\n   output                             dbg_pi_dqsfound_start,\n   output                             dbg_pi_dqsfound_done,\n   output                             dbg_wrcal_start,\n   output                             dbg_wrcal_done,\n   output                             dbg_wrlvl_start,\n   output                             dbg_wrlvl_done,\n   output                             dbg_wrlvl_err,\n   output [6*DQS_WIDTH-1:0]           dbg_wrlvl_fine_tap_cnt,\n   output [3*DQS_WIDTH-1:0]           dbg_wrlvl_coarse_tap_cnt,\n   output [255:0]                     dbg_phy_wrlvl,\n   output [5:0]                       dbg_tap_cnt_during_wrlvl,\n   output                             dbg_wl_edge_detect_valid,\n   output [DQS_WIDTH-1:0]             dbg_rd_data_edge_detect,\n\n   \n   output [6*DQS_WIDTH-1:0]           dbg_final_po_fine_tap_cnt,\n   output [3*DQS_WIDTH-1:0]           dbg_final_po_coarse_tap_cnt,\n   output [99:0]                      dbg_phy_wrcal,\n\n   \n   output [1:0]                       dbg_rdlvl_start,\n   output [1:0]                       dbg_rdlvl_done,\n   output [1:0]                       dbg_rdlvl_err,\n   output [6*DQS_WIDTH*RANKS-1:0]     dbg_cpt_first_edge_cnt,\n   output [6*DQS_WIDTH*RANKS-1:0]     dbg_cpt_second_edge_cnt,\n   output [6*DQS_WIDTH*RANKS-1:0]     dbg_cpt_tap_cnt,\n   output [5*DQS_WIDTH*RANKS-1:0]     dbg_dq_idelay_tap_cnt,\n\n   \n   input  [11:0]                      device_temp,\n   input                              tempmon_sample_en,\n   input                              dbg_sel_pi_incdec,\n   input                              dbg_sel_po_incdec,\n   input [DQS_CNT_WIDTH:0]            dbg_byte_sel,\n   input                              dbg_pi_f_inc,\n   input                              dbg_pi_f_dec,\n   input                              dbg_po_f_inc,\n   input                              dbg_po_f_stg23_sel,\n   input                              dbg_po_f_dec,\n   input                              dbg_idel_up_all,\n   input                              dbg_idel_down_all,\n   input                              dbg_idel_up_cpt,\n   input                              dbg_idel_down_cpt,\n   input [DQS_CNT_WIDTH-1:0]          dbg_sel_idel_cpt,\n   input                              dbg_sel_all_idel_cpt,\n   output [255:0]                     dbg_phy_rdlvl, \n   output [255:0]                     dbg_calib_top,   \n   output                             dbg_oclkdelay_calib_start,\n   output                             dbg_oclkdelay_calib_done,\n   output [255:0]                     dbg_phy_oclkdelay_cal,\n   output [DRAM_WIDTH*16 -1:0]        dbg_oclkdelay_rd_data,\n   output [255:0]                     dbg_phy_init,\n   output [255:0]                     dbg_prbs_rdlvl,\n   output [255:0]                     dbg_dqs_found_cal,\n   output [1023:0]                    dbg_poc,\n\n   output [6*DQS_WIDTH*RANKS-1:0] prbs_final_dqs_tap_cnt_r,\n   output [6*DQS_WIDTH*RANKS-1:0] dbg_prbs_first_edge_taps,\n   output [6*DQS_WIDTH*RANKS-1:0] dbg_prbs_second_edge_taps,\n   output reg [DQS_CNT_WIDTH:0]   byte_sel_cnt,\n   output [DRAM_WIDTH-1:0]        fine_delay_incdec_pb,  \n   output                         fine_delay_sel\n   );\n\n   function integer clogb2 (input integer size);\n    begin\n      size = size - 1;\n      for (clogb2=1; size>1; clogb2=clogb2+1)\n        size = size >> 1;\n    end\n   endfunction\n\n\n\n\n\n\n\n\n  localparam nSLOTS  = 1 + (|SLOT_1_CONFIG ? 1 : 0);\n\n  localparam OCAL_EN = ((SIM_CAL_OPTION == \"FAST_CAL\") || (tCK >= 2500) || (SKIP_CALIB == \"TRUE\")) ? \"OFF\" : \"ON\"; \n\n  \n  \n  \n  localparam DQS_FOUND_N_CTL_LANES = (DRAM_TYPE == \"DDR3\") ? N_CTL_LANES : 1;\n\n  localparam DQSFOUND_CAL    = (BANK_TYPE == \"HR_IO\" || BANK_TYPE == \"HRL_IO\" || (BANK_TYPE == \"HPL_IO\" && tCK >= 2500)) ? \"LEFT\" : \"RIGHT\"; \n\n  localparam FIXED_VICTIM  = (SIM_CAL_OPTION == \"NONE\") ? \"FALSE\" : \"TRUE\";\n  localparam VCCO_PAT_EN   = 1;  \n  localparam VCCAUX_PAT_EN = 1;  \n  localparam ISI_PAT_EN    = 1;  \n\n  \n  \n\n  \n  localparam BYPASS_COMPLEX_RDLVL = ((tCK > 2500) || (SKIP_CALIB == \"TRUE\")) ? \"TRUE\": \"FALSE\"; \n  localparam BYPASS_COMPLEX_OCAL = \"TRUE\";\n  \n\n  \n  \n  localparam REFRESH_TIMER = (8*tREFI/(tCK*nCK_PER_CLK)) - 270;\n\n  localparam REFRESH_TIMER_WIDTH = clogb2(REFRESH_TIMER);\n\n  wire [2*8*nCK_PER_CLK-1:0]          prbs_seed;\n  \n  wire [8*DQ_WIDTH-1:0]               prbs_out;\n  wire [7:0]                          prbs_rise0;\n  wire [7:0]                          prbs_fall0;\n  wire [7:0]                          prbs_rise1;\n  wire [7:0]                          prbs_fall1;\n  wire [7:0]                          prbs_rise2;\n  wire [7:0]                          prbs_fall2;\n  wire [7:0]                          prbs_rise3;\n  wire [7:0]                          prbs_fall3;\n  \n  wire [2*nCK_PER_CLK*DQ_WIDTH-1:0]   prbs_o;\n  wire                                dqsfound_retry;\n  wire                                dqsfound_retry_done;\n  wire                                phy_rddata_en;\n  wire                                prech_done;\n  wire                                rdlvl_stg1_done;\n  reg                                 rdlvl_stg1_done_r1;\n  wire                                pi_dqs_found_done;\n  wire                                rdlvl_stg1_err;\n  wire                                pi_dqs_found_err;\n  wire                                wrcal_pat_resume;\n  wire                                wrcal_resume_w;\n  wire                                rdlvl_prech_req;\n  wire                                rdlvl_last_byte_done;\n  wire                                rdlvl_stg1_start;\n  wire                                rdlvl_stg1_rank_done;\n  wire                                rdlvl_assrt_common;\n  wire                                pi_dqs_found_start;\n  wire                                pi_dqs_found_rank_done;\n  wire                                wl_sm_start;\n  wire                                wrcal_start;\n  wire                                wrcal_rd_wait;\n  wire                                wrcal_prech_req;\n  wire                                wrcal_pat_err;\n  wire                                wrcal_done;\n  wire                                wrlvl_done;\n  wire                                wrlvl_err;\n  wire                                wrlvl_start;\n  wire                                ck_addr_cmd_delay_done;\n  wire                                po_ck_addr_cmd_delay_done;\n  wire                                pi_calib_done;\n  wire                                detect_pi_found_dqs;\n  wire [5:0]                          rd_data_offset_0;\n  wire [5:0]                          rd_data_offset_1;\n  wire [5:0]                          rd_data_offset_2;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_0;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_1;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_2;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_mc_0;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_mc_1;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_mc_2;\n  wire                                cmd_po_stg2_f_incdec;\n  wire                                cmd_po_stg2_incdec_ddr2_c;\n  wire                                cmd_po_en_stg2_f;\n  wire                                cmd_po_en_stg2_ddr2_c;\n  wire                                cmd_po_stg2_c_incdec;\n  wire                                cmd_po_en_stg2_c;\n  wire                                po_stg2_ddr2_incdec;\n  wire                                po_en_stg2_ddr2;\n  wire                                dqs_po_stg2_f_incdec;\n  wire                                dqs_po_en_stg2_f;\n  wire                                dqs_wl_po_stg2_c_incdec;\n  wire                                wrcal_po_stg2_c_incdec;\n  wire                                dqs_wl_po_en_stg2_c;\n  wire                                wrcal_po_en_stg2_c;\n  wire [N_CTL_LANES-1:0]              ctl_lane_cnt;\n  reg [N_CTL_LANES-1:0]               ctl_lane_sel;\n  wire [DQS_CNT_WIDTH:0]              po_stg2_wrcal_cnt;\n  wire [DQS_CNT_WIDTH:0]              po_stg2_wl_cnt;\n  wire [DQS_CNT_WIDTH:0]              po_stg2_ddr2_cnt;\n  wire [8:0]                          dqs_wl_po_stg2_reg_l;\n  wire                                dqs_wl_po_stg2_load;\n  wire [8:0]                          dqs_po_stg2_reg_l;\n  wire                                dqs_po_stg2_load;\n  wire                                dqs_po_dec_done;\n  wire                                pi_fine_dly_dec_done;\n  wire                                rdlvl_pi_stg2_f_incdec;\n  wire                                rdlvl_pi_stg2_f_en;\n  wire [DQS_CNT_WIDTH:0]              pi_stg2_rdlvl_cnt;\n  \n  wire [3*DQS_WIDTH-1:0]              wl_po_coarse_cnt;\n  wire [6*DQS_WIDTH-1:0]              wl_po_fine_cnt;\n  wire                                phase_locked_err;\n  wire                                phy_ctl_rdy_dly;\n  wire                                idelay_ce_int;\n  wire                                idelay_inc_int;\n  reg                                 idelay_ce_r1;\n  reg                                 idelay_ce_r2;\n  reg                                 idelay_inc_r1;\n reg        idelay_inc_r2 ;\n  reg                                 po_dly_req_r;\n  wire                                wrcal_read_req;\n  wire                                wrcal_act_req;\n  wire                                temp_wrcal_done;\n  wire                                tg_timer_done;\n  wire                                no_rst_tg_mc;\n  wire                                calib_complete;\n  reg                                 reset_if_r1;\n  reg                                 reset_if_r2;\n  reg                                 reset_if_r3;\n  reg                                 reset_if_r4;\n  reg                                 reset_if_r5;\n  reg                                 reset_if_r6;\n  reg                                 reset_if_r7;\n  reg                                 reset_if_r8;\n  reg                                 reset_if_r9;\n  reg                                 reset_if;\n  wire                                phy_if_reset_w;\n  wire                                pi_phaselock_start;\n\n  reg                                 dbg_pi_f_inc_r;\n  reg                                 dbg_pi_f_en_r;\n  reg                                 dbg_sel_pi_incdec_r;\n\n  reg                                 dbg_po_f_inc_r;\n  reg                                 dbg_po_f_stg23_sel_r;\n  reg                                 dbg_po_f_en_r;\n  reg                                 dbg_sel_po_incdec_r;\n\n  reg                                 tempmon_pi_f_inc_r;\n  reg                                 tempmon_pi_f_en_r;\n  reg                                 tempmon_sel_pi_incdec_r;\n\n  reg                                 ck_addr_cmd_delay_done_r1;\n  reg                                 ck_addr_cmd_delay_done_r2;\n  reg                                 ck_addr_cmd_delay_done_r3;\n  reg                                 ck_addr_cmd_delay_done_r4;\n  reg                                 ck_addr_cmd_delay_done_r5;\n  reg                                 ck_addr_cmd_delay_done_r6;\n\n  wire                                oclk_prech_req;\n  wire                                oclk_calib_resume;\n  wire [DQS_CNT_WIDTH:0]              oclkdelay_calib_cnt;\n  wire [DQS_CNT_WIDTH:0]              complex_oclkdelay_calib_cnt;\n  wire                                oclkdelay_calib_start;\n  wire                                oclkdelay_calib_done;\n  wire                                complex_oclk_prech_req;\n  wire                                complex_oclk_calib_resume;\n  wire                                complex_oclkdelay_calib_start;\n  wire                                complex_oclkdelay_calib_done;\n  wire                                complex_ocal_num_samples_inc;\n  wire                                complex_ocal_num_samples_done_r;\n  wire [2:0]                          complex_ocal_rd_victim_sel;\n  wire                                complex_ocal_ref_req;\n  wire                                complex_ocal_ref_done;\n  wire [6*DQS_WIDTH-1:0]              oclkdelay_left_edge_val;\n  wire [6*DQS_WIDTH-1:0]              oclkdelay_right_edge_val;\n\n  wire                                wrlvl_final;\n  wire                                complex_wrlvl_final;\n  reg                                 wrlvl_final_mux;\n  wire                                wrlvl_final_if_rst;\n  wire                                wrlvl_byte_redo;\n  wire                                wrlvl_byte_done;\n  wire                                early1_data;\n  wire                                early2_data;\n  wire                                po_stg23_sel;\n  wire                                po_stg23_incdec;\n  wire                                po_en_stg23;\n  wire                                complex_po_stg23_sel;\n  wire                                complex_po_stg23_incdec;\n  wire                                complex_po_en_stg23;\n  wire                                mpr_rdlvl_done;\n  wire                                mpr_rdlvl_start;\n  wire                                mpr_last_byte_done;\n  wire                                mpr_rnk_done;\n  wire                                mpr_end_if_reset;\n  wire                                mpr_rdlvl_err;\n  wire                                rdlvl_err;\n  wire                                prbs_rdlvl_start;\n  wire                                prbs_rdlvl_done;\n  wire                                prbs_rdlvl_done_complex;\n  reg                                 prbs_rdlvl_done_r1;\n  wire                                prbs_last_byte_done;\n  wire                                prbs_rdlvl_prech_req;\n  wire                                prbs_pi_stg2_f_incdec;\n  wire                                prbs_pi_stg2_f_en;\n  wire                                complex_sample_cnt_inc;\n  wire                                complex_sample_cnt_inc_ocal;\n  wire [DQS_CNT_WIDTH:0]              pi_stg2_prbs_rdlvl_cnt;\n  wire                                prbs_gen_clk_en;\n  wire                                prbs_gen_oclk_clk_en;\n  wire                                rd_data_offset_cal_done;\n  wire                                fine_adjust_done;\n  wire [N_CTL_LANES-1:0]              fine_adjust_lane_cnt;\n  wire                                ck_po_stg2_f_indec;\n  wire                                ck_po_stg2_f_en;\n  wire                                dqs_found_prech_req;\n  wire                                tempmon_pi_f_inc;\n  wire                                tempmon_pi_f_dec;\n  wire                                tempmon_sel_pi_incdec;\n  wire                                wrcal_sanity_chk;\n  wire                                wrcal_sanity_chk_done;\n  wire                                wrlvl_done_w;\n  wire                                wrlvl_rank_done;\n  wire                                done_dqs_tap_inc;\n  wire [2:0]                          rd_victim_sel;\n  wire [2:0]                          victim_sel;\n  wire [DQS_CNT_WIDTH:0]              victim_byte_cnt;\n  wire                                complex_wr_done;\n  wire                                complex_victim_inc;\n\n  wire                                reset_rd_addr;\n  wire                                complex_ocal_reset_rd_addr;\n\n  wire                                oclkdelay_center_calib_start;\n  wire                                poc_error;\n\n  wire                                prbs_ignore_first_byte;\n  wire                                prbs_ignore_last_bytes;\n\n  \n \n\n   \n \n\n   \n \n \n \n\n  \n  wire                                oclk_center_write_resume;\n  wire                                oclkdelay_center_calib_done;\n\n  \n  wire                                lim2init_write_request;\n  wire                                lim_done;\n\n  \n  wire                                complex_oclkdelay_calib_start_w;\n  wire                                complex_oclkdelay_calib_done_w;\n  wire [2:0]                          complex_ocal_rd_victim_sel_w;\n  wire                                complex_wrlvl_final_w;\n\n  wire [255:0]                        dbg_ocd_lim;\n\n   \n  \n  \n  \n  \n  \n  \n  \n  \n\n \n\n \n wire                                 rdlvl_pi_incdec;\n wire                                 complex_act_start;\n wire                                 complex_pi_incdec_done;\n wire                                 num_samples_done_r;\n wire                                 complex_init_pi_dec_done;\n\n  wire                                calib_tap_inc_start;\n  wire                                calib_tap_inc_done;\n  wire                                calib_tap_end_if_reset;\n  wire [5:0]                          calib_tap_inc_byte_cnt;\n  wire                                calib_po_f_en;\n  wire                                calib_po_f_incdec;\n  wire                                calib_po_sel_stg2stg3;\n  wire                                calib_po_c_en;\n  wire                                calib_po_c_inc;\n  wire                                calib_pi_f_en;\n  wire                                calib_pi_f_incdec;\n  wire                                calib_idelay_ce;\n  wire                                calib_idelay_inc;\n  wire                                coarse_dec_err;\n  reg                                 skip_cal_tempmon_samp_en;\n  wire                                tempmon_done_skip;\n\n  wire                                skip_cal_po_pi_dec_done;\n  reg [6*DQS_WIDTH-1:0]               calib_po_stage2_tap_cnt;\n  reg [6*DQS_WIDTH-1:0]               calib_po_stage3_tap_cnt;\n  reg [3*DQS_WIDTH-1:0]               calib_po_coarse_tap_cnt;\n  reg [6*DQS_WIDTH-1:0]               calib_pi_stage2_tap_cnt;\n  reg [5*DQS_WIDTH-1:0]               calib_idelay_tap_cnt;\n  reg [11:0]                          calib_device_temp;\n  wire [127:0]                        dbg_skip_cal;\n\n  \n  \n  \n  \n  initial\n  begin\n    if (RANKS == 0) begin\n      $display (\"Error: Invalid RANKS parameter. Must be 1 or greater\");\n      $finish;\n    end\n    if (phy_ctl_full == 1'b1) begin\n      $display (\"Error: Incorrect phy_ctl_full input value in 2:1 or 4:1 mode\");\n      $finish;\n    end\n  end\n  \n\n  \n  \n  \n  reg if_empty_reg;\n  reg pi_stg2_en_reg;\n\n  assign prbs_rdlvl_done = (SIM_CAL_OPTION == \"FAST_CAL\")? rdlvl_stg1_done : prbs_rdlvl_done_complex;\n\n  assign dbg_pi_phaselock_start = pi_phaselock_start;\n  assign dbg_pi_dqsfound_start  = pi_dqs_found_start;\n  assign dbg_pi_dqsfound_done   = pi_dqs_found_done;\n  assign dbg_wrcal_start        = wrcal_start;\n  assign dbg_wrcal_done         = wrcal_done;\n\n  \n  \n  assign dbg_calib_top[0] = pi_stg2_en_reg ;\n  assign dbg_calib_top[1] = if_empty_reg ;\n  assign dbg_calib_top[3]     = coarse_dec_err;\n  assign dbg_calib_top[4]     = calib_tap_inc_start;\n  assign dbg_calib_top[5]     = calib_tap_inc_done;\n  assign dbg_calib_top[6+:63] = dbg_skip_cal;\n\n  always @ (posedge clk) begin\n    if_empty_reg <= #TCQ  phy_if_empty;\n    pi_stg2_en_reg <= #TCQ pi_en_stg2_f;\n  end\n\n  \n  assign dbg_wrlvl_start           = wrlvl_start;\n  assign dbg_wrlvl_done            = wrlvl_done;\n  assign dbg_wrlvl_err             = wrlvl_err;\n\n  \n  assign dbg_rdlvl_start           = {mpr_rdlvl_start, rdlvl_stg1_start};\n  assign dbg_rdlvl_done            = {mpr_rdlvl_done, rdlvl_stg1_done};\n  assign dbg_rdlvl_err             = {mpr_rdlvl_err, rdlvl_err};\n\n  assign dbg_oclkdelay_calib_done  = oclkdelay_calib_done;\n  assign dbg_oclkdelay_calib_start = oclkdelay_calib_start;\n\n  \n  \n  \n\n  assign wrcal_resume_w = (WRLVL == \"ON\") ? wrcal_pat_resume : 1'b0;\n  assign wrlvl_done_w   = (WRLVL == \"ON\") ? wrlvl_done : 1'b1;\n  assign ck_addr_cmd_delay_done = (WRLVL == \"ON\") ? po_ck_addr_cmd_delay_done :\n                                                    (po_ck_addr_cmd_delay_done\n                                                    && pi_fine_dly_dec_done) ;\n\ngenerate\n   if((WRLVL == \"ON\") && (BYPASS_COMPLEX_OCAL==\"FALSE\")) begin: complex_oclk_calib\n    assign complex_oclkdelay_calib_start_w = complex_oclkdelay_calib_start;\n    assign complex_oclkdelay_calib_done_w  = complex_oclkdelay_calib_done;\n    assign complex_ocal_rd_victim_sel_w    = complex_ocal_rd_victim_sel;\n    assign complex_wrlvl_final_w           = complex_wrlvl_final;\n   end else begin: bypass_complex_ocal\n    assign complex_oclkdelay_calib_start_w = 1'b0;\n    assign complex_oclkdelay_calib_done_w  = prbs_rdlvl_done;\n    assign complex_ocal_rd_victim_sel_w    = 'd0;\n    assign complex_wrlvl_final_w           = 1'b0;\n   end\nendgenerate\n\n\n  generate\n  genvar i;\n    for (i = 0; i <= 2; i = i+1) begin : bankwise_signal\n\n      assign po_sel_stg2stg3[i]  = ((ck_addr_cmd_delay_done && ~oclkdelay_calib_done && mpr_rdlvl_done) ? po_stg23_sel :\n                                   (complex_oclkdelay_calib_start_w&&~complex_oclkdelay_calib_done_w? po_stg23_sel : 1'b0 )\n                                  \n                                   ) || calib_po_sel_stg2stg3 || dbg_po_f_stg23_sel_r;\n\n      assign po_stg2_c_incdec[i] =  cmd_po_stg2_c_incdec ||\n                                    cmd_po_stg2_incdec_ddr2_c ||\n                                    calib_po_c_inc ||\n                                    dqs_wl_po_stg2_c_incdec;\n\n      assign po_en_stg2_c[i]     = cmd_po_en_stg2_c ||\n                                   cmd_po_en_stg2_ddr2_c ||\n                                   calib_po_c_en ||\n                                   dqs_wl_po_en_stg2_c;\n\n      assign po_stg2_f_incdec[i] = dqs_po_stg2_f_incdec ||\n                                   cmd_po_stg2_f_incdec ||\n                                   ck_po_stg2_f_indec ||\n                                   po_stg23_incdec ||\n                                   calib_po_f_incdec ||\n                                  \n                                  \n                                   dbg_po_f_inc_r;\n\n      assign po_en_stg2_f[i]     = dqs_po_en_stg2_f ||\n                                   cmd_po_en_stg2_f ||\n                                   ck_po_stg2_f_en ||\n                                   po_en_stg23 ||\n                                   calib_po_f_en ||\n                                  \n                                  \n                                   dbg_po_f_en_r;\n\n    end\n  endgenerate\n\n  assign pi_stg2_f_incdec = (calib_pi_f_incdec | dbg_pi_f_inc_r | rdlvl_pi_stg2_f_incdec | prbs_pi_stg2_f_incdec | tempmon_pi_f_inc_r);\n  assign pi_en_stg2_f     = (calib_pi_f_en | dbg_pi_f_en_r | rdlvl_pi_stg2_f_en | prbs_pi_stg2_f_en | tempmon_pi_f_en_r);\n\n  assign idelay_ce  = (idelay_ce_r2 | calib_idelay_ce);\n  assign idelay_inc = (idelay_inc_r2 | calib_idelay_inc);\n\n  assign po_counter_load_en = 1'b0;\n\n  assign complex_oclkdelay_calib_cnt = oclkdelay_calib_cnt;\n  assign complex_oclk_calib_resume   = oclk_calib_resume;\n  assign complex_ocal_ref_req        = oclk_prech_req;\n\n\n\n  always @(posedge clk) begin\n    if (SKIP_CALIB == \"FALSE\")\n    init_calib_complete <= calib_complete;\n    else\n      init_calib_complete <= tempmon_done_skip;\n  end\n\n  assign calib_rd_data_offset_0 = rd_data_offset_ranks_mc_0;\n  assign calib_rd_data_offset_1 = rd_data_offset_ranks_mc_1;\n  assign calib_rd_data_offset_2 = rd_data_offset_ranks_mc_2;\n\n  \n  \n  \n\n  assign pi_phase_locked_err = phase_locked_err;\n  assign pi_dqsfound_err     = pi_dqs_found_err;\n  assign wrcal_err           = wrcal_pat_err;\n  assign rst_tg_mc           = 1'b0;\n\n\n  always @ (posedge clk)\n    wrlvl_final_mux <= #TCQ complex_oclkdelay_calib_start_w? complex_wrlvl_final_w: wrlvl_final;\n\n\n  always @(posedge clk)\n    phy_if_reset <= #TCQ (phy_if_reset_w | mpr_end_if_reset |\n                          reset_if | wrlvl_final_if_rst | calib_tap_end_if_reset);\n\n  \n  \n  \n\n  always @(posedge clk) begin\n    if (rst) begin\n      dbg_pi_f_inc_r      <= #TCQ 1'b0;\n      dbg_pi_f_en_r       <= #TCQ 1'b0;\n      dbg_sel_pi_incdec_r <= #TCQ 1'b0;\n    end else begin\n      dbg_pi_f_inc_r      <= #TCQ dbg_pi_f_inc;\n      dbg_pi_f_en_r       <= #TCQ (dbg_pi_f_inc | dbg_pi_f_dec);\n      dbg_sel_pi_incdec_r <= #TCQ dbg_sel_pi_incdec;\n    end\n  end\n\n  \n  \n  \n\n  always @(posedge clk) begin\n    if (rst) begin\n      dbg_po_f_inc_r      <= #TCQ 1'b0;\n      dbg_po_f_stg23_sel_r<= #TCQ 1'b0;\n      dbg_po_f_en_r       <= #TCQ 1'b0;\n      dbg_sel_po_incdec_r <= #TCQ 1'b0;\n    end else begin\n      dbg_po_f_inc_r      <= #TCQ dbg_po_f_inc;\n      dbg_po_f_stg23_sel_r<= #TCQ dbg_po_f_stg23_sel;\n      dbg_po_f_en_r       <= #TCQ (dbg_po_f_inc | dbg_po_f_dec);\n      dbg_sel_po_incdec_r <= #TCQ dbg_sel_po_incdec;\n    end\n  end\n\n  \n  \n  \n\n  always @(posedge clk) begin\n    if (rst) begin\n      tempmon_pi_f_inc_r      <= #TCQ 1'b0;\n      tempmon_pi_f_en_r       <= #TCQ 1'b0;\n      tempmon_sel_pi_incdec_r <= #TCQ 1'b0;\n    end else begin\n      tempmon_pi_f_inc_r      <= #TCQ tempmon_pi_f_inc;\n      tempmon_pi_f_en_r       <= #TCQ (tempmon_pi_f_inc | tempmon_pi_f_dec);\n      tempmon_sel_pi_incdec_r <= #TCQ tempmon_sel_pi_incdec;\n    end\n  end\n\n  \n  \n  \n\n  \n  \n  always @(posedge clk) begin\n    ck_addr_cmd_delay_done_r1 <= #TCQ ck_addr_cmd_delay_done;\n    ck_addr_cmd_delay_done_r2 <= #TCQ ck_addr_cmd_delay_done_r1;\n    ck_addr_cmd_delay_done_r3 <= #TCQ ck_addr_cmd_delay_done_r2;\n    ck_addr_cmd_delay_done_r4 <= #TCQ ck_addr_cmd_delay_done_r3;\n    ck_addr_cmd_delay_done_r5 <= #TCQ ck_addr_cmd_delay_done_r4;\n    ck_addr_cmd_delay_done_r6 <= #TCQ ck_addr_cmd_delay_done_r5;\n  end\n\n\n\n\n  \n  \n  \n  \n  \ngenerate\n  if (SKIP_CALIB == \"TRUE\") begin: gen_byte_sel_skip_calib\n    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~skip_cal_po_pi_dec_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~calib_tap_inc_done) begin\n        byte_sel_cnt    <= #TCQ calib_tap_inc_byte_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end\n  end else if (tCK >= 2500) begin: gen_byte_sel_div2  \n\n    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done)) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~wrlvl_done_w) begin\n        if (SIM_CAL_OPTION != \"FAST_CAL\") begin\n          byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end else begin\n          \n          \n          if (!phy_ctl_rdy_dly) begin\n            byte_sel_cnt    <= #TCQ 'd0;\n            calib_in_common <= #TCQ 1'b0;\n          end else begin\n            byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n            calib_in_common <= #TCQ 1'b1;\n          end\n        end\n      end else if (~mpr_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~oclkdelay_calib_done) begin\n        byte_sel_cnt    <= #TCQ oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~rdlvl_stg1_done && pi_calib_done) begin\n        if ((SIM_CAL_OPTION == \"FAST_CAL\") && rdlvl_assrt_common) begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~prbs_rdlvl_done && rdlvl_stg1_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_prbs_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~complex_oclkdelay_calib_done_w && prbs_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ complex_oclkdelay_calib_cnt;\n            calib_in_common <= #TCQ 1'b0;\n      end else if ((~wrcal_done) && (DRAM_TYPE == \"DDR3\")) begin\n        byte_sel_cnt    <= #TCQ po_stg2_wrcal_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end\n  end else begin: gen_byte_sel_div1\n\n    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done)) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~wrlvl_done_w) begin\n        if (SIM_CAL_OPTION != \"FAST_CAL\") begin\n          byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end else begin\n          \n          \n          if (!phy_ctl_rdy_dly) begin\n            byte_sel_cnt    <= #TCQ 'd0;\n            calib_in_common <= #TCQ 1'b0;\n          end else begin\n            byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n            calib_in_common <= #TCQ 1'b1;\n          end\n        end\n      end else if (~mpr_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~oclkdelay_calib_done) begin\n        byte_sel_cnt    <= #TCQ oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if ((~wrcal_done)&& (DRAM_TYPE == \"DDR3\")) begin\n        byte_sel_cnt    <= #TCQ po_stg2_wrcal_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~rdlvl_stg1_done && pi_calib_done) begin\n        if ((SIM_CAL_OPTION == \"FAST_CAL\") && rdlvl_assrt_common) begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~prbs_rdlvl_done && rdlvl_stg1_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_prbs_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~complex_oclkdelay_calib_done_w && prbs_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ complex_oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end\n\n  end\nendgenerate\n\n  \n  always @(posedge clk) begin\n    if (rst || (calib_complete && ~ (dbg_sel_pi_incdec_r|dbg_sel_po_incdec_r|tempmon_sel_pi_incdec) )) begin\n      calib_sel         <= #TCQ 6'b000100;\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done) || ~skip_cal_po_pi_dec_done) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      if (~dqs_po_dec_done && (WRLVL != \"ON\"))\n      \n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b0}};\n      else\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~ck_addr_cmd_delay_done || (~fine_adjust_done && rd_data_offset_cal_done)) begin\n      if(WRLVL ==\"ON\") begin\n        calib_sel[2]   <= #TCQ 1'b0;\n        calib_sel[1:0] <= #TCQ CTL_BYTE_LANE[(ctl_lane_sel*2)+:2];\n        calib_sel[5:3] <= #TCQ CTL_BANK;\n        if (|pi_rst_stg1_cal) begin\n          calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n        end else begin\n          calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n          calib_zero_inputs[1*CTL_BANK] <= #TCQ 1'b0;\n        end\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n      end else begin \n        calib_sel[2]   <= #TCQ 1'b0;\n        calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n        calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n        if(~ck_addr_cmd_delay_done)\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n        else\n          calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b0}};\n      end \n    end else if ((~wrlvl_done_w) && (SIM_CAL_OPTION == \"FAST_CAL\")) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~rdlvl_stg1_done && (SIM_CAL_OPTION == \"FAST_CAL\") &&\n                 rdlvl_assrt_common) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (tempmon_sel_pi_incdec) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n      if (~calib_in_common) begin\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n        calib_zero_inputs[(1*DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3])] <= #TCQ 1'b0;\n      end else\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n    end\n  end\n  \n  \n  \n  \n  \n  \n  \n  always @(posedge clk) begin\n    rdlvl_stg1_done_r1  <= #TCQ rdlvl_stg1_done;\n    prbs_rdlvl_done_r1  <= #TCQ prbs_rdlvl_done;\n    reset_if_r1         <= #TCQ reset_if;\n    reset_if_r2         <= #TCQ reset_if_r1;\n    reset_if_r3         <= #TCQ reset_if_r2;\n    reset_if_r4         <= #TCQ reset_if_r3;\n    reset_if_r5         <= #TCQ reset_if_r4;\n    reset_if_r6         <= #TCQ reset_if_r5;\n    reset_if_r7         <= #TCQ reset_if_r6;\n    reset_if_r8         <= #TCQ reset_if_r7;\n    reset_if_r9         <= #TCQ reset_if_r8;\n  end\n\n  always @(posedge clk) begin\n    if (rst || reset_if_r9)\n      reset_if <= #TCQ 1'b0;\n    else if ((rdlvl_stg1_done && ~rdlvl_stg1_done_r1) ||\n             (prbs_rdlvl_done && ~prbs_rdlvl_done_r1))\n      reset_if <= #TCQ 1'b1;\n  end\n\n  assign phy_if_empty_def = 1'b0;\n\n  \n  \n  \n  \n  \n  always @(posedge clk) begin\n    if (rst) begin\n      idelay_ce_r1  <= #TCQ 1'b0;\n      idelay_ce_r2  <= #TCQ 1'b0;\n      idelay_inc_r1 <= #TCQ 1'b0;\n      idelay_inc_r2 <= #TCQ 1'b0;\n    end else begin\n      idelay_ce_r1  <= #TCQ idelay_ce_int;\n      idelay_ce_r2  <= #TCQ idelay_ce_r1;\n      idelay_inc_r1 <= #TCQ idelay_inc_int;\n      idelay_inc_r2 <= #TCQ idelay_inc_r1;\n    end\n  end\n\n  \n  \n  \n\n  assign init_wrcal_complete = 1'b0;\n\n  \n  \n  \n  \n\n  \n  assign prbs_seed = 64'h9966aa559966aa55;\n\n  \n  \n  \n  \n  mig_7series_v4_1_ddr_prbs_gen #\n    (\n     .TCQ           (TCQ),\n     .PRBS_WIDTH    (2*8*nCK_PER_CLK),\n     .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n     .DQ_WIDTH      (DQ_WIDTH),\n     .VCCO_PAT_EN   (VCCO_PAT_EN),\n     .VCCAUX_PAT_EN (VCCAUX_PAT_EN),\n     .ISI_PAT_EN    (ISI_PAT_EN),\n     .FIXED_VICTIM  (FIXED_VICTIM)\n    )\n    u_ddr_prbs_gen\n      (.prbs_ignore_first_byte (prbs_ignore_first_byte),\n       .prbs_ignore_last_bytes (prbs_ignore_last_bytes),\n       .clk_i              (clk),\n       .clk_en_i           (prbs_gen_clk_en | prbs_gen_oclk_clk_en),\n       .rst_i              (rst),\n       .prbs_o             (prbs_out),\n       .prbs_seed_i        (prbs_seed),\n       .phy_if_empty       (phy_if_empty),\n       .prbs_rdlvl_start   (prbs_rdlvl_start),\n       .prbs_rdlvl_done    (prbs_rdlvl_done),\n       .complex_wr_done    (complex_wr_done),\n       .victim_sel         (victim_sel),\n       .byte_cnt           (victim_byte_cnt),\n       .dbg_prbs_gen       (),\n       .reset_rd_addr      (reset_rd_addr | complex_ocal_reset_rd_addr)\n      );\n\n\n\n\n  generate\n    if (nCK_PER_CLK == 4) begin: gen_ck_per_clk4\n      assign prbs_o = prbs_out;\n      \n\n\n\n\n\n\n\n\n\n    end else begin :gen_ck_per_clk2\n      assign prbs_o = prbs_out[4*DQ_WIDTH-1:0];\n      \n\n\n\n\n    end\n  endgenerate\n\n\n  \n  \n  \n  \n\n  mig_7series_v4_1_ddr_phy_init #\n    (\n     .tCK             (tCK),\n     .DDR3_VDD_OP_VOLT (DDR3_VDD_OP_VOLT),\n     .TCQ             (TCQ),\n     .nCK_PER_CLK     (nCK_PER_CLK),\n     .CLK_PERIOD      (CLK_PERIOD),\n     .DRAM_TYPE       (DRAM_TYPE),\n     .PRBS_WIDTH      (PRBS_WIDTH),\n     .BANK_WIDTH      (BANK_WIDTH),\n     .CA_MIRROR       (CA_MIRROR),\n     .COL_WIDTH       (COL_WIDTH),\n     .nCS_PER_RANK    (nCS_PER_RANK),\n     .DQ_WIDTH        (DQ_WIDTH),\n     .DQS_WIDTH       (DQS_WIDTH),\n     .DQS_CNT_WIDTH   (DQS_CNT_WIDTH),\n     .ROW_WIDTH       (ROW_WIDTH),\n     .CS_WIDTH        (CS_WIDTH),\n     .RANKS           (RANKS),\n     .CKE_WIDTH       (CKE_WIDTH),\n     .CALIB_ROW_ADD   (CALIB_ROW_ADD),\n     .CALIB_COL_ADD   (CALIB_COL_ADD),\n     .CALIB_BA_ADD    (CALIB_BA_ADD),\n     .AL              (AL),\n     .BURST_MODE      (BURST_MODE),\n     .BURST_TYPE      (BURST_TYPE),\n     .nCL             (nCL),\n     .nCWL            (nCWL),\n     .tRFC            (tRFC),\n     .REFRESH_TIMER   (REFRESH_TIMER),\n     .REFRESH_TIMER_WIDTH (REFRESH_TIMER_WIDTH),\n     .OUTPUT_DRV      (OUTPUT_DRV),\n     .REG_CTRL        (REG_CTRL),\n     .ADDR_CMD_MODE   (ADDR_CMD_MODE),\n     .RTT_NOM         (RTT_NOM),\n     .RTT_WR          (RTT_WR),\n     .WRLVL           (WRLVL),\n     .USE_ODT_PORT    (USE_ODT_PORT),\n     .DDR2_DQSN_ENABLE(DDR2_DQSN_ENABLE),\n     .nSLOTS          (nSLOTS),\n     .SIM_INIT_OPTION (SIM_INIT_OPTION),\n     .SIM_CAL_OPTION  (SIM_CAL_OPTION),\n     .CKE_ODT_AUX     (CKE_ODT_AUX),\n     .PRE_REV3ES      (PRE_REV3ES),\n     .TEST_AL         (TEST_AL),\n     .FIXED_VICTIM    (FIXED_VICTIM),\n     .BYPASS_COMPLEX_OCAL(BYPASS_COMPLEX_OCAL),\n     .SKIP_CALIB      (SKIP_CALIB)\n     )\n    u_ddr_phy_init\n      (\n       .clk                   (clk),\n       .rst                   (rst),\n       .prbs_o                (prbs_o),\n       .ck_addr_cmd_delay_done(ck_addr_cmd_delay_done),\n       .delay_incdec_done     (ck_addr_cmd_delay_done),\n       .pi_phase_locked_all   (pi_phase_locked_all),\n       .pi_phaselock_start    (pi_phaselock_start),\n       .pi_phase_locked_err   (phase_locked_err),\n       .pi_calib_done         (pi_calib_done),\n       .phy_if_empty          (phy_if_empty),\n       .phy_ctl_ready         (phy_ctl_ready),\n       .phy_ctl_full          (phy_ctl_full),\n       .phy_cmd_full          (phy_cmd_full),\n       .phy_data_full         (phy_data_full),\n       .calib_ctl_wren        (calib_ctl_wren),\n       .calib_cmd_wren        (calib_cmd_wren),\n       .calib_wrdata_en       (calib_wrdata_en),\n       .calib_seq             (calib_seq),\n       .calib_aux_out         (calib_aux_out),\n       .calib_rank_cnt        (calib_rank_cnt),\n       .calib_cas_slot        (calib_cas_slot),\n       .calib_data_offset_0   (calib_data_offset_0),\n       .calib_data_offset_1   (calib_data_offset_1),\n       .calib_data_offset_2   (calib_data_offset_2),\n       .calib_cmd             (calib_cmd),\n       .calib_cke             (calib_cke),\n       .calib_odt             (calib_odt),\n       .write_calib           (write_calib),\n       .read_calib            (read_calib),\n       .wrlvl_done            (wrlvl_done),\n       .wrlvl_rank_done       (wrlvl_rank_done),\n       .wrlvl_byte_done       (wrlvl_byte_done),\n       .wrlvl_byte_redo       (wrlvl_byte_redo),\n       .wrlvl_final           (wrlvl_final_mux),\n       .wrlvl_final_if_rst    (wrlvl_final_if_rst),\n       .oclkdelay_calib_start (oclkdelay_calib_start),\n       .oclkdelay_calib_done  (oclkdelay_calib_done),\n       .oclk_prech_req        (oclk_prech_req),\n       .oclk_calib_resume     (oclk_calib_resume),\n       .lim_wr_req            (lim2init_write_request),\n       .lim_done              (lim_done),\n       .complex_oclkdelay_calib_start (complex_oclkdelay_calib_start),\n       .complex_oclkdelay_calib_done  (complex_oclkdelay_calib_done_w),\n       .complex_oclk_calib_resume     (complex_oclk_calib_resume),\n       .complex_oclkdelay_calib_cnt   (complex_oclkdelay_calib_cnt),\n       .complex_sample_cnt_inc_ocal   (complex_sample_cnt_inc_ocal),\n       .complex_ocal_num_samples_inc  (complex_ocal_num_samples_inc),\n       .complex_ocal_num_samples_done_r (complex_ocal_num_samples_done_r),\n       .complex_ocal_reset_rd_addr      (complex_ocal_reset_rd_addr),\n       .complex_ocal_ref_req            (complex_ocal_ref_req),\n       .complex_ocal_ref_done           (complex_ocal_ref_done),\n       .done_dqs_tap_inc      (done_dqs_tap_inc),\n       .wl_sm_start           (wl_sm_start),\n       .wr_lvl_start          (wrlvl_start),\n       .slot_0_present        (slot_0_present),\n       .slot_1_present        (slot_1_present),\n       .mpr_rdlvl_done        (mpr_rdlvl_done),\n       .mpr_rdlvl_start       (mpr_rdlvl_start),\n       .mpr_last_byte_done    (mpr_last_byte_done),\n       .mpr_rnk_done          (mpr_rnk_done),\n       .mpr_end_if_reset      (mpr_end_if_reset),\n       .rdlvl_stg1_done       (rdlvl_stg1_done),\n       .rdlvl_stg1_rank_done  (rdlvl_stg1_rank_done),\n       .rdlvl_stg1_start      (rdlvl_stg1_start),\n       .rdlvl_prech_req       (rdlvl_prech_req),\n       .rdlvl_last_byte_done  (rdlvl_last_byte_done),\n       .prbs_rdlvl_start      (prbs_rdlvl_start),\n       .complex_wr_done       (complex_wr_done),\n       .prbs_rdlvl_done       (prbs_rdlvl_done),\n       .prbs_last_byte_done   (prbs_last_byte_done),\n       .prbs_rdlvl_prech_req  (prbs_rdlvl_prech_req),\n       .complex_victim_inc    (complex_victim_inc),\n       .rd_victim_sel         (rd_victim_sel),\n       .complex_ocal_rd_victim_sel (complex_ocal_rd_victim_sel),\n       .pi_stg2_prbs_rdlvl_cnt(pi_stg2_prbs_rdlvl_cnt),\n       .victim_sel            (victim_sel),\n       .victim_byte_cnt       (victim_byte_cnt),\n       .prbs_gen_clk_en       (prbs_gen_clk_en),\n       .prbs_gen_oclk_clk_en  (prbs_gen_oclk_clk_en),\n       .complex_sample_cnt_inc(complex_sample_cnt_inc),\n       .pi_dqs_found_start    (pi_dqs_found_start),\n       .dqsfound_retry        (dqsfound_retry),\n       .dqs_found_prech_req   (dqs_found_prech_req),\n       .pi_dqs_found_rank_done(pi_dqs_found_rank_done),\n       .pi_dqs_found_done     (pi_dqs_found_done),\n       .detect_pi_found_dqs   (detect_pi_found_dqs),\n       .rd_data_offset_0      (rd_data_offset_0),\n       .rd_data_offset_1      (rd_data_offset_1),\n       .rd_data_offset_2      (rd_data_offset_2),\n       .rd_data_offset_ranks_0(rd_data_offset_ranks_0),\n       .rd_data_offset_ranks_1(rd_data_offset_ranks_1),\n       .rd_data_offset_ranks_2(rd_data_offset_ranks_2),\n       .wrcal_start           (wrcal_start),\n       .wrcal_rd_wait         (wrcal_rd_wait),\n       .wrcal_prech_req       (wrcal_prech_req),\n       .wrcal_resume          (wrcal_resume_w),\n       .wrcal_read_req        (wrcal_read_req),\n       .wrcal_act_req         (wrcal_act_req),\n       .wrcal_sanity_chk      (wrcal_sanity_chk),\n       .temp_wrcal_done       (temp_wrcal_done),\n       .wrcal_sanity_chk_done (wrcal_sanity_chk_done),\n       .tg_timer_done         (tg_timer_done),\n       .no_rst_tg_mc          (no_rst_tg_mc),\n       .wrcal_done            (wrcal_done),\n       .prech_done            (prech_done),\n       .calib_writes          (calib_writes),\n       .init_calib_complete   (calib_complete),\n       .phy_address           (phy_address),\n       .phy_bank              (phy_bank),\n       .phy_cas_n             (phy_cas_n),\n       .phy_cs_n              (phy_cs_n),\n       .phy_ras_n             (phy_ras_n),\n       .phy_reset_n           (phy_reset_n),\n       .phy_we_n              (phy_we_n),\n       .phy_wrdata            (phy_wrdata),\n       .phy_rddata_en         (phy_rddata_en),\n       .phy_rddata_valid      (phy_rddata_valid),\n       .dbg_phy_init          (dbg_phy_init),\n       .reset_rd_addr         (reset_rd_addr | complex_ocal_reset_rd_addr),\n       .oclkdelay_center_calib_start (oclkdelay_center_calib_start),\n       .oclk_center_write_resume     (oclk_center_write_resume),\n       .oclkdelay_center_calib_done  (oclkdelay_center_calib_done),\n       .rdlvl_pi_incdec              (rdlvl_pi_incdec),\n       .complex_act_start            (complex_act_start),\n       .complex_pi_incdec_done       (complex_pi_incdec_done),\n       .complex_init_pi_dec_done     (complex_init_pi_dec_done),\n       .num_samples_done_r           (num_samples_done_r),\n       .calib_tap_inc_start          (calib_tap_inc_start),\n       .calib_tap_end_if_reset       (calib_tap_end_if_reset),\n       .calib_tap_inc_done           (calib_tap_inc_done)\n       );\n\n\n  \n  \n  \n\n  mig_7series_v4_1_ddr_phy_wrcal #\n    (\n     .TCQ            (TCQ),\n     .nCK_PER_CLK    (nCK_PER_CLK),\n     .CLK_PERIOD     (CLK_PERIOD),\n     .DQ_WIDTH       (DQ_WIDTH),\n     .DQS_CNT_WIDTH  (DQS_CNT_WIDTH),\n     .DQS_WIDTH      (DQS_WIDTH),\n     .DRAM_WIDTH     (DRAM_WIDTH),\n     .SIM_CAL_OPTION (SIM_CAL_OPTION)\n     )\n    u_ddr_phy_wrcal\n      (\n       .clk                         (clk),\n       .rst                         (rst),\n       .wrcal_start                 (wrcal_start),\n       .wrcal_rd_wait               (wrcal_rd_wait),\n       .wrcal_sanity_chk            (wrcal_sanity_chk),\n       .dqsfound_retry_done         (pi_dqs_found_done),\n       .dqsfound_retry              (dqsfound_retry),\n       .wrcal_read_req              (wrcal_read_req),\n       .wrcal_act_req               (wrcal_act_req),\n       .phy_rddata_en               (phy_rddata_en),\n       .wrcal_done                  (wrcal_done),\n       .wrcal_pat_err               (wrcal_pat_err),\n       .wrcal_prech_req             (wrcal_prech_req),\n       .temp_wrcal_done             (temp_wrcal_done),\n       .wrcal_sanity_chk_done       (wrcal_sanity_chk_done),\n       .prech_done                  (prech_done),\n       .rd_data                     (phy_rddata),\n       .wrcal_pat_resume            (wrcal_pat_resume),\n       .po_stg2_wrcal_cnt           (po_stg2_wrcal_cnt),\n       .phy_if_reset                (phy_if_reset_w),\n       .wl_po_coarse_cnt            (wl_po_coarse_cnt),\n       .wl_po_fine_cnt              (wl_po_fine_cnt),\n       .wrlvl_byte_redo             (wrlvl_byte_redo),\n       .wrlvl_byte_done             (wrlvl_byte_done),\n       .early1_data                 (early1_data),\n       .early2_data                 (early2_data),\n       .idelay_ld                   (idelay_ld),\n       .dbg_phy_wrcal               (dbg_phy_wrcal),\n       .dbg_final_po_fine_tap_cnt   (dbg_final_po_fine_tap_cnt),\n       .dbg_final_po_coarse_tap_cnt (dbg_final_po_coarse_tap_cnt)\n   );\n\n\n\n  \n  \n  \n\n  generate\n    if ((WRLVL == \"ON\") && (SKIP_CALIB == \"FALSE\")) begin: mb_wrlvl_inst\n\n      mig_7series_v4_1_ddr_phy_wrlvl #\n        (\n         .TCQ               (TCQ),\n         .DQS_CNT_WIDTH     (DQS_CNT_WIDTH),\n         .DQ_WIDTH          (DQ_WIDTH),\n         .DQS_WIDTH         (DQS_WIDTH),\n         .DRAM_WIDTH        (DRAM_WIDTH),\n         .RANKS             (1),\n         .CLK_PERIOD        (CLK_PERIOD),\n         .nCK_PER_CLK       (nCK_PER_CLK),\n         .SIM_CAL_OPTION    (SIM_CAL_OPTION)\n         )\n        u_ddr_phy_wrlvl\n          (\n           .clk                         (clk),\n           .rst                         (rst),\n           .phy_ctl_ready               (phy_ctl_ready),\n           .wr_level_start              (wrlvl_start),\n           .wl_sm_start                 (wl_sm_start),\n           .wrlvl_byte_redo             (wrlvl_byte_redo),\n           .wrcal_cnt                   (po_stg2_wrcal_cnt),\n           .early1_data                 (early1_data),\n           .early2_data                 (early2_data),\n           .wrlvl_final                 (wrlvl_final_mux),\n           .oclkdelay_calib_cnt         (oclkdelay_calib_cnt),\n           .wrlvl_byte_done             (wrlvl_byte_done),\n           .oclkdelay_calib_done        (oclkdelay_calib_done),\n           .rd_data_rise0               (phy_rddata[DQ_WIDTH-1:0]),\n           .dqs_po_dec_done             (dqs_po_dec_done),\n           .phy_ctl_rdy_dly             (phy_ctl_rdy_dly),\n           .wr_level_done               (wrlvl_done),\n           .wrlvl_rank_done             (wrlvl_rank_done),\n           .done_dqs_tap_inc            (done_dqs_tap_inc),\n           .dqs_po_stg2_f_incdec        (dqs_po_stg2_f_incdec),\n           .dqs_po_en_stg2_f            (dqs_po_en_stg2_f),\n           .dqs_wl_po_stg2_c_incdec     (dqs_wl_po_stg2_c_incdec),\n           .dqs_wl_po_en_stg2_c         (dqs_wl_po_en_stg2_c),\n           .po_counter_read_val         (po_counter_read_val),\n           .po_stg2_wl_cnt              (po_stg2_wl_cnt),\n           .wrlvl_err                   (wrlvl_err),\n           .wl_po_coarse_cnt            (wl_po_coarse_cnt),\n           .wl_po_fine_cnt              (wl_po_fine_cnt),\n           .dbg_wl_tap_cnt              (dbg_tap_cnt_during_wrlvl),\n           .dbg_wl_edge_detect_valid    (dbg_wl_edge_detect_valid),\n           .dbg_rd_data_edge_detect     (dbg_rd_data_edge_detect),\n           .dbg_dqs_count               (),\n           .dbg_wl_state                (),\n           .dbg_wrlvl_fine_tap_cnt      (dbg_wrlvl_fine_tap_cnt),\n           .dbg_wrlvl_coarse_tap_cnt    (dbg_wrlvl_coarse_tap_cnt),\n           .dbg_phy_wrlvl               (dbg_phy_wrlvl)\n           );\n\n\n        mig_7series_v4_1_ddr_phy_ck_addr_cmd_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES),\n          .SIM_CAL_OPTION(SIM_CAL_OPTION)\n          )\n          u_ddr_phy_ck_addr_cmd_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .cmd_delay_start            (dqs_po_dec_done & pi_fine_dly_dec_done),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_stg2_f_incdec           (cmd_po_stg2_f_incdec),\n             .po_en_stg2_f               (cmd_po_en_stg2_f),\n             .po_stg2_c_incdec           (cmd_po_stg2_c_incdec),\n             .po_en_stg2_c               (cmd_po_en_stg2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done)\n            );\n\n      assign cmd_po_stg2_incdec_ddr2_c = 1'b0;\n      assign cmd_po_en_stg2_ddr2_c = 1'b0;\n\n    end else if ((WRLVL == \"ON\") && (SKIP_CALIB == \"TRUE\")) begin: wrlvl_on_skip_calib\n\n        mig_7series_v4_1_ddr_phy_ck_addr_cmd_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES),\n          .SIM_CAL_OPTION(SIM_CAL_OPTION)\n          )\n          u_ddr_phy_ck_addr_cmd_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .cmd_delay_start            (skip_cal_po_pi_dec_done),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_stg2_f_incdec           (cmd_po_stg2_f_incdec),\n             .po_en_stg2_f               (cmd_po_en_stg2_f),\n             .po_stg2_c_incdec           (cmd_po_stg2_c_incdec),\n             .po_en_stg2_c               (cmd_po_en_stg2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done)\n            );\n\n      assign dqs_po_dec_done             = 1'b1;\n      assign wrlvl_byte_done             = 1'b1;\n      assign wrlvl_rank_done             = 1'b1;\n      assign phy_ctl_rdy_dly             = 1'b1;\n      assign done_dqs_tap_inc            = 1'b1;\n      assign po_stg2_wl_cnt              = 'h0;\n      assign wl_po_coarse_cnt            = 'h0;\n      assign wl_po_fine_cnt              = 'h0;\n      assign dbg_tap_cnt_during_wrlvl    = 'h0;\n      assign dbg_wl_edge_detect_valid    = 'h0;\n      assign dbg_rd_data_edge_detect     = 'h0;\n      assign dbg_wrlvl_fine_tap_cnt      = 'h0;\n      assign dbg_wrlvl_coarse_tap_cnt    = 'h0;\n      assign dbg_phy_wrlvl               = 'h0;\n\n      assign wrlvl_done   = 1'b1;\n      assign wrlvl_err    = 1'b0;\n      assign dqs_po_stg2_f_incdec = 1'b0;\n      assign dqs_po_en_stg2_f = 1'b0;\n      assign dqs_wl_po_en_stg2_c = 1'b0;\n      assign dqs_wl_po_stg2_c_incdec = 1'b0;\n\n      assign cmd_po_stg2_incdec_ddr2_c = 1'b0;\n      assign cmd_po_en_stg2_ddr2_c = 1'b0;\n\n    end else begin: mb_wrlvl_off\n\n        mig_7series_v4_1_ddr_phy_wrlvl_off_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .nCK_PER_CLK   (nCK_PER_CLK),\n          .CLK_PERIOD    (CLK_PERIOD),\n          .PO_INITIAL_DLY(60),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .DQS_WIDTH     (DQS_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES)\n          )\n          u_phy_wrlvl_off_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .pi_fine_dly_dec_done       (pi_fine_dly_dec_done),\n             .cmd_delay_start            (phy_ctl_ready),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_s2_incdec_f             (cmd_po_stg2_f_incdec),\n             .po_en_s2_f                 (cmd_po_en_stg2_f),\n             .po_s2_incdec_c             (cmd_po_stg2_incdec_ddr2_c),\n             .po_en_s2_c                 (cmd_po_en_stg2_ddr2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done),\n             .po_dec_done                (dqs_po_dec_done),\n             .phy_ctl_rdy_dly            (phy_ctl_rdy_dly)\n            );\n\n      assign wrlvl_byte_done             = 1'b1;\n      assign wrlvl_rank_done             = 1'b1;\n      assign po_stg2_wl_cnt              = 'h0;\n      assign wl_po_coarse_cnt            = 'h0;\n      assign wl_po_fine_cnt              = 'h0;\n      assign dbg_tap_cnt_during_wrlvl    = 'h0;\n      assign dbg_wl_edge_detect_valid    = 'h0;\n      assign dbg_rd_data_edge_detect     = 'h0;\n      assign dbg_wrlvl_fine_tap_cnt      = 'h0;\n      assign dbg_wrlvl_coarse_tap_cnt    = 'h0;\n      assign dbg_phy_wrlvl               = 'h0;\n\n      assign wrlvl_done   = 1'b1;\n      assign wrlvl_err    = 1'b0;\n      assign dqs_po_stg2_f_incdec = 1'b0;\n      assign dqs_po_en_stg2_f = 1'b0;\n      assign dqs_wl_po_en_stg2_c = 1'b0;\n      assign cmd_po_stg2_c_incdec = 1'b0;\n      assign dqs_wl_po_stg2_c_incdec = 1'b0;\n      assign cmd_po_en_stg2_c = 1'b0;\n\n    end\n  endgenerate\n\n   generate\n   if((WRLVL == \"ON\") && (OCAL_EN == \"ON\")) begin: oclk_calib\n\n     localparam SAMPCNTRWIDTH = 17;\n     localparam SAMPLES = (SIM_CAL_OPTION==\"NONE\") ? 512 : 4; \n     localparam TAPCNTRWIDTH = clogb2(TAPSPERKCLK);\n     localparam MMCM_SAMP_WAIT = (SIM_CAL_OPTION==\"NONE\") ? 256 : 10;\n     localparam OCAL_SIMPLE_SCAN_SAMPS = (SIM_CAL_OPTION==\"NONE\") ? 512 : 1; \n     localparam POC_PCT_SAMPS_SOLID = 80;\n     localparam SCAN_PCT_SAMPS_SOLID = 95;\n\n     mig_7series_v4_1_ddr_phy_oclkdelay_cal #\n       (\n    \n    .DQS_CNT_WIDTH      (DQS_CNT_WIDTH),\n    .DQS_WIDTH          (DQS_WIDTH),\n    .DQ_WIDTH           (DQ_WIDTH),\n    \n    .DRAM_WIDTH         (DRAM_WIDTH),\n    \n    .OCAL_SIMPLE_SCAN_SAMPS (OCAL_SIMPLE_SCAN_SAMPS),\n    .PCT_SAMPS_SOLID                (POC_PCT_SAMPS_SOLID),\n    .POC_USE_METASTABLE_SAMP        (POC_USE_METASTABLE_SAMP),\n    .SCAN_PCT_SAMPS_SOLID           (SCAN_PCT_SAMPS_SOLID),\n    .SAMPCNTRWIDTH      (SAMPCNTRWIDTH),\n    .SAMPLES            (SAMPLES),\n    .MMCM_SAMP_WAIT             (MMCM_SAMP_WAIT),\n    .SIM_CAL_OPTION             (SIM_CAL_OPTION),\n    .TAPCNTRWIDTH               (TAPCNTRWIDTH),\n    .TAPSPERKCLK                (TAPSPERKCLK),\n    .TCQ                (TCQ),\n    .nCK_PER_CLK                (nCK_PER_CLK),\n    .BYPASS_COMPLEX_OCAL        (BYPASS_COMPLEX_OCAL)\n    \n    )\n     u_ddr_phy_oclkdelay_cal\n       (\n    \n    .prbs_ignore_first_byte           (prbs_ignore_first_byte),\n    .prbs_ignore_last_bytes           (prbs_ignore_last_bytes),\n    .complex_oclkdelay_calib_done   (complex_oclkdelay_calib_done),\n    .dbg_oclkdelay_rd_data          (dbg_oclkdelay_rd_data[16*DRAM_WIDTH-1:0]),\n    .dbg_phy_oclkdelay_cal          (dbg_phy_oclkdelay_cal[255:0]),\n    .lim2init_write_request         (lim2init_write_request),\n    .lim_done                       (lim_done),\n    .oclk_calib_resume              (oclk_calib_resume),\n    .oclk_prech_req                 (oclk_prech_req),\n    .oclkdelay_calib_cnt            (oclkdelay_calib_cnt[DQS_CNT_WIDTH:0]),\n    .oclkdelay_calib_done           (oclkdelay_calib_done),\n    .po_en_stg23                    (po_en_stg23),\n    .po_stg23_incdec                (po_stg23_incdec),\n    .po_stg23_sel                   (po_stg23_sel),\n    .psen                           (psen),\n    .psincdec                       (psincdec),\n    .wrlvl_final                    (wrlvl_final),\n    .rd_victim_sel                  (complex_ocal_rd_victim_sel),\n    .ocal_num_samples_done_r        (complex_ocal_num_samples_done_r),\n    .complex_wrlvl_final            (complex_wrlvl_final),\n    .poc_error                      (poc_error),\n    \n    .clk                            (clk),\n    .complex_oclkdelay_calib_start  (complex_oclkdelay_calib_start_w),\n    .metaQ                          (pd_out),\n    \n    .po_counter_read_val            (po_counter_read_val),\n    .oclkdelay_calib_start          (oclkdelay_calib_start),\n    .oclkdelay_init_val             (oclkdelay_init_val[5:0]),\n    .poc_sample_pd                  (poc_sample_pd),\n    .phy_rddata                     (phy_rddata[2*nCK_PER_CLK*DQ_WIDTH-1:0]),\n    .phy_rddata_en                  (phy_rddata_en),\n    .prbs_o                         (prbs_o[2*nCK_PER_CLK*DQ_WIDTH-1:0]),\n    .prech_done                     (prech_done),\n    .psdone                         (psdone),\n    .rst                            (rst),\n    .wl_po_fine_cnt                 (wl_po_fine_cnt[6*DQS_WIDTH-1:0]),\n    .ocal_num_samples_inc           (complex_ocal_num_samples_inc),\n    .oclkdelay_center_calib_start   (oclkdelay_center_calib_start),\n    .oclk_center_write_resume       (oclk_center_write_resume),\n    .oclkdelay_center_calib_done    (oclkdelay_center_calib_done),\n    .dbg_ocd_lim                    (dbg_ocd_lim),\n    .dbg_poc                         (dbg_poc[1023:0]) );\n\n     end else begin : oclk_calib_disabled\n\n       assign   wrlvl_final = 'b0;\n       assign   psen        = 'b0;\n       assign   psincdec    = 'b0;\n       assign   po_stg23_sel = 'b0;\n       assign   po_stg23_incdec = 'b0;\n       assign   po_en_stg23 = 'b0;\n       assign   oclkdelay_calib_cnt = 'b0;\n       assign   oclk_prech_req = 'b0;\n       assign   oclk_calib_resume = 'b0;\n       assign   oclkdelay_calib_done = 1'b1;\n       assign   dbg_phy_oclkdelay_cal = 'h0;\n       assign   dbg_oclkdelay_rd_data = 'h0;\n\n     end\n   endgenerate\n  \n  \n  \n\n generate\n   if(DQSFOUND_CAL == \"RIGHT\") begin: dqsfind_calib_right\n     mig_7series_v4_1_ddr_phy_dqs_found_cal #\n        (\n         .TCQ              (TCQ),\n         .nCK_PER_CLK      (nCK_PER_CLK),\n         .nCL              (nCL),\n         .AL               (AL),\n         .nCWL             (nCWL),\n         \n         .RANKS            (1),\n         .DQS_CNT_WIDTH    (DQS_CNT_WIDTH),\n         .DQS_WIDTH        (DQS_WIDTH),\n         .DRAM_WIDTH       (DRAM_WIDTH),\n         .REG_CTRL         (REG_CTRL),\n         .SIM_CAL_OPTION   (SIM_CAL_OPTION),\n         .DRAM_TYPE        (DRAM_TYPE),\n         .NUM_DQSFOUND_CAL (NUM_DQSFOUND_CAL),\n         .N_CTL_LANES      (DQS_FOUND_N_CTL_LANES),\n         .HIGHEST_LANE     (HIGHEST_LANE),\n         .HIGHEST_BANK     (HIGHEST_BANK),\n         .BYTE_LANES_B0    (BYTE_LANES_B0),\n         .BYTE_LANES_B1    (BYTE_LANES_B1),\n         .BYTE_LANES_B2    (BYTE_LANES_B2),\n         .BYTE_LANES_B3    (BYTE_LANES_B3),\n         .BYTE_LANES_B4    (BYTE_LANES_B4),\n         .DATA_CTL_B0      (DATA_CTL_B0),\n         .DATA_CTL_B1      (DATA_CTL_B1),\n         .DATA_CTL_B2      (DATA_CTL_B2),\n         .DATA_CTL_B3      (DATA_CTL_B3),\n         .DATA_CTL_B4      (DATA_CTL_B4)\n         )\n         u_ddr_phy_dqs_found_cal\n           (\n            .clk                       (clk),\n            .rst                       (rst),\n            .pi_dqs_found_start        (pi_dqs_found_start),\n            .dqsfound_retry            (dqsfound_retry),\n            .detect_pi_found_dqs       (detect_pi_found_dqs),\n            .prech_done                (prech_done),\n            .pi_dqs_found_lanes        (pi_dqs_found_lanes),\n            .pi_rst_stg1_cal           (pi_rst_stg1_cal),\n            .rd_data_offset_0          (rd_data_offset_0),\n            .rd_data_offset_1          (rd_data_offset_1),\n            .rd_data_offset_2          (rd_data_offset_2),\n            .pi_dqs_found_rank_done    (pi_dqs_found_rank_done),\n            .pi_dqs_found_done         (pi_dqs_found_done),\n            .dqsfound_retry_done       (dqsfound_retry_done),\n            .dqs_found_prech_req       (dqs_found_prech_req),\n            .pi_dqs_found_err          (pi_dqs_found_err),\n            .rd_data_offset_ranks_0    (rd_data_offset_ranks_0),\n            .rd_data_offset_ranks_1    (rd_data_offset_ranks_1),\n            .rd_data_offset_ranks_2    (rd_data_offset_ranks_2),\n            .rd_data_offset_ranks_mc_0 (rd_data_offset_ranks_mc_0),\n            .rd_data_offset_ranks_mc_1 (rd_data_offset_ranks_mc_1),\n            .rd_data_offset_ranks_mc_2 (rd_data_offset_ranks_mc_2),\n            .po_counter_read_val       (po_counter_read_val),\n            .rd_data_offset_cal_done   (rd_data_offset_cal_done),\n            .fine_adjust_done          (fine_adjust_done),\n            .fine_adjust_lane_cnt      (fine_adjust_lane_cnt),\n            .ck_po_stg2_f_indec        (ck_po_stg2_f_indec),\n            .ck_po_stg2_f_en           (ck_po_stg2_f_en),\n            .dbg_dqs_found_cal         (dbg_dqs_found_cal)\n            );\n   end else begin: dqsfind_calib_left\n     mig_7series_v4_1_ddr_phy_dqs_found_cal_hr #\n        (\n         .TCQ              (TCQ),\n         .nCK_PER_CLK      (nCK_PER_CLK),\n         .nCL              (nCL),\n         .AL               (AL),\n         .nCWL             (nCWL),\n         \n         .RANKS            (1),\n         .DQS_CNT_WIDTH    (DQS_CNT_WIDTH),\n         .DQS_WIDTH        (DQS_WIDTH),\n         .DRAM_WIDTH       (DRAM_WIDTH),\n         .REG_CTRL         (REG_CTRL),\n         .SIM_CAL_OPTION   (SIM_CAL_OPTION),\n         .DRAM_TYPE        (DRAM_TYPE),\n         .NUM_DQSFOUND_CAL (NUM_DQSFOUND_CAL),\n         .N_CTL_LANES      (DQS_FOUND_N_CTL_LANES),\n         .HIGHEST_LANE     (HIGHEST_LANE),\n         .HIGHEST_BANK     (HIGHEST_BANK),\n         .BYTE_LANES_B0    (BYTE_LANES_B0),\n         .BYTE_LANES_B1    (BYTE_LANES_B1),\n         .BYTE_LANES_B2    (BYTE_LANES_B2),\n         .BYTE_LANES_B3    (BYTE_LANES_B3),\n         .BYTE_LANES_B4    (BYTE_LANES_B4),\n         .DATA_CTL_B0      (DATA_CTL_B0),\n         .DATA_CTL_B1      (DATA_CTL_B1),\n         .DATA_CTL_B2      (DATA_CTL_B2),\n         .DATA_CTL_B3      (DATA_CTL_B3),\n         .DATA_CTL_B4      (DATA_CTL_B4)\n         )\n         u_ddr_phy_dqs_found_cal_hr\n           (\n            .clk                       (clk),\n            .rst                       (rst),\n            .pi_dqs_found_start        (pi_dqs_found_start),\n            .dqsfound_retry            (dqsfound_retry),\n            .detect_pi_found_dqs       (detect_pi_found_dqs),\n            .prech_done                (prech_done),\n            .pi_dqs_found_lanes        (pi_dqs_found_lanes),\n            .pi_rst_stg1_cal           (pi_rst_stg1_cal),\n            .rd_data_offset_0          (rd_data_offset_0),\n            .rd_data_offset_1          (rd_data_offset_1),\n            .rd_data_offset_2          (rd_data_offset_2),\n            .pi_dqs_found_rank_done    (pi_dqs_found_rank_done),\n            .pi_dqs_found_done         (pi_dqs_found_done),\n            .dqsfound_retry_done       (dqsfound_retry_done),\n            .dqs_found_prech_req       (dqs_found_prech_req),\n            .pi_dqs_found_err          (pi_dqs_found_err),\n            .rd_data_offset_ranks_0    (rd_data_offset_ranks_0),\n            .rd_data_offset_ranks_1    (rd_data_offset_ranks_1),\n            .rd_data_offset_ranks_2    (rd_data_offset_ranks_2),\n            .rd_data_offset_ranks_mc_0 (rd_data_offset_ranks_mc_0),\n            .rd_data_offset_ranks_mc_1 (rd_data_offset_ranks_mc_1),\n            .rd_data_offset_ranks_mc_2 (rd_data_offset_ranks_mc_2),\n            .po_counter_read_val       (po_counter_read_val),\n            .rd_data_offset_cal_done   (rd_data_offset_cal_done),\n            .fine_adjust_done          (fine_adjust_done),\n            .fine_adjust_lane_cnt      (fine_adjust_lane_cnt),\n            .ck_po_stg2_f_indec        (ck_po_stg2_f_indec),\n            .ck_po_stg2_f_en           (ck_po_stg2_f_en),\n            .dbg_dqs_found_cal         (dbg_dqs_found_cal)\n            );\n   end\n endgenerate\n\n  \n  \n  \ngenerate\nif (SKIP_CALIB == \"FALSE\") begin:ddr_phy_rdlvl_gen\n  mig_7series_v4_1_ddr_phy_rdlvl #\n    (\n     .TCQ             (TCQ),\n     .nCK_PER_CLK     (nCK_PER_CLK),\n     .CLK_PERIOD      (CLK_PERIOD),\n     .DQ_WIDTH        (DQ_WIDTH),\n     .DQS_CNT_WIDTH   (DQS_CNT_WIDTH),\n     .DQS_WIDTH       (DQS_WIDTH),\n     .DRAM_WIDTH      (DRAM_WIDTH),\n     .RANKS           (1),\n     .PER_BIT_DESKEW  (PER_BIT_DESKEW),\n     .SIM_CAL_OPTION  (SIM_CAL_OPTION),\n     .DEBUG_PORT      (DEBUG_PORT),\n     .DRAM_TYPE       (DRAM_TYPE),\n     .OCAL_EN         (OCAL_EN),\n     .IDELAY_ADJ      (IDELAY_ADJ),\n     .PI_DIV2_INCDEC  (PI_DIV2_INCDEC)\n     )\n    u_ddr_phy_rdlvl\n      (\n       .clk                     (clk),\n       .rst                     (rst),\n       .mpr_rdlvl_done          (mpr_rdlvl_done),\n       .mpr_rdlvl_start         (mpr_rdlvl_start),\n       .mpr_last_byte_done      (mpr_last_byte_done),\n       .mpr_rnk_done            (mpr_rnk_done),\n       .rdlvl_stg1_start        (rdlvl_stg1_start),\n       .rdlvl_stg1_done         (rdlvl_stg1_done),\n       .rdlvl_stg1_rnk_done     (rdlvl_stg1_rank_done),\n       .rdlvl_stg1_err          (rdlvl_stg1_err),\n       .mpr_rdlvl_err           (mpr_rdlvl_err),\n       .rdlvl_err               (rdlvl_err),\n       .rdlvl_prech_req         (rdlvl_prech_req),\n       .rdlvl_last_byte_done    (rdlvl_last_byte_done),\n       .rdlvl_assrt_common      (rdlvl_assrt_common),\n       .prech_done              (prech_done),\n       .phy_if_empty            (phy_if_empty),\n       .idelaye2_init_val       (idelaye2_init_val),\n       .rd_data                 (phy_rddata),\n       .pi_en_stg2_f            (rdlvl_pi_stg2_f_en),\n       .pi_stg2_f_incdec        (rdlvl_pi_stg2_f_incdec),\n       .pi_stg2_load            (pi_stg2_load),\n       .pi_stg2_reg_l           (pi_stg2_reg_l),\n       .dqs_po_dec_done         (dqs_po_dec_done),\n       .pi_counter_read_val     (pi_counter_read_val),\n       .pi_fine_dly_dec_done    (pi_fine_dly_dec_done),\n       .idelay_ce               (idelay_ce_int),\n       .idelay_inc              (idelay_inc_int),\n       .idelay_ld               (idelay_ld),\n       .wrcal_cnt               (po_stg2_wrcal_cnt),\n       .pi_stg2_rdlvl_cnt       (pi_stg2_rdlvl_cnt),\n       .dlyval_dq               (dlyval_dq),\n       .rdlvl_pi_incdec         (rdlvl_pi_incdec),\n       .dbg_cpt_first_edge_cnt  (dbg_cpt_first_edge_cnt),\n       .dbg_cpt_second_edge_cnt (dbg_cpt_second_edge_cnt),\n       .dbg_cpt_tap_cnt         (dbg_cpt_tap_cnt),\n       .dbg_dq_idelay_tap_cnt   (dbg_dq_idelay_tap_cnt),\n       .dbg_idel_up_all         (dbg_idel_up_all),\n       .dbg_idel_down_all       (dbg_idel_down_all),\n       .dbg_idel_up_cpt         (dbg_idel_up_cpt),\n       .dbg_idel_down_cpt       (dbg_idel_down_cpt),\n       .dbg_sel_idel_cpt        (dbg_sel_idel_cpt),\n       .dbg_sel_all_idel_cpt    (dbg_sel_all_idel_cpt),\n       .dbg_phy_rdlvl           (dbg_phy_rdlvl)\n       );\nend else begin:ddr_phy_rdlvl_off\n\n     assign mpr_rdlvl_done          = 1'b1;\n     assign mpr_last_byte_done      = 1'b1;\n     assign mpr_rnk_done            = 1'b1;\n     assign rdlvl_stg1_done         = 1'b1;\n     assign rdlvl_stg1_rank_done    = 1'b1;\n     assign rdlvl_last_byte_done    = 1'b1;\n     assign pi_fine_dly_dec_done    = 1'b1;\n     assign rdlvl_prech_req         = 1'b0;\n     assign rdlvl_stg1_err          = 1'b0;\n     assign mpr_rdlvl_err           = 1'b0;\n     assign rdlvl_err               = 1'b0;\n     assign rdlvl_assrt_common      = 1'b0;\n     assign rdlvl_pi_stg2_f_en      = 1'b0;\n     assign rdlvl_pi_stg2_f_incdec  = 1'b0;\n     assign pi_stg2_rdlvl_cnt       = 'h0;\n     assign idelay_ce_int           = 1'b0;\n     assign idelay_inc_int          = 1'b0;\n     assign rdlvl_pi_incdec         = 1'b0;\n     assign dbg_phy_rdlvl           = 'h0;\n     assign dbg_cpt_first_edge_cnt  = 'h0;\n     assign dbg_cpt_second_edge_cnt = 'h0;\n     assign dbg_cpt_tap_cnt         = 'h0;\n     assign dbg_dq_idelay_tap_cnt   = 'h0;\n\nend\nendgenerate\n\ngenerate\nif((DRAM_TYPE == \"DDR3\") && (nCK_PER_CLK == 4) && (BYPASS_COMPLEX_RDLVL==\"FALSE\")) begin:ddr_phy_prbs_rdlvl_gen\n  mig_7series_v4_1_ddr_phy_prbs_rdlvl #\n    (\n     .TCQ            (TCQ),\n     .nCK_PER_CLK    (nCK_PER_CLK),\n     .DQ_WIDTH       (DQ_WIDTH),\n     .DQS_CNT_WIDTH  (DQS_CNT_WIDTH),\n     .DQS_WIDTH      (DQS_WIDTH),\n     .DRAM_WIDTH     (DRAM_WIDTH),\n     .RANKS          (1),\n     .SIM_CAL_OPTION (SIM_CAL_OPTION),\n     .PRBS_WIDTH     (PRBS_WIDTH),\n     .FIXED_VICTIM   (FIXED_VICTIM),\n     .FINE_PER_BIT   (FINE_PER_BIT),\n     .CENTER_COMP_MODE (CENTER_COMP_MODE),\n     .PI_VAL_ADJ       (PI_VAL_ADJ)\n     )\n    u_ddr_phy_prbs_rdlvl\n      (\n       .clk                    (clk),\n       .rst                    (rst),\n       .prbs_rdlvl_start       (prbs_rdlvl_start),\n       .prbs_rdlvl_done        (prbs_rdlvl_done_complex),\n       .prbs_last_byte_done    (prbs_last_byte_done),\n       .prbs_rdlvl_prech_req   (prbs_rdlvl_prech_req),\n       .complex_sample_cnt_inc (complex_sample_cnt_inc),\n       .prech_done             (prech_done),\n       .phy_if_empty           (phy_if_empty),\n       .rd_data                (phy_rddata),\n       .compare_data           (prbs_o),\n       .pi_counter_read_val    (pi_counter_read_val),\n       .pi_en_stg2_f           (prbs_pi_stg2_f_en),\n       .pi_stg2_f_incdec       (prbs_pi_stg2_f_incdec),\n       .dbg_prbs_rdlvl         (dbg_prbs_rdlvl),\n       .pi_stg2_prbs_rdlvl_cnt (pi_stg2_prbs_rdlvl_cnt),\n       .prbs_final_dqs_tap_cnt_r (prbs_final_dqs_tap_cnt_r),\n       .dbg_prbs_first_edge_taps (dbg_prbs_first_edge_taps),\n       .dbg_prbs_second_edge_taps (dbg_prbs_second_edge_taps),\n       .rd_victim_sel          (rd_victim_sel),\n       .complex_victim_inc     (complex_victim_inc),\n       .reset_rd_addr          (reset_rd_addr),\n       .fine_delay_incdec_pb   (fine_delay_incdec_pb),\n       .fine_delay_sel         (fine_delay_sel),\n       .complex_act_start      (complex_act_start),\n       .num_samples_done_r     (num_samples_done_r),\n       .complex_pi_incdec_done (complex_pi_incdec_done),\n       .complex_init_pi_dec_done     (complex_init_pi_dec_done)\n       );\nend else begin:ddr_phy_prbs_rdlvl_off\n\n     assign prbs_rdlvl_done_complex = rdlvl_stg1_done ;\n     \n     assign prbs_last_byte_done     = rdlvl_stg1_done;\n     assign reset_rd_addr           = 1'b0;\n     assign prbs_rdlvl_prech_req    = 1'b0 ;\n     assign prbs_pi_stg2_f_en       = 1'b0 ;\n     assign prbs_pi_stg2_f_incdec   = 1'b0 ;\n     assign pi_stg2_prbs_rdlvl_cnt  = 'b0 ;\n     assign dbg_prbs_rdlvl          = 'h0 ;\n     assign prbs_final_dqs_tap_cnt_r  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_first_edge_taps  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_second_edge_taps = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign complex_pi_incdec_done  = 'b0;\n     assign complex_init_pi_dec_done  = 'b1;\n     assign num_samples_done_r      = 'b0;\nend\nendgenerate\n\n  \n  \n  \n\n  generate\n  if (SKIP_CALIB == \"TRUE\") begin: gen_skip_calib_tap\n\n    \n    always @(posedge clk) begin\n      if (rst)\n        calib_tap_req  <= #TCQ 1'b0;\n      else if (phy_ctl_ready)\n        calib_tap_req <= #TCQ 1'b1;\n    end\n\n\n    \n    always @(posedge clk) begin\n      if (rst) begin\n        calib_po_coarse_tap_cnt <= #TCQ 'd0;\n        calib_po_stage3_tap_cnt <= #TCQ 'd0;\n        calib_po_stage2_tap_cnt <= #TCQ 'd0;\n        calib_pi_stage2_tap_cnt <= #TCQ 'd0;\n        calib_idelay_tap_cnt    <= #TCQ 'd0;\n        calib_device_temp       <= #TCQ 'd0;\n      end else if (calib_tap_load) begin\n        case (calib_tap_addr[2:0])\n          3'b000:\n            calib_po_coarse_tap_cnt[3*calib_tap_addr[6:3]+:3] <= #TCQ calib_tap_val[2:0];\n          3'b001:\n            calib_po_stage3_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b010:\n            calib_po_stage2_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b011:\n            calib_pi_stage2_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b100:\n            calib_idelay_tap_cnt[5*calib_tap_addr[6:3]+:5] <= #TCQ calib_tap_val[4:0];\n          3'b110:\n            if (&calib_tap_addr[6:3])\n              calib_device_temp[7:0] <= #TCQ calib_tap_val[7:0];\n          3'b111:\n            if (&calib_tap_addr[6:3])\n              calib_device_temp[11:8] <= #TCQ calib_tap_val[3:0];\n          default:\n            calib_po_coarse_tap_cnt[3*calib_tap_addr[6:3]+:3] <= #TCQ calib_tap_val[2:0];\n        endcase\n      end\n    end\n\n\n    mig_7series_v4_1_ddr_skip_calib_tap #\n    (\n        .TCQ       (TCQ),\n        .DQS_WIDTH (DQS_WIDTH)\n     )\n       u_ddr_skip_calib_tap\n      (\n       .rst                   (rst),\n       .clk                   (clk),\n       .phy_ctl_ready         (phy_ctl_ready),\n       .load_done                (calib_tap_load_done),\n       .calib_tap_inc_start      (calib_tap_inc_start),\n       .calib_tap_inc_done       (calib_tap_inc_done),\n       .calib_tap_inc_byte_cnt   (calib_tap_inc_byte_cnt),\n       .calib_po_stage2_tap_cnt  (calib_po_stage2_tap_cnt),\n       .calib_po_stage3_tap_cnt  (calib_po_stage3_tap_cnt),\n       .calib_po_coarse_tap_cnt  (calib_po_coarse_tap_cnt),\n       .calib_pi_stage2_tap_cnt  (calib_pi_stage2_tap_cnt),\n       .calib_idelay_tap_cnt     (calib_idelay_tap_cnt),\n       .po_counter_read_val      (po_counter_read_val),\n       .pi_counter_read_val      (pi_counter_read_val),\n       .calib_po_f_en            (calib_po_f_en),\n       .calib_po_f_incdec        (calib_po_f_incdec),\n       .calib_po_sel_stg2stg3    (calib_po_sel_stg2stg3),\n       .calib_po_c_en            (calib_po_c_en),\n       .calib_po_c_inc           (calib_po_c_inc),\n       .calib_pi_f_en            (calib_pi_f_en),\n       .calib_pi_f_incdec        (calib_pi_f_incdec),\n       .calib_idelay_ce          (calib_idelay_ce),\n       .calib_idelay_inc         (calib_idelay_inc),\n       .skip_cal_po_pi_dec_done  (skip_cal_po_pi_dec_done),\n       .coarse_dec_err           (coarse_dec_err),\n       .dbg_skip_cal             (dbg_skip_cal)\n       );\n\n    \n    reg [8:0] samp_en_cnt;\n\n    always @ (posedge clk) begin\n      if (rst || tempmon_done_skip || (samp_en_cnt == 'd0))\n        samp_en_cnt <= #TCQ 'd267;\n      else if (calib_complete && (samp_en_cnt > 'd0))\n        samp_en_cnt <= #TCQ samp_en_cnt - 1;\n    end\n\n    always @ (posedge clk) begin\n      if (rst || tempmon_done_skip)\n        skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n      else if (samp_en_cnt == 'd260)\n        skip_cal_tempmon_samp_en <= #TCQ 1'b1;\n      else\n        skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n    end\n\n\n\n  end else begin: skip_calib_tap_off\n    assign calib_po_f_en          = 1'b0;\n    assign calib_po_f_incdec      = 1'b0;\n    assign calib_po_sel_stg2stg3  = 1'b0;\n    assign calib_po_c_en          = 1'b0;\n    assign calib_po_c_inc         = 1'b0;\n    assign calib_pi_f_en          = 1'b0;\n    assign calib_pi_f_incdec      = 1'b0;\n    assign calib_idelay_ce        = 1'b0;\n    assign calib_idelay_inc       = 1'b0;\n    assign calib_tap_inc_done     = 1'b0;\n    assign calib_tap_inc_byte_cnt = 'd0;\n    assign skip_cal_po_pi_dec_done = 1'b1;\n\n    always @(posedge clk) begin\n      calib_tap_req     <= #TCQ 1'b0;\n      calib_device_temp <= #TCQ 'd0;\n      skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n    end\n\nend\nendgenerate\n\n  \n  \n  \n\n  mig_7series_v4_1_ddr_phy_tempmon #\n    (\n     .SKIP_CALIB  (SKIP_CALIB),\n     .TCQ         (TCQ)\n     )\n    ddr_phy_tempmon_0\n      (\n       .rst                   (rst),\n       .clk                   (clk),\n       .calib_complete        (calib_complete),\n       .tempmon_pi_f_inc      (tempmon_pi_f_inc),\n       .tempmon_pi_f_dec      (tempmon_pi_f_dec),\n       .tempmon_sel_pi_incdec (tempmon_sel_pi_incdec),\n       .device_temp           (device_temp),\n       .calib_device_temp     (calib_device_temp),\n       .tempmon_sample_en     (tempmon_sample_en | skip_cal_tempmon_samp_en),\n       .tempmon_done_skip     (tempmon_done_skip)\n       );\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: mig_7series_v4_1_ddr_calib_top. Module specification: This module serves as the top-level calibration module for a DDR (Double Data Rate) memory interface. It orchestrates various calibration processes including write leveling, read leveling, DQS (Data Strobe) calibration, and temperature monitoring. The module integrates several sub-modules to perform these calibration tasks, manages calibration sequences, and handles timing adjustments for different aspects of the DDR interface. Key input ports include clock (clk), reset (rst), and various status signals from DDR interface components. Output ports comprise calibration control signals, memory interface signals, and debug outputs. Internal signals are used for inter-module communication, state management, and calibration process control. The module is structured into several main blocks: initialization logic, write leveling, read leveling, DQS calibration, "
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: mig_7series_v4_1_ddr_calib_top\n\nExplanation: This module appears to be the top-level calibration module for a DDR (Double Data Rate) memory interface. It orchestrates various calibration processes such as write leveling, read leveling, DQS (Data Strobe) calibration, and temperature monitoring. The module integrates several sub-modules to perform these calibration tasks, manages calibration sequences, and handles timing adjustments for different aspects of the DDR interface. It also includes debug features and supports different DRAM types and configurations. The overall purpose is to ensure proper timing and signal integrity for reliable DDR memory operations."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nclk, rst, slot_0_present, slot_1_present, phy_ctl_ready, phy_ctl_full, phy_cmd_full, phy_data_full, pi_phaselocked, pi_phase_locked_all, pi_found_dqs, pi_dqs_found_all, pi_dqs_found_lanes, pi_counter_read_val, phy_if_empty, idelaye2_init_val, oclkdelay_init_val, tg_err, phy_rddata, pd_out, poc_sample_pd, calib_tap_load, calib_tap_addr, calib_tap_load_done, calib_tap_val, device_temp, tempmon_sample_en, dbg_sel_pi_incdec, dbg_sel_po_incdec, dbg_byte_sel, dbg_pi_f_inc, dbg_pi_f_dec, dbg_po_f_inc, dbg_po_f_stg23_sel, dbg_po_f_dec, dbg_idel_up_all, dbg_idel_down_all, dbg_idel_up_cpt, dbg_idel_down_cpt, dbg_sel_idel_cpt, dbg_sel_all_idel_cpt, psdone.\n\nExplanation: These inputs include clock and reset signals, status signals from various DDR interface components, calibration control signals, debug inputs, and temperature monitoring inputs.\n\nOutput ports:\nwrite_calib, read_calib, calib_ctl_wren, calib_cmd_wren, calib_seq, calib_aux_out, calib_cke, calib_odt, calib_cmd, calib_wrdata_en, calib_rank_cnt, calib_cas_slot, calib_data_offset_0, calib_data_offset_1, calib_data_offset_2, phy_address, phy_bank, phy_cs_n, phy_ras_n, phy_cas_n, phy_we_n, phy_reset_n, calib_sel, calib_in_common, calib_zero_inputs, calib_zero_ctrl, phy_if_empty_def, phy_if_reset, pi_rst_stg1_cal, pi_en_stg2_f, pi_stg2_f_incdec, pi_stg2_load, pi_stg2_reg_l, idelay_ce, idelay_inc, idelay_ld, po_sel_stg2stg3, po_stg2_c_incdec, po_en_stg2_c, po_stg2_f_incdec, po_en_stg2_f, po_counter_load_en, phy_wrdata, dlyval_dq, calib_rd_data_offset_0, calib_rd_data_offset_1, calib_rd_data_offset_2, phy_rddata_valid, calib_writes, init_calib_complete, init_wrcal_complete, pi_phase_locked_err, pi_dqsfound_err, wrcal_err, psen, psincdec, calib_tap_req, dbg_pi_phaselock_start, dbg_pi_dqsfound_start, dbg_pi_dqsfound_done, dbg_wrcal_start, dbg_wrcal_done, dbg_wrlvl_start, dbg_wrlvl_done, dbg_wrlvl_err, dbg_wrlvl_fine_tap_cnt, dbg_wrlvl_coarse_tap_cnt, dbg_phy_wrlvl, dbg_tap_cnt_during_wrlvl, dbg_wl_edge_detect_valid, dbg_rd_data_edge_detect, dbg_final_po_fine_tap_cnt, dbg_final_po_coarse_tap_cnt, dbg_phy_wrcal, dbg_rdlvl_start, dbg_rdlvl_done, dbg_rdlvl_err, dbg_cpt_first_edge_cnt, dbg_cpt_second_edge_cnt, dbg_cpt_tap_cnt, dbg_dq_idelay_tap_cnt, dbg_phy_rdlvl, dbg_calib_top, dbg_oclkdelay_calib_start, dbg_oclkdelay_calib_done, dbg_phy_oclkdelay_cal, dbg_oclkdelay_rd_data, dbg_phy_init, dbg_prbs_rdlvl, dbg_dqs_found_cal, dbg_poc, prbs_final_dqs_tap_cnt_r, dbg_prbs_first_edge_taps, dbg_prbs_second_edge_taps, byte_sel_cnt, fine_delay_incdec_pb, fine_delay_sel.\n\nExplanation: These outputs include calibration control signals, memory interface signals, delay adjustment signals, debug outputs, and various status signals related to the calibration process and DDR interface operation."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\nprbs_seed, prbs_out, prbs_rise0, prbs_fall0, prbs_rise1, prbs_fall1, prbs_rise2, prbs_fall2, prbs_rise3, prbs_fall3, prbs_o, dqsfound_retry, dqsfound_retry_done, phy_rddata_en, prech_done, rdlvl_stg1_done, rdlvl_stg1_done_r1, pi_dqs_found_done, rdlvl_stg1_err, pi_dqs_found_err, wrcal_pat_resume, wrcal_resume_w, rdlvl_prech_req, rdlvl_last_byte_done, rdlvl_stg1_start, rdlvl_stg1_rank_done, rdlvl_assrt_common, pi_dqs_found_start, pi_dqs_found_rank_done, wl_sm_start, wrcal_start, wrcal_rd_wait, wrcal_prech_req, wrcal_pat_err, wrcal_done, wrlvl_done, wrlvl_err, wrlvl_start, ck_addr_cmd_delay_done, po_ck_addr_cmd_delay_done, pi_calib_done, detect_pi_found_dqs, rd_data_offset_0, rd_data_offset_1, rd_data_offset_2, rd_data_offset_ranks_0, rd_data_offset_ranks_1, rd_data_offset_ranks_2, rd_data_offset_ranks_mc_0, rd_data_offset_ranks_mc_1, rd_data_offset_ranks_mc_2, cmd_po_stg2_f_incdec, cmd_po_stg2_incdec_ddr2_c, cmd_po_en_stg2_f, cmd_po_en_stg2_ddr2_c, cmd_po_stg2_c_incdec, cmd_po_en_stg2_c, po_stg2_ddr2_incdec, po_en_stg2_ddr2, dqs_po_stg2_f_incdec, dqs_po_en_stg2_f, dqs_wl_po_stg2_c_incdec, wrcal_po_stg2_c_incdec, dqs_wl_po_en_stg2_c, wrcal_po_en_stg2_c, ctl_lane_cnt, ctl_lane_sel, po_stg2_wrcal_cnt, po_stg2_wl_cnt, po_stg2_ddr2_cnt, dqs_wl_po_stg2_reg_l, dqs_wl_po_stg2_load, dqs_po_stg2_reg_l, dqs_po_stg2_load, dqs_po_dec_done, pi_fine_dly_dec_done, rdlvl_pi_stg2_f_incdec, rdlvl_pi_stg2_f_en, pi_stg2_rdlvl_cnt, wl_po_coarse_cnt, wl_po_fine_cnt, phase_locked_err, phy_ctl_rdy_dly, idelay_ce_int, idelay_inc_int, idelay_ce_r1, idelay_ce_r2, idelay_inc_r1, idelay_inc_r2, po_dly_req_r, wrcal_read_req, wrcal_act_req, temp_wrcal_done, tg_timer_done, no_rst_tg_mc, calib_complete, reset_if_r1, reset_if_r2, reset_if_r3, reset_if_r4, reset_if_r5, reset_if_r6, reset_if_r7, reset_if_r8, reset_if_r9, reset_if, phy_if_reset_w, pi_phaselock_start.\n\nExplanation:\nThese internal signals serve various purposes within the module:\n- prbs_* signals are related to Pseudo-Random Binary Sequence generation and processing.\n- *_done and *_start signals indicate completion and initiation of various calibration stages.\n- phy_* signals interface with the physical layer of the DDR memory.\n- pi_* and po_* signals are related to Phase Interpolator and Phase Offset adjustments.\n- cmd_* signals control command-related operations.\n- wrcal_* and wrlvl_* signals are associated with write calibration and write leveling.\n- rdlvl_* signals are related to read leveling processes.\n- dqs_* signals deal with Data Strobe signal management.\n- ctl_* signals are for control lane operations.\n- idelay_* signals manage input delay adjustments.\n- reset_* signals handle various reset scenarios.\n- Other signals support debug, error detection, and specific calibration processes."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\nmodule mig_7series_v4_1_ddr_calib_top #\n  (\n   parameter TCQ             = 100,\n   parameter nCK_PER_CLK     = 2,       \n   parameter tCK             = 2500,    \n   parameter DDR3_VDD_OP_VOLT = \"135\",     \n   parameter CLK_PERIOD      = 3333,    \n   parameter N_CTL_LANES     = 3,       \n   parameter DRAM_TYPE       = \"DDR3\",  \n   parameter PRBS_WIDTH      = 8,      \n   parameter HIGHEST_LANE    = 4,\n   parameter HIGHEST_BANK    = 3,\n   parameter BANK_TYPE       = \"HP_IO\", \n   \n   \n   parameter DATA_CTL_B0     = 4'hc,\n   parameter DATA_CTL_B1     = 4'hf,\n   parameter DATA_CTL_B2     = 4'hf,\n   parameter DATA_CTL_B3     = 4'hf,\n   parameter DATA_CTL_B4     = 4'hf,\n   \n   \n   parameter BYTE_LANES_B0   = 4'b1111,\n   parameter BYTE_LANES_B1   = 4'b0000,\n   parameter BYTE_LANES_B2   = 4'b0000,\n   parameter BYTE_LANES_B3   = 4'b0000,\n   parameter BYTE_LANES_B4   = 4'b0000,\n   parameter DQS_BYTE_MAP\n     = 144'h00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00,\n   parameter CTL_BYTE_LANE   = 8'hE4,    \n   parameter CTL_BANK        = 3'b000,  \n   \n   parameter [7:0] SLOT_1_CONFIG = 8'b0000_0000,\n   \n   parameter BANK_WIDTH      = 2,       \n   parameter CA_MIRROR       = \"OFF\",   \n   parameter COL_WIDTH       = 10,      \n   parameter nCS_PER_RANK    = 1,       \n   parameter DQ_WIDTH        = 64,      \n   parameter DQS_CNT_WIDTH   = 3,       \n   parameter DQS_WIDTH       = 8,       \n   parameter DRAM_WIDTH      = 8,       \n   parameter ROW_WIDTH       = 14,      \n   parameter RANKS           = 1,       \n   parameter CS_WIDTH        = 1,       \n   parameter CKE_WIDTH       = 1,       \n   parameter DDR2_DQSN_ENABLE = \"YES\",  \n   parameter PER_BIT_DESKEW  = \"ON\",\n   \n   \n   parameter NUM_DQSFOUND_CAL = 1020,      \n   parameter CALIB_ROW_ADD   = 16'h0000,\n   parameter CALIB_COL_ADD   = 12'h000, \n   parameter CALIB_BA_ADD    = 3'h0,    \n   \n   parameter AL              = \"0\",     \n   parameter TEST_AL         = \"0\",     \n   parameter ADDR_CMD_MODE   = \"1T\",    \n   parameter BURST_MODE      = \"8\",     \n   parameter BURST_TYPE      = \"SEQ\",   \n   parameter nCL             = 5,       \n   parameter nCWL            = 5,       \n   parameter tRFC            = 110000,  \n   parameter tREFI           = 7800000, \n   parameter OUTPUT_DRV      = \"HIGH\",  \n   parameter REG_CTRL        = \"ON\",    \n   parameter RTT_NOM         = \"60\",    \n   parameter RTT_WR          = \"60\",    \n   parameter USE_ODT_PORT    = 0,       \n                                        \n   parameter WRLVL           = \"OFF\",   \n   parameter PRE_REV3ES       = \"OFF\",       \n   parameter POC_USE_METASTABLE_SAMP = \"FALSE\",\n\n    \n   parameter SIM_INIT_OPTION = \"NONE\",  \n   parameter SIM_CAL_OPTION  = \"NONE\",  \n   parameter CKE_ODT_AUX     = \"FALSE\",\n   parameter IDELAY_ADJ      = \"ON\",\n   parameter FINE_PER_BIT    = \"ON\",\n   parameter CENTER_COMP_MODE = \"ON\",\n   parameter PI_VAL_ADJ       = \"ON\",\n   parameter TAPSPERKCLK      = 56,\n   parameter DEBUG_PORT       = \"OFF\",    \n   parameter SKIP_CALIB       = \"FALSE\",\n   parameter PI_DIV2_INCDEC   = \"TRUE\"\n   )\n  (\n   input                              clk,         \n   input                              rst,         \n   \n   input [7:0]                        slot_0_present,\n   input [7:0]                        slot_1_present,\n   \n   \n   input                              phy_ctl_ready,\n   input                              phy_ctl_full,\n   input                              phy_cmd_full,\n   input                              phy_data_full,\n   \n   output                             write_calib,\n   output                             read_calib,\n   output                             calib_ctl_wren,\n   output                             calib_cmd_wren,\n   output [1:0]                       calib_seq,\n   output [3:0]                       calib_aux_out,\n   output [nCK_PER_CLK -1:0]          calib_cke,\n   output [1:0]               calib_odt,\n   output [2:0]                       calib_cmd,\n   output                             calib_wrdata_en,\n   output [1:0]                       calib_rank_cnt,\n   output [1:0]                       calib_cas_slot,\n   output [5:0]                       calib_data_offset_0,\n   output [5:0]                       calib_data_offset_1,\n   output [5:0]                       calib_data_offset_2,\n   output [nCK_PER_CLK*ROW_WIDTH-1:0] phy_address,\n   output [nCK_PER_CLK*BANK_WIDTH-1:0]phy_bank,\n   output [CS_WIDTH*nCS_PER_RANK*nCK_PER_CLK-1:0] phy_cs_n,\n   output [nCK_PER_CLK-1:0]           phy_ras_n,\n   output [nCK_PER_CLK-1:0]           phy_cas_n,\n   output [nCK_PER_CLK-1:0]           phy_we_n,\n   output                             phy_reset_n,\n   \n output reg [5:0] calib_sel,\n output reg       calib_in_common,\n output reg [HIGHEST_BANK-1:0] calib_zero_inputs,\n   output reg [HIGHEST_BANK-1:0]      calib_zero_ctrl,\n   output                             phy_if_empty_def,\n   output reg                         phy_if_reset,\n\n   \n   input                              pi_phaselocked,\n   input                              pi_phase_locked_all,\n   input                              pi_found_dqs,\n   input                              pi_dqs_found_all,\n   input [HIGHEST_LANE-1:0]           pi_dqs_found_lanes,\n   input [5:0]                        pi_counter_read_val,\n   \n   output [HIGHEST_BANK-1:0]          pi_rst_stg1_cal,\n   output                             pi_en_stg2_f,\n   output                             pi_stg2_f_incdec,\n   output                             pi_stg2_load,\n   output [5:0]                       pi_stg2_reg_l,\n   \n   output                             idelay_ce,\n   output                             idelay_inc,\n   output                             idelay_ld,\n   \n output [2:0]       po_sel_stg2stg3 ,\n output [2:0]       po_stg2_c_incdec ,\n output [2:0]       po_en_stg2_c ,\n output [2:0]       po_stg2_f_incdec ,\n output [2:0]       po_en_stg2_f ,\n   output                             po_counter_load_en,\n   input [8:0]                        po_counter_read_val,\n   \n   input                              phy_if_empty,\n   input [4:0]                        idelaye2_init_val,\n   input [5:0]                        oclkdelay_init_val,\n\n   input                              tg_err,\n   output                             rst_tg_mc,\n   \n   output [2*nCK_PER_CLK*DQ_WIDTH-1:0]phy_wrdata,\n   \n   output [5*RANKS*DQ_WIDTH-1:0]      dlyval_dq,\n   \n   \n   \n   input[2*nCK_PER_CLK*DQ_WIDTH-1:0]  phy_rddata,\n   \n   output [6*RANKS-1:0]               calib_rd_data_offset_0,\n   output [6*RANKS-1:0]               calib_rd_data_offset_1,\n   output [6*RANKS-1:0]               calib_rd_data_offset_2,\n   output                             phy_rddata_valid,\n   output                             calib_writes,\n   (* max_fanout = 50 *) output reg   init_calib_complete,\n   output                             init_wrcal_complete,\n   output                             pi_phase_locked_err,\n   output                             pi_dqsfound_err,\n   output                             wrcal_err,\n   input                              pd_out,\n  \n  \n   \n   output                             psen,\n   output                             psincdec,\n   input                              psdone,\n   input                              poc_sample_pd,\n\n   \n   output reg                         calib_tap_req,\n   input [6:0]                        calib_tap_addr,\n   input                              calib_tap_load,\n   input [7:0]                        calib_tap_val,\n   input                              calib_tap_load_done,\n\n   \n   output                             dbg_pi_phaselock_start,\n   output                             dbg_pi_dqsfound_start,\n   output                             dbg_pi_dqsfound_done,\n   output                             dbg_wrcal_start,\n   output                             dbg_wrcal_done,\n   output                             dbg_wrlvl_start,\n   output                             dbg_wrlvl_done,\n   output                             dbg_wrlvl_err,\n   output [6*DQS_WIDTH-1:0]           dbg_wrlvl_fine_tap_cnt,\n   output [3*DQS_WIDTH-1:0]           dbg_wrlvl_coarse_tap_cnt,\n   output [255:0]                     dbg_phy_wrlvl,\n   output [5:0]                       dbg_tap_cnt_during_wrlvl,\n   output                             dbg_wl_edge_detect_valid,\n   output [DQS_WIDTH-1:0]             dbg_rd_data_edge_detect,\n\n   \n   output [6*DQS_WIDTH-1:0]           dbg_final_po_fine_tap_cnt,\n   output [3*DQS_WIDTH-1:0]           dbg_final_po_coarse_tap_cnt,\n   output [99:0]                      dbg_phy_wrcal,\n\n   \n   output [1:0]                       dbg_rdlvl_start,\n   output [1:0]                       dbg_rdlvl_done,\n   output [1:0]                       dbg_rdlvl_err,\n   output [6*DQS_WIDTH*RANKS-1:0]     dbg_cpt_first_edge_cnt,\n   output [6*DQS_WIDTH*RANKS-1:0]     dbg_cpt_second_edge_cnt,\n   output [6*DQS_WIDTH*RANKS-1:0]     dbg_cpt_tap_cnt,\n   output [5*DQS_WIDTH*RANKS-1:0]     dbg_dq_idelay_tap_cnt,\n\n   \n   input  [11:0]                      device_temp,\n   input                              tempmon_sample_en,\n   input                              dbg_sel_pi_incdec,\n   input                              dbg_sel_po_incdec,\n   input [DQS_CNT_WIDTH:0]            dbg_byte_sel,\n   input                              dbg_pi_f_inc,\n   input                              dbg_pi_f_dec,\n   input                              dbg_po_f_inc,\n   input                              dbg_po_f_stg23_sel,\n   input                              dbg_po_f_dec,\n   input                              dbg_idel_up_all,\n   input                              dbg_idel_down_all,\n   input                              dbg_idel_up_cpt,\n   input                              dbg_idel_down_cpt,\n   input [DQS_CNT_WIDTH-1:0]          dbg_sel_idel_cpt,\n   input                              dbg_sel_all_idel_cpt,\n   output [255:0]                     dbg_phy_rdlvl, \n   output [255:0]                     dbg_calib_top,   \n   output                             dbg_oclkdelay_calib_start,\n   output                             dbg_oclkdelay_calib_done,\n   output [255:0]                     dbg_phy_oclkdelay_cal,\n   output [DRAM_WIDTH*16 -1:0]        dbg_oclkdelay_rd_data,\n   output [255:0]                     dbg_phy_init,\n   output [255:0]                     dbg_prbs_rdlvl,\n   output [255:0]                     dbg_dqs_found_cal,\n   output [1023:0]                    dbg_poc,\n\n   output [6*DQS_WIDTH*RANKS-1:0] prbs_final_dqs_tap_cnt_r,\n   output [6*DQS_WIDTH*RANKS-1:0] dbg_prbs_first_edge_taps,\n   output [6*DQS_WIDTH*RANKS-1:0] dbg_prbs_second_edge_taps,\n   output reg [DQS_CNT_WIDTH:0]   byte_sel_cnt,\n   output [DRAM_WIDTH-1:0]        fine_delay_incdec_pb,  \n   output                         fine_delay_sel\n   );\n\n   function integer clogb2 (input integer size);\n    begin\n      size = size - 1;\n      for (clogb2=1; size>1; clogb2=clogb2+1)\n        size = size >> 1;\n    end\n   endfunction\n\n\n\n\n\n\n\n\n  localparam nSLOTS  = 1 + (|SLOT_1_CONFIG ? 1 : 0);\n\n  localparam OCAL_EN = ((SIM_CAL_OPTION == \"FAST_CAL\") || (tCK >= 2500) || (SKIP_CALIB == \"TRUE\")) ? \"OFF\" : \"ON\"; \n\n  \n  \n  \n  localparam DQS_FOUND_N_CTL_LANES = (DRAM_TYPE == \"DDR3\") ? N_CTL_LANES : 1;\n\n  localparam DQSFOUND_CAL    = (BANK_TYPE == \"HR_IO\" || BANK_TYPE == \"HRL_IO\" || (BANK_TYPE == \"HPL_IO\" && tCK >= 2500)) ? \"LEFT\" : \"RIGHT\"; \n\n  localparam FIXED_VICTIM  = (SIM_CAL_OPTION == \"NONE\") ? \"FALSE\" : \"TRUE\";\n  localparam VCCO_PAT_EN   = 1;  \n  localparam VCCAUX_PAT_EN = 1;  \n  localparam ISI_PAT_EN    = 1;  \n\n  \n  \n\n  \n  localparam BYPASS_COMPLEX_RDLVL = ((tCK > 2500) || (SKIP_CALIB == \"TRUE\")) ? \"TRUE\": \"FALSE\"; \n  localparam BYPASS_COMPLEX_OCAL = \"TRUE\";\n  \n\n  \n  \n  localparam REFRESH_TIMER = (8*tREFI/(tCK*nCK_PER_CLK)) - 270;\n\n  localparam REFRESH_TIMER_WIDTH = clogb2(REFRESH_TIMER);\n\n  wire [2*8*nCK_PER_CLK-1:0]          prbs_seed;\n  \n  wire [8*DQ_WIDTH-1:0]               prbs_out;\n  wire [7:0]                          prbs_rise0;\n  wire [7:0]                          prbs_fall0;\n  wire [7:0]                          prbs_rise1;\n  wire [7:0]                          prbs_fall1;\n  wire [7:0]                          prbs_rise2;\n  wire [7:0]                          prbs_fall2;\n  wire [7:0]                          prbs_rise3;\n  wire [7:0]                          prbs_fall3;\n  \n  wire [2*nCK_PER_CLK*DQ_WIDTH-1:0]   prbs_o;\n  wire                                dqsfound_retry;\n  wire                                dqsfound_retry_done;\n  wire                                phy_rddata_en;\n  wire                                prech_done;\n  wire                                rdlvl_stg1_done;\n  reg                                 rdlvl_stg1_done_r1;\n  wire                                pi_dqs_found_done;\n  wire                                rdlvl_stg1_err;\n  wire                                pi_dqs_found_err;\n  wire                                wrcal_pat_resume;\n  wire                                wrcal_resume_w;\n  wire                                rdlvl_prech_req;\n  wire                                rdlvl_last_byte_done;\n  wire                                rdlvl_stg1_start;\n  wire                                rdlvl_stg1_rank_done;\n  wire                                rdlvl_assrt_common;\n  wire                                pi_dqs_found_start;\n  wire                                pi_dqs_found_rank_done;\n  wire                                wl_sm_start;\n  wire                                wrcal_start;\n  wire                                wrcal_rd_wait;\n  wire                                wrcal_prech_req;\n  wire                                wrcal_pat_err;\n  wire                                wrcal_done;\n  wire                                wrlvl_done;\n  wire                                wrlvl_err;\n  wire                                wrlvl_start;\n  wire                                ck_addr_cmd_delay_done;\n  wire                                po_ck_addr_cmd_delay_done;\n  wire                                pi_calib_done;\n  wire                                detect_pi_found_dqs;\n  wire [5:0]                          rd_data_offset_0;\n  wire [5:0]                          rd_data_offset_1;\n  wire [5:0]                          rd_data_offset_2;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_0;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_1;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_2;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_mc_0;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_mc_1;\n  wire [6*RANKS-1:0]                  rd_data_offset_ranks_mc_2;\n  wire                                cmd_po_stg2_f_incdec;\n  wire                                cmd_po_stg2_incdec_ddr2_c;\n  wire                                cmd_po_en_stg2_f;\n  wire                                cmd_po_en_stg2_ddr2_c;\n  wire                                cmd_po_stg2_c_incdec;\n  wire                                cmd_po_en_stg2_c;\n  wire                                po_stg2_ddr2_incdec;\n  wire                                po_en_stg2_ddr2;\n  wire                                dqs_po_stg2_f_incdec;\n  wire                                dqs_po_en_stg2_f;\n  wire                                dqs_wl_po_stg2_c_incdec;\n  wire                                wrcal_po_stg2_c_incdec;\n  wire                                dqs_wl_po_en_stg2_c;\n  wire                                wrcal_po_en_stg2_c;\n  wire [N_CTL_LANES-1:0]              ctl_lane_cnt;\n  reg [N_CTL_LANES-1:0]               ctl_lane_sel;\n  wire [DQS_CNT_WIDTH:0]              po_stg2_wrcal_cnt;\n  wire [DQS_CNT_WIDTH:0]              po_stg2_wl_cnt;\n  wire [DQS_CNT_WIDTH:0]              po_stg2_ddr2_cnt;\n  wire [8:0]                          dqs_wl_po_stg2_reg_l;\n  wire                                dqs_wl_po_stg2_load;\n  wire [8:0]                          dqs_po_stg2_reg_l;\n  wire                                dqs_po_stg2_load;\n  wire                                dqs_po_dec_done;\n  wire                                pi_fine_dly_dec_done;\n  wire                                rdlvl_pi_stg2_f_incdec;\n  wire                                rdlvl_pi_stg2_f_en;\n  wire [DQS_CNT_WIDTH:0]              pi_stg2_rdlvl_cnt;\n  \n  wire [3*DQS_WIDTH-1:0]              wl_po_coarse_cnt;\n  wire [6*DQS_WIDTH-1:0]              wl_po_fine_cnt;\n  wire                                phase_locked_err;\n  wire                                phy_ctl_rdy_dly;\n  wire                                idelay_ce_int;\n  wire                                idelay_inc_int;\n  reg                                 idelay_ce_r1;\n  reg                                 idelay_ce_r2;\n  reg                                 idelay_inc_r1;\n reg        idelay_inc_r2 ;\n  reg                                 po_dly_req_r;\n  wire                                wrcal_read_req;\n  wire                                wrcal_act_req;\n  wire                                temp_wrcal_done;\n  wire                                tg_timer_done;\n  wire                                no_rst_tg_mc;\n  wire                                calib_complete;\n  reg                                 reset_if_r1;\n  reg                                 reset_if_r2;\n  reg                                 reset_if_r3;\n  reg                                 reset_if_r4;\n  reg                                 reset_if_r5;\n  reg                                 reset_if_r6;\n  reg                                 reset_if_r7;\n  reg                                 reset_if_r8;\n  reg                                 reset_if_r9;\n  reg                                 reset_if;\n  wire                                phy_if_reset_w;\n  wire                                pi_phaselock_start;\n\n  reg                                 dbg_pi_f_inc_r;\n  reg                                 dbg_pi_f_en_r;\n  reg                                 dbg_sel_pi_incdec_r;\n\n  reg                                 dbg_po_f_inc_r;\n  reg                                 dbg_po_f_stg23_sel_r;\n  reg                                 dbg_po_f_en_r;\n  reg                                 dbg_sel_po_incdec_r;\n\n  reg                                 tempmon_pi_f_inc_r;\n  reg                                 tempmon_pi_f_en_r;\n  reg                                 tempmon_sel_pi_incdec_r;\n\n  reg                                 ck_addr_cmd_delay_done_r1;\n  reg                                 ck_addr_cmd_delay_done_r2;\n  reg                                 ck_addr_cmd_delay_done_r3;\n  reg                                 ck_addr_cmd_delay_done_r4;\n  reg                                 ck_addr_cmd_delay_done_r5;\n  reg                                 ck_addr_cmd_delay_done_r6;\n\n  wire                                oclk_prech_req;\n  wire                                oclk_calib_resume;\n  wire [DQS_CNT_WIDTH:0]              oclkdelay_calib_cnt;\n  wire [DQS_CNT_WIDTH:0]              complex_oclkdelay_calib_cnt;\n  wire                                oclkdelay_calib_start;\n  wire                                oclkdelay_calib_done;\n  wire                                complex_oclk_prech_req;\n  wire                                complex_oclk_calib_resume;\n  wire                                complex_oclkdelay_calib_start;\n  wire                                complex_oclkdelay_calib_done;\n  wire                                complex_ocal_num_samples_inc;\n  wire                                complex_ocal_num_samples_done_r;\n  wire [2:0]                          complex_ocal_rd_victim_sel;\n  wire                                complex_ocal_ref_req;\n  wire                                complex_ocal_ref_done;\n  wire [6*DQS_WIDTH-1:0]              oclkdelay_left_edge_val;\n  wire [6*DQS_WIDTH-1:0]              oclkdelay_right_edge_val;\n\n  wire                                wrlvl_final;\n  wire                                complex_wrlvl_final;\n  reg                                 wrlvl_final_mux;\n  wire                                wrlvl_final_if_rst;\n  wire                                wrlvl_byte_redo;\n  wire                                wrlvl_byte_done;\n  wire                                early1_data;\n  wire                                early2_data;\n  wire                                po_stg23_sel;\n  wire                                po_stg23_incdec;\n  wire                                po_en_stg23;\n  wire                                complex_po_stg23_sel;\n  wire                                complex_po_stg23_incdec;\n  wire                                complex_po_en_stg23;\n  wire                                mpr_rdlvl_done;\n  wire                                mpr_rdlvl_start;\n  wire                                mpr_last_byte_done;\n  wire                                mpr_rnk_done;\n  wire                                mpr_end_if_reset;\n  wire                                mpr_rdlvl_err;\n  wire                                rdlvl_err;\n  wire                                prbs_rdlvl_start;\n  wire                                prbs_rdlvl_done;\n  wire                                prbs_rdlvl_done_complex;\n  reg                                 prbs_rdlvl_done_r1;\n  wire                                prbs_last_byte_done;\n  wire                                prbs_rdlvl_prech_req;\n  wire                                prbs_pi_stg2_f_incdec;\n  wire                                prbs_pi_stg2_f_en;\n  wire                                complex_sample_cnt_inc;\n  wire                                complex_sample_cnt_inc_ocal;\n  wire [DQS_CNT_WIDTH:0]              pi_stg2_prbs_rdlvl_cnt;\n  wire                                prbs_gen_clk_en;\n  wire                                prbs_gen_oclk_clk_en;\n  wire                                rd_data_offset_cal_done;\n  wire                                fine_adjust_done;\n  wire [N_CTL_LANES-1:0]              fine_adjust_lane_cnt;\n  wire                                ck_po_stg2_f_indec;\n  wire                                ck_po_stg2_f_en;\n  wire                                dqs_found_prech_req;\n  wire                                tempmon_pi_f_inc;\n  wire                                tempmon_pi_f_dec;\n  wire                                tempmon_sel_pi_incdec;\n  wire                                wrcal_sanity_chk;\n  wire                                wrcal_sanity_chk_done;\n  wire                                wrlvl_done_w;\n  wire                                wrlvl_rank_done;\n  wire                                done_dqs_tap_inc;\n  wire [2:0]                          rd_victim_sel;\n  wire [2:0]                          victim_sel;\n  wire [DQS_CNT_WIDTH:0]              victim_byte_cnt;\n  wire                                complex_wr_done;\n  wire                                complex_victim_inc;\n\n  wire                                reset_rd_addr;\n  wire                                complex_ocal_reset_rd_addr;\n\n  wire                                oclkdelay_center_calib_start;\n  wire                                poc_error;\n\n  wire                                prbs_ignore_first_byte;\n  wire                                prbs_ignore_last_bytes;\n\n  \n \n\n   \n \n\n   \n \n \n \n\n  \n  wire                                oclk_center_write_resume;\n  wire                                oclkdelay_center_calib_done;\n\n  \n  wire                                lim2init_write_request;\n  wire                                lim_done;\n\n  \n  wire                                complex_oclkdelay_calib_start_w;\n  wire                                complex_oclkdelay_calib_done_w;\n  wire [2:0]                          complex_ocal_rd_victim_sel_w;\n  wire                                complex_wrlvl_final_w;\n\n  wire [255:0]                        dbg_ocd_lim;\n\n   \n  \n  \n  \n  \n  \n  \n  \n  \n\n \n\n \n wire                                 rdlvl_pi_incdec;\n wire                                 complex_act_start;\n wire                                 complex_pi_incdec_done;\n wire                                 num_samples_done_r;\n wire                                 complex_init_pi_dec_done;\n\n  wire                                calib_tap_inc_start;\n  wire                                calib_tap_inc_done;\n  wire                                calib_tap_end_if_reset;\n  wire [5:0]                          calib_tap_inc_byte_cnt;\n  wire                                calib_po_f_en;\n  wire                                calib_po_f_incdec;\n  wire                                calib_po_sel_stg2stg3;\n  wire                                calib_po_c_en;\n  wire                                calib_po_c_inc;\n  wire                                calib_pi_f_en;\n  wire                                calib_pi_f_incdec;\n  wire                                calib_idelay_ce;\n  wire                                calib_idelay_inc;\n  wire                                coarse_dec_err;\n  reg                                 skip_cal_tempmon_samp_en;\n  wire                                tempmon_done_skip;\n\n  wire                                skip_cal_po_pi_dec_done;\n  reg [6*DQS_WIDTH-1:0]               calib_po_stage2_tap_cnt;\n  reg [6*DQS_WIDTH-1:0]               calib_po_stage3_tap_cnt;\n  reg [3*DQS_WIDTH-1:0]               calib_po_coarse_tap_cnt;\n  reg [6*DQS_WIDTH-1:0]               calib_pi_stage2_tap_cnt;\n  reg [5*DQS_WIDTH-1:0]               calib_idelay_tap_cnt;\n  reg [11:0]                          calib_device_temp;\n  wire [127:0]                        dbg_skip_cal;\n\n  \n  \n  \n  \n  initial\n  begin\n    if (RANKS == 0) begin\n      $display (\"Error: Invalid RANKS parameter. Must be 1 or greater\");\n      $finish;\n    end\n    if (phy_ctl_full == 1'b1) begin\n      $display (\"Error: Incorrect phy_ctl_full input value in 2:1 or 4:1 mode\");\n      $finish;\n    end\n  end\n  \n\n  \n  \n  \n  reg if_empty_reg;\n  reg pi_stg2_en_reg;\n\n  assign prbs_rdlvl_done = (SIM_CAL_OPTION == \"FAST_CAL\")? rdlvl_stg1_done : prbs_rdlvl_done_complex;\n\n  assign dbg_pi_phaselock_start = pi_phaselock_start;\n  assign dbg_pi_dqsfound_start  = pi_dqs_found_start;\n  assign dbg_pi_dqsfound_done   = pi_dqs_found_done;\n  assign dbg_wrcal_start        = wrcal_start;\n  assign dbg_wrcal_done         = wrcal_done;\n\n  \n  \n  assign dbg_calib_top[0] = pi_stg2_en_reg ;\n  assign dbg_calib_top[1] = if_empty_reg ;\n  assign dbg_calib_top[3]     = coarse_dec_err;\n  assign dbg_calib_top[4]     = calib_tap_inc_start;\n  assign dbg_calib_top[5]     = calib_tap_inc_done;\n  assign dbg_calib_top[6+:63] = dbg_skip_cal;\n\n  always @ (posedge clk) begin\n    if_empty_reg <= #TCQ  phy_if_empty;\n    pi_stg2_en_reg <= #TCQ pi_en_stg2_f;\n  end\n\n  \n  assign dbg_wrlvl_start           = wrlvl_start;\n  assign dbg_wrlvl_done            = wrlvl_done;\n  assign dbg_wrlvl_err             = wrlvl_err;\n\n  \n  assign dbg_rdlvl_start           = {mpr_rdlvl_start, rdlvl_stg1_start};\n  assign dbg_rdlvl_done            = {mpr_rdlvl_done, rdlvl_stg1_done};\n  assign dbg_rdlvl_err             = {mpr_rdlvl_err, rdlvl_err};\n\n  assign dbg_oclkdelay_calib_done  = oclkdelay_calib_done;\n  assign dbg_oclkdelay_calib_start = oclkdelay_calib_start;\n\n  \n  \n  \n\n  assign wrcal_resume_w = (WRLVL == \"ON\") ? wrcal_pat_resume : 1'b0;\n  assign wrlvl_done_w   = (WRLVL == \"ON\") ? wrlvl_done : 1'b1;\n  assign ck_addr_cmd_delay_done = (WRLVL == \"ON\") ? po_ck_addr_cmd_delay_done :\n                                                    (po_ck_addr_cmd_delay_done\n                                                    && pi_fine_dly_dec_done) ;\n\ngenerate\n   if((WRLVL == \"ON\") && (BYPASS_COMPLEX_OCAL==\"FALSE\")) begin: complex_oclk_calib\n    assign complex_oclkdelay_calib_start_w = complex_oclkdelay_calib_start;\n    assign complex_oclkdelay_calib_done_w  = complex_oclkdelay_calib_done;\n    assign complex_ocal_rd_victim_sel_w    = complex_ocal_rd_victim_sel;\n    assign complex_wrlvl_final_w           = complex_wrlvl_final;\n   end else begin: bypass_complex_ocal\n    assign complex_oclkdelay_calib_start_w = 1'b0;\n    assign complex_oclkdelay_calib_done_w  = prbs_rdlvl_done;\n    assign complex_ocal_rd_victim_sel_w    = 'd0;\n    assign complex_wrlvl_final_w           = 1'b0;\n   end\nendgenerate\n\n\n  generate\n  genvar i;\n    for (i = 0; i <= 2; i = i+1) begin : bankwise_signal\n\n      assign po_sel_stg2stg3[i]  = ((ck_addr_cmd_delay_done && ~oclkdelay_calib_done && mpr_rdlvl_done) ? po_stg23_sel :\n                                   (complex_oclkdelay_calib_start_w&&~complex_oclkdelay_calib_done_w? po_stg23_sel : 1'b0 )\n                                  \n                                   ) || calib_po_sel_stg2stg3 || dbg_po_f_stg23_sel_r;\n\n      assign po_stg2_c_incdec[i] =  cmd_po_stg2_c_incdec ||\n                                    cmd_po_stg2_incdec_ddr2_c ||\n                                    calib_po_c_inc ||\n                                    dqs_wl_po_stg2_c_incdec;\n\n      assign po_en_stg2_c[i]     = cmd_po_en_stg2_c ||\n                                   cmd_po_en_stg2_ddr2_c ||\n                                   calib_po_c_en ||\n                                   dqs_wl_po_en_stg2_c;\n\n      assign po_stg2_f_incdec[i] = dqs_po_stg2_f_incdec ||\n                                   cmd_po_stg2_f_incdec ||\n                                   ck_po_stg2_f_indec ||\n                                   po_stg23_incdec ||\n                                   calib_po_f_incdec ||\n                                  \n                                  \n                                   dbg_po_f_inc_r;\n\n      assign po_en_stg2_f[i]     = dqs_po_en_stg2_f ||\n                                   cmd_po_en_stg2_f ||\n                                   ck_po_stg2_f_en ||\n                                   po_en_stg23 ||\n                                   calib_po_f_en ||\n                                  \n                                  \n                                   dbg_po_f_en_r;\n\n    end\n  endgenerate\n\n  assign pi_stg2_f_incdec = (calib_pi_f_incdec | dbg_pi_f_inc_r | rdlvl_pi_stg2_f_incdec | prbs_pi_stg2_f_incdec | tempmon_pi_f_inc_r);\n  assign pi_en_stg2_f     = (calib_pi_f_en | dbg_pi_f_en_r | rdlvl_pi_stg2_f_en | prbs_pi_stg2_f_en | tempmon_pi_f_en_r);\n\n  assign idelay_ce  = (idelay_ce_r2 | calib_idelay_ce);\n  assign idelay_inc = (idelay_inc_r2 | calib_idelay_inc);\n\n  assign po_counter_load_en = 1'b0;\n\n  assign complex_oclkdelay_calib_cnt = oclkdelay_calib_cnt;\n  assign complex_oclk_calib_resume   = oclk_calib_resume;\n  assign complex_ocal_ref_req        = oclk_prech_req;\n\n\n\n  always @(posedge clk) begin\n    if (SKIP_CALIB == \"FALSE\")\n    init_calib_complete <= calib_complete;\n    else\n      init_calib_complete <= tempmon_done_skip;\n  end\n\n  assign calib_rd_data_offset_0 = rd_data_offset_ranks_mc_0;\n  assign calib_rd_data_offset_1 = rd_data_offset_ranks_mc_1;\n  assign calib_rd_data_offset_2 = rd_data_offset_ranks_mc_2;\n\n  \n  \n  \n\n  assign pi_phase_locked_err = phase_locked_err;\n  assign pi_dqsfound_err     = pi_dqs_found_err;\n  assign wrcal_err           = wrcal_pat_err;\n  assign rst_tg_mc           = 1'b0;\n\n\n  always @ (posedge clk)\n    wrlvl_final_mux <= #TCQ complex_oclkdelay_calib_start_w? complex_wrlvl_final_w: wrlvl_final;\n\n\n  always @(posedge clk)\n    phy_if_reset <= #TCQ (phy_if_reset_w | mpr_end_if_reset |\n                          reset_if | wrlvl_final_if_rst | calib_tap_end_if_reset);\n\n  \n  \n  \n\n  always @(posedge clk) begin\n    if (rst) begin\n      dbg_pi_f_inc_r      <= #TCQ 1'b0;\n      dbg_pi_f_en_r       <= #TCQ 1'b0;\n      dbg_sel_pi_incdec_r <= #TCQ 1'b0;\n    end else begin\n      dbg_pi_f_inc_r      <= #TCQ dbg_pi_f_inc;\n      dbg_pi_f_en_r       <= #TCQ (dbg_pi_f_inc | dbg_pi_f_dec);\n      dbg_sel_pi_incdec_r <= #TCQ dbg_sel_pi_incdec;\n    end\n  end\n\n  \n  \n  \n\n  always @(posedge clk) begin\n    if (rst) begin\n      dbg_po_f_inc_r      <= #TCQ 1'b0;\n      dbg_po_f_stg23_sel_r<= #TCQ 1'b0;\n      dbg_po_f_en_r       <= #TCQ 1'b0;\n      dbg_sel_po_incdec_r <= #TCQ 1'b0;\n    end else begin\n      dbg_po_f_inc_r      <= #TCQ dbg_po_f_inc;\n      dbg_po_f_stg23_sel_r<= #TCQ dbg_po_f_stg23_sel;\n      dbg_po_f_en_r       <= #TCQ (dbg_po_f_inc | dbg_po_f_dec);\n      dbg_sel_po_incdec_r <= #TCQ dbg_sel_po_incdec;\n    end\n  end\n\n  \n  \n  \n\n  always @(posedge clk) begin\n    if (rst) begin\n      tempmon_pi_f_inc_r      <= #TCQ 1'b0;\n      tempmon_pi_f_en_r       <= #TCQ 1'b0;\n      tempmon_sel_pi_incdec_r <= #TCQ 1'b0;\n    end else begin\n      tempmon_pi_f_inc_r      <= #TCQ tempmon_pi_f_inc;\n      tempmon_pi_f_en_r       <= #TCQ (tempmon_pi_f_inc | tempmon_pi_f_dec);\n      tempmon_sel_pi_incdec_r <= #TCQ tempmon_sel_pi_incdec;\n    end\n  end\n\n  \n  \n  \n\n  \n  \n  always @(posedge clk) begin\n    ck_addr_cmd_delay_done_r1 <= #TCQ ck_addr_cmd_delay_done;\n    ck_addr_cmd_delay_done_r2 <= #TCQ ck_addr_cmd_delay_done_r1;\n    ck_addr_cmd_delay_done_r3 <= #TCQ ck_addr_cmd_delay_done_r2;\n    ck_addr_cmd_delay_done_r4 <= #TCQ ck_addr_cmd_delay_done_r3;\n    ck_addr_cmd_delay_done_r5 <= #TCQ ck_addr_cmd_delay_done_r4;\n    ck_addr_cmd_delay_done_r6 <= #TCQ ck_addr_cmd_delay_done_r5;\n  end\n\n\n\n\n  \n  \n  \n  \n  \ngenerate\n  if (SKIP_CALIB == \"TRUE\") begin: gen_byte_sel_skip_calib\n    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~skip_cal_po_pi_dec_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~calib_tap_inc_done) begin\n        byte_sel_cnt    <= #TCQ calib_tap_inc_byte_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end\n  end else if (tCK >= 2500) begin: gen_byte_sel_div2  \n\n    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done)) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~wrlvl_done_w) begin\n        if (SIM_CAL_OPTION != \"FAST_CAL\") begin\n          byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end else begin\n          \n          \n          if (!phy_ctl_rdy_dly) begin\n            byte_sel_cnt    <= #TCQ 'd0;\n            calib_in_common <= #TCQ 1'b0;\n          end else begin\n            byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n            calib_in_common <= #TCQ 1'b1;\n          end\n        end\n      end else if (~mpr_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~oclkdelay_calib_done) begin\n        byte_sel_cnt    <= #TCQ oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~rdlvl_stg1_done && pi_calib_done) begin\n        if ((SIM_CAL_OPTION == \"FAST_CAL\") && rdlvl_assrt_common) begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~prbs_rdlvl_done && rdlvl_stg1_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_prbs_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~complex_oclkdelay_calib_done_w && prbs_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ complex_oclkdelay_calib_cnt;\n            calib_in_common <= #TCQ 1'b0;\n      end else if ((~wrcal_done) && (DRAM_TYPE == \"DDR3\")) begin\n        byte_sel_cnt    <= #TCQ po_stg2_wrcal_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end\n  end else begin: gen_byte_sel_div1\n\n    always @(posedge clk) begin\n      if (rst) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done)) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done && (WRLVL !=\"ON\")) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        ctl_lane_sel    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~ck_addr_cmd_delay_done) begin\n        ctl_lane_sel    <= #TCQ ctl_lane_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~fine_adjust_done && rd_data_offset_cal_done) begin\n        if ((|pi_rst_stg1_cal) || (DRAM_TYPE == \"DDR2\")) begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ 'd0;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ 'd0;\n          ctl_lane_sel    <= #TCQ fine_adjust_lane_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~pi_calib_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~pi_dqs_found_done) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end else if (~wrlvl_done_w) begin\n        if (SIM_CAL_OPTION != \"FAST_CAL\") begin\n          byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end else begin\n          \n          \n          if (!phy_ctl_rdy_dly) begin\n            byte_sel_cnt    <= #TCQ 'd0;\n            calib_in_common <= #TCQ 1'b0;\n          end else begin\n            byte_sel_cnt    <= #TCQ po_stg2_wl_cnt;\n            calib_in_common <= #TCQ 1'b1;\n          end\n        end\n      end else if (~mpr_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~oclkdelay_calib_done) begin\n        byte_sel_cnt    <= #TCQ oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if ((~wrcal_done)&& (DRAM_TYPE == \"DDR3\")) begin\n        byte_sel_cnt    <= #TCQ po_stg2_wrcal_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~rdlvl_stg1_done && pi_calib_done) begin\n        if ((SIM_CAL_OPTION == \"FAST_CAL\") && rdlvl_assrt_common) begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b1;\n        end else begin\n          byte_sel_cnt    <= #TCQ pi_stg2_rdlvl_cnt;\n          calib_in_common <= #TCQ 1'b0;\n        end\n      end else if (~prbs_rdlvl_done && rdlvl_stg1_done) begin\n        byte_sel_cnt    <= #TCQ pi_stg2_prbs_rdlvl_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (~complex_oclkdelay_calib_done_w && prbs_rdlvl_done) begin\n        byte_sel_cnt    <= #TCQ complex_oclkdelay_calib_cnt;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (dbg_sel_pi_incdec_r | dbg_sel_po_incdec_r) begin\n        byte_sel_cnt    <= #TCQ dbg_byte_sel;\n        calib_in_common <= #TCQ 1'b0;\n      end else if (tempmon_sel_pi_incdec) begin\n        byte_sel_cnt    <= #TCQ 'd0;\n        calib_in_common <= #TCQ 1'b1;\n      end\n    end\n\n  end\nendgenerate\n\n  \n  always @(posedge clk) begin\n    if (rst || (calib_complete && ~ (dbg_sel_pi_incdec_r|dbg_sel_po_incdec_r|tempmon_sel_pi_incdec) )) begin\n      calib_sel         <= #TCQ 6'b000100;\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~(dqs_po_dec_done && pi_fine_dly_dec_done) || ~skip_cal_po_pi_dec_done) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      if (~dqs_po_dec_done && (WRLVL != \"ON\"))\n      \n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b0}};\n      else\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~ck_addr_cmd_delay_done || (~fine_adjust_done && rd_data_offset_cal_done)) begin\n      if(WRLVL ==\"ON\") begin\n        calib_sel[2]   <= #TCQ 1'b0;\n        calib_sel[1:0] <= #TCQ CTL_BYTE_LANE[(ctl_lane_sel*2)+:2];\n        calib_sel[5:3] <= #TCQ CTL_BANK;\n        if (|pi_rst_stg1_cal) begin\n          calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n        end else begin\n          calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n          calib_zero_inputs[1*CTL_BANK] <= #TCQ 1'b0;\n        end\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n      end else begin \n        calib_sel[2]   <= #TCQ 1'b0;\n        calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n        calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n        if(~ck_addr_cmd_delay_done)\n        calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n        else\n          calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b0}};\n      end \n    end else if ((~wrlvl_done_w) && (SIM_CAL_OPTION == \"FAST_CAL\")) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (~rdlvl_stg1_done && (SIM_CAL_OPTION == \"FAST_CAL\") &&\n                 rdlvl_assrt_common) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else if (tempmon_sel_pi_incdec) begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n    end else begin\n      calib_sel[2]   <= #TCQ 1'b0;\n      calib_sel[1:0] <= #TCQ DQS_BYTE_MAP[(byte_sel_cnt*8)+:2];\n      calib_sel[5:3] <= #TCQ DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3];\n      calib_zero_ctrl   <= #TCQ {HIGHEST_BANK{1'b1}};\n      if (~calib_in_common) begin\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b1}};\n        calib_zero_inputs[(1*DQS_BYTE_MAP[((byte_sel_cnt*8)+4)+:3])] <= #TCQ 1'b0;\n      end else\n        calib_zero_inputs <= #TCQ {HIGHEST_BANK{1'b0}};\n    end\n  end\n  \n  \n  \n  \n  \n  \n  \n  always @(posedge clk) begin\n    rdlvl_stg1_done_r1  <= #TCQ rdlvl_stg1_done;\n    prbs_rdlvl_done_r1  <= #TCQ prbs_rdlvl_done;\n    reset_if_r1         <= #TCQ reset_if;\n    reset_if_r2         <= #TCQ reset_if_r1;\n    reset_if_r3         <= #TCQ reset_if_r2;\n    reset_if_r4         <= #TCQ reset_if_r3;\n    reset_if_r5         <= #TCQ reset_if_r4;\n    reset_if_r6         <= #TCQ reset_if_r5;\n    reset_if_r7         <= #TCQ reset_if_r6;\n    reset_if_r8         <= #TCQ reset_if_r7;\n    reset_if_r9         <= #TCQ reset_if_r8;\n  end\n\n  always @(posedge clk) begin\n    if (rst || reset_if_r9)\n      reset_if <= #TCQ 1'b0;\n    else if ((rdlvl_stg1_done && ~rdlvl_stg1_done_r1) ||\n             (prbs_rdlvl_done && ~prbs_rdlvl_done_r1))\n      reset_if <= #TCQ 1'b1;\n  end\n\n  assign phy_if_empty_def = 1'b0;\n\n  \n  \n  \n  \n  \n  always @(posedge clk) begin\n    if (rst) begin\n      idelay_ce_r1  <= #TCQ 1'b0;\n      idelay_ce_r2  <= #TCQ 1'b0;\n      idelay_inc_r1 <= #TCQ 1'b0;\n      idelay_inc_r2 <= #TCQ 1'b0;\n    end else begin\n      idelay_ce_r1  <= #TCQ idelay_ce_int;\n      idelay_ce_r2  <= #TCQ idelay_ce_r1;\n      idelay_inc_r1 <= #TCQ idelay_inc_int;\n      idelay_inc_r2 <= #TCQ idelay_inc_r1;\n    end\n  end\n\n  \n  \n  \n\n  assign init_wrcal_complete = 1'b0;\n\n  \n  \n  \n  \n\n  \n  assign prbs_seed = 64'h9966aa559966aa55;\n\n  \n  \n  \n  \n  mig_7series_v4_1_ddr_prbs_gen #\n    (\n     .TCQ           (TCQ),\n     .PRBS_WIDTH    (2*8*nCK_PER_CLK),\n     .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n     .DQ_WIDTH      (DQ_WIDTH),\n     .VCCO_PAT_EN   (VCCO_PAT_EN),\n     .VCCAUX_PAT_EN (VCCAUX_PAT_EN),\n     .ISI_PAT_EN    (ISI_PAT_EN),\n     .FIXED_VICTIM  (FIXED_VICTIM)\n    )\n    u_ddr_prbs_gen\n      (.prbs_ignore_first_byte (prbs_ignore_first_byte),\n       .prbs_ignore_last_bytes (prbs_ignore_last_bytes),\n       .clk_i              (clk),\n       .clk_en_i           (prbs_gen_clk_en | prbs_gen_oclk_clk_en),\n       .rst_i              (rst),\n       .prbs_o             (prbs_out),\n       .prbs_seed_i        (prbs_seed),\n       .phy_if_empty       (phy_if_empty),\n       .prbs_rdlvl_start   (prbs_rdlvl_start),\n       .prbs_rdlvl_done    (prbs_rdlvl_done),\n       .complex_wr_done    (complex_wr_done),\n       .victim_sel         (victim_sel),\n       .byte_cnt           (victim_byte_cnt),\n       .dbg_prbs_gen       (),\n       .reset_rd_addr      (reset_rd_addr | complex_ocal_reset_rd_addr)\n      );\n\n\n\n\n  generate\n    if (nCK_PER_CLK == 4) begin: gen_ck_per_clk4\n      assign prbs_o = prbs_out;\n      \n\n\n\n\n\n\n\n\n\n    end else begin :gen_ck_per_clk2\n      assign prbs_o = prbs_out[4*DQ_WIDTH-1:0];\n      \n\n\n\n\n    end\n  endgenerate\n\n\n  \n  \n  \n  \n\n  mig_7series_v4_1_ddr_phy_init #\n    (\n     .tCK             (tCK),\n     .DDR3_VDD_OP_VOLT (DDR3_VDD_OP_VOLT),\n     .TCQ             (TCQ),\n     .nCK_PER_CLK     (nCK_PER_CLK),\n     .CLK_PERIOD      (CLK_PERIOD),\n     .DRAM_TYPE       (DRAM_TYPE),\n     .PRBS_WIDTH      (PRBS_WIDTH),\n     .BANK_WIDTH      (BANK_WIDTH),\n     .CA_MIRROR       (CA_MIRROR),\n     .COL_WIDTH       (COL_WIDTH),\n     .nCS_PER_RANK    (nCS_PER_RANK),\n     .DQ_WIDTH        (DQ_WIDTH),\n     .DQS_WIDTH       (DQS_WIDTH),\n     .DQS_CNT_WIDTH   (DQS_CNT_WIDTH),\n     .ROW_WIDTH       (ROW_WIDTH),\n     .CS_WIDTH        (CS_WIDTH),\n     .RANKS           (RANKS),\n     .CKE_WIDTH       (CKE_WIDTH),\n     .CALIB_ROW_ADD   (CALIB_ROW_ADD),\n     .CALIB_COL_ADD   (CALIB_COL_ADD),\n     .CALIB_BA_ADD    (CALIB_BA_ADD),\n     .AL              (AL),\n     .BURST_MODE      (BURST_MODE),\n     .BURST_TYPE      (BURST_TYPE),\n     .nCL             (nCL),\n     .nCWL            (nCWL),\n     .tRFC            (tRFC),\n     .REFRESH_TIMER   (REFRESH_TIMER),\n     .REFRESH_TIMER_WIDTH (REFRESH_TIMER_WIDTH),\n     .OUTPUT_DRV      (OUTPUT_DRV),\n     .REG_CTRL        (REG_CTRL),\n     .ADDR_CMD_MODE   (ADDR_CMD_MODE),\n     .RTT_NOM         (RTT_NOM),\n     .RTT_WR          (RTT_WR),\n     .WRLVL           (WRLVL),\n     .USE_ODT_PORT    (USE_ODT_PORT),\n     .DDR2_DQSN_ENABLE(DDR2_DQSN_ENABLE),\n     .nSLOTS          (nSLOTS),\n     .SIM_INIT_OPTION (SIM_INIT_OPTION),\n     .SIM_CAL_OPTION  (SIM_CAL_OPTION),\n     .CKE_ODT_AUX     (CKE_ODT_AUX),\n     .PRE_REV3ES      (PRE_REV3ES),\n     .TEST_AL         (TEST_AL),\n     .FIXED_VICTIM    (FIXED_VICTIM),\n     .BYPASS_COMPLEX_OCAL(BYPASS_COMPLEX_OCAL),\n     .SKIP_CALIB      (SKIP_CALIB)\n     )\n    u_ddr_phy_init\n      (\n       .clk                   (clk),\n       .rst                   (rst),\n       .prbs_o                (prbs_o),\n       .ck_addr_cmd_delay_done(ck_addr_cmd_delay_done),\n       .delay_incdec_done     (ck_addr_cmd_delay_done),\n       .pi_phase_locked_all   (pi_phase_locked_all),\n       .pi_phaselock_start    (pi_phaselock_start),\n       .pi_phase_locked_err   (phase_locked_err),\n       .pi_calib_done         (pi_calib_done),\n       .phy_if_empty          (phy_if_empty),\n       .phy_ctl_ready         (phy_ctl_ready),\n       .phy_ctl_full          (phy_ctl_full),\n       .phy_cmd_full          (phy_cmd_full),\n       .phy_data_full         (phy_data_full),\n       .calib_ctl_wren        (calib_ctl_wren),\n       .calib_cmd_wren        (calib_cmd_wren),\n       .calib_wrdata_en       (calib_wrdata_en),\n       .calib_seq             (calib_seq),\n       .calib_aux_out         (calib_aux_out),\n       .calib_rank_cnt        (calib_rank_cnt),\n       .calib_cas_slot        (calib_cas_slot),\n       .calib_data_offset_0   (calib_data_offset_0),\n       .calib_data_offset_1   (calib_data_offset_1),\n       .calib_data_offset_2   (calib_data_offset_2),\n       .calib_cmd             (calib_cmd),\n       .calib_cke             (calib_cke),\n       .calib_odt             (calib_odt),\n       .write_calib           (write_calib),\n       .read_calib            (read_calib),\n       .wrlvl_done            (wrlvl_done),\n       .wrlvl_rank_done       (wrlvl_rank_done),\n       .wrlvl_byte_done       (wrlvl_byte_done),\n       .wrlvl_byte_redo       (wrlvl_byte_redo),\n       .wrlvl_final           (wrlvl_final_mux),\n       .wrlvl_final_if_rst    (wrlvl_final_if_rst),\n       .oclkdelay_calib_start (oclkdelay_calib_start),\n       .oclkdelay_calib_done  (oclkdelay_calib_done),\n       .oclk_prech_req        (oclk_prech_req),\n       .oclk_calib_resume     (oclk_calib_resume),\n       .lim_wr_req            (lim2init_write_request),\n       .lim_done              (lim_done),\n       .complex_oclkdelay_calib_start (complex_oclkdelay_calib_start),\n       .complex_oclkdelay_calib_done  (complex_oclkdelay_calib_done_w),\n       .complex_oclk_calib_resume     (complex_oclk_calib_resume),\n       .complex_oclkdelay_calib_cnt   (complex_oclkdelay_calib_cnt),\n       .complex_sample_cnt_inc_ocal   (complex_sample_cnt_inc_ocal),\n       .complex_ocal_num_samples_inc  (complex_ocal_num_samples_inc),\n       .complex_ocal_num_samples_done_r (complex_ocal_num_samples_done_r),\n       .complex_ocal_reset_rd_addr      (complex_ocal_reset_rd_addr),\n       .complex_ocal_ref_req            (complex_ocal_ref_req),\n       .complex_ocal_ref_done           (complex_ocal_ref_done),\n       .done_dqs_tap_inc      (done_dqs_tap_inc),\n       .wl_sm_start           (wl_sm_start),\n       .wr_lvl_start          (wrlvl_start),\n       .slot_0_present        (slot_0_present),\n       .slot_1_present        (slot_1_present),\n       .mpr_rdlvl_done        (mpr_rdlvl_done),\n       .mpr_rdlvl_start       (mpr_rdlvl_start),\n       .mpr_last_byte_done    (mpr_last_byte_done),\n       .mpr_rnk_done          (mpr_rnk_done),\n       .mpr_end_if_reset      (mpr_end_if_reset),\n       .rdlvl_stg1_done       (rdlvl_stg1_done),\n       .rdlvl_stg1_rank_done  (rdlvl_stg1_rank_done),\n       .rdlvl_stg1_start      (rdlvl_stg1_start),\n       .rdlvl_prech_req       (rdlvl_prech_req),\n       .rdlvl_last_byte_done  (rdlvl_last_byte_done),\n       .prbs_rdlvl_start      (prbs_rdlvl_start),\n       .complex_wr_done       (complex_wr_done),\n       .prbs_rdlvl_done       (prbs_rdlvl_done),\n       .prbs_last_byte_done   (prbs_last_byte_done),\n       .prbs_rdlvl_prech_req  (prbs_rdlvl_prech_req),\n       .complex_victim_inc    (complex_victim_inc),\n       .rd_victim_sel         (rd_victim_sel),\n       .complex_ocal_rd_victim_sel (complex_ocal_rd_victim_sel),\n       .pi_stg2_prbs_rdlvl_cnt(pi_stg2_prbs_rdlvl_cnt),\n       .victim_sel            (victim_sel),\n       .victim_byte_cnt       (victim_byte_cnt),\n       .prbs_gen_clk_en       (prbs_gen_clk_en),\n       .prbs_gen_oclk_clk_en  (prbs_gen_oclk_clk_en),\n       .complex_sample_cnt_inc(complex_sample_cnt_inc),\n       .pi_dqs_found_start    (pi_dqs_found_start),\n       .dqsfound_retry        (dqsfound_retry),\n       .dqs_found_prech_req   (dqs_found_prech_req),\n       .pi_dqs_found_rank_done(pi_dqs_found_rank_done),\n       .pi_dqs_found_done     (pi_dqs_found_done),\n       .detect_pi_found_dqs   (detect_pi_found_dqs),\n       .rd_data_offset_0      (rd_data_offset_0),\n       .rd_data_offset_1      (rd_data_offset_1),\n       .rd_data_offset_2      (rd_data_offset_2),\n       .rd_data_offset_ranks_0(rd_data_offset_ranks_0),\n       .rd_data_offset_ranks_1(rd_data_offset_ranks_1),\n       .rd_data_offset_ranks_2(rd_data_offset_ranks_2),\n       .wrcal_start           (wrcal_start),\n       .wrcal_rd_wait         (wrcal_rd_wait),\n       .wrcal_prech_req       (wrcal_prech_req),\n       .wrcal_resume          (wrcal_resume_w),\n       .wrcal_read_req        (wrcal_read_req),\n       .wrcal_act_req         (wrcal_act_req),\n       .wrcal_sanity_chk      (wrcal_sanity_chk),\n       .temp_wrcal_done       (temp_wrcal_done),\n       .wrcal_sanity_chk_done (wrcal_sanity_chk_done),\n       .tg_timer_done         (tg_timer_done),\n       .no_rst_tg_mc          (no_rst_tg_mc),\n       .wrcal_done            (wrcal_done),\n       .prech_done            (prech_done),\n       .calib_writes          (calib_writes),\n       .init_calib_complete   (calib_complete),\n       .phy_address           (phy_address),\n       .phy_bank              (phy_bank),\n       .phy_cas_n             (phy_cas_n),\n       .phy_cs_n              (phy_cs_n),\n       .phy_ras_n             (phy_ras_n),\n       .phy_reset_n           (phy_reset_n),\n       .phy_we_n              (phy_we_n),\n       .phy_wrdata            (phy_wrdata),\n       .phy_rddata_en         (phy_rddata_en),\n       .phy_rddata_valid      (phy_rddata_valid),\n       .dbg_phy_init          (dbg_phy_init),\n       .reset_rd_addr         (reset_rd_addr | complex_ocal_reset_rd_addr),\n       .oclkdelay_center_calib_start (oclkdelay_center_calib_start),\n       .oclk_center_write_resume     (oclk_center_write_resume),\n       .oclkdelay_center_calib_done  (oclkdelay_center_calib_done),\n       .rdlvl_pi_incdec              (rdlvl_pi_incdec),\n       .complex_act_start            (complex_act_start),\n       .complex_pi_incdec_done       (complex_pi_incdec_done),\n       .complex_init_pi_dec_done     (complex_init_pi_dec_done),\n       .num_samples_done_r           (num_samples_done_r),\n       .calib_tap_inc_start          (calib_tap_inc_start),\n       .calib_tap_end_if_reset       (calib_tap_end_if_reset),\n       .calib_tap_inc_done           (calib_tap_inc_done)\n       );\n\n\n  \n  \n  \n\n  mig_7series_v4_1_ddr_phy_wrcal #\n    (\n     .TCQ            (TCQ),\n     .nCK_PER_CLK    (nCK_PER_CLK),\n     .CLK_PERIOD     (CLK_PERIOD),\n     .DQ_WIDTH       (DQ_WIDTH),\n     .DQS_CNT_WIDTH  (DQS_CNT_WIDTH),\n     .DQS_WIDTH      (DQS_WIDTH),\n     .DRAM_WIDTH     (DRAM_WIDTH),\n     .SIM_CAL_OPTION (SIM_CAL_OPTION)\n     )\n    u_ddr_phy_wrcal\n      (\n       .clk                         (clk),\n       .rst                         (rst),\n       .wrcal_start                 (wrcal_start),\n       .wrcal_rd_wait               (wrcal_rd_wait),\n       .wrcal_sanity_chk            (wrcal_sanity_chk),\n       .dqsfound_retry_done         (pi_dqs_found_done),\n       .dqsfound_retry              (dqsfound_retry),\n       .wrcal_read_req              (wrcal_read_req),\n       .wrcal_act_req               (wrcal_act_req),\n       .phy_rddata_en               (phy_rddata_en),\n       .wrcal_done                  (wrcal_done),\n       .wrcal_pat_err               (wrcal_pat_err),\n       .wrcal_prech_req             (wrcal_prech_req),\n       .temp_wrcal_done             (temp_wrcal_done),\n       .wrcal_sanity_chk_done       (wrcal_sanity_chk_done),\n       .prech_done                  (prech_done),\n       .rd_data                     (phy_rddata),\n       .wrcal_pat_resume            (wrcal_pat_resume),\n       .po_stg2_wrcal_cnt           (po_stg2_wrcal_cnt),\n       .phy_if_reset                (phy_if_reset_w),\n       .wl_po_coarse_cnt            (wl_po_coarse_cnt),\n       .wl_po_fine_cnt              (wl_po_fine_cnt),\n       .wrlvl_byte_redo             (wrlvl_byte_redo),\n       .wrlvl_byte_done             (wrlvl_byte_done),\n       .early1_data                 (early1_data),\n       .early2_data                 (early2_data),\n       .idelay_ld                   (idelay_ld),\n       .dbg_phy_wrcal               (dbg_phy_wrcal),\n       .dbg_final_po_fine_tap_cnt   (dbg_final_po_fine_tap_cnt),\n       .dbg_final_po_coarse_tap_cnt (dbg_final_po_coarse_tap_cnt)\n   );\n\n\n\n  \n  \n  \n\n  generate\n    if ((WRLVL == \"ON\") && (SKIP_CALIB == \"FALSE\")) begin: mb_wrlvl_inst\n\n      mig_7series_v4_1_ddr_phy_wrlvl #\n        (\n         .TCQ               (TCQ),\n         .DQS_CNT_WIDTH     (DQS_CNT_WIDTH),\n         .DQ_WIDTH          (DQ_WIDTH),\n         .DQS_WIDTH         (DQS_WIDTH),\n         .DRAM_WIDTH        (DRAM_WIDTH),\n         .RANKS             (1),\n         .CLK_PERIOD        (CLK_PERIOD),\n         .nCK_PER_CLK       (nCK_PER_CLK),\n         .SIM_CAL_OPTION    (SIM_CAL_OPTION)\n         )\n        u_ddr_phy_wrlvl\n          (\n           .clk                         (clk),\n           .rst                         (rst),\n           .phy_ctl_ready               (phy_ctl_ready),\n           .wr_level_start              (wrlvl_start),\n           .wl_sm_start                 (wl_sm_start),\n           .wrlvl_byte_redo             (wrlvl_byte_redo),\n           .wrcal_cnt                   (po_stg2_wrcal_cnt),\n           .early1_data                 (early1_data),\n           .early2_data                 (early2_data),\n           .wrlvl_final                 (wrlvl_final_mux),\n           .oclkdelay_calib_cnt         (oclkdelay_calib_cnt),\n           .wrlvl_byte_done             (wrlvl_byte_done),\n           .oclkdelay_calib_done        (oclkdelay_calib_done),\n           .rd_data_rise0               (phy_rddata[DQ_WIDTH-1:0]),\n           .dqs_po_dec_done             (dqs_po_dec_done),\n           .phy_ctl_rdy_dly             (phy_ctl_rdy_dly),\n           .wr_level_done               (wrlvl_done),\n           .wrlvl_rank_done             (wrlvl_rank_done),\n           .done_dqs_tap_inc            (done_dqs_tap_inc),\n           .dqs_po_stg2_f_incdec        (dqs_po_stg2_f_incdec),\n           .dqs_po_en_stg2_f            (dqs_po_en_stg2_f),\n           .dqs_wl_po_stg2_c_incdec     (dqs_wl_po_stg2_c_incdec),\n           .dqs_wl_po_en_stg2_c         (dqs_wl_po_en_stg2_c),\n           .po_counter_read_val         (po_counter_read_val),\n           .po_stg2_wl_cnt              (po_stg2_wl_cnt),\n           .wrlvl_err                   (wrlvl_err),\n           .wl_po_coarse_cnt            (wl_po_coarse_cnt),\n           .wl_po_fine_cnt              (wl_po_fine_cnt),\n           .dbg_wl_tap_cnt              (dbg_tap_cnt_during_wrlvl),\n           .dbg_wl_edge_detect_valid    (dbg_wl_edge_detect_valid),\n           .dbg_rd_data_edge_detect     (dbg_rd_data_edge_detect),\n           .dbg_dqs_count               (),\n           .dbg_wl_state                (),\n           .dbg_wrlvl_fine_tap_cnt      (dbg_wrlvl_fine_tap_cnt),\n           .dbg_wrlvl_coarse_tap_cnt    (dbg_wrlvl_coarse_tap_cnt),\n           .dbg_phy_wrlvl               (dbg_phy_wrlvl)\n           );\n\n\n        mig_7series_v4_1_ddr_phy_ck_addr_cmd_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES),\n          .SIM_CAL_OPTION(SIM_CAL_OPTION)\n          )\n          u_ddr_phy_ck_addr_cmd_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .cmd_delay_start            (dqs_po_dec_done & pi_fine_dly_dec_done),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_stg2_f_incdec           (cmd_po_stg2_f_incdec),\n             .po_en_stg2_f               (cmd_po_en_stg2_f),\n             .po_stg2_c_incdec           (cmd_po_stg2_c_incdec),\n             .po_en_stg2_c               (cmd_po_en_stg2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done)\n            );\n\n      assign cmd_po_stg2_incdec_ddr2_c = 1'b0;\n      assign cmd_po_en_stg2_ddr2_c = 1'b0;\n\n    end else if ((WRLVL == \"ON\") && (SKIP_CALIB == \"TRUE\")) begin: wrlvl_on_skip_calib\n\n        mig_7series_v4_1_ddr_phy_ck_addr_cmd_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES),\n          .SIM_CAL_OPTION(SIM_CAL_OPTION)\n          )\n          u_ddr_phy_ck_addr_cmd_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .cmd_delay_start            (skip_cal_po_pi_dec_done),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_stg2_f_incdec           (cmd_po_stg2_f_incdec),\n             .po_en_stg2_f               (cmd_po_en_stg2_f),\n             .po_stg2_c_incdec           (cmd_po_stg2_c_incdec),\n             .po_en_stg2_c               (cmd_po_en_stg2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done)\n            );\n\n      assign dqs_po_dec_done             = 1'b1;\n      assign wrlvl_byte_done             = 1'b1;\n      assign wrlvl_rank_done             = 1'b1;\n      assign phy_ctl_rdy_dly             = 1'b1;\n      assign done_dqs_tap_inc            = 1'b1;\n      assign po_stg2_wl_cnt              = 'h0;\n      assign wl_po_coarse_cnt            = 'h0;\n      assign wl_po_fine_cnt              = 'h0;\n      assign dbg_tap_cnt_during_wrlvl    = 'h0;\n      assign dbg_wl_edge_detect_valid    = 'h0;\n      assign dbg_rd_data_edge_detect     = 'h0;\n      assign dbg_wrlvl_fine_tap_cnt      = 'h0;\n      assign dbg_wrlvl_coarse_tap_cnt    = 'h0;\n      assign dbg_phy_wrlvl               = 'h0;\n\n      assign wrlvl_done   = 1'b1;\n      assign wrlvl_err    = 1'b0;\n      assign dqs_po_stg2_f_incdec = 1'b0;\n      assign dqs_po_en_stg2_f = 1'b0;\n      assign dqs_wl_po_en_stg2_c = 1'b0;\n      assign dqs_wl_po_stg2_c_incdec = 1'b0;\n\n      assign cmd_po_stg2_incdec_ddr2_c = 1'b0;\n      assign cmd_po_en_stg2_ddr2_c = 1'b0;\n\n    end else begin: mb_wrlvl_off\n\n        mig_7series_v4_1_ddr_phy_wrlvl_off_delay #\n         (\n          .TCQ           (TCQ),\n          .tCK           (tCK),\n          .nCK_PER_CLK   (nCK_PER_CLK),\n          .CLK_PERIOD    (CLK_PERIOD),\n          .PO_INITIAL_DLY(60),\n          .DQS_CNT_WIDTH (DQS_CNT_WIDTH),\n          .DQS_WIDTH     (DQS_WIDTH),\n          .N_CTL_LANES   (N_CTL_LANES)\n          )\n          u_phy_wrlvl_off_delay\n            (\n             .clk                        (clk),\n             .rst                        (rst),\n             .pi_fine_dly_dec_done       (pi_fine_dly_dec_done),\n             .cmd_delay_start            (phy_ctl_ready),\n             .ctl_lane_cnt               (ctl_lane_cnt),\n             .po_s2_incdec_f             (cmd_po_stg2_f_incdec),\n             .po_en_s2_f                 (cmd_po_en_stg2_f),\n             .po_s2_incdec_c             (cmd_po_stg2_incdec_ddr2_c),\n             .po_en_s2_c                 (cmd_po_en_stg2_ddr2_c),\n             .po_ck_addr_cmd_delay_done  (po_ck_addr_cmd_delay_done),\n             .po_dec_done                (dqs_po_dec_done),\n             .phy_ctl_rdy_dly            (phy_ctl_rdy_dly)\n            );\n\n      assign wrlvl_byte_done             = 1'b1;\n      assign wrlvl_rank_done             = 1'b1;\n      assign po_stg2_wl_cnt              = 'h0;\n      assign wl_po_coarse_cnt            = 'h0;\n      assign wl_po_fine_cnt              = 'h0;\n      assign dbg_tap_cnt_during_wrlvl    = 'h0;\n      assign dbg_wl_edge_detect_valid    = 'h0;\n      assign dbg_rd_data_edge_detect     = 'h0;\n      assign dbg_wrlvl_fine_tap_cnt      = 'h0;\n      assign dbg_wrlvl_coarse_tap_cnt    = 'h0;\n      assign dbg_phy_wrlvl               = 'h0;\n\n      assign wrlvl_done   = 1'b1;\n      assign wrlvl_err    = 1'b0;\n      assign dqs_po_stg2_f_incdec = 1'b0;\n      assign dqs_po_en_stg2_f = 1'b0;\n      assign dqs_wl_po_en_stg2_c = 1'b0;\n      assign cmd_po_stg2_c_incdec = 1'b0;\n      assign dqs_wl_po_stg2_c_incdec = 1'b0;\n      assign cmd_po_en_stg2_c = 1'b0;\n\n    end\n  endgenerate\n\n   generate\n   if((WRLVL == \"ON\") && (OCAL_EN == \"ON\")) begin: oclk_calib\n\n     localparam SAMPCNTRWIDTH = 17;\n     localparam SAMPLES = (SIM_CAL_OPTION==\"NONE\") ? 512 : 4; \n     localparam TAPCNTRWIDTH = clogb2(TAPSPERKCLK);\n     localparam MMCM_SAMP_WAIT = (SIM_CAL_OPTION==\"NONE\") ? 256 : 10;\n     localparam OCAL_SIMPLE_SCAN_SAMPS = (SIM_CAL_OPTION==\"NONE\") ? 512 : 1; \n     localparam POC_PCT_SAMPS_SOLID = 80;\n     localparam SCAN_PCT_SAMPS_SOLID = 95;\n\n     mig_7series_v4_1_ddr_phy_oclkdelay_cal #\n       (\n    \n    .DQS_CNT_WIDTH      (DQS_CNT_WIDTH),\n    .DQS_WIDTH          (DQS_WIDTH),\n    .DQ_WIDTH           (DQ_WIDTH),\n    \n    .DRAM_WIDTH         (DRAM_WIDTH),\n    \n    .OCAL_SIMPLE_SCAN_SAMPS (OCAL_SIMPLE_SCAN_SAMPS),\n    .PCT_SAMPS_SOLID                (POC_PCT_SAMPS_SOLID),\n    .POC_USE_METASTABLE_SAMP        (POC_USE_METASTABLE_SAMP),\n    .SCAN_PCT_SAMPS_SOLID           (SCAN_PCT_SAMPS_SOLID),\n    .SAMPCNTRWIDTH      (SAMPCNTRWIDTH),\n    .SAMPLES            (SAMPLES),\n    .MMCM_SAMP_WAIT             (MMCM_SAMP_WAIT),\n    .SIM_CAL_OPTION             (SIM_CAL_OPTION),\n    .TAPCNTRWIDTH               (TAPCNTRWIDTH),\n    .TAPSPERKCLK                (TAPSPERKCLK),\n    .TCQ                (TCQ),\n    .nCK_PER_CLK                (nCK_PER_CLK),\n    .BYPASS_COMPLEX_OCAL        (BYPASS_COMPLEX_OCAL)\n    \n    )\n     u_ddr_phy_oclkdelay_cal\n       (\n    \n    .prbs_ignore_first_byte           (prbs_ignore_first_byte),\n    .prbs_ignore_last_bytes           (prbs_ignore_last_bytes),\n    .complex_oclkdelay_calib_done   (complex_oclkdelay_calib_done),\n    .dbg_oclkdelay_rd_data          (dbg_oclkdelay_rd_data[16*DRAM_WIDTH-1:0]),\n    .dbg_phy_oclkdelay_cal          (dbg_phy_oclkdelay_cal[255:0]),\n    .lim2init_write_request         (lim2init_write_request),\n    .lim_done                       (lim_done),\n    .oclk_calib_resume              (oclk_calib_resume),\n    .oclk_prech_req                 (oclk_prech_req),\n    .oclkdelay_calib_cnt            (oclkdelay_calib_cnt[DQS_CNT_WIDTH:0]),\n    .oclkdelay_calib_done           (oclkdelay_calib_done),\n    .po_en_stg23                    (po_en_stg23),\n    .po_stg23_incdec                (po_stg23_incdec),\n    .po_stg23_sel                   (po_stg23_sel),\n    .psen                           (psen),\n    .psincdec                       (psincdec),\n    .wrlvl_final                    (wrlvl_final),\n    .rd_victim_sel                  (complex_ocal_rd_victim_sel),\n    .ocal_num_samples_done_r        (complex_ocal_num_samples_done_r),\n    .complex_wrlvl_final            (complex_wrlvl_final),\n    .poc_error                      (poc_error),\n    \n    .clk                            (clk),\n    .complex_oclkdelay_calib_start  (complex_oclkdelay_calib_start_w),\n    .metaQ                          (pd_out),\n    \n    .po_counter_read_val            (po_counter_read_val),\n    .oclkdelay_calib_start          (oclkdelay_calib_start),\n    .oclkdelay_init_val             (oclkdelay_init_val[5:0]),\n    .poc_sample_pd                  (poc_sample_pd),\n    .phy_rddata                     (phy_rddata[2*nCK_PER_CLK*DQ_WIDTH-1:0]),\n    .phy_rddata_en                  (phy_rddata_en),\n    .prbs_o                         (prbs_o[2*nCK_PER_CLK*DQ_WIDTH-1:0]),\n    .prech_done                     (prech_done),\n    .psdone                         (psdone),\n    .rst                            (rst),\n    .wl_po_fine_cnt                 (wl_po_fine_cnt[6*DQS_WIDTH-1:0]),\n    .ocal_num_samples_inc           (complex_ocal_num_samples_inc),\n    .oclkdelay_center_calib_start   (oclkdelay_center_calib_start),\n    .oclk_center_write_resume       (oclk_center_write_resume),\n    .oclkdelay_center_calib_done    (oclkdelay_center_calib_done),\n    .dbg_ocd_lim                    (dbg_ocd_lim),\n    .dbg_poc                         (dbg_poc[1023:0]) );\n\n     end else begin : oclk_calib_disabled\n\n       assign   wrlvl_final = 'b0;\n       assign   psen        = 'b0;\n       assign   psincdec    = 'b0;\n       assign   po_stg23_sel = 'b0;\n       assign   po_stg23_incdec = 'b0;\n       assign   po_en_stg23 = 'b0;\n       assign   oclkdelay_calib_cnt = 'b0;\n       assign   oclk_prech_req = 'b0;\n       assign   oclk_calib_resume = 'b0;\n       assign   oclkdelay_calib_done = 1'b1;\n       assign   dbg_phy_oclkdelay_cal = 'h0;\n       assign   dbg_oclkdelay_rd_data = 'h0;\n\n     end\n   endgenerate\n  \n  \n  \n\n generate\n   if(DQSFOUND_CAL == \"RIGHT\") begin: dqsfind_calib_right\n     mig_7series_v4_1_ddr_phy_dqs_found_cal #\n        (\n         .TCQ              (TCQ),\n         .nCK_PER_CLK      (nCK_PER_CLK),\n         .nCL              (nCL),\n         .AL               (AL),\n         .nCWL             (nCWL),\n         \n         .RANKS            (1),\n         .DQS_CNT_WIDTH    (DQS_CNT_WIDTH),\n         .DQS_WIDTH        (DQS_WIDTH),\n         .DRAM_WIDTH       (DRAM_WIDTH),\n         .REG_CTRL         (REG_CTRL),\n         .SIM_CAL_OPTION   (SIM_CAL_OPTION),\n         .DRAM_TYPE        (DRAM_TYPE),\n         .NUM_DQSFOUND_CAL (NUM_DQSFOUND_CAL),\n         .N_CTL_LANES      (DQS_FOUND_N_CTL_LANES),\n         .HIGHEST_LANE     (HIGHEST_LANE),\n         .HIGHEST_BANK     (HIGHEST_BANK),\n         .BYTE_LANES_B0    (BYTE_LANES_B0),\n         .BYTE_LANES_B1    (BYTE_LANES_B1),\n         .BYTE_LANES_B2    (BYTE_LANES_B2),\n         .BYTE_LANES_B3    (BYTE_LANES_B3),\n         .BYTE_LANES_B4    (BYTE_LANES_B4),\n         .DATA_CTL_B0      (DATA_CTL_B0),\n         .DATA_CTL_B1      (DATA_CTL_B1),\n         .DATA_CTL_B2      (DATA_CTL_B2),\n         .DATA_CTL_B3      (DATA_CTL_B3),\n         .DATA_CTL_B4      (DATA_CTL_B4)\n         )\n         u_ddr_phy_dqs_found_cal\n           (\n            .clk                       (clk),\n            .rst                       (rst),\n            .pi_dqs_found_start        (pi_dqs_found_start),\n            .dqsfound_retry            (dqsfound_retry),\n            .detect_pi_found_dqs       (detect_pi_found_dqs),\n            .prech_done                (prech_done),\n            .pi_dqs_found_lanes        (pi_dqs_found_lanes),\n            .pi_rst_stg1_cal           (pi_rst_stg1_cal),\n            .rd_data_offset_0          (rd_data_offset_0),\n            .rd_data_offset_1          (rd_data_offset_1),\n            .rd_data_offset_2          (rd_data_offset_2),\n            .pi_dqs_found_rank_done    (pi_dqs_found_rank_done),\n            .pi_dqs_found_done         (pi_dqs_found_done),\n            .dqsfound_retry_done       (dqsfound_retry_done),\n            .dqs_found_prech_req       (dqs_found_prech_req),\n            .pi_dqs_found_err          (pi_dqs_found_err),\n            .rd_data_offset_ranks_0    (rd_data_offset_ranks_0),\n            .rd_data_offset_ranks_1    (rd_data_offset_ranks_1),\n            .rd_data_offset_ranks_2    (rd_data_offset_ranks_2),\n            .rd_data_offset_ranks_mc_0 (rd_data_offset_ranks_mc_0),\n            .rd_data_offset_ranks_mc_1 (rd_data_offset_ranks_mc_1),\n            .rd_data_offset_ranks_mc_2 (rd_data_offset_ranks_mc_2),\n            .po_counter_read_val       (po_counter_read_val),\n            .rd_data_offset_cal_done   (rd_data_offset_cal_done),\n            .fine_adjust_done          (fine_adjust_done),\n            .fine_adjust_lane_cnt      (fine_adjust_lane_cnt),\n            .ck_po_stg2_f_indec        (ck_po_stg2_f_indec),\n            .ck_po_stg2_f_en           (ck_po_stg2_f_en),\n            .dbg_dqs_found_cal         (dbg_dqs_found_cal)\n            );\n   end else begin: dqsfind_calib_left\n     mig_7series_v4_1_ddr_phy_dqs_found_cal_hr #\n        (\n         .TCQ              (TCQ),\n         .nCK_PER_CLK      (nCK_PER_CLK),\n         .nCL              (nCL),\n         .AL               (AL),\n         .nCWL             (nCWL),\n         \n         .RANKS            (1),\n         .DQS_CNT_WIDTH    (DQS_CNT_WIDTH),\n         .DQS_WIDTH        (DQS_WIDTH),\n         .DRAM_WIDTH       (DRAM_WIDTH),\n         .REG_CTRL         (REG_CTRL),\n         .SIM_CAL_OPTION   (SIM_CAL_OPTION),\n         .DRAM_TYPE        (DRAM_TYPE),\n         .NUM_DQSFOUND_CAL (NUM_DQSFOUND_CAL),\n         .N_CTL_LANES      (DQS_FOUND_N_CTL_LANES),\n         .HIGHEST_LANE     (HIGHEST_LANE),\n         .HIGHEST_BANK     (HIGHEST_BANK),\n         .BYTE_LANES_B0    (BYTE_LANES_B0),\n         .BYTE_LANES_B1    (BYTE_LANES_B1),\n         .BYTE_LANES_B2    (BYTE_LANES_B2),\n         .BYTE_LANES_B3    (BYTE_LANES_B3),\n         .BYTE_LANES_B4    (BYTE_LANES_B4),\n         .DATA_CTL_B0      (DATA_CTL_B0),\n         .DATA_CTL_B1      (DATA_CTL_B1),\n         .DATA_CTL_B2      (DATA_CTL_B2),\n         .DATA_CTL_B3      (DATA_CTL_B3),\n         .DATA_CTL_B4      (DATA_CTL_B4)\n         )\n         u_ddr_phy_dqs_found_cal_hr\n           (\n            .clk                       (clk),\n            .rst                       (rst),\n            .pi_dqs_found_start        (pi_dqs_found_start),\n            .dqsfound_retry            (dqsfound_retry),\n            .detect_pi_found_dqs       (detect_pi_found_dqs),\n            .prech_done                (prech_done),\n            .pi_dqs_found_lanes        (pi_dqs_found_lanes),\n            .pi_rst_stg1_cal           (pi_rst_stg1_cal),\n            .rd_data_offset_0          (rd_data_offset_0),\n            .rd_data_offset_1          (rd_data_offset_1),\n            .rd_data_offset_2          (rd_data_offset_2),\n            .pi_dqs_found_rank_done    (pi_dqs_found_rank_done),\n            .pi_dqs_found_done         (pi_dqs_found_done),\n            .dqsfound_retry_done       (dqsfound_retry_done),\n            .dqs_found_prech_req       (dqs_found_prech_req),\n            .pi_dqs_found_err          (pi_dqs_found_err),\n            .rd_data_offset_ranks_0    (rd_data_offset_ranks_0),\n            .rd_data_offset_ranks_1    (rd_data_offset_ranks_1),\n            .rd_data_offset_ranks_2    (rd_data_offset_ranks_2),\n            .rd_data_offset_ranks_mc_0 (rd_data_offset_ranks_mc_0),\n            .rd_data_offset_ranks_mc_1 (rd_data_offset_ranks_mc_1),\n            .rd_data_offset_ranks_mc_2 (rd_data_offset_ranks_mc_2),\n            .po_counter_read_val       (po_counter_read_val),\n            .rd_data_offset_cal_done   (rd_data_offset_cal_done),\n            .fine_adjust_done          (fine_adjust_done),\n            .fine_adjust_lane_cnt      (fine_adjust_lane_cnt),\n            .ck_po_stg2_f_indec        (ck_po_stg2_f_indec),\n            .ck_po_stg2_f_en           (ck_po_stg2_f_en),\n            .dbg_dqs_found_cal         (dbg_dqs_found_cal)\n            );\n   end\n endgenerate\n\n  \n  \n  \ngenerate\nif (SKIP_CALIB == \"FALSE\") begin:ddr_phy_rdlvl_gen\n  mig_7series_v4_1_ddr_phy_rdlvl #\n    (\n     .TCQ             (TCQ),\n     .nCK_PER_CLK     (nCK_PER_CLK),\n     .CLK_PERIOD      (CLK_PERIOD),\n     .DQ_WIDTH        (DQ_WIDTH),\n     .DQS_CNT_WIDTH   (DQS_CNT_WIDTH),\n     .DQS_WIDTH       (DQS_WIDTH),\n     .DRAM_WIDTH      (DRAM_WIDTH),\n     .RANKS           (1),\n     .PER_BIT_DESKEW  (PER_BIT_DESKEW),\n     .SIM_CAL_OPTION  (SIM_CAL_OPTION),\n     .DEBUG_PORT      (DEBUG_PORT),\n     .DRAM_TYPE       (DRAM_TYPE),\n     .OCAL_EN         (OCAL_EN),\n     .IDELAY_ADJ      (IDELAY_ADJ),\n     .PI_DIV2_INCDEC  (PI_DIV2_INCDEC)\n     )\n    u_ddr_phy_rdlvl\n      (\n       .clk                     (clk),\n       .rst                     (rst),\n       .mpr_rdlvl_done          (mpr_rdlvl_done),\n       .mpr_rdlvl_start         (mpr_rdlvl_start),\n       .mpr_last_byte_done      (mpr_last_byte_done),\n       .mpr_rnk_done            (mpr_rnk_done),\n       .rdlvl_stg1_start        (rdlvl_stg1_start),\n       .rdlvl_stg1_done         (rdlvl_stg1_done),\n       .rdlvl_stg1_rnk_done     (rdlvl_stg1_rank_done),\n       .rdlvl_stg1_err          (rdlvl_stg1_err),\n       .mpr_rdlvl_err           (mpr_rdlvl_err),\n       .rdlvl_err               (rdlvl_err),\n       .rdlvl_prech_req         (rdlvl_prech_req),\n       .rdlvl_last_byte_done    (rdlvl_last_byte_done),\n       .rdlvl_assrt_common      (rdlvl_assrt_common),\n       .prech_done              (prech_done),\n       .phy_if_empty            (phy_if_empty),\n       .idelaye2_init_val       (idelaye2_init_val),\n       .rd_data                 (phy_rddata),\n       .pi_en_stg2_f            (rdlvl_pi_stg2_f_en),\n       .pi_stg2_f_incdec        (rdlvl_pi_stg2_f_incdec),\n       .pi_stg2_load            (pi_stg2_load),\n       .pi_stg2_reg_l           (pi_stg2_reg_l),\n       .dqs_po_dec_done         (dqs_po_dec_done),\n       .pi_counter_read_val     (pi_counter_read_val),\n       .pi_fine_dly_dec_done    (pi_fine_dly_dec_done),\n       .idelay_ce               (idelay_ce_int),\n       .idelay_inc              (idelay_inc_int),\n       .idelay_ld               (idelay_ld),\n       .wrcal_cnt               (po_stg2_wrcal_cnt),\n       .pi_stg2_rdlvl_cnt       (pi_stg2_rdlvl_cnt),\n       .dlyval_dq               (dlyval_dq),\n       .rdlvl_pi_incdec         (rdlvl_pi_incdec),\n       .dbg_cpt_first_edge_cnt  (dbg_cpt_first_edge_cnt),\n       .dbg_cpt_second_edge_cnt (dbg_cpt_second_edge_cnt),\n       .dbg_cpt_tap_cnt         (dbg_cpt_tap_cnt),\n       .dbg_dq_idelay_tap_cnt   (dbg_dq_idelay_tap_cnt),\n       .dbg_idel_up_all         (dbg_idel_up_all),\n       .dbg_idel_down_all       (dbg_idel_down_all),\n       .dbg_idel_up_cpt         (dbg_idel_up_cpt),\n       .dbg_idel_down_cpt       (dbg_idel_down_cpt),\n       .dbg_sel_idel_cpt        (dbg_sel_idel_cpt),\n       .dbg_sel_all_idel_cpt    (dbg_sel_all_idel_cpt),\n       .dbg_phy_rdlvl           (dbg_phy_rdlvl)\n       );\nend else begin:ddr_phy_rdlvl_off\n\n     assign mpr_rdlvl_done          = 1'b1;\n     assign mpr_last_byte_done      = 1'b1;\n     assign mpr_rnk_done            = 1'b1;\n     assign rdlvl_stg1_done         = 1'b1;\n     assign rdlvl_stg1_rank_done    = 1'b1;\n     assign rdlvl_last_byte_done    = 1'b1;\n     assign pi_fine_dly_dec_done    = 1'b1;\n     assign rdlvl_prech_req         = 1'b0;\n     assign rdlvl_stg1_err          = 1'b0;\n     assign mpr_rdlvl_err           = 1'b0;\n     assign rdlvl_err               = 1'b0;\n     assign rdlvl_assrt_common      = 1'b0;\n     assign rdlvl_pi_stg2_f_en      = 1'b0;\n     assign rdlvl_pi_stg2_f_incdec  = 1'b0;\n     assign pi_stg2_rdlvl_cnt       = 'h0;\n     assign idelay_ce_int           = 1'b0;\n     assign idelay_inc_int          = 1'b0;\n     assign rdlvl_pi_incdec         = 1'b0;\n     assign dbg_phy_rdlvl           = 'h0;\n     assign dbg_cpt_first_edge_cnt  = 'h0;\n     assign dbg_cpt_second_edge_cnt = 'h0;\n     assign dbg_cpt_tap_cnt         = 'h0;\n     assign dbg_dq_idelay_tap_cnt   = 'h0;\n\nend\nendgenerate\n\ngenerate\nif((DRAM_TYPE == \"DDR3\") && (nCK_PER_CLK == 4) && (BYPASS_COMPLEX_RDLVL==\"FALSE\")) begin:ddr_phy_prbs_rdlvl_gen\n  mig_7series_v4_1_ddr_phy_prbs_rdlvl #\n    (\n     .TCQ            (TCQ),\n     .nCK_PER_CLK    (nCK_PER_CLK),\n     .DQ_WIDTH       (DQ_WIDTH),\n     .DQS_CNT_WIDTH  (DQS_CNT_WIDTH),\n     .DQS_WIDTH      (DQS_WIDTH),\n     .DRAM_WIDTH     (DRAM_WIDTH),\n     .RANKS          (1),\n     .SIM_CAL_OPTION (SIM_CAL_OPTION),\n     .PRBS_WIDTH     (PRBS_WIDTH),\n     .FIXED_VICTIM   (FIXED_VICTIM),\n     .FINE_PER_BIT   (FINE_PER_BIT),\n     .CENTER_COMP_MODE (CENTER_COMP_MODE),\n     .PI_VAL_ADJ       (PI_VAL_ADJ)\n     )\n    u_ddr_phy_prbs_rdlvl\n      (\n       .clk                    (clk),\n       .rst                    (rst),\n       .prbs_rdlvl_start       (prbs_rdlvl_start),\n       .prbs_rdlvl_done        (prbs_rdlvl_done_complex),\n       .prbs_last_byte_done    (prbs_last_byte_done),\n       .prbs_rdlvl_prech_req   (prbs_rdlvl_prech_req),\n       .complex_sample_cnt_inc (complex_sample_cnt_inc),\n       .prech_done             (prech_done),\n       .phy_if_empty           (phy_if_empty),\n       .rd_data                (phy_rddata),\n       .compare_data           (prbs_o),\n       .pi_counter_read_val    (pi_counter_read_val),\n       .pi_en_stg2_f           (prbs_pi_stg2_f_en),\n       .pi_stg2_f_incdec       (prbs_pi_stg2_f_incdec),\n       .dbg_prbs_rdlvl         (dbg_prbs_rdlvl),\n       .pi_stg2_prbs_rdlvl_cnt (pi_stg2_prbs_rdlvl_cnt),\n       .prbs_final_dqs_tap_cnt_r (prbs_final_dqs_tap_cnt_r),\n       .dbg_prbs_first_edge_taps (dbg_prbs_first_edge_taps),\n       .dbg_prbs_second_edge_taps (dbg_prbs_second_edge_taps),\n       .rd_victim_sel          (rd_victim_sel),\n       .complex_victim_inc     (complex_victim_inc),\n       .reset_rd_addr          (reset_rd_addr),\n       .fine_delay_incdec_pb   (fine_delay_incdec_pb),\n       .fine_delay_sel         (fine_delay_sel),\n       .complex_act_start      (complex_act_start),\n       .num_samples_done_r     (num_samples_done_r),\n       .complex_pi_incdec_done (complex_pi_incdec_done),\n       .complex_init_pi_dec_done     (complex_init_pi_dec_done)\n       );\nend else begin:ddr_phy_prbs_rdlvl_off\n\n     assign prbs_rdlvl_done_complex = rdlvl_stg1_done ;\n     \n     assign prbs_last_byte_done     = rdlvl_stg1_done;\n     assign reset_rd_addr           = 1'b0;\n     assign prbs_rdlvl_prech_req    = 1'b0 ;\n     assign prbs_pi_stg2_f_en       = 1'b0 ;\n     assign prbs_pi_stg2_f_incdec   = 1'b0 ;\n     assign pi_stg2_prbs_rdlvl_cnt  = 'b0 ;\n     assign dbg_prbs_rdlvl          = 'h0 ;\n     assign prbs_final_dqs_tap_cnt_r  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_first_edge_taps  = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign dbg_prbs_second_edge_taps = {(6*DQS_WIDTH*RANKS){1'b0}};\n     assign complex_pi_incdec_done  = 'b0;\n     assign complex_init_pi_dec_done  = 'b1;\n     assign num_samples_done_r      = 'b0;\nend\nendgenerate\n\n  \n  \n  \n\n  generate\n  if (SKIP_CALIB == \"TRUE\") begin: gen_skip_calib_tap\n\n    \n    always @(posedge clk) begin\n      if (rst)\n        calib_tap_req  <= #TCQ 1'b0;\n      else if (phy_ctl_ready)\n        calib_tap_req <= #TCQ 1'b1;\n    end\n\n\n    \n    always @(posedge clk) begin\n      if (rst) begin\n        calib_po_coarse_tap_cnt <= #TCQ 'd0;\n        calib_po_stage3_tap_cnt <= #TCQ 'd0;\n        calib_po_stage2_tap_cnt <= #TCQ 'd0;\n        calib_pi_stage2_tap_cnt <= #TCQ 'd0;\n        calib_idelay_tap_cnt    <= #TCQ 'd0;\n        calib_device_temp       <= #TCQ 'd0;\n      end else if (calib_tap_load) begin\n        case (calib_tap_addr[2:0])\n          3'b000:\n            calib_po_coarse_tap_cnt[3*calib_tap_addr[6:3]+:3] <= #TCQ calib_tap_val[2:0];\n          3'b001:\n            calib_po_stage3_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b010:\n            calib_po_stage2_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b011:\n            calib_pi_stage2_tap_cnt[6*calib_tap_addr[6:3]+:6] <= #TCQ calib_tap_val[5:0];\n          3'b100:\n            calib_idelay_tap_cnt[5*calib_tap_addr[6:3]+:5] <= #TCQ calib_tap_val[4:0];\n          3'b110:\n            if (&calib_tap_addr[6:3])\n              calib_device_temp[7:0] <= #TCQ calib_tap_val[7:0];\n          3'b111:\n            if (&calib_tap_addr[6:3])\n              calib_device_temp[11:8] <= #TCQ calib_tap_val[3:0];\n          default:\n            calib_po_coarse_tap_cnt[3*calib_tap_addr[6:3]+:3] <= #TCQ calib_tap_val[2:0];\n        endcase\n      end\n    end\n\n\n    mig_7series_v4_1_ddr_skip_calib_tap #\n    (\n        .TCQ       (TCQ),\n        .DQS_WIDTH (DQS_WIDTH)\n     )\n       u_ddr_skip_calib_tap\n      (\n       .rst                   (rst),\n       .clk                   (clk),\n       .phy_ctl_ready         (phy_ctl_ready),\n       .load_done                (calib_tap_load_done),\n       .calib_tap_inc_start      (calib_tap_inc_start),\n       .calib_tap_inc_done       (calib_tap_inc_done),\n       .calib_tap_inc_byte_cnt   (calib_tap_inc_byte_cnt),\n       .calib_po_stage2_tap_cnt  (calib_po_stage2_tap_cnt),\n       .calib_po_stage3_tap_cnt  (calib_po_stage3_tap_cnt),\n       .calib_po_coarse_tap_cnt  (calib_po_coarse_tap_cnt),\n       .calib_pi_stage2_tap_cnt  (calib_pi_stage2_tap_cnt),\n       .calib_idelay_tap_cnt     (calib_idelay_tap_cnt),\n       .po_counter_read_val      (po_counter_read_val),\n       .pi_counter_read_val      (pi_counter_read_val),\n       .calib_po_f_en            (calib_po_f_en),\n       .calib_po_f_incdec        (calib_po_f_incdec),\n       .calib_po_sel_stg2stg3    (calib_po_sel_stg2stg3),\n       .calib_po_c_en            (calib_po_c_en),\n       .calib_po_c_inc           (calib_po_c_inc),\n       .calib_pi_f_en            (calib_pi_f_en),\n       .calib_pi_f_incdec        (calib_pi_f_incdec),\n       .calib_idelay_ce          (calib_idelay_ce),\n       .calib_idelay_inc         (calib_idelay_inc),\n       .skip_cal_po_pi_dec_done  (skip_cal_po_pi_dec_done),\n       .coarse_dec_err           (coarse_dec_err),\n       .dbg_skip_cal             (dbg_skip_cal)\n       );\n\n    \n    reg [8:0] samp_en_cnt;\n\n    always @ (posedge clk) begin\n      if (rst || tempmon_done_skip || (samp_en_cnt == 'd0))\n        samp_en_cnt <= #TCQ 'd267;\n      else if (calib_complete && (samp_en_cnt > 'd0))\n        samp_en_cnt <= #TCQ samp_en_cnt - 1;\n    end\n\n    always @ (posedge clk) begin\n      if (rst || tempmon_done_skip)\n        skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n      else if (samp_en_cnt == 'd260)\n        skip_cal_tempmon_samp_en <= #TCQ 1'b1;\n      else\n        skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n    end\n\n\n\n  end else begin: skip_calib_tap_off\n    assign calib_po_f_en          = 1'b0;\n    assign calib_po_f_incdec      = 1'b0;\n    assign calib_po_sel_stg2stg3  = 1'b0;\n    assign calib_po_c_en          = 1'b0;\n    assign calib_po_c_inc         = 1'b0;\n    assign calib_pi_f_en          = 1'b0;\n    assign calib_pi_f_incdec      = 1'b0;\n    assign calib_idelay_ce        = 1'b0;\n    assign calib_idelay_inc       = 1'b0;\n    assign calib_tap_inc_done     = 1'b0;\n    assign calib_tap_inc_byte_cnt = 'd0;\n    assign skip_cal_po_pi_dec_done = 1'b1;\n\n    always @(posedge clk) begin\n      calib_tap_req     <= #TCQ 1'b0;\n      calib_device_temp <= #TCQ 'd0;\n      skip_cal_tempmon_samp_en <= #TCQ 1'b0;\n    end\n\nend\nendgenerate\n\n  \n  \n  \n\n  mig_7series_v4_1_ddr_phy_tempmon #\n    (\n     .SKIP_CALIB  (SKIP_CALIB),\n     .TCQ         (TCQ)\n     )\n    ddr_phy_tempmon_0\n      (\n       .rst                   (rst),\n       .clk                   (clk),\n       .calib_complete        (calib_complete),\n       .tempmon_pi_f_inc      (tempmon_pi_f_inc),\n       .tempmon_pi_f_dec      (tempmon_pi_f_dec),\n       .tempmon_sel_pi_incdec (tempmon_sel_pi_incdec),\n       .device_temp           (device_temp),\n       .calib_device_temp     (calib_device_temp),\n       .tempmon_sample_en     (tempmon_sample_en | skip_cal_tempmon_samp_en),\n       .tempmon_done_skip     (tempmon_done_skip)\n       );\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: mig_7series_v4_1_ddr_calib_top. Module specification: This module serves as the top-level calibration module for a DDR (Double Data Rate) memory interface. It orchestrates various calibration processes including write leveling, read leveling, DQS (Data Strobe) calibration, and temperature monitoring. The module integrates several sub-modules to perform these calibration tasks, manages calibration sequences, and handles timing adjustments for different aspects of the DDR interface. Key input ports include clock (clk), reset (rst), and various status signals from DDR interface components. Output ports comprise calibration control signals, memory interface signals, and debug outputs. Internal signals are used for inter-module communication, state management, and calibration process control. The module is structured into several main blocks: initialization logic, write leveling, read leveling, DQS calibration, "
                }
            ]
        }
    ]
}