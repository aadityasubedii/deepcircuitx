{
    "line_num": [
        [
            1443,
            1471
        ],
        [
            1415,
            1426
        ],
        [
            1411,
            1413
        ],
        [
            1404,
            1409
        ],
        [
            1399,
            1402
        ],
        [
            1394,
            1398
        ],
        [
            1387,
            1392
        ],
        [
            1344,
            1348
        ],
        [
            1307,
            1310
        ],
        [
            1297,
            1303
        ],
        [
            1288,
            1294
        ],
        [
            1286,
            1287
        ],
        [
            1285,
            1285
        ],
        [
            1284,
            1284
        ],
        [
            1283,
            1283
        ],
        [
            1268,
            1281
        ],
        [
            1254,
            1266
        ],
        [
            1240,
            1252
        ],
        [
            1229,
            1238
        ],
        [
            1220,
            1227
        ],
        [
            1203,
            1217
        ],
        [
            1169,
            1201
        ],
        [
            1146,
            1167
        ],
        [
            1138,
            1144
        ],
        [
            1104,
            1136
        ],
        [
            935,
            1100
        ],
        [
            734,
            932
        ],
        [
            715,
            732
        ],
        [
            672,
            713
        ],
        [
            659,
            670
        ],
        [
            636,
            657
        ],
        [
            432,
            634
        ],
        [
            427,
            429
        ],
        [
            426,
            426
        ],
        [
            420,
            424
        ],
        [
            384,
            418
        ],
        [
            377,
            382
        ],
        [
            370,
            374
        ],
        [
            364,
            369
        ],
        [
            323,
            360
        ],
        [
            311,
            321
        ],
        [
            268,
            269
        ],
        [
            265,
            265
        ],
        [
            141,
            141
        ]
    ],
    "blocks": [
        "    specify\n        specparam PATHPULSE$ = 0; \n\n        (clk   =>clk2waite) = (   tKHTL,  tHZ);\n        (adv_n =>  adv2dqe) = (    tALZ, tAHZ);\n        (negedge adv_n => (adv2dq +: adv_n)) = (tAADV,  tOH);\n        (negedge adv_n => (adv2wi +: adv_n)) = (tWI,  0);\n        (zz_n  =>    zz2pd) = (    tDPD,    0);\n        (ce_n  =>   ce2dqe) = (     tLZ,  tHZ);\n        (ce_n  =>    ce2dq) = (     tCO,    0);\n        (ce_n  =>   ce2cem) = (    tCEM,    0);\n        (ce_n  =>    ce2wi) = (     tWI,    0);\n        (ce_n  => ce2waite) = (tCEW_MIN,  tHZ);\n        (ce_n  =>  ce2wait) = (tCEW_MAX,    0);\n        (ce_n  =>   ce2rst) = (      15,    0);\n        (oe_n  =>   oe2dqe) = (    tOLZ, tOHZ);\n        (oe_n  =>    oe2dq) = (     tOE,    0);\n        (oe_n  =>   soe2dq) = (    tBOE,    0);\n        (oe_n  => oe2waite) = (tOEW_MIN,  tHZ);\n        (oe_n  =>  oe2wait) = (tOEW_MAX,    0);\n        (we_n  =>   we2dqe) = (       0, tWHZ);\n        (we_n  =>    we2dq) = (       0,    0);\n        (we_n  => we2waite) = (       0,    0);\n        (by_n  *>   by2dqe) = (    tBLZ, tBHZ);\n        (by_n  *>    by2dq) = (     tBA,    0);\n        (addr  *>  addr2dq) = (     tAA,  tOH);\n        (addr  *>  addr2wi) = (     tWI,    0);\n        (posedge clk   => (saddr2dq +: clk)) = (tABA,  tKOH);\n    endspecify",
        "    assign clk2waite = clk2waiter;\n    assign adv2dqe   = adv_n;\n    assign adv2dq    = adv2dqr;\n    assign adv2wi    = adv2dqr;\n    assign zz2pd     = !zz_n;\n    assign ce2dqe    = !ce_n;\n    assign ce2dq     = !ce_n;\n    assign ce2cem    = !ce_n;\n    assign ce2wi     = !ce_n;\n    assign ce2waite  = !ce_n;\n    assign ce2wait   = !ce_n;\n    assign ce2rst    = ce_n;",
        "    always @(posedge ce_n or posedge clk) begin\n        clk2waiter <= !ce_n;\n    end",
        "    always @(posedge clk) begin \n        if (!adv_n) begin\n            saddr2dqr <= 1'b0;\n            saddr2dqr <= #(1) 1'b1;\n        end\n    end",
        "    always @(addr) begin\n        addr2wir <= 1'b0;\n        addr2wir <= #(1) 1'b1;\n    end",
        "    always @(addr[ADDR_BITS-1:4]) begin\n        addr2dqr <= 1'b0;\n        addr2dqr <= #(1) 1'b1;\n    end\n",
        "    always @(negedge adv_n) begin\n        if (!adv_n) begin\n            adv2dqr <= 1'b0;\n            adv2dqr <= #(1) 1'b1;\n        end\n    end",
        "    by2dq,\n    addr2dq,\n    addr2wi,\n    saddr2dq\n);",
        "    always @(posedge ce2cem) begin\n        if (deep_power_down_exit !== 1'b1)\n            $display (\"%t ERROR:  tCEM violation on CE#\", $realtime);\n    end",
        "    always @(posedge tow_check) begin\n        if (!oe_n) begin\n            if (dq_in !== {DQ_BITS{1'bz}})\n                $display (\"%t ERROR:  tOW violation on DQ\", $realtime);\n        end\n        tow_check <= 1'b0;\n    end",
        "    always @(dq_in) begin\n        if (!sync_access) begin\n            if ($realtime - tm_write_end < tDH) \n                $display (\"%t ERROR:  tDH violation on DQ by %t\", $realtime, tm_write_end + tDH - $realtime);\n        end\n        tm_dq_tdw <= $realtime;\n    end",
        "    always @(addr[0]) addr_timing_check(0);\n",
        "    always @(addr[1]) addr_timing_check(1);",
        "    always @(addr[2]) addr_timing_check(2);",
        "    always @(addr[3]) addr_timing_check(3);",
        "    task addr_timing_check;\n    input i;\n    integer i;\n    begin\n        if (!ce_n && !adv_n_in && !oe_n && we_n && (by_n == {BY_BITS{1'b0}})) begin\n            case (i)\n                3: begin if ($realtime - tm_page_addr3 < tPC) $display (\"%t ERROR:   tPC violation on ADDR bit %d by %t\", $realtime, i, tm_page_addr3 + tPC - $realtime); tm_page_addr3 <= $realtime; end\n                2: begin if ($realtime - tm_page_addr2 < tPC) $display (\"%t ERROR:   tPC violation on ADDR bit %d by %t\", $realtime, i, tm_page_addr2 + tPC - $realtime); tm_page_addr2 <= $realtime; end\n                1: begin if ($realtime - tm_page_addr1 < tPC) $display (\"%t ERROR:   tPC violation on ADDR bit %d by %t\", $realtime, i, tm_page_addr1 + tPC - $realtime); tm_page_addr1 <= $realtime; end\n                0: begin if ($realtime - tm_page_addr0 < tPC) $display (\"%t ERROR:   tPC violation on ADDR bit %d by %t\", $realtime, i, tm_page_addr0 + tPC - $realtime); tm_page_addr0 <= $realtime; end\n            endcase\n        end\n    end\n    endtask",
        "    always @(addr) begin\n        if (!ce_n | tavh_check) begin\n            if (!adv_n_in) begin\n                if ($realtime - tm_clk_pos < tHD) \n                    $display (\"%t ERROR:   tHD violation on ADDR by %t\", $realtime, tm_clk_pos + tHD - $realtime);\n            end\n            if (!sync_access | initial_latency) begin\n                if ($realtime - tm_adv_n_pos < tAVH) \n                    $display (\"%t ERROR:  tAVH violation on ADDR by %t\", $realtime, tm_adv_n_pos + tAVH - $realtime);\n            end\n        end\n        tm_addr = $realtime;\n    end",
        "    always @(cre_in) begin\n        if (!ce_n | tavh_check) begin\n            if (!adv_n_in) begin\n                if ($realtime - tm_clk_pos < tHD) \n                    $display (\"%t ERROR:   tHD violation on CRE by %t\", $realtime, tm_clk_pos + tHD - $realtime);\n            end\n            if (!sync_access | initial_latency) begin\n                if ($realtime - tm_adv_n_pos < tAVH) \n                    $display (\"%t ERROR:  tAVH violation on CRE by %t\", $realtime, tm_adv_n_pos + tAVH - $realtime);\n            end\n        end\n        tm_cre = $realtime;\n    end",
        "    always @(by_n) begin\n        if (!ce_n) begin\n            if (adv_n_in) begin\n                if ($realtime - tm_clk_pos < tHD) \n                    $display (\"%t ERROR:   tHD violation on BY# by %t\", $realtime, tm_clk_pos + tHD - $realtime);\n            end\n        end\n        tm_by_n = $realtime;\n        tm_tbw <= $realtime;\n    end",
        "    always @(we_n or ce2wi) begin\n        if (!sync_access && !we_n && ce2wi) begin\n            if ($realtime - tm_adv_n_neg < tAS)\n                $display (\"%t ERROR:   tAS violation on ADV# by %t\", $realtime, tm_adv_n_neg + tAS - $realtime);\n            if ($realtime - tm_async_addr < tAS)\n                $display (\"%t ERROR:   tAS violation on ADDR by %t\", $realtime, tm_async_addr + tAS - $realtime);\n        end\n    end",
        "    always @(we_n) begin\n        if (!ce_n) begin\n            if (!adv_n_in) begin\n                if ($realtime - tm_clk_pos < tHD) \n                    $display (\"%t ERROR:   tHD violation on WE# by %t\", $realtime, tm_clk_pos + tHD - $realtime);\n            end\n            if (!sync_access) begin\n                if (!we_n) begin\n                    if ($realtime - tm_we_n < tWPH)\n                        $display (\"%t ERROR:   tWPH violation on WE# by %t\", $realtime, tm_we_n + tWPH - $realtime);\n                end\n            end\n        end\n        tm_we_n <= $realtime;\n    end",
        "    always @(adv_n_in) begin\n        if (!ce_n) begin\n            if ($realtime - tm_clk_pos < tHD) \n                $display (\"%t ERROR:   tHD violation on ADV# by %t\", $realtime, tm_clk_pos + tHD - $realtime);\n            if (adv_n_in) begin\n                if (!sync_access) begin\n                    if ($realtime - tm_ce_n < tCVS)\n                        $display (\"%t ERROR:  tCVS violation on CE# by %t\", $realtime, tm_ce_n + tCVS - $realtime);\n                    if ($realtime - tm_adv_n < tVP)\n                        $display (\"%t ERROR:   tVP violation on ADV# by %t\", $realtime, tm_adv_n + tVP - $realtime);\n                    if ($realtime - tm_cre < tAVS)\n                        $display (\"%t ERROR:  tAVS violation on CRE by %t\", $realtime, tm_cre + tAVS - $realtime);\n                    if ($realtime - tm_addr < tAVS)\n                        $display (\"%t ERROR:  tAVS violation on ADDR by %t\", $realtime, tm_addr + tAVS - $realtime);\n                end\n                if (!sync_access | initial_latency) begin\n                    if ($realtime - tm_cre < tAVH)\n                        $display (\"%t ERROR:  tAVH violation on CRE by %t\", $realtime, tm_cre + tAVH - $realtime);\n                    if ($realtime - tm_addr < tAVH)\n                        $display (\"%t ERROR:  tAVH violation on ADDR by %t\", $realtime, tm_addr + tAVH - $realtime);\n                end\n            end else begin\n                if ($realtime - tm_adv_n < tVPH)\n                    $display (\"%t ERROR:   tVPH violation on ADV# by %t\", $realtime, tm_adv_n + tVPH - $realtime);\n            end\n        end\n        if (adv_n_in) begin\n            tm_adv_n_pos = $realtime;\n        end else begin\n            tm_adv_n_neg <= $realtime;\n        end\n        tm_adv_n = $realtime;\n    end",
        "    always @(ce_n) begin\n        if ($realtime > tCLK) begin\n            if ($realtime - tm_clk_pos < tHD) \n                $display (\"%t ERROR:   tHD violation on CE# by %t\", $realtime, tm_clk_pos + tHD - $realtime);\n        end\n        if (!ce_n) begin\n            if (last_access) begin\n                if ($realtime - tm_ce_n < tCBPH)\n                    $display (\"%t ERROR: tCBPH violation on CE# by %t\", $realtime, tm_ce_n + tCBPH - $realtime);\n            end else begin\n                if ($realtime - tm_ce_n < tCPH)\n                    $display (\"%t ERROR:  tCPH violation on CE# by %t\", $realtime, tm_ce_n + tCPH - $realtime);\n                if ($realtime - tm_write_end < tWR)\n                    $display (\"%t ERROR:   tWR violation on CE# by %t\", $realtime, tm_write_end + tWR - $realtime);\n            end\n            if ($realtime - tm_power_up < tPU)\n                $display (\"%t  WARN:   tPU violation on CE# by %t\", $realtime, tm_power_up + tPU - $realtime);\n        end\n        tm_ce_n = $realtime;\n        tm_tcw  <= $realtime;\n        tm_tdpd <= $realtime;\n    end",
        "    always @(negedge clk_in) begin\n        if ($realtime > tCLK) begin\n            if ($realtime - tm_clk_pos < tKP)\n                $display (\"%t ERROR:   tKP minimum violation on CLK by %t\", $realtime, tm_clk_pos + tKP - $realtime);\n        end\n        tm_clk_neg = $realtime - 0.0001;  \n    end",
        "    always @(posedge clk_in) begin\n        if ($realtime > tCLK) begin\n            if ($realtime - tm_ce_n < tCSP)\n                $display (\"%t ERROR:  tCSP violation on CE# by %t\", $realtime, tm_ce_n + tCSP - $realtime);\n            if (!ce_n) begin\n                if ($realtime - tm_adv_n < tSP)\n                    $display (\"%t ERROR:   tSP violation on ADV# by %t\", $realtime, tm_adv_n + tSP - $realtime);\n                if (adv_n_in) begin\n                    if ($realtime - tm_by_n < tSP)\n                        $display (\"%t ERROR:   tSP violation on BY# by %t\", $realtime, tm_by_n + tSP - $realtime);\n                end else begin\n                    if ($realtime - tm_we_n < tSP)\n                        $display (\"%t ERROR:   tSP violation on WE# by %t\", $realtime, tm_we_n + tSP - $realtime);\n                    if ($realtime - tm_cre < tSP)\n                        $display (\"%t ERROR:   tSP violation on CRE by %t\", $realtime, tm_cre + tSP - $realtime);\n                    if ($realtime - tm_addr < tSP) \n                        $display (\"%t ERROR:   tSP violation on ADDR by %t\", $realtime, tm_addr + tSP - $realtime);\n                end\n\n                tm_clk_period = min_clk_period(initial_latency, latency_counter[2:0]);\n                if (tm_clk_period == 0.0)\n                    $display (\"%t ERROR: Illegal latency counter = %h\", $realtime, latency_counter);\n                if ($realtime - tm_clk_pos < tm_clk_period)\n                    $display (\"%t ERROR: Clock Period must be >= %f while Latency Counter = %h.  Actual Clock Period = %f\", $realtime, tm_clk_period, latency_counter, $realtime - tm_clk_pos);\n\n                if ($realtime - tm_clk_pos < tCLK)\n                    $display (\"%t ERROR:  tCLK minimum violation on CLK by %t\", $realtime, tm_clk_pos + tCLK - $realtime);\n                if ($realtime - tm_clk_neg < tKP)\n                    $display (\"%t ERROR:   tKP minimum violation on CLK by %t\", $realtime, tm_clk_neg + tKP - $realtime);\n            end\n        end\n        tm_clk_pos = $realtime - 0.0001;  \n    end",
        "    always @(posedge clk_in) begin\n        if (!operating_mode || Sync2AsyncConfig) begin \n\n            if (!ce_n) begin\n                if (!adv_n_in) begin \n                    sync_addr = addr;\n                    \n                    sync_burst_length_override = (dq_in[DQ_BITS-2] && (GENERATION == CR20));\n                    sync_cre = cre_in;\n                    sync_we_n = we_n;\n\n                    if (!rbc && (sync_latency_cntr > 0)) \n                        $display (\"%t ERROR: Illegal burst interrupt.  Burst interrupt is illegal until after the first data word has been transferred.\", $realtime);\n                    last_access <= 1'b1;\n                    last_ce <= 1'b0;\n                    random_delay <= 0;\n                    row_count <= 0;\n                    rbc <= 0;\n\n                    if (!sync_we_n) begin \n                        if (DEBUG[0]) begin\n                            if (sync_cre) begin\n                                $display (\"%t  INFO:  Sync - Configuration Register Write\", $realtime);\n                            end else begin\n                                $display (\"%t  INFO:  Sync - Write\", $realtime);\n                            end\n                        end\n                    end else begin \n                        if (DEBUG[0]) begin\n                            if (sync_cre) begin\n                                $display (\"%t  INFO:  Sync - Configuration Register Read\", $realtime);\n                            end else begin\n                                $display (\"%t  INFO:  Sync - Read\", $realtime);\n                            end\n                        end\n                        \n                        if (!initial_latency && ($time - ref_collision >= tCEM)) begin\n                            ref_collision <= $time;\n                            random_delay = ($random % latency_counter);\n                            if (DEBUG[0] && (random_delay > 0)) \n                                $display (\"%t  INFO:  Sync - Read refresh collision of %d clocks has occurred.\", $realtime, random_delay);\n                        end\n                    end\n                    sync_latency_cntr = !sync_we_n + random_delay + latency_counter + 1;\n                    sync_wait = wait_polarity;\n                    sync_wait_q = wait_polarity;\n                end\n\n                if (!sync_we_n) begin\n                    if ((!sync_cre) && (oe_n !== 1))\n                        $display (\"%t ERROR: Sync - OE# must be driven high during sync writes\", $realtime);\n                end else begin\n                    if ((GENERATION > CR10) && (by_n !== {BY_BITS{1'b0}}))\n                        $display (\"%t ERROR: Sync - BY# must be LOW during READ cycles.\", $realtime);\n                end\n\n                if (row_count > 0) begin\n                    if (row_count == 1) begin\n                        $display (\"%t ERROR: CE# must go HIGH before the third CLK after the WAIT period asserts with BCR[8] = 0, or before the fourth CLK after WAIT asserts with BCR[8] = 1\", $realtime);\n                    end else begin\n                        row_count = row_count - 1;\n                    end\n                end else if (rbc) begin\n                    if (sync_latency_cntr == 2*latency_counter + 2 + !sync_we_n) begin\n                        rbc_by = by_n;\n                        rbc_dq = dq_in;\n                    end else if (sync_latency_cntr == 2) begin\n                        if (!sync_we_n) begin\n                            if (DEBUG[0]) \n                                $display (\"%t  INFO:  Sync - Write, addr = %h, Mask = %h, Data = %h - Row Boundary Crossing\", $realtime, sync_addr, rbc_by, rbc_dq);\n                            memory_write(sync_addr, rbc_by, rbc_dq);\n                            sync_addr[COL_BITS-1:0] = sync_addr[COL_BITS-1:0] + 1;\n                        end\n                        rbc <= 0;\n                    end\n                end else if (sync_latency_cntr < 2) begin \n                    next_by_out = 0;\n                    for (i=0; i<BY_BITS; i=i+1) begin\n                        next_by_out = next_by_out | ({`DQ_PER_BY{!by_n[i]}}<<(i*`DQ_PER_BY));\n                    end\n                    by_out   <= #tKOH next_by_out;\n                    data_out <= #tKOH {DQ_BITS{1'bx}};\n\n                    if (!sync_we_n) begin \n                        if (sync_cre) begin \n                            if (DEBUG[0]) \n                                $display (\"%t  INFO:  Sync - Configuration Register Write data latched, Register Select = %h, Data = %h\", $realtime, sync_addr>>REG_SEL, sync_addr);\n                            register_write(sync_addr>>REG_SEL, sync_addr[15:0], 1'b1);\n                        end else begin \n                            if (DEBUG[0]) \n                                $display (\"%t  INFO:  Sync - Write, addr = %h, Mask = %h, Data = %h\", $realtime, sync_addr, by_n, dq_in);\n                            memory_write(sync_addr, by_n, dq_in);\n                        end\n                    end else begin \n                        if (sync_cre) begin \n                            case (sync_addr>>REG_SEL)\n                                (RCR  & RCR_MASK[17:16])  : next_data_out = ref_conf_register | (RCR<<REG_SEL);\n                                (DIDR & DIDR_MASK[17:16]) : next_data_out = didr_conf_register | (DIDR<<REG_SEL);\n                                (BCR  & BCR_MASK[17:16])  : next_data_out = bus_conf_register | (BCR<<REG_SEL);\n                                default: $display (\"%t ERROR:  Sync - Illegal Register Select = %h\", $realtime, sync_addr>>REG_SEL);\n                            endcase\n                            if (DEBUG[0]) \n                                $display (\"%t  INFO:  Sync - Configuration Register Read, Register Select = %h, Data = %h\", $realtime, sync_addr>>REG_SEL, next_data_out);\n                            data_out <= #tACLK next_data_out;\n                        end else begin \n                            next_data_out = memory_read(sync_addr);\n                            if (DEBUG[0]) \n                                $display (\"%t  INFO:  Sync - Read, addr = %h, Data = %h\", $realtime, sync_addr, next_data_out);\n                            data_out <= #tACLK next_data_out;\n                        end\n                    end\n\n                    \n                    if (!sync_cre) begin\n                        \n                        \n                        if (!burst_wrap_n && (sync_we_n || (GENERATION > CR10))) begin \n                            case (burst_length | {3{sync_burst_length_override}}) \n                                3'b001 : sync_addr[         1:0] = sync_addr[         1:0] + 1;\n                                3'b010 : sync_addr[         2:0] = sync_addr[         2:0] + 1;\n                                3'b011 : sync_addr[         3:0] = sync_addr[         3:0] + 1;\n                                3'b100 : sync_addr[         4:0] = sync_addr[         4:0] + 1;\n                                3'b111 : sync_addr[COL_BITS-1:0] = sync_addr[COL_BITS-1:0] + 1;\n                            endcase\n                            $display (\"%t  INFO:  Sync - increment addr = %h\", $realtime, sync_addr);\n                        end else begin \n                            if (sync_addr[COL_BITS-1:0] == {COL_BITS{1'b1}}) begin\n                                sync_wait = wait_polarity;\n                                \n                                if (!initial_latency && (GENERATION == CR10)) begin\n                                    rbc <= 1;\n                                    sync_latency_cntr = 2*latency_counter + 3 + !sync_we_n;\n                                end else begin\n                                    row_count = 3 + (sync_we_n | !cr20wait_code);\n                                end\n                            end\n                            sync_addr[COL_BITS-1:0] = sync_addr[COL_BITS-1:0] + 1;\n                        end\n                    end\n                end\n\n                if (sync_latency_cntr == (!sync_we_n + 2)) begin\n                    sync_wait = !wait_polarity;\n                \n                end else if (cr20wait_code && !sync_we_n && burst_wrap_n && (sync_addr[COL_BITS-1:0] == {COL_BITS{1'b1}})) begin\n                    sync_wait = wait_polarity;\n                end\n            end\n        end\n\n        if (sync_latency_cntr > 0) begin\n            sync_latency_cntr <= sync_latency_cntr - 1;\n        end\n\n        if (Sync2AsyncConfig > 0) begin\n            Sync2AsyncConfig <= Sync2AsyncConfig - 1;\n        end\n\n        if (wait_configuration) begin \n            wait_out <= #tKHTL sync_wait;\n        end else begin\n            wait_out <= #tKHTL sync_wait_q;\n        end\n\n        sync_wait_q <= sync_wait;\n    end",
        "    task register_write;\n        input  [1:0] select;\n        input [15:0] opcode;\n        input        report;\n        begin\n\n            case(select)\n                BCR: begin\n                    burst_length        = opcode[2:0];\n                    burst_wrap_n        = opcode[3];\n                    drive_strength      = opcode[5:4];\n                    clock_configuration = opcode[6];\n                    wait_configuration  = opcode[8];   \n                    cr20wait            = opcode[9];\n                    cr20wait_code       = (cr20wait == CR20WAIT_POLARITY);\n                    wait_polarity       = opcode[10];\n                    latency_counter     = (opcode[13:11] == 3'b000) ? 4'd8 : opcode[13:11];\n                    initial_latency     = opcode[14];\n                    if (!operating_mode && opcode[15]) begin \n                        Sync2AsyncConfig = latency_counter;\n                    end\n                    operating_mode      = opcode[15]; \n                end\n                RCR: begin\n                    partial_array_refresh = opcode[2:0];\n                    if (software_access_unlock) begin\n                        if ((GENERATION == CR10) && (deep_power_down_n ^ opcode[4]))\n                            $display (\"%t ERROR: Deep Power Down cannot be enabled or disabled using the software access sequence\", $realtime);\n                    end\n                    \n                    if (!deep_power_down_n && opcode[4]) begin\n                        if (GENERATION == CR10) begin\n                            tm_power_up <= $realtime;\n                        end else begin\n                            if ($realtime - tm_tdpd < tDPD)\n                                $display (\"%t ERROR:  tDPD violation on CE# by %t\", $realtime, tm_tdpd + tDPD - $realtime);\n                            deep_power_down_exit <= 1'b1;\n                            tm_tdpdx <= $realtime;\n                        end\n                        if (DEBUG[0]) \n                            $display (\"%t  INFO: Deep Power Down Exit\", $realtime);\n                    end\n                    deep_power_down_n     = opcode[4];\n                    case_temp             = opcode[6:5];\n                    page_mode             = opcode[7];\n                end\n            endcase\n\n            if (report) begin\n                case(select)\n                    (BCR & BCR_MASK[17:16]): begin\n                        $display (\"%t  INFO: Register Select = BCR\", $realtime);\n                        if ((~BCR_MASK & opcode) !== (~BCR_MASK & BCR_DEFAULT))\n                            $display (\"%t ERROR: Reserved bits in BCR cannot be changed from their default value.\", $realtime);\n\n                        if (&BCR_MASK[2:0]) begin\n                            casex ({(GENERATION > CR10), burst_length})\n                                4'bx001:$display (\"%t  INFO: Burst Length =  4 words\", $realtime);\n                                4'bx010:$display (\"%t  INFO: Burst Length =  8 words\", $realtime);\n                                4'bx011:$display (\"%t  INFO: Burst Length = 16 words\", $realtime);\n                                4'b1100:$display (\"%t  INFO: Burst Length = 32 words\", $realtime);\n                                4'bx111:$display (\"%t  INFO: Burst Length = continuous\", $realtime);  \n                                default:$display (\"%t ERROR: Illegal Burst Length = %h\", $realtime, burst_length);\n                            endcase\n                        end\n\n                        if (BCR_MASK[3]) begin\n                            case (burst_wrap_n)\n                                1'b0   :$display (\"%t  INFO: Burst Wrap = Burst wraps within the burst length\", $realtime);\n                                1'b1   :$display (\"%t  INFO: Burst Wrap = Burst no wrap\", $realtime);  \n                                default:$display (\"%t ERROR: Illegal Burst Wrap = %h\", $realtime, burst_wrap_n);\n                            endcase\n                        end\n\n                        if (|BCR_MASK[5:4]) begin\n                            case (drive_strength & BCR_MASK[5:4])\n                                2'b00  :$display (\"%t  INFO: Drive Strength = Full\", $realtime);  \n                                2'b01  :$display (\"%t  INFO: Drive Strength = 1/2\", $realtime);  \n                                2'b10  :$display (\"%t  INFO: Drive Strength = 1/4\", $realtime);  \n                                default:$display (\"%t ERROR: Illegal Drive Strength = %h\", $realtime, drive_strength);\n                            endcase\n                        end\n\n                        if (BCR_MASK[6]) begin\n                            case (clock_configuration)\n                                1'b1   :$display (\"%t  INFO: Clock Configuration = Rising edge\", $realtime); \n                                default:$display (\"%t ERROR: Illegal Clock Configuration = %h\", $realtime, clock_configuration);\n                            endcase\n                        end\n\n                        if (BCR_MASK[8]) begin\n                            case (wait_configuration)\n                                1'b0   :$display (\"%t  INFO: WAIT Configuration = Asserted during delay\", $realtime); \n                                1'b1   :$display (\"%t  INFO: WAIT Configuration = Asserted one data cycle before delay\", $realtime);  \n                                default:$display (\"%t ERROR: Illegal WAIT Configuration = %h\", $realtime, wait_configuration);\n                            endcase\n                        end\n\n                        if (BCR_MASK[9]) begin\n                            case (cr20wait_code)\n                                1'b0   :$display (\"%t  INFO: CR1.5 WAIT Behavior\", $realtime); \n                                1'b1   :$display (\"%t  INFO: CR2.0 WAIT Behavior\", $realtime);\n                                default:$display (\"%t ERROR: Illegal CR2.0 WAIT Behavior = %h\", $realtime, cr20wait_code);\n                            endcase\n                        end\n\n                        if (BCR_MASK[10]) begin\n                            case (wait_polarity)\n                                1'b0   :$display (\"%t  INFO: Wait Polarity = Active LOW\", $realtime); \n                                1'b1   :$display (\"%t  INFO: Wait Polarity = Active HIGH\", $realtime);  \n                                default:$display (\"%t ERROR: Illegal Wait Polarity = %h\", $realtime, wait_polarity);\n                            endcase\n                        end\n\n                        if (&BCR_MASK[13:11]) begin\n                            casex ({initial_latency, latency_counter})\n                                5'hx2  :$display (\"%t  INFO: Latency Counter = Code 2\", $realtime);\n                                5'hx3  :$display (\"%t  INFO: Latency Counter = Code 3\", $realtime);   \n                                5'h14  :$display (\"%t  INFO: Latency Counter = Code 4\", $realtime);\n                                5'h15  :$display (\"%t  INFO: Latency Counter = Code 5\", $realtime);\n                                5'h16  :$display (\"%t  INFO: Latency Counter = Code 6\", $realtime);\n                                5'h18  :$display (\"%t  INFO: Latency Counter = Code 8\", $realtime);\n                                default:$display (\"%t ERROR: Illegal Latency Counter = %h\", $realtime, latency_counter);\n                            endcase\n                        end\n\n                        if (BCR_MASK[14]) begin\n                            case (initial_latency)\n                                1'b0   :$display (\"%t  INFO: Initial Access Latency = Variable\", $realtime);  \n                                1'b1   :$display (\"%t  INFO: Initial Access Latency = Fixed\", $realtime);\n                                default:$display (\"%t ERROR: Illegal Initial Access Latency = %h\", $realtime, initial_latency);\n                            endcase\n                        end\n\n                        if (BCR_MASK[15]) begin\n                            case (operating_mode)\n                                1'b0   :$display (\"%t  INFO: Operating Mode = Synchronous burst access mode\", $realtime);\n                                1'b1   :$display (\"%t  INFO: Operating Mode = Asynchronous access mode\", $realtime);  \n                                default:$display (\"%t ERROR: Illegal Operating Mode = %h\", $realtime, operating_mode);\n                            endcase\n                        end\n                    end\n\n                    (RCR & RCR_MASK[17:16]): begin\n                        $display (\"%t  INFO: Register Select = RCR\", $realtime);\n                        if ((~RCR_MASK & opcode) !== (~RCR_MASK & RCR_DEFAULT))\n                            $display (\"%t ERROR: Reserved bits in RCR cannot be changed from their default value.\", $realtime);\n\n                        if (RCR_MASK[2:0]) begin\n                            case (partial_array_refresh)\n                               3'b000 : begin $display (\"%t  INFO: Partial Array Refresh =       Full array\", $realtime); partial_address_size = 1<<(ADDR_BITS-0); partial_address_offset = 0; end\n                               3'b001 : begin $display (\"%t  INFO: Partial Array Refresh = Bottom 1/2 array\", $realtime); partial_address_size = 1<<(ADDR_BITS-1); partial_address_offset = 0; end\n                               3'b010 : begin $display (\"%t  INFO: Partial Array Refresh = Bottom 1/4 array\", $realtime); partial_address_size = 1<<(ADDR_BITS-2); partial_address_offset = 0; end\n                               3'b011 : begin $display (\"%t  INFO: Partial Array Refresh = Bottom 1/8 array\", $realtime); partial_address_size = 1<<(ADDR_BITS-3); partial_address_offset = 0; end\n                               3'b100 : begin $display (\"%t  INFO: Partial Array Refresh =             None\", $realtime); partial_address_size = 0;                partial_address_offset = 0; end\n                               3'b101 : begin $display (\"%t  INFO: Partial Array Refresh =    Top 1/2 array\", $realtime); partial_address_size = 1<<(ADDR_BITS-1); partial_address_offset = (1<<ADDR_BITS) - partial_address_size; end\n                               3'b110 : begin $display (\"%t  INFO: Partial Array Refresh =    Top 1/4 array\", $realtime); partial_address_size = 1<<(ADDR_BITS-2); partial_address_offset = (1<<ADDR_BITS) - partial_address_size; end\n                               3'b111 : begin $display (\"%t  INFO: Partial Array Refresh =    Top 1/8 array\", $realtime); partial_address_size = 1<<(ADDR_BITS-3); partial_address_offset = (1<<ADDR_BITS) - partial_address_size; end\n                               default: begin $display (\"%t ERROR: Illegal Partial Array Refresh = %h\", $realtime, partial_array_refresh); end\n                            endcase\n                        end\n\n                        if (RCR_MASK[4]) begin\n                            case (deep_power_down_n)\n                               1'b0   : $display (\"%t  INFO: Deep Power Down = DPD Enable\", $realtime);\n                               1'b1   : $display (\"%t  INFO: Deep Power Down = DPD Disable\", $realtime);\n                               default: $display (\"%t ERROR: Illegal Deep Power Down = %h\", $realtime, deep_power_down_n);\n                            endcase\n                        end\n\n                        if (&RCR_MASK[6:5]) begin\n                            case (case_temp)\n                               2'b00  : $display (\"%t  INFO: Maximum Case Temp = 70 degrees C\", $realtime);\n                               2'b01  : $display (\"%t  INFO: Maximum Case Temp = 45 degrees C\", $realtime);\n                               2'b10  : $display (\"%t  INFO: Maximum Case Temp = 15 degrees C\", $realtime);\n                               2'b11  : $display (\"%t  INFO: Maximum Case Temp = 85 degrees C\", $realtime);\n                               default: $display (\"%t ERROR: Illegal Maximum Case Temp = %h\", $realtime, case_temp);\n                            endcase\n                        end\n\n                        if (RCR_MASK[7]) begin\n                            case (page_mode)\n                               1'b0   : $display (\"%t  INFO: Page Mode = Page Mode Disabled\", $realtime);\n                               1'b1   : $display (\"%t  INFO: Page Mode = Page Mode Enable\", $realtime);\n                               default: $display (\"%t ERROR: Illegal Page Mode = %h\", $realtime, page_mode);\n                            endcase\n                        end\n                    end\n                    (DIDR & DIDR_MASK[17:16]): begin\n                        $display (\"%t  INFO: Register Select = DIDR\", $realtime);\n                        $display (\"%t ERROR: DIDR Configuration Register is read-only\", $realtime);\n                    end\n                    default: begin\n                        $display (\"%t ERROR: Illegal Register Select = %d\", $realtime, select);\n                    end\n                endcase\n            end\n        end\n    endtask",
        "    function [DQ_BITS-1:0] memory_read;\n        input [ADDR_BITS-1:0] addr;\n        begin\n            if (partial_address_size == 0) begin\n                $display (\"%t  WARN: Illegal Address = %h.  Address range is NULL\", $realtime, addr);\n                memory_read = {DQ_BITS{1'bx}};\n            end else if ((addr < partial_address_offset) || (addr > partial_address_offset + partial_address_size - 1)) begin\n                $display (\"%t  WARN: Illegal Address = %h.  Address range is %h - %h\", $realtime, addr, partial_address_offset, partial_address_offset + partial_address_size - 1);\n                memory_read = {DQ_BITS{1'bx}};\n            end else begin\n                if (memory_addr_exists(addr)) begin\n                    memory_read = memory[memory_index];\n                end else begin\n                    memory_read = {DQ_BITS{1'bx}};\n                end\n            end\n        end\n    endfunction",
        "    task memory_write;\n        input [ADDR_BITS-1:0] addr;\n        input [BY_BITS-1:0] data_mask;\n        input [DQ_BITS-1:0] data;\n\n        reg [DQ_BITS-1:0] bit_mask;\n        reg [DQ_BITS-1:0] write_data;\n        integer i;\n        begin : memory_write_task\n            if (par_enabled && (partial_address_size == 0)) begin\n                $display (\"%t  WARN: Illegal Address = %h.  Address range is NULL\", $realtime, addr);\n                disable memory_write_task; \n            end else if (par_enabled && ((addr < partial_address_offset) || (addr > partial_address_offset + partial_address_size - 1))) begin\n                $display (\"%t  WARN: Illegal Address = %h.  Address range is %h - %h\", $realtime, addr, partial_address_offset, partial_address_offset + partial_address_size - 1);\n                disable memory_write_task; \n            end else if (addr > (1<<ADDR_BITS) - 1) begin\n                $display (\"%t  WARN: Illegal Address = %h.  Max Address is %h\", $realtime, addr, (1<<ADDR_BITS) - 1);\n                disable memory_write_task; \n            end else if (data_mask == {BY_BITS{1'b1}}) begin\n                disable memory_write_task; \n            end else if (data_mask == {BY_BITS{1'b0}}) begin\n                write_data = {DQ_BITS{1'b1}} & data;\n            end else begin\n                bit_mask = 0;\n                for (i=0; i<BY_BITS; i=i+1) begin\n                    bit_mask = bit_mask | ({`DQ_PER_BY{!data_mask[i]}}<<(i*`DQ_PER_BY));\n                end\n                write_data = (data & bit_mask) | (memory_read(addr) & ~bit_mask);\n            end\n\n            if (memory_used == 1<<MEM_BITS) begin\n                $display (\"%t ERROR: Memory overflow.  Write to Address %h with Data %h will be lost.\\nYou must increase the MEM_BITS parameter.\", $realtime, addr, data);\n                $stop(0);\n            end else begin\n                if (!memory_addr_exists(addr)) begin\n                    memory_used = memory_used + 1;\n                end\n                memory_addr[memory_index] = addr;\n                memory[memory_index] = write_data;\n            end\n        end\n    endtask",
        "    function memory_addr_exists;\n        input [ADDR_BITS-1:0] addr;\n        begin : index\n            memory_addr_exists = 0;\n            for (memory_index=0; memory_index<memory_used; memory_index=memory_index+1) begin\n                if (memory_addr[memory_index] == addr) begin\n                    memory_addr_exists = 1;\n                    disable index;\n                end\n            end\n        end\n    endfunction",
        "    always @(par_enabled or partial_address_offset or partial_address_size) begin : corrupt_memory\n        integer i;\n        if (par_enabled) begin\n            i = 0;\n            \n            if (partial_address_size > 0) begin\n                for (memory_index=0; memory_index<memory_used; memory_index=memory_index+1) begin\n                    if ((memory_addr[memory_index] > partial_address_offset) && (memory_addr[memory_index] < partial_address_offset + partial_address_size)) begin\n                        memory_addr[i] = memory_addr[memory_index];\n                        memory[i] = memory[memory_index];\n                        i = i + 1;\n                    end\n                end\n            end\n            \n            for (memory_index=i; memory_index<memory_used; memory_index=memory_index+1) begin\n                memory_addr[memory_index] = 'bx;\n                memory[memory_index] = {DQ_BITS{1'bx}};\n            end\n            memory_used = i;\n        end\n    end",
        "    always @(sync_access or ce2wi or we_n or oe_n or by_n or zz_n_in or async_cre or async_addr) begin\n        if (sync_access) begin\n            software_access_unlock <= 2'b0;\n            async_state = IDLE;\n        end else begin\n\n            \n            if ((async_state == WR) && ((last_ce2wi && !ce2wi) || (!last_we_n && we_n) || |(~last_by_n & by_n))) begin\n                if ($realtime - tm_tcw < tCW) \n                    $display (\"%t ERROR:   tCW violation on CE# by %t\", $realtime, tm_tcw + tCW - $realtime);\n                if ($realtime - tm_adv_n_neg < tVS) \n                    $display (\"%t ERROR:   tVS violation on ADV# by %t\", $realtime, tm_adv_n_neg + tVS - $realtime);\n                if ($realtime - tm_tbw < tBW) \n                    $display (\"%t ERROR:   tBW violation on BY# by %t\", $realtime, tm_tbw + tBW - $realtime);\n                if ($realtime - tm_we_n < tWP)\n                    $display (\"%t ERROR:   tWP violation on WE# by %t\", $realtime, tm_we_n + tWP - $realtime);\n                if ($realtime - tm_async_cre < tAW) \n                    $display (\"%t ERROR:   tAW violation on CRE by %t\", $realtime, tm_async_cre + tAW - $realtime);\n                if ($realtime - tm_async_addr < tAW)\n                    $display (\"%t ERROR:   tAW violation on ADDR by %t\", $realtime, tm_async_addr + tAW - $realtime);\n                if ($realtime - tm_dq_tdw < tDW) \n                    $display (\"%t ERROR:   tDW violation on DQ by %t\", $realtime, tm_dq_tdw + tDW - $realtime);\n                if (($realtime - tm_async_addr < tWC) || ($realtime - tm_tcw < tWC))\n                    $display (\"%t ERROR:   tWC violation on ADDR\", $realtime);\n\n                if ((async_addr == {ADDR_BITS{1'b1}}) && (software_access_unlock == 2)) begin\n                    case (last_dq[1:0])\n                       (2'b00 & RCR_MASK[17:16])  : software_access_which_reg <= RCR;\n                       (2'b10 & DIDR_MASK[17:16]) : software_access_which_reg <= DIDR;\n                       (2'b01 & BCR_MASK[17:16])  : software_access_which_reg <= BCR;\n                       default: $display (\"%t ERROR: Async - Illegal Register Select = %h\", $realtime, last_dq[1:0]);\n                    endcase\n                    if (DEBUG[0]) \n                        $display (\"%t  INFO: Async - Software Access Unlock = %d, Register Select = %h\", $realtime, software_access_unlock, last_dq[1:0]);\n                    software_access_unlock <= software_access_unlock + 1;\n                end else if ((async_addr == {ADDR_BITS{1'b1}}) && (software_access_unlock == 3)) begin\n                    if (DEBUG[0]) \n                        $display (\"%t  INFO: Async - Software Access Write, Data = %h\", $realtime, last_dq[15:0]);\n                    register_write(software_access_which_reg, last_dq[15:0], 1'b1);\n                    software_access_unlock <= 2'b0;\n                end else begin\n                    memory_write(async_addr, last_by_n, last_dq);\n                    software_access_unlock <= 2'b0;\n                    if (DEBUG[0]) \n                        $display (\"%t  INFO: Async - Write data latched, addr = %h, Mask = %h, Data = %h\", $realtime, async_addr, last_by_n, last_dq);\n                end\n                async_state = IDLE;\n                async_wr_lockout = 1;\n                tavh_check <= #tAVH 1'b0;\n                tow_check <= #tOW 1'b1;\n            end\n\n            \n            if ((async_state == CFG_WR) && ((last_ce2wi && !ce2wi) || (!last_we_n && we_n))) begin\n                if ($realtime - tm_tcw < tCW) \n                    $display (\"%t ERROR:   tCW violation on CE# by %t\", $realtime, tm_tcw + tCW - $realtime);\n                if ($realtime - tm_adv_n_neg < tVS) \n                    $display (\"%t ERROR:   tVS violation on ADV# by %t\", $realtime, tm_adv_n_neg + tVS - $realtime);\n                if ($realtime - tm_tbw < tBW) \n                    $display (\"%t ERROR:   tBW violation on BY# by %t\", $realtime, tm_tbw + tBW - $realtime);\n                if ($realtime - tm_we_n < tWP)\n                    $display (\"%t ERROR:   tWP violation on WE# by %t\", $realtime, tm_we_n + tWP - $realtime);\n                if ($realtime - tm_async_cre < tAW) \n                    $display (\"%t ERROR:   tAW violation on CRE by %t\", $realtime, tm_async_cre + tAW - $realtime);\n                if ($realtime - tm_async_addr < tAW)\n                    $display (\"%t ERROR:   tAW violation on ADDR by %t\", $realtime, tm_async_addr + tAW - $realtime);\n                if ($realtime - tm_dq_tdw < tDW) \n                    $display (\"%t ERROR:   tDW violation on DQ by %t\", $realtime, tm_dq_tdw + tDW - $realtime);\n                if (($realtime - tm_async_addr < tWC) || ($realtime - tm_tcw < tWC))\n                    $display (\"%t ERROR:   tWC violation on ADDR\", $realtime);\n\n                if (DEBUG[0]) \n                    $display (\"%t  INFO: Async - Configuration Register Write data latched, Register Select = %h, Data = %h\", $realtime, async_addr>>REG_SEL, async_addr);\n                register_write(async_addr>>REG_SEL, async_addr[15:0], 1'b1);\n                software_access_unlock <= 2'b0;\n                async_state = IDLE;\n                async_wr_lockout = 1;\n                tow_check <= #tOW 1'b1;\n                tavh_check <= #tAVH 1'b0;\n                tm_write_end = $realtime;\n           end\n\n            \n            if (async_state == RD) begin\n                if (last_ce2wi && !ce2wi) begin\n                    if (($realtime - tm_upper_addr < tRC) || ($realtime - tm_tcw < tRC))\n                        $display (\"%t ERROR:   tRC violation on ADDR\", $realtime);\n                    if ($realtime - tm_page_addr3 < tPC) $display (\"%t ERROR:   tPC violation on ADDR bit %d by %t\", $realtime, i, tm_page_addr3 + tPC - $realtime);\n                    if ($realtime - tm_page_addr2 < tPC) $display (\"%t ERROR:   tPC violation on ADDR bit %d by %t\", $realtime, i, tm_page_addr2 + tPC - $realtime);\n                    if ($realtime - tm_page_addr1 < tPC) $display (\"%t ERROR:   tPC violation on ADDR bit %d by %t\", $realtime, i, tm_page_addr1 + tPC - $realtime);\n                    if ($realtime - tm_page_addr0 < tPC) $display (\"%t ERROR:   tPC violation on ADDR bit %d by %t\", $realtime, i, tm_page_addr0 + tPC - $realtime);\n                    async_state = IDLE;\n                end else if (!last_oe_n && oe_n) begin\n                    async_state = IDLE;\n                end\n            end\n\n            \n            if (!last_we_n && we_n) begin\n                async_wr_lockout = 0;\n            end\n            \n            if (last_ce2wi && !ce2wi) begin\n                tavh_check <= #tAVH 1'b0;\n            end\n\n            \n            if (!async_wr_lockout && ce2wi && !we_n && !async_cre) begin\n                if (async_state == WR) begin\n                    $display (\"%t ERROR: Async - Illegal or unintended Page Mode Write.\", $realtime);\n                end\n                async_state = WR;\n                last_access <= 1'b0;\n                last_ce <= 1'b0;\n                tavh_check <= 1'b1;\n                if (DEBUG[0]) \n                    $display (\"%t  INFO: Async - Write\", $realtime);\n            end\n            if (!async_wr_lockout && ce2wi && !we_n && (async_cre || !zz_n_in) && ((GENERATION != CR20) || oe_n)) begin\n                if (async_state == CFG_WR) begin\n                    $display (\"%t ERROR: Async - Page Mode Configuration Register Write is Illegal.\", $realtime);\n                end\n                async_state = CFG_WR;\n                last_access <= 1'b0;\n                last_ce <= 1'b0;\n                tavh_check <= 1'b1;\n                if (DEBUG[0]) \n                    $display (\"%t  INFO: Async - Configuration Register Write\", $realtime);\n            end\n            if (ce2wi && !oe_n && we_n && !async_cre) begin\n                next_data_out = {DQ_BITS{1'bx}};\n                if (!page_mode && (async_state == RD))\n                    $display (\"%t ERROR: Async - Illegal or unintended Page Mode Read.  Page mode is disabled in BCR\", $realtime);\n                if ((GENERATION > CR10) && (by_n !== {BY_BITS{1'b0}}))\n                    $display (\"%t ERROR: Async - BY# must be LOW during READ cycles.\", $realtime);\n                if (async_addr == {ADDR_BITS{1'b1}} && (software_access_unlock == 3)) begin\n                    case (software_access_which_reg)\n                        RCR  : next_data_out = ref_conf_register | (RCR<<REG_SEL);\n                        DIDR : next_data_out = didr_conf_register | (DIDR<<REG_SEL);\n                        BCR  : next_data_out = bus_conf_register | (BCR<<REG_SEL);\n                    endcase\n                    if (DEBUG[0]) \n                        $display (\"%t  INFO: Async - Software Access Read, Data = %h\", $realtime, next_data_out);\n                    software_access_unlock <= 2'b0;\n                end else begin \n                    next_data_out = memory_read(async_addr);\n                    if (DEBUG[0]) \n                        $display (\"%t  INFO: Async - Read, addr = %h, Data = %h\", $realtime, async_addr, next_data_out);\n                    if (async_addr == {ADDR_BITS{1'b1}}) begin\n                        if (software_access_unlock < 2) begin\n                            if (DEBUG[0]) \n                                $display (\"%t  INFO: Async - Software Access Unlock = %d\", $realtime, software_access_unlock);\n                            software_access_unlock <= software_access_unlock + 1;\n                        end\n                    end else begin\n                        software_access_unlock <= 2'b0;\n                    end\n                end\n                data_out <= #tOH {DQ_BITS{1'bx}};\n                if (async_state == RD) begin\n                    data_out <= #tAPA next_data_out;\n                end else begin\n                    data_out <= #tOE next_data_out;\n                end\n                async_state = RD;\n                last_access <= 1'b0;\n                last_ce <= 1'b0;\n                tavh_check <= 1'b1;\n            end\n            if (ce2wi && !oe_n && we_n && async_cre) begin\n                next_data_out = {DQ_BITS{1'bx}};\n                if (async_state == RD)\n                    $display (\"%t ERROR: Async - Page Mode Configuration Register Read is Illegal.\", $realtime);\n                if ((GENERATION > CR10) && (by_n !== {BY_BITS{1'b0}}))\n                    $display (\"%t ERROR: Async - BY# must be LOW during READ cycles.\", $realtime);\n                if (!CRE_READ)\n                    $display (\"%t ERROR: Async - Access using CRE is WRITE only.\", $realtime);\n                case (async_addr>>REG_SEL)\n                    (RCR  & RCR_MASK[17:16])  : next_data_out = ref_conf_register | (RCR<<REG_SEL);\n                    (DIDR & DIDR_MASK[17:16]) : next_data_out = didr_conf_register | (DIDR<<REG_SEL);\n                    (BCR  & BCR_MASK[17:16])  : next_data_out = bus_conf_register | (BCR<<REG_SEL);\n                    default: $display (\"%t ERROR: Async - Illegal Register Select = %h\", $realtime, async_addr>>REG_SEL);\n                endcase\n                if (DEBUG[0]) \n                    $display (\"%t  INFO: Async - Configuration Register Read, Register Select = %h, Data = %h\", $realtime, async_addr>>REG_SEL, next_data_out);\n                software_access_unlock <= 2'b0;\n                data_out <= #tOH {DQ_BITS{1'bx}};\n                data_out <= #tOE next_data_out;\n                async_state = RD;\n                last_access <= 1'b0;\n                last_ce <= 1'b0;\n                tavh_check <= 1'b1;\n            end\n\n            if (ce2wi) begin\n                next_by_out = 0;\n                for (i=0; i<BY_BITS; i=i+1) begin\n                    next_by_out = next_by_out | ({`DQ_PER_BY{!by_n[i]}}<<(i*`DQ_PER_BY));\n                end\n                by_out <= #tOH next_by_out;\n            end\n        end\n    end",
        "    always @(negedge adv_n or posedge ce_n) begin \n        sync_access <= 1'b0; \n    end",
        "    always @(posedge clk) sync_access <= !ce_n;",
        "    assign data_out_enable = ce2dqe && oe2dqe && we2dqe && by2dqe;\n    assign variable_sync   = !operating_mode && !initial_latency && sync_access; \n    assign data_out_valid  = we2dq && ((!variable_sync && ce2dq && oe2dq && by2dq && adv2dq && addr2dq) || (variable_sync && soe2dq && saddr2dq));\n    assign wait_out_enable = cr20wait_code ? ce2waite && (oe2waite || clk2waite) && we2waite : ce2waite;\n    assign wait_out_valid  = cr20wait_code ? ce2wait  && (oe2wait  || clk2waite) : ce2wait;",
        "    cellram_pathdelay cellram_pathdelay0 (\n        clk_in,\n        adv_n_in,\n        zz_n_in,\n        ce_n, \n        oe_n, \n        we_n, \n        by_n, \n        async_addr,\n        clk2waite,\n        adv2dqe,\n        adv2dq,\n        adv2wi,\n        zz2pd,\n        ce2dqe, \n        ce2dq,\n        ce2cem,\n        ce2wi,\n        ce2waite,\n        ce2wait,\n        ce2rst,\n        oe2dqe,\n        oe2dq,\n        soe2dq,\n        oe2waite,\n        oe2wait,\n        we2dqe,\n        we2dq,\n        we2waite,\n        by2dqe,\n        by2dq,\n        addr2dq,\n        addr2wi,\n        saddr2dq\n    );",
        "    always @(adv_n_in or cre_in) begin\n        if (!adv_n_in) begin\n            async_cre <= cre_in;\n            tm_async_cre <= $realtime;\n        end\n    end",
        "    always @(adv_n_in or addr[ADDR_BITS-1:4]) begin\n        if (!adv_n_in) begin\n            tm_upper_addr <= $realtime;\n        end\n    end",
        "    always @(adv_n_in or addr) begin\n        if (!adv_n_in) begin\n            async_addr <= addr;\n            tm_async_addr <= $realtime;\n        end\n    end",
        "    always @(ce_n) begin\n        if (!ce_n) begin\n            if (DEBUG[0]) \n                $display(\"===============================================================\");\n            wait_out <= wait_polarity;\n        end else begin\n            if (!rbc && (sync_latency_cntr > 0)) begin\n                memory_write(sync_addr, {BY_BITS{1'b0}}, {DQ_BITS{1'bx}});\n                $display (\"%t ERROR: Data at address 'h%h has been corrupted because CE# was deasserted prior to the first data transfer.\", $realtime, sync_addr);\n            end\n            last_ce <= 1'b1;\n            sync_latency_cntr <= 0;\n            random_delay <= 0;\n            row_count <= 0;\n            rbc <= 0;\n        end\n\n        \n        if (!last_ce_n && ce_n) begin\n            if (!deep_power_down_n) begin \n                if (DEBUG[0]) \n                    $display (\"%t  INFO: Async - Deep Power Down Entry\", $realtime);\n                memory_used = 0;\n            end\n            if (deep_power_down_exit) begin\n                if ($realtime - tm_tdpdx < tDPDX)\n                    $display (\"%t ERROR: tDPDX violation on CE# by %t\", $realtime, tm_tdpdx + tDPDX - $realtime);\n                deep_power_down_exit <= 1'b0;\n                tm_power_up <= $realtime;\n            end\n        end else if (last_ce_n && !ce_n) begin\n            \n            \n            if ((GENERATION > CR10) && !deep_power_down_n) begin\n                register_write(RCR, ref_conf_register | 16'h0010, 1'b0);\n            end\n        end\n    end",
        "    initial begin\n        $timeformat (-9, 3, \" ns\", 1);\n        sync_access <= 1'b0;\n        software_access_rcr_write = 1'b0;\n        async_wr_lockout = 0;\n        ref_collision <= 0;\n        tm_power_up <= 0.0;\n        register_write(BCR, BCR_DEFAULT, 1'b0);\n        register_write(RCR, RCR_DEFAULT, 1'b0);\n        memory_used = 0;\n    end",
        "    wire [31:0] dq_out_buf = (data_out_valid ? data_out : {32{1'bx}} );\n    bufif1 buf_dq [31:0]  (dq_out, dq_out_buf, {{32 - DQ_BITS{1'b0}} , {DQ_BITS{data_out_enable}} & by_out});",
        "    assign wait_o = wait_out_enable ? (wait_out_valid ? wait_out : 1'bx) : 1'bz;",
        "    initial                       par_enabled <= 1'b1; "
    ]
}