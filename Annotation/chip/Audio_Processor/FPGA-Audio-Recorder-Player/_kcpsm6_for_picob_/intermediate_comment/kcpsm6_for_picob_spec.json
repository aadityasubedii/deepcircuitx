{
    "spec": "Module name: kcpsm6. Module specification: The kcpsm6 module implements a PicoBlaze-6 soft microcontroller core, featuring an arithmetic logic unit (ALU), register banks, program counter, stack, and scratch pad memory. It decodes and executes instructions, handles interrupts, and provides input/output interfaces. The module has input ports for instruction (18-bit), in_port (8-bit), interrupt, sleep, reset, and clock signals, while its output ports include address (12-bit), bram_enable, out_port (8-bit), port_id (8-bit), write_strobe, k_write_strobe, read_strobe, and interrupt_ack. Internally, it uses numerous signals for control (e.g., t_state, run, internal_reset), ALU operations (e.g., arith_logical_sel",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: kcpsm6\n\nExplanation: This module implements a PicoBlaze-6 soft microcontroller core. It includes the processor's arithmetic logic unit (ALU), register banks, program counter, stack, and scratch pad memory. The module decodes and executes instructions, handles interrupts, and provides input/output interfaces. It also includes simulation-related code for displaying the current instruction, processor status, and register contents during simulation."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\n[17:0] instruction, [7:0] in_port, interrupt, sleep, reset, clk\n\nExplanation:\n- instruction: 18-bit wide input for fetching instructions from program memory\n- in_port: 8-bit input port for receiving data from external devices\n- interrupt: Input signal to trigger an interrupt\n- sleep: Input to put the processor in sleep mode\n- reset: Input to reset the processor\n- clk: Clock input for synchronizing operations\n\nOutput ports:\n[11:0] address, bram_enable, [7:0] out_port, [7:0] port_id, write_strobe, k_write_strobe, read_strobe, interrupt_ack\n\nExplanation:\n- address: 12-bit output to address program memory\n- bram_enable: Output to enable block RAM (program memory)\n- out_port: 8-bit output port for sending data to external devices\n- port_id: 8-bit port address for I/O operations\n- write_strobe: Output signal indicating a write operation\n- k_write_strobe: Constant-specific write strobe\n- read_strobe: Output signal indicating a read operation\n- interrupt_ack: Interrupt acknowledgment signal"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\nt_state_value, t_state, run_value, run, internal_reset_value, internal_reset, sync_sleep, int_enable_type, interrupt_enable_value, interrupt_enable, sync_interrupt, active_interrupt_value, active_interrupt, arith_logical_sel, arith_carry_in, arith_carry_value, arith_carry, half_arith_logical, logical_carry_mask, carry_arith_logical, arith_logical_value, arith_logical_result, shift_rotate_value, shift_rotate_result, shift_in_bit, alu_result, alu_mux_sel_value, alu_mux_sel, strobe_type, write_strobe_value, k_write_strobe_value, read_strobe_value, flag_enable_type, flag_enable_value, flag_enable, lower_parity, lower_parity_sel, carry_lower_parity, upper_parity, parity, shift_carry_value, shift_carry, carry_flag_value, carry_flag, use_zero_flag_value, use_zero_flag, drive_carry_in_zero, carry_in_zero, lower_zero, lower_zero_sel, carry_lower_zero, middle_zero, middle_zero_sel, carry_middle_zero, upper_zero_sel, zero_flag_value, zero_flag, spm_enable_value, spm_enable, spm_ram_data, spm_data, regbank_type, bank_value, bank, loadstar_type, sx_addr4_value, register_enable_type, register_enable_value, register_enable, sx_addr, sy_addr, sx, sy, sy_or_kk, pc_move_is_valid, move_type, returni_type, pc_mode, register_vector, half_pc, carry_pc, pc_value, pc, pc_vector, push_stack, pop_stack, stack_memory, return_vector, stack_carry_flag, shadow_carry_flag, stack_zero_flag, shadow_zero_value, shadow_zero_flag, stack_bank, shadow_bank, stack_bit, special_bit, half_pointer_value, feed_pointer_value, stack_pointer_carry, stack_pointer_value, stack_pointer.\n\nExplanation:\nThese internal signals are used for various purposes within the module, including:\n- Control signals (e.g., t_state, run, internal_reset)\n- ALU operations (e.g., arith_logical_sel, arith_carry, shift_rotate_value)\n- Flags and status (e.g., carry_flag, zero_flag, interrupt_enable)\n- Memory operations (e.g., spm_enable, spm_data)\n- Register bank management (e.g., bank, sx_addr, sy_addr)\n- Program counter and stack operations (e.g., pc_value, stack_pointer)\n- Instruction decoding and execution (e.g., pc_move_is_valid, move_type)\n\nThese signals work together to implement the functionality of the PicoBlaze-6 soft microcontroller, handling instruction execution, data processing, memory access, and I/O operations."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\n\n\n\n\n(* CORE_GENERATION_INFO = \"kcpsm6,kcpsm6_v1_3,{component_name=kcpsm6}\" *)\nmodule kcpsm6 (address, instruction, bram_enable, in_port, out_port, port_id, write_strobe, k_write_strobe, read_strobe, interrupt, interrupt_ack, sleep, reset, clk) ;\n\nparameter [7:0] \thwbuild = 8'h00 ;\nparameter [11:0] \tinterrupt_vector = 12'h3FF ;\nparameter integer scratch_pad_memory_size = 64 ;   \n\noutput [11:0]\taddress ;\ninput\t [17:0]    \tinstruction ;\noutput\t\tbram_enable ;\ninput\t [7:0]\tin_port ;\noutput [7:0]\tout_port ;\noutput [7:0]\tport_id ;\noutput\t\twrite_strobe ;\noutput\t\tk_write_strobe ;\noutput\t\tread_strobe ;\ninput\t\t\tinterrupt ;\noutput\t\tinterrupt_ack ;\ninput\t\t\tsleep ;\ninput\t\t\treset ;\ninput\t\t\tclk ;\n\n\n\n\n\n\n\n\n\n\n\n\n\nwire\t[2:1]\t\tt_state_value ;\nwire\t[2:1]\t\tt_state ;\nwire \t\t\trun_value ;\nwire              run ;\nwire  \t\tinternal_reset_value ;\nwire \t\t\tinternal_reset ;\nwire \t\t\tsync_sleep ;\nwire \t\t\tint_enable_type ;\nwire \t\t\tinterrupt_enable_value ;\nwire\t\t\tinterrupt_enable ;\nwire\t\t\tsync_interrupt ;\nwire \t\t\tactive_interrupt_value ;\nwire \t\t\tactive_interrupt ;\n\n\n\nwire\t[2:0]\t\tarith_logical_sel ;\nwire\t\t\tarith_carry_in ;\nwire\t\t\tarith_carry_value ;\nwire\t\t\tarith_carry ;\nwire \t[7:0]\t\thalf_arith_logical ;\nwire \t[7:0]\t\tlogical_carry_mask ;\nwire \t[7:0]\t\tcarry_arith_logical ;\nwire \t[7:0]\t\tarith_logical_value ;\nwire \t[7:0]\t\tarith_logical_result ;\n\n\n\nwire \t[7:0]\t\tshift_rotate_value ;\nwire \t[7:0]\t\tshift_rotate_result ;\nwire\t\t\tshift_in_bit ;\n\n\n\nwire \t[7:0]\t\talu_result ;\nwire \t[1:0]\t\talu_mux_sel_value ;\nwire \t[1:0]\t\talu_mux_sel ;\n\n\n\nwire\t\t\tstrobe_type ;\nwire \t\t\twrite_strobe_value ;\nwire \t\t\tk_write_strobe_value ;\nwire\t\t\tread_strobe_value ;\n\n\n\nwire\t\t\tflag_enable_type ;\nwire\t\t\tflag_enable_value ;\nwire\t\t\tflag_enable ; \nwire\t\t\tlower_parity ;\nwire\t\t\tlower_parity_sel ;\nwire\t\t\tcarry_lower_parity ;\nwire \t\t\tupper_parity ;\nwire\t\t\tparity ;\nwire\t\t\tshift_carry_value ;\nwire\t\t\tshift_carry ;\nwire\t\t\tcarry_flag_value ;\nwire\t\t\tcarry_flag ;\n\nwire \t\t\tuse_zero_flag_value ;\nwire\t\t\tuse_zero_flag ;\nwire \t\t\tdrive_carry_in_zero ;\nwire          \tcarry_in_zero ;\nwire             \tlower_zero ;\nwire         \tlower_zero_sel ;\nwire       \t\tcarry_lower_zero ;\nwire           \tmiddle_zero ;\nwire        \tmiddle_zero_sel ;\nwire      \t\tcarry_middle_zero ;\nwire         \tupper_zero_sel ;\nwire        \tzero_flag_value ;\nwire              zero_flag ;\n\n\n\nwire       \t\tspm_enable_value ;\nwire             \tspm_enable ;\nwire \t[7:0]\t\tspm_ram_data ;\nwire \t[7:0]\t\tspm_data  ;\n\n\n\nwire           \tregbank_type ;\nwire             \tbank_value ;\nwire              bank ;\nwire          \tloadstar_type ;\nwire         \tsx_addr4_value ;\nwire   \t\tregister_enable_type ;\nwire  \t\tregister_enable_value ;\nwire        \tregister_enable ;\nwire \t[4:0]\t\tsx_addr ;\nwire \t[4:0]\t\tsy_addr ;\nwire \t[7:0]\t\tsx ;\nwire \t[7:0]\t\tsy ;\n\n\n\nwire \t[7:0]\t\tsy_or_kk ;\n\n\n\nwire       \t\tpc_move_is_valid ;\nwire              move_type ;\nwire           \treturni_type ;\nwire \t[2:0]\t\tpc_mode ;\nwire \t[11:0]\tregister_vector ;\nwire \t[11:0]\thalf_pc ;\nwire \t[10:0]\tcarry_pc ;\nwire \t[11:0]\tpc_value ;\nwire \t[11:0]\tpc ;\nwire \t[11:0]\tpc_vector ;\n\n\n\nwire             \tpush_stack ;\nwire              pop_stack ;\nwire \t[11:0]\tstack_memory ;\nwire \t[11:0]\treturn_vector ;\nwire       \t\tstack_carry_flag ;\nwire      \t\tshadow_carry_flag ;\nwire        \tstack_zero_flag ;\nwire      \t\tshadow_zero_value ;\nwire       \t\tshadow_zero_flag ;\nwire             \tstack_bank ;\nwire            \tshadow_bank ;\nwire              stack_bit ;\nwire            \tspecial_bit ;\nwire \t[4:0]\t\thalf_pointer_value ;\nwire \t[4:0]\t\tfeed_pointer_value ;\nwire \t[4:0]\t\tstack_pointer_carry ;\nwire \t[4:0]\t\tstack_pointer_value ;\nwire \t[4:0]\t\tstack_pointer ;\n\n\n\n\n\n\n\n\n\nreg\t[1:152]\tkcpsm6_opcode ;\nreg\t[1:128]\tkcpsm6_status ;\nreg\t[7:0]\t      sim_s0 ;\nreg\t[7:0]\t      sim_s1 ;\nreg\t[7:0]\t      sim_s2 ;\nreg\t[7:0]\t      sim_s3 ;\nreg\t[7:0]\t      sim_s4 ;\nreg\t[7:0]\t      sim_s5 ;\nreg\t[7:0]\t      sim_s6 ;\nreg\t[7:0]\t      sim_s7 ;\nreg\t[7:0]\t      sim_s8 ;\nreg\t[7:0]\t      sim_s9 ;\nreg\t[7:0]\t      sim_sA ;\nreg\t[7:0]\t      sim_sB ;\nreg\t[7:0]\t      sim_sC ;\nreg\t[7:0]\t      sim_sD ;\nreg\t[7:0]\t      sim_sE ;\nreg\t[7:0]\t      sim_sF ;\nreg\t[7:0]\t     \tsim_spm00 ;\nreg\t[7:0]\t\tsim_spm01 ;\nreg\t[7:0]\t\tsim_spm02 ;\nreg\t[7:0]\t\tsim_spm03 ;\nreg\t[7:0]\t\tsim_spm04 ;\nreg\t[7:0]\t\tsim_spm05 ;\nreg\t[7:0]\t\tsim_spm06 ;\nreg\t[7:0]\t\tsim_spm07 ;\nreg\t[7:0]\t\tsim_spm08 ;\nreg\t[7:0]\t\tsim_spm09 ;\nreg\t[7:0]\t\tsim_spm0A ;\nreg\t[7:0]\t\tsim_spm0B ;\nreg\t[7:0]\t\tsim_spm0C ;\nreg\t[7:0]\t\tsim_spm0D ;\nreg\t[7:0]\t\tsim_spm0E ;\nreg\t[7:0]\t\tsim_spm0F ;\nreg\t[7:0]\t\tsim_spm10 ;\nreg\t[7:0]\t\tsim_spm11 ;\nreg\t[7:0]\t\tsim_spm12 ;\nreg\t[7:0]\t\tsim_spm13 ;\nreg\t[7:0]\t\tsim_spm14 ;\nreg\t[7:0]\t\tsim_spm15 ;\nreg\t[7:0]\t\tsim_spm16 ;\nreg\t[7:0]\t\tsim_spm17 ;\nreg\t[7:0]\t\tsim_spm18 ;\nreg\t[7:0]\t\tsim_spm19 ;\nreg\t[7:0]\t\tsim_spm1A ;\nreg\t[7:0]\t\tsim_spm1B ;\nreg\t[7:0]\t\tsim_spm1C ;\nreg\t[7:0]\t\tsim_spm1D ;\nreg\t[7:0]\t\tsim_spm1E ;\nreg\t[7:0]\t\tsim_spm1F ;\nreg\t[7:0]\t\tsim_spm20 ;\nreg\t[7:0]\t\tsim_spm21 ;\nreg\t[7:0]\t\tsim_spm22 ;\nreg\t[7:0]\t\tsim_spm23 ;\nreg\t[7:0]\t\tsim_spm24 ;\nreg\t[7:0]\t\tsim_spm25 ;\nreg\t[7:0]\t\tsim_spm26 ;\nreg\t[7:0]\t\tsim_spm27 ;\nreg\t[7:0]\t\tsim_spm28 ;\nreg\t[7:0]\t\tsim_spm29 ;\nreg\t[7:0]\t\tsim_spm2A ;\nreg\t[7:0]\t\tsim_spm2B ;\nreg\t[7:0]\t\tsim_spm2C ;\nreg\t[7:0]\t\tsim_spm2D ;\nreg\t[7:0]\t\tsim_spm2E ;\nreg\t[7:0]\t\tsim_spm2F ;\nreg\t[7:0]\t\tsim_spm30 ;\nreg\t[7:0]\t\tsim_spm31 ;\nreg\t[7:0]\t\tsim_spm32 ;\nreg\t[7:0]\t\tsim_spm33 ;\nreg\t[7:0]\t\tsim_spm34 ;\nreg\t[7:0]\t\tsim_spm35 ;\nreg\t[7:0]\t\tsim_spm36 ;\nreg\t[7:0]\t\tsim_spm37 ;\nreg\t[7:0]\t\tsim_spm38 ;\nreg\t[7:0]\t\tsim_spm39 ;\nreg\t[7:0]\t\tsim_spm3A ;\nreg\t[7:0]\t\tsim_spm3B ;\nreg\t[7:0]\t\tsim_spm3C ;\nreg\t[7:0]\t\tsim_spm3D ;\nreg\t[7:0]\t\tsim_spm3E ;\nreg\t[7:0]\t\tsim_spm3F ;\nreg\t[7:0]\t\tsim_spm40 ;\nreg\t[7:0]\t\tsim_spm41 ;\nreg\t[7:0]\t\tsim_spm42 ;\nreg\t[7:0]\t\tsim_spm43 ;\nreg\t[7:0]\t\tsim_spm44 ;\nreg\t[7:0]\t\tsim_spm45 ;\nreg\t[7:0]\t\tsim_spm46 ;\nreg\t[7:0]\t\tsim_spm47 ;\nreg\t[7:0]\t\tsim_spm48 ;\nreg\t[7:0]\t\tsim_spm49 ;\nreg\t[7:0]\t\tsim_spm4A ;\nreg\t[7:0]\t\tsim_spm4B ;\nreg\t[7:0]\t\tsim_spm4C ;\nreg\t[7:0]\t\tsim_spm4D ;\nreg\t[7:0]\t\tsim_spm4E ;\nreg\t[7:0]\t\tsim_spm4F ;\nreg\t[7:0]\t\tsim_spm50 ;\nreg\t[7:0]\t\tsim_spm51 ;\nreg\t[7:0]\t\tsim_spm52 ;\nreg\t[7:0]\t\tsim_spm53 ;\nreg\t[7:0]\t\tsim_spm54 ;\nreg\t[7:0]\t\tsim_spm55 ;\nreg\t[7:0]\t\tsim_spm56 ;\nreg\t[7:0]\t\tsim_spm57 ;\nreg\t[7:0]\t\tsim_spm58 ;\nreg\t[7:0]\t\tsim_spm59 ;\nreg\t[7:0]\t\tsim_spm5A ;\nreg\t[7:0]\t\tsim_spm5B ;\nreg\t[7:0]\t\tsim_spm5C ;\nreg\t[7:0]\t\tsim_spm5D ;\nreg\t[7:0]\t\tsim_spm5E ;\nreg\t[7:0]\t\tsim_spm5F ;\nreg\t[7:0]\t\tsim_spm60 ;\nreg\t[7:0]\t\tsim_spm61 ;\nreg\t[7:0]\t\tsim_spm62 ;\nreg\t[7:0]\t\tsim_spm63 ;\nreg\t[7:0]\t\tsim_spm64 ;\nreg\t[7:0]\t\tsim_spm65 ;\nreg\t[7:0]\t\tsim_spm66 ;\nreg\t[7:0]\t\tsim_spm67 ;\nreg\t[7:0]\t\tsim_spm68 ;\nreg\t[7:0]\t\tsim_spm69 ;\nreg\t[7:0]\t\tsim_spm6A ;\nreg\t[7:0]\t\tsim_spm6B ;\nreg\t[7:0]\t\tsim_spm6C ;\nreg\t[7:0]\t\tsim_spm6D ;\nreg\t[7:0]\t\tsim_spm6E ;\nreg\t[7:0]\t\tsim_spm6F ;\nreg\t[7:0]\t\tsim_spm70 ;\nreg\t[7:0]\t\tsim_spm71 ;\nreg\t[7:0]\t\tsim_spm72 ;\nreg\t[7:0]\t\tsim_spm73 ;\nreg\t[7:0]\t\tsim_spm74 ;\nreg\t[7:0]\t\tsim_spm75 ;\nreg\t[7:0]\t\tsim_spm76 ;\nreg\t[7:0]\t\tsim_spm77 ;\nreg\t[7:0]\t\tsim_spm78 ;\nreg\t[7:0]\t\tsim_spm79 ;\nreg\t[7:0]\t\tsim_spm7A ;\nreg\t[7:0]\t\tsim_spm7B ;\nreg\t[7:0]\t\tsim_spm7C ;\nreg\t[7:0]\t\tsim_spm7D ;\nreg\t[7:0]\t\tsim_spm7E ;\nreg\t[7:0]\t\tsim_spm7F ;\nreg\t[7:0]\t\tsim_spm80 ;\nreg\t[7:0]\t\tsim_spm81 ;\nreg\t[7:0]\t\tsim_spm82 ;\nreg\t[7:0]\t\tsim_spm83 ;\nreg\t[7:0]\t\tsim_spm84 ;\nreg\t[7:0]\t\tsim_spm85 ;\nreg\t[7:0]\t\tsim_spm86 ;\nreg\t[7:0]\t\tsim_spm87 ;\nreg\t[7:0]\t\tsim_spm88 ;\nreg\t[7:0]\t\tsim_spm89 ;\nreg\t[7:0]\t\tsim_spm8A ;\nreg\t[7:0]\t\tsim_spm8B ;\nreg\t[7:0]\t\tsim_spm8C ;\nreg\t[7:0]\t\tsim_spm8D ;\nreg\t[7:0]\t\tsim_spm8E ;\nreg\t[7:0]\t\tsim_spm8F ;\nreg\t[7:0]\t\tsim_spm90 ;\nreg\t[7:0]\t\tsim_spm91 ;\nreg\t[7:0]\t\tsim_spm92 ;\nreg\t[7:0]\t\tsim_spm93 ;\nreg\t[7:0]\t\tsim_spm94 ;\nreg\t[7:0]\t\tsim_spm95 ;\nreg\t[7:0]\t\tsim_spm96 ;\nreg\t[7:0]\t\tsim_spm97 ;\nreg\t[7:0]\t\tsim_spm98 ;\nreg\t[7:0]\t\tsim_spm99 ;\nreg\t[7:0]\t\tsim_spm9A ;\nreg\t[7:0]\t\tsim_spm9B ;\nreg\t[7:0]\t\tsim_spm9C ;\nreg\t[7:0]\t\tsim_spm9D ;\nreg\t[7:0]\t\tsim_spm9E ;\nreg\t[7:0]\t\tsim_spm9F ;\nreg\t[7:0]\t\tsim_spmA0 ;\nreg\t[7:0]\t\tsim_spmA1 ;\nreg\t[7:0]\t\tsim_spmA2 ;\nreg\t[7:0]\t\tsim_spmA3 ;\nreg\t[7:0]\t\tsim_spmA4 ;\nreg\t[7:0]\t\tsim_spmA5 ;\nreg\t[7:0]\t\tsim_spmA6 ;\nreg\t[7:0]\t\tsim_spmA7 ;\nreg\t[7:0]\t\tsim_spmA8 ;\nreg\t[7:0]\t\tsim_spmA9 ;\nreg\t[7:0]\t\tsim_spmAA ;\nreg\t[7:0]\t\tsim_spmAB ;\nreg\t[7:0]\t\tsim_spmAC ;\nreg\t[7:0]\t\tsim_spmAD ;\nreg\t[7:0]\t\tsim_spmAE ;\nreg\t[7:0]\t\tsim_spmAF ;\nreg\t[7:0]\t\tsim_spmB0 ;\nreg\t[7:0]\t\tsim_spmB1 ;\nreg\t[7:0]\t\tsim_spmB2 ;\nreg\t[7:0]\t\tsim_spmB3 ;\nreg\t[7:0]\t\tsim_spmB4 ;\nreg\t[7:0]\t\tsim_spmB5 ;\nreg\t[7:0]\t\tsim_spmB6 ;\nreg\t[7:0]\t\tsim_spmB7 ;\nreg\t[7:0]\t\tsim_spmB8 ;\nreg\t[7:0]\t\tsim_spmB9 ;\nreg\t[7:0]\t\tsim_spmBA ;\nreg\t[7:0]\t\tsim_spmBB ;\nreg\t[7:0]\t\tsim_spmBC ;\nreg\t[7:0]\t\tsim_spmBD ;\nreg\t[7:0]\t\tsim_spmBE ;\nreg\t[7:0]\t\tsim_spmBF ;\nreg\t[7:0]\t\tsim_spmC0 ;\nreg\t[7:0]\t\tsim_spmC1 ;\nreg\t[7:0]\t\tsim_spmC2 ;\nreg\t[7:0]\t\tsim_spmC3 ;\nreg\t[7:0]\t\tsim_spmC4 ;\nreg\t[7:0]\t\tsim_spmC5 ;\nreg\t[7:0]\t\tsim_spmC6 ;\nreg\t[7:0]\t\tsim_spmC7 ;\nreg\t[7:0]\t\tsim_spmC8 ;\nreg\t[7:0]\t\tsim_spmC9 ;\nreg\t[7:0]\t\tsim_spmCA ;\nreg\t[7:0]\t\tsim_spmCB ;\nreg\t[7:0]\t\tsim_spmCC ;\nreg\t[7:0]\t\tsim_spmCD ;\nreg\t[7:0]\t\tsim_spmCE ;\nreg\t[7:0]\t\tsim_spmCF ;\nreg\t[7:0]\t\tsim_spmD0 ;\nreg\t[7:0]\t\tsim_spmD1 ;\nreg\t[7:0]\t\tsim_spmD2 ;\nreg\t[7:0]\t\tsim_spmD3 ;\nreg\t[7:0]\t\tsim_spmD4 ;\nreg\t[7:0]\t\tsim_spmD5 ;\nreg\t[7:0]\t\tsim_spmD6 ;\nreg\t[7:0]\t\tsim_spmD7 ;\nreg\t[7:0]\t\tsim_spmD8 ;\nreg\t[7:0]\t\tsim_spmD9 ;\nreg\t[7:0]\t\tsim_spmDA ;\nreg\t[7:0]\t\tsim_spmDB ;\nreg\t[7:0]\t\tsim_spmDC ;\nreg\t[7:0]\t\tsim_spmDD ;\nreg\t[7:0]\t\tsim_spmDE ;\nreg\t[7:0]\t\tsim_spmDF ;\nreg\t[7:0]\t\tsim_spmE0 ;\nreg\t[7:0]\t\tsim_spmE1 ;\nreg\t[7:0]\t\tsim_spmE2 ;\nreg\t[7:0]\t\tsim_spmE3 ;\nreg\t[7:0]\t\tsim_spmE4 ;\nreg\t[7:0]\t\tsim_spmE5 ;\nreg\t[7:0]\t\tsim_spmE6 ;\nreg\t[7:0]\t\tsim_spmE7 ;\nreg\t[7:0]\t\tsim_spmE8 ;\nreg\t[7:0]\t\tsim_spmE9 ;\nreg\t[7:0]\t\tsim_spmEA ;\nreg\t[7:0]\t\tsim_spmEB ;\nreg\t[7:0]\t\tsim_spmEC ;\nreg\t[7:0]\t\tsim_spmED ;\nreg\t[7:0]\t\tsim_spmEE ;\nreg\t[7:0]\t\tsim_spmEF ;\nreg\t[7:0]\t\tsim_spmF0 ;\nreg\t[7:0]\t\tsim_spmF1 ;\nreg\t[7:0]\t\tsim_spmF2 ;\nreg\t[7:0]\t\tsim_spmF3 ;\nreg\t[7:0]\t\tsim_spmF4 ;\nreg\t[7:0]\t\tsim_spmF5 ;\nreg\t[7:0]\t\tsim_spmF6 ;\nreg\t[7:0]\t\tsim_spmF7 ;\nreg\t[7:0]\t\tsim_spmF8 ;\nreg\t[7:0]\t\tsim_spmF9 ;\nreg\t[7:0]\t\tsim_spmFA ;\nreg\t[7:0]\t\tsim_spmFB ;\nreg\t[7:0]\t\tsim_spmFC ;\nreg\t[7:0]\t\tsim_spmFD ;\nreg\t[7:0]\t\tsim_spmFE ;\nreg\t[7:0]\t\tsim_spmFF ;\n\n\n\ninitial begin\nkcpsm6_status = \"A,NZ,NC,ID,Reset\" ;\nkcpsm6_opcode = \"LOAD s0, s0        \" ;\n\nsim_s0 = 8'h00 ;\nsim_s1 = 8'h00 ;\nsim_s2 = 8'h00 ;\nsim_s3 = 8'h00 ;\nsim_s4 = 8'h00 ;\nsim_s5 = 8'h00 ;\nsim_s6 = 8'h00 ;\nsim_s7 = 8'h00 ;\nsim_s8 = 8'h00 ;\nsim_s9 = 8'h00 ;\nsim_sA = 8'h00 ;\nsim_sB = 8'h00 ;\nsim_sC = 8'h00 ;\nsim_sD = 8'h00 ;\nsim_sE = 8'h00 ;\nsim_sF = 8'h00 ;\n\nsim_spm00 = 8'h00 ;\nsim_spm01 = 8'h00 ;\nsim_spm02 = 8'h00 ;\nsim_spm03 = 8'h00 ;\nsim_spm04 = 8'h00 ;\nsim_spm05 = 8'h00 ;\nsim_spm06 = 8'h00 ;\nsim_spm07 = 8'h00 ;\nsim_spm08 = 8'h00 ;\nsim_spm09 = 8'h00 ;\nsim_spm0A = 8'h00 ;\nsim_spm0B = 8'h00 ;\nsim_spm0C = 8'h00 ;\nsim_spm0D = 8'h00 ;\nsim_spm0E = 8'h00 ;\nsim_spm0F = 8'h00 ;\nsim_spm10 = 8'h00 ;\nsim_spm11 = 8'h00 ;\nsim_spm12 = 8'h00 ;\nsim_spm13 = 8'h00 ;\nsim_spm14 = 8'h00 ;\nsim_spm15 = 8'h00 ;\nsim_spm16 = 8'h00 ;\nsim_spm17 = 8'h00 ;\nsim_spm18 = 8'h00 ;\nsim_spm19 = 8'h00 ;\nsim_spm1A = 8'h00 ;\nsim_spm1B = 8'h00 ;\nsim_spm1C = 8'h00 ;\nsim_spm1D = 8'h00 ;\nsim_spm1E = 8'h00 ;\nsim_spm1F = 8'h00 ;\nsim_spm20 = 8'h00 ;\nsim_spm21 = 8'h00 ;\nsim_spm22 = 8'h00 ;\nsim_spm23 = 8'h00 ;\nsim_spm24 = 8'h00 ;\nsim_spm25 = 8'h00 ;\nsim_spm26 = 8'h00 ;\nsim_spm27 = 8'h00 ;\nsim_spm28 = 8'h00 ;\nsim_spm29 = 8'h00 ;\nsim_spm2A = 8'h00 ;\nsim_spm2B = 8'h00 ;\nsim_spm2C = 8'h00 ;\nsim_spm2D = 8'h00 ;\nsim_spm2E = 8'h00 ;\nsim_spm2F = 8'h00 ;\nsim_spm30 = 8'h00 ;\nsim_spm31 = 8'h00 ;\nsim_spm32 = 8'h00 ;\nsim_spm33 = 8'h00 ;\nsim_spm34 = 8'h00 ;\nsim_spm35 = 8'h00 ;\nsim_spm36 = 8'h00 ;\nsim_spm37 = 8'h00 ;\nsim_spm38 = 8'h00 ;\nsim_spm39 = 8'h00 ;\nsim_spm3A = 8'h00 ;\nsim_spm3B = 8'h00 ;\nsim_spm3C = 8'h00 ;\nsim_spm3D = 8'h00 ;\nsim_spm3E = 8'h00 ;\nsim_spm3F = 8'h00 ;\nsim_spm40 = 8'h00 ;\nsim_spm41 = 8'h00 ;\nsim_spm42 = 8'h00 ;\nsim_spm43 = 8'h00 ;\nsim_spm44 = 8'h00 ;\nsim_spm45 = 8'h00 ;\nsim_spm46 = 8'h00 ;\nsim_spm47 = 8'h00 ;\nsim_spm48 = 8'h00 ;\nsim_spm49 = 8'h00 ;\nsim_spm4A = 8'h00 ;\nsim_spm4B = 8'h00 ;\nsim_spm4C = 8'h00 ;\nsim_spm4D = 8'h00 ;\nsim_spm4E = 8'h00 ;\nsim_spm4F = 8'h00 ;\nsim_spm50 = 8'h00 ;\nsim_spm51 = 8'h00 ;\nsim_spm52 = 8'h00 ;\nsim_spm53 = 8'h00 ;\nsim_spm54 = 8'h00 ;\nsim_spm55 = 8'h00 ;\nsim_spm56 = 8'h00 ;\nsim_spm57 = 8'h00 ;\nsim_spm58 = 8'h00 ;\nsim_spm59 = 8'h00 ;\nsim_spm5A = 8'h00 ;\nsim_spm5B = 8'h00 ;\nsim_spm5C = 8'h00 ;\nsim_spm5D = 8'h00 ;\nsim_spm5E = 8'h00 ;\nsim_spm5F = 8'h00 ;\nsim_spm60 = 8'h00 ;\nsim_spm61 = 8'h00 ;\nsim_spm62 = 8'h00 ;\nsim_spm63 = 8'h00 ;\nsim_spm64 = 8'h00 ;\nsim_spm65 = 8'h00 ;\nsim_spm66 = 8'h00 ;\nsim_spm67 = 8'h00 ;\nsim_spm68 = 8'h00 ;\nsim_spm69 = 8'h00 ;\nsim_spm6A = 8'h00 ;\nsim_spm6B = 8'h00 ;\nsim_spm6C = 8'h00 ;\nsim_spm6D = 8'h00 ;\nsim_spm6E = 8'h00 ;\nsim_spm6F = 8'h00 ;\nsim_spm70 = 8'h00 ;\nsim_spm71 = 8'h00 ;\nsim_spm72 = 8'h00 ;\nsim_spm73 = 8'h00 ;\nsim_spm74 = 8'h00 ;\nsim_spm75 = 8'h00 ;\nsim_spm76 = 8'h00 ;\nsim_spm77 = 8'h00 ;\nsim_spm78 = 8'h00 ;\nsim_spm79 = 8'h00 ;\nsim_spm7A = 8'h00 ;\nsim_spm7B = 8'h00 ;\nsim_spm7C = 8'h00 ;\nsim_spm7D = 8'h00 ;\nsim_spm7E = 8'h00 ;\nsim_spm7F = 8'h00 ;\nsim_spm80 = 8'h00 ;\nsim_spm81 = 8'h00 ;\nsim_spm82 = 8'h00 ;\nsim_spm83 = 8'h00 ;\nsim_spm84 = 8'h00 ;\nsim_spm85 = 8'h00 ;\nsim_spm86 = 8'h00 ;\nsim_spm87 = 8'h00 ;\nsim_spm88 = 8'h00 ;\nsim_spm89 = 8'h00 ;\nsim_spm8A = 8'h00 ;\nsim_spm8B = 8'h00 ;\nsim_spm8C = 8'h00 ;\nsim_spm8D = 8'h00 ;\nsim_spm8E = 8'h00 ;\nsim_spm8F = 8'h00 ;\nsim_spm90 = 8'h00 ;\nsim_spm91 = 8'h00 ;\nsim_spm92 = 8'h00 ;\nsim_spm93 = 8'h00 ;\nsim_spm94 = 8'h00 ;\nsim_spm95 = 8'h00 ;\nsim_spm96 = 8'h00 ;\nsim_spm97 = 8'h00 ;\nsim_spm98 = 8'h00 ;\nsim_spm99 = 8'h00 ;\nsim_spm9A = 8'h00 ;\nsim_spm9B = 8'h00 ;\nsim_spm9C = 8'h00 ;\nsim_spm9D = 8'h00 ;\nsim_spm9E = 8'h00 ;\nsim_spm9F = 8'h00 ;\nsim_spmA0 = 8'h00 ;\nsim_spmA1 = 8'h00 ;\nsim_spmA2 = 8'h00 ;\nsim_spmA3 = 8'h00 ;\nsim_spmA4 = 8'h00 ;\nsim_spmA5 = 8'h00 ;\nsim_spmA6 = 8'h00 ;\nsim_spmA7 = 8'h00 ;\nsim_spmA8 = 8'h00 ;\nsim_spmA9 = 8'h00 ;\nsim_spmAA = 8'h00 ;\nsim_spmAB = 8'h00 ;\nsim_spmAC = 8'h00 ;\nsim_spmAD = 8'h00 ;\nsim_spmAE = 8'h00 ;\nsim_spmAF = 8'h00 ;\nsim_spmB0 = 8'h00 ;\nsim_spmB1 = 8'h00 ;\nsim_spmB2 = 8'h00 ;\nsim_spmB3 = 8'h00 ;\nsim_spmB4 = 8'h00 ;\nsim_spmB5 = 8'h00 ;\nsim_spmB6 = 8'h00 ;\nsim_spmB7 = 8'h00 ;\nsim_spmB8 = 8'h00 ;\nsim_spmB9 = 8'h00 ;\nsim_spmBA = 8'h00 ;\nsim_spmBB = 8'h00 ;\nsim_spmBC = 8'h00 ;\nsim_spmBD = 8'h00 ;\nsim_spmBE = 8'h00 ;\nsim_spmBF = 8'h00 ;\nsim_spmC0 = 8'h00 ;\nsim_spmC1 = 8'h00 ;\nsim_spmC2 = 8'h00 ;\nsim_spmC3 = 8'h00 ;\nsim_spmC4 = 8'h00 ;\nsim_spmC5 = 8'h00 ;\nsim_spmC6 = 8'h00 ;\nsim_spmC7 = 8'h00 ;\nsim_spmC8 = 8'h00 ;\nsim_spmC9 = 8'h00 ;\nsim_spmCA = 8'h00 ;\nsim_spmCB = 8'h00 ;\nsim_spmCC = 8'h00 ;\nsim_spmCD = 8'h00 ;\nsim_spmCE = 8'h00 ;\nsim_spmCF = 8'h00 ;\nsim_spmD0 = 8'h00 ;\nsim_spmD1 = 8'h00 ;\nsim_spmD2 = 8'h00 ;\nsim_spmD3 = 8'h00 ;\nsim_spmD4 = 8'h00 ;\nsim_spmD5 = 8'h00 ;\nsim_spmD6 = 8'h00 ;\nsim_spmD7 = 8'h00 ;\nsim_spmD8 = 8'h00 ;\nsim_spmD9 = 8'h00 ;\nsim_spmDA = 8'h00 ;\nsim_spmDB = 8'h00 ;\nsim_spmDC = 8'h00 ;\nsim_spmDD = 8'h00 ;\nsim_spmDE = 8'h00 ;\nsim_spmDF = 8'h00 ;\nsim_spmE0 = 8'h00 ;\nsim_spmE1 = 8'h00 ;\nsim_spmE2 = 8'h00 ;\nsim_spmE3 = 8'h00 ;\nsim_spmE4 = 8'h00 ;\nsim_spmE5 = 8'h00 ;\nsim_spmE6 = 8'h00 ;\nsim_spmE7 = 8'h00 ;\nsim_spmE8 = 8'h00 ;\nsim_spmE9 = 8'h00 ;\nsim_spmEA = 8'h00 ;\nsim_spmEB = 8'h00 ;\nsim_spmEC = 8'h00 ;\nsim_spmED = 8'h00 ;\nsim_spmEE = 8'h00 ;\nsim_spmEF = 8'h00 ;\nsim_spmF0 = 8'h00 ;\nsim_spmF1 = 8'h00 ;\nsim_spmF2 = 8'h00 ;\nsim_spmF3 = 8'h00 ;\nsim_spmF4 = 8'h00 ;\nsim_spmF5 = 8'h00 ;\nsim_spmF6 = 8'h00 ;\nsim_spmF7 = 8'h00 ;\nsim_spmF8 = 8'h00 ;\nsim_spmF9 = 8'h00 ;\nsim_spmFA = 8'h00 ;\nsim_spmFB = 8'h00 ;\nsim_spmFC = 8'h00 ;\nsim_spmFD = 8'h00 ;\nsim_spmFE = 8'h00 ;\nsim_spmFF = 8'h00 ;\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninitial begin\nif (scratch_pad_memory_size != 64 && scratch_pad_memory_size != 128 && scratch_pad_memory_size != 256) begin\n#1;\n$display(\"\\n\\nInvalid 'scratch_pad_memory_size'. Please set to 64, 128 or 256.\\n\\n\");\n$finish;\nend\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_control\" *)\nLUT6_2 #(\n\t.INIT\t(64'hFFFFF55500000EEE))\nreset_lut( \n\t.I0 \t(run),\n\t.I1 \t(internal_reset),\n\t.I2 \t(stack_pointer_carry[4]),\n\t.I3 \t(t_state[2]),\n\t.I4 \t(reset),\n\t.I5 \t(1'b1),\n\t.O5 \t(run_value),\n\t.O6 \t(internal_reset_value));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD run_flop (  \n\t.D \t(run_value),\n\t.Q \t(run),\n\t.C \t(clk));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD internal_reset_flop(\n\t.D\t(internal_reset_value),\n\t.Q\t(internal_reset),\n\t.C\t(clk));\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nFD sync_sleep_flop(\n\t.D \t(sleep),\n\t.Q \t(sync_sleep),\n\t.C \t(clk));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nLUT6_2 #(\n\t.INIT    (64'h0083000B00C4004C))\nt_state_lut( \n\t.I0     (t_state[1]),\n\t.I1     (t_state[2]),\n\t.I2     (sync_sleep),\n\t.I3     (internal_reset),\n\t.I4     (special_bit),\n\t.I5     (1'b1),\n\t.O5     (t_state_value[1]),\n\t.O6     (t_state_value[2]));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD t_state1_flop (  \n\t.D      (t_state_value[1]),\n\t.Q      (t_state[1]),\n\t.C      (clk));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD t_state2_flop (  \n\t.D      (t_state_value[2]),\n\t.Q      (t_state[2]),\n\t.C      (clk));\n\n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nLUT6_2 #(\n\t.INIT\t(64'h0010000000000800))\nint_enable_type_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (instruction[17]),\n\t.I5     (1'b1),\n\t.O5     (loadstar_type),\n\t.O6     (int_enable_type)) ;\n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nLUT6 #(\n\t.INIT    (64'h000000000000CAAA))\ninterrupt_enable_lut( \n\t.I0     (interrupt_enable),\n\t.I1     (instruction[0]),\n\t.I2     (int_enable_type),\n\t.I3     (t_state[1]),\n\t.I4     (active_interrupt),\n\t.I5     (internal_reset),\n\t.O      (interrupt_enable_value));                     \n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nFD interrupt_enable_flop (  \n\t.D      (interrupt_enable_value),\n\t.Q      (interrupt_enable),\n\t.C      (clk));\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nFD sync_interrupt_flop (  \n\t.D      (interrupt),\n\t.Q      (sync_interrupt),\n\t.C      (clk));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nLUT6_2 # (\n\t.INIT    (64'hCC33FF0080808080))\nactive_interrupt_lut( \n\t.I0     (interrupt_enable),\n\t.I1     (t_state[2]),\n\t.I2     (sync_interrupt),\n\t.I3     (bank),\n\t.I4     (loadstar_type),\n\t.I5     (1'b1),\n\t.O5     (active_interrupt_value), \n\t.O6     (sx_addr4_value));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD active_interrupt_flop (  \n\t.D      (active_interrupt_value),\n\t.Q      (active_interrupt),\n\t.C      (clk));\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD interrupt_ack_flop (  \n\t.D      (active_interrupt),\n\t.Q      (interrupt_ack),\n\t.C      (clk));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nLUT6 #(\n\t.INIT    (64'h5A3CFFFF00000000))\npc_move_is_valid_lut( \n\t.I0     (carry_flag),\n\t.I1     (zero_flag),\n\t.I2     (instruction[14]),\n\t.I3     (instruction[15]),\n\t.I4     (instruction[16]),\n\t.I5     (instruction[17]),\n\t.O      (pc_move_is_valid)) ;\n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nLUT6_2 # (\n\t.INIT    (64'h7777027700000200))\nmove_type_lut( \n\t.I0     (instruction[12]),\n\t.I1     (instruction[13]),\n\t.I2     (instruction[14]),\n\t.I3     (instruction[15]),\n\t.I4     (instruction[16]),\n\t.I5     (1'b1),\n\t.O5     (returni_type),\n\t.O6     (move_type)) ;\n\n(* HBLKNM = \"kcpsm6_vector1\" *)\nLUT6_2 # (\n\t.INIT    (64'h0000F000000023FF))\npc_mode1_lut( \n\t.I0     (instruction[12]),\n\t.I1     (returni_type),\n\t.I2     (move_type),\n\t.I3     (pc_move_is_valid),\n\t.I4     (active_interrupt),\n\t.I5     (1'b1),\n\t.O5     (pc_mode[0]),\n\t.O6     (pc_mode[1])) ;\n\n(* HBLKNM = \"kcpsm6_vector1\" *)\nLUT6 # (\n\t.INIT    (64'hFFFFFFFF00040000))\npc_mode2_lut( \n\t.I0     (instruction[12]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (instruction[17]),\n\t.I5     (active_interrupt),\n\t.O      (pc_mode[2])) ;\n\n(* HBLKNM = \"kcpsm6_stack1\" *)\nLUT6_2 # (\n\t.INIT    (64'hFFFF100000002000))\npush_pop_lut( \n\t.I0     (instruction[12]),\n\t.I1     (instruction[13]),\n\t.I2     (move_type),\n\t.I3     (pc_move_is_valid),\n\t.I4     (active_interrupt),\n\t.I5     (1'b1),\n\t.O5     (pop_stack),\n\t.O6     (push_stack)) ;\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nLUT6_2 #(\n\t.INIT    (64'h03CA000004200000))\nalu_decode0_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O5     (alu_mux_sel_value[0]),\n\t.O6     (arith_logical_sel[0])) ;\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nFD alu_mux_sel0_flop(  \n\t.D      (alu_mux_sel_value[0]),\n\t.Q      (alu_mux_sel[0]),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nLUT6_2 #(\n\t.INIT    (64'h7708000000000F00))\nalu_decode1_lut( \n\t.I0     (carry_flag),\n\t.I1     (instruction[13]),\n\t.I2     (instruction[14]),\n\t.I3     (instruction[15]),\n\t.I4     (instruction[16]),\n\t.I5     (1'b1),\n\t.O5     (alu_mux_sel_value[1]),\n\t.O6     (arith_carry_in)) ;                     \n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD alu_mux_sel1_flop (  \n\t.D      (alu_mux_sel_value[1]),\n\t.Q      (alu_mux_sel[1]),\n\t.C      (clk)) ;\n\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nLUT6_2 # (\n\t.INIT    (64'hD000000002000000))\nalu_decode2_lut( \n\t.I0     (instruction[14]),\n\t.I1     (instruction[15]),\n\t.I2     (instruction[16]),\n\t.I3     (1'b1),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O5     (arith_logical_sel[1]),\n\t.O6     (arith_logical_sel[2])) ;\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nLUT6_2 # (\n\t.INIT    (64'h00013F3F0010F7CE))\nregister_enable_type_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (instruction[17]),\n\t.I5     (1'b1),\n\t.O5     (flag_enable_type),\n\t.O6     (register_enable_type)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nLUT6_2 # (\n\t.INIT    (64'hC0CC0000A0AA0000))\nregister_enable_lut( \n\t.I0     (flag_enable_type),\n\t.I1     (register_enable_type),\n\t.I2     (instruction[12]),\n\t.I3     (instruction[17]),\n\t.I4     (t_state[1]),\n\t.I5     (1'b1),\n\t.O5     (flag_enable_value),\n\t.O6     (register_enable_value)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR flag_enable_flop (  \n\t.D      (flag_enable_value),\n\t.Q      (flag_enable),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR register_enable_flop (  \n\t.D      (register_enable_value),\n\t.Q      (register_enable),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nLUT6_2 # (\n\t.INIT    (64'h8000000020000000))\nspm_enable_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[17]),\n\t.I3     (strobe_type),\n\t.I4     (t_state[1]),\n\t.I5     (1'b1),\n\t.O5     (k_write_strobe_value),\n\t.O6     (spm_enable_value)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR k_write_strobe_flop (  \n\t.D      (k_write_strobe_value),\n\t.Q      (k_write_strobe),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR spm_enable_flop (  \n\t.D      (spm_enable_value),\n\t.Q      (spm_enable),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nLUT6_2 # (\n\t.INIT    (64'h4000000001000000))\nread_strobe_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[17]),\n\t.I3     (strobe_type),\n\t.I4     (t_state[1]),\n\t.I5     (1'b1),\n\t.O5     (read_strobe_value),\n\t.O6     (write_strobe_value)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR write_strobe_flop (  \n\t.D      (write_strobe_value),\n\t.Q      (write_strobe),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR read_strobe_flop (  \n\t.D      (read_strobe_value),\n\t.Q      (read_strobe),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_stack1\" *)\nLUT6 # (\n\t.INIT    (64'h0080020000000000))\nregbank_type_lut( \n\t.I0     (instruction[12]),\n\t.I1     (instruction[13]),\n\t.I2     (instruction[14]),\n\t.I3     (instruction[15]),\n\t.I4     (instruction[16]),\n\t.I5     (instruction[17]),\n\t.O      (regbank_type)) ;\n\n(* HBLKNM = \"kcpsm6_stack1\" *)\nLUT6 # (\n\t.INIT    (64'hACACFF00FF00FF00))\nbank_lut( \n\t.I0     (instruction[0]),\n\t.I1     (shadow_bank),\n\t.I2     (instruction[16]),\n\t.I3     (bank),\n\t.I4     (regbank_type),\n\t.I5     (t_state[1]),\n\t.O      (bank_value)) ;                     \n\n(* HBLKNM = \"kcpsm6_stack1\" *)\nFDR bank_flop (  \n\t.D      (bank_value),\n\t.Q      (bank),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD sx_addr4_flop (  \n\t.D      (sx_addr4_value),\n\t.Q      (sx_addr[4]),\n\t.C      (clk)) ;\n\nassign sx_addr[3:0] = instruction[11:8] ;\nassign sy_addr = {bank, instruction[7:4]} ;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_control\" *)\nXORCY arith_carry_xorcy ( \n\t.LI \t(1'b0),\n\t.CI \t(carry_arith_logical[7]),\n\t.O      (arith_carry_value)) ;\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD arith_carry_flop (  \n\t.D      (arith_carry_value),\n\t.Q      (arith_carry),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nLUT6_2 # (\n\t.INIT    (64'h0000000087780000))\nlower_parity_lut( \n\t.I0     (instruction[13]),\n\t.I1     (carry_flag),\n\t.I2     (arith_logical_result[0]),\n\t.I3     (arith_logical_result[1]),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O5     (lower_parity),\n\t.O6     (lower_parity_sel)) ;  \n                 \n(* HBLKNM = \"kcpsm6_decode2\" *)\nMUXCY parity_muxcy ( \n\t.DI\t(lower_parity),\n\t.CI\t(1'b0),                     \n\t.S\t(lower_parity_sel),\n\t.O      (carry_lower_parity)) ;\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nLUT6 #(\n\t.INIT    (64'h6996966996696996))\nupper_parity_lut( \n\t.I0     (arith_logical_result[2]),\n\t.I1     (arith_logical_result[3]),\n\t.I2     (arith_logical_result[4]),\n\t.I3     (arith_logical_result[5]),\n\t.I4     (arith_logical_result[6]),\n\t.I5     (arith_logical_result[7]),\n\t.O      (upper_parity)) ;                     \n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nXORCY parity_xorcy( \n\t.LI\t(upper_parity),\n        .CI\t(carry_lower_parity),\n\t.O      (parity)) ;\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nLUT6 #(\n\t.INIT    (64'hFFFFAACCF0F0F0F0))\nshift_carry_lut( \n\t.I0     (sx[0]),\n\t.I1     (sx[7]),\n\t.I2     (shadow_carry_flag),\n\t.I3     (instruction[3]),\n\t.I4     (instruction[7]),\n\t.I5     (instruction[16]),\n\t.O      (shift_carry_value)) ;                     \n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD shift_carry_flop(  \n\t.D      (shift_carry_value),\n\t.Q      (shift_carry),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nLUT6_2 #(\n\t.INIT    (64'h3333AACCF0AA0000))\ncarry_flag_lut( \n\t.I0     (shift_carry),\n\t.I1     (arith_carry),\n\t.I2     (parity),\n\t.I3     (instruction[14]),\n\t.I4     (instruction[15]),\n\t.I5     (instruction[16]),\n\t.O5     (drive_carry_in_zero),\n\t.O6     (carry_flag_value)) ;  \n\n(* HBLKNM = \"kcpsm6_flags\" *)\nFDRE carry_flag_flop(  \n\t.D      (carry_flag_value),\n\t.Q      (carry_flag),\n       \t.CE     (flag_enable),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nMUXCY init_zero_muxcy( \n\t.DI\t(drive_carry_in_zero),\n\t.CI\t(1'b0),\n\t.S\t(carry_flag_value),\n\t.O      (carry_in_zero)) ;\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nLUT6_2 # (\n\t.INIT    (64'hA280000000F000F0))\nuse_zero_flag_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O5     (strobe_type),\n\t.O6     (use_zero_flag_value)) ;                     \n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD use_zero_flag_flop(  \n\t.D      (use_zero_flag_value),\n\t.Q      (use_zero_flag),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nLUT6_2 #(\n\t.INIT    (64'h0000000000000001))\nlower_zero_lut( \n\t.I0     (alu_result[0]),\n\t.I1     (alu_result[1]),\n\t.I2     (alu_result[2]),\n\t.I3     (alu_result[3]),\n\t.I4     (alu_result[4]),\n\t.I5     (1'b1),\n\t.O5     (lower_zero),\n\t.O6     (lower_zero_sel)) ;                     \n\n(* HBLKNM = \"kcpsm6_flags\" *)\nMUXCY lower_zero_muxcy( \n\t.DI\t(lower_zero),\n\t.CI\t(carry_in_zero),\n\t.S\t(lower_zero_sel),\n\t.O      (carry_lower_zero)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nLUT6_2 # (\n\t.INIT    (64'h0000000D00000000))\nmiddle_zero_lut( \n\t.I0     (use_zero_flag),\n\t.I1     (zero_flag),\n\t.I2     (alu_result[5]),\n\t.I3     (alu_result[6]),\n\t.I4     (alu_result[7]),\n\t.I5     (1'b1),\n\t.O5     (middle_zero),\n\t.O6     (middle_zero_sel)) ;                     \n\n(* HBLKNM = \"kcpsm6_flags\" *)\nMUXCY middle_zero_muxcy( \n\t.DI\t(middle_zero),\n\t.CI\t(carry_lower_zero),                     \n\t.S \t(middle_zero_sel),\n  \t.O      (carry_middle_zero)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nLUT6 #(\n\t.INIT    (64'hFBFF000000000000))\nupper_zero_lut( \n\t.I0     (instruction[14]),\n\t.I1     (instruction[15]),\n\t.I2     (instruction[16]),\n\t.I3     (1'b1),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O      (upper_zero_sel)) ;                     \n\n(* HBLKNM = \"kcpsm6_flags\" *)\nMUXCY upper_zero_muxcy( \n\t.DI\t(shadow_zero_flag),\n\t.CI\t(carry_middle_zero),                    \n\t.S\t(upper_zero_sel),\n\t.O      (zero_flag_value)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nFDRE zero_flag_flop(  \n\t.D      (zero_flag_value),\n\t.Q      (zero_flag),\n\t.CE     (flag_enable),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n\n\n\n\n\n\n\n\n\n\n\n\nassign register_vector = {sx[3:0], sy} ;\n\ngenvar i ;\n\ngenerate\nfor (i = 0 ; i <= 11 ; i = i+1)\nbegin : address_loop\nparameter [7:0] id4 = 8'h30 + i/4 ;\nparameter [7:0] id8 = 8'h30 + i/8 ;\nparameter [7:0] ip4d8 = 8'h30 + (i+4)/8 ;\t  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_stack_ram\",ip4d8} *)\nFD return_vector_flop(  \n\t.D      (stack_memory[i]),\n\t.Q      (return_vector[i]),\n\t.C      (clk));\n\n\n\n\nif (i % 2 == 0) begin: output_data\n\n(* HBLKNM = {\"kcpsm6_vector\",id8} *)\nLUT6_2 #(\n\t.INIT   (64'hFF00F0F0CCCCAAAA))\npc_vector_mux_lut( \n\t.I0     (instruction[i]),\n\t.I1     (return_vector[i]),\n\t.I2     (instruction[i+1]),\n\t.I3     (return_vector[i+1]),\n\t.I4     (instruction[12]),\n\t.I5     (1'b1),\n\t.O5     (pc_vector[i]),\n\t.O6     (pc_vector[i+1]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nFDRE pc_flop(  \n\t.D      (pc_value[i]),\n\t.Q      (pc[i]),\n\t.R      (internal_reset),\n\t.CE     (t_state[1]),\n\t.C      (clk));\n\nif (i == 0) begin: lsb_pc\n\n\n\n\n\n\nif (interrupt_vector[i] == 1'b0) begin: low_int_vector\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nLUT6 #(\n\t.INIT    (64'h00AA000033CC0F00))\npc_lut( \n\t.I0     (register_vector[i]),\n\t.I1     (pc_vector[i]),\n\t.I2     (pc[i]),\n\t.I3     (pc_mode[0]),\n\t.I4     (pc_mode[1]),\n\t.I5     (pc_mode[2]), \n\t.O      (half_pc[i]));\n\nend \n\nif (interrupt_vector[i] == 1'b1) begin: high_int_vector\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nLUT6 #(\n\t.INIT    (64'h00AA00FF33CC0F00))\npc_lut( \n\t.I0     (register_vector[i]),\n\t.I1     (pc_vector[i]),\n\t.I2     (pc[i]),\n\t.I3     (pc_mode[0]),\n\t.I4     (pc_mode[1]),\n\t.I5     (pc_mode[2]), \n\t.O      (half_pc[i]));\n\nend \n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nXORCY pc_xorcy( \n\t.LI\t(half_pc[i]),\n\t.CI\t(1'b0),\n\t.O      (pc_value[i]));\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nMUXCY pc_muxcy( \n\t.DI \t(pc_mode[0]),\n\t.CI \t(1'b0),\n\t.S\t(half_pc[i]),\n        .O      (carry_pc[i]));\n\nend \n\nif (i > 0) begin : upper_pc\n\n\n\n\n\n\nif (interrupt_vector[i] == 1'b0) begin: low_int_vector\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nLUT6 #(\n\t.INIT    (64'h00AA0000CCCCF000))\npc_lut( \n\t.I0     (register_vector[i]),\n\t.I1     (pc_vector[i]),\n\t.I2     (pc[i]),\n\t.I3     (pc_mode[0]),\n\t.I4     (pc_mode[1]),\n\t.I5     (pc_mode[2]), \n\t.O      (half_pc[i]));\n\nend \n\nif (interrupt_vector[i] == 1'b1) begin: high_int_vector\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nLUT6 #(\n\t.INIT    (64'h00AA00FFCCCCF000))\npc_lut( \n\t.I0     (register_vector[i]),\n\t.I1     (pc_vector[i]),\n\t.I2     (pc[i]),\n\t.I3     (pc_mode[0]),\n\t.I4     (pc_mode[1]),\n\t.I5     (pc_mode[2]), \n\t.O      (half_pc[i]));\n\nend \n\n\n\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nXORCY pc_xorcy( \n\t.LI\t(half_pc[i]),\n\t.CI\t(carry_pc[i-1]),\n\t.O      (pc_value[i]));\n\n\n\n\n\nif (i < 11) begin: mid_pc\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nMUXCY pc_muxcy( \n\t.DI \t(1'b0),\n\t.CI \t(carry_pc[i-1]),\n\t.S \t(half_pc[i]),\n\t.O     \t(carry_pc[i]));\n\nend \n\nend \n\n\n\n\n\nend \nendgenerate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nFD shadow_carry_flag_flop(  \n\t.D      (stack_carry_flag),\n\t.Q      (shadow_carry_flag),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nFD stack_zero_flop(  \n\t.D      (stack_zero_flag),\n\t.Q      (shadow_zero_value),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD shadow_zero_flag_flop(  \n\t.D      (shadow_zero_value),\n\t.Q      (shadow_zero_flag),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nFD shadow_bank_flop(  \n\t.D      (stack_bank),\n\t.Q      (shadow_bank),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nFD stack_bit_flop(  \n\t.D      (stack_bit),\n\t.Q      (special_bit),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nRAM32M #(\n\t.INIT_A\t(64'h0000000000000000), \n\t.INIT_B\t(64'h0000000000000000), \n\t.INIT_C (64'h0000000000000000), \n\t.INIT_D (64'h0000000000000000)) \nstack_ram_low ( \n\t.DOA\t({stack_zero_flag, stack_carry_flag}), \n\t.DOB\t({stack_bit, stack_bank}),\n\t.DOC    (stack_memory[1:0]), \n\t.DOD    (stack_memory[3:2]),\n\t.ADDRA\t(stack_pointer[4:0]), \n\t.ADDRB\t(stack_pointer[4:0]), \n\t.ADDRC  (stack_pointer[4:0]), \n\t.ADDRD  (stack_pointer[4:0]),\n\t.DIA\t({zero_flag, carry_flag}), \n\t.DIB\t({run, bank}),\n\t.DIC    (pc[1:0]),\n\t.DID    (pc[3:2]),\n\t.WE \t(t_state[1]), \n\t.WCLK\t(clk));\n\n(* HBLKNM = \"kcpsm6_stack_ram1\" *)\nRAM32M #(\n\t.INIT_A\t(64'h0000000000000000), \n\t.INIT_B\t(64'h0000000000000000), \n\t.INIT_C\t(64'h0000000000000000), \n\t.INIT_D\t(64'h0000000000000000)) \nstack_ram_high(    \n\t.DOA\t(stack_memory[5:4]), \n\t.DOB\t(stack_memory[7:6]),\n\t.DOC   \t(stack_memory[9:8]),\n\t.DOD   \t(stack_memory[11:10]),\n\t.ADDRA \t(stack_pointer[4:0]), \n\t.ADDRB \t(stack_pointer[4:0]), \n\t.ADDRC  (stack_pointer[4:0]), \n\t.ADDRD  (stack_pointer[4:0]),\n\t.DIA    (pc[5:4]),\n\t.DIB    (pc[7:6]),\n\t.DIC    (pc[9:8]),\n\t.DID    (pc[11:10]),\n\t.WE \t(t_state[1]),  \n\t.WCLK \t(clk));\n\ngenerate\nfor (i = 0 ; i <= 4 ; i = i+1)\nbegin : stack_loop\n\nparameter [7:0]\tid4 = 8'h30 + i/4 ;\n\nif (i == 0) begin: lsb_stack\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nFDR pointer_flop(  \n\t.D      (stack_pointer_value[i]),\n\t.Q      (stack_pointer[i]),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nLUT6_2 #(\n\t.INIT    (64'h001529AAAAAAAAAA))\nstack_pointer_lut( \n\t.I0     (stack_pointer[i]),\n\t.I1     (pop_stack),\n\t.I2     (push_stack),\n\t.I3     (t_state[1]),\n\t.I4     (t_state[2]),\n\t.I5     (1'b1), \n\t.O5     (feed_pointer_value[i]),\n\t.O6     (half_pointer_value[i]));\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nXORCY stack_xorcy( \n\t.LI \t(half_pointer_value[i]),\n\t.CI \t(1'b0),\n\t.O      (stack_pointer_value[i]));\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nMUXCY stack_muxcy( \n\t.DI\t(feed_pointer_value[i]),\n\t.CI\t(1'b0),\n\t.S \t(half_pointer_value[i]),\n\t.O      (stack_pointer_carry[i]));\n\nend \n\nif (i > 0) begin: upper_stack\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nFDR pointer_flop(  \n\t.D      (stack_pointer_value[i]),\n\t.Q      (stack_pointer[i]),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nLUT6_2 #(\n\t.INIT    (64'h002A252AAAAAAAAA))\nstack_pointer_lut( \n\t.I0     (stack_pointer[i]),\n\t.I1     (pop_stack),\n\t.I2     (push_stack),\n\t.I3     (t_state[1]),\n\t.I4     (t_state[2]),\n\t.I5     (1'b1), \n\t.O5     (feed_pointer_value[i]),\n\t.O6     (half_pointer_value[i]));\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nXORCY stack_xorcy( \n\t.LI \t(half_pointer_value[i]),\n\t.CI \t(stack_pointer_carry[i-1]),\n\t.O      (stack_pointer_value[i]));\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nMUXCY stack_muxcy( \n\t.DI \t(feed_pointer_value[i]),\n\t.CI \t(stack_pointer_carry[i-1]),\n\t.S \t(half_pointer_value[i]),\n\t.O      (stack_pointer_carry[i]));\n\nend \n\nend \nendgenerate\n\n\n\n\n\n\n\n\ngenerate\nfor (i = 0 ; i <= 7 ; i = i+1)\nbegin : data_path_loop\nparameter [7:0]\tid1 = 8'h30 + i ;\nparameter [7:0]\tid2 = 8'h30 + i/2 ;\nparameter [7:0]\tid4 = 8'h30 + i/4 ;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (i % 2 == 0) begin: output_data\n\n(* HBLKNM = \"kcpsm6_port_id\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nsy_kk_mux_lut( \n\t.I0     (sy[i]),\n\t.I1     (instruction[i]),\n\t.I2     (sy[i+1]),\n\t.I3     (instruction[i+1]),\n\t.I4     (instruction[12]),\n\t.I5     (1'b1),\n\t.O5     (sy_or_kk[i]),\n\t.O6     (sy_or_kk[i+1]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (i % 2 == 0) begin: second_operand\n\n(* HBLKNM = \"kcpsm6_out_port\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nout_port_lut( \n\t.I0     (sx[i]),\n\t.I1     (instruction[i+4]),\n\t.I2     (sx[i+1]),\n\t.I3     (instruction[i+5]),\n\t.I4     (instruction[13]),\n\t.I5     (1'b1),\n\t.O5     (out_port[i]),\n\t.O6     (out_port[i+1]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nLUT6_2 #(\n\t.INIT    (64'h69696E8ACCCC0000))\narith_logical_lut( \n\t.I0     (sy_or_kk[i]),\n\t.I1     (sx[i]),\n\t.I2     (arith_logical_sel[0]),\n\t.I3     (arith_logical_sel[1]),\n\t.I4     (arith_logical_sel[2]),\n\t.I5     (1'b1),\n\t.O5     (logical_carry_mask[i]),\n\t.O6     (half_arith_logical[i]));\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nFD arith_logical_flop( \n\t.D      (arith_logical_value[i]),\n\t.Q      (arith_logical_result[i]),\n\t.C      (clk)) ;\n\nif (i == 0) begin: lsb_arith_logical\n\n\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nMUXCY arith_logical_muxcy( \n\t.DI \t(logical_carry_mask[i]),\n\t.CI \t(arith_carry_in),\n\t.S \t(half_arith_logical[i]),\n\t.O      (carry_arith_logical[i]));\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nXORCY arith_logical_xorcy( \n\t.LI \t(half_arith_logical[i]),\n\t.CI \t(arith_carry_in),\n\t.O      (arith_logical_value[i]));\n\nend \n\nif (i > 0) begin: upper_arith_logical\n\n\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nMUXCY arith_logical_muxcy( \n\t.DI \t(logical_carry_mask[i]),\n\t.CI \t(carry_arith_logical[i-1]),\n\t.S \t(half_arith_logical[i]),\n\t.O      (carry_arith_logical[i]));\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nXORCY arith_logical_xorcy( \n\t.LI \t(half_arith_logical[i]),\n\t.CI \t(carry_arith_logical[i-1]),\n\t.O      (arith_logical_value[i]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (hwbuild[i] == 1'b0) begin: low_hwbuild \n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nFDR shift_rotate_flop( \n\t.D      (shift_rotate_value[i]),\n\t.Q      (shift_rotate_result[i]),\n\t.R      (instruction[7]),\n\t.C      (clk)) ;\n           \nend \n\nif (hwbuild[i] == 1'b1) begin: high_hwbuild \n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nFDS shift_rotate_flop( \n\t.D      (shift_rotate_value[i]),\n\t.Q      (shift_rotate_result[i]),\n\t.S \t(instruction[7]),\n\t.C      (clk)) ;\n\nend \n\nif (i == 0) begin: lsb_shift_rotate\n\n\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nLUT6 #(\n\t.INIT    (64'hBFBC8F8CB3B08380))\nshift_bit_lut( \n\t.I0     (instruction[0]),\n\t.I1     (instruction[1]),\n\t.I2     (instruction[2]),\n\t.I3     (carry_flag),\n\t.I4     (sx[0]),\n\t.I5     (sx[7]),\n\t.O      (shift_in_bit));\n\n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nshift_rotate_lut( \n\t.I0     (shift_in_bit),\n\t.I1     (sx[i+1]),\n\t.I2     (sx[i]),\n\t.I3     (sx[i+2]),\n\t.I4     (instruction[3]),\n\t.I5     (1'b1),\n\t.O5     (shift_rotate_value[i]),\n\t.O6     (shift_rotate_value[i+1]));\n\nend \n\nif (i == 2 || i == 4) begin: mid_shift_rotate\n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nshift_rotate_lut( \n\t.I0     (sx[i-1]),\n\t.I1     (sx[i+1]),\n\t.I2     (sx[i]),\n\t.I3     (sx[i+2]),\n\t.I4     (instruction[3]),\n\t.I5     (1'b1),\n\t.O5     (shift_rotate_value[i]),\n\t.O6     (shift_rotate_value[i+1]));\n\nend \n\nif (i == 6) begin: msb_shift_rotate\n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nshift_rotate_lut( \n\t.I0     (sx[i-1]),\n\t.I1     (sx[i+1]),\n\t.I2     (sx[i]),\n\t.I3     (shift_in_bit),\n\t.I4     (instruction[3]),\n\t.I5     (1'b1),\n\t.O5     (shift_rotate_value[i]),\n\t.O6     (shift_rotate_value[i+1]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_alu\",id4} *)\nLUT6 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nalu_mux_lut( \n\t.I0     (arith_logical_result[i]),\n\t.I1     (shift_rotate_result[i]),\n\t.I2     (in_port[i]),\n\t.I3     (spm_data[i]),\n\t.I4     (alu_mux_sel[0]),\n\t.I5     (alu_mux_sel[1]),\n\t.O      (alu_result[i]));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (scratch_pad_memory_size == 64) begin : small_spm\n\n(* HBLKNM = {\"kcpsm6_spm\",id4} *)\nFD spm_flop( \n\t.D      (spm_ram_data[i]),\n\t.Q      (spm_data[i]),\n\t.C      (clk)) ;\n\nif (i == 0 || i == 4) begin: small_spm_ram\n\nRAM64M #( \n\t.INIT_A\t(64'h0000000000000000),\n\t.INIT_B\t(64'h0000000000000000),\n\t.INIT_C\t(64'h0000000000000000),\n\t.INIT_D\t(64'h0000000000000000)) \nspm_ram(   \n\t.DOA \t(spm_ram_data[i]),\n\t.DOB \t(spm_ram_data[i+1]),\n\t.DOC    (spm_ram_data[i+2]),\n\t.DOD    (spm_ram_data[i+3]),\n\t.ADDRA \t(sy_or_kk[5:0]),\n\t.ADDRB \t(sy_or_kk[5:0]),\n\t.ADDRC  (sy_or_kk[5:0]),\n\t.ADDRD  (sy_or_kk[5:0]),\n\t.DIA \t(sx[i]),\n\t.DIB \t(sx[i+1]),\n\t.DIC    (sx[i+2]),\n\t.DID    (sx[i+3]),\n\t.WE \t(spm_enable),\n\t.WCLK \t(clk));\n\nend \n\nend \n\nif (scratch_pad_memory_size == 128) begin : medium_spm\n\n(* HBLKNM = {\"kcpsm6_spm\",id2} *)\nRAM128X1S  #(\n\t.INIT\t(128'h00000000000000000000000000000000))\nspm_ram(       \n\t.D      (sx[i]),\n\t.WE \t(spm_enable),\n\t.WCLK \t(clk),\n\t.A0 \t(sy_or_kk[0]),\n\t.A1 \t(sy_or_kk[1]),\n\t.A2 \t(sy_or_kk[2]),\n\t.A3 \t(sy_or_kk[3]),\n\t.A4 \t(sy_or_kk[4]),\n\t.A5 \t(sy_or_kk[5]),\n\t.A6 \t(sy_or_kk[6]),\n\t.O      (spm_ram_data[i]));\n\n(* HBLKNM = {\"kcpsm6_spm\",id2} *)\nFD spm_flop( \n\t.D      (spm_ram_data[i]),\n\t.Q      (spm_data[i]),\n\t.C      (clk)) ;\n\nend \n\nif (scratch_pad_memory_size == 256) begin : large_spm\n\n(* HBLKNM = {\"kcpsm6_spm\",id1} *)\nRAM256X1S #(\n\t.INIT\t(256'h0000000000000000000000000000000000000000000000000000000000000000))\nspm_ram (       \n\t.D      (sx[i]),\n\t.WE \t(spm_enable),\n\t.WCLK \t(clk),\n\t.A \t(sy_or_kk),\n\t.O      (spm_ram_data[i]));\n\n(* HBLKNM = {\"kcpsm6_spm\",id1} *)\nFD spm_flop( \n\t.D      (spm_ram_data[i]),\n\t.Q      (spm_data[i]),\n\t.C      (clk)) ;\n\nend \n\n\n\n\n\nend \nendgenerate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_reg0\" *)\nRAM32M #(\n\t.INIT_A\t(64'h0000000000000000), \n\t.INIT_B\t(64'h0000000000000000), \n\t.INIT_C (64'h0000000000000000), \n\t.INIT_D (64'h0000000000000000)) \nlower_reg_banks(    \n\t.DOA \t(sy[1:0]), \n\t.DOB \t(sx[1:0]),\n\t.DOC    (sy[3:2]),\n\t.DOD    (sx[3:2]),\n\t.ADDRA \t(sy_addr), \n\t.ADDRB \t(sx_addr), \n\t.ADDRC  (sy_addr), \n\t.ADDRD  (sx_addr), \n\t.DIA \t(alu_result[1:0]),\n\t.DIB \t(alu_result[1:0]),\n\t.DIC    (alu_result[3:2]),\n\t.DID    (alu_result[3:2]),\n\t.WE \t(register_enable), \n\t.WCLK\t(clk));\n\n(* HBLKNM = \"kcpsm6_reg1\" *)\nRAM32M #(\n\t.INIT_A\t(64'h0000000000000000), \n\t.INIT_B\t(64'h0000000000000000), \n\t.INIT_C (64'h0000000000000000),  \n\t.INIT_D (64'h0000000000000000)) \nupper_reg_banks(    \n\t.DOA \t(sy[5:4]), \n\t.DOB \t(sx[5:4]),\n\t.DOC    (sy[7:6]),\n\t.DOD    (sx[7:6]),\n\t.ADDRA \t(sy_addr),\n\t.ADDRB \t(sx_addr),\n\t.ADDRC  (sy_addr), \n\t.ADDRD  (sx_addr), \n\t.DIA \t(alu_result[5:4]),\n\t.DIB \t(alu_result[5:4]),\n\t.DIC    (alu_result[7:6]),\n\t.DID    (alu_result[7:6]),\n\t.WE \t(register_enable), \n\t.WCLK\t(clk));\n\n\n\n\n\n\n\n\n\n\nassign address = pc;\nassign bram_enable = t_state[2];\n\n\n\n\n\n\n\n\n\nassign port_id = sy_or_kk;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreg\t[7:0]\t\tbank_a_s0 ;\nreg\t[7:0]\t\tbank_a_s1 ;\nreg\t[7:0]\t\tbank_a_s2 ;\nreg\t[7:0]\t\tbank_a_s3 ;\nreg\t[7:0]\t\tbank_a_s4 ;\nreg\t[7:0]\t\tbank_a_s5 ;\nreg\t[7:0]\t\tbank_a_s6 ;\nreg\t[7:0]\t\tbank_a_s7 ;\nreg\t[7:0]\t\tbank_a_s8 ;\nreg\t[7:0]\t\tbank_a_s9 ;\nreg\t[7:0]\t\tbank_a_sa ;\nreg\t[7:0]\t\tbank_a_sb ;\nreg\t[7:0]\t\tbank_a_sc ;\nreg\t[7:0]\t\tbank_a_sd ;\nreg\t[7:0]\t\tbank_a_se ;\nreg\t[7:0]\t\tbank_a_sf ;\nreg\t[7:0]\t\tbank_b_s0 ;\nreg\t[7:0]\t\tbank_b_s1 ;\nreg\t[7:0]\t\tbank_b_s2 ;\nreg\t[7:0]\t\tbank_b_s3 ;\nreg\t[7:0]\t\tbank_b_s4 ;\nreg\t[7:0]\t\tbank_b_s5 ;\nreg\t[7:0]\t\tbank_b_s6 ;\nreg\t[7:0]\t\tbank_b_s7 ;\nreg\t[7:0]\t\tbank_b_s8 ;\nreg\t[7:0]\t\tbank_b_s9 ;\nreg\t[7:0]\t\tbank_b_sa ;\nreg\t[7:0]\t\tbank_b_sb ;\nreg\t[7:0]\t\tbank_b_sc ;\nreg\t[7:0]\t\tbank_b_sd ;\nreg\t[7:0]\t\tbank_b_se ;\nreg\t[7:0]\t\tbank_b_sf ;\n\ninitial begin\nbank_a_s0 = 8'h00 ;\nbank_a_s1 = 8'h00 ;\nbank_a_s2 = 8'h00 ;\nbank_a_s3 = 8'h00 ;\nbank_a_s4 = 8'h00 ;\nbank_a_s5 = 8'h00 ;\nbank_a_s6 = 8'h00 ;\nbank_a_s7 = 8'h00 ;\nbank_a_s8 = 8'h00 ;\nbank_a_s9 = 8'h00 ;\nbank_a_sa = 8'h00 ;\nbank_a_sb = 8'h00 ;\nbank_a_sc = 8'h00 ;\nbank_a_sd = 8'h00 ;\nbank_a_se = 8'h00 ;\nbank_a_sf = 8'h00 ;\nbank_b_s0 = 8'h00 ;\nbank_b_s1 = 8'h00 ;\nbank_b_s2 = 8'h00 ;\nbank_b_s3 = 8'h00 ;\nbank_b_s4 = 8'h00 ;\nbank_b_s5 = 8'h00 ;\nbank_b_s6 = 8'h00 ;\nbank_b_s7 = 8'h00 ;\nbank_b_s8 = 8'h00 ;\nbank_b_s9 = 8'h00 ;\nbank_b_sa = 8'h00 ;\nbank_b_sb = 8'h00 ;\nbank_b_sc = 8'h00 ;\nbank_b_sd = 8'h00 ;\nbank_b_se = 8'h00 ;\nbank_b_sf = 8'h00 ;  \nend\n\n\n\nwire\t[1:16] \t\tsx_decode ; \t\nwire \t[1:16]  \tsy_decode ; \t\nwire \t[1:16]\t\tkk_decode ; \t\nwire \t[1:24]\t\taaa_decode ; \t\nwire\t\t\tclk_del ;\t\n\n\n\n\n\n\n\n function [1:8] hexcharacter ;\n input [3:0] nibble ;\n begin\n case (nibble)\n 4'b0000 : hexcharacter = \"0\" ;\n 4'b0001 : hexcharacter = \"1\" ;\n 4'b0010 : hexcharacter = \"2\" ;\n 4'b0011 : hexcharacter = \"3\" ;\n 4'b0100 : hexcharacter = \"4\" ;\n 4'b0101 : hexcharacter = \"5\" ;\n 4'b0110 : hexcharacter = \"6\" ;\n 4'b0111 : hexcharacter = \"7\" ;\n 4'b1000 : hexcharacter = \"8\" ;\n 4'b1001 : hexcharacter = \"9\" ;\n 4'b1010 : hexcharacter = \"A\" ;\n 4'b1011 : hexcharacter = \"B\" ;\n 4'b1100 : hexcharacter = \"C\" ;\n 4'b1101 : hexcharacter = \"D\" ;\n 4'b1110 : hexcharacter = \"E\" ;\n 4'b1111 : hexcharacter = \"F\" ;\n endcase\n end\n endfunction\n\n\n\n\n\nassign sx_decode[1:8]  = \"s\";\nassign sx_decode[9:16] = hexcharacter(instruction[11:8]);             \n\n\nassign sy_decode[1:8]  = \"s\";\nassign sy_decode[9:16] = hexcharacter(instruction[7:4]);  \n\n\nassign kk_decode[1:8]  = hexcharacter(instruction[7:4]);\nassign kk_decode[9:16] = hexcharacter(instruction[3:0]);\n\n\nassign aaa_decode[1:8]   = hexcharacter(instruction[11:8]);\nassign aaa_decode[9:16]  = hexcharacter(instruction[7:4]);\nassign aaa_decode[17:24] = hexcharacter(instruction[3:0]);\n\nassign #200 clk_del = clk ;\n\n\nalways @ (posedge clk_del) \nbegin : simulation\ncase (instruction[17:12])\n\t6'b000000\t: kcpsm6_opcode <= {\"LOAD \", sx_decode, \", \", sy_decode, \"        \"} ;\n\t6'b000001\t: kcpsm6_opcode <= {\"LOAD \", sx_decode, \", \", kk_decode, \"        \"} ;\n\t6'b010110\t: kcpsm6_opcode <= {\"STAR \", sx_decode, \", \", sy_decode, \"        \"} ;\n\t6'b010111\t: kcpsm6_opcode <= {\"STAR \", sx_decode, \", \", kk_decode, \"        \"} ;\n\t6'b000010\t: kcpsm6_opcode <= {\"AND \", sx_decode, \", \", sy_decode, \"         \"} ;\n\t6'b000011\t: kcpsm6_opcode <= {\"AND \", sx_decode, \", \", kk_decode, \"         \"} ;\n\t6'b000100\t: kcpsm6_opcode <= {\"OR \", sx_decode, \", \", sy_decode, \"          \"} ;\n\t6'b000101\t: kcpsm6_opcode <= {\"OR \", sx_decode, \", \", kk_decode, \"          \"} ;\n\t6'b000110\t: kcpsm6_opcode <= {\"XOR \", sx_decode, \", \", sy_decode, \"         \"} ;\n\t6'b000111\t: kcpsm6_opcode <= {\"XOR \", sx_decode, \", \", kk_decode, \"         \"} ;\n\t6'b001100\t: kcpsm6_opcode <= {\"TEST \", sx_decode, \", \", sy_decode, \"        \"} ;\n\t6'b001101\t: kcpsm6_opcode <= {\"TEST \", sx_decode, \", \", kk_decode, \"        \"} ;\n\t6'b001110\t: kcpsm6_opcode <= {\"TESTCY \", sx_decode, \", \", sy_decode, \"      \"} ;\n\t6'b001111\t: kcpsm6_opcode <= {\"TESTCY \", sx_decode, \", \", kk_decode, \"      \"} ;\n\t6'b010000\t: kcpsm6_opcode <= {\"ADD \", sx_decode, \", \", sy_decode, \"         \"} ;\n\t6'b010001\t: kcpsm6_opcode <= {\"ADD \", sx_decode, \", \", kk_decode, \"         \"} ;\n\t6'b010010\t: kcpsm6_opcode <= {\"ADDCY \", sx_decode, \", \", sy_decode, \"       \"} ;\n\t6'b010011\t: kcpsm6_opcode <= {\"ADDCY \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b011000\t: kcpsm6_opcode <= {\"SUB \", sx_decode, \", \", sy_decode, \"         \"} ;\n\t6'b011001\t: kcpsm6_opcode <= {\"SUB \", sx_decode, \", \", kk_decode, \"         \"} ;\n\t6'b011010\t: kcpsm6_opcode <= {\"SUBCY \", sx_decode, \", \", sy_decode, \"       \"} ;\n\t6'b011011\t: kcpsm6_opcode <= {\"SUBCY \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b011100\t: kcpsm6_opcode <= {\"COMPARE \", sx_decode, \", \", sy_decode, \"     \"} ;\n\t6'b011101\t: kcpsm6_opcode <= {\"COMPARE \", sx_decode, \", \", kk_decode, \"     \"} ;\n\t6'b011110\t: kcpsm6_opcode <= {\"COMPARECY \", sx_decode, \", \", sy_decode, \"   \"} ;\n\t6'b011111\t: kcpsm6_opcode <= {\"COMPARECY \", sx_decode, \", \", kk_decode, \"   \"} ;\n\t6'b010100\t: begin\n\t\t\t\tif (instruction[7] == 1'b1) \n\t\t\t\t  \tkcpsm6_opcode <= {\"HWBUILD \", sx_decode, \"         \"} ;\n\t\t\t\telse\n\t\t\t\t  \tcase (instruction[3:0])\n\t\t\t\t    \t\t4'b0110\t: kcpsm6_opcode <= {\"SL0 \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b0111\t: kcpsm6_opcode <= {\"SL1 \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b0100\t: kcpsm6_opcode <= {\"SLX \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b0000\t: kcpsm6_opcode <= {\"SLA \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b0010\t: kcpsm6_opcode <= {\"RL \", sx_decode, \"              \"} ;\n\t\t\t\t    \t\t4'b1110\t: kcpsm6_opcode <= {\"SR0 \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b1111\t: kcpsm6_opcode <= {\"SR1 \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b1010\t: kcpsm6_opcode <= {\"SRX \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b1000\t: kcpsm6_opcode <= {\"SRA \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b1100\t: kcpsm6_opcode <= {\"RR \", sx_decode, \"              \"} ;\n\t\t\t\t    \t\tdefault\t: kcpsm6_opcode <= \"Invalid Instruction\";\n\t\t\t\t  \tendcase\n\t\t\tend\n\t6'b101100 \t: kcpsm6_opcode <= {\"OUTPUT \", sx_decode, \", (\", sy_decode, \")    \"} ;\n\t6'b101101 \t: kcpsm6_opcode <= {\"OUTPUT \", sx_decode, \", \", kk_decode, \"      \"} ;\n\t6'b101011 \t: kcpsm6_opcode <= {\"OUTPUTK \", aaa_decode[1:16], \", \", aaa_decode[17:24], \"      \" };\n\t6'b001000 \t: kcpsm6_opcode <= {\"INPUT \", sx_decode, \", (\", sy_decode, \")     \"} ;\n\t6'b001001 \t: kcpsm6_opcode <= {\"INPUT \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b101110 \t: kcpsm6_opcode <= {\"STORE \", sx_decode, \", (\", sy_decode, \")     \"} ;\n\t6'b101111 \t: kcpsm6_opcode <= {\"STORE \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b001010 \t: kcpsm6_opcode <= {\"FETCH \", sx_decode, \", (\", sy_decode, \")     \"} ;\n\t6'b001011 \t: kcpsm6_opcode <= {\"FETCH \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b100010 \t: kcpsm6_opcode <= {\"JUMP \", aaa_decode, \"           \"} ;\n\t6'b110010 \t: kcpsm6_opcode <= {\"JUMP Z, \", aaa_decode, \"        \"} ;\n\t6'b110110 \t: kcpsm6_opcode <= {\"JUMP NZ, \", aaa_decode, \"       \"} ;\n\t6'b111010 \t: kcpsm6_opcode <= {\"JUMP C, \", aaa_decode, \"        \"} ;\n\t6'b111110 \t: kcpsm6_opcode <= {\"JUMP NC, \", aaa_decode, \"       \"} ;\n\t6'b100110 \t: kcpsm6_opcode <= {\"JUMP@ (\", sx_decode, \", \", sy_decode, \")     \"} ;\n\t6'b100000 \t: kcpsm6_opcode <= {\"CALL \", aaa_decode, \"           \"} ;\n\t6'b110000 \t: kcpsm6_opcode <= {\"CALL Z, \", aaa_decode, \"        \"} ;\n\t6'b110100 \t: kcpsm6_opcode <= {\"CALL NZ, \", aaa_decode, \"       \"} ;\n\t6'b111000 \t: kcpsm6_opcode <= {\"CALL C, \", aaa_decode, \"        \"} ;\n\t6'b111100 \t: kcpsm6_opcode <= {\"CALL NC, \", aaa_decode, \"       \"} ;\n\t6'b100100 \t: kcpsm6_opcode <= {\"CALL@ (\", sx_decode, \", \", sy_decode, \")     \"} ;\n\t6'b100101 \t: kcpsm6_opcode <= {\"RETURN             \"} ;\n\t6'b110001 \t: kcpsm6_opcode <= {\"RETURN Z           \"} ;\n\t6'b110101 \t: kcpsm6_opcode <= {\"RETURN NZ          \"} ;\n\t6'b111001 \t: kcpsm6_opcode <= {\"RETURN C           \"} ;\n\t6'b111101 \t: kcpsm6_opcode <= {\"RETURN NC          \"} ;\n\t6'b100001 \t: kcpsm6_opcode <= {\"LOAD&RETURN \", sx_decode, \", \", kk_decode, \" \"} ;\n\t6'b101001\t: begin\n\t\t\t\tcase (instruction[0])\n\t\t\t\t  1'b0    : kcpsm6_opcode <= \"RETURNI DISABLE    \";\n\t\t\t\t  1'b1    : kcpsm6_opcode <= \"RETURNI ENABLE     \";\n\t\t\t\t  default : kcpsm6_opcode <= \"Invalid Instruction\";\n\t\t\t\tendcase\n\t\t\tend\n\t6'b101000\t: begin\n\t\t\t\tcase (instruction[0])\n\t\t\t\t  1'b0    : kcpsm6_opcode <= \"DISABLE INTERRUPT  \";\n\t\t\t\t  1'b1    : kcpsm6_opcode <= \"ENABLE INTERRUPT   \";\n\t\t\t\t  default : kcpsm6_opcode <= \"Invalid Instruction\";\n\t\t\t\tendcase\n\t\t\tend\n\t6'b110111\t: begin\n\t\t\t\tcase (instruction[0])\n\t\t\t\t  1'b0 \t  : kcpsm6_opcode <= \"REGBANK A          \";\n\t\t\t\t  1'b1 \t  : kcpsm6_opcode <= \"REGBANK B          \";\n\t\t\t\t  default : kcpsm6_opcode <= \"Invalid Instruction\";\n\t\t\t\tendcase\n\t\t\tend\n\tdefault \t: kcpsm6_opcode <= \"Invalid Instruction\";\nendcase\n\n\n\n\n\nif (zero_flag == 1'b0) \n  \tkcpsm6_status[17:40] <= \"NZ,\";\nelse\n  \tkcpsm6_status[17:40] <= \" Z,\";\n\n\nif (carry_flag == 1'b0) \n  \tkcpsm6_status[41:64] <= \"NC,\";\nelse\n  \tkcpsm6_status[41:64] <= \" C,\";\n\n\nif (interrupt_enable == 1'b0) \n   \tkcpsm6_status[65:80] <= \"ID\";\nelse\n  \tkcpsm6_status[65:80] <= \"IE\";\n\n\n\n\nif (clk) begin\nif (internal_reset == 1'b1)\n    \tkcpsm6_status[81 : 128] <= \",Reset\";\nelse\n    \tif (sync_sleep == 1'b1 && t_state == 2'b00) \n      \t\tkcpsm6_status[81 : 128] <= \",Sleep\";\n     \telse\n      \t\tkcpsm6_status[81 : 128] <= \"      \";\nend\n\n\n\nif (clk) begin\n\tif (register_enable == 1'b1) begin\n\t\tcase (sx_addr)\n\t\t\t5'b00000\t: bank_a_s0 <= alu_result ;\n\t\t\t5'b00001\t: bank_a_s1 <= alu_result ;\n\t\t\t5'b00010\t: bank_a_s2 <= alu_result ;\n\t\t\t5'b00011\t: bank_a_s3 <= alu_result ;\n\t\t\t5'b00100\t: bank_a_s4 <= alu_result ;\n\t\t\t5'b00101\t: bank_a_s5 <= alu_result ;\n\t\t\t5'b00110\t: bank_a_s6 <= alu_result ;\n\t\t\t5'b00111\t: bank_a_s7 <= alu_result ;\n\t\t\t5'b01000\t: bank_a_s8 <= alu_result ;\n\t\t\t5'b01001\t: bank_a_s9 <= alu_result ;\n\t\t\t5'b01010\t: bank_a_sa <= alu_result ;\n\t\t\t5'b01011\t: bank_a_sb <= alu_result ;\n\t\t\t5'b01100\t: bank_a_sc <= alu_result ;\n\t\t\t5'b01101\t: bank_a_sd <= alu_result ;\n\t\t\t5'b01110\t: bank_a_se <= alu_result ;\n\t\t\t5'b01111\t: bank_a_sf <= alu_result ;\n\t\t\t5'b10000\t: bank_b_s0 <= alu_result ;\n\t\t\t5'b10001\t: bank_b_s1 <= alu_result ;\n\t\t\t5'b10010\t: bank_b_s2 <= alu_result ;\n\t\t\t5'b10011\t: bank_b_s3 <= alu_result ;\n\t\t\t5'b10100\t: bank_b_s4 <= alu_result ;\n\t\t\t5'b10101\t: bank_b_s5 <= alu_result ;\n\t\t\t5'b10110\t: bank_b_s6 <= alu_result ;\n\t\t\t5'b10111\t: bank_b_s7 <= alu_result ;\n\t\t\t5'b11000\t: bank_b_s8 <= alu_result ;\n\t\t\t5'b11001\t: bank_b_s9 <= alu_result ;\n\t\t\t5'b11010\t: bank_b_sa <= alu_result ;\n\t\t\t5'b11011\t: bank_b_sb <= alu_result ;\n\t\t\t5'b11100\t: bank_b_sc <= alu_result ;\n\t\t\t5'b11101\t: bank_b_sd <= alu_result ;\n\t\t\t5'b11110\t: bank_b_se <= alu_result ;\n\t\t\t5'b11111\t: bank_b_sf <= alu_result ;\n\t\tendcase\n\tend\n\n\nif (spm_enable == 1'b1) begin\n\tcase (sy_or_kk)\n\t\t8'b00000000\t: sim_spm00 <= sx;\n\t\t8'b00000001\t: sim_spm01 <= sx;\n\t\t8'b00000010\t: sim_spm02 <= sx;\n\t\t8'b00000011\t: sim_spm03 <= sx;\n\t\t8'b00000100\t: sim_spm04 <= sx;\n\t\t8'b00000101\t: sim_spm05 <= sx;\n\t\t8'b00000110\t: sim_spm06 <= sx;\n\t\t8'b00000111\t: sim_spm07 <= sx;\n\t\t8'b00001000\t: sim_spm08 <= sx;\n\t\t8'b00001001\t: sim_spm09 <= sx;\n\t\t8'b00001010\t: sim_spm0A <= sx;\n\t\t8'b00001011\t: sim_spm0B <= sx;\n\t\t8'b00001100\t: sim_spm0C <= sx;\n\t\t8'b00001101\t: sim_spm0D <= sx;\n\t\t8'b00001110\t: sim_spm0E <= sx;\n\t\t8'b00001111\t: sim_spm0F <= sx;\n\t\t8'b00010000\t: sim_spm10 <= sx;\n\t\t8'b00010001\t: sim_spm11 <= sx;\n\t\t8'b00010010\t: sim_spm12 <= sx;\n\t\t8'b00010011\t: sim_spm13 <= sx;\n\t\t8'b00010100\t: sim_spm14 <= sx;\n\t\t8'b00010101\t: sim_spm15 <= sx;\n\t\t8'b00010110\t: sim_spm16 <= sx;\n\t\t8'b00010111\t: sim_spm17 <= sx;\n\t\t8'b00011000\t: sim_spm18 <= sx;\n\t\t8'b00011001\t: sim_spm19 <= sx;\n\t\t8'b00011010\t: sim_spm1A <= sx;\n\t\t8'b00011011\t: sim_spm1B <= sx;\n\t\t8'b00011100\t: sim_spm1C <= sx;\n\t\t8'b00011101\t: sim_spm1D <= sx;\n\t\t8'b00011110\t: sim_spm1E <= sx;\n\t\t8'b00011111\t: sim_spm1F <= sx;\n\t\t8'b00100000\t: sim_spm20 <= sx;\n\t\t8'b00100001\t: sim_spm21 <= sx;\n\t\t8'b00100010\t: sim_spm22 <= sx;\n\t\t8'b00100011\t: sim_spm23 <= sx;\n\t\t8'b00100100\t: sim_spm24 <= sx;\n\t\t8'b00100101\t: sim_spm25 <= sx;\n\t\t8'b00100110\t: sim_spm26 <= sx;\n\t\t8'b00100111\t: sim_spm27 <= sx;\n\t\t8'b00101000\t: sim_spm28 <= sx;\n\t\t8'b00101001\t: sim_spm29 <= sx;\n\t\t8'b00101010\t: sim_spm2A <= sx;\n\t\t8'b00101011\t: sim_spm2B <= sx;\n\t\t8'b00101100\t: sim_spm2C <= sx;\n\t\t8'b00101101\t: sim_spm2D <= sx;\n\t\t8'b00101110\t: sim_spm2E <= sx;\n\t\t8'b00101111\t: sim_spm2F <= sx;\n\t\t8'b00110000\t: sim_spm30 <= sx;\n\t\t8'b00110001\t: sim_spm31 <= sx;\n\t\t8'b00110010\t: sim_spm32 <= sx;\n\t\t8'b00110011\t: sim_spm33 <= sx;\n\t\t8'b00110100\t: sim_spm34 <= sx;\n\t\t8'b00110101\t: sim_spm35 <= sx;\n\t\t8'b00110110\t: sim_spm36 <= sx;\n\t\t8'b00110111\t: sim_spm37 <= sx;\n\t\t8'b00111000\t: sim_spm38 <= sx;\n\t\t8'b00111001\t: sim_spm39 <= sx;\n\t\t8'b00111010\t: sim_spm3A <= sx;\n\t\t8'b00111011\t: sim_spm3B <= sx;\n\t\t8'b00111100\t: sim_spm3C <= sx;\n\t\t8'b00111101\t: sim_spm3D <= sx;\n\t\t8'b00111110\t: sim_spm3E <= sx;\n\t\t8'b00111111\t: sim_spm3F <= sx;\n\t\t8'b01000000\t: sim_spm40 <= sx;\n\t\t8'b01000001\t: sim_spm41 <= sx;\n\t\t8'b01000010\t: sim_spm42 <= sx;\n\t\t8'b01000011\t: sim_spm43 <= sx;\n\t\t8'b01000100\t: sim_spm44 <= sx;\n\t\t8'b01000101\t: sim_spm45 <= sx;\n\t\t8'b01000110\t: sim_spm46 <= sx;\n\t\t8'b01000111\t: sim_spm47 <= sx;\n\t\t8'b01001000\t: sim_spm48 <= sx;\n\t\t8'b01001001\t: sim_spm49 <= sx;\n\t\t8'b01001010\t: sim_spm4A <= sx;\n\t\t8'b01001011\t: sim_spm4B <= sx;\n\t\t8'b01001100\t: sim_spm4C <= sx;\n\t\t8'b01001101\t: sim_spm4D <= sx;\n\t\t8'b01001110\t: sim_spm4E <= sx;\n\t\t8'b01001111\t: sim_spm4F <= sx;\n\t\t8'b01010000\t: sim_spm50 <= sx;\n\t\t8'b01010001\t: sim_spm51 <= sx;\n\t\t8'b01010010\t: sim_spm52 <= sx;\n\t\t8'b01010011\t: sim_spm53 <= sx;\n\t\t8'b01010100\t: sim_spm54 <= sx;\n\t\t8'b01010101\t: sim_spm55 <= sx;\n\t\t8'b01010110\t: sim_spm56 <= sx;\n\t\t8'b01010111\t: sim_spm57 <= sx;\n\t\t8'b01011000\t: sim_spm58 <= sx;\n\t\t8'b01011001\t: sim_spm59 <= sx;\n\t\t8'b01011010\t: sim_spm5A <= sx;\n\t\t8'b01011011\t: sim_spm5B <= sx;\n\t\t8'b01011100\t: sim_spm5C <= sx;\n\t\t8'b01011101\t: sim_spm5D <= sx;\n\t\t8'b01011110\t: sim_spm5E <= sx;\n\t\t8'b01011111\t: sim_spm5F <= sx;\n\t\t8'b01100000\t: sim_spm60 <= sx;\n\t\t8'b01100001\t: sim_spm61 <= sx;\n\t\t8'b01100010\t: sim_spm62 <= sx;\n\t\t8'b01100011\t: sim_spm63 <= sx;\n\t\t8'b01100100\t: sim_spm64 <= sx;\n\t\t8'b01100101\t: sim_spm65 <= sx;\n\t\t8'b01100110\t: sim_spm66 <= sx;\n\t\t8'b01100111\t: sim_spm67 <= sx;\n\t\t8'b01101000\t: sim_spm68 <= sx;\n\t\t8'b01101001\t: sim_spm69 <= sx;\n\t\t8'b01101010\t: sim_spm6A <= sx;\n\t\t8'b01101011\t: sim_spm6B <= sx;\n\t\t8'b01101100\t: sim_spm6C <= sx;\n\t\t8'b01101101\t: sim_spm6D <= sx;\n\t\t8'b01101110\t: sim_spm6E <= sx;\n\t\t8'b01101111\t: sim_spm6F <= sx;\n\t\t8'b01110000\t: sim_spm70 <= sx;\n\t\t8'b01110001\t: sim_spm71 <= sx;\n\t\t8'b01110010\t: sim_spm72 <= sx;\n\t\t8'b01110011\t: sim_spm73 <= sx;\n\t\t8'b01110100\t: sim_spm74 <= sx;\n\t\t8'b01110101\t: sim_spm75 <= sx;\n\t\t8'b01110110\t: sim_spm76 <= sx;\n\t\t8'b01110111\t: sim_spm77 <= sx;\n\t\t8'b01111000\t: sim_spm78 <= sx;\n\t\t8'b01111001\t: sim_spm79 <= sx;\n\t\t8'b01111010\t: sim_spm7A <= sx;\n\t\t8'b01111011\t: sim_spm7B <= sx;\n\t\t8'b01111100\t: sim_spm7C <= sx;\n\t\t8'b01111101\t: sim_spm7D <= sx;\n\t\t8'b01111110\t: sim_spm7E <= sx;\n\t\t8'b01111111\t: sim_spm7F <= sx;\n\t\t8'b10000000\t: sim_spm80 <= sx;\n\t\t8'b10000001\t: sim_spm81 <= sx;\n\t\t8'b10000010\t: sim_spm82 <= sx;\n\t\t8'b10000011\t: sim_spm83 <= sx;\n\t\t8'b10000100\t: sim_spm84 <= sx;\n\t\t8'b10000101\t: sim_spm85 <= sx;\n\t\t8'b10000110\t: sim_spm86 <= sx;\n\t\t8'b10000111\t: sim_spm87 <= sx;\n\t\t8'b10001000\t: sim_spm88 <= sx;\n\t\t8'b10001001\t: sim_spm89 <= sx;\n\t\t8'b10001010\t: sim_spm8A <= sx;\n\t\t8'b10001011\t: sim_spm8B <= sx;\n\t\t8'b10001100\t: sim_spm8C <= sx;\n\t\t8'b10001101\t: sim_spm8D <= sx;\n\t\t8'b10001110\t: sim_spm8E <= sx;\n\t\t8'b10001111\t: sim_spm8F <= sx;\n\t\t8'b10010000\t: sim_spm90 <= sx;\n\t\t8'b10010001\t: sim_spm91 <= sx;\n\t\t8'b10010010\t: sim_spm92 <= sx;\n\t\t8'b10010011\t: sim_spm93 <= sx;\n\t\t8'b10010100\t: sim_spm94 <= sx;\n\t\t8'b10010101\t: sim_spm95 <= sx;\n\t\t8'b10010110\t: sim_spm96 <= sx;\n\t\t8'b10010111\t: sim_spm97 <= sx;\n\t\t8'b10011000\t: sim_spm98 <= sx;\n\t\t8'b10011001\t: sim_spm99 <= sx;\n\t\t8'b10011010\t: sim_spm9A <= sx;\n\t\t8'b10011011\t: sim_spm9B <= sx;\n\t\t8'b10011100\t: sim_spm9C <= sx;\n\t\t8'b10011101\t: sim_spm9D <= sx;\n\t\t8'b10011110\t: sim_spm9E <= sx;\n\t\t8'b10011111\t: sim_spm9F <= sx;\n\t\t8'b10100000\t: sim_spmA0 <= sx;\n\t\t8'b10100001\t: sim_spmA1 <= sx;\n\t\t8'b10100010\t: sim_spmA2 <= sx;\n\t\t8'b10100011\t: sim_spmA3 <= sx;\n\t\t8'b10100100\t: sim_spmA4 <= sx;\n\t\t8'b10100101\t: sim_spmA5 <= sx;\n\t\t8'b10100110\t: sim_spmA6 <= sx;\n\t\t8'b10100111\t: sim_spmA7 <= sx;\n\t\t8'b10101000\t: sim_spmA8 <= sx;\n\t\t8'b10101001\t: sim_spmA9 <= sx;\n\t\t8'b10101010\t: sim_spmAA <= sx;\n\t\t8'b10101011\t: sim_spmAB <= sx;\n\t\t8'b10101100\t: sim_spmAC <= sx;\n\t\t8'b10101101\t: sim_spmAD <= sx;\n\t\t8'b10101110\t: sim_spmAE <= sx;\n\t\t8'b10101111\t: sim_spmAF <= sx;\n\t\t8'b10110000\t: sim_spmB0 <= sx;\n\t\t8'b10110001\t: sim_spmB1 <= sx;\n\t\t8'b10110010\t: sim_spmB2 <= sx;\n\t\t8'b10110011\t: sim_spmB3 <= sx;\n\t\t8'b10110100\t: sim_spmB4 <= sx;\n\t\t8'b10110101\t: sim_spmB5 <= sx;\n\t\t8'b10110110\t: sim_spmB6 <= sx;\n\t\t8'b10110111\t: sim_spmB7 <= sx;\n\t\t8'b10111000\t: sim_spmB8 <= sx;\n\t\t8'b10111001\t: sim_spmB9 <= sx;\n\t\t8'b10111010\t: sim_spmBA <= sx;\n\t\t8'b10111011\t: sim_spmBB <= sx;\n\t\t8'b10111100\t: sim_spmBC <= sx;\n\t\t8'b10111101\t: sim_spmBD <= sx;\n\t\t8'b10111110\t: sim_spmBE <= sx;\n\t\t8'b10111111\t: sim_spmBF <= sx;\n\t\t8'b11000000\t: sim_spmC0 <= sx;\n\t\t8'b11000001\t: sim_spmC1 <= sx;\n\t\t8'b11000010\t: sim_spmC2 <= sx;\n\t\t8'b11000011\t: sim_spmC3 <= sx;\n\t\t8'b11000100\t: sim_spmC4 <= sx;\n\t\t8'b11000101\t: sim_spmC5 <= sx;\n\t\t8'b11000110\t: sim_spmC6 <= sx;\n\t\t8'b11000111\t: sim_spmC7 <= sx;\n\t\t8'b11001000\t: sim_spmC8 <= sx;\n\t\t8'b11001001\t: sim_spmC9 <= sx;\n\t\t8'b11001010\t: sim_spmCA <= sx;\n\t\t8'b11001011\t: sim_spmCB <= sx;\n\t\t8'b11001100\t: sim_spmCC <= sx;\n\t\t8'b11001101\t: sim_spmCD <= sx;\n\t\t8'b11001110\t: sim_spmCE <= sx;\n\t\t8'b11001111\t: sim_spmCF <= sx;\n\t\t8'b11010000\t: sim_spmD0 <= sx;\n\t\t8'b11010001\t: sim_spmD1 <= sx;\n\t\t8'b11010010\t: sim_spmD2 <= sx;\n\t\t8'b11010011\t: sim_spmD3 <= sx;\n\t\t8'b11010100\t: sim_spmD4 <= sx;\n\t\t8'b11010101\t: sim_spmD5 <= sx;\n\t\t8'b11010110\t: sim_spmD6 <= sx;\n\t\t8'b11010111\t: sim_spmD7 <= sx;\n\t\t8'b11011000\t: sim_spmD8 <= sx;\n\t\t8'b11011001\t: sim_spmD9 <= sx;\n\t\t8'b11011010\t: sim_spmDA <= sx;\n\t\t8'b11011011\t: sim_spmDB <= sx;\n\t\t8'b11011100\t: sim_spmDC <= sx;\n\t\t8'b11011101\t: sim_spmDD <= sx;\n\t\t8'b11011110\t: sim_spmDE <= sx;\n\t\t8'b11011111\t: sim_spmDF <= sx;\n\t\t8'b11100000\t: sim_spmE0 <= sx;\n\t\t8'b11100001\t: sim_spmE1 <= sx;\n\t\t8'b11100010\t: sim_spmE2 <= sx;\n\t\t8'b11100011\t: sim_spmE3 <= sx;\n\t\t8'b11100100\t: sim_spmE4 <= sx;\n\t\t8'b11100101\t: sim_spmE5 <= sx;\n\t\t8'b11100110\t: sim_spmE6 <= sx;\n\t\t8'b11100111\t: sim_spmE7 <= sx;\n\t\t8'b11101000\t: sim_spmE8 <= sx;\n\t\t8'b11101001\t: sim_spmE9 <= sx;\n\t\t8'b11101010\t: sim_spmEA <= sx;\n\t\t8'b11101011\t: sim_spmEB <= sx;\n\t\t8'b11101100\t: sim_spmEC <= sx;\n\t\t8'b11101101\t: sim_spmED <= sx;\n\t\t8'b11101110\t: sim_spmEE <= sx;\n\t\t8'b11101111\t: sim_spmEF <= sx;\n\t\t8'b11110000\t: sim_spmF0 <= sx;\n\t\t8'b11110001\t: sim_spmF1 <= sx;\n\t\t8'b11110010\t: sim_spmF2 <= sx;\n\t\t8'b11110011\t: sim_spmF3 <= sx;\n\t\t8'b11110100\t: sim_spmF4 <= sx;\n\t\t8'b11110101\t: sim_spmF5 <= sx;\n\t\t8'b11110110\t: sim_spmF6 <= sx;\n\t\t8'b11110111\t: sim_spmF7 <= sx;\n\t\t8'b11111000\t: sim_spmF8 <= sx;\n\t\t8'b11111001\t: sim_spmF9 <= sx;\n\t\t8'b11111010\t: sim_spmFA <= sx;\n\t\t8'b11111011\t: sim_spmFB <= sx;\n\t\t8'b11111100\t: sim_spmFC <= sx;\n\t\t8'b11111101\t: sim_spmFD <= sx;\n\t\t8'b11111110\t: sim_spmFE <= sx;\n\t\t8'b11111111\t: sim_spmFF <= sx;\n    endcase\nend\n\nend\n\n\n\n\nif (bank == 1'b0) begin\n\tkcpsm6_status[1:16] <= \"A,\";\n\tsim_s0 <= bank_a_s0 ;\n\tsim_s1 <= bank_a_s1 ;\n\tsim_s2 <= bank_a_s2 ;\n\tsim_s3 <= bank_a_s3 ;\n\tsim_s4 <= bank_a_s4 ;\n\tsim_s5 <= bank_a_s5 ;\n\tsim_s6 <= bank_a_s6 ;\n\tsim_s7 <= bank_a_s7 ;\n\tsim_s8 <= bank_a_s8 ;\n\tsim_s9 <= bank_a_s9 ;\n\tsim_sA <= bank_a_sa ;\n\tsim_sB <= bank_a_sb ;\n\tsim_sC <= bank_a_sc ;\n\tsim_sD <= bank_a_sd ;\n\tsim_sE <= bank_a_se ;\n\tsim_sF <= bank_a_sf ;\nend\nelse begin\n\tkcpsm6_status[1:16] <= \"B,\";\n\tsim_s0 <= bank_b_s0 ;\n\tsim_s1 <= bank_b_s1 ;\n\tsim_s2 <= bank_b_s2 ;\n\tsim_s3 <= bank_b_s3 ;\n\tsim_s4 <= bank_b_s4 ;\n\tsim_s5 <= bank_b_s5 ;\n\tsim_s6 <= bank_b_s6 ;\n\tsim_s7 <= bank_b_s7 ;\n\tsim_s8 <= bank_b_s8 ;\n\tsim_s9 <= bank_b_s9 ;\n\tsim_sA <= bank_b_sa ;\n\tsim_sB <= bank_b_sb ;\n\tsim_sC <= bank_b_sc ;\n\tsim_sD <= bank_b_sd ;\n\tsim_sE <= bank_b_se ;\n\tsim_sF <= bank_b_sf ;\nend\n\n\nend \n  \n  \n\n\n\n\n\n\n\n\nendmodule\n\n\n\n\n\n\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: kcpsm6. Module specification: The kcpsm6 module implements a PicoBlaze-6 soft microcontroller core, featuring an arithmetic logic unit (ALU), register banks, program counter, stack, and scratch pad memory. It decodes and executes instructions, handles interrupts, and provides input/output interfaces. The module has input ports for instruction (18-bit), in_port (8-bit), interrupt, sleep, reset, and clock signals, while its output ports include address (12-bit), bram_enable, out_port (8-bit), port_id (8-bit), write_strobe, k_write_strobe, read_strobe, and interrupt_ack. Internally, it uses numerous signals for control (e.g., t_state, run, internal_reset), ALU operations (e.g., arith_logical_sel"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: kcpsm6\n\nExplanation: This module implements a PicoBlaze-6 soft microcontroller core. It includes the processor's arithmetic logic unit (ALU), register banks, program counter, stack, and scratch pad memory. The module decodes and executes instructions, handles interrupts, and provides input/output interfaces. It also includes simulation-related code for displaying the current instruction, processor status, and register contents during simulation."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\n[17:0] instruction, [7:0] in_port, interrupt, sleep, reset, clk\n\nExplanation:\n- instruction: 18-bit wide input for fetching instructions from program memory\n- in_port: 8-bit input port for receiving data from external devices\n- interrupt: Input signal to trigger an interrupt\n- sleep: Input to put the processor in sleep mode\n- reset: Input to reset the processor\n- clk: Clock input for synchronizing operations\n\nOutput ports:\n[11:0] address, bram_enable, [7:0] out_port, [7:0] port_id, write_strobe, k_write_strobe, read_strobe, interrupt_ack\n\nExplanation:\n- address: 12-bit output to address program memory\n- bram_enable: Output to enable block RAM (program memory)\n- out_port: 8-bit output port for sending data to external devices\n- port_id: 8-bit port address for I/O operations\n- write_strobe: Output signal indicating a write operation\n- k_write_strobe: Constant-specific write strobe\n- read_strobe: Output signal indicating a read operation\n- interrupt_ack: Interrupt acknowledgment signal"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\nt_state_value, t_state, run_value, run, internal_reset_value, internal_reset, sync_sleep, int_enable_type, interrupt_enable_value, interrupt_enable, sync_interrupt, active_interrupt_value, active_interrupt, arith_logical_sel, arith_carry_in, arith_carry_value, arith_carry, half_arith_logical, logical_carry_mask, carry_arith_logical, arith_logical_value, arith_logical_result, shift_rotate_value, shift_rotate_result, shift_in_bit, alu_result, alu_mux_sel_value, alu_mux_sel, strobe_type, write_strobe_value, k_write_strobe_value, read_strobe_value, flag_enable_type, flag_enable_value, flag_enable, lower_parity, lower_parity_sel, carry_lower_parity, upper_parity, parity, shift_carry_value, shift_carry, carry_flag_value, carry_flag, use_zero_flag_value, use_zero_flag, drive_carry_in_zero, carry_in_zero, lower_zero, lower_zero_sel, carry_lower_zero, middle_zero, middle_zero_sel, carry_middle_zero, upper_zero_sel, zero_flag_value, zero_flag, spm_enable_value, spm_enable, spm_ram_data, spm_data, regbank_type, bank_value, bank, loadstar_type, sx_addr4_value, register_enable_type, register_enable_value, register_enable, sx_addr, sy_addr, sx, sy, sy_or_kk, pc_move_is_valid, move_type, returni_type, pc_mode, register_vector, half_pc, carry_pc, pc_value, pc, pc_vector, push_stack, pop_stack, stack_memory, return_vector, stack_carry_flag, shadow_carry_flag, stack_zero_flag, shadow_zero_value, shadow_zero_flag, stack_bank, shadow_bank, stack_bit, special_bit, half_pointer_value, feed_pointer_value, stack_pointer_carry, stack_pointer_value, stack_pointer.\n\nExplanation:\nThese internal signals are used for various purposes within the module, including:\n- Control signals (e.g., t_state, run, internal_reset)\n- ALU operations (e.g., arith_logical_sel, arith_carry, shift_rotate_value)\n- Flags and status (e.g., carry_flag, zero_flag, interrupt_enable)\n- Memory operations (e.g., spm_enable, spm_data)\n- Register bank management (e.g., bank, sx_addr, sy_addr)\n- Program counter and stack operations (e.g., pc_value, stack_pointer)\n- Instruction decoding and execution (e.g., pc_move_is_valid, move_type)\n\nThese signals work together to implement the functionality of the PicoBlaze-6 soft microcontroller, handling instruction execution, data processing, memory access, and I/O operations."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1ps/1ps\n\n\n\n\n\n(* CORE_GENERATION_INFO = \"kcpsm6,kcpsm6_v1_3,{component_name=kcpsm6}\" *)\nmodule kcpsm6 (address, instruction, bram_enable, in_port, out_port, port_id, write_strobe, k_write_strobe, read_strobe, interrupt, interrupt_ack, sleep, reset, clk) ;\n\nparameter [7:0] \thwbuild = 8'h00 ;\nparameter [11:0] \tinterrupt_vector = 12'h3FF ;\nparameter integer scratch_pad_memory_size = 64 ;   \n\noutput [11:0]\taddress ;\ninput\t [17:0]    \tinstruction ;\noutput\t\tbram_enable ;\ninput\t [7:0]\tin_port ;\noutput [7:0]\tout_port ;\noutput [7:0]\tport_id ;\noutput\t\twrite_strobe ;\noutput\t\tk_write_strobe ;\noutput\t\tread_strobe ;\ninput\t\t\tinterrupt ;\noutput\t\tinterrupt_ack ;\ninput\t\t\tsleep ;\ninput\t\t\treset ;\ninput\t\t\tclk ;\n\n\n\n\n\n\n\n\n\n\n\n\n\nwire\t[2:1]\t\tt_state_value ;\nwire\t[2:1]\t\tt_state ;\nwire \t\t\trun_value ;\nwire              run ;\nwire  \t\tinternal_reset_value ;\nwire \t\t\tinternal_reset ;\nwire \t\t\tsync_sleep ;\nwire \t\t\tint_enable_type ;\nwire \t\t\tinterrupt_enable_value ;\nwire\t\t\tinterrupt_enable ;\nwire\t\t\tsync_interrupt ;\nwire \t\t\tactive_interrupt_value ;\nwire \t\t\tactive_interrupt ;\n\n\n\nwire\t[2:0]\t\tarith_logical_sel ;\nwire\t\t\tarith_carry_in ;\nwire\t\t\tarith_carry_value ;\nwire\t\t\tarith_carry ;\nwire \t[7:0]\t\thalf_arith_logical ;\nwire \t[7:0]\t\tlogical_carry_mask ;\nwire \t[7:0]\t\tcarry_arith_logical ;\nwire \t[7:0]\t\tarith_logical_value ;\nwire \t[7:0]\t\tarith_logical_result ;\n\n\n\nwire \t[7:0]\t\tshift_rotate_value ;\nwire \t[7:0]\t\tshift_rotate_result ;\nwire\t\t\tshift_in_bit ;\n\n\n\nwire \t[7:0]\t\talu_result ;\nwire \t[1:0]\t\talu_mux_sel_value ;\nwire \t[1:0]\t\talu_mux_sel ;\n\n\n\nwire\t\t\tstrobe_type ;\nwire \t\t\twrite_strobe_value ;\nwire \t\t\tk_write_strobe_value ;\nwire\t\t\tread_strobe_value ;\n\n\n\nwire\t\t\tflag_enable_type ;\nwire\t\t\tflag_enable_value ;\nwire\t\t\tflag_enable ; \nwire\t\t\tlower_parity ;\nwire\t\t\tlower_parity_sel ;\nwire\t\t\tcarry_lower_parity ;\nwire \t\t\tupper_parity ;\nwire\t\t\tparity ;\nwire\t\t\tshift_carry_value ;\nwire\t\t\tshift_carry ;\nwire\t\t\tcarry_flag_value ;\nwire\t\t\tcarry_flag ;\n\nwire \t\t\tuse_zero_flag_value ;\nwire\t\t\tuse_zero_flag ;\nwire \t\t\tdrive_carry_in_zero ;\nwire          \tcarry_in_zero ;\nwire             \tlower_zero ;\nwire         \tlower_zero_sel ;\nwire       \t\tcarry_lower_zero ;\nwire           \tmiddle_zero ;\nwire        \tmiddle_zero_sel ;\nwire      \t\tcarry_middle_zero ;\nwire         \tupper_zero_sel ;\nwire        \tzero_flag_value ;\nwire              zero_flag ;\n\n\n\nwire       \t\tspm_enable_value ;\nwire             \tspm_enable ;\nwire \t[7:0]\t\tspm_ram_data ;\nwire \t[7:0]\t\tspm_data  ;\n\n\n\nwire           \tregbank_type ;\nwire             \tbank_value ;\nwire              bank ;\nwire          \tloadstar_type ;\nwire         \tsx_addr4_value ;\nwire   \t\tregister_enable_type ;\nwire  \t\tregister_enable_value ;\nwire        \tregister_enable ;\nwire \t[4:0]\t\tsx_addr ;\nwire \t[4:0]\t\tsy_addr ;\nwire \t[7:0]\t\tsx ;\nwire \t[7:0]\t\tsy ;\n\n\n\nwire \t[7:0]\t\tsy_or_kk ;\n\n\n\nwire       \t\tpc_move_is_valid ;\nwire              move_type ;\nwire           \treturni_type ;\nwire \t[2:0]\t\tpc_mode ;\nwire \t[11:0]\tregister_vector ;\nwire \t[11:0]\thalf_pc ;\nwire \t[10:0]\tcarry_pc ;\nwire \t[11:0]\tpc_value ;\nwire \t[11:0]\tpc ;\nwire \t[11:0]\tpc_vector ;\n\n\n\nwire             \tpush_stack ;\nwire              pop_stack ;\nwire \t[11:0]\tstack_memory ;\nwire \t[11:0]\treturn_vector ;\nwire       \t\tstack_carry_flag ;\nwire      \t\tshadow_carry_flag ;\nwire        \tstack_zero_flag ;\nwire      \t\tshadow_zero_value ;\nwire       \t\tshadow_zero_flag ;\nwire             \tstack_bank ;\nwire            \tshadow_bank ;\nwire              stack_bit ;\nwire            \tspecial_bit ;\nwire \t[4:0]\t\thalf_pointer_value ;\nwire \t[4:0]\t\tfeed_pointer_value ;\nwire \t[4:0]\t\tstack_pointer_carry ;\nwire \t[4:0]\t\tstack_pointer_value ;\nwire \t[4:0]\t\tstack_pointer ;\n\n\n\n\n\n\n\n\n\nreg\t[1:152]\tkcpsm6_opcode ;\nreg\t[1:128]\tkcpsm6_status ;\nreg\t[7:0]\t      sim_s0 ;\nreg\t[7:0]\t      sim_s1 ;\nreg\t[7:0]\t      sim_s2 ;\nreg\t[7:0]\t      sim_s3 ;\nreg\t[7:0]\t      sim_s4 ;\nreg\t[7:0]\t      sim_s5 ;\nreg\t[7:0]\t      sim_s6 ;\nreg\t[7:0]\t      sim_s7 ;\nreg\t[7:0]\t      sim_s8 ;\nreg\t[7:0]\t      sim_s9 ;\nreg\t[7:0]\t      sim_sA ;\nreg\t[7:0]\t      sim_sB ;\nreg\t[7:0]\t      sim_sC ;\nreg\t[7:0]\t      sim_sD ;\nreg\t[7:0]\t      sim_sE ;\nreg\t[7:0]\t      sim_sF ;\nreg\t[7:0]\t     \tsim_spm00 ;\nreg\t[7:0]\t\tsim_spm01 ;\nreg\t[7:0]\t\tsim_spm02 ;\nreg\t[7:0]\t\tsim_spm03 ;\nreg\t[7:0]\t\tsim_spm04 ;\nreg\t[7:0]\t\tsim_spm05 ;\nreg\t[7:0]\t\tsim_spm06 ;\nreg\t[7:0]\t\tsim_spm07 ;\nreg\t[7:0]\t\tsim_spm08 ;\nreg\t[7:0]\t\tsim_spm09 ;\nreg\t[7:0]\t\tsim_spm0A ;\nreg\t[7:0]\t\tsim_spm0B ;\nreg\t[7:0]\t\tsim_spm0C ;\nreg\t[7:0]\t\tsim_spm0D ;\nreg\t[7:0]\t\tsim_spm0E ;\nreg\t[7:0]\t\tsim_spm0F ;\nreg\t[7:0]\t\tsim_spm10 ;\nreg\t[7:0]\t\tsim_spm11 ;\nreg\t[7:0]\t\tsim_spm12 ;\nreg\t[7:0]\t\tsim_spm13 ;\nreg\t[7:0]\t\tsim_spm14 ;\nreg\t[7:0]\t\tsim_spm15 ;\nreg\t[7:0]\t\tsim_spm16 ;\nreg\t[7:0]\t\tsim_spm17 ;\nreg\t[7:0]\t\tsim_spm18 ;\nreg\t[7:0]\t\tsim_spm19 ;\nreg\t[7:0]\t\tsim_spm1A ;\nreg\t[7:0]\t\tsim_spm1B ;\nreg\t[7:0]\t\tsim_spm1C ;\nreg\t[7:0]\t\tsim_spm1D ;\nreg\t[7:0]\t\tsim_spm1E ;\nreg\t[7:0]\t\tsim_spm1F ;\nreg\t[7:0]\t\tsim_spm20 ;\nreg\t[7:0]\t\tsim_spm21 ;\nreg\t[7:0]\t\tsim_spm22 ;\nreg\t[7:0]\t\tsim_spm23 ;\nreg\t[7:0]\t\tsim_spm24 ;\nreg\t[7:0]\t\tsim_spm25 ;\nreg\t[7:0]\t\tsim_spm26 ;\nreg\t[7:0]\t\tsim_spm27 ;\nreg\t[7:0]\t\tsim_spm28 ;\nreg\t[7:0]\t\tsim_spm29 ;\nreg\t[7:0]\t\tsim_spm2A ;\nreg\t[7:0]\t\tsim_spm2B ;\nreg\t[7:0]\t\tsim_spm2C ;\nreg\t[7:0]\t\tsim_spm2D ;\nreg\t[7:0]\t\tsim_spm2E ;\nreg\t[7:0]\t\tsim_spm2F ;\nreg\t[7:0]\t\tsim_spm30 ;\nreg\t[7:0]\t\tsim_spm31 ;\nreg\t[7:0]\t\tsim_spm32 ;\nreg\t[7:0]\t\tsim_spm33 ;\nreg\t[7:0]\t\tsim_spm34 ;\nreg\t[7:0]\t\tsim_spm35 ;\nreg\t[7:0]\t\tsim_spm36 ;\nreg\t[7:0]\t\tsim_spm37 ;\nreg\t[7:0]\t\tsim_spm38 ;\nreg\t[7:0]\t\tsim_spm39 ;\nreg\t[7:0]\t\tsim_spm3A ;\nreg\t[7:0]\t\tsim_spm3B ;\nreg\t[7:0]\t\tsim_spm3C ;\nreg\t[7:0]\t\tsim_spm3D ;\nreg\t[7:0]\t\tsim_spm3E ;\nreg\t[7:0]\t\tsim_spm3F ;\nreg\t[7:0]\t\tsim_spm40 ;\nreg\t[7:0]\t\tsim_spm41 ;\nreg\t[7:0]\t\tsim_spm42 ;\nreg\t[7:0]\t\tsim_spm43 ;\nreg\t[7:0]\t\tsim_spm44 ;\nreg\t[7:0]\t\tsim_spm45 ;\nreg\t[7:0]\t\tsim_spm46 ;\nreg\t[7:0]\t\tsim_spm47 ;\nreg\t[7:0]\t\tsim_spm48 ;\nreg\t[7:0]\t\tsim_spm49 ;\nreg\t[7:0]\t\tsim_spm4A ;\nreg\t[7:0]\t\tsim_spm4B ;\nreg\t[7:0]\t\tsim_spm4C ;\nreg\t[7:0]\t\tsim_spm4D ;\nreg\t[7:0]\t\tsim_spm4E ;\nreg\t[7:0]\t\tsim_spm4F ;\nreg\t[7:0]\t\tsim_spm50 ;\nreg\t[7:0]\t\tsim_spm51 ;\nreg\t[7:0]\t\tsim_spm52 ;\nreg\t[7:0]\t\tsim_spm53 ;\nreg\t[7:0]\t\tsim_spm54 ;\nreg\t[7:0]\t\tsim_spm55 ;\nreg\t[7:0]\t\tsim_spm56 ;\nreg\t[7:0]\t\tsim_spm57 ;\nreg\t[7:0]\t\tsim_spm58 ;\nreg\t[7:0]\t\tsim_spm59 ;\nreg\t[7:0]\t\tsim_spm5A ;\nreg\t[7:0]\t\tsim_spm5B ;\nreg\t[7:0]\t\tsim_spm5C ;\nreg\t[7:0]\t\tsim_spm5D ;\nreg\t[7:0]\t\tsim_spm5E ;\nreg\t[7:0]\t\tsim_spm5F ;\nreg\t[7:0]\t\tsim_spm60 ;\nreg\t[7:0]\t\tsim_spm61 ;\nreg\t[7:0]\t\tsim_spm62 ;\nreg\t[7:0]\t\tsim_spm63 ;\nreg\t[7:0]\t\tsim_spm64 ;\nreg\t[7:0]\t\tsim_spm65 ;\nreg\t[7:0]\t\tsim_spm66 ;\nreg\t[7:0]\t\tsim_spm67 ;\nreg\t[7:0]\t\tsim_spm68 ;\nreg\t[7:0]\t\tsim_spm69 ;\nreg\t[7:0]\t\tsim_spm6A ;\nreg\t[7:0]\t\tsim_spm6B ;\nreg\t[7:0]\t\tsim_spm6C ;\nreg\t[7:0]\t\tsim_spm6D ;\nreg\t[7:0]\t\tsim_spm6E ;\nreg\t[7:0]\t\tsim_spm6F ;\nreg\t[7:0]\t\tsim_spm70 ;\nreg\t[7:0]\t\tsim_spm71 ;\nreg\t[7:0]\t\tsim_spm72 ;\nreg\t[7:0]\t\tsim_spm73 ;\nreg\t[7:0]\t\tsim_spm74 ;\nreg\t[7:0]\t\tsim_spm75 ;\nreg\t[7:0]\t\tsim_spm76 ;\nreg\t[7:0]\t\tsim_spm77 ;\nreg\t[7:0]\t\tsim_spm78 ;\nreg\t[7:0]\t\tsim_spm79 ;\nreg\t[7:0]\t\tsim_spm7A ;\nreg\t[7:0]\t\tsim_spm7B ;\nreg\t[7:0]\t\tsim_spm7C ;\nreg\t[7:0]\t\tsim_spm7D ;\nreg\t[7:0]\t\tsim_spm7E ;\nreg\t[7:0]\t\tsim_spm7F ;\nreg\t[7:0]\t\tsim_spm80 ;\nreg\t[7:0]\t\tsim_spm81 ;\nreg\t[7:0]\t\tsim_spm82 ;\nreg\t[7:0]\t\tsim_spm83 ;\nreg\t[7:0]\t\tsim_spm84 ;\nreg\t[7:0]\t\tsim_spm85 ;\nreg\t[7:0]\t\tsim_spm86 ;\nreg\t[7:0]\t\tsim_spm87 ;\nreg\t[7:0]\t\tsim_spm88 ;\nreg\t[7:0]\t\tsim_spm89 ;\nreg\t[7:0]\t\tsim_spm8A ;\nreg\t[7:0]\t\tsim_spm8B ;\nreg\t[7:0]\t\tsim_spm8C ;\nreg\t[7:0]\t\tsim_spm8D ;\nreg\t[7:0]\t\tsim_spm8E ;\nreg\t[7:0]\t\tsim_spm8F ;\nreg\t[7:0]\t\tsim_spm90 ;\nreg\t[7:0]\t\tsim_spm91 ;\nreg\t[7:0]\t\tsim_spm92 ;\nreg\t[7:0]\t\tsim_spm93 ;\nreg\t[7:0]\t\tsim_spm94 ;\nreg\t[7:0]\t\tsim_spm95 ;\nreg\t[7:0]\t\tsim_spm96 ;\nreg\t[7:0]\t\tsim_spm97 ;\nreg\t[7:0]\t\tsim_spm98 ;\nreg\t[7:0]\t\tsim_spm99 ;\nreg\t[7:0]\t\tsim_spm9A ;\nreg\t[7:0]\t\tsim_spm9B ;\nreg\t[7:0]\t\tsim_spm9C ;\nreg\t[7:0]\t\tsim_spm9D ;\nreg\t[7:0]\t\tsim_spm9E ;\nreg\t[7:0]\t\tsim_spm9F ;\nreg\t[7:0]\t\tsim_spmA0 ;\nreg\t[7:0]\t\tsim_spmA1 ;\nreg\t[7:0]\t\tsim_spmA2 ;\nreg\t[7:0]\t\tsim_spmA3 ;\nreg\t[7:0]\t\tsim_spmA4 ;\nreg\t[7:0]\t\tsim_spmA5 ;\nreg\t[7:0]\t\tsim_spmA6 ;\nreg\t[7:0]\t\tsim_spmA7 ;\nreg\t[7:0]\t\tsim_spmA8 ;\nreg\t[7:0]\t\tsim_spmA9 ;\nreg\t[7:0]\t\tsim_spmAA ;\nreg\t[7:0]\t\tsim_spmAB ;\nreg\t[7:0]\t\tsim_spmAC ;\nreg\t[7:0]\t\tsim_spmAD ;\nreg\t[7:0]\t\tsim_spmAE ;\nreg\t[7:0]\t\tsim_spmAF ;\nreg\t[7:0]\t\tsim_spmB0 ;\nreg\t[7:0]\t\tsim_spmB1 ;\nreg\t[7:0]\t\tsim_spmB2 ;\nreg\t[7:0]\t\tsim_spmB3 ;\nreg\t[7:0]\t\tsim_spmB4 ;\nreg\t[7:0]\t\tsim_spmB5 ;\nreg\t[7:0]\t\tsim_spmB6 ;\nreg\t[7:0]\t\tsim_spmB7 ;\nreg\t[7:0]\t\tsim_spmB8 ;\nreg\t[7:0]\t\tsim_spmB9 ;\nreg\t[7:0]\t\tsim_spmBA ;\nreg\t[7:0]\t\tsim_spmBB ;\nreg\t[7:0]\t\tsim_spmBC ;\nreg\t[7:0]\t\tsim_spmBD ;\nreg\t[7:0]\t\tsim_spmBE ;\nreg\t[7:0]\t\tsim_spmBF ;\nreg\t[7:0]\t\tsim_spmC0 ;\nreg\t[7:0]\t\tsim_spmC1 ;\nreg\t[7:0]\t\tsim_spmC2 ;\nreg\t[7:0]\t\tsim_spmC3 ;\nreg\t[7:0]\t\tsim_spmC4 ;\nreg\t[7:0]\t\tsim_spmC5 ;\nreg\t[7:0]\t\tsim_spmC6 ;\nreg\t[7:0]\t\tsim_spmC7 ;\nreg\t[7:0]\t\tsim_spmC8 ;\nreg\t[7:0]\t\tsim_spmC9 ;\nreg\t[7:0]\t\tsim_spmCA ;\nreg\t[7:0]\t\tsim_spmCB ;\nreg\t[7:0]\t\tsim_spmCC ;\nreg\t[7:0]\t\tsim_spmCD ;\nreg\t[7:0]\t\tsim_spmCE ;\nreg\t[7:0]\t\tsim_spmCF ;\nreg\t[7:0]\t\tsim_spmD0 ;\nreg\t[7:0]\t\tsim_spmD1 ;\nreg\t[7:0]\t\tsim_spmD2 ;\nreg\t[7:0]\t\tsim_spmD3 ;\nreg\t[7:0]\t\tsim_spmD4 ;\nreg\t[7:0]\t\tsim_spmD5 ;\nreg\t[7:0]\t\tsim_spmD6 ;\nreg\t[7:0]\t\tsim_spmD7 ;\nreg\t[7:0]\t\tsim_spmD8 ;\nreg\t[7:0]\t\tsim_spmD9 ;\nreg\t[7:0]\t\tsim_spmDA ;\nreg\t[7:0]\t\tsim_spmDB ;\nreg\t[7:0]\t\tsim_spmDC ;\nreg\t[7:0]\t\tsim_spmDD ;\nreg\t[7:0]\t\tsim_spmDE ;\nreg\t[7:0]\t\tsim_spmDF ;\nreg\t[7:0]\t\tsim_spmE0 ;\nreg\t[7:0]\t\tsim_spmE1 ;\nreg\t[7:0]\t\tsim_spmE2 ;\nreg\t[7:0]\t\tsim_spmE3 ;\nreg\t[7:0]\t\tsim_spmE4 ;\nreg\t[7:0]\t\tsim_spmE5 ;\nreg\t[7:0]\t\tsim_spmE6 ;\nreg\t[7:0]\t\tsim_spmE7 ;\nreg\t[7:0]\t\tsim_spmE8 ;\nreg\t[7:0]\t\tsim_spmE9 ;\nreg\t[7:0]\t\tsim_spmEA ;\nreg\t[7:0]\t\tsim_spmEB ;\nreg\t[7:0]\t\tsim_spmEC ;\nreg\t[7:0]\t\tsim_spmED ;\nreg\t[7:0]\t\tsim_spmEE ;\nreg\t[7:0]\t\tsim_spmEF ;\nreg\t[7:0]\t\tsim_spmF0 ;\nreg\t[7:0]\t\tsim_spmF1 ;\nreg\t[7:0]\t\tsim_spmF2 ;\nreg\t[7:0]\t\tsim_spmF3 ;\nreg\t[7:0]\t\tsim_spmF4 ;\nreg\t[7:0]\t\tsim_spmF5 ;\nreg\t[7:0]\t\tsim_spmF6 ;\nreg\t[7:0]\t\tsim_spmF7 ;\nreg\t[7:0]\t\tsim_spmF8 ;\nreg\t[7:0]\t\tsim_spmF9 ;\nreg\t[7:0]\t\tsim_spmFA ;\nreg\t[7:0]\t\tsim_spmFB ;\nreg\t[7:0]\t\tsim_spmFC ;\nreg\t[7:0]\t\tsim_spmFD ;\nreg\t[7:0]\t\tsim_spmFE ;\nreg\t[7:0]\t\tsim_spmFF ;\n\n\n\ninitial begin\nkcpsm6_status = \"A,NZ,NC,ID,Reset\" ;\nkcpsm6_opcode = \"LOAD s0, s0        \" ;\n\nsim_s0 = 8'h00 ;\nsim_s1 = 8'h00 ;\nsim_s2 = 8'h00 ;\nsim_s3 = 8'h00 ;\nsim_s4 = 8'h00 ;\nsim_s5 = 8'h00 ;\nsim_s6 = 8'h00 ;\nsim_s7 = 8'h00 ;\nsim_s8 = 8'h00 ;\nsim_s9 = 8'h00 ;\nsim_sA = 8'h00 ;\nsim_sB = 8'h00 ;\nsim_sC = 8'h00 ;\nsim_sD = 8'h00 ;\nsim_sE = 8'h00 ;\nsim_sF = 8'h00 ;\n\nsim_spm00 = 8'h00 ;\nsim_spm01 = 8'h00 ;\nsim_spm02 = 8'h00 ;\nsim_spm03 = 8'h00 ;\nsim_spm04 = 8'h00 ;\nsim_spm05 = 8'h00 ;\nsim_spm06 = 8'h00 ;\nsim_spm07 = 8'h00 ;\nsim_spm08 = 8'h00 ;\nsim_spm09 = 8'h00 ;\nsim_spm0A = 8'h00 ;\nsim_spm0B = 8'h00 ;\nsim_spm0C = 8'h00 ;\nsim_spm0D = 8'h00 ;\nsim_spm0E = 8'h00 ;\nsim_spm0F = 8'h00 ;\nsim_spm10 = 8'h00 ;\nsim_spm11 = 8'h00 ;\nsim_spm12 = 8'h00 ;\nsim_spm13 = 8'h00 ;\nsim_spm14 = 8'h00 ;\nsim_spm15 = 8'h00 ;\nsim_spm16 = 8'h00 ;\nsim_spm17 = 8'h00 ;\nsim_spm18 = 8'h00 ;\nsim_spm19 = 8'h00 ;\nsim_spm1A = 8'h00 ;\nsim_spm1B = 8'h00 ;\nsim_spm1C = 8'h00 ;\nsim_spm1D = 8'h00 ;\nsim_spm1E = 8'h00 ;\nsim_spm1F = 8'h00 ;\nsim_spm20 = 8'h00 ;\nsim_spm21 = 8'h00 ;\nsim_spm22 = 8'h00 ;\nsim_spm23 = 8'h00 ;\nsim_spm24 = 8'h00 ;\nsim_spm25 = 8'h00 ;\nsim_spm26 = 8'h00 ;\nsim_spm27 = 8'h00 ;\nsim_spm28 = 8'h00 ;\nsim_spm29 = 8'h00 ;\nsim_spm2A = 8'h00 ;\nsim_spm2B = 8'h00 ;\nsim_spm2C = 8'h00 ;\nsim_spm2D = 8'h00 ;\nsim_spm2E = 8'h00 ;\nsim_spm2F = 8'h00 ;\nsim_spm30 = 8'h00 ;\nsim_spm31 = 8'h00 ;\nsim_spm32 = 8'h00 ;\nsim_spm33 = 8'h00 ;\nsim_spm34 = 8'h00 ;\nsim_spm35 = 8'h00 ;\nsim_spm36 = 8'h00 ;\nsim_spm37 = 8'h00 ;\nsim_spm38 = 8'h00 ;\nsim_spm39 = 8'h00 ;\nsim_spm3A = 8'h00 ;\nsim_spm3B = 8'h00 ;\nsim_spm3C = 8'h00 ;\nsim_spm3D = 8'h00 ;\nsim_spm3E = 8'h00 ;\nsim_spm3F = 8'h00 ;\nsim_spm40 = 8'h00 ;\nsim_spm41 = 8'h00 ;\nsim_spm42 = 8'h00 ;\nsim_spm43 = 8'h00 ;\nsim_spm44 = 8'h00 ;\nsim_spm45 = 8'h00 ;\nsim_spm46 = 8'h00 ;\nsim_spm47 = 8'h00 ;\nsim_spm48 = 8'h00 ;\nsim_spm49 = 8'h00 ;\nsim_spm4A = 8'h00 ;\nsim_spm4B = 8'h00 ;\nsim_spm4C = 8'h00 ;\nsim_spm4D = 8'h00 ;\nsim_spm4E = 8'h00 ;\nsim_spm4F = 8'h00 ;\nsim_spm50 = 8'h00 ;\nsim_spm51 = 8'h00 ;\nsim_spm52 = 8'h00 ;\nsim_spm53 = 8'h00 ;\nsim_spm54 = 8'h00 ;\nsim_spm55 = 8'h00 ;\nsim_spm56 = 8'h00 ;\nsim_spm57 = 8'h00 ;\nsim_spm58 = 8'h00 ;\nsim_spm59 = 8'h00 ;\nsim_spm5A = 8'h00 ;\nsim_spm5B = 8'h00 ;\nsim_spm5C = 8'h00 ;\nsim_spm5D = 8'h00 ;\nsim_spm5E = 8'h00 ;\nsim_spm5F = 8'h00 ;\nsim_spm60 = 8'h00 ;\nsim_spm61 = 8'h00 ;\nsim_spm62 = 8'h00 ;\nsim_spm63 = 8'h00 ;\nsim_spm64 = 8'h00 ;\nsim_spm65 = 8'h00 ;\nsim_spm66 = 8'h00 ;\nsim_spm67 = 8'h00 ;\nsim_spm68 = 8'h00 ;\nsim_spm69 = 8'h00 ;\nsim_spm6A = 8'h00 ;\nsim_spm6B = 8'h00 ;\nsim_spm6C = 8'h00 ;\nsim_spm6D = 8'h00 ;\nsim_spm6E = 8'h00 ;\nsim_spm6F = 8'h00 ;\nsim_spm70 = 8'h00 ;\nsim_spm71 = 8'h00 ;\nsim_spm72 = 8'h00 ;\nsim_spm73 = 8'h00 ;\nsim_spm74 = 8'h00 ;\nsim_spm75 = 8'h00 ;\nsim_spm76 = 8'h00 ;\nsim_spm77 = 8'h00 ;\nsim_spm78 = 8'h00 ;\nsim_spm79 = 8'h00 ;\nsim_spm7A = 8'h00 ;\nsim_spm7B = 8'h00 ;\nsim_spm7C = 8'h00 ;\nsim_spm7D = 8'h00 ;\nsim_spm7E = 8'h00 ;\nsim_spm7F = 8'h00 ;\nsim_spm80 = 8'h00 ;\nsim_spm81 = 8'h00 ;\nsim_spm82 = 8'h00 ;\nsim_spm83 = 8'h00 ;\nsim_spm84 = 8'h00 ;\nsim_spm85 = 8'h00 ;\nsim_spm86 = 8'h00 ;\nsim_spm87 = 8'h00 ;\nsim_spm88 = 8'h00 ;\nsim_spm89 = 8'h00 ;\nsim_spm8A = 8'h00 ;\nsim_spm8B = 8'h00 ;\nsim_spm8C = 8'h00 ;\nsim_spm8D = 8'h00 ;\nsim_spm8E = 8'h00 ;\nsim_spm8F = 8'h00 ;\nsim_spm90 = 8'h00 ;\nsim_spm91 = 8'h00 ;\nsim_spm92 = 8'h00 ;\nsim_spm93 = 8'h00 ;\nsim_spm94 = 8'h00 ;\nsim_spm95 = 8'h00 ;\nsim_spm96 = 8'h00 ;\nsim_spm97 = 8'h00 ;\nsim_spm98 = 8'h00 ;\nsim_spm99 = 8'h00 ;\nsim_spm9A = 8'h00 ;\nsim_spm9B = 8'h00 ;\nsim_spm9C = 8'h00 ;\nsim_spm9D = 8'h00 ;\nsim_spm9E = 8'h00 ;\nsim_spm9F = 8'h00 ;\nsim_spmA0 = 8'h00 ;\nsim_spmA1 = 8'h00 ;\nsim_spmA2 = 8'h00 ;\nsim_spmA3 = 8'h00 ;\nsim_spmA4 = 8'h00 ;\nsim_spmA5 = 8'h00 ;\nsim_spmA6 = 8'h00 ;\nsim_spmA7 = 8'h00 ;\nsim_spmA8 = 8'h00 ;\nsim_spmA9 = 8'h00 ;\nsim_spmAA = 8'h00 ;\nsim_spmAB = 8'h00 ;\nsim_spmAC = 8'h00 ;\nsim_spmAD = 8'h00 ;\nsim_spmAE = 8'h00 ;\nsim_spmAF = 8'h00 ;\nsim_spmB0 = 8'h00 ;\nsim_spmB1 = 8'h00 ;\nsim_spmB2 = 8'h00 ;\nsim_spmB3 = 8'h00 ;\nsim_spmB4 = 8'h00 ;\nsim_spmB5 = 8'h00 ;\nsim_spmB6 = 8'h00 ;\nsim_spmB7 = 8'h00 ;\nsim_spmB8 = 8'h00 ;\nsim_spmB9 = 8'h00 ;\nsim_spmBA = 8'h00 ;\nsim_spmBB = 8'h00 ;\nsim_spmBC = 8'h00 ;\nsim_spmBD = 8'h00 ;\nsim_spmBE = 8'h00 ;\nsim_spmBF = 8'h00 ;\nsim_spmC0 = 8'h00 ;\nsim_spmC1 = 8'h00 ;\nsim_spmC2 = 8'h00 ;\nsim_spmC3 = 8'h00 ;\nsim_spmC4 = 8'h00 ;\nsim_spmC5 = 8'h00 ;\nsim_spmC6 = 8'h00 ;\nsim_spmC7 = 8'h00 ;\nsim_spmC8 = 8'h00 ;\nsim_spmC9 = 8'h00 ;\nsim_spmCA = 8'h00 ;\nsim_spmCB = 8'h00 ;\nsim_spmCC = 8'h00 ;\nsim_spmCD = 8'h00 ;\nsim_spmCE = 8'h00 ;\nsim_spmCF = 8'h00 ;\nsim_spmD0 = 8'h00 ;\nsim_spmD1 = 8'h00 ;\nsim_spmD2 = 8'h00 ;\nsim_spmD3 = 8'h00 ;\nsim_spmD4 = 8'h00 ;\nsim_spmD5 = 8'h00 ;\nsim_spmD6 = 8'h00 ;\nsim_spmD7 = 8'h00 ;\nsim_spmD8 = 8'h00 ;\nsim_spmD9 = 8'h00 ;\nsim_spmDA = 8'h00 ;\nsim_spmDB = 8'h00 ;\nsim_spmDC = 8'h00 ;\nsim_spmDD = 8'h00 ;\nsim_spmDE = 8'h00 ;\nsim_spmDF = 8'h00 ;\nsim_spmE0 = 8'h00 ;\nsim_spmE1 = 8'h00 ;\nsim_spmE2 = 8'h00 ;\nsim_spmE3 = 8'h00 ;\nsim_spmE4 = 8'h00 ;\nsim_spmE5 = 8'h00 ;\nsim_spmE6 = 8'h00 ;\nsim_spmE7 = 8'h00 ;\nsim_spmE8 = 8'h00 ;\nsim_spmE9 = 8'h00 ;\nsim_spmEA = 8'h00 ;\nsim_spmEB = 8'h00 ;\nsim_spmEC = 8'h00 ;\nsim_spmED = 8'h00 ;\nsim_spmEE = 8'h00 ;\nsim_spmEF = 8'h00 ;\nsim_spmF0 = 8'h00 ;\nsim_spmF1 = 8'h00 ;\nsim_spmF2 = 8'h00 ;\nsim_spmF3 = 8'h00 ;\nsim_spmF4 = 8'h00 ;\nsim_spmF5 = 8'h00 ;\nsim_spmF6 = 8'h00 ;\nsim_spmF7 = 8'h00 ;\nsim_spmF8 = 8'h00 ;\nsim_spmF9 = 8'h00 ;\nsim_spmFA = 8'h00 ;\nsim_spmFB = 8'h00 ;\nsim_spmFC = 8'h00 ;\nsim_spmFD = 8'h00 ;\nsim_spmFE = 8'h00 ;\nsim_spmFF = 8'h00 ;\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninitial begin\nif (scratch_pad_memory_size != 64 && scratch_pad_memory_size != 128 && scratch_pad_memory_size != 256) begin\n#1;\n$display(\"\\n\\nInvalid 'scratch_pad_memory_size'. Please set to 64, 128 or 256.\\n\\n\");\n$finish;\nend\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_control\" *)\nLUT6_2 #(\n\t.INIT\t(64'hFFFFF55500000EEE))\nreset_lut( \n\t.I0 \t(run),\n\t.I1 \t(internal_reset),\n\t.I2 \t(stack_pointer_carry[4]),\n\t.I3 \t(t_state[2]),\n\t.I4 \t(reset),\n\t.I5 \t(1'b1),\n\t.O5 \t(run_value),\n\t.O6 \t(internal_reset_value));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD run_flop (  \n\t.D \t(run_value),\n\t.Q \t(run),\n\t.C \t(clk));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD internal_reset_flop(\n\t.D\t(internal_reset_value),\n\t.Q\t(internal_reset),\n\t.C\t(clk));\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nFD sync_sleep_flop(\n\t.D \t(sleep),\n\t.Q \t(sync_sleep),\n\t.C \t(clk));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nLUT6_2 #(\n\t.INIT    (64'h0083000B00C4004C))\nt_state_lut( \n\t.I0     (t_state[1]),\n\t.I1     (t_state[2]),\n\t.I2     (sync_sleep),\n\t.I3     (internal_reset),\n\t.I4     (special_bit),\n\t.I5     (1'b1),\n\t.O5     (t_state_value[1]),\n\t.O6     (t_state_value[2]));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD t_state1_flop (  \n\t.D      (t_state_value[1]),\n\t.Q      (t_state[1]),\n\t.C      (clk));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD t_state2_flop (  \n\t.D      (t_state_value[2]),\n\t.Q      (t_state[2]),\n\t.C      (clk));\n\n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nLUT6_2 #(\n\t.INIT\t(64'h0010000000000800))\nint_enable_type_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (instruction[17]),\n\t.I5     (1'b1),\n\t.O5     (loadstar_type),\n\t.O6     (int_enable_type)) ;\n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nLUT6 #(\n\t.INIT    (64'h000000000000CAAA))\ninterrupt_enable_lut( \n\t.I0     (interrupt_enable),\n\t.I1     (instruction[0]),\n\t.I2     (int_enable_type),\n\t.I3     (t_state[1]),\n\t.I4     (active_interrupt),\n\t.I5     (internal_reset),\n\t.O      (interrupt_enable_value));                     \n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nFD interrupt_enable_flop (  \n\t.D      (interrupt_enable_value),\n\t.Q      (interrupt_enable),\n\t.C      (clk));\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nFD sync_interrupt_flop (  \n\t.D      (interrupt),\n\t.Q      (sync_interrupt),\n\t.C      (clk));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nLUT6_2 # (\n\t.INIT    (64'hCC33FF0080808080))\nactive_interrupt_lut( \n\t.I0     (interrupt_enable),\n\t.I1     (t_state[2]),\n\t.I2     (sync_interrupt),\n\t.I3     (bank),\n\t.I4     (loadstar_type),\n\t.I5     (1'b1),\n\t.O5     (active_interrupt_value), \n\t.O6     (sx_addr4_value));\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD active_interrupt_flop (  \n\t.D      (active_interrupt_value),\n\t.Q      (active_interrupt),\n\t.C      (clk));\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD interrupt_ack_flop (  \n\t.D      (active_interrupt),\n\t.Q      (interrupt_ack),\n\t.C      (clk));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nLUT6 #(\n\t.INIT    (64'h5A3CFFFF00000000))\npc_move_is_valid_lut( \n\t.I0     (carry_flag),\n\t.I1     (zero_flag),\n\t.I2     (instruction[14]),\n\t.I3     (instruction[15]),\n\t.I4     (instruction[16]),\n\t.I5     (instruction[17]),\n\t.O      (pc_move_is_valid)) ;\n\n(* HBLKNM = \"kcpsm6_decode0\" *)\nLUT6_2 # (\n\t.INIT    (64'h7777027700000200))\nmove_type_lut( \n\t.I0     (instruction[12]),\n\t.I1     (instruction[13]),\n\t.I2     (instruction[14]),\n\t.I3     (instruction[15]),\n\t.I4     (instruction[16]),\n\t.I5     (1'b1),\n\t.O5     (returni_type),\n\t.O6     (move_type)) ;\n\n(* HBLKNM = \"kcpsm6_vector1\" *)\nLUT6_2 # (\n\t.INIT    (64'h0000F000000023FF))\npc_mode1_lut( \n\t.I0     (instruction[12]),\n\t.I1     (returni_type),\n\t.I2     (move_type),\n\t.I3     (pc_move_is_valid),\n\t.I4     (active_interrupt),\n\t.I5     (1'b1),\n\t.O5     (pc_mode[0]),\n\t.O6     (pc_mode[1])) ;\n\n(* HBLKNM = \"kcpsm6_vector1\" *)\nLUT6 # (\n\t.INIT    (64'hFFFFFFFF00040000))\npc_mode2_lut( \n\t.I0     (instruction[12]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (instruction[17]),\n\t.I5     (active_interrupt),\n\t.O      (pc_mode[2])) ;\n\n(* HBLKNM = \"kcpsm6_stack1\" *)\nLUT6_2 # (\n\t.INIT    (64'hFFFF100000002000))\npush_pop_lut( \n\t.I0     (instruction[12]),\n\t.I1     (instruction[13]),\n\t.I2     (move_type),\n\t.I3     (pc_move_is_valid),\n\t.I4     (active_interrupt),\n\t.I5     (1'b1),\n\t.O5     (pop_stack),\n\t.O6     (push_stack)) ;\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nLUT6_2 #(\n\t.INIT    (64'h03CA000004200000))\nalu_decode0_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O5     (alu_mux_sel_value[0]),\n\t.O6     (arith_logical_sel[0])) ;\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nFD alu_mux_sel0_flop(  \n\t.D      (alu_mux_sel_value[0]),\n\t.Q      (alu_mux_sel[0]),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nLUT6_2 #(\n\t.INIT    (64'h7708000000000F00))\nalu_decode1_lut( \n\t.I0     (carry_flag),\n\t.I1     (instruction[13]),\n\t.I2     (instruction[14]),\n\t.I3     (instruction[15]),\n\t.I4     (instruction[16]),\n\t.I5     (1'b1),\n\t.O5     (alu_mux_sel_value[1]),\n\t.O6     (arith_carry_in)) ;                     \n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD alu_mux_sel1_flop (  \n\t.D      (alu_mux_sel_value[1]),\n\t.Q      (alu_mux_sel[1]),\n\t.C      (clk)) ;\n\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nLUT6_2 # (\n\t.INIT    (64'hD000000002000000))\nalu_decode2_lut( \n\t.I0     (instruction[14]),\n\t.I1     (instruction[15]),\n\t.I2     (instruction[16]),\n\t.I3     (1'b1),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O5     (arith_logical_sel[1]),\n\t.O6     (arith_logical_sel[2])) ;\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nLUT6_2 # (\n\t.INIT    (64'h00013F3F0010F7CE))\nregister_enable_type_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (instruction[17]),\n\t.I5     (1'b1),\n\t.O5     (flag_enable_type),\n\t.O6     (register_enable_type)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nLUT6_2 # (\n\t.INIT    (64'hC0CC0000A0AA0000))\nregister_enable_lut( \n\t.I0     (flag_enable_type),\n\t.I1     (register_enable_type),\n\t.I2     (instruction[12]),\n\t.I3     (instruction[17]),\n\t.I4     (t_state[1]),\n\t.I5     (1'b1),\n\t.O5     (flag_enable_value),\n\t.O6     (register_enable_value)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR flag_enable_flop (  \n\t.D      (flag_enable_value),\n\t.Q      (flag_enable),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR register_enable_flop (  \n\t.D      (register_enable_value),\n\t.Q      (register_enable),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nLUT6_2 # (\n\t.INIT    (64'h8000000020000000))\nspm_enable_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[17]),\n\t.I3     (strobe_type),\n\t.I4     (t_state[1]),\n\t.I5     (1'b1),\n\t.O5     (k_write_strobe_value),\n\t.O6     (spm_enable_value)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR k_write_strobe_flop (  \n\t.D      (k_write_strobe_value),\n\t.Q      (k_write_strobe),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR spm_enable_flop (  \n\t.D      (spm_enable_value),\n\t.Q      (spm_enable),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nLUT6_2 # (\n\t.INIT    (64'h4000000001000000))\nread_strobe_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[17]),\n\t.I3     (strobe_type),\n\t.I4     (t_state[1]),\n\t.I5     (1'b1),\n\t.O5     (read_strobe_value),\n\t.O6     (write_strobe_value)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR write_strobe_flop (  \n\t.D      (write_strobe_value),\n\t.Q      (write_strobe),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_strobes\" *)\nFDR read_strobe_flop (  \n\t.D      (read_strobe_value),\n\t.Q      (read_strobe),\n\t.R      (active_interrupt),\n\t.C      (clk)) ;\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_stack1\" *)\nLUT6 # (\n\t.INIT    (64'h0080020000000000))\nregbank_type_lut( \n\t.I0     (instruction[12]),\n\t.I1     (instruction[13]),\n\t.I2     (instruction[14]),\n\t.I3     (instruction[15]),\n\t.I4     (instruction[16]),\n\t.I5     (instruction[17]),\n\t.O      (regbank_type)) ;\n\n(* HBLKNM = \"kcpsm6_stack1\" *)\nLUT6 # (\n\t.INIT    (64'hACACFF00FF00FF00))\nbank_lut( \n\t.I0     (instruction[0]),\n\t.I1     (shadow_bank),\n\t.I2     (instruction[16]),\n\t.I3     (bank),\n\t.I4     (regbank_type),\n\t.I5     (t_state[1]),\n\t.O      (bank_value)) ;                     \n\n(* HBLKNM = \"kcpsm6_stack1\" *)\nFDR bank_flop (  \n\t.D      (bank_value),\n\t.Q      (bank),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD sx_addr4_flop (  \n\t.D      (sx_addr4_value),\n\t.Q      (sx_addr[4]),\n\t.C      (clk)) ;\n\nassign sx_addr[3:0] = instruction[11:8] ;\nassign sy_addr = {bank, instruction[7:4]} ;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_control\" *)\nXORCY arith_carry_xorcy ( \n\t.LI \t(1'b0),\n\t.CI \t(carry_arith_logical[7]),\n\t.O      (arith_carry_value)) ;\n\n(* HBLKNM = \"kcpsm6_control\" *)\nFD arith_carry_flop (  \n\t.D      (arith_carry_value),\n\t.Q      (arith_carry),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nLUT6_2 # (\n\t.INIT    (64'h0000000087780000))\nlower_parity_lut( \n\t.I0     (instruction[13]),\n\t.I1     (carry_flag),\n\t.I2     (arith_logical_result[0]),\n\t.I3     (arith_logical_result[1]),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O5     (lower_parity),\n\t.O6     (lower_parity_sel)) ;  \n                 \n(* HBLKNM = \"kcpsm6_decode2\" *)\nMUXCY parity_muxcy ( \n\t.DI\t(lower_parity),\n\t.CI\t(1'b0),                     \n\t.S\t(lower_parity_sel),\n\t.O      (carry_lower_parity)) ;\n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nLUT6 #(\n\t.INIT    (64'h6996966996696996))\nupper_parity_lut( \n\t.I0     (arith_logical_result[2]),\n\t.I1     (arith_logical_result[3]),\n\t.I2     (arith_logical_result[4]),\n\t.I3     (arith_logical_result[5]),\n\t.I4     (arith_logical_result[6]),\n\t.I5     (arith_logical_result[7]),\n\t.O      (upper_parity)) ;                     \n\n(* HBLKNM = \"kcpsm6_decode2\" *)\nXORCY parity_xorcy( \n\t.LI\t(upper_parity),\n        .CI\t(carry_lower_parity),\n\t.O      (parity)) ;\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nLUT6 #(\n\t.INIT    (64'hFFFFAACCF0F0F0F0))\nshift_carry_lut( \n\t.I0     (sx[0]),\n\t.I1     (sx[7]),\n\t.I2     (shadow_carry_flag),\n\t.I3     (instruction[3]),\n\t.I4     (instruction[7]),\n\t.I5     (instruction[16]),\n\t.O      (shift_carry_value)) ;                     \n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD shift_carry_flop(  \n\t.D      (shift_carry_value),\n\t.Q      (shift_carry),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nLUT6_2 #(\n\t.INIT    (64'h3333AACCF0AA0000))\ncarry_flag_lut( \n\t.I0     (shift_carry),\n\t.I1     (arith_carry),\n\t.I2     (parity),\n\t.I3     (instruction[14]),\n\t.I4     (instruction[15]),\n\t.I5     (instruction[16]),\n\t.O5     (drive_carry_in_zero),\n\t.O6     (carry_flag_value)) ;  \n\n(* HBLKNM = \"kcpsm6_flags\" *)\nFDRE carry_flag_flop(  \n\t.D      (carry_flag_value),\n\t.Q      (carry_flag),\n       \t.CE     (flag_enable),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nMUXCY init_zero_muxcy( \n\t.DI\t(drive_carry_in_zero),\n\t.CI\t(1'b0),\n\t.S\t(carry_flag_value),\n\t.O      (carry_in_zero)) ;\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nLUT6_2 # (\n\t.INIT    (64'hA280000000F000F0))\nuse_zero_flag_lut( \n\t.I0     (instruction[13]),\n\t.I1     (instruction[14]),\n\t.I2     (instruction[15]),\n\t.I3     (instruction[16]),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O5     (strobe_type),\n\t.O6     (use_zero_flag_value)) ;                     \n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD use_zero_flag_flop(  \n\t.D      (use_zero_flag_value),\n\t.Q      (use_zero_flag),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nLUT6_2 #(\n\t.INIT    (64'h0000000000000001))\nlower_zero_lut( \n\t.I0     (alu_result[0]),\n\t.I1     (alu_result[1]),\n\t.I2     (alu_result[2]),\n\t.I3     (alu_result[3]),\n\t.I4     (alu_result[4]),\n\t.I5     (1'b1),\n\t.O5     (lower_zero),\n\t.O6     (lower_zero_sel)) ;                     \n\n(* HBLKNM = \"kcpsm6_flags\" *)\nMUXCY lower_zero_muxcy( \n\t.DI\t(lower_zero),\n\t.CI\t(carry_in_zero),\n\t.S\t(lower_zero_sel),\n\t.O      (carry_lower_zero)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nLUT6_2 # (\n\t.INIT    (64'h0000000D00000000))\nmiddle_zero_lut( \n\t.I0     (use_zero_flag),\n\t.I1     (zero_flag),\n\t.I2     (alu_result[5]),\n\t.I3     (alu_result[6]),\n\t.I4     (alu_result[7]),\n\t.I5     (1'b1),\n\t.O5     (middle_zero),\n\t.O6     (middle_zero_sel)) ;                     \n\n(* HBLKNM = \"kcpsm6_flags\" *)\nMUXCY middle_zero_muxcy( \n\t.DI\t(middle_zero),\n\t.CI\t(carry_lower_zero),                     \n\t.S \t(middle_zero_sel),\n  \t.O      (carry_middle_zero)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nLUT6 #(\n\t.INIT    (64'hFBFF000000000000))\nupper_zero_lut( \n\t.I0     (instruction[14]),\n\t.I1     (instruction[15]),\n\t.I2     (instruction[16]),\n\t.I3     (1'b1),\n\t.I4     (1'b1),\n\t.I5     (1'b1),\n\t.O      (upper_zero_sel)) ;                     \n\n(* HBLKNM = \"kcpsm6_flags\" *)\nMUXCY upper_zero_muxcy( \n\t.DI\t(shadow_zero_flag),\n\t.CI\t(carry_middle_zero),                    \n\t.S\t(upper_zero_sel),\n\t.O      (zero_flag_value)) ;\n\n(* HBLKNM = \"kcpsm6_flags\" *)\nFDRE zero_flag_flop(  \n\t.D      (zero_flag_value),\n\t.Q      (zero_flag),\n\t.CE     (flag_enable),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n\n\n\n\n\n\n\n\n\n\n\n\nassign register_vector = {sx[3:0], sy} ;\n\ngenvar i ;\n\ngenerate\nfor (i = 0 ; i <= 11 ; i = i+1)\nbegin : address_loop\nparameter [7:0] id4 = 8'h30 + i/4 ;\nparameter [7:0] id8 = 8'h30 + i/8 ;\nparameter [7:0] ip4d8 = 8'h30 + (i+4)/8 ;\t  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_stack_ram\",ip4d8} *)\nFD return_vector_flop(  \n\t.D      (stack_memory[i]),\n\t.Q      (return_vector[i]),\n\t.C      (clk));\n\n\n\n\nif (i % 2 == 0) begin: output_data\n\n(* HBLKNM = {\"kcpsm6_vector\",id8} *)\nLUT6_2 #(\n\t.INIT   (64'hFF00F0F0CCCCAAAA))\npc_vector_mux_lut( \n\t.I0     (instruction[i]),\n\t.I1     (return_vector[i]),\n\t.I2     (instruction[i+1]),\n\t.I3     (return_vector[i+1]),\n\t.I4     (instruction[12]),\n\t.I5     (1'b1),\n\t.O5     (pc_vector[i]),\n\t.O6     (pc_vector[i+1]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nFDRE pc_flop(  \n\t.D      (pc_value[i]),\n\t.Q      (pc[i]),\n\t.R      (internal_reset),\n\t.CE     (t_state[1]),\n\t.C      (clk));\n\nif (i == 0) begin: lsb_pc\n\n\n\n\n\n\nif (interrupt_vector[i] == 1'b0) begin: low_int_vector\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nLUT6 #(\n\t.INIT    (64'h00AA000033CC0F00))\npc_lut( \n\t.I0     (register_vector[i]),\n\t.I1     (pc_vector[i]),\n\t.I2     (pc[i]),\n\t.I3     (pc_mode[0]),\n\t.I4     (pc_mode[1]),\n\t.I5     (pc_mode[2]), \n\t.O      (half_pc[i]));\n\nend \n\nif (interrupt_vector[i] == 1'b1) begin: high_int_vector\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nLUT6 #(\n\t.INIT    (64'h00AA00FF33CC0F00))\npc_lut( \n\t.I0     (register_vector[i]),\n\t.I1     (pc_vector[i]),\n\t.I2     (pc[i]),\n\t.I3     (pc_mode[0]),\n\t.I4     (pc_mode[1]),\n\t.I5     (pc_mode[2]), \n\t.O      (half_pc[i]));\n\nend \n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nXORCY pc_xorcy( \n\t.LI\t(half_pc[i]),\n\t.CI\t(1'b0),\n\t.O      (pc_value[i]));\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nMUXCY pc_muxcy( \n\t.DI \t(pc_mode[0]),\n\t.CI \t(1'b0),\n\t.S\t(half_pc[i]),\n        .O      (carry_pc[i]));\n\nend \n\nif (i > 0) begin : upper_pc\n\n\n\n\n\n\nif (interrupt_vector[i] == 1'b0) begin: low_int_vector\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nLUT6 #(\n\t.INIT    (64'h00AA0000CCCCF000))\npc_lut( \n\t.I0     (register_vector[i]),\n\t.I1     (pc_vector[i]),\n\t.I2     (pc[i]),\n\t.I3     (pc_mode[0]),\n\t.I4     (pc_mode[1]),\n\t.I5     (pc_mode[2]), \n\t.O      (half_pc[i]));\n\nend \n\nif (interrupt_vector[i] == 1'b1) begin: high_int_vector\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nLUT6 #(\n\t.INIT    (64'h00AA00FFCCCCF000))\npc_lut( \n\t.I0     (register_vector[i]),\n\t.I1     (pc_vector[i]),\n\t.I2     (pc[i]),\n\t.I3     (pc_mode[0]),\n\t.I4     (pc_mode[1]),\n\t.I5     (pc_mode[2]), \n\t.O      (half_pc[i]));\n\nend \n\n\n\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nXORCY pc_xorcy( \n\t.LI\t(half_pc[i]),\n\t.CI\t(carry_pc[i-1]),\n\t.O      (pc_value[i]));\n\n\n\n\n\nif (i < 11) begin: mid_pc\n\n(* HBLKNM = {\"kcpsm6_pc\",id4} *)\nMUXCY pc_muxcy( \n\t.DI \t(1'b0),\n\t.CI \t(carry_pc[i-1]),\n\t.S \t(half_pc[i]),\n\t.O     \t(carry_pc[i]));\n\nend \n\nend \n\n\n\n\n\nend \nendgenerate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nFD shadow_carry_flag_flop(  \n\t.D      (stack_carry_flag),\n\t.Q      (shadow_carry_flag),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nFD stack_zero_flop(  \n\t.D      (stack_zero_flag),\n\t.Q      (shadow_zero_value),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nFD shadow_zero_flag_flop(  \n\t.D      (shadow_zero_value),\n\t.Q      (shadow_zero_flag),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nFD shadow_bank_flop(  \n\t.D      (stack_bank),\n\t.Q      (shadow_bank),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nFD stack_bit_flop(  \n\t.D      (stack_bit),\n\t.Q      (special_bit),\n\t.C      (clk)) ;\n\n(* HBLKNM = \"kcpsm6_stack_ram0\" *)\nRAM32M #(\n\t.INIT_A\t(64'h0000000000000000), \n\t.INIT_B\t(64'h0000000000000000), \n\t.INIT_C (64'h0000000000000000), \n\t.INIT_D (64'h0000000000000000)) \nstack_ram_low ( \n\t.DOA\t({stack_zero_flag, stack_carry_flag}), \n\t.DOB\t({stack_bit, stack_bank}),\n\t.DOC    (stack_memory[1:0]), \n\t.DOD    (stack_memory[3:2]),\n\t.ADDRA\t(stack_pointer[4:0]), \n\t.ADDRB\t(stack_pointer[4:0]), \n\t.ADDRC  (stack_pointer[4:0]), \n\t.ADDRD  (stack_pointer[4:0]),\n\t.DIA\t({zero_flag, carry_flag}), \n\t.DIB\t({run, bank}),\n\t.DIC    (pc[1:0]),\n\t.DID    (pc[3:2]),\n\t.WE \t(t_state[1]), \n\t.WCLK\t(clk));\n\n(* HBLKNM = \"kcpsm6_stack_ram1\" *)\nRAM32M #(\n\t.INIT_A\t(64'h0000000000000000), \n\t.INIT_B\t(64'h0000000000000000), \n\t.INIT_C\t(64'h0000000000000000), \n\t.INIT_D\t(64'h0000000000000000)) \nstack_ram_high(    \n\t.DOA\t(stack_memory[5:4]), \n\t.DOB\t(stack_memory[7:6]),\n\t.DOC   \t(stack_memory[9:8]),\n\t.DOD   \t(stack_memory[11:10]),\n\t.ADDRA \t(stack_pointer[4:0]), \n\t.ADDRB \t(stack_pointer[4:0]), \n\t.ADDRC  (stack_pointer[4:0]), \n\t.ADDRD  (stack_pointer[4:0]),\n\t.DIA    (pc[5:4]),\n\t.DIB    (pc[7:6]),\n\t.DIC    (pc[9:8]),\n\t.DID    (pc[11:10]),\n\t.WE \t(t_state[1]),  \n\t.WCLK \t(clk));\n\ngenerate\nfor (i = 0 ; i <= 4 ; i = i+1)\nbegin : stack_loop\n\nparameter [7:0]\tid4 = 8'h30 + i/4 ;\n\nif (i == 0) begin: lsb_stack\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nFDR pointer_flop(  \n\t.D      (stack_pointer_value[i]),\n\t.Q      (stack_pointer[i]),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nLUT6_2 #(\n\t.INIT    (64'h001529AAAAAAAAAA))\nstack_pointer_lut( \n\t.I0     (stack_pointer[i]),\n\t.I1     (pop_stack),\n\t.I2     (push_stack),\n\t.I3     (t_state[1]),\n\t.I4     (t_state[2]),\n\t.I5     (1'b1), \n\t.O5     (feed_pointer_value[i]),\n\t.O6     (half_pointer_value[i]));\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nXORCY stack_xorcy( \n\t.LI \t(half_pointer_value[i]),\n\t.CI \t(1'b0),\n\t.O      (stack_pointer_value[i]));\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nMUXCY stack_muxcy( \n\t.DI\t(feed_pointer_value[i]),\n\t.CI\t(1'b0),\n\t.S \t(half_pointer_value[i]),\n\t.O      (stack_pointer_carry[i]));\n\nend \n\nif (i > 0) begin: upper_stack\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nFDR pointer_flop(  \n\t.D      (stack_pointer_value[i]),\n\t.Q      (stack_pointer[i]),\n\t.R      (internal_reset),\n\t.C      (clk)) ;\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nLUT6_2 #(\n\t.INIT    (64'h002A252AAAAAAAAA))\nstack_pointer_lut( \n\t.I0     (stack_pointer[i]),\n\t.I1     (pop_stack),\n\t.I2     (push_stack),\n\t.I3     (t_state[1]),\n\t.I4     (t_state[2]),\n\t.I5     (1'b1), \n\t.O5     (feed_pointer_value[i]),\n\t.O6     (half_pointer_value[i]));\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nXORCY stack_xorcy( \n\t.LI \t(half_pointer_value[i]),\n\t.CI \t(stack_pointer_carry[i-1]),\n\t.O      (stack_pointer_value[i]));\n\n(* HBLKNM = {\"kcpsm6_stack\",id4} *)\nMUXCY stack_muxcy( \n\t.DI \t(feed_pointer_value[i]),\n\t.CI \t(stack_pointer_carry[i-1]),\n\t.S \t(half_pointer_value[i]),\n\t.O      (stack_pointer_carry[i]));\n\nend \n\nend \nendgenerate\n\n\n\n\n\n\n\n\ngenerate\nfor (i = 0 ; i <= 7 ; i = i+1)\nbegin : data_path_loop\nparameter [7:0]\tid1 = 8'h30 + i ;\nparameter [7:0]\tid2 = 8'h30 + i/2 ;\nparameter [7:0]\tid4 = 8'h30 + i/4 ;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (i % 2 == 0) begin: output_data\n\n(* HBLKNM = \"kcpsm6_port_id\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nsy_kk_mux_lut( \n\t.I0     (sy[i]),\n\t.I1     (instruction[i]),\n\t.I2     (sy[i+1]),\n\t.I3     (instruction[i+1]),\n\t.I4     (instruction[12]),\n\t.I5     (1'b1),\n\t.O5     (sy_or_kk[i]),\n\t.O6     (sy_or_kk[i+1]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (i % 2 == 0) begin: second_operand\n\n(* HBLKNM = \"kcpsm6_out_port\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nout_port_lut( \n\t.I0     (sx[i]),\n\t.I1     (instruction[i+4]),\n\t.I2     (sx[i+1]),\n\t.I3     (instruction[i+5]),\n\t.I4     (instruction[13]),\n\t.I5     (1'b1),\n\t.O5     (out_port[i]),\n\t.O6     (out_port[i+1]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nLUT6_2 #(\n\t.INIT    (64'h69696E8ACCCC0000))\narith_logical_lut( \n\t.I0     (sy_or_kk[i]),\n\t.I1     (sx[i]),\n\t.I2     (arith_logical_sel[0]),\n\t.I3     (arith_logical_sel[1]),\n\t.I4     (arith_logical_sel[2]),\n\t.I5     (1'b1),\n\t.O5     (logical_carry_mask[i]),\n\t.O6     (half_arith_logical[i]));\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nFD arith_logical_flop( \n\t.D      (arith_logical_value[i]),\n\t.Q      (arith_logical_result[i]),\n\t.C      (clk)) ;\n\nif (i == 0) begin: lsb_arith_logical\n\n\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nMUXCY arith_logical_muxcy( \n\t.DI \t(logical_carry_mask[i]),\n\t.CI \t(arith_carry_in),\n\t.S \t(half_arith_logical[i]),\n\t.O      (carry_arith_logical[i]));\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nXORCY arith_logical_xorcy( \n\t.LI \t(half_arith_logical[i]),\n\t.CI \t(arith_carry_in),\n\t.O      (arith_logical_value[i]));\n\nend \n\nif (i > 0) begin: upper_arith_logical\n\n\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nMUXCY arith_logical_muxcy( \n\t.DI \t(logical_carry_mask[i]),\n\t.CI \t(carry_arith_logical[i-1]),\n\t.S \t(half_arith_logical[i]),\n\t.O      (carry_arith_logical[i]));\n\n(* HBLKNM = {\"kcpsm6_add\",id4} *)\nXORCY arith_logical_xorcy( \n\t.LI \t(half_arith_logical[i]),\n\t.CI \t(carry_arith_logical[i-1]),\n\t.O      (arith_logical_value[i]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (hwbuild[i] == 1'b0) begin: low_hwbuild \n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nFDR shift_rotate_flop( \n\t.D      (shift_rotate_value[i]),\n\t.Q      (shift_rotate_result[i]),\n\t.R      (instruction[7]),\n\t.C      (clk)) ;\n           \nend \n\nif (hwbuild[i] == 1'b1) begin: high_hwbuild \n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nFDS shift_rotate_flop( \n\t.D      (shift_rotate_value[i]),\n\t.Q      (shift_rotate_result[i]),\n\t.S \t(instruction[7]),\n\t.C      (clk)) ;\n\nend \n\nif (i == 0) begin: lsb_shift_rotate\n\n\n\n(* HBLKNM = \"kcpsm6_decode1\" *)\nLUT6 #(\n\t.INIT    (64'hBFBC8F8CB3B08380))\nshift_bit_lut( \n\t.I0     (instruction[0]),\n\t.I1     (instruction[1]),\n\t.I2     (instruction[2]),\n\t.I3     (carry_flag),\n\t.I4     (sx[0]),\n\t.I5     (sx[7]),\n\t.O      (shift_in_bit));\n\n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nshift_rotate_lut( \n\t.I0     (shift_in_bit),\n\t.I1     (sx[i+1]),\n\t.I2     (sx[i]),\n\t.I3     (sx[i+2]),\n\t.I4     (instruction[3]),\n\t.I5     (1'b1),\n\t.O5     (shift_rotate_value[i]),\n\t.O6     (shift_rotate_value[i+1]));\n\nend \n\nif (i == 2 || i == 4) begin: mid_shift_rotate\n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nshift_rotate_lut( \n\t.I0     (sx[i-1]),\n\t.I1     (sx[i+1]),\n\t.I2     (sx[i]),\n\t.I3     (sx[i+2]),\n\t.I4     (instruction[3]),\n\t.I5     (1'b1),\n\t.O5     (shift_rotate_value[i]),\n\t.O6     (shift_rotate_value[i+1]));\n\nend \n\nif (i == 6) begin: msb_shift_rotate\n\n\n\n(* HBLKNM = \"kcpsm6_sandr\" *)\nLUT6_2 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nshift_rotate_lut( \n\t.I0     (sx[i-1]),\n\t.I1     (sx[i+1]),\n\t.I2     (sx[i]),\n\t.I3     (shift_in_bit),\n\t.I4     (instruction[3]),\n\t.I5     (1'b1),\n\t.O5     (shift_rotate_value[i]),\n\t.O6     (shift_rotate_value[i+1]));\n\nend \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = {\"kcpsm6_alu\",id4} *)\nLUT6 #(\n\t.INIT    (64'hFF00F0F0CCCCAAAA))\nalu_mux_lut( \n\t.I0     (arith_logical_result[i]),\n\t.I1     (shift_rotate_result[i]),\n\t.I2     (in_port[i]),\n\t.I3     (spm_data[i]),\n\t.I4     (alu_mux_sel[0]),\n\t.I5     (alu_mux_sel[1]),\n\t.O      (alu_result[i]));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (scratch_pad_memory_size == 64) begin : small_spm\n\n(* HBLKNM = {\"kcpsm6_spm\",id4} *)\nFD spm_flop( \n\t.D      (spm_ram_data[i]),\n\t.Q      (spm_data[i]),\n\t.C      (clk)) ;\n\nif (i == 0 || i == 4) begin: small_spm_ram\n\nRAM64M #( \n\t.INIT_A\t(64'h0000000000000000),\n\t.INIT_B\t(64'h0000000000000000),\n\t.INIT_C\t(64'h0000000000000000),\n\t.INIT_D\t(64'h0000000000000000)) \nspm_ram(   \n\t.DOA \t(spm_ram_data[i]),\n\t.DOB \t(spm_ram_data[i+1]),\n\t.DOC    (spm_ram_data[i+2]),\n\t.DOD    (spm_ram_data[i+3]),\n\t.ADDRA \t(sy_or_kk[5:0]),\n\t.ADDRB \t(sy_or_kk[5:0]),\n\t.ADDRC  (sy_or_kk[5:0]),\n\t.ADDRD  (sy_or_kk[5:0]),\n\t.DIA \t(sx[i]),\n\t.DIB \t(sx[i+1]),\n\t.DIC    (sx[i+2]),\n\t.DID    (sx[i+3]),\n\t.WE \t(spm_enable),\n\t.WCLK \t(clk));\n\nend \n\nend \n\nif (scratch_pad_memory_size == 128) begin : medium_spm\n\n(* HBLKNM = {\"kcpsm6_spm\",id2} *)\nRAM128X1S  #(\n\t.INIT\t(128'h00000000000000000000000000000000))\nspm_ram(       \n\t.D      (sx[i]),\n\t.WE \t(spm_enable),\n\t.WCLK \t(clk),\n\t.A0 \t(sy_or_kk[0]),\n\t.A1 \t(sy_or_kk[1]),\n\t.A2 \t(sy_or_kk[2]),\n\t.A3 \t(sy_or_kk[3]),\n\t.A4 \t(sy_or_kk[4]),\n\t.A5 \t(sy_or_kk[5]),\n\t.A6 \t(sy_or_kk[6]),\n\t.O      (spm_ram_data[i]));\n\n(* HBLKNM = {\"kcpsm6_spm\",id2} *)\nFD spm_flop( \n\t.D      (spm_ram_data[i]),\n\t.Q      (spm_data[i]),\n\t.C      (clk)) ;\n\nend \n\nif (scratch_pad_memory_size == 256) begin : large_spm\n\n(* HBLKNM = {\"kcpsm6_spm\",id1} *)\nRAM256X1S #(\n\t.INIT\t(256'h0000000000000000000000000000000000000000000000000000000000000000))\nspm_ram (       \n\t.D      (sx[i]),\n\t.WE \t(spm_enable),\n\t.WCLK \t(clk),\n\t.A \t(sy_or_kk),\n\t.O      (spm_ram_data[i]));\n\n(* HBLKNM = {\"kcpsm6_spm\",id1} *)\nFD spm_flop( \n\t.D      (spm_ram_data[i]),\n\t.Q      (spm_data[i]),\n\t.C      (clk)) ;\n\nend \n\n\n\n\n\nend \nendgenerate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(* HBLKNM = \"kcpsm6_reg0\" *)\nRAM32M #(\n\t.INIT_A\t(64'h0000000000000000), \n\t.INIT_B\t(64'h0000000000000000), \n\t.INIT_C (64'h0000000000000000), \n\t.INIT_D (64'h0000000000000000)) \nlower_reg_banks(    \n\t.DOA \t(sy[1:0]), \n\t.DOB \t(sx[1:0]),\n\t.DOC    (sy[3:2]),\n\t.DOD    (sx[3:2]),\n\t.ADDRA \t(sy_addr), \n\t.ADDRB \t(sx_addr), \n\t.ADDRC  (sy_addr), \n\t.ADDRD  (sx_addr), \n\t.DIA \t(alu_result[1:0]),\n\t.DIB \t(alu_result[1:0]),\n\t.DIC    (alu_result[3:2]),\n\t.DID    (alu_result[3:2]),\n\t.WE \t(register_enable), \n\t.WCLK\t(clk));\n\n(* HBLKNM = \"kcpsm6_reg1\" *)\nRAM32M #(\n\t.INIT_A\t(64'h0000000000000000), \n\t.INIT_B\t(64'h0000000000000000), \n\t.INIT_C (64'h0000000000000000),  \n\t.INIT_D (64'h0000000000000000)) \nupper_reg_banks(    \n\t.DOA \t(sy[5:4]), \n\t.DOB \t(sx[5:4]),\n\t.DOC    (sy[7:6]),\n\t.DOD    (sx[7:6]),\n\t.ADDRA \t(sy_addr),\n\t.ADDRB \t(sx_addr),\n\t.ADDRC  (sy_addr), \n\t.ADDRD  (sx_addr), \n\t.DIA \t(alu_result[5:4]),\n\t.DIB \t(alu_result[5:4]),\n\t.DIC    (alu_result[7:6]),\n\t.DID    (alu_result[7:6]),\n\t.WE \t(register_enable), \n\t.WCLK\t(clk));\n\n\n\n\n\n\n\n\n\n\nassign address = pc;\nassign bram_enable = t_state[2];\n\n\n\n\n\n\n\n\n\nassign port_id = sy_or_kk;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreg\t[7:0]\t\tbank_a_s0 ;\nreg\t[7:0]\t\tbank_a_s1 ;\nreg\t[7:0]\t\tbank_a_s2 ;\nreg\t[7:0]\t\tbank_a_s3 ;\nreg\t[7:0]\t\tbank_a_s4 ;\nreg\t[7:0]\t\tbank_a_s5 ;\nreg\t[7:0]\t\tbank_a_s6 ;\nreg\t[7:0]\t\tbank_a_s7 ;\nreg\t[7:0]\t\tbank_a_s8 ;\nreg\t[7:0]\t\tbank_a_s9 ;\nreg\t[7:0]\t\tbank_a_sa ;\nreg\t[7:0]\t\tbank_a_sb ;\nreg\t[7:0]\t\tbank_a_sc ;\nreg\t[7:0]\t\tbank_a_sd ;\nreg\t[7:0]\t\tbank_a_se ;\nreg\t[7:0]\t\tbank_a_sf ;\nreg\t[7:0]\t\tbank_b_s0 ;\nreg\t[7:0]\t\tbank_b_s1 ;\nreg\t[7:0]\t\tbank_b_s2 ;\nreg\t[7:0]\t\tbank_b_s3 ;\nreg\t[7:0]\t\tbank_b_s4 ;\nreg\t[7:0]\t\tbank_b_s5 ;\nreg\t[7:0]\t\tbank_b_s6 ;\nreg\t[7:0]\t\tbank_b_s7 ;\nreg\t[7:0]\t\tbank_b_s8 ;\nreg\t[7:0]\t\tbank_b_s9 ;\nreg\t[7:0]\t\tbank_b_sa ;\nreg\t[7:0]\t\tbank_b_sb ;\nreg\t[7:0]\t\tbank_b_sc ;\nreg\t[7:0]\t\tbank_b_sd ;\nreg\t[7:0]\t\tbank_b_se ;\nreg\t[7:0]\t\tbank_b_sf ;\n\ninitial begin\nbank_a_s0 = 8'h00 ;\nbank_a_s1 = 8'h00 ;\nbank_a_s2 = 8'h00 ;\nbank_a_s3 = 8'h00 ;\nbank_a_s4 = 8'h00 ;\nbank_a_s5 = 8'h00 ;\nbank_a_s6 = 8'h00 ;\nbank_a_s7 = 8'h00 ;\nbank_a_s8 = 8'h00 ;\nbank_a_s9 = 8'h00 ;\nbank_a_sa = 8'h00 ;\nbank_a_sb = 8'h00 ;\nbank_a_sc = 8'h00 ;\nbank_a_sd = 8'h00 ;\nbank_a_se = 8'h00 ;\nbank_a_sf = 8'h00 ;\nbank_b_s0 = 8'h00 ;\nbank_b_s1 = 8'h00 ;\nbank_b_s2 = 8'h00 ;\nbank_b_s3 = 8'h00 ;\nbank_b_s4 = 8'h00 ;\nbank_b_s5 = 8'h00 ;\nbank_b_s6 = 8'h00 ;\nbank_b_s7 = 8'h00 ;\nbank_b_s8 = 8'h00 ;\nbank_b_s9 = 8'h00 ;\nbank_b_sa = 8'h00 ;\nbank_b_sb = 8'h00 ;\nbank_b_sc = 8'h00 ;\nbank_b_sd = 8'h00 ;\nbank_b_se = 8'h00 ;\nbank_b_sf = 8'h00 ;  \nend\n\n\n\nwire\t[1:16] \t\tsx_decode ; \t\nwire \t[1:16]  \tsy_decode ; \t\nwire \t[1:16]\t\tkk_decode ; \t\nwire \t[1:24]\t\taaa_decode ; \t\nwire\t\t\tclk_del ;\t\n\n\n\n\n\n\n\n function [1:8] hexcharacter ;\n input [3:0] nibble ;\n begin\n case (nibble)\n 4'b0000 : hexcharacter = \"0\" ;\n 4'b0001 : hexcharacter = \"1\" ;\n 4'b0010 : hexcharacter = \"2\" ;\n 4'b0011 : hexcharacter = \"3\" ;\n 4'b0100 : hexcharacter = \"4\" ;\n 4'b0101 : hexcharacter = \"5\" ;\n 4'b0110 : hexcharacter = \"6\" ;\n 4'b0111 : hexcharacter = \"7\" ;\n 4'b1000 : hexcharacter = \"8\" ;\n 4'b1001 : hexcharacter = \"9\" ;\n 4'b1010 : hexcharacter = \"A\" ;\n 4'b1011 : hexcharacter = \"B\" ;\n 4'b1100 : hexcharacter = \"C\" ;\n 4'b1101 : hexcharacter = \"D\" ;\n 4'b1110 : hexcharacter = \"E\" ;\n 4'b1111 : hexcharacter = \"F\" ;\n endcase\n end\n endfunction\n\n\n\n\n\nassign sx_decode[1:8]  = \"s\";\nassign sx_decode[9:16] = hexcharacter(instruction[11:8]);             \n\n\nassign sy_decode[1:8]  = \"s\";\nassign sy_decode[9:16] = hexcharacter(instruction[7:4]);  \n\n\nassign kk_decode[1:8]  = hexcharacter(instruction[7:4]);\nassign kk_decode[9:16] = hexcharacter(instruction[3:0]);\n\n\nassign aaa_decode[1:8]   = hexcharacter(instruction[11:8]);\nassign aaa_decode[9:16]  = hexcharacter(instruction[7:4]);\nassign aaa_decode[17:24] = hexcharacter(instruction[3:0]);\n\nassign #200 clk_del = clk ;\n\n\nalways @ (posedge clk_del) \nbegin : simulation\ncase (instruction[17:12])\n\t6'b000000\t: kcpsm6_opcode <= {\"LOAD \", sx_decode, \", \", sy_decode, \"        \"} ;\n\t6'b000001\t: kcpsm6_opcode <= {\"LOAD \", sx_decode, \", \", kk_decode, \"        \"} ;\n\t6'b010110\t: kcpsm6_opcode <= {\"STAR \", sx_decode, \", \", sy_decode, \"        \"} ;\n\t6'b010111\t: kcpsm6_opcode <= {\"STAR \", sx_decode, \", \", kk_decode, \"        \"} ;\n\t6'b000010\t: kcpsm6_opcode <= {\"AND \", sx_decode, \", \", sy_decode, \"         \"} ;\n\t6'b000011\t: kcpsm6_opcode <= {\"AND \", sx_decode, \", \", kk_decode, \"         \"} ;\n\t6'b000100\t: kcpsm6_opcode <= {\"OR \", sx_decode, \", \", sy_decode, \"          \"} ;\n\t6'b000101\t: kcpsm6_opcode <= {\"OR \", sx_decode, \", \", kk_decode, \"          \"} ;\n\t6'b000110\t: kcpsm6_opcode <= {\"XOR \", sx_decode, \", \", sy_decode, \"         \"} ;\n\t6'b000111\t: kcpsm6_opcode <= {\"XOR \", sx_decode, \", \", kk_decode, \"         \"} ;\n\t6'b001100\t: kcpsm6_opcode <= {\"TEST \", sx_decode, \", \", sy_decode, \"        \"} ;\n\t6'b001101\t: kcpsm6_opcode <= {\"TEST \", sx_decode, \", \", kk_decode, \"        \"} ;\n\t6'b001110\t: kcpsm6_opcode <= {\"TESTCY \", sx_decode, \", \", sy_decode, \"      \"} ;\n\t6'b001111\t: kcpsm6_opcode <= {\"TESTCY \", sx_decode, \", \", kk_decode, \"      \"} ;\n\t6'b010000\t: kcpsm6_opcode <= {\"ADD \", sx_decode, \", \", sy_decode, \"         \"} ;\n\t6'b010001\t: kcpsm6_opcode <= {\"ADD \", sx_decode, \", \", kk_decode, \"         \"} ;\n\t6'b010010\t: kcpsm6_opcode <= {\"ADDCY \", sx_decode, \", \", sy_decode, \"       \"} ;\n\t6'b010011\t: kcpsm6_opcode <= {\"ADDCY \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b011000\t: kcpsm6_opcode <= {\"SUB \", sx_decode, \", \", sy_decode, \"         \"} ;\n\t6'b011001\t: kcpsm6_opcode <= {\"SUB \", sx_decode, \", \", kk_decode, \"         \"} ;\n\t6'b011010\t: kcpsm6_opcode <= {\"SUBCY \", sx_decode, \", \", sy_decode, \"       \"} ;\n\t6'b011011\t: kcpsm6_opcode <= {\"SUBCY \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b011100\t: kcpsm6_opcode <= {\"COMPARE \", sx_decode, \", \", sy_decode, \"     \"} ;\n\t6'b011101\t: kcpsm6_opcode <= {\"COMPARE \", sx_decode, \", \", kk_decode, \"     \"} ;\n\t6'b011110\t: kcpsm6_opcode <= {\"COMPARECY \", sx_decode, \", \", sy_decode, \"   \"} ;\n\t6'b011111\t: kcpsm6_opcode <= {\"COMPARECY \", sx_decode, \", \", kk_decode, \"   \"} ;\n\t6'b010100\t: begin\n\t\t\t\tif (instruction[7] == 1'b1) \n\t\t\t\t  \tkcpsm6_opcode <= {\"HWBUILD \", sx_decode, \"         \"} ;\n\t\t\t\telse\n\t\t\t\t  \tcase (instruction[3:0])\n\t\t\t\t    \t\t4'b0110\t: kcpsm6_opcode <= {\"SL0 \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b0111\t: kcpsm6_opcode <= {\"SL1 \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b0100\t: kcpsm6_opcode <= {\"SLX \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b0000\t: kcpsm6_opcode <= {\"SLA \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b0010\t: kcpsm6_opcode <= {\"RL \", sx_decode, \"              \"} ;\n\t\t\t\t    \t\t4'b1110\t: kcpsm6_opcode <= {\"SR0 \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b1111\t: kcpsm6_opcode <= {\"SR1 \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b1010\t: kcpsm6_opcode <= {\"SRX \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b1000\t: kcpsm6_opcode <= {\"SRA \", sx_decode, \"             \"} ;\n\t\t\t\t    \t\t4'b1100\t: kcpsm6_opcode <= {\"RR \", sx_decode, \"              \"} ;\n\t\t\t\t    \t\tdefault\t: kcpsm6_opcode <= \"Invalid Instruction\";\n\t\t\t\t  \tendcase\n\t\t\tend\n\t6'b101100 \t: kcpsm6_opcode <= {\"OUTPUT \", sx_decode, \", (\", sy_decode, \")    \"} ;\n\t6'b101101 \t: kcpsm6_opcode <= {\"OUTPUT \", sx_decode, \", \", kk_decode, \"      \"} ;\n\t6'b101011 \t: kcpsm6_opcode <= {\"OUTPUTK \", aaa_decode[1:16], \", \", aaa_decode[17:24], \"      \" };\n\t6'b001000 \t: kcpsm6_opcode <= {\"INPUT \", sx_decode, \", (\", sy_decode, \")     \"} ;\n\t6'b001001 \t: kcpsm6_opcode <= {\"INPUT \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b101110 \t: kcpsm6_opcode <= {\"STORE \", sx_decode, \", (\", sy_decode, \")     \"} ;\n\t6'b101111 \t: kcpsm6_opcode <= {\"STORE \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b001010 \t: kcpsm6_opcode <= {\"FETCH \", sx_decode, \", (\", sy_decode, \")     \"} ;\n\t6'b001011 \t: kcpsm6_opcode <= {\"FETCH \", sx_decode, \", \", kk_decode, \"       \"} ;\n\t6'b100010 \t: kcpsm6_opcode <= {\"JUMP \", aaa_decode, \"           \"} ;\n\t6'b110010 \t: kcpsm6_opcode <= {\"JUMP Z, \", aaa_decode, \"        \"} ;\n\t6'b110110 \t: kcpsm6_opcode <= {\"JUMP NZ, \", aaa_decode, \"       \"} ;\n\t6'b111010 \t: kcpsm6_opcode <= {\"JUMP C, \", aaa_decode, \"        \"} ;\n\t6'b111110 \t: kcpsm6_opcode <= {\"JUMP NC, \", aaa_decode, \"       \"} ;\n\t6'b100110 \t: kcpsm6_opcode <= {\"JUMP@ (\", sx_decode, \", \", sy_decode, \")     \"} ;\n\t6'b100000 \t: kcpsm6_opcode <= {\"CALL \", aaa_decode, \"           \"} ;\n\t6'b110000 \t: kcpsm6_opcode <= {\"CALL Z, \", aaa_decode, \"        \"} ;\n\t6'b110100 \t: kcpsm6_opcode <= {\"CALL NZ, \", aaa_decode, \"       \"} ;\n\t6'b111000 \t: kcpsm6_opcode <= {\"CALL C, \", aaa_decode, \"        \"} ;\n\t6'b111100 \t: kcpsm6_opcode <= {\"CALL NC, \", aaa_decode, \"       \"} ;\n\t6'b100100 \t: kcpsm6_opcode <= {\"CALL@ (\", sx_decode, \", \", sy_decode, \")     \"} ;\n\t6'b100101 \t: kcpsm6_opcode <= {\"RETURN             \"} ;\n\t6'b110001 \t: kcpsm6_opcode <= {\"RETURN Z           \"} ;\n\t6'b110101 \t: kcpsm6_opcode <= {\"RETURN NZ          \"} ;\n\t6'b111001 \t: kcpsm6_opcode <= {\"RETURN C           \"} ;\n\t6'b111101 \t: kcpsm6_opcode <= {\"RETURN NC          \"} ;\n\t6'b100001 \t: kcpsm6_opcode <= {\"LOAD&RETURN \", sx_decode, \", \", kk_decode, \" \"} ;\n\t6'b101001\t: begin\n\t\t\t\tcase (instruction[0])\n\t\t\t\t  1'b0    : kcpsm6_opcode <= \"RETURNI DISABLE    \";\n\t\t\t\t  1'b1    : kcpsm6_opcode <= \"RETURNI ENABLE     \";\n\t\t\t\t  default : kcpsm6_opcode <= \"Invalid Instruction\";\n\t\t\t\tendcase\n\t\t\tend\n\t6'b101000\t: begin\n\t\t\t\tcase (instruction[0])\n\t\t\t\t  1'b0    : kcpsm6_opcode <= \"DISABLE INTERRUPT  \";\n\t\t\t\t  1'b1    : kcpsm6_opcode <= \"ENABLE INTERRUPT   \";\n\t\t\t\t  default : kcpsm6_opcode <= \"Invalid Instruction\";\n\t\t\t\tendcase\n\t\t\tend\n\t6'b110111\t: begin\n\t\t\t\tcase (instruction[0])\n\t\t\t\t  1'b0 \t  : kcpsm6_opcode <= \"REGBANK A          \";\n\t\t\t\t  1'b1 \t  : kcpsm6_opcode <= \"REGBANK B          \";\n\t\t\t\t  default : kcpsm6_opcode <= \"Invalid Instruction\";\n\t\t\t\tendcase\n\t\t\tend\n\tdefault \t: kcpsm6_opcode <= \"Invalid Instruction\";\nendcase\n\n\n\n\n\nif (zero_flag == 1'b0) \n  \tkcpsm6_status[17:40] <= \"NZ,\";\nelse\n  \tkcpsm6_status[17:40] <= \" Z,\";\n\n\nif (carry_flag == 1'b0) \n  \tkcpsm6_status[41:64] <= \"NC,\";\nelse\n  \tkcpsm6_status[41:64] <= \" C,\";\n\n\nif (interrupt_enable == 1'b0) \n   \tkcpsm6_status[65:80] <= \"ID\";\nelse\n  \tkcpsm6_status[65:80] <= \"IE\";\n\n\n\n\nif (clk) begin\nif (internal_reset == 1'b1)\n    \tkcpsm6_status[81 : 128] <= \",Reset\";\nelse\n    \tif (sync_sleep == 1'b1 && t_state == 2'b00) \n      \t\tkcpsm6_status[81 : 128] <= \",Sleep\";\n     \telse\n      \t\tkcpsm6_status[81 : 128] <= \"      \";\nend\n\n\n\nif (clk) begin\n\tif (register_enable == 1'b1) begin\n\t\tcase (sx_addr)\n\t\t\t5'b00000\t: bank_a_s0 <= alu_result ;\n\t\t\t5'b00001\t: bank_a_s1 <= alu_result ;\n\t\t\t5'b00010\t: bank_a_s2 <= alu_result ;\n\t\t\t5'b00011\t: bank_a_s3 <= alu_result ;\n\t\t\t5'b00100\t: bank_a_s4 <= alu_result ;\n\t\t\t5'b00101\t: bank_a_s5 <= alu_result ;\n\t\t\t5'b00110\t: bank_a_s6 <= alu_result ;\n\t\t\t5'b00111\t: bank_a_s7 <= alu_result ;\n\t\t\t5'b01000\t: bank_a_s8 <= alu_result ;\n\t\t\t5'b01001\t: bank_a_s9 <= alu_result ;\n\t\t\t5'b01010\t: bank_a_sa <= alu_result ;\n\t\t\t5'b01011\t: bank_a_sb <= alu_result ;\n\t\t\t5'b01100\t: bank_a_sc <= alu_result ;\n\t\t\t5'b01101\t: bank_a_sd <= alu_result ;\n\t\t\t5'b01110\t: bank_a_se <= alu_result ;\n\t\t\t5'b01111\t: bank_a_sf <= alu_result ;\n\t\t\t5'b10000\t: bank_b_s0 <= alu_result ;\n\t\t\t5'b10001\t: bank_b_s1 <= alu_result ;\n\t\t\t5'b10010\t: bank_b_s2 <= alu_result ;\n\t\t\t5'b10011\t: bank_b_s3 <= alu_result ;\n\t\t\t5'b10100\t: bank_b_s4 <= alu_result ;\n\t\t\t5'b10101\t: bank_b_s5 <= alu_result ;\n\t\t\t5'b10110\t: bank_b_s6 <= alu_result ;\n\t\t\t5'b10111\t: bank_b_s7 <= alu_result ;\n\t\t\t5'b11000\t: bank_b_s8 <= alu_result ;\n\t\t\t5'b11001\t: bank_b_s9 <= alu_result ;\n\t\t\t5'b11010\t: bank_b_sa <= alu_result ;\n\t\t\t5'b11011\t: bank_b_sb <= alu_result ;\n\t\t\t5'b11100\t: bank_b_sc <= alu_result ;\n\t\t\t5'b11101\t: bank_b_sd <= alu_result ;\n\t\t\t5'b11110\t: bank_b_se <= alu_result ;\n\t\t\t5'b11111\t: bank_b_sf <= alu_result ;\n\t\tendcase\n\tend\n\n\nif (spm_enable == 1'b1) begin\n\tcase (sy_or_kk)\n\t\t8'b00000000\t: sim_spm00 <= sx;\n\t\t8'b00000001\t: sim_spm01 <= sx;\n\t\t8'b00000010\t: sim_spm02 <= sx;\n\t\t8'b00000011\t: sim_spm03 <= sx;\n\t\t8'b00000100\t: sim_spm04 <= sx;\n\t\t8'b00000101\t: sim_spm05 <= sx;\n\t\t8'b00000110\t: sim_spm06 <= sx;\n\t\t8'b00000111\t: sim_spm07 <= sx;\n\t\t8'b00001000\t: sim_spm08 <= sx;\n\t\t8'b00001001\t: sim_spm09 <= sx;\n\t\t8'b00001010\t: sim_spm0A <= sx;\n\t\t8'b00001011\t: sim_spm0B <= sx;\n\t\t8'b00001100\t: sim_spm0C <= sx;\n\t\t8'b00001101\t: sim_spm0D <= sx;\n\t\t8'b00001110\t: sim_spm0E <= sx;\n\t\t8'b00001111\t: sim_spm0F <= sx;\n\t\t8'b00010000\t: sim_spm10 <= sx;\n\t\t8'b00010001\t: sim_spm11 <= sx;\n\t\t8'b00010010\t: sim_spm12 <= sx;\n\t\t8'b00010011\t: sim_spm13 <= sx;\n\t\t8'b00010100\t: sim_spm14 <= sx;\n\t\t8'b00010101\t: sim_spm15 <= sx;\n\t\t8'b00010110\t: sim_spm16 <= sx;\n\t\t8'b00010111\t: sim_spm17 <= sx;\n\t\t8'b00011000\t: sim_spm18 <= sx;\n\t\t8'b00011001\t: sim_spm19 <= sx;\n\t\t8'b00011010\t: sim_spm1A <= sx;\n\t\t8'b00011011\t: sim_spm1B <= sx;\n\t\t8'b00011100\t: sim_spm1C <= sx;\n\t\t8'b00011101\t: sim_spm1D <= sx;\n\t\t8'b00011110\t: sim_spm1E <= sx;\n\t\t8'b00011111\t: sim_spm1F <= sx;\n\t\t8'b00100000\t: sim_spm20 <= sx;\n\t\t8'b00100001\t: sim_spm21 <= sx;\n\t\t8'b00100010\t: sim_spm22 <= sx;\n\t\t8'b00100011\t: sim_spm23 <= sx;\n\t\t8'b00100100\t: sim_spm24 <= sx;\n\t\t8'b00100101\t: sim_spm25 <= sx;\n\t\t8'b00100110\t: sim_spm26 <= sx;\n\t\t8'b00100111\t: sim_spm27 <= sx;\n\t\t8'b00101000\t: sim_spm28 <= sx;\n\t\t8'b00101001\t: sim_spm29 <= sx;\n\t\t8'b00101010\t: sim_spm2A <= sx;\n\t\t8'b00101011\t: sim_spm2B <= sx;\n\t\t8'b00101100\t: sim_spm2C <= sx;\n\t\t8'b00101101\t: sim_spm2D <= sx;\n\t\t8'b00101110\t: sim_spm2E <= sx;\n\t\t8'b00101111\t: sim_spm2F <= sx;\n\t\t8'b00110000\t: sim_spm30 <= sx;\n\t\t8'b00110001\t: sim_spm31 <= sx;\n\t\t8'b00110010\t: sim_spm32 <= sx;\n\t\t8'b00110011\t: sim_spm33 <= sx;\n\t\t8'b00110100\t: sim_spm34 <= sx;\n\t\t8'b00110101\t: sim_spm35 <= sx;\n\t\t8'b00110110\t: sim_spm36 <= sx;\n\t\t8'b00110111\t: sim_spm37 <= sx;\n\t\t8'b00111000\t: sim_spm38 <= sx;\n\t\t8'b00111001\t: sim_spm39 <= sx;\n\t\t8'b00111010\t: sim_spm3A <= sx;\n\t\t8'b00111011\t: sim_spm3B <= sx;\n\t\t8'b00111100\t: sim_spm3C <= sx;\n\t\t8'b00111101\t: sim_spm3D <= sx;\n\t\t8'b00111110\t: sim_spm3E <= sx;\n\t\t8'b00111111\t: sim_spm3F <= sx;\n\t\t8'b01000000\t: sim_spm40 <= sx;\n\t\t8'b01000001\t: sim_spm41 <= sx;\n\t\t8'b01000010\t: sim_spm42 <= sx;\n\t\t8'b01000011\t: sim_spm43 <= sx;\n\t\t8'b01000100\t: sim_spm44 <= sx;\n\t\t8'b01000101\t: sim_spm45 <= sx;\n\t\t8'b01000110\t: sim_spm46 <= sx;\n\t\t8'b01000111\t: sim_spm47 <= sx;\n\t\t8'b01001000\t: sim_spm48 <= sx;\n\t\t8'b01001001\t: sim_spm49 <= sx;\n\t\t8'b01001010\t: sim_spm4A <= sx;\n\t\t8'b01001011\t: sim_spm4B <= sx;\n\t\t8'b01001100\t: sim_spm4C <= sx;\n\t\t8'b01001101\t: sim_spm4D <= sx;\n\t\t8'b01001110\t: sim_spm4E <= sx;\n\t\t8'b01001111\t: sim_spm4F <= sx;\n\t\t8'b01010000\t: sim_spm50 <= sx;\n\t\t8'b01010001\t: sim_spm51 <= sx;\n\t\t8'b01010010\t: sim_spm52 <= sx;\n\t\t8'b01010011\t: sim_spm53 <= sx;\n\t\t8'b01010100\t: sim_spm54 <= sx;\n\t\t8'b01010101\t: sim_spm55 <= sx;\n\t\t8'b01010110\t: sim_spm56 <= sx;\n\t\t8'b01010111\t: sim_spm57 <= sx;\n\t\t8'b01011000\t: sim_spm58 <= sx;\n\t\t8'b01011001\t: sim_spm59 <= sx;\n\t\t8'b01011010\t: sim_spm5A <= sx;\n\t\t8'b01011011\t: sim_spm5B <= sx;\n\t\t8'b01011100\t: sim_spm5C <= sx;\n\t\t8'b01011101\t: sim_spm5D <= sx;\n\t\t8'b01011110\t: sim_spm5E <= sx;\n\t\t8'b01011111\t: sim_spm5F <= sx;\n\t\t8'b01100000\t: sim_spm60 <= sx;\n\t\t8'b01100001\t: sim_spm61 <= sx;\n\t\t8'b01100010\t: sim_spm62 <= sx;\n\t\t8'b01100011\t: sim_spm63 <= sx;\n\t\t8'b01100100\t: sim_spm64 <= sx;\n\t\t8'b01100101\t: sim_spm65 <= sx;\n\t\t8'b01100110\t: sim_spm66 <= sx;\n\t\t8'b01100111\t: sim_spm67 <= sx;\n\t\t8'b01101000\t: sim_spm68 <= sx;\n\t\t8'b01101001\t: sim_spm69 <= sx;\n\t\t8'b01101010\t: sim_spm6A <= sx;\n\t\t8'b01101011\t: sim_spm6B <= sx;\n\t\t8'b01101100\t: sim_spm6C <= sx;\n\t\t8'b01101101\t: sim_spm6D <= sx;\n\t\t8'b01101110\t: sim_spm6E <= sx;\n\t\t8'b01101111\t: sim_spm6F <= sx;\n\t\t8'b01110000\t: sim_spm70 <= sx;\n\t\t8'b01110001\t: sim_spm71 <= sx;\n\t\t8'b01110010\t: sim_spm72 <= sx;\n\t\t8'b01110011\t: sim_spm73 <= sx;\n\t\t8'b01110100\t: sim_spm74 <= sx;\n\t\t8'b01110101\t: sim_spm75 <= sx;\n\t\t8'b01110110\t: sim_spm76 <= sx;\n\t\t8'b01110111\t: sim_spm77 <= sx;\n\t\t8'b01111000\t: sim_spm78 <= sx;\n\t\t8'b01111001\t: sim_spm79 <= sx;\n\t\t8'b01111010\t: sim_spm7A <= sx;\n\t\t8'b01111011\t: sim_spm7B <= sx;\n\t\t8'b01111100\t: sim_spm7C <= sx;\n\t\t8'b01111101\t: sim_spm7D <= sx;\n\t\t8'b01111110\t: sim_spm7E <= sx;\n\t\t8'b01111111\t: sim_spm7F <= sx;\n\t\t8'b10000000\t: sim_spm80 <= sx;\n\t\t8'b10000001\t: sim_spm81 <= sx;\n\t\t8'b10000010\t: sim_spm82 <= sx;\n\t\t8'b10000011\t: sim_spm83 <= sx;\n\t\t8'b10000100\t: sim_spm84 <= sx;\n\t\t8'b10000101\t: sim_spm85 <= sx;\n\t\t8'b10000110\t: sim_spm86 <= sx;\n\t\t8'b10000111\t: sim_spm87 <= sx;\n\t\t8'b10001000\t: sim_spm88 <= sx;\n\t\t8'b10001001\t: sim_spm89 <= sx;\n\t\t8'b10001010\t: sim_spm8A <= sx;\n\t\t8'b10001011\t: sim_spm8B <= sx;\n\t\t8'b10001100\t: sim_spm8C <= sx;\n\t\t8'b10001101\t: sim_spm8D <= sx;\n\t\t8'b10001110\t: sim_spm8E <= sx;\n\t\t8'b10001111\t: sim_spm8F <= sx;\n\t\t8'b10010000\t: sim_spm90 <= sx;\n\t\t8'b10010001\t: sim_spm91 <= sx;\n\t\t8'b10010010\t: sim_spm92 <= sx;\n\t\t8'b10010011\t: sim_spm93 <= sx;\n\t\t8'b10010100\t: sim_spm94 <= sx;\n\t\t8'b10010101\t: sim_spm95 <= sx;\n\t\t8'b10010110\t: sim_spm96 <= sx;\n\t\t8'b10010111\t: sim_spm97 <= sx;\n\t\t8'b10011000\t: sim_spm98 <= sx;\n\t\t8'b10011001\t: sim_spm99 <= sx;\n\t\t8'b10011010\t: sim_spm9A <= sx;\n\t\t8'b10011011\t: sim_spm9B <= sx;\n\t\t8'b10011100\t: sim_spm9C <= sx;\n\t\t8'b10011101\t: sim_spm9D <= sx;\n\t\t8'b10011110\t: sim_spm9E <= sx;\n\t\t8'b10011111\t: sim_spm9F <= sx;\n\t\t8'b10100000\t: sim_spmA0 <= sx;\n\t\t8'b10100001\t: sim_spmA1 <= sx;\n\t\t8'b10100010\t: sim_spmA2 <= sx;\n\t\t8'b10100011\t: sim_spmA3 <= sx;\n\t\t8'b10100100\t: sim_spmA4 <= sx;\n\t\t8'b10100101\t: sim_spmA5 <= sx;\n\t\t8'b10100110\t: sim_spmA6 <= sx;\n\t\t8'b10100111\t: sim_spmA7 <= sx;\n\t\t8'b10101000\t: sim_spmA8 <= sx;\n\t\t8'b10101001\t: sim_spmA9 <= sx;\n\t\t8'b10101010\t: sim_spmAA <= sx;\n\t\t8'b10101011\t: sim_spmAB <= sx;\n\t\t8'b10101100\t: sim_spmAC <= sx;\n\t\t8'b10101101\t: sim_spmAD <= sx;\n\t\t8'b10101110\t: sim_spmAE <= sx;\n\t\t8'b10101111\t: sim_spmAF <= sx;\n\t\t8'b10110000\t: sim_spmB0 <= sx;\n\t\t8'b10110001\t: sim_spmB1 <= sx;\n\t\t8'b10110010\t: sim_spmB2 <= sx;\n\t\t8'b10110011\t: sim_spmB3 <= sx;\n\t\t8'b10110100\t: sim_spmB4 <= sx;\n\t\t8'b10110101\t: sim_spmB5 <= sx;\n\t\t8'b10110110\t: sim_spmB6 <= sx;\n\t\t8'b10110111\t: sim_spmB7 <= sx;\n\t\t8'b10111000\t: sim_spmB8 <= sx;\n\t\t8'b10111001\t: sim_spmB9 <= sx;\n\t\t8'b10111010\t: sim_spmBA <= sx;\n\t\t8'b10111011\t: sim_spmBB <= sx;\n\t\t8'b10111100\t: sim_spmBC <= sx;\n\t\t8'b10111101\t: sim_spmBD <= sx;\n\t\t8'b10111110\t: sim_spmBE <= sx;\n\t\t8'b10111111\t: sim_spmBF <= sx;\n\t\t8'b11000000\t: sim_spmC0 <= sx;\n\t\t8'b11000001\t: sim_spmC1 <= sx;\n\t\t8'b11000010\t: sim_spmC2 <= sx;\n\t\t8'b11000011\t: sim_spmC3 <= sx;\n\t\t8'b11000100\t: sim_spmC4 <= sx;\n\t\t8'b11000101\t: sim_spmC5 <= sx;\n\t\t8'b11000110\t: sim_spmC6 <= sx;\n\t\t8'b11000111\t: sim_spmC7 <= sx;\n\t\t8'b11001000\t: sim_spmC8 <= sx;\n\t\t8'b11001001\t: sim_spmC9 <= sx;\n\t\t8'b11001010\t: sim_spmCA <= sx;\n\t\t8'b11001011\t: sim_spmCB <= sx;\n\t\t8'b11001100\t: sim_spmCC <= sx;\n\t\t8'b11001101\t: sim_spmCD <= sx;\n\t\t8'b11001110\t: sim_spmCE <= sx;\n\t\t8'b11001111\t: sim_spmCF <= sx;\n\t\t8'b11010000\t: sim_spmD0 <= sx;\n\t\t8'b11010001\t: sim_spmD1 <= sx;\n\t\t8'b11010010\t: sim_spmD2 <= sx;\n\t\t8'b11010011\t: sim_spmD3 <= sx;\n\t\t8'b11010100\t: sim_spmD4 <= sx;\n\t\t8'b11010101\t: sim_spmD5 <= sx;\n\t\t8'b11010110\t: sim_spmD6 <= sx;\n\t\t8'b11010111\t: sim_spmD7 <= sx;\n\t\t8'b11011000\t: sim_spmD8 <= sx;\n\t\t8'b11011001\t: sim_spmD9 <= sx;\n\t\t8'b11011010\t: sim_spmDA <= sx;\n\t\t8'b11011011\t: sim_spmDB <= sx;\n\t\t8'b11011100\t: sim_spmDC <= sx;\n\t\t8'b11011101\t: sim_spmDD <= sx;\n\t\t8'b11011110\t: sim_spmDE <= sx;\n\t\t8'b11011111\t: sim_spmDF <= sx;\n\t\t8'b11100000\t: sim_spmE0 <= sx;\n\t\t8'b11100001\t: sim_spmE1 <= sx;\n\t\t8'b11100010\t: sim_spmE2 <= sx;\n\t\t8'b11100011\t: sim_spmE3 <= sx;\n\t\t8'b11100100\t: sim_spmE4 <= sx;\n\t\t8'b11100101\t: sim_spmE5 <= sx;\n\t\t8'b11100110\t: sim_spmE6 <= sx;\n\t\t8'b11100111\t: sim_spmE7 <= sx;\n\t\t8'b11101000\t: sim_spmE8 <= sx;\n\t\t8'b11101001\t: sim_spmE9 <= sx;\n\t\t8'b11101010\t: sim_spmEA <= sx;\n\t\t8'b11101011\t: sim_spmEB <= sx;\n\t\t8'b11101100\t: sim_spmEC <= sx;\n\t\t8'b11101101\t: sim_spmED <= sx;\n\t\t8'b11101110\t: sim_spmEE <= sx;\n\t\t8'b11101111\t: sim_spmEF <= sx;\n\t\t8'b11110000\t: sim_spmF0 <= sx;\n\t\t8'b11110001\t: sim_spmF1 <= sx;\n\t\t8'b11110010\t: sim_spmF2 <= sx;\n\t\t8'b11110011\t: sim_spmF3 <= sx;\n\t\t8'b11110100\t: sim_spmF4 <= sx;\n\t\t8'b11110101\t: sim_spmF5 <= sx;\n\t\t8'b11110110\t: sim_spmF6 <= sx;\n\t\t8'b11110111\t: sim_spmF7 <= sx;\n\t\t8'b11111000\t: sim_spmF8 <= sx;\n\t\t8'b11111001\t: sim_spmF9 <= sx;\n\t\t8'b11111010\t: sim_spmFA <= sx;\n\t\t8'b11111011\t: sim_spmFB <= sx;\n\t\t8'b11111100\t: sim_spmFC <= sx;\n\t\t8'b11111101\t: sim_spmFD <= sx;\n\t\t8'b11111110\t: sim_spmFE <= sx;\n\t\t8'b11111111\t: sim_spmFF <= sx;\n    endcase\nend\n\nend\n\n\n\n\nif (bank == 1'b0) begin\n\tkcpsm6_status[1:16] <= \"A,\";\n\tsim_s0 <= bank_a_s0 ;\n\tsim_s1 <= bank_a_s1 ;\n\tsim_s2 <= bank_a_s2 ;\n\tsim_s3 <= bank_a_s3 ;\n\tsim_s4 <= bank_a_s4 ;\n\tsim_s5 <= bank_a_s5 ;\n\tsim_s6 <= bank_a_s6 ;\n\tsim_s7 <= bank_a_s7 ;\n\tsim_s8 <= bank_a_s8 ;\n\tsim_s9 <= bank_a_s9 ;\n\tsim_sA <= bank_a_sa ;\n\tsim_sB <= bank_a_sb ;\n\tsim_sC <= bank_a_sc ;\n\tsim_sD <= bank_a_sd ;\n\tsim_sE <= bank_a_se ;\n\tsim_sF <= bank_a_sf ;\nend\nelse begin\n\tkcpsm6_status[1:16] <= \"B,\";\n\tsim_s0 <= bank_b_s0 ;\n\tsim_s1 <= bank_b_s1 ;\n\tsim_s2 <= bank_b_s2 ;\n\tsim_s3 <= bank_b_s3 ;\n\tsim_s4 <= bank_b_s4 ;\n\tsim_s5 <= bank_b_s5 ;\n\tsim_s6 <= bank_b_s6 ;\n\tsim_s7 <= bank_b_s7 ;\n\tsim_s8 <= bank_b_s8 ;\n\tsim_s9 <= bank_b_s9 ;\n\tsim_sA <= bank_b_sa ;\n\tsim_sB <= bank_b_sb ;\n\tsim_sC <= bank_b_sc ;\n\tsim_sD <= bank_b_sd ;\n\tsim_sE <= bank_b_se ;\n\tsim_sF <= bank_b_sf ;\nend\n\n\nend \n  \n  \n\n\n\n\n\n\n\n\nendmodule\n\n\n\n\n\n\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: kcpsm6. Module specification: The kcpsm6 module implements a PicoBlaze-6 soft microcontroller core, featuring an arithmetic logic unit (ALU), register banks, program counter, stack, and scratch pad memory. It decodes and executes instructions, handles interrupts, and provides input/output interfaces. The module has input ports for instruction (18-bit), in_port (8-bit), interrupt, sleep, reset, and clock signals, while its output ports include address (12-bit), bram_enable, out_port (8-bit), port_id (8-bit), write_strobe, k_write_strobe, read_strobe, and interrupt_ack. Internally, it uses numerous signals for control (e.g., t_state, run, internal_reset), ALU operations (e.g., arith_logical_sel"
                }
            ]
        }
    ]
}