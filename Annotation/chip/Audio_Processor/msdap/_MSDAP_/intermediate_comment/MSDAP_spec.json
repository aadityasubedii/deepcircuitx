{
    "spec": "Module name: top_level. Module specification: The top_level module is a complex digital signal processing system that processes input data streams (InputL and InputR) and produces output data streams (OutputL and OutputR). It integrates various submodules including SIPO (Serial In Parallel Out), PISO (Parallel In Serial Out), memory blocks (RJmem, Hmem, Xmem), ALUs, and a controller. The module has input ports for system control (Reset, Frame, Dclk, Sclk, Start) and data input (InputL, InputR), and output ports for system status (InReady, OutReady) and processed data (OutputL, OutputR). Internally, it uses numerous signals (w1-w45) for interconnecting submodules, managing data flow, and control. The module is structured into several key sections: input data serialization (",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: top_level\n\nExplanation: This module appears to be a top-level design for a digital signal processing system. It integrates various submodules including SIPO (Serial In Parallel Out), PISO (Parallel In Serial Out), memory blocks (RJmem, Hmem, Xmem), ALUs, and a controller. The system processes input data streams (InputL and InputR) through multiple stages of memory operations and arithmetic computations, ultimately producing output data streams (OutputL and OutputR). The controller manages the overall operation, coordinating data flow between different components and handling various control signals. The design seems to implement some form of audio or signal processing algorithm, likely involving filtering or transformation of the input data."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports: Reset, Frame, Dclk, Sclk, InReady, Start, InputL, InputR.\n\nExplanation:\n- Reset: System reset signal\n- Frame: Frame synchronization signal\n- Dclk: Data clock for input sampling\n- Sclk: System clock for internal operations\n- Start: Signal to initiate processing\n- InputL, InputR: Left and right channel input data streams\n\nOutput ports: InReady, OutReady, OutputL, OutputR.\n\nExplanation:\n- InReady: Indicates the system is ready to accept input data\n- OutReady: Indicates output data is available\n- OutputL, OutputR: Left and right channel output data streams after processing"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\nw1, w2, w3, w3L, w3R, w5L, w5R, w8L, w8R, w9, w12L, w12R, w13L, w13R, w16L, w16R, w17, w19L, w19R, w20L, w20R, w21, w22, w23L, w23R, w24L, w24R, w27L, w27R, w29, w29L, w29R, w30L, w30R, w31L, w31R, w32L, w32R, w33L, w33R, w34L, w34R, w35L, w35R, w36L, w36R, w37L, w37R, w38, w40, w40L, w40R, w42, w43, w43L, w43R, w45, w4L, w4R, w10L, w10R, w18L, w18R, w28L, w28R, w6L, w6R, w7L, w7R, w14L, w14R, w15L, w15R, w25L, w25R, w26L, w26R, w39, w41L, w41R.\n\nExplanation:\n- w1-w45: Various control and data signals interconnecting different submodules\n- w3L/R, w5L/R, w8L/R, etc.: Left and right channel specific signals\n- w4L/R, w10L/R, w18L/R, w28L/R: 16-bit data buses for different stages\n- w6L/R, w7L/R: 4-bit address buses\n- w14L/R, w15L/R: 9-bit address buses\n- w25L/R, w26L/R, w39: 8-bit data/address buses\n- w41L/R: 40-bit data buses for final output stage\n\nThese signals facilitate data flow, control, and synchronization between various submodules such as SIPO, PISO, memory blocks (RJ, H, X), ALUs, and the controller, implementing the overall signal processing algorithm."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n`timescale 1ns / 1ps\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule top_level (Reset, Frame, Dclk, Sclk, InReady, OutReady, Start, InputL, InputR, OutputL, OutputR);\n\ninput Frame, Reset, Sclk, Dclk, Start, InputL, InputR;\n\noutput InReady;\noutput OutReady;\n\noutput OutputL,OutputR;\n\nwire w1, w2, w3, w3L, w3R, w5L, w5R, w8L, w8R, w9,  w12L, w12R, w13L, \n\t w13R, w16L, w16R, w17, w19L, w19R, w20L, w20R, w21, w22, w23L, w23R, w24L, \n\t w24R, w27L, w27R, w29, w29L, w29R, w30L, w30R,  w31L, w31R, w32L, w32R, w33L, w33R, w34L, w34R, w35L, w35R, w36L, w36R, w37L, w37R, w38, \n\t w40, w40L, w40R, w42, w43, w43L, w43R,  w45 ;\nwire [15:0]w4L, w4R, w10L, w10R, w18L, w18R, w28L, w28R;\nwire [3:0]w6L, w6R, w7L,w7R;\nwire [8:0]w14L, w14R, w15L, w15R;\nwire [7:0]w25L, w25R, w26L, w26R, w39;\nwire [39:0] w41L, w41R;\n\nor2\t\tinst_RJ_en_L       (.a(w30L), .b(w31L), .out(w5L) );\nor2\t\tinst_RJ_en_R       (.a(w30R), .b(w31R), .out(w5R) );\nor2\t\tinst_H_en_L\t       (.a(w32L), .b(w33L), .out(w13L) );\nor2\t\tinst_H_en_R\t       (.a(w32R), .b(w33R), .out(w13R) );\nor3\t\tinst_Write_Done_L  (.a(w12L), .b(w19L), .c(w27L), .out(w20L) );\nor3\t\tinst_Write_Done_R  (.a(w12R), .b(w19R), .c(w27R), .out(w20R) );\nor3\t\tinst_data_valid_L  (.a(w34L), .b(w35L), .c(w36L), .out(w37L) );\nor3\t\tinst_data_valid_R  (.a(w34R), .b(w35R), .c(w36R), .out(w37R) );\nand2\tinst_word_ready    (.a(w3L),  .b(w3R),  .out(w3)  );\nand2\tinst_sleep \t\t   (.a(w29L), .b(w29R), .out(w29) );\nand2\tinst_prev_OutReady (.a(w40L), .b(w40R), .out(w40) );\nand2 \tinst_word_sent\t   (.a(w43L), .b(w43R), .out(w43));\n\t\t\t\nSIPO\tSIPO_L (.Frame_edg(w2), .Reset(Reset), .rst(w1), .Dclk(Dclk), .data_in(InputL), .word_ready(w3L), .data_out(w4L), .received(w20L) );\nSIPO\tSIPO_R (.Frame_edg(w2), .Reset(Reset), .rst(w1), .Dclk(Dclk), .data_in(InputR), .word_ready(w3R), .data_out(w4R), .received(w20R) );\n\nRJmem  \trLmem  (.Start(Start), .en(w5L), .rd_addr(w6L), .wr_addr(w7L), .wr(w8L), .rst(w9), .data_in(w4L), .data_out(w10L), .w_done(w12L), .data_valid(w36L) );\nRJmem  \trRmem  (.Start(Start), .en(w5R), .rd_addr(w6R), .wr_addr(w7R), .wr(w8R), .rst(w9), .data_in(w4R), .data_out(w10R), .w_done(w12R), .data_valid(w36R) );\n\nHmem  \thLmem  (.Start(Start), .en(w13L), .rd_addr(w14L), .wr_addr(w15L), .wr(w16L), .rst(w17), .data_in(w4L), .data_out(w18L), .w_done(w19L), .data_valid(w35L) );\nHmem  \thRmem  (.Start(Start), .en(w13R), .rd_addr(w14R), .wr_addr(w15R), .wr(w16R), .rst(w17), .data_in(w4R), .data_out(w18R), .w_done(w19R), .data_valid(w35R) );\n\nXmem\txLmem  (.Start(Start), .Reset(Reset), .rst(w22), .rd_en(w24L), .wr_en(w23L), .rd_addr(w26L), .wr_addr(w25L), .data_in(w4L), .data_out(w28L), .sleep(w29L), \n\t\t\t    .w_done(w27L), .data_valid(w34L) );\nXmem\txRmem  (.Start(Start), .Reset(Reset), .rst(w22), .rd_en(w24R), .wr_en(w23R), .rd_addr(w26R), .wr_addr(w25R), .data_in(w4R), .data_out(w28R), .sleep(w29R), \n\t\t\t    .w_done(w27R), .data_valid(w34R) );\n\nALU\t\tALU_L  (.Sclk(Sclk), .Reset(Reset), .en(w21), .Start(Start), .sleep(w29),\n\t\t\t\t.RJ_en(w31L), .rr_ptr(w6L), .r_valid(w36L), .rj_data_in(w10L),\n\t\t\t\t.H_en(w33L), .hr_ptr(w14L), .h_valid(w35L), .h_data_in(w18L), \n\t\t\t\t.X_rd_en(w24L), .xr_ptr(w26L),  .x_data_in(w28L), .x_flagbit(w38), .n(w39),\n\t\t\t\t.valid(w37L), .prev_OutReady(w40L), .y(w41L) );\n\nALU\t\tALU_R  (.Sclk(Sclk), .Reset(Reset), .en(w21), .Start(Start), .sleep(w29),\n\t\t\t\t.RJ_en(w31R), .rr_ptr(w6R), .r_valid(w36R), .rj_data_in(w10R),\n\t\t\t\t.H_en(w33R), .hr_ptr(w14R), .h_valid(w35R), .h_data_in(w18R), \n\t\t\t\t.X_rd_en(w24R), .xr_ptr(w26R),  .x_data_in(w28R), .x_flagbit(w38), .n(w39),\n\t\t\t\t.valid(w37R), .prev_OutReady(w40R), .y(w41R) );\t\t\t\t\n\t\t\t\t\nPISO\tPISO_L (.en(w42), .Sclk(Sclk), .Start(Start), .data_in(w41L), .word_sent(w43L), .data_out(OutputL) );\nPISO\tPISO_R (.en(w42), .Sclk(Sclk), .Start(Start), .data_in(w41R), .word_sent(w43R), .data_out(OutputR) );\n\ncontroller CU  (.Reset(Reset), .Frame(Frame), .Frame_edg(w2), .Start(Start), .InReady(InReady), .OutReady(OutReady), .Sclk(Sclk), .word_ready(w3), \n\t\t\t\t.RJ_enL(w30L), .RJ_enR(w30R), .RJ_rst(w9), .RJ_wrL(w8L), .RJ_wrR(w8R), .rw_ptr_L(w7L), .rw_ptr_R(w7R),\n\t\t\t\t.H_enL(w32L), .H_enR(w32R), .H_rst(w17), .H_wrL(w16L), .H_wrR(w16R), .hw_ptr_L(w15L), .hw_ptr_R(w15R),\n\t\t\t\t.X_rst(w22), .X_wr_enL(w23L), .X_wr_enR(w23R), .xw_ptr_L(w25L), .xw_ptr_R(w25R), .x_flagbit(w38),\n\t\t\t\t.ALU_en(w21), .n(w39), .prev_OutReady(w40),\n\t\t\t\t.PISO_en(w42), .word_sent(w43),\n\t\t\t\t.SIPO_rst(w1), .sleep(w29), .done_L(w20L), .done_R(w20R) );\n\n\n\n\n\n\nendmodule\n\nmodule or3(a,b,c,out);\ninput a, b, c;\noutput out;\n\nassign out = a | b | c;\n\nendmodule\n\nmodule or2(a,b,out);\ninput a, b;\noutput out;\n\nassign out = a | b;\n\nendmodule\n\nmodule and2(a,b,out);\ninput a, b;\noutput out;\n\nassign out = a & b;\n\nendmodule\n\n\n\nmodule SIPO (Frame_edg, rst, Reset, Dclk, data_in, word_ready, data_out, received);\ninput Frame_edg, Reset, Dclk, data_in, rst, received;\noutput reg word_ready;\noutput reg [15:0] data_out;\nreg [3:0] bt;\n\nalways @ (negedge Dclk or posedge rst or posedge received or negedge Reset)\nbegin\n\tif( Reset == 1'b0 )\n\tbegin\n\t\tbt         <= 4'h0;\n\t\tdata_out   <= 16'h0000;\n\t\tword_ready <= 1'b0;\n\tend\n\telse if( rst )\n\tbegin\n\t\tbt         <= 4'h0;\n\t\tdata_out   <= 16'h0000;\n\t\tword_ready <= 1'b0;\n\tend\n\telse if(received == 1'b1)\n\tbegin\n\t\tif(word_ready== 1'b1)\n\t\tbegin\n\t\t\tword_ready <= 1'b0;\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tif (Frame_edg == 1'b1)\n\t\tbegin\n\t\t\tif (bt == 4'h0)\n\t\t\tbegin\n\t\t\t\tword_ready <= 1'b0;\n\t\t\tend\n\t\t\tdata_out [bt]   <= data_in;\n\t\t\t{word_ready,bt} <= bt + 1'b1;\n\t\tend\n\t\t\n\t\telse\n\t\tbegin\n\t\t\tword_ready <= 1'b0;\n\t\t\tbt \t\t   <= 4'h0;\n\t\tend\n\tend\nend\nendmodule\n\n\n\nmodule RJmem (en, Start, rd_addr, wr_addr, wr, rst, data_in, data_out, w_done, data_valid );\ninput en, rst, wr, Start;\ninput [3:0] wr_addr, rd_addr;\ninput [15:0] data_in;\noutput reg w_done;\noutput reg data_valid;\noutput reg [15:0] data_out;\nreg [15:0] MEM [15:0];\n\nalways @ (en or Start)\nbegin\n\tif (Start== 1'b1)\n\tbegin\n\t\tdata_out   = 16'h0000;\n\t\tw_done     = 1'b0;\n\t\tdata_valid = 1'b0;\n\tend\n\t\n\telse if(en== 1'b1)\n\tbegin\n\t\tif (rst== 1'b1)\n\t\tbegin\n\t\t\tMEM [wr_addr] = 16'h0000;\n\t\t\t\n\t\t\tw_done = 1'b1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tif (wr== 1'b1)\n\t\t\tbegin\n\t\t\t\tMEM [wr_addr] = data_in[15:0];\n\t\t\t\t\n\t\t\t\tw_done = 1'b1;\n\t\t\tend\n\t\t\t\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tdata_out = MEM [rd_addr];\n\t\t\t\t\n\t\t\t\tdata_valid = 1'b1;\n\t\t\tend\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tw_done = 1'b0;\n\t\tdata_valid = 1'b0;\n\t\t\n\tend\nend\n\nendmodule\n\n\nmodule Hmem (en, Start, rd_addr, wr_addr, wr, rst, data_in, data_out, w_done, data_valid );\n\ninput en, rst, wr, Start;\ninput [8:0] wr_addr, rd_addr;\ninput [15:0] data_in;\noutput reg w_done;\noutput reg data_valid;\noutput reg [15:0] data_out;\nreg [15:0] MEM [511:0];\n\nalways @ (Start or en)\nbegin\n\tif(Start== 1'b1)\n\tbegin\n\t\tw_done = 1'b0;\n\t\tdata_valid = 1'b0;\n\t\tdata_out = 16'h0000;\n\tend\n\t\n\telse if(en== 1'b1)\n\tbegin\n\t\tif (rst== 1'b1)\n\t\tbegin\n\t\t\tMEM [wr_addr] = 16'h0000;\n\t\t\t\n\t\t\tw_done = 1'b1;\n\t\tend\n\t\t\n\t\telse\n\t\tbegin\n\t\t\tif (wr== 1'b1)\n\t\t\tbegin\n\t\t\t\tMEM [wr_addr] = data_in[15:0];\n\t\t\t\t\n\t\t\t\tw_done = 1'b1;\n\t\t\tend\n\t\t\t\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tdata_out = MEM [rd_addr];\n\t\t\t\t\n\t\t\t\tdata_valid = 1'b1;\n\t\t\tend\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tw_done = 1'b0;\n\t\tdata_valid = 1'b0;\n\t\t\n\tend\nend\n\nendmodule\n\n\n\nmodule Xmem (Start, Reset, rst, rd_addr, wr_addr, wr_en, rd_en, data_in, data_out, sleep, w_done, data_valid);\n\ninput Start, Reset,wr_en, rd_en, rst;\ninput [7:0] rd_addr, wr_addr;\ninput [15:0] data_in;\noutput reg w_done, sleep, data_valid;\noutput reg [15:0] data_out;\n\nreg [15:0] MEM [255:0];\nreg [11:0] sleep_count;\n\nalways @ (wr_en or Reset or Start)\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\tsleep \t\t= 1'b0;\n\t\tsleep_count = 12'h0;\n\tend\n\t\n\telse if(Start== 1'b1)\n\tbegin\n\t\tw_done \t\t= 1'b0;\n\t\tsleep  \t\t= 1'b0;\n\t\tsleep_count = 12'h000;\n\tend\n\t\n\telse  if(wr_en== 1'b1)\n\tbegin\n\t\tif(rst== 1'b1)\n\t\tbegin\n\t\t\tMEM [wr_addr] = 16'h0000;\n\t\t\tw_done = 1'b1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tMEM [wr_addr] = data_in;\n\t\t\t\n\t\t\tif( data_in == 16'h0000 )\n\t\t\tbegin\n\t\t\t\tsleep_count = sleep_count + 1'b1;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tsleep = 1'b0;\n\t\t\t\tsleep_count = 12'h000;\n\t\t\tend\n\t\t\t\n\t\t\tif ( sleep_count == 12'h320 )\n\t\t\tbegin\n\t\t\t\tsleep = 1'b1;\n\t\t\t\tsleep_count = 12'h000;\n\t\t\tend\n\t\t\tw_done = 1'b1;\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tw_done = 1'b0;\n\tend\nend\n\nalways @ (rd_en or Start)\nbegin\n\tif(Start== 1'b1)\n\tbegin\n\t\tdata_out   = 16'h0000;\n\t\tdata_valid = 1'b0;\n\tend\n\telse if(rd_en== 1'b1)\n\tbegin\n\t\tdata_out = MEM [rd_addr];\n\t\t\n\t\tdata_valid = 1'b1;\t\n\tend\n\telse\n\tbegin\n\t\tdata_valid = 1'b0;\n\t\t\n\tend\nend\n\nendmodule\n\n\n\nmodule ALU \n(\nSclk, Reset, en, Start, sleep,\nRJ_en, rr_ptr, r_valid, rj_data_in,\nH_en, hr_ptr, h_valid, h_data_in, \nX_rd_en, xr_ptr, x_data_in, n, x_flagbit,\nvalid, prev_OutReady, y\n);\n\ninput Sclk, Reset, en, valid, Start, x_flagbit, sleep;\noutput reg prev_OutReady;\noutput reg [39:0] y;\n \ninput r_valid;\ninput [15:0] rj_data_in;\noutput reg RJ_en;\noutput reg [3:0] rr_ptr;\nreg [15:0] rj_data;\nreg [4:0] rr_ptr_buff;\nreg rj_read;\n\ninput h_valid;\ninput [15:0] h_data_in;\noutput reg H_en;\noutput reg [8:0] hr_ptr;\nreg [15:0] h_data;\nreg [8:0] hr_ptr_buff;\nreg [7:0] h_cntr;\nreg h_read, calc, h_finish, last_h, last_x;\n\n\ninput [15:0] x_data_in;\ninput [7:0] n;\noutput reg X_rd_en;\noutput reg [7:0] xr_ptr;\nreg [15:0] x_data;\n\nreg x_read, x_finish;\n\nreg [1:0] neg;\nreg h_sign ;\nreg [39:0] U ;\nreg [39:0] U_curr ;\n\n\n\n\n\n\nalways @ (posedge Sclk or negedge Reset or posedge Start or posedge valid)\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\tRJ_en = 1'b0;\n\t\trr_ptr = 4'h0;\n\t\trj_data = 16'h0000;\n\t\trj_read = 1'b0;\n\t\t\n\t\tH_en = 1'b0;\n\t\thr_ptr = 9'h000;\n\t\th_cntr = 8'h00;\n\t\th_data = 16'h0000;\n\t\th_read = 1'b0;\n\t\tcalc = 1'b0;\n\t\th_finish = 1'b0;\n\t\tlast_h = 1'b0;\n\t\t\n\t\tX_rd_en = 1'b0;\n\t\txr_ptr = 8'h00;\n\t\tx_read = 1'b0;\n\t\tx_data = 16'h0000;\n\t\tx_finish = 1'b0;\n\t\tlast_x = 1'b0;\n\t\t\n\t\tU = 40'h0000000000;\n\t\tU_curr = 40'h0000000000;\n\t\ty = 40'h0000000000;\n\t\tneg = 2'h0;\n\t\tprev_OutReady = 1'b0;\n\tend\n\telse if(Start== 1'b1)\n\tbegin\n\t\tRJ_en = 1'b0;\n\t\trr_ptr = 4'h0;\n\t\trj_data = 16'h0000;\n\t\trj_read = 1'b0;\n\t\t\n\t\tH_en = 1'b0;\n\t\thr_ptr = 9'h000;\n\t\th_cntr = 8'h00;\n\t\th_data = 16'h0000;\n\t\th_read = 1'b0;\n\t\tcalc = 1'b0;\n\t\th_finish = 1'b0;\n\t\tlast_h = 1'b0;\n\t\t\n\t\tX_rd_en = 1'b0;\n\t\txr_ptr = 8'h00;\n\t\tx_read = 1'b0;\n\t\tx_data = 16'h0000;\n\t\tx_finish = 1'b0;\n\t\tlast_x = 1'b0;\n\t\t\n\t\tU = 40'h0000000000;\n\t\tU_curr = 40'h0000000000;\n\t\ty = 40'h0000000000;\n\t\tneg = 2'h0;\n\t\tprev_OutReady = 1'b0;\n\tend\n\telse if(valid== 1'b1)\n\tbegin\n\t    RJ_en = 1'b0;\n\t\tH_en = 1'b0;\n\t\tX_rd_en = 1'b0; \n\tend\n\t\n\telse\n\tbegin\n\t\tif(en== 1'b1)\n\t\tbegin\n\t\t\tprev_OutReady = 1'b0;\n\t\t\tif(sleep== 1'b0)\n\t\t\tbegin\n\t\t\t\tif(x_read== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\tif(neg[1]== 1'b0)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tx_data = x_data_in;\n\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\tbegin\n\t\t\t\t\t\tx_data = 16'h0000; \n\t\t\t\t\tend\n\t\t\t\t\tx_read = 1'b0;\n\t\t\t\t\t\n\t\t\t\t\tif ( h_sign== 1'b0 )\n\t\t\t\t\tbegin\n\t\t\t\t\t\tU = U + {{8{x_data[15]}},x_data,{16{1'b0}}};\n\t\t\t\t\t\tU_curr = U_curr + {{8{x_data[15]}},x_data,{16{1'b0}}};\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\tbegin\n\t\t\t\t\t\tU = U - {{8{x_data[15]}},x_data,{16{1'b0}}};\n\t\t\t\t\t\tU_curr = U_curr - {{8{x_data[15]}},x_data,{16{1'b0}}};\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(x_finish== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tU = {U[39],U[39:1]};\n\t\t\t\t\tU_curr = {40{1'b0}};\n\t\t\t\t\tif(last_x == 1'b1)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tlast_x = 1'b0;\n\t\t\t\t\t\ty = U;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tprev_OutReady = 1'b1;\n\t\t\t\t\t\tcalc = 1'b0;\n\t\t\t\t\tend\n\t\t\t\t\tx_finish = 1'b0;\n\t\t\t\tend\n\t\t\n\t\t\t\tif(h_finish== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\tx_finish = 1'b1;\n\t\t\t\t\tif(last_h== 1'b1)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tlast_x = 1'b1;\n\t\t\t\t\tend\n\t\t\t\t\th_finish = 1'b0;\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(h_read== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\th_data = h_data_in;\n\t\t\t\t\t\n\t\t\t\t\th_read = 1'b0;\n\t\t\t\t\tcalc = 1'b1;\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(calc== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\t{neg,xr_ptr} = {x_flagbit, n} - h_data[7:0];\n\t\t\t\t\tif( neg[1]== 1'b0 )\n\t\t\t\t\tbegin\n\t\t\t\t\t\tX_rd_en = 1'b1;\n\t\t\t\t\t\t\n\t\t\t\t\tend\n\t\t\t\t\th_sign = h_data[8];\n\t\t\t\t\tx_read = 1'b1;\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(rj_read== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\trj_data = rj_data_in;\n\t\t\t\t\trj_read = 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif(h_cntr != rj_data)\n\t\t\t\tbegin\n\t\t\t\t\thr_ptr = hr_ptr_buff;\n\t\t\t\t\tH_en = 1'b1;\n\t\t\t\t\th_read = 1'b1;\n\t\t\t\t\th_cntr = h_cntr + 1'b1;\n\t\t\t\tend\n\t\n\t\t\t\tif(((h_cntr == rj_data) || (rr_ptr_buff == 4'h0)) && (last_h == 1'b0))\n\t\t\t\tbegin\n\t\t\t\t\tif(rr_ptr == 4'hf)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tlast_h = 1'b1;\n\t\t\t\t\t\th_finish = 1'b1;\n\t\t\t\t\t\trr_ptr = rr_ptr_buff;\n\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\tbegin\n\t\t\t\t\t\trr_ptr = rr_ptr_buff;\n\t\t\t\t\t\tif(rr_ptr != 1'b0)  \n\t\t\t\t\t\tbegin\n\t\t\t\t\t\t\th_finish = 1'b1;\n\t\t\t\t\t\tend\n\t\t\t\t\t\th_cntr = 8'h00;\n\t\t\t\t\t\tRJ_en = 1'b1;\n\t\t\t\t\t\trj_read = 1'b1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\telse\n\t\tbegin\n\t\t\tRJ_en = 1'b0;\n\t\t\trr_ptr = 4'h0;\n\t\t\trj_data = 16'h0000;\n\t\t\trj_read = 1'b0;\n\t\t\t\n\t\t\tH_en = 1'b0;\n\t\t\thr_ptr = 9'h000;\n\t\t\th_cntr = 8'h00;\n\t\t\th_data = 16'h0000;\n\t\t\th_read = 1'b0;\n\t\t\tcalc = 1'b0;\n\t\t\th_finish = 1'b0;\n\t\t\tlast_h = 1'b0;\n\t\t\t\n\t\t\tX_rd_en = 1'b0;\n\t\t\tx_read = 1'b0;\n\t\t\tx_data = 16'h0000;\n\t\t\tx_finish = 1'b0;\n\t\t\tlast_x = 1'b0;\n\t\t\t\n\t\t\tU = 40'h0000000000;\n\t\t\tU_curr = 40'h0000000000;\n\t\t\tneg = 2'h0;\n\t\tend\n\tend\nend\n\nalways @ (negedge Reset or posedge valid or posedge Start)\nbegin\n\tif (Reset == 1'b0)\n\tbegin\n\t\trr_ptr_buff = 4'h0;\n\t\thr_ptr_buff = 9'h000;\n\t\t\n\tend\n\telse if(Start== 1'b1)\n\tbegin\n\t\trr_ptr_buff = 4'h0;\n\t\thr_ptr_buff = 9'h000;\n\t\t\n\tend\n\telse\n\tbegin\n\t\tif (r_valid)\n\t\tbegin\n\t\t\trr_ptr_buff = rr_ptr + 1'b1;\n\t\tend\n\t\t\n\n\n\n\t\tif (h_valid)\n\t\tbegin\n\t\t\thr_ptr_buff = hr_ptr + 1'b1;\n\t\tend\n\t\t\n\tend\nend\nendmodule\n\n\n\n\nmodule PISO (en, Sclk, Start, data_in, word_sent, data_out);\n\ninput en, Sclk, Start;\ninput [39:0] data_in;\noutput reg word_sent, data_out;\nreg [5:0] ybt;\nreg [39:0] data;\n\nalways @ (posedge Sclk or posedge Start)\nbegin\n\tif(Start)\n\tbegin\n\t\tdata = 40'h0000000000;\n\t\tdata_out = 1'b0;\n\t\tybt = 6'h00;\n\t\tword_sent = 1'b0;\n\tend\n\telse \n\tbegin\n\t\tif(en)\n\t\tbegin\n\t\t\tdata = data_in;\n\t\t\tdata_out = data[ybt];\n\t\t\tybt = ybt + 1'b1;\n\t\t\tif(ybt == 6'h28)\n\t\t\tbegin\n\t\t\t\tword_sent = 1'b1;\n\t\t\t\tybt = 6'h00;\n\t\t\tend\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tword_sent = 1'b0;\n\t\tend\n\tend\nend\t\nendmodule\n\n\n\nmodule controller\n(\nReset, Frame, Frame_edg, Start, InReady, Sclk, OutReady, word_ready, \nRJ_enL, RJ_enR, RJ_rst, RJ_wrL, RJ_wrR, rw_ptr_L, rw_ptr_R,\nH_enL, H_enR, H_rst, H_wrL, H_wrR, hw_ptr_L, hw_ptr_R,\nX_wr_enL, X_wr_enR, X_rst, xw_ptr_L, xw_ptr_R, x_flagbit,\nsleep, done_L, done_R,\nALU_en, n, prev_OutReady,\nSIPO_rst, \nPISO_en, word_sent\n);\n\ninput Reset;\ninput Start;\ninput Sclk;\ninput word_ready, word_sent;\ninput Frame;\ninput done_L, done_R;\ninput sleep;\ninput prev_OutReady;\n\noutput reg Frame_edg;\noutput reg InReady;\noutput reg OutReady;\noutput reg SIPO_rst;\noutput reg ALU_en;\noutput reg PISO_en;\n\noutput reg RJ_enL, RJ_enR, RJ_rst, RJ_wrL, RJ_wrR;\noutput reg [3:0] rw_ptr_L, rw_ptr_R ;\nreg [3:0]  rw_ptr_buff_L, rw_ptr_buff_R;\nreg R_clr_stop_L, R_clr_stop_R;\n\noutput reg H_enL, H_enR, H_rst, H_wrL, H_wrR;\noutput reg [8:0] hw_ptr_L, hw_ptr_R;\nreg [8:0] hw_ptr_buff_L, hw_ptr_buff_R;\n\noutput reg X_rst, X_wr_enL, X_wr_enR;\noutput reg [7:0] xw_ptr_L, xw_ptr_R, n;\nreg [8:0] xw_ptr_buff_L, xw_ptr_buff_R;\nreg X_clr_stop_L, X_clr_stop_R;\n\noutput reg x_flagbit;\n\n\nreg [3:0] state;\nreg [3:0] next_state;\nparameter state0 = 4'h0;\nparameter state1 = 4'h1;\nparameter state2 = 4'h2;\nparameter state3 = 4'h3;\nparameter state4 = 4'h4;\nparameter state5 = 4'h5;\nparameter state6 = 4'h6;\nparameter state7 = 4'h7;\nparameter state8 = 4'h8;\n\n\n\n\nalways @ (state or Frame or word_ready or Reset or Start or prev_OutReady or word_sent or sleep)\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\tnext_state <= state7;\n\t\tFrame_edg <= 1'b0;\n\t\tOutReady = 1'b0;\n\t\tALU_en = 1'b0;\n\t\tPISO_en = 1'b0;\n\tend\n\telse if (Start== 1'b1)\n\tbegin\n\t\tALU_en = 1'b0;\n\t\tPISO_en = 1'b0;\n\t\tOutReady = 1'b0;\n\t\t\n\tend\n\telse\n\tbegin\n\t\tcase ( state )\n\t\t\tstate0:\n\t\t\tbegin\n\t\t\t\tif (R_clr_stop_L && R_clr_stop_R)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state0;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\t\n\t\t\tstate1:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state2;\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate2:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse if (word_ready)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state2;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate3:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state4;\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state3;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate4:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse if (word_ready)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state4;\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\t\tstate5:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state6;\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state5;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\t\tif (prev_OutReady)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tPISO_en = 1'b1;\n\t\t\t\t\t\tOutReady = 1'b1;\n\t\t\t\t\tend\n\t\t\t\t\tif( (|{x_flagbit,xw_ptr_buff_L}) )\n\t\t\t\t\tbegin\n\t\t\t\t\t\tALU_en = 1'b1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (word_ready)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse if (prev_OutReady)\n\t\t\t\tbegin\n\t\t\t\t\tALU_en = 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (word_sent)\n\t\t\t\tbegin\n\t\t\t\t\tPISO_en = 1'b0;\n\t\t\t\t\tOutReady = 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state6;\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\t\tstate7:\n\t\t\tbegin\n\t\t\t\tif(Reset)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state5;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\t\tif (prev_OutReady)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tPISO_en = 1'b1;\n\t\t\t\t\t\tOutReady = 1'b1;\n\t\t\t\t\tend\n\t\t\t\t\tALU_en = 1'b1;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (!sleep)\n\t\t\t\tbegin\n\t\t\t\t\tALU_en = 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (word_ready)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (word_sent)\n\t\t\t\tbegin\n\t\t\t\t\tPISO_en = 1'b0;\n\t\t\t\t\tOutReady = 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state8;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tdefault:\n\t\t\tbegin\n\t\t\t\tFrame_edg <= 1'b0;\n\t\t\t\tOutReady = 1'b0;\n\t\t\t\tALU_en = 1'b0;\n\t\t\t\tPISO_en = 1'b0;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nalways @ (posedge Start or posedge done_L or negedge Reset )\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\txw_ptr_buff_L = 9'h000;\n\t\tx_flagbit = 1'b0;\n\tend\n\t\n\telse if(Start== 1'b1)\n\tbegin\n\t\t{R_clr_stop_L,rw_ptr_buff_L} = 5'h00;\n\t\thw_ptr_buff_L = 9'h000;\n\t\t{X_clr_stop_L,xw_ptr_buff_L} = 9'h000;\n\t\tx_flagbit = 1'b0;\n\tend\n\telse\n\tbegin\n\t\tcase (next_state)\n\t\tstate0:\n\t\t\tbegin\n\t\t\t\tif(R_clr_stop_L == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t{R_clr_stop_L,rw_ptr_buff_L} =  rw_ptr_L + 1'b1;\n\t\t\t\tend\t\t\n\t\t\t\tif(X_clr_stop_L == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t{X_clr_stop_L,xw_ptr_buff_L[7:0]} =  xw_ptr_L + 1'b1;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\thw_ptr_buff_L  =  hw_ptr_L + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate1:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_L = 4'h0;\n\t\t\t\txw_ptr_buff_L = 9'h000;\n\t\t\t\thw_ptr_buff_L = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate2:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_L = rw_ptr_L + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate3:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_L = 4'h0;\n\t\t\tend\n\t\t\t\n\t\tstate4:\n\t\t\tbegin\n\t\t\t\thw_ptr_buff_L = hw_ptr_L + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate5:\n\t\t\tbegin\n\t\t\t\thw_ptr_buff_L = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif(sleep== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_L = 9'h0;\n\t\t\t\t\tx_flagbit = 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_L = xw_ptr_L + 1'b1;\n\t\t\t\t\tif(xw_ptr_buff_L == 9'h100)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tx_flagbit = 1'b1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tstate7:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_L = 4'h0;\n\t\t\t\txw_ptr_buff_L = 9'h000;\n\t\t\t\thw_ptr_buff_L = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif(sleep == 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_L = 9'h0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_L = 9'h001;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tdefault:\n\t\tbegin\n\t\t\trw_ptr_buff_L = 4'h0;\n\t\t\txw_ptr_buff_L = 9'h000;\n\t\t\thw_ptr_buff_L = 9'h000;\n\t\t\t R_clr_stop_L = 1'b0;\n\t\t\t X_clr_stop_L = 1'b0;\n\t\tend\n\t\tendcase\n\tend\nend\n\nalways @ (posedge Start or posedge done_R or negedge Reset )\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\txw_ptr_buff_R = 9'h000;\n\tend\n\t\n\telse if(Start)\n\tbegin\n\t\t{R_clr_stop_R,rw_ptr_buff_R} = 5'h0;\n\t\thw_ptr_buff_R = 9'h000;\n\t\t{X_clr_stop_R,xw_ptr_buff_R} = 9'h000;\n\tend\n\telse\n\tbegin\n\t\tcase (next_state)\n\t\tstate0:\n\t\t\tbegin\n\t\t\t\tif(R_clr_stop_R == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t{R_clr_stop_R,rw_ptr_buff_R} =  rw_ptr_R + 1'b1;\n\t\t\t\tend\t\t\n\t\t\t\tif(X_clr_stop_R == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t{X_clr_stop_R,xw_ptr_buff_R[7:0]} =  xw_ptr_R + 1'b1;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\thw_ptr_buff_R  =  hw_ptr_R + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate1:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_R = 4'h0;\n\t\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\t\thw_ptr_buff_R = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate2:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_R = rw_ptr_R + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate3:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_R = 4'h0;\n\t\t\tend\n\t\t\t\n\t\tstate4:\n\t\t\tbegin\n\t\t\t\thw_ptr_buff_R = hw_ptr_R + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate5:\n\t\t\tbegin\n\t\t\t\thw_ptr_buff_R = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif(sleep== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_R = xw_ptr_R + 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tstate7:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_R = 4'h0;\n\t\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\t\thw_ptr_buff_R = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif(sleep == 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_R = 9'h001;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tdefault:\n\t\tbegin\n\t\t\trw_ptr_buff_R = 4'h0;\n\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\thw_ptr_buff_R = 9'h000;\n\t\t\tR_clr_stop_R = 1'b0;\n\t\t\tX_clr_stop_R = 1'b0;\n\t\tend\n\t\tendcase\n\tend\nend\n\n\nalways @ (posedge Sclk or negedge Reset or posedge Start or posedge done_L )\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\tstate <= state7;\n\t\tInReady = 1'b0;\n\t\t\t n = 8'h00;\n\tend\n\telse if(Start== 1'b1)\n\tbegin\n\t\t RJ_enL = 1'b0;\n\t\t  H_enL = 1'b0;\n\t   X_wr_enL = 1'b0;\n\t\tRJ_rst = 1'b1;\n\t\t H_rst = 1'b1;\n\t\t X_rst = 1'b1;\n\t\trw_ptr_L = 4'h0;\n\t\thw_ptr_L = 9'h000;\n\t\txw_ptr_L = 8'h00;\n\t  SIPO_rst = 1'b1;\n\t\t\t n = 8'h00; \n\t\tstate <= state0;\n\tend\n\t\n\telse if (done_L== 1'b1)\n\tbegin\n\t\tRJ_enL = 1'b0;\n\t\t H_enL = 1'b0;\n\t\t X_wr_enL = 1'b0;\n\tend\n\n\telse\n\tbegin\n\t\tstate <= next_state;\n\t\tcase (next_state)\n\t\t\tstate0:\n\t\t\tbegin   \n\t\t\t\tSIPO_rst = 1'b0;\n\t\t\t\tif(R_clr_stop_L == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_L = rw_ptr_buff_L;\n\t\t\t\t\tRJ_enL = 1'b1;\n\t\t\t\tend\n\t\t\t\tif(X_clr_stop_L == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_L = xw_ptr_buff_L[7:0];\n\t\t\t\t\tX_wr_enL = 1'b1;\n\t\t\t\tend\n\t\t\t\thw_ptr_L = hw_ptr_buff_L;\n\t\t\t\tH_enL = 1'b1;\t\t\t\n\t\t\t\tif(hw_ptr_L == 9'h1FF)\n\t\t\t\tbegin\n\t\t\t\t\tstate <= state1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate1:\n\t\t\tbegin\t\n\t\t\t\trw_ptr_L      = 4'h0;\n\t\t\t\tInReady     = 1'b1;\n\t\t\t\tRJ_rst      = 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\tstate2:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_L = rw_ptr_buff_L;\n\t\t\t\t\tif(rw_ptr_L == 4'hF)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tstate <= state3;\n\t\t\t\t\tend\n\t\t\t\t\tRJ_wrL = 1'b1;\n\t\t\t\t\tRJ_enL = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate3:\n\t\t\tbegin\t\n\t\t\t\tRJ_wrL \t\t= 1'b0;\n\t\t\t\thw_ptr_L    = 9'h000;\n\t\t\t\tInReady     = 1'b1;\n\t\t\t\t H_rst      = 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\tstate4:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\thw_ptr_L = hw_ptr_buff_L;\n\t\t\t\t\tif(hw_ptr_L == 9'h1FF)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tstate <= state5;\n\t\t\t\t\tend\n\t\t\t\t\tH_wrL = 1'b1;\n\t\t\t\t\tH_enL = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate5:\n\t\t\tbegin\n\t\t\t\tH_wrL \t\t= 1'b0;\n\t\t\t\txw_ptr_L\t= 8'h00;\n\t\t\t\tInReady\t\t= 1'b1;\n\t\t\t\tX_rst\t\t= 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\t xw_ptr_L = xw_ptr_buff_L[7:0];\n\t\t\t\t\t\t  n = xw_ptr_L;\n\t\t\t\t\tX_wr_enL = 1'b1;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif(sleep)\n\t\t\t\tbegin\n\t\t\t\t\tstate <= state8;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate7:\n\t\t\tbegin\n\t\t\t\tInReady = 1'b0;\n\t\t\t\t\t n = 8'h00;\n\t\t\tend\n\t\t\t\n\t\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_L = 8'h0;\n\t\t\t\t\tX_wr_enL = 1'b1;\n\t\t\t\t\tn = xw_ptr_L; \n\t\t\t\tend\n\t\t\t\tif(sleep == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\tstate <= state6;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tdefault:\n\t\t\tbegin\n\t\t\t\tif (Start == 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_L = 4'h0;\n\t\t\t\t\thw_ptr_L = 9'h000;\n\t\t\t\t\txw_ptr_L = 8'h00;\n\t\t\t\t\tstate <= state0;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nalways @ (posedge Sclk or posedge Start or posedge done_R )\nbegin\n\tif(Start)\n\tbegin\n\t\t RJ_enR = 1'b0;\n\t\t  H_enR = 1'b0;\n\t   X_wr_enR = 1'b0;\n\t\trw_ptr_R = 4'h0;\n\t\thw_ptr_R = 9'h000;\n\t\txw_ptr_R = 8'h00;\n\t\t\n\tend\n\t\n\telse if (done_R)\n\tbegin\n\t\tRJ_enR = 1'b0;\n\t\t H_enR = 1'b0;\n\t\t X_wr_enR = 1'b0;\n\tend\n\n\telse\n\tbegin\n\t\tcase (next_state)\n\t\t\tstate0:\n\t\t\tbegin   \n\t\t\t\tif(R_clr_stop_R == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_R = rw_ptr_buff_R;\n\t\t\t\t\tRJ_enR = 1'b1;\n\t\t\t\tend\n\t\t\t\tif(X_clr_stop_R == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_R = xw_ptr_buff_R[7:0];\n\t\t\t\t\tX_wr_enR = 1'b1;\n\t\t\t\tend\n\t\t\t\thw_ptr_R = hw_ptr_buff_R;\n\t\t\t\tH_enR = 1'b1;\t\n\t\t\tend\n\t\t\t\n\t\t\tstate1:\n\t\t\tbegin\t\n\t\t\t\trw_ptr_R      = 4'h0;\n\t\t\tend\n\t\t\t\n\t\t\tstate2:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_R = rw_ptr_buff_R;\n\t\t\t\t\t\n\t\t\t\t\tRJ_wrR = 1'b1;\n\t\t\t\t\tRJ_enR = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate3:\n\t\t\tbegin\t\n\t\t\t\tRJ_wrR \t\t= 1'b0;\n\t\t\t\thw_ptr_R      = 9'h000;\n\t\t\tend\n\t\t\t\n\t\t\tstate4:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\thw_ptr_R = hw_ptr_buff_R;\n\t\t\t\t\tH_wrR = 1'b1;\n\t\t\t\t\tH_enR = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate5:\n\t\t\tbegin\n\t\t\t\tH_wrR \t\t= 1'b0;\n\t\t\t\txw_ptr_R\t\t= 8'h00;\n\t\t\tend\n\t\t\t\n\t\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\t xw_ptr_R = xw_ptr_buff_L[7:0];\n\t\t\t\t\tX_wr_enR = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate7:\n\t\t\tbegin\n\t\t\t\trw_ptr_R = 4'h0;\n\t\t\t\thw_ptr_R = 9'h000;\n\t\t\t\txw_ptr_R = 8'h00;\n\t\t\tend\n\t\t\t\n\t\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_R = 8'h00;\n\t\t\t\t\tX_wr_enR = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tdefault:\n\t\t\tbegin\n\t\t\t\tif (Start == 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_R = 4'h0;\n\t\t\t\t\thw_ptr_R = 9'h000;\n\t\t\t\t\txw_ptr_R = 8'h00;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: top_level. Module specification: The top_level module is a complex digital signal processing system that processes input data streams (InputL and InputR) and produces output data streams (OutputL and OutputR). It integrates various submodules including SIPO (Serial In Parallel Out), PISO (Parallel In Serial Out), memory blocks (RJmem, Hmem, Xmem), ALUs, and a controller. The module has input ports for system control (Reset, Frame, Dclk, Sclk, Start) and data input (InputL, InputR), and output ports for system status (InReady, OutReady) and processed data (OutputL, OutputR). Internally, it uses numerous signals (w1-w45) for interconnecting submodules, managing data flow, and control. The module is structured into several key sections: input data serialization ("
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: top_level\n\nExplanation: This module appears to be a top-level design for a digital signal processing system. It integrates various submodules including SIPO (Serial In Parallel Out), PISO (Parallel In Serial Out), memory blocks (RJmem, Hmem, Xmem), ALUs, and a controller. The system processes input data streams (InputL and InputR) through multiple stages of memory operations and arithmetic computations, ultimately producing output data streams (OutputL and OutputR). The controller manages the overall operation, coordinating data flow between different components and handling various control signals. The design seems to implement some form of audio or signal processing algorithm, likely involving filtering or transformation of the input data."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports: Reset, Frame, Dclk, Sclk, InReady, Start, InputL, InputR.\n\nExplanation:\n- Reset: System reset signal\n- Frame: Frame synchronization signal\n- Dclk: Data clock for input sampling\n- Sclk: System clock for internal operations\n- Start: Signal to initiate processing\n- InputL, InputR: Left and right channel input data streams\n\nOutput ports: InReady, OutReady, OutputL, OutputR.\n\nExplanation:\n- InReady: Indicates the system is ready to accept input data\n- OutReady: Indicates output data is available\n- OutputL, OutputR: Left and right channel output data streams after processing"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\nw1, w2, w3, w3L, w3R, w5L, w5R, w8L, w8R, w9, w12L, w12R, w13L, w13R, w16L, w16R, w17, w19L, w19R, w20L, w20R, w21, w22, w23L, w23R, w24L, w24R, w27L, w27R, w29, w29L, w29R, w30L, w30R, w31L, w31R, w32L, w32R, w33L, w33R, w34L, w34R, w35L, w35R, w36L, w36R, w37L, w37R, w38, w40, w40L, w40R, w42, w43, w43L, w43R, w45, w4L, w4R, w10L, w10R, w18L, w18R, w28L, w28R, w6L, w6R, w7L, w7R, w14L, w14R, w15L, w15R, w25L, w25R, w26L, w26R, w39, w41L, w41R.\n\nExplanation:\n- w1-w45: Various control and data signals interconnecting different submodules\n- w3L/R, w5L/R, w8L/R, etc.: Left and right channel specific signals\n- w4L/R, w10L/R, w18L/R, w28L/R: 16-bit data buses for different stages\n- w6L/R, w7L/R: 4-bit address buses\n- w14L/R, w15L/R: 9-bit address buses\n- w25L/R, w26L/R, w39: 8-bit data/address buses\n- w41L/R: 40-bit data buses for final output stage\n\nThese signals facilitate data flow, control, and synchronization between various submodules such as SIPO, PISO, memory blocks (RJ, H, X), ALUs, and the controller, implementing the overall signal processing algorithm."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>`timescale 1ns / 1ps\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule top_level (Reset, Frame, Dclk, Sclk, InReady, OutReady, Start, InputL, InputR, OutputL, OutputR);\n\ninput Frame, Reset, Sclk, Dclk, Start, InputL, InputR;\n\noutput InReady;\noutput OutReady;\n\noutput OutputL,OutputR;\n\nwire w1, w2, w3, w3L, w3R, w5L, w5R, w8L, w8R, w9,  w12L, w12R, w13L, \n\t w13R, w16L, w16R, w17, w19L, w19R, w20L, w20R, w21, w22, w23L, w23R, w24L, \n\t w24R, w27L, w27R, w29, w29L, w29R, w30L, w30R,  w31L, w31R, w32L, w32R, w33L, w33R, w34L, w34R, w35L, w35R, w36L, w36R, w37L, w37R, w38, \n\t w40, w40L, w40R, w42, w43, w43L, w43R,  w45 ;\nwire [15:0]w4L, w4R, w10L, w10R, w18L, w18R, w28L, w28R;\nwire [3:0]w6L, w6R, w7L,w7R;\nwire [8:0]w14L, w14R, w15L, w15R;\nwire [7:0]w25L, w25R, w26L, w26R, w39;\nwire [39:0] w41L, w41R;\n\nor2\t\tinst_RJ_en_L       (.a(w30L), .b(w31L), .out(w5L) );\nor2\t\tinst_RJ_en_R       (.a(w30R), .b(w31R), .out(w5R) );\nor2\t\tinst_H_en_L\t       (.a(w32L), .b(w33L), .out(w13L) );\nor2\t\tinst_H_en_R\t       (.a(w32R), .b(w33R), .out(w13R) );\nor3\t\tinst_Write_Done_L  (.a(w12L), .b(w19L), .c(w27L), .out(w20L) );\nor3\t\tinst_Write_Done_R  (.a(w12R), .b(w19R), .c(w27R), .out(w20R) );\nor3\t\tinst_data_valid_L  (.a(w34L), .b(w35L), .c(w36L), .out(w37L) );\nor3\t\tinst_data_valid_R  (.a(w34R), .b(w35R), .c(w36R), .out(w37R) );\nand2\tinst_word_ready    (.a(w3L),  .b(w3R),  .out(w3)  );\nand2\tinst_sleep \t\t   (.a(w29L), .b(w29R), .out(w29) );\nand2\tinst_prev_OutReady (.a(w40L), .b(w40R), .out(w40) );\nand2 \tinst_word_sent\t   (.a(w43L), .b(w43R), .out(w43));\n\t\t\t\nSIPO\tSIPO_L (.Frame_edg(w2), .Reset(Reset), .rst(w1), .Dclk(Dclk), .data_in(InputL), .word_ready(w3L), .data_out(w4L), .received(w20L) );\nSIPO\tSIPO_R (.Frame_edg(w2), .Reset(Reset), .rst(w1), .Dclk(Dclk), .data_in(InputR), .word_ready(w3R), .data_out(w4R), .received(w20R) );\n\nRJmem  \trLmem  (.Start(Start), .en(w5L), .rd_addr(w6L), .wr_addr(w7L), .wr(w8L), .rst(w9), .data_in(w4L), .data_out(w10L), .w_done(w12L), .data_valid(w36L) );\nRJmem  \trRmem  (.Start(Start), .en(w5R), .rd_addr(w6R), .wr_addr(w7R), .wr(w8R), .rst(w9), .data_in(w4R), .data_out(w10R), .w_done(w12R), .data_valid(w36R) );\n\nHmem  \thLmem  (.Start(Start), .en(w13L), .rd_addr(w14L), .wr_addr(w15L), .wr(w16L), .rst(w17), .data_in(w4L), .data_out(w18L), .w_done(w19L), .data_valid(w35L) );\nHmem  \thRmem  (.Start(Start), .en(w13R), .rd_addr(w14R), .wr_addr(w15R), .wr(w16R), .rst(w17), .data_in(w4R), .data_out(w18R), .w_done(w19R), .data_valid(w35R) );\n\nXmem\txLmem  (.Start(Start), .Reset(Reset), .rst(w22), .rd_en(w24L), .wr_en(w23L), .rd_addr(w26L), .wr_addr(w25L), .data_in(w4L), .data_out(w28L), .sleep(w29L), \n\t\t\t    .w_done(w27L), .data_valid(w34L) );\nXmem\txRmem  (.Start(Start), .Reset(Reset), .rst(w22), .rd_en(w24R), .wr_en(w23R), .rd_addr(w26R), .wr_addr(w25R), .data_in(w4R), .data_out(w28R), .sleep(w29R), \n\t\t\t    .w_done(w27R), .data_valid(w34R) );\n\nALU\t\tALU_L  (.Sclk(Sclk), .Reset(Reset), .en(w21), .Start(Start), .sleep(w29),\n\t\t\t\t.RJ_en(w31L), .rr_ptr(w6L), .r_valid(w36L), .rj_data_in(w10L),\n\t\t\t\t.H_en(w33L), .hr_ptr(w14L), .h_valid(w35L), .h_data_in(w18L), \n\t\t\t\t.X_rd_en(w24L), .xr_ptr(w26L),  .x_data_in(w28L), .x_flagbit(w38), .n(w39),\n\t\t\t\t.valid(w37L), .prev_OutReady(w40L), .y(w41L) );\n\nALU\t\tALU_R  (.Sclk(Sclk), .Reset(Reset), .en(w21), .Start(Start), .sleep(w29),\n\t\t\t\t.RJ_en(w31R), .rr_ptr(w6R), .r_valid(w36R), .rj_data_in(w10R),\n\t\t\t\t.H_en(w33R), .hr_ptr(w14R), .h_valid(w35R), .h_data_in(w18R), \n\t\t\t\t.X_rd_en(w24R), .xr_ptr(w26R),  .x_data_in(w28R), .x_flagbit(w38), .n(w39),\n\t\t\t\t.valid(w37R), .prev_OutReady(w40R), .y(w41R) );\t\t\t\t\n\t\t\t\t\nPISO\tPISO_L (.en(w42), .Sclk(Sclk), .Start(Start), .data_in(w41L), .word_sent(w43L), .data_out(OutputL) );\nPISO\tPISO_R (.en(w42), .Sclk(Sclk), .Start(Start), .data_in(w41R), .word_sent(w43R), .data_out(OutputR) );\n\ncontroller CU  (.Reset(Reset), .Frame(Frame), .Frame_edg(w2), .Start(Start), .InReady(InReady), .OutReady(OutReady), .Sclk(Sclk), .word_ready(w3), \n\t\t\t\t.RJ_enL(w30L), .RJ_enR(w30R), .RJ_rst(w9), .RJ_wrL(w8L), .RJ_wrR(w8R), .rw_ptr_L(w7L), .rw_ptr_R(w7R),\n\t\t\t\t.H_enL(w32L), .H_enR(w32R), .H_rst(w17), .H_wrL(w16L), .H_wrR(w16R), .hw_ptr_L(w15L), .hw_ptr_R(w15R),\n\t\t\t\t.X_rst(w22), .X_wr_enL(w23L), .X_wr_enR(w23R), .xw_ptr_L(w25L), .xw_ptr_R(w25R), .x_flagbit(w38),\n\t\t\t\t.ALU_en(w21), .n(w39), .prev_OutReady(w40),\n\t\t\t\t.PISO_en(w42), .word_sent(w43),\n\t\t\t\t.SIPO_rst(w1), .sleep(w29), .done_L(w20L), .done_R(w20R) );\n\n\n\n\n\n\nendmodule\n\nmodule or3(a,b,c,out);\ninput a, b, c;\noutput out;\n\nassign out = a | b | c;\n\nendmodule\n\nmodule or2(a,b,out);\ninput a, b;\noutput out;\n\nassign out = a | b;\n\nendmodule\n\nmodule and2(a,b,out);\ninput a, b;\noutput out;\n\nassign out = a & b;\n\nendmodule\n\n\n\nmodule SIPO (Frame_edg, rst, Reset, Dclk, data_in, word_ready, data_out, received);\ninput Frame_edg, Reset, Dclk, data_in, rst, received;\noutput reg word_ready;\noutput reg [15:0] data_out;\nreg [3:0] bt;\n\nalways @ (negedge Dclk or posedge rst or posedge received or negedge Reset)\nbegin\n\tif( Reset == 1'b0 )\n\tbegin\n\t\tbt         <= 4'h0;\n\t\tdata_out   <= 16'h0000;\n\t\tword_ready <= 1'b0;\n\tend\n\telse if( rst )\n\tbegin\n\t\tbt         <= 4'h0;\n\t\tdata_out   <= 16'h0000;\n\t\tword_ready <= 1'b0;\n\tend\n\telse if(received == 1'b1)\n\tbegin\n\t\tif(word_ready== 1'b1)\n\t\tbegin\n\t\t\tword_ready <= 1'b0;\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tif (Frame_edg == 1'b1)\n\t\tbegin\n\t\t\tif (bt == 4'h0)\n\t\t\tbegin\n\t\t\t\tword_ready <= 1'b0;\n\t\t\tend\n\t\t\tdata_out [bt]   <= data_in;\n\t\t\t{word_ready,bt} <= bt + 1'b1;\n\t\tend\n\t\t\n\t\telse\n\t\tbegin\n\t\t\tword_ready <= 1'b0;\n\t\t\tbt \t\t   <= 4'h0;\n\t\tend\n\tend\nend\nendmodule\n\n\n\nmodule RJmem (en, Start, rd_addr, wr_addr, wr, rst, data_in, data_out, w_done, data_valid );\ninput en, rst, wr, Start;\ninput [3:0] wr_addr, rd_addr;\ninput [15:0] data_in;\noutput reg w_done;\noutput reg data_valid;\noutput reg [15:0] data_out;\nreg [15:0] MEM [15:0];\n\nalways @ (en or Start)\nbegin\n\tif (Start== 1'b1)\n\tbegin\n\t\tdata_out   = 16'h0000;\n\t\tw_done     = 1'b0;\n\t\tdata_valid = 1'b0;\n\tend\n\t\n\telse if(en== 1'b1)\n\tbegin\n\t\tif (rst== 1'b1)\n\t\tbegin\n\t\t\tMEM [wr_addr] = 16'h0000;\n\t\t\t\n\t\t\tw_done = 1'b1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tif (wr== 1'b1)\n\t\t\tbegin\n\t\t\t\tMEM [wr_addr] = data_in[15:0];\n\t\t\t\t\n\t\t\t\tw_done = 1'b1;\n\t\t\tend\n\t\t\t\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tdata_out = MEM [rd_addr];\n\t\t\t\t\n\t\t\t\tdata_valid = 1'b1;\n\t\t\tend\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tw_done = 1'b0;\n\t\tdata_valid = 1'b0;\n\t\t\n\tend\nend\n\nendmodule\n\n\nmodule Hmem (en, Start, rd_addr, wr_addr, wr, rst, data_in, data_out, w_done, data_valid );\n\ninput en, rst, wr, Start;\ninput [8:0] wr_addr, rd_addr;\ninput [15:0] data_in;\noutput reg w_done;\noutput reg data_valid;\noutput reg [15:0] data_out;\nreg [15:0] MEM [511:0];\n\nalways @ (Start or en)\nbegin\n\tif(Start== 1'b1)\n\tbegin\n\t\tw_done = 1'b0;\n\t\tdata_valid = 1'b0;\n\t\tdata_out = 16'h0000;\n\tend\n\t\n\telse if(en== 1'b1)\n\tbegin\n\t\tif (rst== 1'b1)\n\t\tbegin\n\t\t\tMEM [wr_addr] = 16'h0000;\n\t\t\t\n\t\t\tw_done = 1'b1;\n\t\tend\n\t\t\n\t\telse\n\t\tbegin\n\t\t\tif (wr== 1'b1)\n\t\t\tbegin\n\t\t\t\tMEM [wr_addr] = data_in[15:0];\n\t\t\t\t\n\t\t\t\tw_done = 1'b1;\n\t\t\tend\n\t\t\t\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tdata_out = MEM [rd_addr];\n\t\t\t\t\n\t\t\t\tdata_valid = 1'b1;\n\t\t\tend\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tw_done = 1'b0;\n\t\tdata_valid = 1'b0;\n\t\t\n\tend\nend\n\nendmodule\n\n\n\nmodule Xmem (Start, Reset, rst, rd_addr, wr_addr, wr_en, rd_en, data_in, data_out, sleep, w_done, data_valid);\n\ninput Start, Reset,wr_en, rd_en, rst;\ninput [7:0] rd_addr, wr_addr;\ninput [15:0] data_in;\noutput reg w_done, sleep, data_valid;\noutput reg [15:0] data_out;\n\nreg [15:0] MEM [255:0];\nreg [11:0] sleep_count;\n\nalways @ (wr_en or Reset or Start)\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\tsleep \t\t= 1'b0;\n\t\tsleep_count = 12'h0;\n\tend\n\t\n\telse if(Start== 1'b1)\n\tbegin\n\t\tw_done \t\t= 1'b0;\n\t\tsleep  \t\t= 1'b0;\n\t\tsleep_count = 12'h000;\n\tend\n\t\n\telse  if(wr_en== 1'b1)\n\tbegin\n\t\tif(rst== 1'b1)\n\t\tbegin\n\t\t\tMEM [wr_addr] = 16'h0000;\n\t\t\tw_done = 1'b1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tMEM [wr_addr] = data_in;\n\t\t\t\n\t\t\tif( data_in == 16'h0000 )\n\t\t\tbegin\n\t\t\t\tsleep_count = sleep_count + 1'b1;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tsleep = 1'b0;\n\t\t\t\tsleep_count = 12'h000;\n\t\t\tend\n\t\t\t\n\t\t\tif ( sleep_count == 12'h320 )\n\t\t\tbegin\n\t\t\t\tsleep = 1'b1;\n\t\t\t\tsleep_count = 12'h000;\n\t\t\tend\n\t\t\tw_done = 1'b1;\n\t\tend\n\tend\n\telse\n\tbegin\n\t\tw_done = 1'b0;\n\tend\nend\n\nalways @ (rd_en or Start)\nbegin\n\tif(Start== 1'b1)\n\tbegin\n\t\tdata_out   = 16'h0000;\n\t\tdata_valid = 1'b0;\n\tend\n\telse if(rd_en== 1'b1)\n\tbegin\n\t\tdata_out = MEM [rd_addr];\n\t\t\n\t\tdata_valid = 1'b1;\t\n\tend\n\telse\n\tbegin\n\t\tdata_valid = 1'b0;\n\t\t\n\tend\nend\n\nendmodule\n\n\n\nmodule ALU \n(\nSclk, Reset, en, Start, sleep,\nRJ_en, rr_ptr, r_valid, rj_data_in,\nH_en, hr_ptr, h_valid, h_data_in, \nX_rd_en, xr_ptr, x_data_in, n, x_flagbit,\nvalid, prev_OutReady, y\n);\n\ninput Sclk, Reset, en, valid, Start, x_flagbit, sleep;\noutput reg prev_OutReady;\noutput reg [39:0] y;\n \ninput r_valid;\ninput [15:0] rj_data_in;\noutput reg RJ_en;\noutput reg [3:0] rr_ptr;\nreg [15:0] rj_data;\nreg [4:0] rr_ptr_buff;\nreg rj_read;\n\ninput h_valid;\ninput [15:0] h_data_in;\noutput reg H_en;\noutput reg [8:0] hr_ptr;\nreg [15:0] h_data;\nreg [8:0] hr_ptr_buff;\nreg [7:0] h_cntr;\nreg h_read, calc, h_finish, last_h, last_x;\n\n\ninput [15:0] x_data_in;\ninput [7:0] n;\noutput reg X_rd_en;\noutput reg [7:0] xr_ptr;\nreg [15:0] x_data;\n\nreg x_read, x_finish;\n\nreg [1:0] neg;\nreg h_sign ;\nreg [39:0] U ;\nreg [39:0] U_curr ;\n\n\n\n\n\n\nalways @ (posedge Sclk or negedge Reset or posedge Start or posedge valid)\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\tRJ_en = 1'b0;\n\t\trr_ptr = 4'h0;\n\t\trj_data = 16'h0000;\n\t\trj_read = 1'b0;\n\t\t\n\t\tH_en = 1'b0;\n\t\thr_ptr = 9'h000;\n\t\th_cntr = 8'h00;\n\t\th_data = 16'h0000;\n\t\th_read = 1'b0;\n\t\tcalc = 1'b0;\n\t\th_finish = 1'b0;\n\t\tlast_h = 1'b0;\n\t\t\n\t\tX_rd_en = 1'b0;\n\t\txr_ptr = 8'h00;\n\t\tx_read = 1'b0;\n\t\tx_data = 16'h0000;\n\t\tx_finish = 1'b0;\n\t\tlast_x = 1'b0;\n\t\t\n\t\tU = 40'h0000000000;\n\t\tU_curr = 40'h0000000000;\n\t\ty = 40'h0000000000;\n\t\tneg = 2'h0;\n\t\tprev_OutReady = 1'b0;\n\tend\n\telse if(Start== 1'b1)\n\tbegin\n\t\tRJ_en = 1'b0;\n\t\trr_ptr = 4'h0;\n\t\trj_data = 16'h0000;\n\t\trj_read = 1'b0;\n\t\t\n\t\tH_en = 1'b0;\n\t\thr_ptr = 9'h000;\n\t\th_cntr = 8'h00;\n\t\th_data = 16'h0000;\n\t\th_read = 1'b0;\n\t\tcalc = 1'b0;\n\t\th_finish = 1'b0;\n\t\tlast_h = 1'b0;\n\t\t\n\t\tX_rd_en = 1'b0;\n\t\txr_ptr = 8'h00;\n\t\tx_read = 1'b0;\n\t\tx_data = 16'h0000;\n\t\tx_finish = 1'b0;\n\t\tlast_x = 1'b0;\n\t\t\n\t\tU = 40'h0000000000;\n\t\tU_curr = 40'h0000000000;\n\t\ty = 40'h0000000000;\n\t\tneg = 2'h0;\n\t\tprev_OutReady = 1'b0;\n\tend\n\telse if(valid== 1'b1)\n\tbegin\n\t    RJ_en = 1'b0;\n\t\tH_en = 1'b0;\n\t\tX_rd_en = 1'b0; \n\tend\n\t\n\telse\n\tbegin\n\t\tif(en== 1'b1)\n\t\tbegin\n\t\t\tprev_OutReady = 1'b0;\n\t\t\tif(sleep== 1'b0)\n\t\t\tbegin\n\t\t\t\tif(x_read== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\tif(neg[1]== 1'b0)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tx_data = x_data_in;\n\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\tbegin\n\t\t\t\t\t\tx_data = 16'h0000; \n\t\t\t\t\tend\n\t\t\t\t\tx_read = 1'b0;\n\t\t\t\t\t\n\t\t\t\t\tif ( h_sign== 1'b0 )\n\t\t\t\t\tbegin\n\t\t\t\t\t\tU = U + {{8{x_data[15]}},x_data,{16{1'b0}}};\n\t\t\t\t\t\tU_curr = U_curr + {{8{x_data[15]}},x_data,{16{1'b0}}};\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\tbegin\n\t\t\t\t\t\tU = U - {{8{x_data[15]}},x_data,{16{1'b0}}};\n\t\t\t\t\t\tU_curr = U_curr - {{8{x_data[15]}},x_data,{16{1'b0}}};\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(x_finish== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tU = {U[39],U[39:1]};\n\t\t\t\t\tU_curr = {40{1'b0}};\n\t\t\t\t\tif(last_x == 1'b1)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tlast_x = 1'b0;\n\t\t\t\t\t\ty = U;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tprev_OutReady = 1'b1;\n\t\t\t\t\t\tcalc = 1'b0;\n\t\t\t\t\tend\n\t\t\t\t\tx_finish = 1'b0;\n\t\t\t\tend\n\t\t\n\t\t\t\tif(h_finish== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\tx_finish = 1'b1;\n\t\t\t\t\tif(last_h== 1'b1)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tlast_x = 1'b1;\n\t\t\t\t\tend\n\t\t\t\t\th_finish = 1'b0;\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(h_read== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\th_data = h_data_in;\n\t\t\t\t\t\n\t\t\t\t\th_read = 1'b0;\n\t\t\t\t\tcalc = 1'b1;\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(calc== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\t{neg,xr_ptr} = {x_flagbit, n} - h_data[7:0];\n\t\t\t\t\tif( neg[1]== 1'b0 )\n\t\t\t\t\tbegin\n\t\t\t\t\t\tX_rd_en = 1'b1;\n\t\t\t\t\t\t\n\t\t\t\t\tend\n\t\t\t\t\th_sign = h_data[8];\n\t\t\t\t\tx_read = 1'b1;\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(rj_read== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\trj_data = rj_data_in;\n\t\t\t\t\trj_read = 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif(h_cntr != rj_data)\n\t\t\t\tbegin\n\t\t\t\t\thr_ptr = hr_ptr_buff;\n\t\t\t\t\tH_en = 1'b1;\n\t\t\t\t\th_read = 1'b1;\n\t\t\t\t\th_cntr = h_cntr + 1'b1;\n\t\t\t\tend\n\t\n\t\t\t\tif(((h_cntr == rj_data) || (rr_ptr_buff == 4'h0)) && (last_h == 1'b0))\n\t\t\t\tbegin\n\t\t\t\t\tif(rr_ptr == 4'hf)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tlast_h = 1'b1;\n\t\t\t\t\t\th_finish = 1'b1;\n\t\t\t\t\t\trr_ptr = rr_ptr_buff;\n\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\tbegin\n\t\t\t\t\t\trr_ptr = rr_ptr_buff;\n\t\t\t\t\t\tif(rr_ptr != 1'b0)  \n\t\t\t\t\t\tbegin\n\t\t\t\t\t\t\th_finish = 1'b1;\n\t\t\t\t\t\tend\n\t\t\t\t\t\th_cntr = 8'h00;\n\t\t\t\t\t\tRJ_en = 1'b1;\n\t\t\t\t\t\trj_read = 1'b1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\telse\n\t\tbegin\n\t\t\tRJ_en = 1'b0;\n\t\t\trr_ptr = 4'h0;\n\t\t\trj_data = 16'h0000;\n\t\t\trj_read = 1'b0;\n\t\t\t\n\t\t\tH_en = 1'b0;\n\t\t\thr_ptr = 9'h000;\n\t\t\th_cntr = 8'h00;\n\t\t\th_data = 16'h0000;\n\t\t\th_read = 1'b0;\n\t\t\tcalc = 1'b0;\n\t\t\th_finish = 1'b0;\n\t\t\tlast_h = 1'b0;\n\t\t\t\n\t\t\tX_rd_en = 1'b0;\n\t\t\tx_read = 1'b0;\n\t\t\tx_data = 16'h0000;\n\t\t\tx_finish = 1'b0;\n\t\t\tlast_x = 1'b0;\n\t\t\t\n\t\t\tU = 40'h0000000000;\n\t\t\tU_curr = 40'h0000000000;\n\t\t\tneg = 2'h0;\n\t\tend\n\tend\nend\n\nalways @ (negedge Reset or posedge valid or posedge Start)\nbegin\n\tif (Reset == 1'b0)\n\tbegin\n\t\trr_ptr_buff = 4'h0;\n\t\thr_ptr_buff = 9'h000;\n\t\t\n\tend\n\telse if(Start== 1'b1)\n\tbegin\n\t\trr_ptr_buff = 4'h0;\n\t\thr_ptr_buff = 9'h000;\n\t\t\n\tend\n\telse\n\tbegin\n\t\tif (r_valid)\n\t\tbegin\n\t\t\trr_ptr_buff = rr_ptr + 1'b1;\n\t\tend\n\t\t\n\n\n\n\t\tif (h_valid)\n\t\tbegin\n\t\t\thr_ptr_buff = hr_ptr + 1'b1;\n\t\tend\n\t\t\n\tend\nend\nendmodule\n\n\n\n\nmodule PISO (en, Sclk, Start, data_in, word_sent, data_out);\n\ninput en, Sclk, Start;\ninput [39:0] data_in;\noutput reg word_sent, data_out;\nreg [5:0] ybt;\nreg [39:0] data;\n\nalways @ (posedge Sclk or posedge Start)\nbegin\n\tif(Start)\n\tbegin\n\t\tdata = 40'h0000000000;\n\t\tdata_out = 1'b0;\n\t\tybt = 6'h00;\n\t\tword_sent = 1'b0;\n\tend\n\telse \n\tbegin\n\t\tif(en)\n\t\tbegin\n\t\t\tdata = data_in;\n\t\t\tdata_out = data[ybt];\n\t\t\tybt = ybt + 1'b1;\n\t\t\tif(ybt == 6'h28)\n\t\t\tbegin\n\t\t\t\tword_sent = 1'b1;\n\t\t\t\tybt = 6'h00;\n\t\t\tend\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tword_sent = 1'b0;\n\t\tend\n\tend\nend\t\nendmodule\n\n\n\nmodule controller\n(\nReset, Frame, Frame_edg, Start, InReady, Sclk, OutReady, word_ready, \nRJ_enL, RJ_enR, RJ_rst, RJ_wrL, RJ_wrR, rw_ptr_L, rw_ptr_R,\nH_enL, H_enR, H_rst, H_wrL, H_wrR, hw_ptr_L, hw_ptr_R,\nX_wr_enL, X_wr_enR, X_rst, xw_ptr_L, xw_ptr_R, x_flagbit,\nsleep, done_L, done_R,\nALU_en, n, prev_OutReady,\nSIPO_rst, \nPISO_en, word_sent\n);\n\ninput Reset;\ninput Start;\ninput Sclk;\ninput word_ready, word_sent;\ninput Frame;\ninput done_L, done_R;\ninput sleep;\ninput prev_OutReady;\n\noutput reg Frame_edg;\noutput reg InReady;\noutput reg OutReady;\noutput reg SIPO_rst;\noutput reg ALU_en;\noutput reg PISO_en;\n\noutput reg RJ_enL, RJ_enR, RJ_rst, RJ_wrL, RJ_wrR;\noutput reg [3:0] rw_ptr_L, rw_ptr_R ;\nreg [3:0]  rw_ptr_buff_L, rw_ptr_buff_R;\nreg R_clr_stop_L, R_clr_stop_R;\n\noutput reg H_enL, H_enR, H_rst, H_wrL, H_wrR;\noutput reg [8:0] hw_ptr_L, hw_ptr_R;\nreg [8:0] hw_ptr_buff_L, hw_ptr_buff_R;\n\noutput reg X_rst, X_wr_enL, X_wr_enR;\noutput reg [7:0] xw_ptr_L, xw_ptr_R, n;\nreg [8:0] xw_ptr_buff_L, xw_ptr_buff_R;\nreg X_clr_stop_L, X_clr_stop_R;\n\noutput reg x_flagbit;\n\n\nreg [3:0] state;\nreg [3:0] next_state;\nparameter state0 = 4'h0;\nparameter state1 = 4'h1;\nparameter state2 = 4'h2;\nparameter state3 = 4'h3;\nparameter state4 = 4'h4;\nparameter state5 = 4'h5;\nparameter state6 = 4'h6;\nparameter state7 = 4'h7;\nparameter state8 = 4'h8;\n\n\n\n\nalways @ (state or Frame or word_ready or Reset or Start or prev_OutReady or word_sent or sleep)\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\tnext_state <= state7;\n\t\tFrame_edg <= 1'b0;\n\t\tOutReady = 1'b0;\n\t\tALU_en = 1'b0;\n\t\tPISO_en = 1'b0;\n\tend\n\telse if (Start== 1'b1)\n\tbegin\n\t\tALU_en = 1'b0;\n\t\tPISO_en = 1'b0;\n\t\tOutReady = 1'b0;\n\t\t\n\tend\n\telse\n\tbegin\n\t\tcase ( state )\n\t\t\tstate0:\n\t\t\tbegin\n\t\t\t\tif (R_clr_stop_L && R_clr_stop_R)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state0;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\t\n\t\t\tstate1:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state2;\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate2:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse if (word_ready)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state2;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate3:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state4;\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state3;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate4:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse if (word_ready)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state4;\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\t\tstate5:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state6;\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state5;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\t\tif (prev_OutReady)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tPISO_en = 1'b1;\n\t\t\t\t\t\tOutReady = 1'b1;\n\t\t\t\t\tend\n\t\t\t\t\tif( (|{x_flagbit,xw_ptr_buff_L}) )\n\t\t\t\t\tbegin\n\t\t\t\t\t\tALU_en = 1'b1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (word_ready)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse if (prev_OutReady)\n\t\t\t\tbegin\n\t\t\t\t\tALU_en = 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (word_sent)\n\t\t\t\tbegin\n\t\t\t\t\tPISO_en = 1'b0;\n\t\t\t\t\tOutReady = 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state6;\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\t\tstate7:\n\t\t\tbegin\n\t\t\t\tif(Reset)\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state5;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif (Frame)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b1;\n\t\t\t\t\tif (prev_OutReady)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tPISO_en = 1'b1;\n\t\t\t\t\t\tOutReady = 1'b1;\n\t\t\t\t\tend\n\t\t\t\t\tALU_en = 1'b1;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (!sleep)\n\t\t\t\tbegin\n\t\t\t\t\tALU_en = 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (word_ready)\n\t\t\t\tbegin\n\t\t\t\t\tFrame_edg  <= 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if (word_sent)\n\t\t\t\tbegin\n\t\t\t\t\tPISO_en = 1'b0;\n\t\t\t\t\tOutReady = 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tnext_state <= state8;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tdefault:\n\t\t\tbegin\n\t\t\t\tFrame_edg <= 1'b0;\n\t\t\t\tOutReady = 1'b0;\n\t\t\t\tALU_en = 1'b0;\n\t\t\t\tPISO_en = 1'b0;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nalways @ (posedge Start or posedge done_L or negedge Reset )\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\txw_ptr_buff_L = 9'h000;\n\t\tx_flagbit = 1'b0;\n\tend\n\t\n\telse if(Start== 1'b1)\n\tbegin\n\t\t{R_clr_stop_L,rw_ptr_buff_L} = 5'h00;\n\t\thw_ptr_buff_L = 9'h000;\n\t\t{X_clr_stop_L,xw_ptr_buff_L} = 9'h000;\n\t\tx_flagbit = 1'b0;\n\tend\n\telse\n\tbegin\n\t\tcase (next_state)\n\t\tstate0:\n\t\t\tbegin\n\t\t\t\tif(R_clr_stop_L == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t{R_clr_stop_L,rw_ptr_buff_L} =  rw_ptr_L + 1'b1;\n\t\t\t\tend\t\t\n\t\t\t\tif(X_clr_stop_L == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t{X_clr_stop_L,xw_ptr_buff_L[7:0]} =  xw_ptr_L + 1'b1;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\thw_ptr_buff_L  =  hw_ptr_L + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate1:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_L = 4'h0;\n\t\t\t\txw_ptr_buff_L = 9'h000;\n\t\t\t\thw_ptr_buff_L = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate2:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_L = rw_ptr_L + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate3:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_L = 4'h0;\n\t\t\tend\n\t\t\t\n\t\tstate4:\n\t\t\tbegin\n\t\t\t\thw_ptr_buff_L = hw_ptr_L + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate5:\n\t\t\tbegin\n\t\t\t\thw_ptr_buff_L = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif(sleep== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_L = 9'h0;\n\t\t\t\t\tx_flagbit = 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_L = xw_ptr_L + 1'b1;\n\t\t\t\t\tif(xw_ptr_buff_L == 9'h100)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tx_flagbit = 1'b1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tstate7:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_L = 4'h0;\n\t\t\t\txw_ptr_buff_L = 9'h000;\n\t\t\t\thw_ptr_buff_L = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif(sleep == 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_L = 9'h0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_L = 9'h001;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tdefault:\n\t\tbegin\n\t\t\trw_ptr_buff_L = 4'h0;\n\t\t\txw_ptr_buff_L = 9'h000;\n\t\t\thw_ptr_buff_L = 9'h000;\n\t\t\t R_clr_stop_L = 1'b0;\n\t\t\t X_clr_stop_L = 1'b0;\n\t\tend\n\t\tendcase\n\tend\nend\n\nalways @ (posedge Start or posedge done_R or negedge Reset )\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\txw_ptr_buff_R = 9'h000;\n\tend\n\t\n\telse if(Start)\n\tbegin\n\t\t{R_clr_stop_R,rw_ptr_buff_R} = 5'h0;\n\t\thw_ptr_buff_R = 9'h000;\n\t\t{X_clr_stop_R,xw_ptr_buff_R} = 9'h000;\n\tend\n\telse\n\tbegin\n\t\tcase (next_state)\n\t\tstate0:\n\t\t\tbegin\n\t\t\t\tif(R_clr_stop_R == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t{R_clr_stop_R,rw_ptr_buff_R} =  rw_ptr_R + 1'b1;\n\t\t\t\tend\t\t\n\t\t\t\tif(X_clr_stop_R == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t{X_clr_stop_R,xw_ptr_buff_R[7:0]} =  xw_ptr_R + 1'b1;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\thw_ptr_buff_R  =  hw_ptr_R + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate1:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_R = 4'h0;\n\t\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\t\thw_ptr_buff_R = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate2:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_R = rw_ptr_R + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate3:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_R = 4'h0;\n\t\t\tend\n\t\t\t\n\t\tstate4:\n\t\t\tbegin\n\t\t\t\thw_ptr_buff_R = hw_ptr_R + 1'b1;\n\t\t\tend\n\t\t\t\n\t\tstate5:\n\t\t\tbegin\n\t\t\t\thw_ptr_buff_R = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif(sleep== 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_R = xw_ptr_R + 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tstate7:\n\t\t\tbegin\n\t\t\t\trw_ptr_buff_R = 4'h0;\n\t\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\t\thw_ptr_buff_R = 9'h000;\n\t\t\tend\n\t\t\t\n\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif(sleep == 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_buff_R = 9'h001;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tdefault:\n\t\tbegin\n\t\t\trw_ptr_buff_R = 4'h0;\n\t\t\txw_ptr_buff_R = 9'h000;\n\t\t\thw_ptr_buff_R = 9'h000;\n\t\t\tR_clr_stop_R = 1'b0;\n\t\t\tX_clr_stop_R = 1'b0;\n\t\tend\n\t\tendcase\n\tend\nend\n\n\nalways @ (posedge Sclk or negedge Reset or posedge Start or posedge done_L )\nbegin\n\tif(Reset == 1'b0)\n\tbegin\n\t\tstate <= state7;\n\t\tInReady = 1'b0;\n\t\t\t n = 8'h00;\n\tend\n\telse if(Start== 1'b1)\n\tbegin\n\t\t RJ_enL = 1'b0;\n\t\t  H_enL = 1'b0;\n\t   X_wr_enL = 1'b0;\n\t\tRJ_rst = 1'b1;\n\t\t H_rst = 1'b1;\n\t\t X_rst = 1'b1;\n\t\trw_ptr_L = 4'h0;\n\t\thw_ptr_L = 9'h000;\n\t\txw_ptr_L = 8'h00;\n\t  SIPO_rst = 1'b1;\n\t\t\t n = 8'h00; \n\t\tstate <= state0;\n\tend\n\t\n\telse if (done_L== 1'b1)\n\tbegin\n\t\tRJ_enL = 1'b0;\n\t\t H_enL = 1'b0;\n\t\t X_wr_enL = 1'b0;\n\tend\n\n\telse\n\tbegin\n\t\tstate <= next_state;\n\t\tcase (next_state)\n\t\t\tstate0:\n\t\t\tbegin   \n\t\t\t\tSIPO_rst = 1'b0;\n\t\t\t\tif(R_clr_stop_L == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_L = rw_ptr_buff_L;\n\t\t\t\t\tRJ_enL = 1'b1;\n\t\t\t\tend\n\t\t\t\tif(X_clr_stop_L == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_L = xw_ptr_buff_L[7:0];\n\t\t\t\t\tX_wr_enL = 1'b1;\n\t\t\t\tend\n\t\t\t\thw_ptr_L = hw_ptr_buff_L;\n\t\t\t\tH_enL = 1'b1;\t\t\t\n\t\t\t\tif(hw_ptr_L == 9'h1FF)\n\t\t\t\tbegin\n\t\t\t\t\tstate <= state1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate1:\n\t\t\tbegin\t\n\t\t\t\trw_ptr_L      = 4'h0;\n\t\t\t\tInReady     = 1'b1;\n\t\t\t\tRJ_rst      = 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\tstate2:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_L = rw_ptr_buff_L;\n\t\t\t\t\tif(rw_ptr_L == 4'hF)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tstate <= state3;\n\t\t\t\t\tend\n\t\t\t\t\tRJ_wrL = 1'b1;\n\t\t\t\t\tRJ_enL = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate3:\n\t\t\tbegin\t\n\t\t\t\tRJ_wrL \t\t= 1'b0;\n\t\t\t\thw_ptr_L    = 9'h000;\n\t\t\t\tInReady     = 1'b1;\n\t\t\t\t H_rst      = 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\tstate4:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\thw_ptr_L = hw_ptr_buff_L;\n\t\t\t\t\tif(hw_ptr_L == 9'h1FF)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tstate <= state5;\n\t\t\t\t\tend\n\t\t\t\t\tH_wrL = 1'b1;\n\t\t\t\t\tH_enL = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate5:\n\t\t\tbegin\n\t\t\t\tH_wrL \t\t= 1'b0;\n\t\t\t\txw_ptr_L\t= 8'h00;\n\t\t\t\tInReady\t\t= 1'b1;\n\t\t\t\tX_rst\t\t= 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\t xw_ptr_L = xw_ptr_buff_L[7:0];\n\t\t\t\t\t\t  n = xw_ptr_L;\n\t\t\t\t\tX_wr_enL = 1'b1;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif(sleep)\n\t\t\t\tbegin\n\t\t\t\t\tstate <= state8;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate7:\n\t\t\tbegin\n\t\t\t\tInReady = 1'b0;\n\t\t\t\t\t n = 8'h00;\n\t\t\tend\n\t\t\t\n\t\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_L = 8'h0;\n\t\t\t\t\tX_wr_enL = 1'b1;\n\t\t\t\t\tn = xw_ptr_L; \n\t\t\t\tend\n\t\t\t\tif(sleep == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\tstate <= state6;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tdefault:\n\t\t\tbegin\n\t\t\t\tif (Start == 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_L = 4'h0;\n\t\t\t\t\thw_ptr_L = 9'h000;\n\t\t\t\t\txw_ptr_L = 8'h00;\n\t\t\t\t\tstate <= state0;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nalways @ (posedge Sclk or posedge Start or posedge done_R )\nbegin\n\tif(Start)\n\tbegin\n\t\t RJ_enR = 1'b0;\n\t\t  H_enR = 1'b0;\n\t   X_wr_enR = 1'b0;\n\t\trw_ptr_R = 4'h0;\n\t\thw_ptr_R = 9'h000;\n\t\txw_ptr_R = 8'h00;\n\t\t\n\tend\n\t\n\telse if (done_R)\n\tbegin\n\t\tRJ_enR = 1'b0;\n\t\t H_enR = 1'b0;\n\t\t X_wr_enR = 1'b0;\n\tend\n\n\telse\n\tbegin\n\t\tcase (next_state)\n\t\t\tstate0:\n\t\t\tbegin   \n\t\t\t\tif(R_clr_stop_R == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_R = rw_ptr_buff_R;\n\t\t\t\t\tRJ_enR = 1'b1;\n\t\t\t\tend\n\t\t\t\tif(X_clr_stop_R == 1'b0)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_R = xw_ptr_buff_R[7:0];\n\t\t\t\t\tX_wr_enR = 1'b1;\n\t\t\t\tend\n\t\t\t\thw_ptr_R = hw_ptr_buff_R;\n\t\t\t\tH_enR = 1'b1;\t\n\t\t\tend\n\t\t\t\n\t\t\tstate1:\n\t\t\tbegin\t\n\t\t\t\trw_ptr_R      = 4'h0;\n\t\t\tend\n\t\t\t\n\t\t\tstate2:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_R = rw_ptr_buff_R;\n\t\t\t\t\t\n\t\t\t\t\tRJ_wrR = 1'b1;\n\t\t\t\t\tRJ_enR = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate3:\n\t\t\tbegin\t\n\t\t\t\tRJ_wrR \t\t= 1'b0;\n\t\t\t\thw_ptr_R      = 9'h000;\n\t\t\tend\n\t\t\t\n\t\t\tstate4:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\thw_ptr_R = hw_ptr_buff_R;\n\t\t\t\t\tH_wrR = 1'b1;\n\t\t\t\t\tH_enR = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate5:\n\t\t\tbegin\n\t\t\t\tH_wrR \t\t= 1'b0;\n\t\t\t\txw_ptr_R\t\t= 8'h00;\n\t\t\tend\n\t\t\t\n\t\t\tstate6:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\t xw_ptr_R = xw_ptr_buff_L[7:0];\n\t\t\t\t\tX_wr_enR = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tstate7:\n\t\t\tbegin\n\t\t\t\trw_ptr_R = 4'h0;\n\t\t\t\thw_ptr_R = 9'h000;\n\t\t\t\txw_ptr_R = 8'h00;\n\t\t\tend\n\t\t\t\n\t\t\tstate8:\n\t\t\tbegin\n\t\t\t\tif(word_ready)\n\t\t\t\tbegin\n\t\t\t\t\txw_ptr_R = 8'h00;\n\t\t\t\t\tX_wr_enR = 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tdefault:\n\t\t\tbegin\n\t\t\t\tif (Start == 1'b1)\n\t\t\t\tbegin\n\t\t\t\t\trw_ptr_R = 4'h0;\n\t\t\t\t\thw_ptr_R = 9'h000;\n\t\t\t\t\txw_ptr_R = 8'h00;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: top_level. Module specification: The top_level module is a complex digital signal processing system that processes input data streams (InputL and InputR) and produces output data streams (OutputL and OutputR). It integrates various submodules including SIPO (Serial In Parallel Out), PISO (Parallel In Serial Out), memory blocks (RJmem, Hmem, Xmem), ALUs, and a controller. The module has input ports for system control (Reset, Frame, Dclk, Sclk, Start) and data input (InputL, InputR), and output ports for system status (InReady, OutReady) and processed data (OutputL, OutputR). Internally, it uses numerous signals (w1-w45) for interconnecting submodules, managing data flow, and control. The module is structured into several key sections: input data serialization ("
                }
            ]
        }
    ]
}