{
    "spec": "Module name: controller. Module specification: The controller module is a complex state machine that manages the operation of a digital signal processing system. It handles input/output operations, memory access, and ALU operations for left and right channels, likely in a stereo audio processing application. The module has inputs for reset, start, clock, data ready signals, and completion flags, and outputs for various control signals and memory pointers. Key inputs include reset, start, sClk, w_Ready, word_Sent, frame, done_L, done_R, sleep, and prev_OutReady. Important outputs are frame_Edg, inReady, outReady, ALU_En, serial_Output_En, and various enable, reset, and pointer signals for different memory components. Internal signals include state registers, pointer buffers, and clear/stop flags for managing the state machine and memory operations. The module is organized into several always blocks that",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: controller\n\nExplanation: This module appears to be a complex controller for a digital signal processing system. It manages various operations and data flow between different components, including input/output handling, memory access, and ALU operations. The controller uses a state machine to sequence operations, handles timing with clock signals, manages memory read/write operations, and controls data flow between different parts of the system. It also handles reset and start conditions, and coordinates the processing of left and right channel data in what seems to be a stereo audio processing application."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nreset, start, sClk, w_Ready, word_Sent, frame, done_L, done_R, sleep, prev_OutReady\n\nExplanation:\n- reset: System reset signal\n- start: Initiates the controller's operation\n- sClk: System clock input\n- w_Ready: Indicates when data is ready to be written\n- word_Sent: Signals completion of word transmission\n- frame: Frame synchronization signal\n- done_L, done_R: Completion signals for left and right channel processing\n- sleep: Puts the system in low-power mode\n- prev_OutReady: Previous output ready signal\n\nOutput ports:\nframe_Edg, inReady, outReady, parallel_Input_Rst, ALU_En, serial_Output_En, rj_EnL, rj_EnR, rj_Rst, rj_WrL, rj_WrR, rw_Ptr_L, rw_Ptr_R, h_EnL, h_EnR, h_Rst, h_WrL, h_WrR, hw_Ptr_L, hw_Ptr_R, x_Rst, x_Wr_EnL, x_Wr_EnR, xw_Ptr_L, xw_Ptr_R, n, x_FlagBit\n\nExplanation:\n- frame_Edg: Frame edge detection signal\n- inReady, outReady: Input and output ready flags\n- parallel_Input_Rst: Reset signal for parallel input\n- ALU_En: ALU enable signal\n- serial_Output_En: Enables serial output\n- rj_EnL, rj_EnR, h_EnL, h_EnR: Enable signals for left and right channel memory operations\n- rj_Rst, h_Rst, x_Rst: Reset signals for different memory components\n- rj_WrL, rj_WrR, h_WrL, h_WrR, x_Wr_EnL, x_Wr_EnR: Write enable signals for various memory components\n- rw_Ptr_L, rw_Ptr_R, hw_Ptr_L, hw_Ptr_R, xw_Ptr_L, xw_Ptr_R: Memory address pointers\n- n: Counter or index value\n- x_FlagBit: Flag bit for specific conditions in x memory operations"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\nstate, next_State, rw_Ptr_Buff_L, rw_Ptr_Buff_R, r_Clr_Stop_L, r_Clr_Stop_R, hw_Ptr_Buff_L, hw_Ptr_Buff_R, xw_Ptr_Buff_L, xw_Ptr_Buff_R, x_Clr_Stop_L, x_Clr_Stop_R\n\nExplanation:\n1. state, next_State: These signals represent the current and next states of the controller's state machine, controlling the overall operation sequence.\n\n2. rw_Ptr_Buff_L, rw_Ptr_Buff_R: Buffers for the read/write pointers for left and right channels, used to temporarily store and manipulate pointer values.\n\n3. r_Clr_Stop_L, r_Clr_Stop_R: Clear and stop signals for the left and right channel read operations, controlling when to stop incrementing read pointers.\n\n4. hw_Ptr_Buff_L, hw_Ptr_Buff_R: Buffers for the h-memory write pointers for left and right channels, used to temporarily store and manipulate pointer values.\n\n5. xw_Ptr_Buff_L, xw_Ptr_Buff_R: Buffers for the x-memory write pointers for left and right channels, used to temporarily store and manipulate pointer values.\n\n6. x_Clr_Stop_L, x_Clr_Stop_R: Clear and stop signals for the left and right channel x-memory operations, controlling when to stop incrementing x-memory pointers.\n\nThese internal signals are crucial for managing the state transitions, memory operations, and pointer manipulations within the controller module."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n`timescale 1ns / 1ps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`include serial_Input.sv\n`include rj_Memory.sv\n`include coefficient_Memory.sv\n`include input_Memory.sv\n`include ALU.sv\n`include serial_Output.sv\n\nmodule MSDAP(\n    input reset,\n    input frame,\n    input dClk,\n    input sClk,\n    input start,\n    input inputL,\n    input inputR,\n    output inReady,\n    output outReady,\n    output outputL,\n    output outputR\n    );\n    \n    \n\nwire \t \t    m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13;\n\nwire \t\t    n1L, n1R, n2L, n2R, n3L, n3R, n4L, n4R, n5L, n5R, n6L, n6R, n7L, n7R, n8L, n8R, n9L, n9R, n10L, n10R, n11L, n11R, n12L, n12R, \n\t\t        n13L, n13R,  n14L, n14R, n15L, n15R, n16L, n16R, n17L, n17R, n18L, n18R, n19L, n19R, n20L, n20R, n21L, n21R, n22L, n22R;\n\nwire    [15:0]\to1L , o1R, o2L, o2R, o3L, o3R, o4L, o4R;\n\nwire    [3:0]\to5L, o5R, o6L, o6R;\n\nwire    [8:0]\to7L, o7R, o8L, o8R;\n\nwire    [7:0]\to9L, o9R, o10L, o10R, p_Slp;\n\nwire    [39:0] \to11L, o11R;\n\n\nassign n2L  = (n13L | n14L);\t\t\t\nassign n2R  = (n13R | n14R);\t\t\t\nassign n5L  = (n15L | n16L);\t\t\t\nassign n5R  = (n15R | n16R);\t\t\t\n\nassign n8L  = (n4L | n7L | n11L);\t\t\nassign n8R  = (n4R | n7R | n11R);\t\t\nassign n20L = (n17L | n18L | n19L);\t\t\nassign n20R = (n17R | n18R | n19R);\t\t\n\nassign m3   = (n1L & n1R);\t\t\t    \nassign m7   = (n12L & n12R);\t\t\t\nassign m12  = (n21L & n21R);\t\t\t\nassign m10  = (n22L & n22R);\t\t\t\n\n\nserial_Input\tserial_Input_L (.frame_Edg(m2), .reset(reset), .cntrl_rst(m1), .dClk(dClk), .data_In(inputL), .w_Ready (n1L), .data_Out(o1L ), .ack(n8L) );\n\nserial_Input\tserial_Input_R (.frame_Edg(m2), .reset(reset), .cntrl_rst(m1), .dClk(dClk), .data_In(inputR), .w_Ready(n1R), .data_Out(o1R), .ack(n8R) );\n\n\nrj_Memory  \trj_Mem_L  (.start(start), .en(n2L), .rd_Addr(o5L), .wr_Addr(o6L), .wr(n3L), .cntrl_rst(m4), .data_In(o1L ), .data_Out(o2L), .w_Done(n4L), .data_Valid(n19L) );\n\nrj_Memory  \trj_Mem_R  (.start(start), .en(n2R), .rd_Addr(o5R), .wr_Addr(o6R), .wr(n3R), .cntrl_rst(m4), .data_In(o1R), .data_Out(o2R), .w_Done(n4R), .data_Valid(n19R) );\n\n\ncoeffecient_Memory  \tcoeffL_Mem  (.start(start), .en(n5L), .rd_Addr(o7L), .wr_Addr(o8L), .wr(n6L), .cntrl_rst(m11), .data_In(o1L ), .data_Out(o3L), .w_Done(n7L), .data_Valid(n18L) );\n\ncoeffecient_Memory  \tcoeffR_Mem  (.start(start), .en(n5R), .rd_Addr(o7R), .wr_Addr(o8R), .wr(n6R), .cntrl_rst(m11), .data_In(o1R), .data_Out(o3R), .w_Done(n7R), .data_Valid(n18R) );\n\n\ninput_Memory\tinputL_mem  (.sClk(sClk), .start(start), .reset(reset), .cntrl_rst(m6), .rd_En(n10L), .wr_En(n9L), .rd_Addr(o10L), .wr_Addr(o9L), .data_In(o1L ), .data_Out(o4L), .sleep(n12L),\n\t\t\t     .w_Done(n11L), .data_Valid(n17L) );\n\ninput_Memory\tinputR_mem  (.sClk(sClk), .start(start), .reset(reset), .cntrl_rst(m6), .rd_En(n10R), .wr_En(n9R), .rd_Addr(o10R), .wr_Addr(o9R), .data_In(o1R), .data_Out(o4R), .sleep(n12R),\n\t\t\t     .w_Done(n11R), .data_Valid(n17R) );\n\n\nALU\t\t ALU_L  (.sClk(sClk), .reset(reset), .en(m5), .start(start), .sleep(m7), .rj_En(n14L), .rr_Ptr(o5L), .r_Valid(n19L), .rj_Data_In(o2L), .h_En(n16L), .hr_Ptr(o7L),\n\t\t\t .h_Valid(n18L),\t.h_Data_In(o3L), .x_Rd_En(n10L), .xr_Ptr(o10L), .x_Data_In(o4L), .x_FlagBit(m8), .n(p_Slp), .valid(n20L), .prev_OutReady(n21L), .y(o11L) \n\t\t\t);\n\n\nALU\t\tALU_R  (.sClk(sClk), .reset(reset), .en(m5), .start(start), .sleep(m7),.rj_En(n14R), .rr_Ptr(o5R), .r_Valid(n19R), .rj_Data_In(o2R),.h_En(n16R), .hr_Ptr(o7R),\n\t\t\t.h_Valid(n18R), .h_Data_In(o3R), .x_Rd_En(n10R), .xr_Ptr(o10R), .x_Data_In(o4R), .x_FlagBit(m8), .n(p_Slp), .valid(n20R), .prev_OutReady(n21R), .y(o11R) \n\t\t       );\n\n\nserial_Output\t\tserial_Output_L (.en(m9), .sClk(sClk), .start(start), .data_In(o11L), .word_Sent(n22L), .data_Out(outputL) );\n\nserial_Output\t\tserial_Output_R (.en(m9), .sClk(sClk), .start(start), .data_In(o11R), .word_Sent(n22R), .data_Out(outputR) );\n\n\ncontroller \tControl (.reset(reset), .frame(frame), .frame_Edg(m2), .start(start), .inReady(inReady), .outReady(outReady), .sClk(sClk), .w_Ready(m3), .rj_EnL(n13L),\n\t\t\t .rj_EnR(n13R), .rj_Rst(m4), .rj_WrL(n3L), .rj_WrR(n3R), .rw_Ptr_L(o6L), .rw_Ptr_R(o6R), .h_EnL(n15L), .h_EnR(n15R), .h_Rst(m11), .h_WrL(n6L),\n\t\t\t .h_WrR(n6R), .hw_Ptr_L(o8L), .hw_Ptr_R(o8R), .x_Rst(m6), .x_Wr_EnL(n9L), .x_Wr_EnR(n9R), .xw_Ptr_L(o9L), .xw_Ptr_R(o9R), .x_FlagBit(m8),\n\t\t\t .ALU_En(m5), .n(p_Slp), .prev_OutReady(m12), .serial_Output_En(m9), .word_Sent(m10), .parallel_Input_Rst(m1), .sleep(m7), .done_L(n8L), .done_R(n8R) \n\t\t\t);\n\n    \nendmodule\n\n\n`timescale 1ns / 1ps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule controller(\n    input reset,\n    input start,\n    input sClk,\n    input w_Ready,\n    input word_Sent,\n    input frame,\n    input done_L,\n    input done_R,\n    input sleep,\n    input prev_OutReady,\n    output reg frame_Edg,\n    output reg inReady,\n    output reg outReady,\n    output reg parallel_Input_Rst,\n    output reg ALU_En,\n    output reg serial_Output_En,\n    output reg rj_EnL,\n    output reg rj_EnR,\n    output reg rj_Rst,\n    output reg rj_WrL,\n    output reg rj_WrR,\n    output reg [3:0] rw_Ptr_L,\n    output reg [3:0] rw_Ptr_R ,\n    output reg h_EnL,\n    output reg h_EnR,\n    output reg h_Rst,\n    output reg h_WrL,\n    output reg h_WrR,\n    output reg [8:0] hw_Ptr_L, \n    output reg [8:0] hw_Ptr_R,\n    output reg x_Rst,\n    output reg x_Wr_EnL,\n    output reg x_Wr_EnR,\n    output reg [7:0] xw_Ptr_L,\n    output reg [7:0] xw_Ptr_R,\n    output reg [7:0] n,\n    output reg x_FlagBit\n    );\n\nreg [3:0]  rw_Ptr_Buff_L, rw_Ptr_Buff_R;\n\nreg r_Clr_Stop_L, r_Clr_Stop_R;\n\nreg [8:0] hw_Ptr_Buff_L, hw_Ptr_Buff_R;\n\nreg [8:0] xw_Ptr_Buff_L, xw_Ptr_Buff_R;\n\nreg x_Clr_Stop_L, x_Clr_Stop_R;\n\nreg [3:0] state;\n\nreg [3:0] next_State;\n\nparameter state0 = 4'h0;\n\nparameter state1 = 4'h1;\n\nparameter state2 = 4'h2;\n\nparameter state3 = 4'h3;\n\nparameter state4 = 4'h4;\n\nparameter state5 = 4'h5;\n\nparameter state6 = 4'h6;\n\nparameter state7 = 4'h7;\n\nparameter state8 = 4'h8;\n\n\nalways @ (posedge start or posedge done_L or negedge reset )\n\nbegin\n\n\tif(reset == 1'b0)\n\n\tbegin\n\n\t\txw_Ptr_Buff_L = 9'h000;\n\n\t\tx_FlagBit = 1'b0;\n\n\tend\n\n\t\n\n\telse if(start== 1'b1)\n\n\tbegin\n\n\t\t{r_Clr_Stop_L,rw_Ptr_Buff_L} = 5'h00;\n\n\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t{x_Clr_Stop_L,xw_Ptr_Buff_L} = 9'h000;\n\n\t\tx_FlagBit = 1'b0;\n\n\tend\n\n\telse\n\n\tbegin\n\n\t\tcase (next_State)\n\n\t\tstate0:\n\n\t\t\tbegin\n\n\t\t\t\tif(r_Clr_Stop_L == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t{r_Clr_Stop_L,rw_Ptr_Buff_L} =  rw_Ptr_L + 1'b1;\n\n\t\t\t\tend\t\t\n\n\t\t\t\tif(x_Clr_Stop_L == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t{x_Clr_Stop_L,xw_Ptr_Buff_L[7:0]} =  xw_Ptr_L + 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\thw_Ptr_Buff_L  =  hw_Ptr_L + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate1:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_L = 4'h0;\n\n\t\t\t\txw_Ptr_Buff_L = 9'h000;\n\n\t\t\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_L = rw_Ptr_L + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate3:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_L = 4'h0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\thw_Ptr_Buff_L = hw_Ptr_L + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif(sleep== 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_L = 9'h0;\n\n\t\t\t\t\tx_FlagBit = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_L = xw_Ptr_L + 1'b1;\n\n\t\t\t\t\tif(xw_Ptr_Buff_L == 9'h100)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tx_FlagBit = 1'b1;\n\n\t\t\t\t\tend\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_L = 4'h0;\n\n\t\t\t\txw_Ptr_Buff_L = 9'h000;\n\n\t\t\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif(sleep == 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_L = 9'h0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_L = 9'h001;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\tdefault:\n\n\t\tbegin\n\n\t\t\trw_Ptr_Buff_L = 4'h0;\n\n\t\t\txw_Ptr_Buff_L = 9'h000;\n\n\t\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t\t r_Clr_Stop_L = 1'b0;\n\n\t\t\t x_Clr_Stop_L = 1'b0;\n\n\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n\n\nalways @ (state or frame or w_Ready or reset or start or prev_OutReady or word_Sent or sleep)\n\nbegin\n\n\tif(reset == 1'b0)\n\n\tbegin\n\n\t\tnext_State <= state7;\n\n\t\tframe_Edg <= 1'b0;\n\n\t\toutReady = 1'b0;\n\n\t\tALU_En = 1'b0;\n\n\t\tserial_Output_En = 1'b0;\n\n\tend\n\n\telse if (start== 1'b1)\n\n\tbegin\n\n\t\tALU_En = 1'b0;\n\n\t\tserial_Output_En = 1'b0;\n\n\t\toutReady = 1'b0;\n\n\tend\n\n\telse\n\n\tbegin\n\n\t\tcase ( state )\n\n\t\t\tstate0:\n\n\t\t\tbegin\n\n\t\t\t\tif (r_Clr_Stop_L && r_Clr_Stop_R)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state1;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state0;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\t\n\n\t\t\tstate1:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state2;\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse if (w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state2;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate3:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state4;\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state3;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse if (w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state4;\n\n\t\t\t\tend\n\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state6;\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state5;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\t\tif (prev_OutReady)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tserial_Output_En = 1'b1;\n\n\t\t\t\t\t\toutReady = 1'b1;\n\n\t\t\t\t\tend\n\n\t\t\t\t\tif( (|{x_FlagBit,xw_Ptr_Buff_L}) )\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tALU_En = 1'b1;\n\n\t\t\t\t\tend\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse if (prev_OutReady)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tALU_En = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (word_Sent)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tserial_Output_En = 1'b0;\n\n\t\t\t\t\toutReady = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state6;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\tif(reset)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state5;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\t\tif (prev_OutReady)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tserial_Output_En = 1'b1;\n\n\t\t\t\t\t\toutReady = 1'b1;\n\n\t\t\t\t\tend\n\n\t\t\t\t\tALU_En = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (!sleep)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tALU_En = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (word_Sent)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tserial_Output_En = 1'b0;\n\n\t\t\t\t\toutReady = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state8;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tdefault:\n\n\t\t\tbegin\n\n\t\t\t\tframe_Edg <= 1'b0;\n\n\t\t\t\toutReady = 1'b0;\n\n\t\t\t\tALU_En = 1'b0;\n\n\t\t\t\tserial_Output_En = 1'b0;\n\n\t\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n\n\nalways @ (posedge sClk or negedge reset or posedge start or posedge done_L )\n\nbegin\n\n\tif(reset == 1'b0)\n\n\tbegin\n\n\t\tstate <= state7;\n\n\t\tinReady = 1'b0;\n\n\t\tn = 8'h00;\n\n\tend\n\n\telse if(start== 1'b1)\n\n\tbegin\n\n\t\trj_EnL = 1'b0;\n\n\t\th_EnL = 1'b0;\n\n\t\tx_Wr_EnL = 1'b0;\n\n\t\trj_Rst = 1'b1;\n\n\t\th_Rst = 1'b1;\n\n\t\tx_Rst = 1'b1;\n\n\t\trw_Ptr_L = 4'h0;\n\n\t\thw_Ptr_L = 9'h000;\n\n\t\txw_Ptr_L = 8'h00;\n\n\t\tparallel_Input_Rst = 1'b1;\n\n\t\tn = 8'h00; \n\n\t\tstate <= state0;\n\n\tend\n\n\t\n\n\telse if (done_L== 1'b1)\n\n\tbegin\n\n\t\trj_EnL = 1'b0;\n\n\t\t h_EnL = 1'b0;\n\n\t\t x_Wr_EnL = 1'b0;\n\n\tend\n\n\n\n\telse\n\n\tbegin\n\n\t\tstate <= next_State;\n\n\t\tcase (next_State)\n\n\t\t\tstate0:\n\n\t\t\tbegin   \n\n\t\t\t\tparallel_Input_Rst = 1'b0;\n\n\t\t\t\tif(r_Clr_Stop_L == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_L = rw_Ptr_Buff_L;\n\n\t\t\t\t\trj_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\tif(x_Clr_Stop_L == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_L = xw_Ptr_Buff_L[7:0];\n\n\t\t\t\t\tx_Wr_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\thw_Ptr_L = hw_Ptr_Buff_L;\n\n\t\t\t\th_EnL = 1'b1;\t\t\t\n\n\t\t\t\tif(hw_Ptr_L == 9'h1FF)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tstate <= state1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate1:\n\n\t\t\tbegin\t\n\n\t\t\t\trw_Ptr_L      = 4'h0;\n\n\t\t\t\tinReady     = 1'b1;\n\n\t\t\t\trj_Rst      = 1'b0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_L = rw_Ptr_Buff_L;\n\n\t\t\t\t\tif(rw_Ptr_L == 4'hF)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tstate <= state3;\n\n\t\t\t\t\tend\n\n\t\t\t\t\trj_WrL = 1'b1;\n\n\t\t\t\t\trj_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate3:\n\n\t\t\tbegin\t\n\n\t\t\t\trj_WrL \t\t= 1'b0;\n\n\t\t\t\thw_Ptr_L    = 9'h000;\n\n\t\t\t\tinReady     = 1'b1;\n\n\t\t\t\t h_Rst      = 1'b0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\thw_Ptr_L = hw_Ptr_Buff_L;\n\n\t\t\t\t\tif(hw_Ptr_L == 9'h1FF)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tstate <= state5;\n\n\t\t\t\t\tend\n\n\t\t\t\t\th_WrL = 1'b1;\n\n\t\t\t\t\th_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\th_WrL \t\t= 1'b0;\n\n\t\t\t\txw_Ptr_L\t= 8'h00;\n\n\t\t\t\tinReady\t\t= 1'b1;\n\n\t\t\t\tx_Rst\t\t= 1'b0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t xw_Ptr_L = xw_Ptr_Buff_L[7:0];\n\n\t\t\t\t\t\t  n = xw_Ptr_L;\n\n\t\t\t\t\tx_Wr_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\tif(sleep)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tstate <= state8;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\tinReady = 1'b0;\n\n\t\t\t\t\t n = 8'h00;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_L = 8'h0;\n\n\t\t\t\t\tx_Wr_EnL = 1'b1;\n\n\t\t\t\t\tn = xw_Ptr_L; \n\n\t\t\t\tend\n\n\t\t\t\tif(sleep == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tstate <= state6;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tdefault:\n\n\t\t\tbegin\n\n\t\t\t\tif (start == 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_L = 4'h0;\n\n\t\t\t\t\thw_Ptr_L = 9'h000;\n\n\t\t\t\t\txw_Ptr_L = 8'h00;\n\n\t\t\t\t\tstate <= state0;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n\n\nalways @ (posedge start or posedge done_R or negedge reset )\nbegin\n\n\tif(reset == 1'b0)\n\n\tbegin\n\n\t\txw_Ptr_Buff_R = 9'h000;\n\n\tend\n\n\t\n\n\telse if(start)\n\n\tbegin\n\n\t\t{r_Clr_Stop_R,rw_Ptr_Buff_R} = 5'h0;\n\n\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t{x_Clr_Stop_R,xw_Ptr_Buff_R} = 9'h000;\n\n\tend\n\n\telse\n\n\tbegin\n\n\t\tcase (next_State)\n\n\t\tstate0:\n\n\t\t\tbegin\n\n\t\t\t\tif(r_Clr_Stop_R == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t{r_Clr_Stop_R,rw_Ptr_Buff_R} =  rw_Ptr_R + 1'b1;\n\n\t\t\t\tend\t\t\n\n\t\t\t\tif(x_Clr_Stop_R == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t{x_Clr_Stop_R,xw_Ptr_Buff_R[7:0]} =  xw_Ptr_R + 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\thw_Ptr_Buff_R  =  hw_Ptr_R + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate1:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_R = 4'h0;\n\n\t\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_R = rw_Ptr_R + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate3:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_R = 4'h0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\thw_Ptr_Buff_R = hw_Ptr_R + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif(sleep== 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_R = xw_Ptr_R + 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_R = 4'h0;\n\n\t\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif(sleep == 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_R = 9'h001;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\tdefault:\n\n\t\tbegin\n\n\t\t\trw_Ptr_Buff_R = 4'h0;\n\n\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t\tr_Clr_Stop_R = 1'b0;\n\n\t\t\tx_Clr_Stop_R = 1'b0;\n\n\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n\nalways @ (posedge sClk or posedge start or posedge done_R )\n\nbegin\n\n\tif(start)\n\n\tbegin\n\n\t\t rj_EnR = 1'b0;\n\n\t\t  h_EnR = 1'b0;\n\n\t   x_Wr_EnR = 1'b0;\n\n\t\trw_Ptr_R = 4'h0;\n\n\t\thw_Ptr_R = 9'h000;\n\n\t\txw_Ptr_R = 8'h00;\n\n\tend\n\n\t\n\telse if (done_R)\n\n\tbegin\n\n\t\trj_EnR = 1'b0;\n\n\t\t h_EnR = 1'b0;\n\n\t\t x_Wr_EnR = 1'b0;\n\n\tend\n\n\n\n\telse\n\n\tbegin\n\n\t\tcase (next_State)\n\n\t\t\tstate0:\n\n\t\t\tbegin   \n\n\t\t\t\tif(r_Clr_Stop_R == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_R = rw_Ptr_Buff_R;\n\n\t\t\t\t\trj_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\tif(x_Clr_Stop_R == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_R = xw_Ptr_Buff_R[7:0];\n\n\t\t\t\t\tx_Wr_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\thw_Ptr_R = hw_Ptr_Buff_R;\n\n\t\t\t\th_EnR = 1'b1;\t\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate1:\n\n\t\t\tbegin\t\n\n\t\t\t\trw_Ptr_R      = 4'h0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_R = rw_Ptr_Buff_R;\n\n\t\t\t\t\t\n\n\t\t\t\t\trj_WrR = 1'b1;\n\n\t\t\t\t\trj_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate3:\n\n\t\t\tbegin\t\n\t\t\t\trj_WrR \t\t= 1'b0;\n\n\t\t\t\thw_Ptr_R      = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\thw_Ptr_R = hw_Ptr_Buff_R;\n\n\t\t\t\t\th_WrR = 1'b1;\n\n\t\t\t\t\th_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\th_WrR \t\t= 1'b0;\n\n\t\t\t\txw_Ptr_R\t\t= 8'h00;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t xw_Ptr_R = xw_Ptr_Buff_L[7:0];\n\n\t\t\t\t\tx_Wr_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_R = 4'h0;\n\n\t\t\t\thw_Ptr_R = 9'h000;\n\n\t\t\t\txw_Ptr_R = 8'h00;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_R = 8'h00;\n\n\t\t\t\t\tx_Wr_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tdefault:\n\n\t\t\tbegin\n\n\t\t\t\tif (start == 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_R = 4'h0;\n\n\t\t\t\t\thw_Ptr_R = 9'h000;\n\n\t\t\t\t\txw_Ptr_R = 8'h00;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n  \nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: controller. Module specification: The controller module is a complex state machine that manages the operation of a digital signal processing system. It handles input/output operations, memory access, and ALU operations for left and right channels, likely in a stereo audio processing application. The module has inputs for reset, start, clock, data ready signals, and completion flags, and outputs for various control signals and memory pointers. Key inputs include reset, start, sClk, w_Ready, word_Sent, frame, done_L, done_R, sleep, and prev_OutReady. Important outputs are frame_Edg, inReady, outReady, ALU_En, serial_Output_En, and various enable, reset, and pointer signals for different memory components. Internal signals include state registers, pointer buffers, and clear/stop flags for managing the state machine and memory operations. The module is organized into several always blocks that"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: controller\n\nExplanation: This module appears to be a complex controller for a digital signal processing system. It manages various operations and data flow between different components, including input/output handling, memory access, and ALU operations. The controller uses a state machine to sequence operations, handles timing with clock signals, manages memory read/write operations, and controls data flow between different parts of the system. It also handles reset and start conditions, and coordinates the processing of left and right channel data in what seems to be a stereo audio processing application."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nreset, start, sClk, w_Ready, word_Sent, frame, done_L, done_R, sleep, prev_OutReady\n\nExplanation:\n- reset: System reset signal\n- start: Initiates the controller's operation\n- sClk: System clock input\n- w_Ready: Indicates when data is ready to be written\n- word_Sent: Signals completion of word transmission\n- frame: Frame synchronization signal\n- done_L, done_R: Completion signals for left and right channel processing\n- sleep: Puts the system in low-power mode\n- prev_OutReady: Previous output ready signal\n\nOutput ports:\nframe_Edg, inReady, outReady, parallel_Input_Rst, ALU_En, serial_Output_En, rj_EnL, rj_EnR, rj_Rst, rj_WrL, rj_WrR, rw_Ptr_L, rw_Ptr_R, h_EnL, h_EnR, h_Rst, h_WrL, h_WrR, hw_Ptr_L, hw_Ptr_R, x_Rst, x_Wr_EnL, x_Wr_EnR, xw_Ptr_L, xw_Ptr_R, n, x_FlagBit\n\nExplanation:\n- frame_Edg: Frame edge detection signal\n- inReady, outReady: Input and output ready flags\n- parallel_Input_Rst: Reset signal for parallel input\n- ALU_En: ALU enable signal\n- serial_Output_En: Enables serial output\n- rj_EnL, rj_EnR, h_EnL, h_EnR: Enable signals for left and right channel memory operations\n- rj_Rst, h_Rst, x_Rst: Reset signals for different memory components\n- rj_WrL, rj_WrR, h_WrL, h_WrR, x_Wr_EnL, x_Wr_EnR: Write enable signals for various memory components\n- rw_Ptr_L, rw_Ptr_R, hw_Ptr_L, hw_Ptr_R, xw_Ptr_L, xw_Ptr_R: Memory address pointers\n- n: Counter or index value\n- x_FlagBit: Flag bit for specific conditions in x memory operations"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\nstate, next_State, rw_Ptr_Buff_L, rw_Ptr_Buff_R, r_Clr_Stop_L, r_Clr_Stop_R, hw_Ptr_Buff_L, hw_Ptr_Buff_R, xw_Ptr_Buff_L, xw_Ptr_Buff_R, x_Clr_Stop_L, x_Clr_Stop_R\n\nExplanation:\n1. state, next_State: These signals represent the current and next states of the controller's state machine, controlling the overall operation sequence.\n\n2. rw_Ptr_Buff_L, rw_Ptr_Buff_R: Buffers for the read/write pointers for left and right channels, used to temporarily store and manipulate pointer values.\n\n3. r_Clr_Stop_L, r_Clr_Stop_R: Clear and stop signals for the left and right channel read operations, controlling when to stop incrementing read pointers.\n\n4. hw_Ptr_Buff_L, hw_Ptr_Buff_R: Buffers for the h-memory write pointers for left and right channels, used to temporarily store and manipulate pointer values.\n\n5. xw_Ptr_Buff_L, xw_Ptr_Buff_R: Buffers for the x-memory write pointers for left and right channels, used to temporarily store and manipulate pointer values.\n\n6. x_Clr_Stop_L, x_Clr_Stop_R: Clear and stop signals for the left and right channel x-memory operations, controlling when to stop incrementing x-memory pointers.\n\nThese internal signals are crucial for managing the state transitions, memory operations, and pointer manipulations within the controller module."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>`timescale 1ns / 1ps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`include serial_Input.sv\n`include rj_Memory.sv\n`include coefficient_Memory.sv\n`include input_Memory.sv\n`include ALU.sv\n`include serial_Output.sv\n\nmodule MSDAP(\n    input reset,\n    input frame,\n    input dClk,\n    input sClk,\n    input start,\n    input inputL,\n    input inputR,\n    output inReady,\n    output outReady,\n    output outputL,\n    output outputR\n    );\n    \n    \n\nwire \t \t    m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13;\n\nwire \t\t    n1L, n1R, n2L, n2R, n3L, n3R, n4L, n4R, n5L, n5R, n6L, n6R, n7L, n7R, n8L, n8R, n9L, n9R, n10L, n10R, n11L, n11R, n12L, n12R, \n\t\t        n13L, n13R,  n14L, n14R, n15L, n15R, n16L, n16R, n17L, n17R, n18L, n18R, n19L, n19R, n20L, n20R, n21L, n21R, n22L, n22R;\n\nwire    [15:0]\to1L , o1R, o2L, o2R, o3L, o3R, o4L, o4R;\n\nwire    [3:0]\to5L, o5R, o6L, o6R;\n\nwire    [8:0]\to7L, o7R, o8L, o8R;\n\nwire    [7:0]\to9L, o9R, o10L, o10R, p_Slp;\n\nwire    [39:0] \to11L, o11R;\n\n\nassign n2L  = (n13L | n14L);\t\t\t\nassign n2R  = (n13R | n14R);\t\t\t\nassign n5L  = (n15L | n16L);\t\t\t\nassign n5R  = (n15R | n16R);\t\t\t\n\nassign n8L  = (n4L | n7L | n11L);\t\t\nassign n8R  = (n4R | n7R | n11R);\t\t\nassign n20L = (n17L | n18L | n19L);\t\t\nassign n20R = (n17R | n18R | n19R);\t\t\n\nassign m3   = (n1L & n1R);\t\t\t    \nassign m7   = (n12L & n12R);\t\t\t\nassign m12  = (n21L & n21R);\t\t\t\nassign m10  = (n22L & n22R);\t\t\t\n\n\nserial_Input\tserial_Input_L (.frame_Edg(m2), .reset(reset), .cntrl_rst(m1), .dClk(dClk), .data_In(inputL), .w_Ready (n1L), .data_Out(o1L ), .ack(n8L) );\n\nserial_Input\tserial_Input_R (.frame_Edg(m2), .reset(reset), .cntrl_rst(m1), .dClk(dClk), .data_In(inputR), .w_Ready(n1R), .data_Out(o1R), .ack(n8R) );\n\n\nrj_Memory  \trj_Mem_L  (.start(start), .en(n2L), .rd_Addr(o5L), .wr_Addr(o6L), .wr(n3L), .cntrl_rst(m4), .data_In(o1L ), .data_Out(o2L), .w_Done(n4L), .data_Valid(n19L) );\n\nrj_Memory  \trj_Mem_R  (.start(start), .en(n2R), .rd_Addr(o5R), .wr_Addr(o6R), .wr(n3R), .cntrl_rst(m4), .data_In(o1R), .data_Out(o2R), .w_Done(n4R), .data_Valid(n19R) );\n\n\ncoeffecient_Memory  \tcoeffL_Mem  (.start(start), .en(n5L), .rd_Addr(o7L), .wr_Addr(o8L), .wr(n6L), .cntrl_rst(m11), .data_In(o1L ), .data_Out(o3L), .w_Done(n7L), .data_Valid(n18L) );\n\ncoeffecient_Memory  \tcoeffR_Mem  (.start(start), .en(n5R), .rd_Addr(o7R), .wr_Addr(o8R), .wr(n6R), .cntrl_rst(m11), .data_In(o1R), .data_Out(o3R), .w_Done(n7R), .data_Valid(n18R) );\n\n\ninput_Memory\tinputL_mem  (.sClk(sClk), .start(start), .reset(reset), .cntrl_rst(m6), .rd_En(n10L), .wr_En(n9L), .rd_Addr(o10L), .wr_Addr(o9L), .data_In(o1L ), .data_Out(o4L), .sleep(n12L),\n\t\t\t     .w_Done(n11L), .data_Valid(n17L) );\n\ninput_Memory\tinputR_mem  (.sClk(sClk), .start(start), .reset(reset), .cntrl_rst(m6), .rd_En(n10R), .wr_En(n9R), .rd_Addr(o10R), .wr_Addr(o9R), .data_In(o1R), .data_Out(o4R), .sleep(n12R),\n\t\t\t     .w_Done(n11R), .data_Valid(n17R) );\n\n\nALU\t\t ALU_L  (.sClk(sClk), .reset(reset), .en(m5), .start(start), .sleep(m7), .rj_En(n14L), .rr_Ptr(o5L), .r_Valid(n19L), .rj_Data_In(o2L), .h_En(n16L), .hr_Ptr(o7L),\n\t\t\t .h_Valid(n18L),\t.h_Data_In(o3L), .x_Rd_En(n10L), .xr_Ptr(o10L), .x_Data_In(o4L), .x_FlagBit(m8), .n(p_Slp), .valid(n20L), .prev_OutReady(n21L), .y(o11L) \n\t\t\t);\n\n\nALU\t\tALU_R  (.sClk(sClk), .reset(reset), .en(m5), .start(start), .sleep(m7),.rj_En(n14R), .rr_Ptr(o5R), .r_Valid(n19R), .rj_Data_In(o2R),.h_En(n16R), .hr_Ptr(o7R),\n\t\t\t.h_Valid(n18R), .h_Data_In(o3R), .x_Rd_En(n10R), .xr_Ptr(o10R), .x_Data_In(o4R), .x_FlagBit(m8), .n(p_Slp), .valid(n20R), .prev_OutReady(n21R), .y(o11R) \n\t\t       );\n\n\nserial_Output\t\tserial_Output_L (.en(m9), .sClk(sClk), .start(start), .data_In(o11L), .word_Sent(n22L), .data_Out(outputL) );\n\nserial_Output\t\tserial_Output_R (.en(m9), .sClk(sClk), .start(start), .data_In(o11R), .word_Sent(n22R), .data_Out(outputR) );\n\n\ncontroller \tControl (.reset(reset), .frame(frame), .frame_Edg(m2), .start(start), .inReady(inReady), .outReady(outReady), .sClk(sClk), .w_Ready(m3), .rj_EnL(n13L),\n\t\t\t .rj_EnR(n13R), .rj_Rst(m4), .rj_WrL(n3L), .rj_WrR(n3R), .rw_Ptr_L(o6L), .rw_Ptr_R(o6R), .h_EnL(n15L), .h_EnR(n15R), .h_Rst(m11), .h_WrL(n6L),\n\t\t\t .h_WrR(n6R), .hw_Ptr_L(o8L), .hw_Ptr_R(o8R), .x_Rst(m6), .x_Wr_EnL(n9L), .x_Wr_EnR(n9R), .xw_Ptr_L(o9L), .xw_Ptr_R(o9R), .x_FlagBit(m8),\n\t\t\t .ALU_En(m5), .n(p_Slp), .prev_OutReady(m12), .serial_Output_En(m9), .word_Sent(m10), .parallel_Input_Rst(m1), .sleep(m7), .done_L(n8L), .done_R(n8R) \n\t\t\t);\n\n    \nendmodule\n\n\n`timescale 1ns / 1ps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule controller(\n    input reset,\n    input start,\n    input sClk,\n    input w_Ready,\n    input word_Sent,\n    input frame,\n    input done_L,\n    input done_R,\n    input sleep,\n    input prev_OutReady,\n    output reg frame_Edg,\n    output reg inReady,\n    output reg outReady,\n    output reg parallel_Input_Rst,\n    output reg ALU_En,\n    output reg serial_Output_En,\n    output reg rj_EnL,\n    output reg rj_EnR,\n    output reg rj_Rst,\n    output reg rj_WrL,\n    output reg rj_WrR,\n    output reg [3:0] rw_Ptr_L,\n    output reg [3:0] rw_Ptr_R ,\n    output reg h_EnL,\n    output reg h_EnR,\n    output reg h_Rst,\n    output reg h_WrL,\n    output reg h_WrR,\n    output reg [8:0] hw_Ptr_L, \n    output reg [8:0] hw_Ptr_R,\n    output reg x_Rst,\n    output reg x_Wr_EnL,\n    output reg x_Wr_EnR,\n    output reg [7:0] xw_Ptr_L,\n    output reg [7:0] xw_Ptr_R,\n    output reg [7:0] n,\n    output reg x_FlagBit\n    );\n\nreg [3:0]  rw_Ptr_Buff_L, rw_Ptr_Buff_R;\n\nreg r_Clr_Stop_L, r_Clr_Stop_R;\n\nreg [8:0] hw_Ptr_Buff_L, hw_Ptr_Buff_R;\n\nreg [8:0] xw_Ptr_Buff_L, xw_Ptr_Buff_R;\n\nreg x_Clr_Stop_L, x_Clr_Stop_R;\n\nreg [3:0] state;\n\nreg [3:0] next_State;\n\nparameter state0 = 4'h0;\n\nparameter state1 = 4'h1;\n\nparameter state2 = 4'h2;\n\nparameter state3 = 4'h3;\n\nparameter state4 = 4'h4;\n\nparameter state5 = 4'h5;\n\nparameter state6 = 4'h6;\n\nparameter state7 = 4'h7;\n\nparameter state8 = 4'h8;\n\n\nalways @ (posedge start or posedge done_L or negedge reset )\n\nbegin\n\n\tif(reset == 1'b0)\n\n\tbegin\n\n\t\txw_Ptr_Buff_L = 9'h000;\n\n\t\tx_FlagBit = 1'b0;\n\n\tend\n\n\t\n\n\telse if(start== 1'b1)\n\n\tbegin\n\n\t\t{r_Clr_Stop_L,rw_Ptr_Buff_L} = 5'h00;\n\n\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t{x_Clr_Stop_L,xw_Ptr_Buff_L} = 9'h000;\n\n\t\tx_FlagBit = 1'b0;\n\n\tend\n\n\telse\n\n\tbegin\n\n\t\tcase (next_State)\n\n\t\tstate0:\n\n\t\t\tbegin\n\n\t\t\t\tif(r_Clr_Stop_L == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t{r_Clr_Stop_L,rw_Ptr_Buff_L} =  rw_Ptr_L + 1'b1;\n\n\t\t\t\tend\t\t\n\n\t\t\t\tif(x_Clr_Stop_L == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t{x_Clr_Stop_L,xw_Ptr_Buff_L[7:0]} =  xw_Ptr_L + 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\thw_Ptr_Buff_L  =  hw_Ptr_L + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate1:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_L = 4'h0;\n\n\t\t\t\txw_Ptr_Buff_L = 9'h000;\n\n\t\t\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_L = rw_Ptr_L + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate3:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_L = 4'h0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\thw_Ptr_Buff_L = hw_Ptr_L + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif(sleep== 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_L = 9'h0;\n\n\t\t\t\t\tx_FlagBit = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_L = xw_Ptr_L + 1'b1;\n\n\t\t\t\t\tif(xw_Ptr_Buff_L == 9'h100)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tx_FlagBit = 1'b1;\n\n\t\t\t\t\tend\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_L = 4'h0;\n\n\t\t\t\txw_Ptr_Buff_L = 9'h000;\n\n\t\t\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif(sleep == 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_L = 9'h0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_L = 9'h001;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\tdefault:\n\n\t\tbegin\n\n\t\t\trw_Ptr_Buff_L = 4'h0;\n\n\t\t\txw_Ptr_Buff_L = 9'h000;\n\n\t\t\thw_Ptr_Buff_L = 9'h000;\n\n\t\t\t r_Clr_Stop_L = 1'b0;\n\n\t\t\t x_Clr_Stop_L = 1'b0;\n\n\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n\n\nalways @ (state or frame or w_Ready or reset or start or prev_OutReady or word_Sent or sleep)\n\nbegin\n\n\tif(reset == 1'b0)\n\n\tbegin\n\n\t\tnext_State <= state7;\n\n\t\tframe_Edg <= 1'b0;\n\n\t\toutReady = 1'b0;\n\n\t\tALU_En = 1'b0;\n\n\t\tserial_Output_En = 1'b0;\n\n\tend\n\n\telse if (start== 1'b1)\n\n\tbegin\n\n\t\tALU_En = 1'b0;\n\n\t\tserial_Output_En = 1'b0;\n\n\t\toutReady = 1'b0;\n\n\tend\n\n\telse\n\n\tbegin\n\n\t\tcase ( state )\n\n\t\t\tstate0:\n\n\t\t\tbegin\n\n\t\t\t\tif (r_Clr_Stop_L && r_Clr_Stop_R)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state1;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state0;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\t\n\n\t\t\tstate1:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state2;\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse if (w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state2;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate3:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state4;\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state3;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse if (w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state4;\n\n\t\t\t\tend\n\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state6;\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state5;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\t\tif (prev_OutReady)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tserial_Output_En = 1'b1;\n\n\t\t\t\t\t\toutReady = 1'b1;\n\n\t\t\t\t\tend\n\n\t\t\t\t\tif( (|{x_FlagBit,xw_Ptr_Buff_L}) )\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tALU_En = 1'b1;\n\n\t\t\t\t\tend\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse if (prev_OutReady)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tALU_En = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (word_Sent)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tserial_Output_En = 1'b0;\n\n\t\t\t\t\toutReady = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state6;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\tif(reset)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state5;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif (frame)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b1;\n\n\t\t\t\t\tif (prev_OutReady)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tserial_Output_En = 1'b1;\n\n\t\t\t\t\t\toutReady = 1'b1;\n\n\t\t\t\t\tend\n\n\t\t\t\t\tALU_En = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (!sleep)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tALU_En = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tframe_Edg  <= 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse if (word_Sent)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tserial_Output_En = 1'b0;\n\n\t\t\t\t\toutReady = 1'b0;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\tnext_State <= state8;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tdefault:\n\n\t\t\tbegin\n\n\t\t\t\tframe_Edg <= 1'b0;\n\n\t\t\t\toutReady = 1'b0;\n\n\t\t\t\tALU_En = 1'b0;\n\n\t\t\t\tserial_Output_En = 1'b0;\n\n\t\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n\n\nalways @ (posedge sClk or negedge reset or posedge start or posedge done_L )\n\nbegin\n\n\tif(reset == 1'b0)\n\n\tbegin\n\n\t\tstate <= state7;\n\n\t\tinReady = 1'b0;\n\n\t\tn = 8'h00;\n\n\tend\n\n\telse if(start== 1'b1)\n\n\tbegin\n\n\t\trj_EnL = 1'b0;\n\n\t\th_EnL = 1'b0;\n\n\t\tx_Wr_EnL = 1'b0;\n\n\t\trj_Rst = 1'b1;\n\n\t\th_Rst = 1'b1;\n\n\t\tx_Rst = 1'b1;\n\n\t\trw_Ptr_L = 4'h0;\n\n\t\thw_Ptr_L = 9'h000;\n\n\t\txw_Ptr_L = 8'h00;\n\n\t\tparallel_Input_Rst = 1'b1;\n\n\t\tn = 8'h00; \n\n\t\tstate <= state0;\n\n\tend\n\n\t\n\n\telse if (done_L== 1'b1)\n\n\tbegin\n\n\t\trj_EnL = 1'b0;\n\n\t\t h_EnL = 1'b0;\n\n\t\t x_Wr_EnL = 1'b0;\n\n\tend\n\n\n\n\telse\n\n\tbegin\n\n\t\tstate <= next_State;\n\n\t\tcase (next_State)\n\n\t\t\tstate0:\n\n\t\t\tbegin   \n\n\t\t\t\tparallel_Input_Rst = 1'b0;\n\n\t\t\t\tif(r_Clr_Stop_L == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_L = rw_Ptr_Buff_L;\n\n\t\t\t\t\trj_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\tif(x_Clr_Stop_L == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_L = xw_Ptr_Buff_L[7:0];\n\n\t\t\t\t\tx_Wr_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\thw_Ptr_L = hw_Ptr_Buff_L;\n\n\t\t\t\th_EnL = 1'b1;\t\t\t\n\n\t\t\t\tif(hw_Ptr_L == 9'h1FF)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tstate <= state1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate1:\n\n\t\t\tbegin\t\n\n\t\t\t\trw_Ptr_L      = 4'h0;\n\n\t\t\t\tinReady     = 1'b1;\n\n\t\t\t\trj_Rst      = 1'b0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_L = rw_Ptr_Buff_L;\n\n\t\t\t\t\tif(rw_Ptr_L == 4'hF)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tstate <= state3;\n\n\t\t\t\t\tend\n\n\t\t\t\t\trj_WrL = 1'b1;\n\n\t\t\t\t\trj_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate3:\n\n\t\t\tbegin\t\n\n\t\t\t\trj_WrL \t\t= 1'b0;\n\n\t\t\t\thw_Ptr_L    = 9'h000;\n\n\t\t\t\tinReady     = 1'b1;\n\n\t\t\t\t h_Rst      = 1'b0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\thw_Ptr_L = hw_Ptr_Buff_L;\n\n\t\t\t\t\tif(hw_Ptr_L == 9'h1FF)\n\n\t\t\t\t\tbegin\n\n\t\t\t\t\t\tstate <= state5;\n\n\t\t\t\t\tend\n\n\t\t\t\t\th_WrL = 1'b1;\n\n\t\t\t\t\th_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\th_WrL \t\t= 1'b0;\n\n\t\t\t\txw_Ptr_L\t= 8'h00;\n\n\t\t\t\tinReady\t\t= 1'b1;\n\n\t\t\t\tx_Rst\t\t= 1'b0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t xw_Ptr_L = xw_Ptr_Buff_L[7:0];\n\n\t\t\t\t\t\t  n = xw_Ptr_L;\n\n\t\t\t\t\tx_Wr_EnL = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\tif(sleep)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tstate <= state8;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\tinReady = 1'b0;\n\n\t\t\t\t\t n = 8'h00;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_L = 8'h0;\n\n\t\t\t\t\tx_Wr_EnL = 1'b1;\n\n\t\t\t\t\tn = xw_Ptr_L; \n\n\t\t\t\tend\n\n\t\t\t\tif(sleep == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\tstate <= state6;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tdefault:\n\n\t\t\tbegin\n\n\t\t\t\tif (start == 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_L = 4'h0;\n\n\t\t\t\t\thw_Ptr_L = 9'h000;\n\n\t\t\t\t\txw_Ptr_L = 8'h00;\n\n\t\t\t\t\tstate <= state0;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n\n\nalways @ (posedge start or posedge done_R or negedge reset )\nbegin\n\n\tif(reset == 1'b0)\n\n\tbegin\n\n\t\txw_Ptr_Buff_R = 9'h000;\n\n\tend\n\n\t\n\n\telse if(start)\n\n\tbegin\n\n\t\t{r_Clr_Stop_R,rw_Ptr_Buff_R} = 5'h0;\n\n\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t{x_Clr_Stop_R,xw_Ptr_Buff_R} = 9'h000;\n\n\tend\n\n\telse\n\n\tbegin\n\n\t\tcase (next_State)\n\n\t\tstate0:\n\n\t\t\tbegin\n\n\t\t\t\tif(r_Clr_Stop_R == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t{r_Clr_Stop_R,rw_Ptr_Buff_R} =  rw_Ptr_R + 1'b1;\n\n\t\t\t\tend\t\t\n\n\t\t\t\tif(x_Clr_Stop_R == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t{x_Clr_Stop_R,xw_Ptr_Buff_R[7:0]} =  xw_Ptr_R + 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\t\n\n\t\t\t\thw_Ptr_Buff_R  =  hw_Ptr_R + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate1:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_R = 4'h0;\n\n\t\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_R = rw_Ptr_R + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate3:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_R = 4'h0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\thw_Ptr_Buff_R = hw_Ptr_R + 1'b1;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif(sleep== 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_R = xw_Ptr_R + 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_Buff_R = 4'h0;\n\n\t\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif(sleep == 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\t\tend\n\n\t\t\t\telse\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_Buff_R = 9'h001;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\tdefault:\n\n\t\tbegin\n\n\t\t\trw_Ptr_Buff_R = 4'h0;\n\n\t\t\txw_Ptr_Buff_R = 9'h000;\n\n\t\t\thw_Ptr_Buff_R = 9'h000;\n\n\t\t\tr_Clr_Stop_R = 1'b0;\n\n\t\t\tx_Clr_Stop_R = 1'b0;\n\n\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n\nalways @ (posedge sClk or posedge start or posedge done_R )\n\nbegin\n\n\tif(start)\n\n\tbegin\n\n\t\t rj_EnR = 1'b0;\n\n\t\t  h_EnR = 1'b0;\n\n\t   x_Wr_EnR = 1'b0;\n\n\t\trw_Ptr_R = 4'h0;\n\n\t\thw_Ptr_R = 9'h000;\n\n\t\txw_Ptr_R = 8'h00;\n\n\tend\n\n\t\n\telse if (done_R)\n\n\tbegin\n\n\t\trj_EnR = 1'b0;\n\n\t\t h_EnR = 1'b0;\n\n\t\t x_Wr_EnR = 1'b0;\n\n\tend\n\n\n\n\telse\n\n\tbegin\n\n\t\tcase (next_State)\n\n\t\t\tstate0:\n\n\t\t\tbegin   \n\n\t\t\t\tif(r_Clr_Stop_R == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_R = rw_Ptr_Buff_R;\n\n\t\t\t\t\trj_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\tif(x_Clr_Stop_R == 1'b0)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_R = xw_Ptr_Buff_R[7:0];\n\n\t\t\t\t\tx_Wr_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\t\thw_Ptr_R = hw_Ptr_Buff_R;\n\n\t\t\t\th_EnR = 1'b1;\t\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate1:\n\n\t\t\tbegin\t\n\n\t\t\t\trw_Ptr_R      = 4'h0;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate2:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_R = rw_Ptr_Buff_R;\n\n\t\t\t\t\t\n\n\t\t\t\t\trj_WrR = 1'b1;\n\n\t\t\t\t\trj_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate3:\n\n\t\t\tbegin\t\n\t\t\t\trj_WrR \t\t= 1'b0;\n\n\t\t\t\thw_Ptr_R      = 9'h000;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate4:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\thw_Ptr_R = hw_Ptr_Buff_R;\n\n\t\t\t\t\th_WrR = 1'b1;\n\n\t\t\t\t\th_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate5:\n\n\t\t\tbegin\n\n\t\t\t\th_WrR \t\t= 1'b0;\n\n\t\t\t\txw_Ptr_R\t\t= 8'h00;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate6:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\t xw_Ptr_R = xw_Ptr_Buff_L[7:0];\n\n\t\t\t\t\tx_Wr_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate7:\n\n\t\t\tbegin\n\n\t\t\t\trw_Ptr_R = 4'h0;\n\n\t\t\t\thw_Ptr_R = 9'h000;\n\n\t\t\t\txw_Ptr_R = 8'h00;\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tstate8:\n\n\t\t\tbegin\n\n\t\t\t\tif(w_Ready)\n\n\t\t\t\tbegin\n\n\t\t\t\t\txw_Ptr_R = 8'h00;\n\n\t\t\t\t\tx_Wr_EnR = 1'b1;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\t\t\n\n\t\t\tdefault:\n\n\t\t\tbegin\n\n\t\t\t\tif (start == 1'b1)\n\n\t\t\t\tbegin\n\n\t\t\t\t\trw_Ptr_R = 4'h0;\n\n\t\t\t\t\thw_Ptr_R = 9'h000;\n\n\t\t\t\t\txw_Ptr_R = 8'h00;\n\n\t\t\t\tend\n\n\t\t\tend\n\n\t\tendcase\n\n\tend\n\nend\n  \nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: controller. Module specification: The controller module is a complex state machine that manages the operation of a digital signal processing system. It handles input/output operations, memory access, and ALU operations for left and right channels, likely in a stereo audio processing application. The module has inputs for reset, start, clock, data ready signals, and completion flags, and outputs for various control signals and memory pointers. Key inputs include reset, start, sClk, w_Ready, word_Sent, frame, done_L, done_R, sleep, and prev_OutReady. Important outputs are frame_Edg, inReady, outReady, ALU_En, serial_Output_En, and various enable, reset, and pointer signals for different memory components. Internal signals include state registers, pointer buffers, and clear/stop flags for managing the state machine and memory operations. The module is organized into several always blocks that"
                }
            ]
        }
    ]
}