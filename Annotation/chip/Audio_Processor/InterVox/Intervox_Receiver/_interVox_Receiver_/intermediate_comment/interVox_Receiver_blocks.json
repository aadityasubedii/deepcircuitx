{
    "line_num": [
        [
            671,
            675
        ],
        [
            657,
            668
        ],
        [
            598,
            676
        ],
        [
            571,
            592
        ],
        [
            519,
            547
        ],
        [
            491,
            518
        ],
        [
            486,
            490
        ],
        [
            477,
            485
        ],
        [
            475,
            475
        ],
        [
            432,
            471
        ],
        [
            325,
            408
        ],
        [
            196,
            324
        ],
        [
            169,
            190
        ],
        [
            113,
            145
        ],
        [
            92,
            93
        ],
        [
            64,
            88
        ],
        [
            32,
            40
        ]
    ],
    "blocks": [
        "  assign i2sTrans_clock = clock;\n  assign i2sTrans_reset = reset;\n  assign i2sTrans_io_CLK_IN = clockRec_io_CLK_OUT; \n  assign i2sTrans_io_DATA_IN = clockRec_io_DATAREG; \n  assign i2sTrans_io_NEXT = clockRec_io_DBUG1; ",
        "  assign io_CLK_REC = 1'h0; \n  assign io_DATA_OUT = clockRec_io_DATA_OUT; \n  assign io_CLK_DBUG = 1'h0; \n  assign io_DBUG = clockRec_io_DBUG; \n  assign io_DBUG1 = clockRec_io_DBUG1; \n  assign io_LED = clockRec_io_LED; \n  assign io_BCLK = clockRec_io_CLK_OUT; \n  assign io_LRCLK = i2sTrans_io_LRCLK; \n  assign io_SDATA = i2sTrans_io_SDATA; \n  assign clockRec_clock = clock;\n  assign clockRec_reset = reset;\n  assign clockRec_io_DATA_IN = io_INTERVOX_IN; ",
        "module interVox_Receiver(\n  input         clock,\n  input         reset,\n  input         io_INTERVOX_IN,\n  output        io_CLK_REC,\n  output        io_DATA_OUT,\n  output        io_CLK_DBUG,\n  output        io_DBUG,\n  output        io_DBUG1,\n  output [15:0] io_LED,\n  input  [15:0] io_SW,\n  output        io_BCLK,\n  output        io_LRCLK,\n  output        io_SDATA,\n  input         io_BTN_C,\n  input         io_BTN_D,\n  input         io_BTN_L,\n  input         io_BTN_R\n);\n  wire  clockRec_clock; \n  wire  clockRec_reset; \n  wire  clockRec_io_DATA_IN; \n  wire  clockRec_io_CLK_OUT; \n  wire  clockRec_io_DATA_OUT; \n  wire  clockRec_io_DBUG; \n  wire  clockRec_io_DBUG1; \n  wire [15:0] clockRec_io_LED; \n  wire [15:0] clockRec_io_SW; \n  wire [63:0] clockRec_io_DATAREG; \n  wire  clockRec_io_BTN_C; \n  wire  i2sTrans_clock; \n  wire  i2sTrans_reset; \n  wire  i2sTrans_io_CLK_IN; \n  wire [63:0] i2sTrans_io_DATA_IN; \n  wire  i2sTrans_io_NEXT; \n  wire  i2sTrans_io_LRCLK; \n  wire  i2sTrans_io_SDATA; \n  clock_Recovery clockRec ( \n    .clock(clockRec_clock),\n    .reset(clockRec_reset),\n    .io_DATA_IN(clockRec_io_DATA_IN),\n    .io_CLK_OUT(clockRec_io_CLK_OUT),\n    .io_DATA_OUT(clockRec_io_DATA_OUT),\n    .io_DBUG(clockRec_io_DBUG),\n    .io_DBUG1(clockRec_io_DBUG1),\n    .io_LED(clockRec_io_LED),\n    .io_SW(clockRec_io_SW),\n    .io_DATAREG(clockRec_io_DATAREG),\n    .io_BTN_C(clockRec_io_BTN_C)\n  );\n  i2s_Transmitter i2sTrans ( \n    .clock(i2sTrans_clock),\n    .reset(i2sTrans_reset),\n    .io_CLK_IN(i2sTrans_io_CLK_IN),\n    .io_DATA_IN(i2sTrans_io_DATA_IN),\n    .io_NEXT(i2sTrans_io_NEXT),\n    .io_LRCLK(i2sTrans_io_LRCLK),\n    .io_SDATA(i2sTrans_io_SDATA)\n  );\n  assign io_CLK_REC = 1'h0; \n  assign io_DATA_OUT = clockRec_io_DATA_OUT; \n  assign io_CLK_DBUG = 1'h0; \n  assign io_DBUG = clockRec_io_DBUG; \n  assign io_DBUG1 = clockRec_io_DBUG1; \n  assign io_LED = clockRec_io_LED; \n  assign io_BCLK = clockRec_io_CLK_OUT; \n  assign io_LRCLK = i2sTrans_io_LRCLK; \n  assign io_SDATA = i2sTrans_io_SDATA; \n  assign clockRec_clock = clock;\n  assign clockRec_reset = reset;\n  assign clockRec_io_DATA_IN = io_INTERVOX_IN; \n  assign clockRec_io_SW = io_SW; \n  assign clockRec_io_BTN_C = io_BTN_C; \n  assign i2sTrans_clock = clock;\n  assign i2sTrans_reset = reset;\n  assign i2sTrans_io_CLK_IN = clockRec_io_CLK_OUT; \n  assign i2sTrans_io_DATA_IN = clockRec_io_DATAREG; \n  assign i2sTrans_io_NEXT = clockRec_io_DBUG1; \nendmodule",
        "initial begin\n  `ifdef RANDOMIZE\n    `ifdef INIT_RANDOM\n      `INIT_RANDOM\n    `endif\n    `ifndef VERILATOR\n      `ifdef RANDOMIZE_DELAY\n        #`RANDOMIZE_DELAY begin end\n      `else\n        #0.002 begin end\n      `endif\n    `endif\n`ifdef RANDOMIZE_REG_INIT\n  _RAND_0 = {1{`RANDOM}};\n  bitCntrTrans = _RAND_0[7:0];\n  _RAND_1 = {1{`RANDOM}};\n  lrclk = _RAND_1[0:0];\n  _RAND_2 = {1{`RANDOM}};\n  sdataO = _RAND_2[0:0];\n`endif \n  `endif \nend ",
        "  always @(posedge clock) begin\n    if (reset) begin \n      bitCntrTrans <= 8'h0; \n    end else if (CLK1EDGE_io_RISE) begin \n      bitCntrTrans <= _bitCntrTrans_T_1; \n    end else if (io_NEXT) begin \n      bitCntrTrans <= 8'h0; \n    end\n    if (reset) begin \n      lrclk <= 1'h0; \n    end else if (CLK1EDGE_io_RISE) begin \n      if (bitCntrTrans > 8'h1f) begin \n        lrclk <= 1'h0; \n      end else begin\n        lrclk <= _GEN_1;\n      end\n    end\n    if (reset) begin \n      sdataO <= 1'h0; \n    end else if (CLK1EDGE_io_RISE) begin \n      if (bitCntrTrans > 8'h38) begin \n        sdataO <= 1'h0; \n      end else if (bitCntrTrans <= 8'h38 & _T_3) begin \n        sdataO <= _sdataO_T_9[0]; \n      end else begin\n        sdataO <= _GEN_4;\n      end\n    end\n  end",
        "  wire  CLK1EDGE_clock; \n  wire  CLK1EDGE_reset; \n  wire  CLK1EDGE_io_INPUT; \n  wire  CLK1EDGE_io_RISE; \n  reg [7:0] bitCntrTrans; \n  reg  lrclk; \n  reg  sdataO; \n  wire [7:0] _bitCntrTrans_T_1 = bitCntrTrans + 8'h1; \n  wire  _GEN_1 = bitCntrTrans == 8'h0 | lrclk; \n  wire  _T_3 = bitCntrTrans > 8'h1f; \n  wire [7:0] _sdataO_T_1 = 8'h3c - bitCntrTrans; \n  wire [63:0] _sdataO_T_2 = io_DATA_IN >> _sdataO_T_1; \n  wire  _GEN_3 = bitCntrTrans <= 8'h18 ? _sdataO_T_2[0] : sdataO; \n  wire  _GEN_4 = bitCntrTrans > 8'h18 & bitCntrTrans <= 8'h1f ? 1'h0 : _GEN_3; \n  wire [7:0] _sdataO_T_6 = bitCntrTrans + 8'h1f; \n  wire [7:0] _sdataO_T_8 = 8'h24 - _sdataO_T_6; \n  wire [63:0] _sdataO_T_9 = io_DATA_IN >> _sdataO_T_8; \n  edgeDetector CLK1EDGE ( \n    .clock(CLK1EDGE_clock),\n    .reset(CLK1EDGE_reset),\n    .io_INPUT(CLK1EDGE_io_INPUT),\n    .io_RISE(CLK1EDGE_io_RISE)\n  );\n  assign io_LRCLK = lrclk; \n  assign io_SDATA = sdataO; \n  assign CLK1EDGE_clock = clock;\n  assign CLK1EDGE_reset = reset;\n  assign CLK1EDGE_io_INPUT = io_CLK_IN; ",
        "`ifdef RANDOMIZE_REG_INIT\n  reg [31:0] _RAND_0;\n  reg [31:0] _RAND_1;\n  reg [31:0] _RAND_2;\n`endif ",
        "module i2s_Transmitter(\n  input         clock,\n  input         reset,\n  input         io_CLK_IN,\n  input  [63:0] io_DATA_IN,\n  input         io_NEXT,\n  output        io_LRCLK,\n  output        io_SDATA\n);",
        "`endif ",
        "initial begin\n  `ifdef RANDOMIZE\n    `ifdef INIT_RANDOM\n      `INIT_RANDOM\n    `endif\n    `ifndef VERILATOR\n      `ifdef RANDOMIZE_DELAY\n        #`RANDOMIZE_DELAY begin end\n      `else\n        #0.002 begin end\n      `endif\n    `endif\n`ifdef RANDOMIZE_REG_INIT\n  _RAND_0 = {1{`RANDOM}};\n  lastOne = _RAND_0[7:0];\n  _RAND_1 = {1{`RANDOM}};\n  leds = _RAND_1[15:0];\n  _RAND_2 = {1{`RANDOM}};\n  inBufr = _RAND_2[1:0];\n  _RAND_3 = {1{`RANDOM}};\n  deltaCntr = _RAND_3[7:0];\n  _RAND_4 = {1{`RANDOM}};\n  bitCntr = _RAND_4[6:0];\n  _RAND_5 = {1{`RANDOM}};\n  clkRec = _RAND_5[0:0];\n  _RAND_6 = {1{`RANDOM}};\n  change = _RAND_6[0:0];\n  _RAND_7 = {1{`RANDOM}};\n  dataOut = _RAND_7[0:0];\n  _RAND_8 = {1{`RANDOM}};\n  syncWord = _RAND_8[0:0];\n  _RAND_9 = {1{`RANDOM}};\n  zeroFlipped = _RAND_9[0:0];\n  _RAND_10 = {1{`RANDOM}};\n  syncFlipped = _RAND_10[0:0];\n  _RAND_11 = {1{`RANDOM}};\n  syncFlipped1 = _RAND_11[0:0];\n`endif \n  `endif \nend ",
        "  always @(posedge clock) begin\n    lastOne <= _GEN_53[7:0]; \n    leds <= _GEN_54[15:0]; \n    if (reset) begin \n      inBufr <= 2'h0; \n    end else if (io_DATA_IN) begin \n      if (inBufr < 2'h3) begin \n        inBufr <= _inBufr_T_1; \n      end\n    end else if (~io_DATA_IN) begin \n      if (inBufr > 2'h0) begin \n        inBufr <= _inBufr_T_3; \n      end\n    end\n    if (reset) begin \n      deltaCntr <= 8'h0; \n    end else if (change) begin \n      deltaCntr <= 8'h0; \n    end else begin\n      deltaCntr <= _deltaCntr_T_1; \n    end\n    if (reset) begin \n      bitCntr <= 7'h0; \n    end else if (_GEN_49 >= _T_21) begin \n      if (~syncFlipped1) begin \n        bitCntr <= 7'h0; \n      end else begin\n        bitCntr <= _GEN_16;\n      end\n    end else begin\n      bitCntr <= _GEN_16;\n    end\n    if (reset) begin \n      clkRec <= 1'h0; \n    end else if (_GEN_49 >= _T_21) begin \n      if (~syncFlipped1) begin \n        clkRec <= _clkRec_T; \n      end else begin\n        clkRec <= _GEN_28;\n      end\n    end else begin\n      clkRec <= _GEN_28;\n    end\n    if (reset) begin \n      change <= 1'h0; \n    end else if (change) begin \n      change <= 1'h0; \n    end else begin\n      change <= _GEN_4;\n    end\n    if (reset) begin \n      dataOut <= 1'h0; \n    end else if (deltaCntr > lastOne & _GEN_49 < _T_14) begin \n      dataOut <= 1'h0; \n    end else if (deltaCntr <= lastOne) begin \n      dataOut <= _GEN_19;\n    end\n    if (reset) begin \n      syncWord <= 1'h0; \n    end else begin\n      syncWord <= _GEN_36;\n    end\n    if (reset) begin \n      zeroFlipped <= 1'h0; \n    end else if (deltaCntr > lastOne & _GEN_49 < _T_14) begin \n      zeroFlipped <= _GEN_22;\n    end else if (change) begin \n      zeroFlipped <= 1'h0; \n    end\n    if (reset) begin \n      syncFlipped <= 1'h0; \n    end else if (_GEN_49 >= _T_14) begin \n      syncFlipped <= _GEN_27;\n    end else if (change) begin \n      syncFlipped <= 1'h0; \n    end\n    if (reset) begin \n      syncFlipped1 <= 1'h0; \n    end else if (_GEN_49 >= _T_21) begin \n      syncFlipped1 <= _GEN_31;\n    end else if (change) begin \n      syncFlipped1 <= 1'h0; \n    end\n  end",
        "module clock_Recovery(\n  input         clock,\n  input         reset,\n  input         io_DATA_IN,\n  output        io_CLK_OUT,\n  output        io_DATA_OUT,\n  output        io_DBUG,\n  output        io_DBUG1,\n  output [15:0] io_LED,\n  input  [15:0] io_SW,\n  output [63:0] io_DATAREG,\n  input         io_BTN_C\n);\n`ifdef RANDOMIZE_REG_INIT\n  reg [31:0] _RAND_0;\n  reg [31:0] _RAND_1;\n  reg [31:0] _RAND_2;\n  reg [31:0] _RAND_3;\n  reg [31:0] _RAND_4;\n  reg [31:0] _RAND_5;\n  reg [31:0] _RAND_6;\n  reg [31:0] _RAND_7;\n  reg [31:0] _RAND_8;\n  reg [31:0] _RAND_9;\n  reg [31:0] _RAND_10;\n  reg [31:0] _RAND_11;\n`endif \n  wire  BFR_clock; \n  wire  BFR_io_write; \n  wire [63:0] BFR_io_dataIn; \n  wire [63:0] BFR_io_dataOut; \n  wire  BFR1_clock; \n  wire  BFR1_io_write; \n  wire [63:0] BFR1_io_dataIn; \n  wire [63:0] BFR1_io_dataOut; \n  wire  CLKEDGE_clock; \n  wire  CLKEDGE_reset; \n  wire  CLKEDGE_io_INPUT; \n  wire  CLKEDGE_io_RISE; \n  reg [7:0] lastOne; \n  reg [15:0] leds; \n  reg [1:0] inBufr; \n  reg [7:0] deltaCntr; \n  reg [6:0] bitCntr; \n  reg  clkRec; \n  reg  change; \n  reg  dataOut; \n  reg  syncWord; \n  reg  zeroFlipped; \n  reg  syncFlipped; \n  reg  syncFlipped1; \n  wire [7:0] _deltaCntr_T_1 = deltaCntr + 8'h1; \n  wire [1:0] _inBufr_T_1 = inBufr + 2'h1; \n  wire [1:0] _inBufr_T_3 = inBufr - 2'h1; \n  wire  _GEN_4 = inBufr[0] ^ inBufr[1] | change; \n  wire  _clkRec_T = ~clkRec; \n  wire  _GEN_6 = change ? ~clkRec : clkRec; \n  wire  _GEN_8 = change ? 1'h0 : zeroFlipped; \n  wire  _GEN_9 = change ? 1'h0 : syncFlipped; \n  wire  _GEN_10 = change ? 1'h0 : syncFlipped1; \n  wire  _GEN_11 = syncWord ? 1'h0 : syncWord; \n  wire [6:0] _GEN_12 = syncWord ? 7'h0 : bitCntr; \n  wire [6:0] _bitCntr_T_1 = bitCntr + 7'h1; \n  wire [6:0] _BFR_io_dataIn_T_1 = 7'h3f - bitCntr; \n  wire [127:0] _BFR_io_dataIn_T_2 = 128'h1 << _BFR_io_dataIn_T_1; \n  wire [127:0] _GEN_47 = {{64'd0}, BFR_io_dataOut}; \n  wire [127:0] _BFR_io_dataIn_T_3 = _GEN_47 | _BFR_io_dataIn_T_2; \n  wire [127:0] _BFR_io_dataIn_T_6 = 128'h0 << _BFR_io_dataIn_T_1; \n  wire [127:0] _BFR_io_dataIn_T_7 = _GEN_47 & _BFR_io_dataIn_T_6; \n  wire [127:0] _GEN_15 = dataOut ? _BFR_io_dataIn_T_3 : _BFR_io_dataIn_T_7; \n  wire [6:0] _GEN_16 = CLKEDGE_io_RISE ? _bitCntr_T_1 : _GEN_12; \n  wire [127:0] _GEN_18 = CLKEDGE_io_RISE ? _GEN_15 : 128'h0; \n  wire  _GEN_19 = change | dataOut; \n  wire [9:0] _T_14 = lastOne * 2'h2; \n  wire [9:0] _GEN_49 = {{2'd0}, deltaCntr}; \n  wire  _GEN_21 = ~zeroFlipped ? _clkRec_T : _GEN_6; \n  wire  _GEN_22 = ~zeroFlipped | _GEN_8; \n  wire  _GEN_24 = deltaCntr > lastOne & _GEN_49 < _T_14 ? _GEN_21 : _GEN_6; \n  wire  _GEN_26 = ~syncFlipped ? _clkRec_T : _GEN_24; \n  wire  _GEN_27 = ~syncFlipped | _GEN_9; \n  wire  _GEN_28 = _GEN_49 >= _T_14 ? _GEN_26 : _GEN_24; \n  wire [9:0] _T_21 = lastOne * 2'h3; \n  wire  _T_23 = ~syncFlipped1; \n  wire [63:0] _leds_T = {{46'd0}, BFR1_io_dataOut[63:46]}; \n  wire [63:0] _leds_T_1 = _leds_T & 64'hffff; \n  wire  _GEN_31 = ~syncFlipped1 | _GEN_10; \n  wire [63:0] _GEN_34 = ~syncFlipped1 ? BFR_io_dataOut : 64'h0; \n  wire [63:0] _GEN_35 = ~syncFlipped1 ? _leds_T_1 : {{48'd0}, leds}; \n  wire  _GEN_36 = _GEN_49 >= _T_21 | _GEN_11; \n  wire [63:0] _GEN_42 = _GEN_49 >= _T_21 ? _GEN_35 : {{48'd0}, leds}; \n  wire [15:0] _GEN_43 = io_BTN_C ? io_SW : {{8'd0}, lastOne}; \n  wire [63:0] _GEN_44 = io_BTN_C ? {{48'd0}, io_SW} : _GEN_42; \n  wire [15:0] _GEN_45 = io_SW > 16'h0 ? _GEN_43 : {{8'd0}, lastOne}; \n  wire [63:0] _GEN_46 = io_SW > 16'h0 ? _GEN_44 : _GEN_42; \n  wire [15:0] _GEN_53 = reset ? 16'hf : _GEN_45; \n  wire [63:0] _GEN_54 = reset ? 64'h0 : _GEN_46; \n  RWSmem BFR ( \n    .clock(BFR_clock),\n    .io_write(BFR_io_write),\n    .io_dataIn(BFR_io_dataIn),\n    .io_dataOut(BFR_io_dataOut)\n  );\n  RWSmem BFR1 ( \n    .clock(BFR1_clock),\n    .io_write(BFR1_io_write),\n    .io_dataIn(BFR1_io_dataIn),\n    .io_dataOut(BFR1_io_dataOut)\n  );\n  edgeDetector CLKEDGE ( \n    .clock(CLKEDGE_clock),\n    .reset(CLKEDGE_reset),\n    .io_INPUT(CLKEDGE_io_INPUT),\n    .io_RISE(CLKEDGE_io_RISE)\n  );\n  assign io_CLK_OUT = clkRec; \n  assign io_DATA_OUT = dataOut; \n  assign io_DBUG = change; \n  assign io_DBUG1 = syncWord; \n  assign io_LED = leds; \n  assign io_DATAREG = BFR1_io_dataOut; \n  assign BFR_clock = clock;\n  assign BFR_io_write = CLKEDGE_io_RISE | syncWord; \n  assign BFR_io_dataIn = _GEN_18[63:0];\n  assign BFR1_clock = clock;\n  assign BFR1_io_write = _GEN_49 >= _T_21 & _T_23; \n  assign BFR1_io_dataIn = _GEN_49 >= _T_21 ? _GEN_34 : 64'h0; \n  assign CLKEDGE_clock = clock;\n  assign CLKEDGE_reset = reset;\n  assign CLKEDGE_io_INPUT = clkRec; ",
        "initial begin\n  `ifdef RANDOMIZE\n    `ifdef INIT_RANDOM\n      `INIT_RANDOM\n    `endif\n    `ifndef VERILATOR\n      `ifdef RANDOMIZE_DELAY\n        #`RANDOMIZE_DELAY begin end\n      `else\n        #0.002 begin end\n      `endif\n    `endif\n`ifdef RANDOMIZE_REG_INIT\n  _RAND_0 = {1{`RANDOM}};\n  inBufr = _RAND_0[1:0];\n  _RAND_1 = {1{`RANDOM}};\n  inBufrPrev = _RAND_1[1:0];\n  _RAND_2 = {1{`RANDOM}};\n  rising = _RAND_2[0:0];\n`endif \n  `endif \nend ",
        "  always @(posedge clock) begin\n    if (reset) begin \n      inBufr <= 2'h0; \n    end else if (io_INPUT) begin \n      if (inBufr < 2'h2) begin \n        inBufr <= _inBufr_T_1; \n      end\n    end else if (~io_INPUT) begin \n      if (inBufr > 2'h0) begin \n        inBufr <= _inBufr_T_3; \n      end\n    end\n    if (reset) begin \n      inBufrPrev <= 2'h0; \n    end else if (io_INPUT) begin \n      if (inBufr < 2'h2) begin \n        inBufrPrev <= inBufr; \n      end\n    end else if (~io_INPUT) begin \n      if (inBufr > 2'h0) begin \n        inBufrPrev <= inBufr; \n      end\n    end\n    if (reset) begin \n      rising <= 1'h0; \n    end else if (rising) begin \n      rising <= 1'h0; \n    end else if (inBufrPrev == 2'h2 & _T_5) begin \n      rising <= 1'h0; \n    end else begin\n      rising <= _GEN_9;\n    end\n  end",
        "`endif \nendmodule",
        "initial begin\n  `ifdef RANDOMIZE\n    `ifdef INIT_RANDOM\n      `INIT_RANDOM\n    `endif\n    `ifndef VERILATOR\n      `ifdef RANDOMIZE_DELAY\n        #`RANDOMIZE_DELAY begin end\n      `else\n        #0.002 begin end\n      `endif\n    `endif\n`ifdef RANDOMIZE_MEM_INIT\n  _RAND_0 = {2{`RANDOM}};\n  for (initvar = 0; initvar < 1; initvar = initvar+1)\n    mem[initvar] = _RAND_0[63:0];\n`endif \n`ifdef RANDOMIZE_REG_INIT\n  _RAND_1 = {1{`RANDOM}};\n  mem_rdwrPort_r_en_pipe_0 = _RAND_1[0:0];\n  _RAND_2 = {1{`RANDOM}};\n  mem_rdwrPort_r_addr_pipe_0 = _RAND_2[0:0];\n`endif \n  `endif \nend ",
        "  always @(posedge clock) begin\n    if (mem_rdwrPort_w_en & mem_rdwrPort_w_mask) begin\n      mem[mem_rdwrPort_w_addr] <= mem_rdwrPort_w_data; \n    end\n    mem_rdwrPort_r_en_pipe_0 <= 1'h1 & ~io_write;\n    if (1'h1 & ~io_write) begin\n      mem_rdwrPort_r_addr_pipe_0 <= 1'h0;\n    end\n  end"
    ]
}