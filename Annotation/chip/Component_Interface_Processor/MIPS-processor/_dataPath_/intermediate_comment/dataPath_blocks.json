{
    "line_num": [
        [
            738,
            738
        ],
        [
            733,
            736
        ],
        [
            723,
            723
        ],
        [
            714,
            721
        ],
        [
            705,
            712
        ],
        [
            700,
            700
        ],
        [
            691,
            698
        ],
        [
            682,
            689
        ],
        [
            678,
            680
        ],
        [
            678,
            678
        ],
        [
            641,
            676
        ],
        [
            632,
            640
        ],
        [
            626,
            626
        ],
        [
            621,
            624
        ],
        [
            607,
            607
        ],
        [
            598,
            605
        ],
        [
            582,
            582
        ],
        [
            576,
            581
        ],
        [
            567,
            573
        ],
        [
            553,
            565
        ],
        [
            536,
            547
        ],
        [
            498,
            533
        ],
        [
            475,
            495
        ],
        [
            468,
            468
        ],
        [
            447,
            467
        ],
        [
            433,
            440
        ],
        [
            422,
            432
        ],
        [
            383,
            417
        ],
        [
            373,
            376
        ],
        [
            336,
            371
        ],
        [
            319,
            319
        ],
        [
            305,
            317
        ],
        [
            293,
            304
        ],
        [
            137,
            286
        ]
    ],
    "blocks": [
        "assign out=temp;",
        "always @(In1,In2)\nbegin\n\ttemp=$signed(In1)+$signed(In2);\nend",
        "\tassign out=tempout;",
        "\talways @(s0,i0,i1)\n\tbegin\t\n\t\n\tif (s0==1'b0)\n\t\ttempout = i0;\n\telse\n\t\ttempout = i1;\t\n\tend\t",
        "module mux2_to_1_16bit (out, i0, i1, s0);\n\t\n\t\n\toutput [15:0] out;\n\tinput [15:0] i0, i1;\n\tinput s0;\n\n\treg [15:0] tempout;",
        "\tassign out=tempout;",
        "\talways @(s0,i0,i1)\n\tbegin\t\n\t\n\tif (s0==1'b0)\n\t\ttempout = i0;\n\telse\n\t\ttempout = i1;\t\n\tend\t",
        "module mux2_to_1_4bit (out, i0, i1, s0);\n\t\n\t\n\toutput [3:0] out;\n\tinput [3:0] i0, i1;\n\tinput s0;\n\n\treg [3:0] tempout;",
        "assign dataOut=tempA;    \n\t\nendmodule",
        "assign dataOut=tempA;    ",
        "always @(dataIn)\nbegin\n\n\tif(dataIn[7]==1'b1)   \n\tbegin\n\t\n\t\tfor(count=0;count<16;count=count+1)\n\t\tbegin\n\t\t\tif(count<8)\n\t\t\tbegin\n\t\t\t\ttempA[count] = dataIn[count];\n\t\t\tend\n\t\t\t\n\t\t\telse\n\t\t\ttempA[count] = 1;\n\t\tend\n\t\n\t\n\tend\n\t\n\telse if(dataIn[7]==1'b0)     \n\tbegin\n\t\n\tfor(count=0;count<16;count=count+1)\n\t\tbegin\n\t\t\tif(count<8)\n\t\t\tbegin\n\t\t\ttempA[count] = dataIn[count];\n\t\t\tend\n\t\t\t\n\t\t\telse\n\t\t\ttempA[count] = 0;\n\t\tend\n\t\t\n\tend\t\nend",
        "module Sign_Extend(dataOut,dataIn);         \n\ninput[7:0] dataIn;\noutput[15:0] dataOut;\n\nreg[15:0] tempA;\n\ninteger count;\n",
        "assign outaddr=temp;",
        "always @(posedge clock)\nbegin\n\ttemp=$signed(temp)+$signed(inaddr);   \nend",
        "\tassign out=tempout;",
        "\talways @(s0,i0,i1)\n\tbegin\t\n\t\n\tif (s0==1'b0)\n\t\ttempout = i0;\n\telse\n\t\ttempout = i1;\t\n\tend\t",
        "\tassign instruction=tempA;",
        "always @(posedge clock)    \nbegin\n\t\n\ttempA=registers[instructionAdd];\n\t\nend",
        "\tbegin\n\t\t\n\t\tfor(i=0;i<256;i=i+1)\n\t\tbegin\n\t\t   registers [i] = i;\n\t\tend\n\tend",
        "module Instruction_Memory(instruction, instructionAdd, clock);    \n\ninput[15:0] instructionAdd;\ninput clock;\noutput[15:0] instruction;    \n\nreg [15:0] registers [255:0];  \n\nreg[15:0] tempA;\n\n\n\tinteger i;    \n",
        "\tassign Out0= out0;\t\t\n\tassign Out1= out1;\n\tassign Out2= out2;\n\tassign Out3= out3;\n\tassign Out4= out4;\n\tassign Out5Active= out5Active;\n\tassign Out5A= out5A;\n\tassign Out5B= out5B;\n\tassign Out5C= out5C;\n\tassign Out6= out6;\n\tassign Out7= out7;\n\tassign Out8= out8;",
        "always @(posedge clock)\nbegin\n\n\tcase ({s0,s1,s2,s3})\n\t\n\t\t\t\n\t\t\t4 'b0000 :  begin  out0 = 1;  out1 = 0;  out2 = 0;  out3 = 0; out4 = 0; out5Active = 1; out5A = s1; out5B = s2; out5C = s3; out6 = 0;  out7 = 0; out8 = 1; end \n\t\t\t\n\t\t\t4 'b0001 :  begin  out0 = 1;  out1 = 0;  out2 = 0;  out3 = 0; out4 = 0; out5Active = 1; out5A = s1; out5B = s2; out5C = s3; out6 = 0;  out7 = 0; out8 = 1; end\n\t\t\t\n\t\t\t4 'b0010 :  begin  out0 = 1;  out1 = 0;  out2 = 0;  out3 = 0; out4 = 0; out5Active = 1; out5A = s1; out5B = s2; out5C = s3; out6 = 0;  out7 = 0; out8 = 1; end\n\t\t\t\n\t\t\t4 'b0011 :  begin  out0 = 1;  out1 = 0;  out2 = 0;  out3 = 0; out4 = 0; out5Active = 1; out5A = s1; out5B = s2; out5C = s3; out6 = 0;  out7 = 0; out8 = 1; end\n\t\t\t\n\t\t\t4 'b0100 :  begin  out0 = 1;  out1 = 0;  out2 = 0;  out3 = 0; out4 = 0; out5Active = 1; out5A = s1; out5B = s2; out5C = s3; out6 = 0;  out7 = 0; out8 = 1; end\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t4 'b0101 :  begin  out0 = 0;  out1 = 0;  out2 = 0;  out3 = 1; out4 = 1; out5Active = 1; out5A = 1; out5B = 0; out5C = 1;  out6 = 0;  out7 = 1; out8 = 1; end\n\t\t\t\n\t\t\t4 'b0110 :  begin  out0 = 0;  out1 = 0;  out2 = 0;  out3 = 0; out4 = 0; out5Active = 1; out5A = 1; out5B = 0; out5C = 1;  out6 = 1;  out7 = 1; out8 = 0; end\n\t\t\t\n\t\t\t4 'b0111 :  begin  out0 = 1;  out1 = 0;  out2 = 1;  out3 = 0; out4 = 0; out5Active = 1; out5A = 0; out5B = 0; out5C = 1;  out6 = 0;  out7 = 0; out8 = 0; end\n\t\t\t\n\t\t\t4 'b1000 :  begin  out0 = 0;  out1 = 1;  out2 = 0;  out3 = 0; out4 = 0; out5Active = 0; out5A = 0; out5B = 0; out5C = 0;  out6 = 0;  out7 = 0; out8 = 0; end\n\t\t\t\n\t\t\t4 'b1001 :  begin  out0 = 1;  out1 = 0;  out2 = 0;  out3 = 0; out4 = 0; out5Active = 1; out5A = 1; out5B = 0; out5C = 1; out6 = 0;  out7 = 0; out8 = 1; end \n\t\t\t\n\t\tendcase",
        "module KURM_controller(Out0, Out1, Out2, Out3, Out4, Out5A, Out5B, Out5C, Out5Active, Out6, Out7, Out8, s0, s1, s2, s3, clock);   \n\ninput s0, s1, s2, s3;\ninput clock;\noutput Out0,  Out1,  Out2,  Out3, Out4,  Out5A, Out5B, Out5C, Out5Active, Out6, Out7, Out8;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreg  out0,  out1,  out2,  out3, out4, out5A, out5B, out5C, out5Active, out6,  out7, out8;",
        "\tassign Aout=tempA;",
        "always @(posedge clock,clear)     \nbegin\n\n\tif(clear==1'b0)    \n\tbegin\n\n\t\tfor(count=0;count<16;count=count+1)\n\t\tbegin\n\t\t\tregisters[count] = 0;\n\t\tend\n\n\tend\n\t\n\ttempA=registers[Aadd];\n\ttempB=registers[Badd];\n\t\n\tif(load==1'b1)   \n\tbegin\n\tregisters[Cadd]=Cin;\n\tend\t\nend",
        "\tinitial\n\tbegin\n\t\t\n\t\tfor(i=0;i<16;i=i+1)\n\t\tbegin\n\t\t\tregisters [i] = i[15:0];\n\t\tend\n\tend",
        "module register_file (Aout,Bout,Cin,Aadd,Badd,Cadd,load,clear,clock);        \n\ninput[3:0] Aadd,Badd,Cadd;    \ninput[15:0] Cin;\ninput load,clear,clock;\noutput[15:0] Aout,Bout;\n\nreg [15:0] registers [15:0];\n\n\tinteger i;    \n",
        "module eight_bit_UniversalShiftRegister(out,in,c0,c1,clk,enb,sli,sri);        \n\ninput [7:0] in;    \ninput clk,enb,sli,sri,c0,c1;\noutput [7:0] out;\n\nwire [3:0] in1,in2,out1,out2;\n\n\nassign in1[0]=in[0];   \nassign in1[1]=in[1];\nassign in1[2]=in[2];\nassign in1[3]=in[3];\n\n\nassign in2[0]=in[4];\nassign in2[1]=in[5];\nassign in2[2]=in[6];\nassign in2[3]=in[7];\n\n\nfour_bit_UniversalShiftRegister shift1(out1,in1,c0,c1,clk,enb,sli,in[4]);    \nfour_bit_UniversalShiftRegister shift2(out2,in2,c0,c1,clk,enb,in[3],sri);    \n\nassign out[0]=out1[0];  \nassign out[1]=out1[1];\nassign out[2]=out1[2];\nassign out[3]=out1[3];\n\nassign out[4]=out2[0];\nassign out[5]=out2[1];\nassign out[6]=out2[2];\nassign out[7]=out2[3];\n\nendmodule",
        "\tassign out[3]=tempo1;\t\t\n\tassign out[2]=tempo2;\n\tassign out[1]=tempo3;\n\tassign out[0]=tempo4;",
        "always @(posedge clk)     \n\tbegin\n\t\tif(enb==1'b1)\n\t\t\tbegin\n\t\t\t\tif(c1==1'b0 && c0==1'b0)\n\t\t\t\tbegin\n\t\t\t\t\t\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if(c1==1'b0 && c0==1'b1)\n\t\t\t\tbegin\n\t\t\t\t\ttempo1=sri;\n\t\t\t\t\ttempo2=in[3];\n\t\t\t\t\ttempo3=in[2];\n\t\t\t\t\ttempo4=in[1];\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse if(c1==1'b1 && c0==1'b0) \n\t\t\t\tbegin\n\t\t\t\t\ttempo1=in[2];\n\t\t\t\t\ttempo2=in[1];\n\t\t\t\t\ttempo3=in[0];\n\t\t\t\t\ttempo4=sli;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\telse \n\t\t\t\tbegin\n\t\t\t\t\ttempo1=in[3];\n\t\t\t\t\ttempo2=in[2];\n\t\t\t\t\ttempo3=in[1];\n\t\t\t\t\ttempo4=in[0];\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\n\tend",
        "\tassign dataOut=Out;   ",
        "always @(posedge clock)     \nbegin\n\n\tif(regRead==1'b1)     \n\tbegin\n\tOut=registers[dataInAdd];\n\tend\n\t\n\tif(regWrite==1'b1)    \n\tbegin\n\tregisters[dataInAdd]=dataIn;\n\tend\t\nend",
        "module Data_Memory(dataOut,dataIn,dataInAdd,regWrite,regRead,clock);  \n\ninput[15:0] dataInAdd;    \ninput[15:0] dataIn;\ninput regWrite, regRead, clock;\noutput[15:0] dataOut;\n\nreg [15:0] registers [1023:0];   \n\nreg [15:0] Out;\n\n\t",
        "always @(aluActiveIn,aluOpB1, aluOpB2, aluOpB3,dataIn1, dataIn2)\nbegin\n\tzero=0;cOut=0; lt=0; gt=0;overflow=0; cIn=0;\n\t\n\tif (aluActiveIn == 1 && aluOpB1 == 0 && aluOpB2 == 0 && aluOpB3 == 0)\n\tbegin\n\t\tdataOut=$signed(dataIn1) + $signed(dataIn2);\n\t\t\n\t\t\n\t\ttemp2=$signed(dataIn1) + $signed(dataIn2);\n\t\ttemp3=dataIn1;\n\t\ttemp4=dataIn2;\n\t\ttemp1=(temp3)+(temp4);\n\t\tcIn=temp1[15];\n\t\tcOut=temp2[16];\n\t\toverflow=cIn^cOut;\n\t\t\n\t\tif(($signed(dataIn1) - $signed(dataIn2))<0)\n\t\tbegin\n\t\t\tlt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))>0)\n\t\tbegin\n\t\t\tgt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))==0)\n\t\tbegin\n\t\t\tzero=1;\n\t\tend\n\t\t\n\tend\n\t\n\tif (aluActiveIn == 1 && aluOpB1 == 0 && aluOpB2 == 0 && aluOpB3 == 1)\n\tbegin\n\t\n\t\tdataOut=$signed(dataIn1) - $signed(dataIn2);\n\t\t\n\t\ttemp2=$signed(dataIn1) + $signed(dataIn2);\n\t\ttemp3=dataIn1;\n\t\ttemp4=dataIn2;\n\t\ttemp1=temp3+temp4;\n\t\tcIn=temp1[15];\n\t\tcOut=temp2[16];\n\t\toverflow=cIn^cOut;\n\t\t\n\t\tif(($signed(dataIn1) - $signed(dataIn2))<0)\n\t\tbegin\n\t\t\tlt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))>0)\n\t\tbegin\n\t\t\tgt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))==0)\n\t\tbegin\n\t\t\tzero=1;\n\t\tend\n\t\t\n\tend\n\t\n\tif (aluActiveIn == 1 && aluOpB1 == 0 && aluOpB2 == 1 && aluOpB3 == 0)\n\tbegin\n\t\n\t\tdataOut=dataIn1 & dataIn2;\n\t\t\n\t\tif(($signed(dataIn1) - $signed(dataIn2))<0)\n\t\tbegin\n\t\t\tlt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))>0)\n\t\tbegin\n\t\t\tgt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))==0)\n\t\tbegin\n\t\t\tzero=1;\n\t\tend\n\t\t\n\tend\n\t\n\tif (aluActiveIn == 1 && aluOpB1 == 0 && aluOpB2 == 1 && aluOpB3 == 1)\n\tbegin\n\t\n\t\tdataOut=dataIn1 | dataIn2;\n\t\t\n\t\tif(($signed(dataIn1) - $signed(dataIn2))<0)\n\t\tbegin\n\t\t\tlt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))>0)\n\t\tbegin\n\t\t\tgt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))==0)\n\t\tbegin\n\t\t\tzero=1;\n\t\tend\n\t\t\n\tend\n\t\n\tif (aluActiveIn == 1 && aluOpB1 == 1 && aluOpB2 == 0 && aluOpB3 == 0)\n\tbegin\n\t\t\n\t\tif(($signed(dataIn1) - $signed(dataIn2))<0)\n\t\tbegin\n\t\t\tlt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))>0)\n\t\tbegin\n\t\t\tgt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))==0)\n\t\tbegin\n\t\t\tzero=1;\n\t\tend\n\n\t\tdataOut=lt;\n\t\t\n\tend\n\t\n\tif (aluActiveIn == 1 && aluOpB1 == 1 && aluOpB2 == 0 && aluOpB3 == 1)\n\tbegin\n\t\n\t\tdataOut=dataIn1 + dataIn2;\n\t\t\n\t\ttemp2=$signed(dataIn1) + $signed(dataIn2);\n\t\ttemp3=dataIn1;\n\t\ttemp4=dataIn2;\n\t\ttemp1=temp3+temp4;\n\t\tcIn=temp1[15];\n\t\tcOut=temp2[16];\n\t\toverflow=cIn^cOut;\n\t\t\n\t\tif(($signed(dataIn1) - $signed(dataIn2))<0)\n\t\tbegin\n\t\t\tlt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))>0)\n\t\tbegin\n\t\t\tgt=1;\n\t\tend\n\t\telse if(($signed(dataIn1) - $signed(dataIn2))==0)\n\t\tbegin\n\t\t\tzero=1;\n\t\tend\n\t\t\n\tend\n\t\n\nend"
    ]
}