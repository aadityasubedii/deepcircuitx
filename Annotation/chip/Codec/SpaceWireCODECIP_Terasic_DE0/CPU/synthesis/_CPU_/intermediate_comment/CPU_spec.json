{
    "spec": "Module name: CPU. Module specification: The CPU module is a top-level design for a CPU system with various peripherals and interfaces. It implements a system-on-chip design, likely for specialized applications involving space communication. The module includes a CPU core, memory (SDRAM and on-chip), JTAG UART, and several SpaceWire (SPW) related interfaces. It has input ports for clock (clk_clk), reset (reset_reset_n), and various SpaceWire-related signals, while output ports control SDRAM operations, manage SpaceWire communication, and drive display and LED outputs. The module also features a bidirectional SDRAM data bus (sdram_dq). Internally, it uses numerous signals for data and instruction management, debugging, interrupt handling, and reset control. The design is organized into several sub-modules and components, including a CPU core, memory controllers, Sp",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: CPU\n\nExplanation: This module appears to be a top-level design for a CPU system with various peripherals and interfaces. It includes components such as a CPU core, memory (SDRAM and on-chip), JTAG UART, and several SpaceWire (SPW) related interfaces. The module interconnects these components using an interconnect fabric (mm_interconnect_0) and manages reset and interrupt signals. It likely represents a system-on-chip design for a specialized application, possibly involving space communication given the presence of SpaceWire components."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\n- clk_clk: Clock input\n- reset_reset_n: Active-low reset input\n- spw_state_export: SpaceWire state input (3 bits)\n- spw_tick_o_export: SpaceWire tick output signal input\n- spw_time_o_export: SpaceWire time output signal input (8 bits)\n- spw_data_i_export: SpaceWire data input (9 bits)\n- spw_tx_full_export: SpaceWire transmit buffer full signal input\n- spw_rx_empty_export: SpaceWire receive buffer empty signal input\n\nExplanation: These inputs provide clock, reset, and various SpaceWire-related signals to the CPU module. They allow the module to synchronize operations, reset the system, and receive status and data from SpaceWire interfaces.\n\nOutput ports:\n- sdram_addr: SDRAM address output (12 bits)\n- sdram_ba: SDRAM bank address output (2 bits)\n- sdram_cas_n: SDRAM column address strobe output\n- sdram_cke: SDRAM clock enable output\n- sdram_cs_n: SDRAM chip select output\n- sdram_ras_n: SDRAM row address strobe output\n- sdram_we_n: SDRAM write enable output\n- spw_tx_div_export: SpaceWire transmit clock divider output (7 bits)\n- spw_config_export: SpaceWire configuration output (3 bits)\n- spw_tick_in_export: SpaceWire tick input signal output\n- spw_time_in_export: SpaceWire time input signal output (8 bits)\n- spw_reset_export: SpaceWire reset output\n- spw_data_rd_export: SpaceWire data read signal output\n- spw_data_wr_export: SpaceWire data write signal output\n- spw_data_o_export: SpaceWire data output (9 bits)\n- display7seg_export: 7-segment display output (32 bits)\n- led_export: LED output (10 bits)\n\nExplanation: These outputs control SDRAM operations, manage SpaceWire communication, and drive display and LED outputs. They allow the CPU to interact with external memory, configure and communicate through SpaceWire interfaces, and provide visual feedback through displays and LEDs.\n\nInout port:\n- sdram_dq: SDRAM data bus (16 bits)\n\nExplanation: This bidirectional port is used for reading and writing data to the SDRAM, allowing the CPU to exchange data with the external memory."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\n[cpu_data_master_waitrequest, cpu_data_master_writedata, cpu_data_master_address, cpu_data_master_write, cpu_data_master_read, cpu_data_master_readdata, cpu_data_master_debugaccess, cpu_data_master_byteenable, cpu_instruction_master_waitrequest, cpu_instruction_master_address, cpu_instruction_master_read, cpu_instruction_master_readdata, mm_interconnect_0_cpu_jtag_debug_module_waitrequest, mm_interconnect_0_cpu_jtag_debug_module_writedata, mm_interconnect_0_cpu_jtag_debug_module_address, mm_interconnect_0_cpu_jtag_debug_module_write, mm_interconnect_0_cpu_jtag_debug_module_read, mm_interconnect_0_cpu_jtag_debug_module_readdata, mm_interconnect_0_cpu_jtag_debug_module_debugaccess, mm_interconnect_0_cpu_jtag_debug_module_byteenable, irq_mapper_receiver0_irq, cpu_d_irq_irq, rst_controller_reset_out_reset, rst_controller_reset_out_reset_req]\n\nExplanation:\nThese internal signals are used for various purposes within the CPU module:\n\n1. cpu_data_master_* signals: These are used for the CPU's data master interface, handling data read/write operations, addressing, and control.\n\n2. cpu_instruction_master_* signals: These manage the CPU's instruction fetch operations, including address and data transfer for instructions.\n\n3. mm_interconnect_0_cpu_jtag_debug_module_* signals: These signals are part of the JTAG debug interface, allowing for debugging and monitoring of the CPU.\n\n4. irq_mapper_receiver0_irq and cpu_d_irq_irq: These signals are used for interrupt handling within the CPU system.\n\n5. rst_controller_reset_out_reset and rst_controller_reset_out_reset_req: These signals manage the reset functionality for various components in the system.\n\nThese internal signals facilitate communication between different components of the CPU module, manage data and instruction flow, enable debugging, handle interrupts, and control system reset functionality."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n`timescale 1 ps / 1 ps\nmodule CPU (\n\t\tinput  wire        clk_clk,             \n\t\tinput  wire        reset_reset_n,       \n\t\toutput wire [11:0] sdram_addr,          \n\t\toutput wire [1:0]  sdram_ba,            \n\t\toutput wire        sdram_cas_n,         \n\t\toutput wire        sdram_cke,           \n\t\toutput wire        sdram_cs_n,          \n\t\tinout  wire [15:0] sdram_dq,            \n\t\toutput wire [1:0]  sdram_dqm,           \n\t\toutput wire        sdram_ras_n,         \n\t\toutput wire        sdram_we_n,          \n\t\toutput wire [6:0]  spw_tx_div_export,   \n\t\toutput wire [2:0]  spw_config_export,   \n\t\toutput wire        spw_tick_in_export,  \n\t\toutput wire [7:0]  spw_time_in_export,  \n\t\toutput wire        spw_reset_export,    \n\t\tinput  wire [2:0]  spw_state_export,    \n\t\tinput  wire        spw_tick_o_export,   \n\t\tinput  wire [7:0]  spw_time_o_export,   \n\t\tinput  wire [8:0]  spw_data_i_export,   \n\t\tinput  wire        spw_tx_full_export,  \n\t\tinput  wire        spw_rx_empty_export, \n\t\toutput wire        spw_data_rd_export,  \n\t\toutput wire        spw_data_wr_export,  \n\t\toutput wire [8:0]  spw_data_o_export,   \n\t\toutput wire [31:0] display7seg_export,  \n\t\toutput wire [9:0]  led_export           \n\t);\n\n\twire   [1:0] mm_interconnect_0_spw_state_s1_address;                    \n\twire  [31:0] mm_interconnect_0_spw_state_s1_readdata;                   \n\twire   [1:0] mm_interconnect_0_spw_time_o_s1_address;                   \n\twire  [31:0] mm_interconnect_0_spw_time_o_s1_readdata;                  \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest; \n\twire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;   \n\twire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;     \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;  \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;       \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;        \n\twire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;    \n\twire         cpu_data_master_waitrequest;                               \n\twire  [31:0] cpu_data_master_writedata;                                 \n\twire  [24:0] cpu_data_master_address;                                   \n\twire         cpu_data_master_write;                                     \n\twire         cpu_data_master_read;                                      \n\twire  [31:0] cpu_data_master_readdata;                                  \n\twire         cpu_data_master_debugaccess;                               \n\twire   [3:0] cpu_data_master_byteenable;                                \n\twire  [31:0] mm_interconnect_0_onchip_memory2_s1_writedata;             \n\twire   [9:0] mm_interconnect_0_onchip_memory2_s1_address;               \n\twire         mm_interconnect_0_onchip_memory2_s1_chipselect;            \n\twire         mm_interconnect_0_onchip_memory2_s1_clken;                 \n\twire         mm_interconnect_0_onchip_memory2_s1_write;                 \n\twire  [31:0] mm_interconnect_0_onchip_memory2_s1_readdata;              \n\twire   [3:0] mm_interconnect_0_onchip_memory2_s1_byteenable;            \n\twire   [1:0] mm_interconnect_0_spw_rx_empty_s1_address;                 \n\twire  [31:0] mm_interconnect_0_spw_rx_empty_s1_readdata;                \n\twire         mm_interconnect_0_sdram_s1_waitrequest;                    \n\twire  [15:0] mm_interconnect_0_sdram_s1_writedata;                      \n\twire  [21:0] mm_interconnect_0_sdram_s1_address;                        \n\twire         mm_interconnect_0_sdram_s1_chipselect;                     \n\twire         mm_interconnect_0_sdram_s1_write;                          \n\twire         mm_interconnect_0_sdram_s1_read;                           \n\twire  [15:0] mm_interconnect_0_sdram_s1_readdata;                       \n\twire         mm_interconnect_0_sdram_s1_readdatavalid;                  \n\twire   [1:0] mm_interconnect_0_sdram_s1_byteenable;                     \n\twire  [31:0] mm_interconnect_0_display7seg_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_display7seg_s1_address;                  \n\twire         mm_interconnect_0_display7seg_s1_chipselect;               \n\twire         mm_interconnect_0_display7seg_s1_write;                    \n\twire  [31:0] mm_interconnect_0_display7seg_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_tx_div_s1_writedata;                 \n\twire   [1:0] mm_interconnect_0_spw_tx_div_s1_address;                   \n\twire         mm_interconnect_0_spw_tx_div_s1_chipselect;                \n\twire         mm_interconnect_0_spw_tx_div_s1_write;                     \n\twire  [31:0] mm_interconnect_0_spw_tx_div_s1_readdata;                  \n\twire         cpu_instruction_master_waitrequest;                        \n\twire  [24:0] cpu_instruction_master_address;                            \n\twire         cpu_instruction_master_read;                               \n\twire  [31:0] cpu_instruction_master_readdata;                           \n\twire  [31:0] mm_interconnect_0_spw_reset_s1_writedata;                  \n\twire   [1:0] mm_interconnect_0_spw_reset_s1_address;                    \n\twire         mm_interconnect_0_spw_reset_s1_chipselect;                 \n\twire         mm_interconnect_0_spw_reset_s1_write;                      \n\twire  [31:0] mm_interconnect_0_spw_reset_s1_readdata;                   \n\twire   [1:0] mm_interconnect_0_spw_data_i_s1_address;                   \n\twire  [31:0] mm_interconnect_0_spw_data_i_s1_readdata;                  \n\twire   [1:0] mm_interconnect_0_spw_tick_o_s1_address;                   \n\twire  [31:0] mm_interconnect_0_spw_tick_o_s1_readdata;                  \n\twire  [31:0] mm_interconnect_0_spw_tick_in_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_spw_tick_in_s1_address;                  \n\twire         mm_interconnect_0_spw_tick_in_s1_chipselect;               \n\twire         mm_interconnect_0_spw_tick_in_s1_write;                    \n\twire  [31:0] mm_interconnect_0_spw_tick_in_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_data_rd_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_spw_data_rd_s1_address;                  \n\twire         mm_interconnect_0_spw_data_rd_s1_chipselect;               \n\twire         mm_interconnect_0_spw_data_rd_s1_write;                    \n\twire  [31:0] mm_interconnect_0_spw_data_rd_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_time_in_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_spw_time_in_s1_address;                  \n\twire         mm_interconnect_0_spw_time_in_s1_chipselect;               \n\twire         mm_interconnect_0_spw_time_in_s1_write;                    \n\twire  [31:0] mm_interconnect_0_spw_time_in_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_data_wr_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_spw_data_wr_s1_address;                  \n\twire         mm_interconnect_0_spw_data_wr_s1_chipselect;               \n\twire         mm_interconnect_0_spw_data_wr_s1_write;                    \n\twire  [31:0] mm_interconnect_0_spw_data_wr_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_data_o_s1_writedata;                 \n\twire   [1:0] mm_interconnect_0_spw_data_o_s1_address;                   \n\twire         mm_interconnect_0_spw_data_o_s1_chipselect;                \n\twire         mm_interconnect_0_spw_data_o_s1_write;                     \n\twire  [31:0] mm_interconnect_0_spw_data_o_s1_readdata;                  \n\twire   [1:0] mm_interconnect_0_spw_tx_full_s1_address;                  \n\twire  [31:0] mm_interconnect_0_spw_tx_full_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_config_s1_writedata;                 \n\twire   [1:0] mm_interconnect_0_spw_config_s1_address;                   \n\twire         mm_interconnect_0_spw_config_s1_chipselect;                \n\twire         mm_interconnect_0_spw_config_s1_write;                     \n\twire  [31:0] mm_interconnect_0_spw_config_s1_readdata;                  \n\twire  [31:0] mm_interconnect_0_led_s1_writedata;                        \n\twire   [1:0] mm_interconnect_0_led_s1_address;                          \n\twire         mm_interconnect_0_led_s1_chipselect;                       \n\twire         mm_interconnect_0_led_s1_write;                            \n\twire  [31:0] mm_interconnect_0_led_s1_readdata;                         \n\twire         mm_interconnect_0_cpu_jtag_debug_module_waitrequest;       \n\twire  [31:0] mm_interconnect_0_cpu_jtag_debug_module_writedata;         \n\twire   [8:0] mm_interconnect_0_cpu_jtag_debug_module_address;           \n\twire         mm_interconnect_0_cpu_jtag_debug_module_write;             \n\twire         mm_interconnect_0_cpu_jtag_debug_module_read;              \n\twire  [31:0] mm_interconnect_0_cpu_jtag_debug_module_readdata;          \n\twire         mm_interconnect_0_cpu_jtag_debug_module_debugaccess;       \n\twire   [3:0] mm_interconnect_0_cpu_jtag_debug_module_byteenable;        \n\twire         irq_mapper_receiver0_irq;                                  \n\twire  [31:0] cpu_d_irq_irq;                                             \n\twire         rst_controller_reset_out_reset;                            \n\twire         rst_controller_reset_out_reset_req;                        \n\n\tCPU_cpu cpu (\n\t\t.clk                                   (clk_clk),                                             \n\t\t.reset_n                               (~rst_controller_reset_out_reset),                     \n\t\t.reset_req                             (rst_controller_reset_out_reset_req),                  \n\t\t.d_address                             (cpu_data_master_address),                             \n\t\t.d_byteenable                          (cpu_data_master_byteenable),                          \n\t\t.d_read                                (cpu_data_master_read),                                \n\t\t.d_readdata                            (cpu_data_master_readdata),                            \n\t\t.d_waitrequest                         (cpu_data_master_waitrequest),                         \n\t\t.d_write                               (cpu_data_master_write),                               \n\t\t.d_writedata                           (cpu_data_master_writedata),                           \n\t\t.jtag_debug_module_debugaccess_to_roms (cpu_data_master_debugaccess),                         \n\t\t.i_address                             (cpu_instruction_master_address),                      \n\t\t.i_read                                (cpu_instruction_master_read),                         \n\t\t.i_readdata                            (cpu_instruction_master_readdata),                     \n\t\t.i_waitrequest                         (cpu_instruction_master_waitrequest),                  \n\t\t.d_irq                                 (cpu_d_irq_irq),                                       \n\t\t.jtag_debug_module_resetrequest        (),                                                    \n\t\t.jtag_debug_module_address             (mm_interconnect_0_cpu_jtag_debug_module_address),     \n\t\t.jtag_debug_module_byteenable          (mm_interconnect_0_cpu_jtag_debug_module_byteenable),  \n\t\t.jtag_debug_module_debugaccess         (mm_interconnect_0_cpu_jtag_debug_module_debugaccess), \n\t\t.jtag_debug_module_read                (mm_interconnect_0_cpu_jtag_debug_module_read),        \n\t\t.jtag_debug_module_readdata            (mm_interconnect_0_cpu_jtag_debug_module_readdata),    \n\t\t.jtag_debug_module_waitrequest         (mm_interconnect_0_cpu_jtag_debug_module_waitrequest), \n\t\t.jtag_debug_module_write               (mm_interconnect_0_cpu_jtag_debug_module_write),       \n\t\t.jtag_debug_module_writedata           (mm_interconnect_0_cpu_jtag_debug_module_writedata),   \n\t\t.no_ci_readra                          ()                                                     \n\t);\n\n\tCPU_jtag_uart jtag_uart (\n\t\t.clk            (clk_clk),                                                   \n\t\t.rst_n          (~rst_controller_reset_out_reset),                           \n\t\t.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  \n\t\t.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     \n\t\t.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       \n\t\t.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    \n\t\t.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      \n\t\t.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   \n\t\t.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), \n\t\t.av_irq         (irq_mapper_receiver0_irq)                                   \n\t);\n\n\tCPU_onchip_memory2 onchip_memory2 (\n\t\t.clk        (clk_clk),                                        \n\t\t.address    (mm_interconnect_0_onchip_memory2_s1_address),    \n\t\t.clken      (mm_interconnect_0_onchip_memory2_s1_clken),      \n\t\t.chipselect (mm_interconnect_0_onchip_memory2_s1_chipselect), \n\t\t.write      (mm_interconnect_0_onchip_memory2_s1_write),      \n\t\t.readdata   (mm_interconnect_0_onchip_memory2_s1_readdata),   \n\t\t.writedata  (mm_interconnect_0_onchip_memory2_s1_writedata),  \n\t\t.byteenable (mm_interconnect_0_onchip_memory2_s1_byteenable), \n\t\t.reset      (rst_controller_reset_out_reset),                 \n\t\t.reset_req  (rst_controller_reset_out_reset_req)              \n\t);\n\n\tCPU_sdram sdram (\n\t\t.clk            (clk_clk),                                  \n\t\t.reset_n        (~rst_controller_reset_out_reset),          \n\t\t.az_addr        (mm_interconnect_0_sdram_s1_address),       \n\t\t.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   \n\t\t.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    \n\t\t.az_data        (mm_interconnect_0_sdram_s1_writedata),     \n\t\t.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         \n\t\t.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        \n\t\t.za_data        (mm_interconnect_0_sdram_s1_readdata),      \n\t\t.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), \n\t\t.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   \n\t\t.zs_addr        (sdram_addr),                               \n\t\t.zs_ba          (sdram_ba),                                 \n\t\t.zs_cas_n       (sdram_cas_n),                              \n\t\t.zs_cke         (sdram_cke),                                \n\t\t.zs_cs_n        (sdram_cs_n),                               \n\t\t.zs_dq          (sdram_dq),                                 \n\t\t.zs_dqm         (sdram_dqm),                                \n\t\t.zs_ras_n       (sdram_ras_n),                              \n\t\t.zs_we_n        (sdram_we_n)                                \n\t);\n\n\tCPU_spw_tx_div spw_tx_div (\n\t\t.clk        (clk_clk),                                    \n\t\t.reset_n    (~rst_controller_reset_out_reset),            \n\t\t.address    (mm_interconnect_0_spw_tx_div_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_tx_div_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_tx_div_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_tx_div_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_tx_div_s1_readdata),   \n\t\t.out_port   (spw_tx_div_export)                           \n\t);\n\n\tCPU_spw_config spw_config (\n\t\t.clk        (clk_clk),                                    \n\t\t.reset_n    (~rst_controller_reset_out_reset),            \n\t\t.address    (mm_interconnect_0_spw_config_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_config_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_config_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_config_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_config_s1_readdata),   \n\t\t.out_port   (spw_config_export)                           \n\t);\n\n\tCPU_spw_tick_in spw_tick_in (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_spw_tick_in_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_tick_in_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_tick_in_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_tick_in_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_tick_in_s1_readdata),   \n\t\t.out_port   (spw_tick_in_export)                           \n\t);\n\n\tCPU_spw_time_in spw_time_in (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_spw_time_in_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_time_in_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_time_in_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_time_in_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_time_in_s1_readdata),   \n\t\t.out_port   (spw_time_in_export)                           \n\t);\n\n\tCPU_spw_data_o spw_data_o (\n\t\t.clk        (clk_clk),                                    \n\t\t.reset_n    (~rst_controller_reset_out_reset),            \n\t\t.address    (mm_interconnect_0_spw_data_o_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_data_o_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_data_o_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_data_o_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_data_o_s1_readdata),   \n\t\t.out_port   (spw_data_o_export)                           \n\t);\n\n\tCPU_spw_tick_in spw_data_wr (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_spw_data_wr_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_data_wr_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_data_wr_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_data_wr_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_data_wr_s1_readdata),   \n\t\t.out_port   (spw_data_wr_export)                           \n\t);\n\n\tCPU_spw_data_i spw_data_i (\n\t\t.clk      (clk_clk),                                  \n\t\t.reset_n  (~rst_controller_reset_out_reset),          \n\t\t.address  (mm_interconnect_0_spw_data_i_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_data_i_s1_readdata), \n\t\t.in_port  (spw_data_i_export)                         \n\t);\n\n\tCPU_spw_tick_in spw_data_rd (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_spw_data_rd_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_data_rd_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_data_rd_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_data_rd_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_data_rd_s1_readdata),   \n\t\t.out_port   (spw_data_rd_export)                           \n\t);\n\n\tCPU_spw_rx_empty spw_rx_empty (\n\t\t.clk      (clk_clk),                                    \n\t\t.reset_n  (~rst_controller_reset_out_reset),            \n\t\t.address  (mm_interconnect_0_spw_rx_empty_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_rx_empty_s1_readdata), \n\t\t.in_port  (spw_rx_empty_export)                         \n\t);\n\n\tCPU_spw_rx_empty spw_tx_full (\n\t\t.clk      (clk_clk),                                   \n\t\t.reset_n  (~rst_controller_reset_out_reset),           \n\t\t.address  (mm_interconnect_0_spw_tx_full_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_tx_full_s1_readdata), \n\t\t.in_port  (spw_tx_full_export)                         \n\t);\n\n\tCPU_spw_time_o spw_time_o (\n\t\t.clk      (clk_clk),                                  \n\t\t.reset_n  (~rst_controller_reset_out_reset),          \n\t\t.address  (mm_interconnect_0_spw_time_o_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_time_o_s1_readdata), \n\t\t.in_port  (spw_time_o_export)                         \n\t);\n\n\tCPU_spw_rx_empty spw_tick_o (\n\t\t.clk      (clk_clk),                                  \n\t\t.reset_n  (~rst_controller_reset_out_reset),          \n\t\t.address  (mm_interconnect_0_spw_tick_o_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_tick_o_s1_readdata), \n\t\t.in_port  (spw_tick_o_export)                         \n\t);\n\n\tCPU_spw_state spw_state (\n\t\t.clk      (clk_clk),                                 \n\t\t.reset_n  (~rst_controller_reset_out_reset),         \n\t\t.address  (mm_interconnect_0_spw_state_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_state_s1_readdata), \n\t\t.in_port  (spw_state_export)                         \n\t);\n\n\tCPU_spw_tick_in spw_reset (\n\t\t.clk        (clk_clk),                                   \n\t\t.reset_n    (~rst_controller_reset_out_reset),           \n\t\t.address    (mm_interconnect_0_spw_reset_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_reset_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_reset_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_reset_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_reset_s1_readdata),   \n\t\t.out_port   (spw_reset_export)                           \n\t);\n\n\tCPU_display7seg display7seg (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_display7seg_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_display7seg_s1_write),     \n\t\t.writedata  (mm_interconnect_0_display7seg_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_display7seg_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_display7seg_s1_readdata),   \n\t\t.out_port   (display7seg_export)                           \n\t);\n\n\tCPU_led led (\n\t\t.clk        (clk_clk),                             \n\t\t.reset_n    (~rst_controller_reset_out_reset),     \n\t\t.address    (mm_interconnect_0_led_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_led_s1_write),     \n\t\t.writedata  (mm_interconnect_0_led_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_led_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_led_s1_readdata),   \n\t\t.out_port   (led_export)                           \n\t);\n\n\tCPU_mm_interconnect_0 mm_interconnect_0 (\n\t\t.clk_0_clk_clk                           (clk_clk),                                                   \n\t\t.cpu_reset_n_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                            \n\t\t.cpu_data_master_address                 (cpu_data_master_address),                                   \n\t\t.cpu_data_master_waitrequest             (cpu_data_master_waitrequest),                               \n\t\t.cpu_data_master_byteenable              (cpu_data_master_byteenable),                                \n\t\t.cpu_data_master_read                    (cpu_data_master_read),                                      \n\t\t.cpu_data_master_readdata                (cpu_data_master_readdata),                                  \n\t\t.cpu_data_master_write                   (cpu_data_master_write),                                     \n\t\t.cpu_data_master_writedata               (cpu_data_master_writedata),                                 \n\t\t.cpu_data_master_debugaccess             (cpu_data_master_debugaccess),                               \n\t\t.cpu_instruction_master_address          (cpu_instruction_master_address),                            \n\t\t.cpu_instruction_master_waitrequest      (cpu_instruction_master_waitrequest),                        \n\t\t.cpu_instruction_master_read             (cpu_instruction_master_read),                               \n\t\t.cpu_instruction_master_readdata         (cpu_instruction_master_readdata),                           \n\t\t.cpu_jtag_debug_module_address           (mm_interconnect_0_cpu_jtag_debug_module_address),           \n\t\t.cpu_jtag_debug_module_write             (mm_interconnect_0_cpu_jtag_debug_module_write),             \n\t\t.cpu_jtag_debug_module_read              (mm_interconnect_0_cpu_jtag_debug_module_read),              \n\t\t.cpu_jtag_debug_module_readdata          (mm_interconnect_0_cpu_jtag_debug_module_readdata),          \n\t\t.cpu_jtag_debug_module_writedata         (mm_interconnect_0_cpu_jtag_debug_module_writedata),         \n\t\t.cpu_jtag_debug_module_byteenable        (mm_interconnect_0_cpu_jtag_debug_module_byteenable),        \n\t\t.cpu_jtag_debug_module_waitrequest       (mm_interconnect_0_cpu_jtag_debug_module_waitrequest),       \n\t\t.cpu_jtag_debug_module_debugaccess       (mm_interconnect_0_cpu_jtag_debug_module_debugaccess),       \n\t\t.display7seg_s1_address                  (mm_interconnect_0_display7seg_s1_address),                  \n\t\t.display7seg_s1_write                    (mm_interconnect_0_display7seg_s1_write),                    \n\t\t.display7seg_s1_readdata                 (mm_interconnect_0_display7seg_s1_readdata),                 \n\t\t.display7seg_s1_writedata                (mm_interconnect_0_display7seg_s1_writedata),                \n\t\t.display7seg_s1_chipselect               (mm_interconnect_0_display7seg_s1_chipselect),               \n\t\t.jtag_uart_avalon_jtag_slave_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     \n\t\t.jtag_uart_avalon_jtag_slave_write       (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),       \n\t\t.jtag_uart_avalon_jtag_slave_read        (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),        \n\t\t.jtag_uart_avalon_jtag_slave_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    \n\t\t.jtag_uart_avalon_jtag_slave_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   \n\t\t.jtag_uart_avalon_jtag_slave_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), \n\t\t.jtag_uart_avalon_jtag_slave_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  \n\t\t.led_s1_address                          (mm_interconnect_0_led_s1_address),                          \n\t\t.led_s1_write                            (mm_interconnect_0_led_s1_write),                            \n\t\t.led_s1_readdata                         (mm_interconnect_0_led_s1_readdata),                         \n\t\t.led_s1_writedata                        (mm_interconnect_0_led_s1_writedata),                        \n\t\t.led_s1_chipselect                       (mm_interconnect_0_led_s1_chipselect),                       \n\t\t.onchip_memory2_s1_address               (mm_interconnect_0_onchip_memory2_s1_address),               \n\t\t.onchip_memory2_s1_write                 (mm_interconnect_0_onchip_memory2_s1_write),                 \n\t\t.onchip_memory2_s1_readdata              (mm_interconnect_0_onchip_memory2_s1_readdata),              \n\t\t.onchip_memory2_s1_writedata             (mm_interconnect_0_onchip_memory2_s1_writedata),             \n\t\t.onchip_memory2_s1_byteenable            (mm_interconnect_0_onchip_memory2_s1_byteenable),            \n\t\t.onchip_memory2_s1_chipselect            (mm_interconnect_0_onchip_memory2_s1_chipselect),            \n\t\t.onchip_memory2_s1_clken                 (mm_interconnect_0_onchip_memory2_s1_clken),                 \n\t\t.sdram_s1_address                        (mm_interconnect_0_sdram_s1_address),                        \n\t\t.sdram_s1_write                          (mm_interconnect_0_sdram_s1_write),                          \n\t\t.sdram_s1_read                           (mm_interconnect_0_sdram_s1_read),                           \n\t\t.sdram_s1_readdata                       (mm_interconnect_0_sdram_s1_readdata),                       \n\t\t.sdram_s1_writedata                      (mm_interconnect_0_sdram_s1_writedata),                      \n\t\t.sdram_s1_byteenable                     (mm_interconnect_0_sdram_s1_byteenable),                     \n\t\t.sdram_s1_readdatavalid                  (mm_interconnect_0_sdram_s1_readdatavalid),                  \n\t\t.sdram_s1_waitrequest                    (mm_interconnect_0_sdram_s1_waitrequest),                    \n\t\t.sdram_s1_chipselect                     (mm_interconnect_0_sdram_s1_chipselect),                     \n\t\t.spw_config_s1_address                   (mm_interconnect_0_spw_config_s1_address),                   \n\t\t.spw_config_s1_write                     (mm_interconnect_0_spw_config_s1_write),                     \n\t\t.spw_config_s1_readdata                  (mm_interconnect_0_spw_config_s1_readdata),                  \n\t\t.spw_config_s1_writedata                 (mm_interconnect_0_spw_config_s1_writedata),                 \n\t\t.spw_config_s1_chipselect                (mm_interconnect_0_spw_config_s1_chipselect),                \n\t\t.spw_data_i_s1_address                   (mm_interconnect_0_spw_data_i_s1_address),                   \n\t\t.spw_data_i_s1_readdata                  (mm_interconnect_0_spw_data_i_s1_readdata),                  \n\t\t.spw_data_o_s1_address                   (mm_interconnect_0_spw_data_o_s1_address),                   \n\t\t.spw_data_o_s1_write                     (mm_interconnect_0_spw_data_o_s1_write),                     \n\t\t.spw_data_o_s1_readdata                  (mm_interconnect_0_spw_data_o_s1_readdata),                  \n\t\t.spw_data_o_s1_writedata                 (mm_interconnect_0_spw_data_o_s1_writedata),                 \n\t\t.spw_data_o_s1_chipselect                (mm_interconnect_0_spw_data_o_s1_chipselect),                \n\t\t.spw_data_rd_s1_address                  (mm_interconnect_0_spw_data_rd_s1_address),                  \n\t\t.spw_data_rd_s1_write                    (mm_interconnect_0_spw_data_rd_s1_write),                    \n\t\t.spw_data_rd_s1_readdata                 (mm_interconnect_0_spw_data_rd_s1_readdata),                 \n\t\t.spw_data_rd_s1_writedata                (mm_interconnect_0_spw_data_rd_s1_writedata),                \n\t\t.spw_data_rd_s1_chipselect               (mm_interconnect_0_spw_data_rd_s1_chipselect),               \n\t\t.spw_data_wr_s1_address                  (mm_interconnect_0_spw_data_wr_s1_address),                  \n\t\t.spw_data_wr_s1_write                    (mm_interconnect_0_spw_data_wr_s1_write),                    \n\t\t.spw_data_wr_s1_readdata                 (mm_interconnect_0_spw_data_wr_s1_readdata),                 \n\t\t.spw_data_wr_s1_writedata                (mm_interconnect_0_spw_data_wr_s1_writedata),                \n\t\t.spw_data_wr_s1_chipselect               (mm_interconnect_0_spw_data_wr_s1_chipselect),               \n\t\t.spw_reset_s1_address                    (mm_interconnect_0_spw_reset_s1_address),                    \n\t\t.spw_reset_s1_write                      (mm_interconnect_0_spw_reset_s1_write),                      \n\t\t.spw_reset_s1_readdata                   (mm_interconnect_0_spw_reset_s1_readdata),                   \n\t\t.spw_reset_s1_writedata                  (mm_interconnect_0_spw_reset_s1_writedata),                  \n\t\t.spw_reset_s1_chipselect                 (mm_interconnect_0_spw_reset_s1_chipselect),                 \n\t\t.spw_rx_empty_s1_address                 (mm_interconnect_0_spw_rx_empty_s1_address),                 \n\t\t.spw_rx_empty_s1_readdata                (mm_interconnect_0_spw_rx_empty_s1_readdata),                \n\t\t.spw_state_s1_address                    (mm_interconnect_0_spw_state_s1_address),                    \n\t\t.spw_state_s1_readdata                   (mm_interconnect_0_spw_state_s1_readdata),                   \n\t\t.spw_tick_in_s1_address                  (mm_interconnect_0_spw_tick_in_s1_address),                  \n\t\t.spw_tick_in_s1_write                    (mm_interconnect_0_spw_tick_in_s1_write),                    \n\t\t.spw_tick_in_s1_readdata                 (mm_interconnect_0_spw_tick_in_s1_readdata),                 \n\t\t.spw_tick_in_s1_writedata                (mm_interconnect_0_spw_tick_in_s1_writedata),                \n\t\t.spw_tick_in_s1_chipselect               (mm_interconnect_0_spw_tick_in_s1_chipselect),               \n\t\t.spw_tick_o_s1_address                   (mm_interconnect_0_spw_tick_o_s1_address),                   \n\t\t.spw_tick_o_s1_readdata                  (mm_interconnect_0_spw_tick_o_s1_readdata),                  \n\t\t.spw_time_in_s1_address                  (mm_interconnect_0_spw_time_in_s1_address),                  \n\t\t.spw_time_in_s1_write                    (mm_interconnect_0_spw_time_in_s1_write),                    \n\t\t.spw_time_in_s1_readdata                 (mm_interconnect_0_spw_time_in_s1_readdata),                 \n\t\t.spw_time_in_s1_writedata                (mm_interconnect_0_spw_time_in_s1_writedata),                \n\t\t.spw_time_in_s1_chipselect               (mm_interconnect_0_spw_time_in_s1_chipselect),               \n\t\t.spw_time_o_s1_address                   (mm_interconnect_0_spw_time_o_s1_address),                   \n\t\t.spw_time_o_s1_readdata                  (mm_interconnect_0_spw_time_o_s1_readdata),                  \n\t\t.spw_tx_div_s1_address                   (mm_interconnect_0_spw_tx_div_s1_address),                   \n\t\t.spw_tx_div_s1_write                     (mm_interconnect_0_spw_tx_div_s1_write),                     \n\t\t.spw_tx_div_s1_readdata                  (mm_interconnect_0_spw_tx_div_s1_readdata),                  \n\t\t.spw_tx_div_s1_writedata                 (mm_interconnect_0_spw_tx_div_s1_writedata),                 \n\t\t.spw_tx_div_s1_chipselect                (mm_interconnect_0_spw_tx_div_s1_chipselect),                \n\t\t.spw_tx_full_s1_address                  (mm_interconnect_0_spw_tx_full_s1_address),                  \n\t\t.spw_tx_full_s1_readdata                 (mm_interconnect_0_spw_tx_full_s1_readdata)                  \n\t);\n\n\tCPU_irq_mapper irq_mapper (\n\t\t.clk           (clk_clk),                        \n\t\t.reset         (rst_controller_reset_out_reset), \n\t\t.receiver0_irq (irq_mapper_receiver0_irq),       \n\t\t.sender_irq    (cpu_d_irq_irq)                   \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (1),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (1),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller (\n\t\t.reset_in0      (~reset_reset_n),                     \n\t\t.clk            (clk_clk),                            \n\t\t.reset_out      (rst_controller_reset_out_reset),     \n\t\t.reset_req      (rst_controller_reset_out_reset_req), \n\t\t.reset_req_in0  (1'b0),                               \n\t\t.reset_in1      (1'b0),                               \n\t\t.reset_req_in1  (1'b0),                               \n\t\t.reset_in2      (1'b0),                               \n\t\t.reset_req_in2  (1'b0),                               \n\t\t.reset_in3      (1'b0),                               \n\t\t.reset_req_in3  (1'b0),                               \n\t\t.reset_in4      (1'b0),                               \n\t\t.reset_req_in4  (1'b0),                               \n\t\t.reset_in5      (1'b0),                               \n\t\t.reset_req_in5  (1'b0),                               \n\t\t.reset_in6      (1'b0),                               \n\t\t.reset_req_in6  (1'b0),                               \n\t\t.reset_in7      (1'b0),                               \n\t\t.reset_req_in7  (1'b0),                               \n\t\t.reset_in8      (1'b0),                               \n\t\t.reset_req_in8  (1'b0),                               \n\t\t.reset_in9      (1'b0),                               \n\t\t.reset_req_in9  (1'b0),                               \n\t\t.reset_in10     (1'b0),                               \n\t\t.reset_req_in10 (1'b0),                               \n\t\t.reset_in11     (1'b0),                               \n\t\t.reset_req_in11 (1'b0),                               \n\t\t.reset_in12     (1'b0),                               \n\t\t.reset_req_in12 (1'b0),                               \n\t\t.reset_in13     (1'b0),                               \n\t\t.reset_req_in13 (1'b0),                               \n\t\t.reset_in14     (1'b0),                               \n\t\t.reset_req_in14 (1'b0),                               \n\t\t.reset_in15     (1'b0),                               \n\t\t.reset_req_in15 (1'b0)                                \n\t);\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: CPU. Module specification: The CPU module is a top-level design for a CPU system with various peripherals and interfaces. It implements a system-on-chip design, likely for specialized applications involving space communication. The module includes a CPU core, memory (SDRAM and on-chip), JTAG UART, and several SpaceWire (SPW) related interfaces. It has input ports for clock (clk_clk), reset (reset_reset_n), and various SpaceWire-related signals, while output ports control SDRAM operations, manage SpaceWire communication, and drive display and LED outputs. The module also features a bidirectional SDRAM data bus (sdram_dq). Internally, it uses numerous signals for data and instruction management, debugging, interrupt handling, and reset control. The design is organized into several sub-modules and components, including a CPU core, memory controllers, Sp"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: CPU\n\nExplanation: This module appears to be a top-level design for a CPU system with various peripherals and interfaces. It includes components such as a CPU core, memory (SDRAM and on-chip), JTAG UART, and several SpaceWire (SPW) related interfaces. The module interconnects these components using an interconnect fabric (mm_interconnect_0) and manages reset and interrupt signals. It likely represents a system-on-chip design for a specialized application, possibly involving space communication given the presence of SpaceWire components."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\n- clk_clk: Clock input\n- reset_reset_n: Active-low reset input\n- spw_state_export: SpaceWire state input (3 bits)\n- spw_tick_o_export: SpaceWire tick output signal input\n- spw_time_o_export: SpaceWire time output signal input (8 bits)\n- spw_data_i_export: SpaceWire data input (9 bits)\n- spw_tx_full_export: SpaceWire transmit buffer full signal input\n- spw_rx_empty_export: SpaceWire receive buffer empty signal input\n\nExplanation: These inputs provide clock, reset, and various SpaceWire-related signals to the CPU module. They allow the module to synchronize operations, reset the system, and receive status and data from SpaceWire interfaces.\n\nOutput ports:\n- sdram_addr: SDRAM address output (12 bits)\n- sdram_ba: SDRAM bank address output (2 bits)\n- sdram_cas_n: SDRAM column address strobe output\n- sdram_cke: SDRAM clock enable output\n- sdram_cs_n: SDRAM chip select output\n- sdram_ras_n: SDRAM row address strobe output\n- sdram_we_n: SDRAM write enable output\n- spw_tx_div_export: SpaceWire transmit clock divider output (7 bits)\n- spw_config_export: SpaceWire configuration output (3 bits)\n- spw_tick_in_export: SpaceWire tick input signal output\n- spw_time_in_export: SpaceWire time input signal output (8 bits)\n- spw_reset_export: SpaceWire reset output\n- spw_data_rd_export: SpaceWire data read signal output\n- spw_data_wr_export: SpaceWire data write signal output\n- spw_data_o_export: SpaceWire data output (9 bits)\n- display7seg_export: 7-segment display output (32 bits)\n- led_export: LED output (10 bits)\n\nExplanation: These outputs control SDRAM operations, manage SpaceWire communication, and drive display and LED outputs. They allow the CPU to interact with external memory, configure and communicate through SpaceWire interfaces, and provide visual feedback through displays and LEDs.\n\nInout port:\n- sdram_dq: SDRAM data bus (16 bits)\n\nExplanation: This bidirectional port is used for reading and writing data to the SDRAM, allowing the CPU to exchange data with the external memory."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\n[cpu_data_master_waitrequest, cpu_data_master_writedata, cpu_data_master_address, cpu_data_master_write, cpu_data_master_read, cpu_data_master_readdata, cpu_data_master_debugaccess, cpu_data_master_byteenable, cpu_instruction_master_waitrequest, cpu_instruction_master_address, cpu_instruction_master_read, cpu_instruction_master_readdata, mm_interconnect_0_cpu_jtag_debug_module_waitrequest, mm_interconnect_0_cpu_jtag_debug_module_writedata, mm_interconnect_0_cpu_jtag_debug_module_address, mm_interconnect_0_cpu_jtag_debug_module_write, mm_interconnect_0_cpu_jtag_debug_module_read, mm_interconnect_0_cpu_jtag_debug_module_readdata, mm_interconnect_0_cpu_jtag_debug_module_debugaccess, mm_interconnect_0_cpu_jtag_debug_module_byteenable, irq_mapper_receiver0_irq, cpu_d_irq_irq, rst_controller_reset_out_reset, rst_controller_reset_out_reset_req]\n\nExplanation:\nThese internal signals are used for various purposes within the CPU module:\n\n1. cpu_data_master_* signals: These are used for the CPU's data master interface, handling data read/write operations, addressing, and control.\n\n2. cpu_instruction_master_* signals: These manage the CPU's instruction fetch operations, including address and data transfer for instructions.\n\n3. mm_interconnect_0_cpu_jtag_debug_module_* signals: These signals are part of the JTAG debug interface, allowing for debugging and monitoring of the CPU.\n\n4. irq_mapper_receiver0_irq and cpu_d_irq_irq: These signals are used for interrupt handling within the CPU system.\n\n5. rst_controller_reset_out_reset and rst_controller_reset_out_reset_req: These signals manage the reset functionality for various components in the system.\n\nThese internal signals facilitate communication between different components of the CPU module, manage data and instruction flow, enable debugging, handle interrupts, and control system reset functionality."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n`timescale 1 ps / 1 ps\nmodule CPU (\n\t\tinput  wire        clk_clk,             \n\t\tinput  wire        reset_reset_n,       \n\t\toutput wire [11:0] sdram_addr,          \n\t\toutput wire [1:0]  sdram_ba,            \n\t\toutput wire        sdram_cas_n,         \n\t\toutput wire        sdram_cke,           \n\t\toutput wire        sdram_cs_n,          \n\t\tinout  wire [15:0] sdram_dq,            \n\t\toutput wire [1:0]  sdram_dqm,           \n\t\toutput wire        sdram_ras_n,         \n\t\toutput wire        sdram_we_n,          \n\t\toutput wire [6:0]  spw_tx_div_export,   \n\t\toutput wire [2:0]  spw_config_export,   \n\t\toutput wire        spw_tick_in_export,  \n\t\toutput wire [7:0]  spw_time_in_export,  \n\t\toutput wire        spw_reset_export,    \n\t\tinput  wire [2:0]  spw_state_export,    \n\t\tinput  wire        spw_tick_o_export,   \n\t\tinput  wire [7:0]  spw_time_o_export,   \n\t\tinput  wire [8:0]  spw_data_i_export,   \n\t\tinput  wire        spw_tx_full_export,  \n\t\tinput  wire        spw_rx_empty_export, \n\t\toutput wire        spw_data_rd_export,  \n\t\toutput wire        spw_data_wr_export,  \n\t\toutput wire [8:0]  spw_data_o_export,   \n\t\toutput wire [31:0] display7seg_export,  \n\t\toutput wire [9:0]  led_export           \n\t);\n\n\twire   [1:0] mm_interconnect_0_spw_state_s1_address;                    \n\twire  [31:0] mm_interconnect_0_spw_state_s1_readdata;                   \n\twire   [1:0] mm_interconnect_0_spw_time_o_s1_address;                   \n\twire  [31:0] mm_interconnect_0_spw_time_o_s1_readdata;                  \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest; \n\twire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;   \n\twire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;     \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;  \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;       \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;        \n\twire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;    \n\twire         cpu_data_master_waitrequest;                               \n\twire  [31:0] cpu_data_master_writedata;                                 \n\twire  [24:0] cpu_data_master_address;                                   \n\twire         cpu_data_master_write;                                     \n\twire         cpu_data_master_read;                                      \n\twire  [31:0] cpu_data_master_readdata;                                  \n\twire         cpu_data_master_debugaccess;                               \n\twire   [3:0] cpu_data_master_byteenable;                                \n\twire  [31:0] mm_interconnect_0_onchip_memory2_s1_writedata;             \n\twire   [9:0] mm_interconnect_0_onchip_memory2_s1_address;               \n\twire         mm_interconnect_0_onchip_memory2_s1_chipselect;            \n\twire         mm_interconnect_0_onchip_memory2_s1_clken;                 \n\twire         mm_interconnect_0_onchip_memory2_s1_write;                 \n\twire  [31:0] mm_interconnect_0_onchip_memory2_s1_readdata;              \n\twire   [3:0] mm_interconnect_0_onchip_memory2_s1_byteenable;            \n\twire   [1:0] mm_interconnect_0_spw_rx_empty_s1_address;                 \n\twire  [31:0] mm_interconnect_0_spw_rx_empty_s1_readdata;                \n\twire         mm_interconnect_0_sdram_s1_waitrequest;                    \n\twire  [15:0] mm_interconnect_0_sdram_s1_writedata;                      \n\twire  [21:0] mm_interconnect_0_sdram_s1_address;                        \n\twire         mm_interconnect_0_sdram_s1_chipselect;                     \n\twire         mm_interconnect_0_sdram_s1_write;                          \n\twire         mm_interconnect_0_sdram_s1_read;                           \n\twire  [15:0] mm_interconnect_0_sdram_s1_readdata;                       \n\twire         mm_interconnect_0_sdram_s1_readdatavalid;                  \n\twire   [1:0] mm_interconnect_0_sdram_s1_byteenable;                     \n\twire  [31:0] mm_interconnect_0_display7seg_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_display7seg_s1_address;                  \n\twire         mm_interconnect_0_display7seg_s1_chipselect;               \n\twire         mm_interconnect_0_display7seg_s1_write;                    \n\twire  [31:0] mm_interconnect_0_display7seg_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_tx_div_s1_writedata;                 \n\twire   [1:0] mm_interconnect_0_spw_tx_div_s1_address;                   \n\twire         mm_interconnect_0_spw_tx_div_s1_chipselect;                \n\twire         mm_interconnect_0_spw_tx_div_s1_write;                     \n\twire  [31:0] mm_interconnect_0_spw_tx_div_s1_readdata;                  \n\twire         cpu_instruction_master_waitrequest;                        \n\twire  [24:0] cpu_instruction_master_address;                            \n\twire         cpu_instruction_master_read;                               \n\twire  [31:0] cpu_instruction_master_readdata;                           \n\twire  [31:0] mm_interconnect_0_spw_reset_s1_writedata;                  \n\twire   [1:0] mm_interconnect_0_spw_reset_s1_address;                    \n\twire         mm_interconnect_0_spw_reset_s1_chipselect;                 \n\twire         mm_interconnect_0_spw_reset_s1_write;                      \n\twire  [31:0] mm_interconnect_0_spw_reset_s1_readdata;                   \n\twire   [1:0] mm_interconnect_0_spw_data_i_s1_address;                   \n\twire  [31:0] mm_interconnect_0_spw_data_i_s1_readdata;                  \n\twire   [1:0] mm_interconnect_0_spw_tick_o_s1_address;                   \n\twire  [31:0] mm_interconnect_0_spw_tick_o_s1_readdata;                  \n\twire  [31:0] mm_interconnect_0_spw_tick_in_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_spw_tick_in_s1_address;                  \n\twire         mm_interconnect_0_spw_tick_in_s1_chipselect;               \n\twire         mm_interconnect_0_spw_tick_in_s1_write;                    \n\twire  [31:0] mm_interconnect_0_spw_tick_in_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_data_rd_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_spw_data_rd_s1_address;                  \n\twire         mm_interconnect_0_spw_data_rd_s1_chipselect;               \n\twire         mm_interconnect_0_spw_data_rd_s1_write;                    \n\twire  [31:0] mm_interconnect_0_spw_data_rd_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_time_in_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_spw_time_in_s1_address;                  \n\twire         mm_interconnect_0_spw_time_in_s1_chipselect;               \n\twire         mm_interconnect_0_spw_time_in_s1_write;                    \n\twire  [31:0] mm_interconnect_0_spw_time_in_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_data_wr_s1_writedata;                \n\twire   [1:0] mm_interconnect_0_spw_data_wr_s1_address;                  \n\twire         mm_interconnect_0_spw_data_wr_s1_chipselect;               \n\twire         mm_interconnect_0_spw_data_wr_s1_write;                    \n\twire  [31:0] mm_interconnect_0_spw_data_wr_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_data_o_s1_writedata;                 \n\twire   [1:0] mm_interconnect_0_spw_data_o_s1_address;                   \n\twire         mm_interconnect_0_spw_data_o_s1_chipselect;                \n\twire         mm_interconnect_0_spw_data_o_s1_write;                     \n\twire  [31:0] mm_interconnect_0_spw_data_o_s1_readdata;                  \n\twire   [1:0] mm_interconnect_0_spw_tx_full_s1_address;                  \n\twire  [31:0] mm_interconnect_0_spw_tx_full_s1_readdata;                 \n\twire  [31:0] mm_interconnect_0_spw_config_s1_writedata;                 \n\twire   [1:0] mm_interconnect_0_spw_config_s1_address;                   \n\twire         mm_interconnect_0_spw_config_s1_chipselect;                \n\twire         mm_interconnect_0_spw_config_s1_write;                     \n\twire  [31:0] mm_interconnect_0_spw_config_s1_readdata;                  \n\twire  [31:0] mm_interconnect_0_led_s1_writedata;                        \n\twire   [1:0] mm_interconnect_0_led_s1_address;                          \n\twire         mm_interconnect_0_led_s1_chipselect;                       \n\twire         mm_interconnect_0_led_s1_write;                            \n\twire  [31:0] mm_interconnect_0_led_s1_readdata;                         \n\twire         mm_interconnect_0_cpu_jtag_debug_module_waitrequest;       \n\twire  [31:0] mm_interconnect_0_cpu_jtag_debug_module_writedata;         \n\twire   [8:0] mm_interconnect_0_cpu_jtag_debug_module_address;           \n\twire         mm_interconnect_0_cpu_jtag_debug_module_write;             \n\twire         mm_interconnect_0_cpu_jtag_debug_module_read;              \n\twire  [31:0] mm_interconnect_0_cpu_jtag_debug_module_readdata;          \n\twire         mm_interconnect_0_cpu_jtag_debug_module_debugaccess;       \n\twire   [3:0] mm_interconnect_0_cpu_jtag_debug_module_byteenable;        \n\twire         irq_mapper_receiver0_irq;                                  \n\twire  [31:0] cpu_d_irq_irq;                                             \n\twire         rst_controller_reset_out_reset;                            \n\twire         rst_controller_reset_out_reset_req;                        \n\n\tCPU_cpu cpu (\n\t\t.clk                                   (clk_clk),                                             \n\t\t.reset_n                               (~rst_controller_reset_out_reset),                     \n\t\t.reset_req                             (rst_controller_reset_out_reset_req),                  \n\t\t.d_address                             (cpu_data_master_address),                             \n\t\t.d_byteenable                          (cpu_data_master_byteenable),                          \n\t\t.d_read                                (cpu_data_master_read),                                \n\t\t.d_readdata                            (cpu_data_master_readdata),                            \n\t\t.d_waitrequest                         (cpu_data_master_waitrequest),                         \n\t\t.d_write                               (cpu_data_master_write),                               \n\t\t.d_writedata                           (cpu_data_master_writedata),                           \n\t\t.jtag_debug_module_debugaccess_to_roms (cpu_data_master_debugaccess),                         \n\t\t.i_address                             (cpu_instruction_master_address),                      \n\t\t.i_read                                (cpu_instruction_master_read),                         \n\t\t.i_readdata                            (cpu_instruction_master_readdata),                     \n\t\t.i_waitrequest                         (cpu_instruction_master_waitrequest),                  \n\t\t.d_irq                                 (cpu_d_irq_irq),                                       \n\t\t.jtag_debug_module_resetrequest        (),                                                    \n\t\t.jtag_debug_module_address             (mm_interconnect_0_cpu_jtag_debug_module_address),     \n\t\t.jtag_debug_module_byteenable          (mm_interconnect_0_cpu_jtag_debug_module_byteenable),  \n\t\t.jtag_debug_module_debugaccess         (mm_interconnect_0_cpu_jtag_debug_module_debugaccess), \n\t\t.jtag_debug_module_read                (mm_interconnect_0_cpu_jtag_debug_module_read),        \n\t\t.jtag_debug_module_readdata            (mm_interconnect_0_cpu_jtag_debug_module_readdata),    \n\t\t.jtag_debug_module_waitrequest         (mm_interconnect_0_cpu_jtag_debug_module_waitrequest), \n\t\t.jtag_debug_module_write               (mm_interconnect_0_cpu_jtag_debug_module_write),       \n\t\t.jtag_debug_module_writedata           (mm_interconnect_0_cpu_jtag_debug_module_writedata),   \n\t\t.no_ci_readra                          ()                                                     \n\t);\n\n\tCPU_jtag_uart jtag_uart (\n\t\t.clk            (clk_clk),                                                   \n\t\t.rst_n          (~rst_controller_reset_out_reset),                           \n\t\t.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  \n\t\t.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     \n\t\t.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       \n\t\t.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    \n\t\t.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      \n\t\t.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   \n\t\t.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), \n\t\t.av_irq         (irq_mapper_receiver0_irq)                                   \n\t);\n\n\tCPU_onchip_memory2 onchip_memory2 (\n\t\t.clk        (clk_clk),                                        \n\t\t.address    (mm_interconnect_0_onchip_memory2_s1_address),    \n\t\t.clken      (mm_interconnect_0_onchip_memory2_s1_clken),      \n\t\t.chipselect (mm_interconnect_0_onchip_memory2_s1_chipselect), \n\t\t.write      (mm_interconnect_0_onchip_memory2_s1_write),      \n\t\t.readdata   (mm_interconnect_0_onchip_memory2_s1_readdata),   \n\t\t.writedata  (mm_interconnect_0_onchip_memory2_s1_writedata),  \n\t\t.byteenable (mm_interconnect_0_onchip_memory2_s1_byteenable), \n\t\t.reset      (rst_controller_reset_out_reset),                 \n\t\t.reset_req  (rst_controller_reset_out_reset_req)              \n\t);\n\n\tCPU_sdram sdram (\n\t\t.clk            (clk_clk),                                  \n\t\t.reset_n        (~rst_controller_reset_out_reset),          \n\t\t.az_addr        (mm_interconnect_0_sdram_s1_address),       \n\t\t.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   \n\t\t.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    \n\t\t.az_data        (mm_interconnect_0_sdram_s1_writedata),     \n\t\t.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         \n\t\t.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        \n\t\t.za_data        (mm_interconnect_0_sdram_s1_readdata),      \n\t\t.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), \n\t\t.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   \n\t\t.zs_addr        (sdram_addr),                               \n\t\t.zs_ba          (sdram_ba),                                 \n\t\t.zs_cas_n       (sdram_cas_n),                              \n\t\t.zs_cke         (sdram_cke),                                \n\t\t.zs_cs_n        (sdram_cs_n),                               \n\t\t.zs_dq          (sdram_dq),                                 \n\t\t.zs_dqm         (sdram_dqm),                                \n\t\t.zs_ras_n       (sdram_ras_n),                              \n\t\t.zs_we_n        (sdram_we_n)                                \n\t);\n\n\tCPU_spw_tx_div spw_tx_div (\n\t\t.clk        (clk_clk),                                    \n\t\t.reset_n    (~rst_controller_reset_out_reset),            \n\t\t.address    (mm_interconnect_0_spw_tx_div_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_tx_div_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_tx_div_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_tx_div_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_tx_div_s1_readdata),   \n\t\t.out_port   (spw_tx_div_export)                           \n\t);\n\n\tCPU_spw_config spw_config (\n\t\t.clk        (clk_clk),                                    \n\t\t.reset_n    (~rst_controller_reset_out_reset),            \n\t\t.address    (mm_interconnect_0_spw_config_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_config_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_config_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_config_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_config_s1_readdata),   \n\t\t.out_port   (spw_config_export)                           \n\t);\n\n\tCPU_spw_tick_in spw_tick_in (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_spw_tick_in_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_tick_in_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_tick_in_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_tick_in_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_tick_in_s1_readdata),   \n\t\t.out_port   (spw_tick_in_export)                           \n\t);\n\n\tCPU_spw_time_in spw_time_in (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_spw_time_in_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_time_in_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_time_in_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_time_in_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_time_in_s1_readdata),   \n\t\t.out_port   (spw_time_in_export)                           \n\t);\n\n\tCPU_spw_data_o spw_data_o (\n\t\t.clk        (clk_clk),                                    \n\t\t.reset_n    (~rst_controller_reset_out_reset),            \n\t\t.address    (mm_interconnect_0_spw_data_o_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_data_o_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_data_o_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_data_o_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_data_o_s1_readdata),   \n\t\t.out_port   (spw_data_o_export)                           \n\t);\n\n\tCPU_spw_tick_in spw_data_wr (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_spw_data_wr_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_data_wr_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_data_wr_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_data_wr_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_data_wr_s1_readdata),   \n\t\t.out_port   (spw_data_wr_export)                           \n\t);\n\n\tCPU_spw_data_i spw_data_i (\n\t\t.clk      (clk_clk),                                  \n\t\t.reset_n  (~rst_controller_reset_out_reset),          \n\t\t.address  (mm_interconnect_0_spw_data_i_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_data_i_s1_readdata), \n\t\t.in_port  (spw_data_i_export)                         \n\t);\n\n\tCPU_spw_tick_in spw_data_rd (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_spw_data_rd_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_data_rd_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_data_rd_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_data_rd_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_data_rd_s1_readdata),   \n\t\t.out_port   (spw_data_rd_export)                           \n\t);\n\n\tCPU_spw_rx_empty spw_rx_empty (\n\t\t.clk      (clk_clk),                                    \n\t\t.reset_n  (~rst_controller_reset_out_reset),            \n\t\t.address  (mm_interconnect_0_spw_rx_empty_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_rx_empty_s1_readdata), \n\t\t.in_port  (spw_rx_empty_export)                         \n\t);\n\n\tCPU_spw_rx_empty spw_tx_full (\n\t\t.clk      (clk_clk),                                   \n\t\t.reset_n  (~rst_controller_reset_out_reset),           \n\t\t.address  (mm_interconnect_0_spw_tx_full_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_tx_full_s1_readdata), \n\t\t.in_port  (spw_tx_full_export)                         \n\t);\n\n\tCPU_spw_time_o spw_time_o (\n\t\t.clk      (clk_clk),                                  \n\t\t.reset_n  (~rst_controller_reset_out_reset),          \n\t\t.address  (mm_interconnect_0_spw_time_o_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_time_o_s1_readdata), \n\t\t.in_port  (spw_time_o_export)                         \n\t);\n\n\tCPU_spw_rx_empty spw_tick_o (\n\t\t.clk      (clk_clk),                                  \n\t\t.reset_n  (~rst_controller_reset_out_reset),          \n\t\t.address  (mm_interconnect_0_spw_tick_o_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_tick_o_s1_readdata), \n\t\t.in_port  (spw_tick_o_export)                         \n\t);\n\n\tCPU_spw_state spw_state (\n\t\t.clk      (clk_clk),                                 \n\t\t.reset_n  (~rst_controller_reset_out_reset),         \n\t\t.address  (mm_interconnect_0_spw_state_s1_address),  \n\t\t.readdata (mm_interconnect_0_spw_state_s1_readdata), \n\t\t.in_port  (spw_state_export)                         \n\t);\n\n\tCPU_spw_tick_in spw_reset (\n\t\t.clk        (clk_clk),                                   \n\t\t.reset_n    (~rst_controller_reset_out_reset),           \n\t\t.address    (mm_interconnect_0_spw_reset_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_spw_reset_s1_write),     \n\t\t.writedata  (mm_interconnect_0_spw_reset_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_spw_reset_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_spw_reset_s1_readdata),   \n\t\t.out_port   (spw_reset_export)                           \n\t);\n\n\tCPU_display7seg display7seg (\n\t\t.clk        (clk_clk),                                     \n\t\t.reset_n    (~rst_controller_reset_out_reset),             \n\t\t.address    (mm_interconnect_0_display7seg_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_display7seg_s1_write),     \n\t\t.writedata  (mm_interconnect_0_display7seg_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_display7seg_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_display7seg_s1_readdata),   \n\t\t.out_port   (display7seg_export)                           \n\t);\n\n\tCPU_led led (\n\t\t.clk        (clk_clk),                             \n\t\t.reset_n    (~rst_controller_reset_out_reset),     \n\t\t.address    (mm_interconnect_0_led_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_led_s1_write),     \n\t\t.writedata  (mm_interconnect_0_led_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_led_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_led_s1_readdata),   \n\t\t.out_port   (led_export)                           \n\t);\n\n\tCPU_mm_interconnect_0 mm_interconnect_0 (\n\t\t.clk_0_clk_clk                           (clk_clk),                                                   \n\t\t.cpu_reset_n_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                            \n\t\t.cpu_data_master_address                 (cpu_data_master_address),                                   \n\t\t.cpu_data_master_waitrequest             (cpu_data_master_waitrequest),                               \n\t\t.cpu_data_master_byteenable              (cpu_data_master_byteenable),                                \n\t\t.cpu_data_master_read                    (cpu_data_master_read),                                      \n\t\t.cpu_data_master_readdata                (cpu_data_master_readdata),                                  \n\t\t.cpu_data_master_write                   (cpu_data_master_write),                                     \n\t\t.cpu_data_master_writedata               (cpu_data_master_writedata),                                 \n\t\t.cpu_data_master_debugaccess             (cpu_data_master_debugaccess),                               \n\t\t.cpu_instruction_master_address          (cpu_instruction_master_address),                            \n\t\t.cpu_instruction_master_waitrequest      (cpu_instruction_master_waitrequest),                        \n\t\t.cpu_instruction_master_read             (cpu_instruction_master_read),                               \n\t\t.cpu_instruction_master_readdata         (cpu_instruction_master_readdata),                           \n\t\t.cpu_jtag_debug_module_address           (mm_interconnect_0_cpu_jtag_debug_module_address),           \n\t\t.cpu_jtag_debug_module_write             (mm_interconnect_0_cpu_jtag_debug_module_write),             \n\t\t.cpu_jtag_debug_module_read              (mm_interconnect_0_cpu_jtag_debug_module_read),              \n\t\t.cpu_jtag_debug_module_readdata          (mm_interconnect_0_cpu_jtag_debug_module_readdata),          \n\t\t.cpu_jtag_debug_module_writedata         (mm_interconnect_0_cpu_jtag_debug_module_writedata),         \n\t\t.cpu_jtag_debug_module_byteenable        (mm_interconnect_0_cpu_jtag_debug_module_byteenable),        \n\t\t.cpu_jtag_debug_module_waitrequest       (mm_interconnect_0_cpu_jtag_debug_module_waitrequest),       \n\t\t.cpu_jtag_debug_module_debugaccess       (mm_interconnect_0_cpu_jtag_debug_module_debugaccess),       \n\t\t.display7seg_s1_address                  (mm_interconnect_0_display7seg_s1_address),                  \n\t\t.display7seg_s1_write                    (mm_interconnect_0_display7seg_s1_write),                    \n\t\t.display7seg_s1_readdata                 (mm_interconnect_0_display7seg_s1_readdata),                 \n\t\t.display7seg_s1_writedata                (mm_interconnect_0_display7seg_s1_writedata),                \n\t\t.display7seg_s1_chipselect               (mm_interconnect_0_display7seg_s1_chipselect),               \n\t\t.jtag_uart_avalon_jtag_slave_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     \n\t\t.jtag_uart_avalon_jtag_slave_write       (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),       \n\t\t.jtag_uart_avalon_jtag_slave_read        (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),        \n\t\t.jtag_uart_avalon_jtag_slave_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    \n\t\t.jtag_uart_avalon_jtag_slave_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   \n\t\t.jtag_uart_avalon_jtag_slave_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), \n\t\t.jtag_uart_avalon_jtag_slave_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  \n\t\t.led_s1_address                          (mm_interconnect_0_led_s1_address),                          \n\t\t.led_s1_write                            (mm_interconnect_0_led_s1_write),                            \n\t\t.led_s1_readdata                         (mm_interconnect_0_led_s1_readdata),                         \n\t\t.led_s1_writedata                        (mm_interconnect_0_led_s1_writedata),                        \n\t\t.led_s1_chipselect                       (mm_interconnect_0_led_s1_chipselect),                       \n\t\t.onchip_memory2_s1_address               (mm_interconnect_0_onchip_memory2_s1_address),               \n\t\t.onchip_memory2_s1_write                 (mm_interconnect_0_onchip_memory2_s1_write),                 \n\t\t.onchip_memory2_s1_readdata              (mm_interconnect_0_onchip_memory2_s1_readdata),              \n\t\t.onchip_memory2_s1_writedata             (mm_interconnect_0_onchip_memory2_s1_writedata),             \n\t\t.onchip_memory2_s1_byteenable            (mm_interconnect_0_onchip_memory2_s1_byteenable),            \n\t\t.onchip_memory2_s1_chipselect            (mm_interconnect_0_onchip_memory2_s1_chipselect),            \n\t\t.onchip_memory2_s1_clken                 (mm_interconnect_0_onchip_memory2_s1_clken),                 \n\t\t.sdram_s1_address                        (mm_interconnect_0_sdram_s1_address),                        \n\t\t.sdram_s1_write                          (mm_interconnect_0_sdram_s1_write),                          \n\t\t.sdram_s1_read                           (mm_interconnect_0_sdram_s1_read),                           \n\t\t.sdram_s1_readdata                       (mm_interconnect_0_sdram_s1_readdata),                       \n\t\t.sdram_s1_writedata                      (mm_interconnect_0_sdram_s1_writedata),                      \n\t\t.sdram_s1_byteenable                     (mm_interconnect_0_sdram_s1_byteenable),                     \n\t\t.sdram_s1_readdatavalid                  (mm_interconnect_0_sdram_s1_readdatavalid),                  \n\t\t.sdram_s1_waitrequest                    (mm_interconnect_0_sdram_s1_waitrequest),                    \n\t\t.sdram_s1_chipselect                     (mm_interconnect_0_sdram_s1_chipselect),                     \n\t\t.spw_config_s1_address                   (mm_interconnect_0_spw_config_s1_address),                   \n\t\t.spw_config_s1_write                     (mm_interconnect_0_spw_config_s1_write),                     \n\t\t.spw_config_s1_readdata                  (mm_interconnect_0_spw_config_s1_readdata),                  \n\t\t.spw_config_s1_writedata                 (mm_interconnect_0_spw_config_s1_writedata),                 \n\t\t.spw_config_s1_chipselect                (mm_interconnect_0_spw_config_s1_chipselect),                \n\t\t.spw_data_i_s1_address                   (mm_interconnect_0_spw_data_i_s1_address),                   \n\t\t.spw_data_i_s1_readdata                  (mm_interconnect_0_spw_data_i_s1_readdata),                  \n\t\t.spw_data_o_s1_address                   (mm_interconnect_0_spw_data_o_s1_address),                   \n\t\t.spw_data_o_s1_write                     (mm_interconnect_0_spw_data_o_s1_write),                     \n\t\t.spw_data_o_s1_readdata                  (mm_interconnect_0_spw_data_o_s1_readdata),                  \n\t\t.spw_data_o_s1_writedata                 (mm_interconnect_0_spw_data_o_s1_writedata),                 \n\t\t.spw_data_o_s1_chipselect                (mm_interconnect_0_spw_data_o_s1_chipselect),                \n\t\t.spw_data_rd_s1_address                  (mm_interconnect_0_spw_data_rd_s1_address),                  \n\t\t.spw_data_rd_s1_write                    (mm_interconnect_0_spw_data_rd_s1_write),                    \n\t\t.spw_data_rd_s1_readdata                 (mm_interconnect_0_spw_data_rd_s1_readdata),                 \n\t\t.spw_data_rd_s1_writedata                (mm_interconnect_0_spw_data_rd_s1_writedata),                \n\t\t.spw_data_rd_s1_chipselect               (mm_interconnect_0_spw_data_rd_s1_chipselect),               \n\t\t.spw_data_wr_s1_address                  (mm_interconnect_0_spw_data_wr_s1_address),                  \n\t\t.spw_data_wr_s1_write                    (mm_interconnect_0_spw_data_wr_s1_write),                    \n\t\t.spw_data_wr_s1_readdata                 (mm_interconnect_0_spw_data_wr_s1_readdata),                 \n\t\t.spw_data_wr_s1_writedata                (mm_interconnect_0_spw_data_wr_s1_writedata),                \n\t\t.spw_data_wr_s1_chipselect               (mm_interconnect_0_spw_data_wr_s1_chipselect),               \n\t\t.spw_reset_s1_address                    (mm_interconnect_0_spw_reset_s1_address),                    \n\t\t.spw_reset_s1_write                      (mm_interconnect_0_spw_reset_s1_write),                      \n\t\t.spw_reset_s1_readdata                   (mm_interconnect_0_spw_reset_s1_readdata),                   \n\t\t.spw_reset_s1_writedata                  (mm_interconnect_0_spw_reset_s1_writedata),                  \n\t\t.spw_reset_s1_chipselect                 (mm_interconnect_0_spw_reset_s1_chipselect),                 \n\t\t.spw_rx_empty_s1_address                 (mm_interconnect_0_spw_rx_empty_s1_address),                 \n\t\t.spw_rx_empty_s1_readdata                (mm_interconnect_0_spw_rx_empty_s1_readdata),                \n\t\t.spw_state_s1_address                    (mm_interconnect_0_spw_state_s1_address),                    \n\t\t.spw_state_s1_readdata                   (mm_interconnect_0_spw_state_s1_readdata),                   \n\t\t.spw_tick_in_s1_address                  (mm_interconnect_0_spw_tick_in_s1_address),                  \n\t\t.spw_tick_in_s1_write                    (mm_interconnect_0_spw_tick_in_s1_write),                    \n\t\t.spw_tick_in_s1_readdata                 (mm_interconnect_0_spw_tick_in_s1_readdata),                 \n\t\t.spw_tick_in_s1_writedata                (mm_interconnect_0_spw_tick_in_s1_writedata),                \n\t\t.spw_tick_in_s1_chipselect               (mm_interconnect_0_spw_tick_in_s1_chipselect),               \n\t\t.spw_tick_o_s1_address                   (mm_interconnect_0_spw_tick_o_s1_address),                   \n\t\t.spw_tick_o_s1_readdata                  (mm_interconnect_0_spw_tick_o_s1_readdata),                  \n\t\t.spw_time_in_s1_address                  (mm_interconnect_0_spw_time_in_s1_address),                  \n\t\t.spw_time_in_s1_write                    (mm_interconnect_0_spw_time_in_s1_write),                    \n\t\t.spw_time_in_s1_readdata                 (mm_interconnect_0_spw_time_in_s1_readdata),                 \n\t\t.spw_time_in_s1_writedata                (mm_interconnect_0_spw_time_in_s1_writedata),                \n\t\t.spw_time_in_s1_chipselect               (mm_interconnect_0_spw_time_in_s1_chipselect),               \n\t\t.spw_time_o_s1_address                   (mm_interconnect_0_spw_time_o_s1_address),                   \n\t\t.spw_time_o_s1_readdata                  (mm_interconnect_0_spw_time_o_s1_readdata),                  \n\t\t.spw_tx_div_s1_address                   (mm_interconnect_0_spw_tx_div_s1_address),                   \n\t\t.spw_tx_div_s1_write                     (mm_interconnect_0_spw_tx_div_s1_write),                     \n\t\t.spw_tx_div_s1_readdata                  (mm_interconnect_0_spw_tx_div_s1_readdata),                  \n\t\t.spw_tx_div_s1_writedata                 (mm_interconnect_0_spw_tx_div_s1_writedata),                 \n\t\t.spw_tx_div_s1_chipselect                (mm_interconnect_0_spw_tx_div_s1_chipselect),                \n\t\t.spw_tx_full_s1_address                  (mm_interconnect_0_spw_tx_full_s1_address),                  \n\t\t.spw_tx_full_s1_readdata                 (mm_interconnect_0_spw_tx_full_s1_readdata)                  \n\t);\n\n\tCPU_irq_mapper irq_mapper (\n\t\t.clk           (clk_clk),                        \n\t\t.reset         (rst_controller_reset_out_reset), \n\t\t.receiver0_irq (irq_mapper_receiver0_irq),       \n\t\t.sender_irq    (cpu_d_irq_irq)                   \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (1),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (1),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller (\n\t\t.reset_in0      (~reset_reset_n),                     \n\t\t.clk            (clk_clk),                            \n\t\t.reset_out      (rst_controller_reset_out_reset),     \n\t\t.reset_req      (rst_controller_reset_out_reset_req), \n\t\t.reset_req_in0  (1'b0),                               \n\t\t.reset_in1      (1'b0),                               \n\t\t.reset_req_in1  (1'b0),                               \n\t\t.reset_in2      (1'b0),                               \n\t\t.reset_req_in2  (1'b0),                               \n\t\t.reset_in3      (1'b0),                               \n\t\t.reset_req_in3  (1'b0),                               \n\t\t.reset_in4      (1'b0),                               \n\t\t.reset_req_in4  (1'b0),                               \n\t\t.reset_in5      (1'b0),                               \n\t\t.reset_req_in5  (1'b0),                               \n\t\t.reset_in6      (1'b0),                               \n\t\t.reset_req_in6  (1'b0),                               \n\t\t.reset_in7      (1'b0),                               \n\t\t.reset_req_in7  (1'b0),                               \n\t\t.reset_in8      (1'b0),                               \n\t\t.reset_req_in8  (1'b0),                               \n\t\t.reset_in9      (1'b0),                               \n\t\t.reset_req_in9  (1'b0),                               \n\t\t.reset_in10     (1'b0),                               \n\t\t.reset_req_in10 (1'b0),                               \n\t\t.reset_in11     (1'b0),                               \n\t\t.reset_req_in11 (1'b0),                               \n\t\t.reset_in12     (1'b0),                               \n\t\t.reset_req_in12 (1'b0),                               \n\t\t.reset_in13     (1'b0),                               \n\t\t.reset_req_in13 (1'b0),                               \n\t\t.reset_in14     (1'b0),                               \n\t\t.reset_req_in14 (1'b0),                               \n\t\t.reset_in15     (1'b0),                               \n\t\t.reset_req_in15 (1'b0)                                \n\t);\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: CPU. Module specification: The CPU module is a top-level design for a CPU system with various peripherals and interfaces. It implements a system-on-chip design, likely for specialized applications involving space communication. The module includes a CPU core, memory (SDRAM and on-chip), JTAG UART, and several SpaceWire (SPW) related interfaces. It has input ports for clock (clk_clk), reset (reset_reset_n), and various SpaceWire-related signals, while output ports control SDRAM operations, manage SpaceWire communication, and drive display and LED outputs. The module also features a bidirectional SDRAM data bus (sdram_dq). Internally, it uses numerous signals for data and instruction management, debugging, interrupt handling, and reset control. The design is organized into several sub-modules and components, including a CPU core, memory controllers, Sp"
                }
            ]
        }
    ]
}