Module name: Computer_System_SDRAM. Module specification: The `Computer_System_SDRAM` module interfaces with Synchronous Dynamic Random Access Memory (SDRAM) to manage complex read and write operations. It uses input ports: `az_addr` for the memory address, `az_be_n` for byte enable signals, `az_cs` for chip select, `az_data` for data to be written, `az_rd_n` and `az_wr_n` for read/write enabling, along with `clk` and `reset_n` for clock synchronization and reset functionality, respectively. The output ports include `za_data`, `za_valid`, and `za_waitrequest` for data read back, validity of data, and wait signaling during data read/write operations, respectively. Further ouput includes SDRAM-specific controls such as `zs_addr`, `zs_ba`, `zs_cas_n`, `zs_cke`, `zs_cs_n`, `zs_dq`, `zs_dqm`, `zs_ras_n`, and `zs_we_n` for controlling the SDRAM's address, bank address, column address strobe, clock enable, chip select, data I/O bus, data input mask, row address strobe, and write enable, respectively. Internally, the module uses signals like `active_addr` for storing the current address and `active_data` for holding the data involved in the transaction, along with flags like `init_done` to manage initialization and `refresh_request` for refresh operations. Additionally, there are finite state machines (FSMs) managing initialization and main memory operations, taking care of state transitions based on certain conditions like refresh requirements or operational commands. The module integrates an embedded input FIFO (First In, First Out) submodule to handle incoming data and commands, segregates operations into initialization, command execution and data transfer phases, and ensures data integrity and synchronization via meticulously managed states and transitions in its FSMs, thus effectively orchestrating SDRAM operations efficiently.