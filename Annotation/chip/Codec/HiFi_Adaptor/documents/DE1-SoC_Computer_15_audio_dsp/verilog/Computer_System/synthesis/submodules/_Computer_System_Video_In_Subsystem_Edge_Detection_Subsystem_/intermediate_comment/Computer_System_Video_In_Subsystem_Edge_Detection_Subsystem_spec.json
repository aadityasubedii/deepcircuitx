{
    "spec": "Module name: Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem.\n\nModule specification: The Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem is designed to detect edges in video frames using a series of submodules for chroma filtering, upsampling, and edge detection processing. The module operates synchronously with a system clock and includes reset control. Input ports include control interfaces (edge_detection_control_slave_*) for configuration, a system clock (sys_clk_clk), a system reset (sys_reset_reset_n), and video stream inputs (video_stream_sink_*). Output ports comprise control read data (edge_detection_control_slave_readdata), video stream output readiness (video_stream_sink_ready), and processed video stream outputs (video_stream_source_*), which indicate status and data flow for processed video frames.\n\nInternal signals such as chroma_filter_avalon_chroma_source_* and chroma_upsampler_avalon_chroma_source_* manage the data flow from the chroma filter and upsampler submodules. Signals like edge_detection_avalon_edge_detection_source_* control the output from the edge detection processing. Additional signals from the video_stream_splitter_* manage input video streams and synchronization.\n\nThe module incorporates several key submodules outlined in the code: Chroma_Filter, Chroma_Upsampler, Edge_Detection, Edge_Detection_Router_Controller, and Video_Stream_Merger, each tasked with specific roles within video processing, ranging from filtering and upsampling to routing and merging processed video streams. This structure supports flexible, efficient edge detection in video processing applications, enabling further processing or display of video data with highlighted edges.\n",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem.\n\nExplanation: The module is tasked with processing video input to detect edges within the video frames. It integrates various sub-modules, such as chroma filters, upsamplers, and edge detection processing, to filter and enhance chroma data, and detect edges in the processed stream. The module handles video data streams: it receives input video data, processes it through several stages including chroma filtering and edge detection, and finally merges different processed streams into one output stream. This output can then be used for further processing or display, providing detailed visual information where edges are highlighted. The module operates synchronously with a system clock and includes provisions for reset control. It is designed to interface with control signals through a simple slave interface for parameter adjustments."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \n**Input ports:**\n1. `edge_detection_control_slave_address`\n2. `edge_detection_control_slave_write_n`\n3. `edge_detection_control_slave_writedata`\n4. `edge_detection_control_slave_chipselect`\n5. `sys_clk_clk`\n6. `sys_reset_reset_n`\n7. `video_stream_sink_data`\n8. `video_stream_sink_startofpacket`\n9. `video_stream_sink_endofpacket`\n10. `video_stream_sink_valid`\n11. `video_stream_source_ready`\n\n**Explanation:**\n- `edge_detection_control_slave_address`, `edge_detection_control_slave_write_n`, `edge_detection_control_slave_writedata`, `edge_detection_control_slave_chipselect`: These ports are used for control interface, enabling configuration and control of the edge detection subsystem through a slave interface. It accepts address, write enable, data inputs, and chip selection for configuration.\n- `sys_clk_clk`: System clock input that synchronizes the operations within the module.\n- `sys_reset_reset_n`: System reset input; active low. This resets the internal state of the module to an initial state.\n- `video_stream_sink_data`: Video input data stream port, where video frames are input into the module for processing.\n- `video_stream_sink_startofpacket`, `video_stream_sink_endofpacket`, `video_stream_sink_valid`: These signals control the input data stream. `startofpacket` and `endofpacket` indicate the beginning and end of a video packet, and `valid` indicates that the current data on the video data line is valid.\n- `video_stream_source_ready`: Ready signal from the next stage in the video processing pipeline indicating it can accept data.\n\n**Output ports:**\n1. `edge_detection_control_slave_readdata`\n2. `video_stream_sink_ready`\n3. `video_stream_source_data`\n4. `video_stream_source_startofpacket`\n5. `video_stream_source_endofpacket`\n6. `video_stream_source_valid`\n\n**Explanation:**\n- `edge_detection_control_slave_readdata`: Output data port for the control interface, used to send data back to the controller/master during read operations.\n- `video_stream_sink_ready`: Ready signal to accept more input data into the edge detection subsystem. It signals back to the previous stage in the video pipeline that it is prepared to receive more video data.\n- `video_stream_source_data`: Output video data after processing. This is the processed video stream output which carries the video data for further usage or display.\n- `video_stream_source_startofpacket`, `video_stream_source_endofpacket`, `video_stream_source_valid`: Control signals for the output video stream. `startofpacket` and `endofpacket` denote the start and end of a video packet on the output, and `valid` indicates the data on the output line is valid and can be read by the next processing stages."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \n**Internal signals:**\n1. `chroma_filter_avalon_chroma_source_valid`\n2. `chroma_filter_avalon_chroma_source_data`\n3. `chroma_filter_avalon_chroma_source_ready`\n4. `chroma_filter_avalon_chroma_source_startofpacket`\n5. `chroma_filter_avalon_chroma_source_endofpacket`\n6. `chroma_upsampler_avalon_chroma_source_valid`\n7. `chroma_upsampler_avalon_chroma_source_data`\n8. `chroma_upsampler_avalon_chroma_source_ready`\n9. `chroma_upsampler_avalon_chroma_source_startofpacket`\n10. `chroma_upsampler_avalon_chroma_source_endofpacket`\n11. `edge_detection_avalon_edge_detection_source_valid`\n12. `edge_detection_avalon_edge_detection_source_data`\n13. `edge_detection_avalon_edge_detection_source_ready`\n14. `edge_detection_avalon_edge_detection_source_startofpacket`\n15. `edge_detection_avalon_edge_detection_source_endofpacket`\n16. `video_stream_splitter_avalon_stream_router_source_0_valid`\n17. `video_stream_splitter_avalon_stream_router_source_0_data`\n18. `video_stream_splitter_avalon_stream_router_source_0_ready`\n19. `video_stream_splitter_avalon_stream_router_source_0_startofpacket`\n20. `video_stream_splitter_avalon_stream_router_source_0_endofpacket`\n21. `video_stream_splitter_avalon_stream_router_source_1_valid`\n22. `video_stream_splitter_avalon_stream_router_source_1_data`\n23. `video_stream_splitter_avalon_stream_router_source_1_ready`\n24. `video_stream_splitter_avalon_stream_router_source_1_startofpacket`\n25. `video_stream_splitter_avalon_stream_router_source_1_endofpacket`\n26. `video_stream_splitter_avalon_sync_source_valid`\n27. `video_stream_splitter_avalon_sync_source_data`\n28. `video_stream_splitter_avalon_sync_source_ready`\n29. `edge_detection_router_controller_external_connection_export`\n30. `rst_controller_reset_out_reset`\n\n**Explanation:**\n- `chroma_filter_avalon_chroma_source_*`: These signals manage the output stream from the chroma filter, dealing with the validity, data content, readiness, initialization, and termination of the chroma packet.\n- `chroma_upsampler_avalon_chroma_source_*`: These signals manage the output stream from the chroma upsampler with similar functionality to manage data flow including data validity, readiness, start, and end of packets.\n- `edge_detection_avalon_edge_detection_source_*`: These signals are used for managing the stream output from the edge detection block, indicating the data validity, readiness to receive or send data, and marking the start and end of packets.\n- `video_stream_splitter_avalon_stream_router_source_*_valid/data/ready/startofpacket/endofpacket`: These signals manage the outputs from the video stream splitter, handling whether data is valid, data content, the readiness of the output stream, and marking the boundaries of the packets.\n- `video_stream_splitter_avalon_sync_source_*`: These signals manage the synchronization stream output data including validation of the sync data and readiness.\n- `edge_detection_router_controller_external_connection_export`: This signal potentially exports edge router controller state or provides a control interface externally, managing switching or selection logic.\n- `rst_controller_reset_out_reset`: This is the output reset signal from the reset controller submodule, which ensures consistent reset pulse delivery across the module.\n\nEach of these internal signals interfaces between the internal submodules, coordinating data and control flow to ensure correct video processing according to the module's functional requirements."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n`timescale 1 ps / 1 ps\nmodule Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem (\n\t\tinput  wire [1:0]  edge_detection_control_slave_address,    \n\t\tinput  wire        edge_detection_control_slave_write_n,    \n\t\tinput  wire [31:0] edge_detection_control_slave_writedata,  \n\t\tinput  wire        edge_detection_control_slave_chipselect, \n\t\toutput wire [31:0] edge_detection_control_slave_readdata,   \n\t\tinput  wire        sys_clk_clk,                             \n\t\tinput  wire        sys_reset_reset_n,                       \n\t\tinput  wire [23:0] video_stream_sink_data,                  \n\t\tinput  wire        video_stream_sink_startofpacket,         \n\t\tinput  wire        video_stream_sink_endofpacket,           \n\t\tinput  wire        video_stream_sink_valid,                 \n\t\toutput wire        video_stream_sink_ready,                 \n\t\tinput  wire        video_stream_source_ready,               \n\t\toutput wire [23:0] video_stream_source_data,                \n\t\toutput wire        video_stream_source_startofpacket,       \n\t\toutput wire        video_stream_source_endofpacket,         \n\t\toutput wire        video_stream_source_valid                \n\t);\n\n\twire         chroma_filter_avalon_chroma_source_valid;                          \n\twire   [7:0] chroma_filter_avalon_chroma_source_data;                           \n\twire         chroma_filter_avalon_chroma_source_ready;                          \n\twire         chroma_filter_avalon_chroma_source_startofpacket;                  \n\twire         chroma_filter_avalon_chroma_source_endofpacket;                    \n\twire         chroma_upsampler_avalon_chroma_source_valid;                       \n\twire  [23:0] chroma_upsampler_avalon_chroma_source_data;                        \n\twire         chroma_upsampler_avalon_chroma_source_ready;                       \n\twire         chroma_upsampler_avalon_chroma_source_startofpacket;               \n\twire         chroma_upsampler_avalon_chroma_source_endofpacket;                 \n\twire         edge_detection_avalon_edge_detection_source_valid;                 \n\twire   [7:0] edge_detection_avalon_edge_detection_source_data;                  \n\twire         edge_detection_avalon_edge_detection_source_ready;                 \n\twire         edge_detection_avalon_edge_detection_source_startofpacket;         \n\twire         edge_detection_avalon_edge_detection_source_endofpacket;           \n\twire         video_stream_splitter_avalon_stream_router_source_0_valid;         \n\twire  [23:0] video_stream_splitter_avalon_stream_router_source_0_data;          \n\twire         video_stream_splitter_avalon_stream_router_source_0_ready;         \n\twire         video_stream_splitter_avalon_stream_router_source_0_startofpacket; \n\twire         video_stream_splitter_avalon_stream_router_source_0_endofpacket;   \n\twire         video_stream_splitter_avalon_stream_router_source_1_valid;         \n\twire  [23:0] video_stream_splitter_avalon_stream_router_source_1_data;          \n\twire         video_stream_splitter_avalon_stream_router_source_1_ready;         \n\twire         video_stream_splitter_avalon_stream_router_source_1_startofpacket; \n\twire         video_stream_splitter_avalon_stream_router_source_1_endofpacket;   \n\twire         video_stream_splitter_avalon_sync_source_valid;                    \n\twire         video_stream_splitter_avalon_sync_source_data;                     \n\twire         video_stream_splitter_avalon_sync_source_ready;                    \n\twire         edge_detection_router_controller_external_connection_export;       \n\twire         rst_controller_reset_out_reset;                                    \n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Chroma_Filter chroma_filter (\n\t\t.clk                      (sys_clk_clk),                                                       \n\t\t.reset                    (rst_controller_reset_out_reset),                                    \n\t\t.stream_in_startofpacket  (video_stream_splitter_avalon_stream_router_source_1_startofpacket), \n\t\t.stream_in_endofpacket    (video_stream_splitter_avalon_stream_router_source_1_endofpacket),   \n\t\t.stream_in_valid          (video_stream_splitter_avalon_stream_router_source_1_valid),         \n\t\t.stream_in_ready          (video_stream_splitter_avalon_stream_router_source_1_ready),         \n\t\t.stream_in_data           (video_stream_splitter_avalon_stream_router_source_1_data),          \n\t\t.stream_out_ready         (chroma_filter_avalon_chroma_source_ready),                          \n\t\t.stream_out_startofpacket (chroma_filter_avalon_chroma_source_startofpacket),                  \n\t\t.stream_out_endofpacket   (chroma_filter_avalon_chroma_source_endofpacket),                    \n\t\t.stream_out_valid         (chroma_filter_avalon_chroma_source_valid),                          \n\t\t.stream_out_data          (chroma_filter_avalon_chroma_source_data)                            \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Chroma_Upsampler chroma_upsampler (\n\t\t.clk                      (sys_clk_clk),                                               \n\t\t.reset                    (rst_controller_reset_out_reset),                            \n\t\t.stream_in_startofpacket  (edge_detection_avalon_edge_detection_source_startofpacket), \n\t\t.stream_in_endofpacket    (edge_detection_avalon_edge_detection_source_endofpacket),   \n\t\t.stream_in_valid          (edge_detection_avalon_edge_detection_source_valid),         \n\t\t.stream_in_ready          (edge_detection_avalon_edge_detection_source_ready),         \n\t\t.stream_in_data           (edge_detection_avalon_edge_detection_source_data),          \n\t\t.stream_out_ready         (chroma_upsampler_avalon_chroma_source_ready),               \n\t\t.stream_out_startofpacket (chroma_upsampler_avalon_chroma_source_startofpacket),       \n\t\t.stream_out_endofpacket   (chroma_upsampler_avalon_chroma_source_endofpacket),         \n\t\t.stream_out_valid         (chroma_upsampler_avalon_chroma_source_valid),               \n\t\t.stream_out_data          (chroma_upsampler_avalon_chroma_source_data)                 \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Edge_Detection edge_detection (\n\t\t.clk               (sys_clk_clk),                                               \n\t\t.reset             (rst_controller_reset_out_reset),                            \n\t\t.in_data           (chroma_filter_avalon_chroma_source_data),                   \n\t\t.in_startofpacket  (chroma_filter_avalon_chroma_source_startofpacket),          \n\t\t.in_endofpacket    (chroma_filter_avalon_chroma_source_endofpacket),            \n\t\t.in_valid          (chroma_filter_avalon_chroma_source_valid),                  \n\t\t.in_ready          (chroma_filter_avalon_chroma_source_ready),                  \n\t\t.out_ready         (edge_detection_avalon_edge_detection_source_ready),         \n\t\t.out_data          (edge_detection_avalon_edge_detection_source_data),          \n\t\t.out_startofpacket (edge_detection_avalon_edge_detection_source_startofpacket), \n\t\t.out_endofpacket   (edge_detection_avalon_edge_detection_source_endofpacket),   \n\t\t.out_valid         (edge_detection_avalon_edge_detection_source_valid)          \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Edge_Detection_Router_Controller edge_detection_router_controller (\n\t\t.clk        (sys_clk_clk),                                                 \n\t\t.reset_n    (~rst_controller_reset_out_reset),                             \n\t\t.address    (edge_detection_control_slave_address),                        \n\t\t.write_n    (edge_detection_control_slave_write_n),                        \n\t\t.writedata  (edge_detection_control_slave_writedata),                      \n\t\t.chipselect (edge_detection_control_slave_chipselect),                     \n\t\t.readdata   (edge_detection_control_slave_readdata),                       \n\t\t.out_port   (edge_detection_router_controller_external_connection_export)  \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Video_Stream_Merger video_stream_merger (\n\t\t.clk                       (sys_clk_clk),                                                       \n\t\t.reset                     (rst_controller_reset_out_reset),                                    \n\t\t.stream_in_data_0          (video_stream_splitter_avalon_stream_router_source_0_data),          \n\t\t.stream_in_startofpacket_0 (video_stream_splitter_avalon_stream_router_source_0_startofpacket), \n\t\t.stream_in_endofpacket_0   (video_stream_splitter_avalon_stream_router_source_0_endofpacket),   \n\t\t.stream_in_valid_0         (video_stream_splitter_avalon_stream_router_source_0_valid),         \n\t\t.stream_in_ready_0         (video_stream_splitter_avalon_stream_router_source_0_ready),         \n\t\t.stream_in_data_1          (chroma_upsampler_avalon_chroma_source_data),                        \n\t\t.stream_in_startofpacket_1 (chroma_upsampler_avalon_chroma_source_startofpacket),               \n\t\t.stream_in_endofpacket_1   (chroma_upsampler_avalon_chroma_source_endofpacket),                 \n\t\t.stream_in_valid_1         (chroma_upsampler_avalon_chroma_source_valid),                       \n\t\t.stream_in_ready_1         (chroma_upsampler_avalon_chroma_source_ready),                       \n\t\t.sync_data                 (video_stream_splitter_avalon_sync_source_data),                     \n\t\t.sync_valid                (video_stream_splitter_avalon_sync_source_valid),                    \n\t\t.sync_ready                (video_stream_splitter_avalon_sync_source_ready),                    \n\t\t.stream_out_ready          (video_stream_source_ready),                                         \n\t\t.stream_out_data           (video_stream_source_data),                                          \n\t\t.stream_out_startofpacket  (video_stream_source_startofpacket),                                 \n\t\t.stream_out_endofpacket    (video_stream_source_endofpacket),                                   \n\t\t.stream_out_valid          (video_stream_source_valid)                                          \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Video_Stream_Splitter video_stream_splitter (\n\t\t.clk                        (sys_clk_clk),                                                       \n\t\t.reset                      (rst_controller_reset_out_reset),                                    \n\t\t.stream_in_data             (video_stream_sink_data),                                            \n\t\t.stream_in_startofpacket    (video_stream_sink_startofpacket),                                   \n\t\t.stream_in_endofpacket      (video_stream_sink_endofpacket),                                     \n\t\t.stream_in_valid            (video_stream_sink_valid),                                           \n\t\t.stream_in_ready            (video_stream_sink_ready),                                           \n\t\t.sync_ready                 (video_stream_splitter_avalon_sync_source_ready),                    \n\t\t.sync_data                  (video_stream_splitter_avalon_sync_source_data),                     \n\t\t.sync_valid                 (video_stream_splitter_avalon_sync_source_valid),                    \n\t\t.stream_out_ready_0         (video_stream_splitter_avalon_stream_router_source_0_ready),         \n\t\t.stream_out_data_0          (video_stream_splitter_avalon_stream_router_source_0_data),          \n\t\t.stream_out_startofpacket_0 (video_stream_splitter_avalon_stream_router_source_0_startofpacket), \n\t\t.stream_out_endofpacket_0   (video_stream_splitter_avalon_stream_router_source_0_endofpacket),   \n\t\t.stream_out_valid_0         (video_stream_splitter_avalon_stream_router_source_0_valid),         \n\t\t.stream_out_ready_1         (video_stream_splitter_avalon_stream_router_source_1_ready),         \n\t\t.stream_out_data_1          (video_stream_splitter_avalon_stream_router_source_1_data),          \n\t\t.stream_out_startofpacket_1 (video_stream_splitter_avalon_stream_router_source_1_startofpacket), \n\t\t.stream_out_endofpacket_1   (video_stream_splitter_avalon_stream_router_source_1_endofpacket),   \n\t\t.stream_out_valid_1         (video_stream_splitter_avalon_stream_router_source_1_valid),         \n\t\t.stream_select              (edge_detection_router_controller_external_connection_export)        \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (1),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (0),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller (\n\t\t.reset_in0      (~sys_reset_reset_n),             \n\t\t.clk            (sys_clk_clk),                    \n\t\t.reset_out      (rst_controller_reset_out_reset), \n\t\t.reset_req      (),                               \n\t\t.reset_req_in0  (1'b0),                           \n\t\t.reset_in1      (1'b0),                           \n\t\t.reset_req_in1  (1'b0),                           \n\t\t.reset_in2      (1'b0),                           \n\t\t.reset_req_in2  (1'b0),                           \n\t\t.reset_in3      (1'b0),                           \n\t\t.reset_req_in3  (1'b0),                           \n\t\t.reset_in4      (1'b0),                           \n\t\t.reset_req_in4  (1'b0),                           \n\t\t.reset_in5      (1'b0),                           \n\t\t.reset_req_in5  (1'b0),                           \n\t\t.reset_in6      (1'b0),                           \n\t\t.reset_req_in6  (1'b0),                           \n\t\t.reset_in7      (1'b0),                           \n\t\t.reset_req_in7  (1'b0),                           \n\t\t.reset_in8      (1'b0),                           \n\t\t.reset_req_in8  (1'b0),                           \n\t\t.reset_in9      (1'b0),                           \n\t\t.reset_req_in9  (1'b0),                           \n\t\t.reset_in10     (1'b0),                           \n\t\t.reset_req_in10 (1'b0),                           \n\t\t.reset_in11     (1'b0),                           \n\t\t.reset_req_in11 (1'b0),                           \n\t\t.reset_in12     (1'b0),                           \n\t\t.reset_req_in12 (1'b0),                           \n\t\t.reset_in13     (1'b0),                           \n\t\t.reset_req_in13 (1'b0),                           \n\t\t.reset_in14     (1'b0),                           \n\t\t.reset_req_in14 (1'b0),                           \n\t\t.reset_in15     (1'b0),                           \n\t\t.reset_req_in15 (1'b0)                            \n\t);\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem.\n\nModule specification: The Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem is designed to detect edges in video frames using a series of submodules for chroma filtering, upsampling, and edge detection processing. The module operates synchronously with a system clock and includes reset control. Input ports include control interfaces (edge_detection_control_slave_*) for configuration, a system clock (sys_clk_clk), a system reset (sys_reset_reset_n), and video stream inputs (video_stream_sink_*). Output ports comprise control read data (edge_detection_control_slave_readdata), video stream output readiness (video_stream_sink_ready), and processed video stream outputs (video_stream_source_*), which indicate status and data flow for processed video frames.\n\nInternal signals such as chroma_filter_avalon_chroma_source_* and chroma_upsampler_avalon_chroma_source_* manage the data flow from the chroma filter and upsampler submodules. Signals like edge_detection_avalon_edge_detection_source_* control the output from the edge detection processing. Additional signals from the video_stream_splitter_* manage input video streams and synchronization.\n\nThe module incorporates several key submodules outlined in the code: Chroma_Filter, Chroma_Upsampler, Edge_Detection, Edge_Detection_Router_Controller, and Video_Stream_Merger, each tasked with specific roles within video processing, ranging from filtering and upsampling to routing and merging processed video streams. This structure supports flexible, efficient edge detection in video processing applications, enabling further processing or display of video data with highlighted edges.\n"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem.\n\nExplanation: The module is tasked with processing video input to detect edges within the video frames. It integrates various sub-modules, such as chroma filters, upsamplers, and edge detection processing, to filter and enhance chroma data, and detect edges in the processed stream. The module handles video data streams: it receives input video data, processes it through several stages including chroma filtering and edge detection, and finally merges different processed streams into one output stream. This output can then be used for further processing or display, providing detailed visual information where edges are highlighted. The module operates synchronously with a system clock and includes provisions for reset control. It is designed to interface with control signals through a simple slave interface for parameter adjustments."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \n**Input ports:**\n1. `edge_detection_control_slave_address`\n2. `edge_detection_control_slave_write_n`\n3. `edge_detection_control_slave_writedata`\n4. `edge_detection_control_slave_chipselect`\n5. `sys_clk_clk`\n6. `sys_reset_reset_n`\n7. `video_stream_sink_data`\n8. `video_stream_sink_startofpacket`\n9. `video_stream_sink_endofpacket`\n10. `video_stream_sink_valid`\n11. `video_stream_source_ready`\n\n**Explanation:**\n- `edge_detection_control_slave_address`, `edge_detection_control_slave_write_n`, `edge_detection_control_slave_writedata`, `edge_detection_control_slave_chipselect`: These ports are used for control interface, enabling configuration and control of the edge detection subsystem through a slave interface. It accepts address, write enable, data inputs, and chip selection for configuration.\n- `sys_clk_clk`: System clock input that synchronizes the operations within the module.\n- `sys_reset_reset_n`: System reset input; active low. This resets the internal state of the module to an initial state.\n- `video_stream_sink_data`: Video input data stream port, where video frames are input into the module for processing.\n- `video_stream_sink_startofpacket`, `video_stream_sink_endofpacket`, `video_stream_sink_valid`: These signals control the input data stream. `startofpacket` and `endofpacket` indicate the beginning and end of a video packet, and `valid` indicates that the current data on the video data line is valid.\n- `video_stream_source_ready`: Ready signal from the next stage in the video processing pipeline indicating it can accept data.\n\n**Output ports:**\n1. `edge_detection_control_slave_readdata`\n2. `video_stream_sink_ready`\n3. `video_stream_source_data`\n4. `video_stream_source_startofpacket`\n5. `video_stream_source_endofpacket`\n6. `video_stream_source_valid`\n\n**Explanation:**\n- `edge_detection_control_slave_readdata`: Output data port for the control interface, used to send data back to the controller/master during read operations.\n- `video_stream_sink_ready`: Ready signal to accept more input data into the edge detection subsystem. It signals back to the previous stage in the video pipeline that it is prepared to receive more video data.\n- `video_stream_source_data`: Output video data after processing. This is the processed video stream output which carries the video data for further usage or display.\n- `video_stream_source_startofpacket`, `video_stream_source_endofpacket`, `video_stream_source_valid`: Control signals for the output video stream. `startofpacket` and `endofpacket` denote the start and end of a video packet on the output, and `valid` indicates the data on the output line is valid and can be read by the next processing stages."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \n**Internal signals:**\n1. `chroma_filter_avalon_chroma_source_valid`\n2. `chroma_filter_avalon_chroma_source_data`\n3. `chroma_filter_avalon_chroma_source_ready`\n4. `chroma_filter_avalon_chroma_source_startofpacket`\n5. `chroma_filter_avalon_chroma_source_endofpacket`\n6. `chroma_upsampler_avalon_chroma_source_valid`\n7. `chroma_upsampler_avalon_chroma_source_data`\n8. `chroma_upsampler_avalon_chroma_source_ready`\n9. `chroma_upsampler_avalon_chroma_source_startofpacket`\n10. `chroma_upsampler_avalon_chroma_source_endofpacket`\n11. `edge_detection_avalon_edge_detection_source_valid`\n12. `edge_detection_avalon_edge_detection_source_data`\n13. `edge_detection_avalon_edge_detection_source_ready`\n14. `edge_detection_avalon_edge_detection_source_startofpacket`\n15. `edge_detection_avalon_edge_detection_source_endofpacket`\n16. `video_stream_splitter_avalon_stream_router_source_0_valid`\n17. `video_stream_splitter_avalon_stream_router_source_0_data`\n18. `video_stream_splitter_avalon_stream_router_source_0_ready`\n19. `video_stream_splitter_avalon_stream_router_source_0_startofpacket`\n20. `video_stream_splitter_avalon_stream_router_source_0_endofpacket`\n21. `video_stream_splitter_avalon_stream_router_source_1_valid`\n22. `video_stream_splitter_avalon_stream_router_source_1_data`\n23. `video_stream_splitter_avalon_stream_router_source_1_ready`\n24. `video_stream_splitter_avalon_stream_router_source_1_startofpacket`\n25. `video_stream_splitter_avalon_stream_router_source_1_endofpacket`\n26. `video_stream_splitter_avalon_sync_source_valid`\n27. `video_stream_splitter_avalon_sync_source_data`\n28. `video_stream_splitter_avalon_sync_source_ready`\n29. `edge_detection_router_controller_external_connection_export`\n30. `rst_controller_reset_out_reset`\n\n**Explanation:**\n- `chroma_filter_avalon_chroma_source_*`: These signals manage the output stream from the chroma filter, dealing with the validity, data content, readiness, initialization, and termination of the chroma packet.\n- `chroma_upsampler_avalon_chroma_source_*`: These signals manage the output stream from the chroma upsampler with similar functionality to manage data flow including data validity, readiness, start, and end of packets.\n- `edge_detection_avalon_edge_detection_source_*`: These signals are used for managing the stream output from the edge detection block, indicating the data validity, readiness to receive or send data, and marking the start and end of packets.\n- `video_stream_splitter_avalon_stream_router_source_*_valid/data/ready/startofpacket/endofpacket`: These signals manage the outputs from the video stream splitter, handling whether data is valid, data content, the readiness of the output stream, and marking the boundaries of the packets.\n- `video_stream_splitter_avalon_sync_source_*`: These signals manage the synchronization stream output data including validation of the sync data and readiness.\n- `edge_detection_router_controller_external_connection_export`: This signal potentially exports edge router controller state or provides a control interface externally, managing switching or selection logic.\n- `rst_controller_reset_out_reset`: This is the output reset signal from the reset controller submodule, which ensures consistent reset pulse delivery across the module.\n\nEach of these internal signals interfaces between the internal submodules, coordinating data and control flow to ensure correct video processing according to the module's functional requirements."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n`timescale 1 ps / 1 ps\nmodule Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem (\n\t\tinput  wire [1:0]  edge_detection_control_slave_address,    \n\t\tinput  wire        edge_detection_control_slave_write_n,    \n\t\tinput  wire [31:0] edge_detection_control_slave_writedata,  \n\t\tinput  wire        edge_detection_control_slave_chipselect, \n\t\toutput wire [31:0] edge_detection_control_slave_readdata,   \n\t\tinput  wire        sys_clk_clk,                             \n\t\tinput  wire        sys_reset_reset_n,                       \n\t\tinput  wire [23:0] video_stream_sink_data,                  \n\t\tinput  wire        video_stream_sink_startofpacket,         \n\t\tinput  wire        video_stream_sink_endofpacket,           \n\t\tinput  wire        video_stream_sink_valid,                 \n\t\toutput wire        video_stream_sink_ready,                 \n\t\tinput  wire        video_stream_source_ready,               \n\t\toutput wire [23:0] video_stream_source_data,                \n\t\toutput wire        video_stream_source_startofpacket,       \n\t\toutput wire        video_stream_source_endofpacket,         \n\t\toutput wire        video_stream_source_valid                \n\t);\n\n\twire         chroma_filter_avalon_chroma_source_valid;                          \n\twire   [7:0] chroma_filter_avalon_chroma_source_data;                           \n\twire         chroma_filter_avalon_chroma_source_ready;                          \n\twire         chroma_filter_avalon_chroma_source_startofpacket;                  \n\twire         chroma_filter_avalon_chroma_source_endofpacket;                    \n\twire         chroma_upsampler_avalon_chroma_source_valid;                       \n\twire  [23:0] chroma_upsampler_avalon_chroma_source_data;                        \n\twire         chroma_upsampler_avalon_chroma_source_ready;                       \n\twire         chroma_upsampler_avalon_chroma_source_startofpacket;               \n\twire         chroma_upsampler_avalon_chroma_source_endofpacket;                 \n\twire         edge_detection_avalon_edge_detection_source_valid;                 \n\twire   [7:0] edge_detection_avalon_edge_detection_source_data;                  \n\twire         edge_detection_avalon_edge_detection_source_ready;                 \n\twire         edge_detection_avalon_edge_detection_source_startofpacket;         \n\twire         edge_detection_avalon_edge_detection_source_endofpacket;           \n\twire         video_stream_splitter_avalon_stream_router_source_0_valid;         \n\twire  [23:0] video_stream_splitter_avalon_stream_router_source_0_data;          \n\twire         video_stream_splitter_avalon_stream_router_source_0_ready;         \n\twire         video_stream_splitter_avalon_stream_router_source_0_startofpacket; \n\twire         video_stream_splitter_avalon_stream_router_source_0_endofpacket;   \n\twire         video_stream_splitter_avalon_stream_router_source_1_valid;         \n\twire  [23:0] video_stream_splitter_avalon_stream_router_source_1_data;          \n\twire         video_stream_splitter_avalon_stream_router_source_1_ready;         \n\twire         video_stream_splitter_avalon_stream_router_source_1_startofpacket; \n\twire         video_stream_splitter_avalon_stream_router_source_1_endofpacket;   \n\twire         video_stream_splitter_avalon_sync_source_valid;                    \n\twire         video_stream_splitter_avalon_sync_source_data;                     \n\twire         video_stream_splitter_avalon_sync_source_ready;                    \n\twire         edge_detection_router_controller_external_connection_export;       \n\twire         rst_controller_reset_out_reset;                                    \n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Chroma_Filter chroma_filter (\n\t\t.clk                      (sys_clk_clk),                                                       \n\t\t.reset                    (rst_controller_reset_out_reset),                                    \n\t\t.stream_in_startofpacket  (video_stream_splitter_avalon_stream_router_source_1_startofpacket), \n\t\t.stream_in_endofpacket    (video_stream_splitter_avalon_stream_router_source_1_endofpacket),   \n\t\t.stream_in_valid          (video_stream_splitter_avalon_stream_router_source_1_valid),         \n\t\t.stream_in_ready          (video_stream_splitter_avalon_stream_router_source_1_ready),         \n\t\t.stream_in_data           (video_stream_splitter_avalon_stream_router_source_1_data),          \n\t\t.stream_out_ready         (chroma_filter_avalon_chroma_source_ready),                          \n\t\t.stream_out_startofpacket (chroma_filter_avalon_chroma_source_startofpacket),                  \n\t\t.stream_out_endofpacket   (chroma_filter_avalon_chroma_source_endofpacket),                    \n\t\t.stream_out_valid         (chroma_filter_avalon_chroma_source_valid),                          \n\t\t.stream_out_data          (chroma_filter_avalon_chroma_source_data)                            \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Chroma_Upsampler chroma_upsampler (\n\t\t.clk                      (sys_clk_clk),                                               \n\t\t.reset                    (rst_controller_reset_out_reset),                            \n\t\t.stream_in_startofpacket  (edge_detection_avalon_edge_detection_source_startofpacket), \n\t\t.stream_in_endofpacket    (edge_detection_avalon_edge_detection_source_endofpacket),   \n\t\t.stream_in_valid          (edge_detection_avalon_edge_detection_source_valid),         \n\t\t.stream_in_ready          (edge_detection_avalon_edge_detection_source_ready),         \n\t\t.stream_in_data           (edge_detection_avalon_edge_detection_source_data),          \n\t\t.stream_out_ready         (chroma_upsampler_avalon_chroma_source_ready),               \n\t\t.stream_out_startofpacket (chroma_upsampler_avalon_chroma_source_startofpacket),       \n\t\t.stream_out_endofpacket   (chroma_upsampler_avalon_chroma_source_endofpacket),         \n\t\t.stream_out_valid         (chroma_upsampler_avalon_chroma_source_valid),               \n\t\t.stream_out_data          (chroma_upsampler_avalon_chroma_source_data)                 \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Edge_Detection edge_detection (\n\t\t.clk               (sys_clk_clk),                                               \n\t\t.reset             (rst_controller_reset_out_reset),                            \n\t\t.in_data           (chroma_filter_avalon_chroma_source_data),                   \n\t\t.in_startofpacket  (chroma_filter_avalon_chroma_source_startofpacket),          \n\t\t.in_endofpacket    (chroma_filter_avalon_chroma_source_endofpacket),            \n\t\t.in_valid          (chroma_filter_avalon_chroma_source_valid),                  \n\t\t.in_ready          (chroma_filter_avalon_chroma_source_ready),                  \n\t\t.out_ready         (edge_detection_avalon_edge_detection_source_ready),         \n\t\t.out_data          (edge_detection_avalon_edge_detection_source_data),          \n\t\t.out_startofpacket (edge_detection_avalon_edge_detection_source_startofpacket), \n\t\t.out_endofpacket   (edge_detection_avalon_edge_detection_source_endofpacket),   \n\t\t.out_valid         (edge_detection_avalon_edge_detection_source_valid)          \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Edge_Detection_Router_Controller edge_detection_router_controller (\n\t\t.clk        (sys_clk_clk),                                                 \n\t\t.reset_n    (~rst_controller_reset_out_reset),                             \n\t\t.address    (edge_detection_control_slave_address),                        \n\t\t.write_n    (edge_detection_control_slave_write_n),                        \n\t\t.writedata  (edge_detection_control_slave_writedata),                      \n\t\t.chipselect (edge_detection_control_slave_chipselect),                     \n\t\t.readdata   (edge_detection_control_slave_readdata),                       \n\t\t.out_port   (edge_detection_router_controller_external_connection_export)  \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Video_Stream_Merger video_stream_merger (\n\t\t.clk                       (sys_clk_clk),                                                       \n\t\t.reset                     (rst_controller_reset_out_reset),                                    \n\t\t.stream_in_data_0          (video_stream_splitter_avalon_stream_router_source_0_data),          \n\t\t.stream_in_startofpacket_0 (video_stream_splitter_avalon_stream_router_source_0_startofpacket), \n\t\t.stream_in_endofpacket_0   (video_stream_splitter_avalon_stream_router_source_0_endofpacket),   \n\t\t.stream_in_valid_0         (video_stream_splitter_avalon_stream_router_source_0_valid),         \n\t\t.stream_in_ready_0         (video_stream_splitter_avalon_stream_router_source_0_ready),         \n\t\t.stream_in_data_1          (chroma_upsampler_avalon_chroma_source_data),                        \n\t\t.stream_in_startofpacket_1 (chroma_upsampler_avalon_chroma_source_startofpacket),               \n\t\t.stream_in_endofpacket_1   (chroma_upsampler_avalon_chroma_source_endofpacket),                 \n\t\t.stream_in_valid_1         (chroma_upsampler_avalon_chroma_source_valid),                       \n\t\t.stream_in_ready_1         (chroma_upsampler_avalon_chroma_source_ready),                       \n\t\t.sync_data                 (video_stream_splitter_avalon_sync_source_data),                     \n\t\t.sync_valid                (video_stream_splitter_avalon_sync_source_valid),                    \n\t\t.sync_ready                (video_stream_splitter_avalon_sync_source_ready),                    \n\t\t.stream_out_ready          (video_stream_source_ready),                                         \n\t\t.stream_out_data           (video_stream_source_data),                                          \n\t\t.stream_out_startofpacket  (video_stream_source_startofpacket),                                 \n\t\t.stream_out_endofpacket    (video_stream_source_endofpacket),                                   \n\t\t.stream_out_valid          (video_stream_source_valid)                                          \n\t);\n\n\tComputer_System_Video_In_Subsystem_Edge_Detection_Subsystem_Video_Stream_Splitter video_stream_splitter (\n\t\t.clk                        (sys_clk_clk),                                                       \n\t\t.reset                      (rst_controller_reset_out_reset),                                    \n\t\t.stream_in_data             (video_stream_sink_data),                                            \n\t\t.stream_in_startofpacket    (video_stream_sink_startofpacket),                                   \n\t\t.stream_in_endofpacket      (video_stream_sink_endofpacket),                                     \n\t\t.stream_in_valid            (video_stream_sink_valid),                                           \n\t\t.stream_in_ready            (video_stream_sink_ready),                                           \n\t\t.sync_ready                 (video_stream_splitter_avalon_sync_source_ready),                    \n\t\t.sync_data                  (video_stream_splitter_avalon_sync_source_data),                     \n\t\t.sync_valid                 (video_stream_splitter_avalon_sync_source_valid),                    \n\t\t.stream_out_ready_0         (video_stream_splitter_avalon_stream_router_source_0_ready),         \n\t\t.stream_out_data_0          (video_stream_splitter_avalon_stream_router_source_0_data),          \n\t\t.stream_out_startofpacket_0 (video_stream_splitter_avalon_stream_router_source_0_startofpacket), \n\t\t.stream_out_endofpacket_0   (video_stream_splitter_avalon_stream_router_source_0_endofpacket),   \n\t\t.stream_out_valid_0         (video_stream_splitter_avalon_stream_router_source_0_valid),         \n\t\t.stream_out_ready_1         (video_stream_splitter_avalon_stream_router_source_1_ready),         \n\t\t.stream_out_data_1          (video_stream_splitter_avalon_stream_router_source_1_data),          \n\t\t.stream_out_startofpacket_1 (video_stream_splitter_avalon_stream_router_source_1_startofpacket), \n\t\t.stream_out_endofpacket_1   (video_stream_splitter_avalon_stream_router_source_1_endofpacket),   \n\t\t.stream_out_valid_1         (video_stream_splitter_avalon_stream_router_source_1_valid),         \n\t\t.stream_select              (edge_detection_router_controller_external_connection_export)        \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (1),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (0),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller (\n\t\t.reset_in0      (~sys_reset_reset_n),             \n\t\t.clk            (sys_clk_clk),                    \n\t\t.reset_out      (rst_controller_reset_out_reset), \n\t\t.reset_req      (),                               \n\t\t.reset_req_in0  (1'b0),                           \n\t\t.reset_in1      (1'b0),                           \n\t\t.reset_req_in1  (1'b0),                           \n\t\t.reset_in2      (1'b0),                           \n\t\t.reset_req_in2  (1'b0),                           \n\t\t.reset_in3      (1'b0),                           \n\t\t.reset_req_in3  (1'b0),                           \n\t\t.reset_in4      (1'b0),                           \n\t\t.reset_req_in4  (1'b0),                           \n\t\t.reset_in5      (1'b0),                           \n\t\t.reset_req_in5  (1'b0),                           \n\t\t.reset_in6      (1'b0),                           \n\t\t.reset_req_in6  (1'b0),                           \n\t\t.reset_in7      (1'b0),                           \n\t\t.reset_req_in7  (1'b0),                           \n\t\t.reset_in8      (1'b0),                           \n\t\t.reset_req_in8  (1'b0),                           \n\t\t.reset_in9      (1'b0),                           \n\t\t.reset_req_in9  (1'b0),                           \n\t\t.reset_in10     (1'b0),                           \n\t\t.reset_req_in10 (1'b0),                           \n\t\t.reset_in11     (1'b0),                           \n\t\t.reset_req_in11 (1'b0),                           \n\t\t.reset_in12     (1'b0),                           \n\t\t.reset_req_in12 (1'b0),                           \n\t\t.reset_in13     (1'b0),                           \n\t\t.reset_req_in13 (1'b0),                           \n\t\t.reset_in14     (1'b0),                           \n\t\t.reset_req_in14 (1'b0),                           \n\t\t.reset_in15     (1'b0),                           \n\t\t.reset_req_in15 (1'b0)                            \n\t);\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem.\n\nModule specification: The Computer_System_Video_In_Subsystem_Edge_Detection_Subsystem is designed to detect edges in video frames using a series of submodules for chroma filtering, upsampling, and edge detection processing. The module operates synchronously with a system clock and includes reset control. Input ports include control interfaces (edge_detection_control_slave_*) for configuration, a system clock (sys_clk_clk), a system reset (sys_reset_reset_n), and video stream inputs (video_stream_sink_*). Output ports comprise control read data (edge_detection_control_slave_readdata), video stream output readiness (video_stream_sink_ready), and processed video stream outputs (video_stream_source_*), which indicate status and data flow for processed video frames.\n\nInternal signals such as chroma_filter_avalon_chroma_source_* and chroma_upsampler_avalon_chroma_source_* manage the data flow from the chroma filter and upsampler submodules. Signals like edge_detection_avalon_edge_detection_source_* control the output from the edge detection processing. Additional signals from the video_stream_splitter_* manage input video streams and synchronization.\n\nThe module incorporates several key submodules outlined in the code: Chroma_Filter, Chroma_Upsampler, Edge_Detection, Edge_Detection_Router_Controller, and Video_Stream_Merger, each tasked with specific roles within video processing, ranging from filtering and upsampling to routing and merging processed video streams. This structure supports flexible, efficient edge detection in video processing applications, enabling further processing or display of video data with highlighted edges.\n"
                }
            ]
        }
    ]
}