{
    "spec": "Module name: altera_reset_controller. Module specification: The 'altera_reset_controller' is a Verilog module that synchronizes up to 16 reset input signals and up to 16 reset request signals to a system clock, outputting single consolidated and stabilized reset and reset request signals. The module has input ports including `reset_in0` to `reset_in15` for the reset inputs, `reset_req_in0` to `reset_req_in15` for optional reset request inputs, and `clk` for the clock signal. It outputs `reset_out` for the synchronized reset signal and `reset_req` for the synchronized reset request signal. Internal signals such as `merged_reset` and `merged_reset_req_in` aggregate the respective reset and reset request inputs. Signals like `reset_out_pre` and `reset_req_pre` provide intermediate synchronization states. The design encompasses blocks such as reset and reset request synchronization, reset assertion delay management, and conditional adaptations for output edge behavior and request synchronization leveraging flags like `ADAPT_RESET_REQUEST` and `OUTPUT_RESET_SYNC_EDGES`. These different sections ensure the module can flexibly and reliably manage reset signals across diverse system requirements, maintain synchronization with the system clock, and minimize potential metastability issues.",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: altera_reset_controller.\nExplanation: The module 'altera_reset_controller' is designed to handle and synchronize multiple reset signals in digital hardware systems. It takes multiple reset input signals and optional reset request signals, and outputs a single synchronized reset signal and a reset request signal. The synchronization is controlled by parameters that determine the behavior during reset assertion and deassertion, influenced by system clock edges and specified timings. This ensures stable and predictable reset behavior across various parts of a digital system. The module also supports parameterized configuration to adapt its operation for different scenarios, using a variety of synchronization depths and reset conditions."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports: \n- reset_in0 to reset_in15\n- reset_req_in0 to reset_req_in15\n- clk\n\nExplanation:\n- **reset_in0 to reset_in15**: These are the reset input signals. The module can handle up to 16 different reset inputs, allowing a wide range of external reset conditions to be monitored and managed through a single reset controller.\n- **reset_req_in0 to reset_req_in15**: These are the optional reset request input signals corresponding to each reset input. They are used to request a reset from external sources, and their usage is governed by flags for each reset input indicating whether the corresponding request input should be considered.\n- **clk**: This is the clock input. It provides the timing reference for all synchronization operations within the module, ensuring that reset signals are aligned with the clock edges to avoid metastability issues.\n\nOutput ports:\n- reset_out\n- reset_req\n\nExplanation:\n- **reset_out**: This is the synchronized reset output signal. It is derived from the input reset signals, synchronized to the clock input to prevent issues such as metastability, ensuring that the reset is cleanly applied across the system.\n- **reset_req**: This is the output reset request signal. It outputs a synchronized reset request based on the input reset request signals. Its behavior is tailored based on module configuration, handling scenarios like early reset deassertion and syncing additional reset requests if required. This signal helps in managing system-level reset sequencing or indicating when a reset condition should propagate through the system."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals:\n- merged_reset\n- merged_reset_req_in\n- reset_out_pre\n- reset_req_pre\n- altera_reset_synchronizer_int_chain\n- r_sync_rst_chain\n- r_sync_rst\n- r_early_rst\n\nExplanation:\n- **merged_reset**: This signal is the logical OR of all input reset signals (reset_in0 to reset_in15). It combines all the individual reset conditions into a single line that represents if any reset condition is active.\n- **merged_reset_req_in**: This signal combines the inputs of all reset request signals (reset_req_in0 to reset_req_in15) based on the configuration parameters (USE_RESET_REQUEST_INx). It logs which reset request signals should actually contribute to the final reset request output based on their respective flags.\n- **reset_out_pre**: This is an intermediate signal that holds the result of synchronizing the merged reset signal to the clock. It is used as a step in generating the final reset_out signal, ensuring stable and clock-synchronized output.\n- **reset_req_pre**: Similar to reset_out_pre, this signal holds the synchronized version of the merged reset request input signal. This synchronization ensures that the reset request is coherent with the clock edges, avoiding metastability.\n- **altera_reset_synchronizer_int_chain**: This registral chain is utilized to delay and synchronize the reset signal over a defined number of clock cycles based on its length. This helps in further stabilizing the reset signal across varied clock domains or operational phases.\n- **r_sync_rst_chain**: A shift register chain used to delay the reset signal according to the required assertion period. This guarantees that the reset pulse is held long enough to ensure system stability.\n- **r_sync_rst**: This signal represents the final output reset state, taking into account the possible reset conditions and the state of the synchronization chain. It provides the output reset signal after adequate delay and synchronization.\n- **r_early_rst**: This Boolean signal manages an early reset request based on the system's need to cater to early deassertion scenarios. It balances the timing of reset requests to optimize system responsiveness and reset integrity."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1 ns / 1 ns\n\nmodule altera_reset_controller\n#(\n    parameter NUM_RESET_INPUTS              = 6,\n    parameter USE_RESET_REQUEST_IN0 = 0,\n    parameter USE_RESET_REQUEST_IN1 = 0,\n    parameter USE_RESET_REQUEST_IN2 = 0,\n    parameter USE_RESET_REQUEST_IN3 = 0,\n    parameter USE_RESET_REQUEST_IN4 = 0,\n    parameter USE_RESET_REQUEST_IN5 = 0,\n    parameter USE_RESET_REQUEST_IN6 = 0,\n    parameter USE_RESET_REQUEST_IN7 = 0,\n    parameter USE_RESET_REQUEST_IN8 = 0,\n    parameter USE_RESET_REQUEST_IN9 = 0,\n    parameter USE_RESET_REQUEST_IN10 = 0,\n    parameter USE_RESET_REQUEST_IN11 = 0,\n    parameter USE_RESET_REQUEST_IN12 = 0,\n    parameter USE_RESET_REQUEST_IN13 = 0,\n    parameter USE_RESET_REQUEST_IN14 = 0,\n    parameter USE_RESET_REQUEST_IN15 = 0,\n    parameter OUTPUT_RESET_SYNC_EDGES       = \"deassert\",\n    parameter SYNC_DEPTH                    = 2,\n    parameter RESET_REQUEST_PRESENT         = 0,\n    parameter RESET_REQ_WAIT_TIME           = 3,\n    parameter MIN_RST_ASSERTION_TIME        = 11,\n    parameter RESET_REQ_EARLY_DSRT_TIME     = 4,\n    parameter ADAPT_RESET_REQUEST          = 0\n)\n(\n    \n    \n    \n    input reset_in0,\n    input reset_in1,\n    input reset_in2,\n    input reset_in3,\n    input reset_in4,\n    input reset_in5,\n    input reset_in6,\n    input reset_in7,\n    input reset_in8,\n    input reset_in9,\n    input reset_in10,\n    input reset_in11,\n    input reset_in12,\n    input reset_in13,\n    input reset_in14,\n    input reset_in15,\n    input reset_req_in0,\n    input reset_req_in1,\n    input reset_req_in2,\n    input reset_req_in3,\n    input reset_req_in4,\n    input reset_req_in5,\n    input reset_req_in6,\n    input reset_req_in7,\n    input reset_req_in8,\n    input reset_req_in9,\n    input reset_req_in10,\n    input reset_req_in11,\n    input reset_req_in12,\n    input reset_req_in13,\n    input reset_req_in14,\n    input reset_req_in15,\n\n\n    input  clk,\n    output reg reset_out,\n    output reg reset_req\n);\n\n   \n   localparam ASYNC_RESET = (OUTPUT_RESET_SYNC_EDGES == \"deassert\");\n\n   \n   \n   \n   localparam MIN_METASTABLE = 3;\n   localparam RSTREQ_ASRT_SYNC_TAP = MIN_METASTABLE + RESET_REQ_WAIT_TIME;\n\n   localparam LARGER = RESET_REQ_WAIT_TIME > RESET_REQ_EARLY_DSRT_TIME ? RESET_REQ_WAIT_TIME : RESET_REQ_EARLY_DSRT_TIME;\n\n   localparam ASSERTION_CHAIN_LENGTH =  (MIN_METASTABLE > LARGER) ? \n                                            MIN_RST_ASSERTION_TIME + 1 :\n                                        (\n                                        (MIN_RST_ASSERTION_TIME > LARGER)? \n                                            MIN_RST_ASSERTION_TIME + (LARGER - MIN_METASTABLE + 1) + 1 :\n                                            MIN_RST_ASSERTION_TIME + RESET_REQ_EARLY_DSRT_TIME + RESET_REQ_WAIT_TIME - MIN_METASTABLE + 2\n                                        );\n\n   localparam RESET_REQ_DRST_TAP = RESET_REQ_EARLY_DSRT_TIME + 1;\n   \n\n   wire merged_reset;\n   wire merged_reset_req_in;\n   wire reset_out_pre;\n   wire reset_req_pre;\n\n   \n   (*preserve*) reg  [RSTREQ_ASRT_SYNC_TAP: 0]  altera_reset_synchronizer_int_chain;\n   reg [ASSERTION_CHAIN_LENGTH-1: 0]            r_sync_rst_chain;\n   reg                                          r_sync_rst;\n   reg                                          r_early_rst;\n\n    \n    \n    \n    assign merged_reset = (  \n                              reset_in0 | \n                              reset_in1 | \n                              reset_in2 | \n                              reset_in3 | \n                              reset_in4 | \n                              reset_in5 | \n                              reset_in6 | \n                              reset_in7 | \n                              reset_in8 | \n                              reset_in9 | \n                              reset_in10 | \n                              reset_in11 | \n                              reset_in12 | \n                              reset_in13 | \n                              reset_in14 | \n                              reset_in15\n                          );\n\n    assign merged_reset_req_in = (\n                              ( (USE_RESET_REQUEST_IN0 == 1) ? reset_req_in0 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN1 == 1) ? reset_req_in1 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN2 == 1) ? reset_req_in2 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN3 == 1) ? reset_req_in3 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN4 == 1) ? reset_req_in4 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN5 == 1) ? reset_req_in5 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN6 == 1) ? reset_req_in6 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN7 == 1) ? reset_req_in7 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN8 == 1) ? reset_req_in8 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN9 == 1) ? reset_req_in9 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN10 == 1) ? reset_req_in10 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN11 == 1) ? reset_req_in11 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN12 == 1) ? reset_req_in12 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN13 == 1) ? reset_req_in13 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN14 == 1) ? reset_req_in14 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN15 == 1) ? reset_req_in15 : 1'b0) \n                            );\n\n\n    \n    \n    \n    \n    generate if (OUTPUT_RESET_SYNC_EDGES == \"none\" && (RESET_REQUEST_PRESENT==0)) begin\n\n        assign reset_out_pre = merged_reset;\n        assign reset_req_pre = merged_reset_req_in;\n\n    end else begin\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH),\n            .ASYNC_RESET(RESET_REQUEST_PRESENT? 1'b1 : ASYNC_RESET)\n        )\n        alt_rst_sync_uq1\n        (\n            .clk        (clk),\n            .reset_in   (merged_reset),\n            .reset_out  (reset_out_pre)\n        );\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH),\n            .ASYNC_RESET(0)\n        )\n        alt_rst_req_sync_uq1\n        (\n            .clk        (clk),\n            .reset_in   (merged_reset_req_in),\n            .reset_out  (reset_req_pre)\n        );\n\n    end\n    endgenerate\n\n    generate if ( ( (RESET_REQUEST_PRESENT == 0) && (ADAPT_RESET_REQUEST==0) )|\n                  ( (ADAPT_RESET_REQUEST == 1) && (OUTPUT_RESET_SYNC_EDGES != \"deassert\") ) ) begin\n        always @* begin\n            reset_out = reset_out_pre;\n            reset_req = reset_req_pre;\n        end\n    end else if ( (RESET_REQUEST_PRESENT == 0) && (ADAPT_RESET_REQUEST==1) ) begin\n\n        wire reset_out_pre2;\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH+1),\n            .ASYNC_RESET(0)\n        )\n        alt_rst_sync_uq2\n        (\n            .clk        (clk),\n            .reset_in   (reset_out_pre),\n            .reset_out  (reset_out_pre2)\n        );\n\n        always @* begin\n            reset_out = reset_out_pre2;\n            reset_req = reset_req_pre;\n        end\n\n    end\n    else begin\n\n    \n    initial\n    begin\n        altera_reset_synchronizer_int_chain <= {RSTREQ_ASRT_SYNC_TAP{1'b1}};\n    end\n\n    always @(posedge clk)\n    begin\n        altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP:0] <= \n            {altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP-1:0], reset_out_pre}; \n    end\n\n    \n    initial\n    begin\n        r_sync_rst_chain <= {ASSERTION_CHAIN_LENGTH{1'b1}};\n    end\n\n    always @(posedge clk)\n    begin\n        if (altera_reset_synchronizer_int_chain[MIN_METASTABLE-1] == 1'b1)\n        begin\n            r_sync_rst_chain <= {ASSERTION_CHAIN_LENGTH{1'b1}};\n    end\n    else\n    begin\n        r_sync_rst_chain <= {1'b0, r_sync_rst_chain[ASSERTION_CHAIN_LENGTH-1:1]};\n    end\n    end\n\n    \n    \n\n    always @(posedge clk)\n    begin\n        case ({altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP], r_sync_rst_chain[1], r_sync_rst})\n            3'b000:   r_sync_rst <= 1'b0; \n            3'b001:   r_sync_rst <= 1'b0;\n            3'b010:   r_sync_rst <= 1'b0;\n            3'b011:   r_sync_rst <= 1'b1;\n            3'b100:   r_sync_rst <= 1'b1; \n            3'b101:   r_sync_rst <= 1'b1;\n            3'b110:   r_sync_rst <= 1'b1;\n            3'b111:   r_sync_rst <= 1'b1; \n            default:  r_sync_rst <= 1'b1;\n        endcase\n\n        case ({r_sync_rst_chain[1], r_sync_rst_chain[RESET_REQ_DRST_TAP] | reset_req_pre})\n            2'b00:   r_early_rst <= 1'b0; \n            2'b01:   r_early_rst <= 1'b1; \n            2'b10:   r_early_rst <= 1'b0; \n            2'b11:   r_early_rst <= 1'b1; \n            default: r_early_rst <= 1'b1;\n        endcase\n    end\n\n    always @* begin\n        reset_out = r_sync_rst;\n        reset_req = r_early_rst;\n    end\n\n    end\n    endgenerate\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: altera_reset_controller. Module specification: The 'altera_reset_controller' is a Verilog module that synchronizes up to 16 reset input signals and up to 16 reset request signals to a system clock, outputting single consolidated and stabilized reset and reset request signals. The module has input ports including `reset_in0` to `reset_in15` for the reset inputs, `reset_req_in0` to `reset_req_in15` for optional reset request inputs, and `clk` for the clock signal. It outputs `reset_out` for the synchronized reset signal and `reset_req` for the synchronized reset request signal. Internal signals such as `merged_reset` and `merged_reset_req_in` aggregate the respective reset and reset request inputs. Signals like `reset_out_pre` and `reset_req_pre` provide intermediate synchronization states. The design encompasses blocks such as reset and reset request synchronization, reset assertion delay management, and conditional adaptations for output edge behavior and request synchronization leveraging flags like `ADAPT_RESET_REQUEST` and `OUTPUT_RESET_SYNC_EDGES`. These different sections ensure the module can flexibly and reliably manage reset signals across diverse system requirements, maintain synchronization with the system clock, and minimize potential metastability issues."
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: altera_reset_controller.\nExplanation: The module 'altera_reset_controller' is designed to handle and synchronize multiple reset signals in digital hardware systems. It takes multiple reset input signals and optional reset request signals, and outputs a single synchronized reset signal and a reset request signal. The synchronization is controlled by parameters that determine the behavior during reset assertion and deassertion, influenced by system clock edges and specified timings. This ensures stable and predictable reset behavior across various parts of a digital system. The module also supports parameterized configuration to adapt its operation for different scenarios, using a variety of synchronization depths and reset conditions."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports: \n- reset_in0 to reset_in15\n- reset_req_in0 to reset_req_in15\n- clk\n\nExplanation:\n- **reset_in0 to reset_in15**: These are the reset input signals. The module can handle up to 16 different reset inputs, allowing a wide range of external reset conditions to be monitored and managed through a single reset controller.\n- **reset_req_in0 to reset_req_in15**: These are the optional reset request input signals corresponding to each reset input. They are used to request a reset from external sources, and their usage is governed by flags for each reset input indicating whether the corresponding request input should be considered.\n- **clk**: This is the clock input. It provides the timing reference for all synchronization operations within the module, ensuring that reset signals are aligned with the clock edges to avoid metastability issues.\n\nOutput ports:\n- reset_out\n- reset_req\n\nExplanation:\n- **reset_out**: This is the synchronized reset output signal. It is derived from the input reset signals, synchronized to the clock input to prevent issues such as metastability, ensuring that the reset is cleanly applied across the system.\n- **reset_req**: This is the output reset request signal. It outputs a synchronized reset request based on the input reset request signals. Its behavior is tailored based on module configuration, handling scenarios like early reset deassertion and syncing additional reset requests if required. This signal helps in managing system-level reset sequencing or indicating when a reset condition should propagate through the system."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals:\n- merged_reset\n- merged_reset_req_in\n- reset_out_pre\n- reset_req_pre\n- altera_reset_synchronizer_int_chain\n- r_sync_rst_chain\n- r_sync_rst\n- r_early_rst\n\nExplanation:\n- **merged_reset**: This signal is the logical OR of all input reset signals (reset_in0 to reset_in15). It combines all the individual reset conditions into a single line that represents if any reset condition is active.\n- **merged_reset_req_in**: This signal combines the inputs of all reset request signals (reset_req_in0 to reset_req_in15) based on the configuration parameters (USE_RESET_REQUEST_INx). It logs which reset request signals should actually contribute to the final reset request output based on their respective flags.\n- **reset_out_pre**: This is an intermediate signal that holds the result of synchronizing the merged reset signal to the clock. It is used as a step in generating the final reset_out signal, ensuring stable and clock-synchronized output.\n- **reset_req_pre**: Similar to reset_out_pre, this signal holds the synchronized version of the merged reset request input signal. This synchronization ensures that the reset request is coherent with the clock edges, avoiding metastability.\n- **altera_reset_synchronizer_int_chain**: This registral chain is utilized to delay and synchronize the reset signal over a defined number of clock cycles based on its length. This helps in further stabilizing the reset signal across varied clock domains or operational phases.\n- **r_sync_rst_chain**: A shift register chain used to delay the reset signal according to the required assertion period. This guarantees that the reset pulse is held long enough to ensure system stability.\n- **r_sync_rst**: This signal represents the final output reset state, taking into account the possible reset conditions and the state of the synchronization chain. It provides the output reset signal after adequate delay and synchronization.\n- **r_early_rst**: This Boolean signal manages an early reset request based on the system's need to cater to early deassertion scenarios. It balances the timing of reset requests to optimize system responsiveness and reset integrity."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1 ns / 1 ns\n\nmodule altera_reset_controller\n#(\n    parameter NUM_RESET_INPUTS              = 6,\n    parameter USE_RESET_REQUEST_IN0 = 0,\n    parameter USE_RESET_REQUEST_IN1 = 0,\n    parameter USE_RESET_REQUEST_IN2 = 0,\n    parameter USE_RESET_REQUEST_IN3 = 0,\n    parameter USE_RESET_REQUEST_IN4 = 0,\n    parameter USE_RESET_REQUEST_IN5 = 0,\n    parameter USE_RESET_REQUEST_IN6 = 0,\n    parameter USE_RESET_REQUEST_IN7 = 0,\n    parameter USE_RESET_REQUEST_IN8 = 0,\n    parameter USE_RESET_REQUEST_IN9 = 0,\n    parameter USE_RESET_REQUEST_IN10 = 0,\n    parameter USE_RESET_REQUEST_IN11 = 0,\n    parameter USE_RESET_REQUEST_IN12 = 0,\n    parameter USE_RESET_REQUEST_IN13 = 0,\n    parameter USE_RESET_REQUEST_IN14 = 0,\n    parameter USE_RESET_REQUEST_IN15 = 0,\n    parameter OUTPUT_RESET_SYNC_EDGES       = \"deassert\",\n    parameter SYNC_DEPTH                    = 2,\n    parameter RESET_REQUEST_PRESENT         = 0,\n    parameter RESET_REQ_WAIT_TIME           = 3,\n    parameter MIN_RST_ASSERTION_TIME        = 11,\n    parameter RESET_REQ_EARLY_DSRT_TIME     = 4,\n    parameter ADAPT_RESET_REQUEST          = 0\n)\n(\n    \n    \n    \n    input reset_in0,\n    input reset_in1,\n    input reset_in2,\n    input reset_in3,\n    input reset_in4,\n    input reset_in5,\n    input reset_in6,\n    input reset_in7,\n    input reset_in8,\n    input reset_in9,\n    input reset_in10,\n    input reset_in11,\n    input reset_in12,\n    input reset_in13,\n    input reset_in14,\n    input reset_in15,\n    input reset_req_in0,\n    input reset_req_in1,\n    input reset_req_in2,\n    input reset_req_in3,\n    input reset_req_in4,\n    input reset_req_in5,\n    input reset_req_in6,\n    input reset_req_in7,\n    input reset_req_in8,\n    input reset_req_in9,\n    input reset_req_in10,\n    input reset_req_in11,\n    input reset_req_in12,\n    input reset_req_in13,\n    input reset_req_in14,\n    input reset_req_in15,\n\n\n    input  clk,\n    output reg reset_out,\n    output reg reset_req\n);\n\n   \n   localparam ASYNC_RESET = (OUTPUT_RESET_SYNC_EDGES == \"deassert\");\n\n   \n   \n   \n   localparam MIN_METASTABLE = 3;\n   localparam RSTREQ_ASRT_SYNC_TAP = MIN_METASTABLE + RESET_REQ_WAIT_TIME;\n\n   localparam LARGER = RESET_REQ_WAIT_TIME > RESET_REQ_EARLY_DSRT_TIME ? RESET_REQ_WAIT_TIME : RESET_REQ_EARLY_DSRT_TIME;\n\n   localparam ASSERTION_CHAIN_LENGTH =  (MIN_METASTABLE > LARGER) ? \n                                            MIN_RST_ASSERTION_TIME + 1 :\n                                        (\n                                        (MIN_RST_ASSERTION_TIME > LARGER)? \n                                            MIN_RST_ASSERTION_TIME + (LARGER - MIN_METASTABLE + 1) + 1 :\n                                            MIN_RST_ASSERTION_TIME + RESET_REQ_EARLY_DSRT_TIME + RESET_REQ_WAIT_TIME - MIN_METASTABLE + 2\n                                        );\n\n   localparam RESET_REQ_DRST_TAP = RESET_REQ_EARLY_DSRT_TIME + 1;\n   \n\n   wire merged_reset;\n   wire merged_reset_req_in;\n   wire reset_out_pre;\n   wire reset_req_pre;\n\n   \n   (*preserve*) reg  [RSTREQ_ASRT_SYNC_TAP: 0]  altera_reset_synchronizer_int_chain;\n   reg [ASSERTION_CHAIN_LENGTH-1: 0]            r_sync_rst_chain;\n   reg                                          r_sync_rst;\n   reg                                          r_early_rst;\n\n    \n    \n    \n    assign merged_reset = (  \n                              reset_in0 | \n                              reset_in1 | \n                              reset_in2 | \n                              reset_in3 | \n                              reset_in4 | \n                              reset_in5 | \n                              reset_in6 | \n                              reset_in7 | \n                              reset_in8 | \n                              reset_in9 | \n                              reset_in10 | \n                              reset_in11 | \n                              reset_in12 | \n                              reset_in13 | \n                              reset_in14 | \n                              reset_in15\n                          );\n\n    assign merged_reset_req_in = (\n                              ( (USE_RESET_REQUEST_IN0 == 1) ? reset_req_in0 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN1 == 1) ? reset_req_in1 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN2 == 1) ? reset_req_in2 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN3 == 1) ? reset_req_in3 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN4 == 1) ? reset_req_in4 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN5 == 1) ? reset_req_in5 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN6 == 1) ? reset_req_in6 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN7 == 1) ? reset_req_in7 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN8 == 1) ? reset_req_in8 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN9 == 1) ? reset_req_in9 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN10 == 1) ? reset_req_in10 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN11 == 1) ? reset_req_in11 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN12 == 1) ? reset_req_in12 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN13 == 1) ? reset_req_in13 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN14 == 1) ? reset_req_in14 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN15 == 1) ? reset_req_in15 : 1'b0) \n                            );\n\n\n    \n    \n    \n    \n    generate if (OUTPUT_RESET_SYNC_EDGES == \"none\" && (RESET_REQUEST_PRESENT==0)) begin\n\n        assign reset_out_pre = merged_reset;\n        assign reset_req_pre = merged_reset_req_in;\n\n    end else begin\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH),\n            .ASYNC_RESET(RESET_REQUEST_PRESENT? 1'b1 : ASYNC_RESET)\n        )\n        alt_rst_sync_uq1\n        (\n            .clk        (clk),\n            .reset_in   (merged_reset),\n            .reset_out  (reset_out_pre)\n        );\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH),\n            .ASYNC_RESET(0)\n        )\n        alt_rst_req_sync_uq1\n        (\n            .clk        (clk),\n            .reset_in   (merged_reset_req_in),\n            .reset_out  (reset_req_pre)\n        );\n\n    end\n    endgenerate\n\n    generate if ( ( (RESET_REQUEST_PRESENT == 0) && (ADAPT_RESET_REQUEST==0) )|\n                  ( (ADAPT_RESET_REQUEST == 1) && (OUTPUT_RESET_SYNC_EDGES != \"deassert\") ) ) begin\n        always @* begin\n            reset_out = reset_out_pre;\n            reset_req = reset_req_pre;\n        end\n    end else if ( (RESET_REQUEST_PRESENT == 0) && (ADAPT_RESET_REQUEST==1) ) begin\n\n        wire reset_out_pre2;\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH+1),\n            .ASYNC_RESET(0)\n        )\n        alt_rst_sync_uq2\n        (\n            .clk        (clk),\n            .reset_in   (reset_out_pre),\n            .reset_out  (reset_out_pre2)\n        );\n\n        always @* begin\n            reset_out = reset_out_pre2;\n            reset_req = reset_req_pre;\n        end\n\n    end\n    else begin\n\n    \n    initial\n    begin\n        altera_reset_synchronizer_int_chain <= {RSTREQ_ASRT_SYNC_TAP{1'b1}};\n    end\n\n    always @(posedge clk)\n    begin\n        altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP:0] <= \n            {altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP-1:0], reset_out_pre}; \n    end\n\n    \n    initial\n    begin\n        r_sync_rst_chain <= {ASSERTION_CHAIN_LENGTH{1'b1}};\n    end\n\n    always @(posedge clk)\n    begin\n        if (altera_reset_synchronizer_int_chain[MIN_METASTABLE-1] == 1'b1)\n        begin\n            r_sync_rst_chain <= {ASSERTION_CHAIN_LENGTH{1'b1}};\n    end\n    else\n    begin\n        r_sync_rst_chain <= {1'b0, r_sync_rst_chain[ASSERTION_CHAIN_LENGTH-1:1]};\n    end\n    end\n\n    \n    \n\n    always @(posedge clk)\n    begin\n        case ({altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP], r_sync_rst_chain[1], r_sync_rst})\n            3'b000:   r_sync_rst <= 1'b0; \n            3'b001:   r_sync_rst <= 1'b0;\n            3'b010:   r_sync_rst <= 1'b0;\n            3'b011:   r_sync_rst <= 1'b1;\n            3'b100:   r_sync_rst <= 1'b1; \n            3'b101:   r_sync_rst <= 1'b1;\n            3'b110:   r_sync_rst <= 1'b1;\n            3'b111:   r_sync_rst <= 1'b1; \n            default:  r_sync_rst <= 1'b1;\n        endcase\n\n        case ({r_sync_rst_chain[1], r_sync_rst_chain[RESET_REQ_DRST_TAP] | reset_req_pre})\n            2'b00:   r_early_rst <= 1'b0; \n            2'b01:   r_early_rst <= 1'b1; \n            2'b10:   r_early_rst <= 1'b0; \n            2'b11:   r_early_rst <= 1'b1; \n            default: r_early_rst <= 1'b1;\n        endcase\n    end\n\n    always @* begin\n        reset_out = r_sync_rst;\n        reset_req = r_early_rst;\n    end\n\n    end\n    endgenerate\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: altera_reset_controller. Module specification: The 'altera_reset_controller' is a Verilog module that synchronizes up to 16 reset input signals and up to 16 reset request signals to a system clock, outputting single consolidated and stabilized reset and reset request signals. The module has input ports including `reset_in0` to `reset_in15` for the reset inputs, `reset_req_in0` to `reset_req_in15` for optional reset request inputs, and `clk` for the clock signal. It outputs `reset_out` for the synchronized reset signal and `reset_req` for the synchronized reset request signal. Internal signals such as `merged_reset` and `merged_reset_req_in` aggregate the respective reset and reset request inputs. Signals like `reset_out_pre` and `reset_req_pre` provide intermediate synchronization states. The design encompasses blocks such as reset and reset request synchronization, reset assertion delay management, and conditional adaptations for output edge behavior and request synchronization leveraging flags like `ADAPT_RESET_REQUEST` and `OUTPUT_RESET_SYNC_EDGES`. These different sections ensure the module can flexibly and reliably manage reset signals across diverse system requirements, maintain synchronization with the system clock, and minimize potential metastability issues."
                }
            ]
        }
    ]
}