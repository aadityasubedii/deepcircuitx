{
    "spec": "Module name: DE1_SoC_QSYS. Module specification: This module implements a System-on-Chip (SoC) design for a DE1 development board, integrating various components including a Nios II processor, memory interfaces (SDRAM and on-chip memory), peripheral controllers (timer, JTAG UART, key input), and system components (PLL, reset controller). It uses an Avalon memory-mapped interface to interconnect these components. The module has input ports for the main clock (clk_clk), reset signal (reset_reset_n), and key inputs (key_external_connection_export). Output ports include SDRAM interface signals (sdram_wire_*), PLL status (pll_locked_export), and SDRAM clock (clk_sdram_clk). Internal signals facilitate communication between components, such as Nios II data",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: DE1_SoC_QSYS\n\nExplanation: This module appears to be a top-level system-on-chip (SoC) design for a DE1 development board. It integrates various components such as a Nios II processor, memory interfaces (SDRAM and on-chip memory), peripheral controllers (timer, JTAG UART, key input), and system components (PLL, reset controller). The module interconnects these components using an Avalon memory-mapped interface, creating a complete embedded system. It handles clock distribution, reset signals, and provides external connections for SDRAM and user input (keys)."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nclk_clk, reset_reset_n, key_external_connection_export\n\nExplanation:\n- clk_clk: Main input clock for the system\n- reset_reset_n: Active-low reset signal\n- key_external_connection_export: 4-bit input for external key connections\n\nOutput ports:\nclk_sdram_clk, pll_locked_export, sdram_wire_addr, sdram_wire_ba, sdram_wire_cas_n, sdram_wire_cke, sdram_wire_cs_n, sdram_wire_ras_n, sdram_wire_we_n\n\nExplanation:\n- clk_sdram_clk: Clock output for SDRAM\n- pll_locked_export: PLL lock status signal\n- sdram_wire_addr: SDRAM address bus (13 bits)\n- sdram_wire_ba: SDRAM bank address (2 bits)\n- sdram_wire_cas_n: SDRAM column address strobe (active low)\n- sdram_wire_cke: SDRAM clock enable\n- sdram_wire_cs_n: SDRAM chip select (active low)\n- sdram_wire_ras_n: SDRAM row address strobe (active low)\n- sdram_wire_we_n: SDRAM write enable (active low)\n\nInout port:\nsdram_wire_dq\n\nExplanation:\n- sdram_wire_dq: Bidirectional SDRAM data bus (16 bits)"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the given code, here are the internal signals and their explanations:\n\nInternal signals: pll_outclk0_clk, nios2_qsys_data_master_waitrequest, nios2_qsys_data_master_writedata, nios2_qsys_data_master_address, nios2_qsys_data_master_write, nios2_qsys_data_master_read, nios2_qsys_data_master_readdata, nios2_qsys_data_master_debugaccess, nios2_qsys_data_master_readdatavalid, nios2_qsys_data_master_byteenable, mm_interconnect_0_nios2_qsys_jtag_debug_module_waitrequest, mm_interconnect_0_nios2_qsys_jtag_debug_module_writedata, mm_interconnect_0_nios2_qsys_jtag_debug_module_address, mm_interconnect_0_nios2_qsys_jtag_debug_module_write, mm_interconnect_0_nios2_qsys_jtag_debug_module_read, mm_interconnect_0_nios2_qsys_jtag_debug_module_readdata, mm_interconnect_0_nios2_qsys_jtag_debug_module_debugaccess, mm_interconnect_0_nios2_qsys_jtag_debug_module_byteenable.\n\nExplanation: \n- pll_outclk0_clk: Output clock from the PLL, used as the main system clock.\n- nios2_qsys_data_master_*: Signals for the Nios II processor's data master interface, including address, data, and control signals.\n- mm_interconnect_0_nios2_qsys_jtag_debug_module_*: Signals for the JTAG debug module of the Nios II processor, facilitating debugging and communication.\n- *_waitrequest, *_write, *_read: Control signals for managing data transfers between components.\n- *_address, *_writedata, *_readdata: Address and data signals for memory and peripheral access.\n- *_debugaccess, *_byteenable: Signals for debug operations and byte-level data access control.\n\nThese internal signals facilitate communication and data transfer between various components of the SoC, particularly the Nios II processor, memory interfaces, and peripherals."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n`timescale 1 ps / 1 ps\nmodule DE1_SoC_QSYS (\n\t\tinput  wire        clk_clk,                        \n\t\tinput  wire        reset_reset_n,                  \n\t\tinput  wire [3:0]  key_external_connection_export, \n\t\toutput wire        clk_sdram_clk,                  \n\t\toutput wire        pll_locked_export,              \n\t\toutput wire [12:0] sdram_wire_addr,                \n\t\toutput wire [1:0]  sdram_wire_ba,                  \n\t\toutput wire        sdram_wire_cas_n,               \n\t\toutput wire        sdram_wire_cke,                 \n\t\toutput wire        sdram_wire_cs_n,                \n\t\tinout  wire [15:0] sdram_wire_dq,                  \n\t\toutput wire [1:0]  sdram_wire_dqm,                 \n\t\toutput wire        sdram_wire_ras_n,               \n\t\toutput wire        sdram_wire_we_n                 \n\t);\n\n\twire         pll_outclk0_clk;                                            \n\twire         nios2_qsys_data_master_waitrequest;                         \n\twire  [31:0] nios2_qsys_data_master_writedata;                           \n\twire  [29:0] nios2_qsys_data_master_address;                             \n\twire         nios2_qsys_data_master_write;                               \n\twire         nios2_qsys_data_master_read;                                \n\twire  [31:0] nios2_qsys_data_master_readdata;                            \n\twire         nios2_qsys_data_master_debugaccess;                         \n\twire         nios2_qsys_data_master_readdatavalid;                       \n\twire   [3:0] nios2_qsys_data_master_byteenable;                          \n\twire         mm_interconnect_0_nios2_qsys_jtag_debug_module_waitrequest; \n\twire  [31:0] mm_interconnect_0_nios2_qsys_jtag_debug_module_writedata;   \n\twire   [8:0] mm_interconnect_0_nios2_qsys_jtag_debug_module_address;     \n\twire         mm_interconnect_0_nios2_qsys_jtag_debug_module_write;       \n\twire         mm_interconnect_0_nios2_qsys_jtag_debug_module_read;        \n\twire  [31:0] mm_interconnect_0_nios2_qsys_jtag_debug_module_readdata;    \n\twire         mm_interconnect_0_nios2_qsys_jtag_debug_module_debugaccess; \n\twire   [3:0] mm_interconnect_0_nios2_qsys_jtag_debug_module_byteenable;  \n\twire  [15:0] mm_interconnect_0_timer_s1_writedata;                       \n\twire   [2:0] mm_interconnect_0_timer_s1_address;                         \n\twire         mm_interconnect_0_timer_s1_chipselect;                      \n\twire         mm_interconnect_0_timer_s1_write;                           \n\twire  [15:0] mm_interconnect_0_timer_s1_readdata;                        \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest;  \n\twire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;    \n\twire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;      \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;   \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;        \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;         \n\twire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;     \n\twire  [31:0] mm_interconnect_0_key_s1_writedata;                         \n\twire   [1:0] mm_interconnect_0_key_s1_address;                           \n\twire         mm_interconnect_0_key_s1_chipselect;                        \n\twire         mm_interconnect_0_key_s1_write;                             \n\twire  [31:0] mm_interconnect_0_key_s1_readdata;                          \n\twire         mm_interconnect_0_sdram_s1_waitrequest;                     \n\twire  [15:0] mm_interconnect_0_sdram_s1_writedata;                       \n\twire  [24:0] mm_interconnect_0_sdram_s1_address;                         \n\twire         mm_interconnect_0_sdram_s1_chipselect;                      \n\twire         mm_interconnect_0_sdram_s1_write;                           \n\twire         mm_interconnect_0_sdram_s1_read;                            \n\twire  [15:0] mm_interconnect_0_sdram_s1_readdata;                        \n\twire         mm_interconnect_0_sdram_s1_readdatavalid;                   \n\twire   [1:0] mm_interconnect_0_sdram_s1_byteenable;                      \n\twire  [31:0] mm_interconnect_0_onchip_memory2_s1_writedata;              \n\twire  [14:0] mm_interconnect_0_onchip_memory2_s1_address;                \n\twire         mm_interconnect_0_onchip_memory2_s1_chipselect;             \n\twire         mm_interconnect_0_onchip_memory2_s1_clken;                  \n\twire         mm_interconnect_0_onchip_memory2_s1_write;                  \n\twire  [31:0] mm_interconnect_0_onchip_memory2_s1_readdata;               \n\twire   [3:0] mm_interconnect_0_onchip_memory2_s1_byteenable;             \n\twire         nios2_qsys_instruction_master_waitrequest;                  \n\twire  [29:0] nios2_qsys_instruction_master_address;                      \n\twire         nios2_qsys_instruction_master_read;                         \n\twire  [31:0] nios2_qsys_instruction_master_readdata;                     \n\twire         nios2_qsys_instruction_master_readdatavalid;                \n\twire   [0:0] mm_interconnect_0_sysid_qsys_control_slave_address;         \n\twire  [31:0] mm_interconnect_0_sysid_qsys_control_slave_readdata;        \n\twire         irq_mapper_receiver0_irq;                                   \n\twire         irq_mapper_receiver1_irq;                                   \n\twire         irq_mapper_receiver2_irq;                                   \n\twire  [31:0] nios2_qsys_d_irq_irq;                                       \n\twire         rst_controller_reset_out_reset;                             \n\twire         rst_controller_reset_out_reset_req;                         \n\twire         nios2_qsys_jtag_debug_module_reset_reset;                   \n\twire         rst_controller_001_reset_out_reset;                         \n\twire         rst_controller_001_reset_out_reset_req;                     \n\twire         rst_controller_002_reset_out_reset;                         \n\n\tDE1_SoC_QSYS_nios2_qsys nios2_qsys (\n\t\t.clk                                   (pll_outclk0_clk),                                            \n\t\t.reset_n                               (~rst_controller_reset_out_reset),                            \n\t\t.reset_req                             (rst_controller_reset_out_reset_req),                         \n\t\t.d_address                             (nios2_qsys_data_master_address),                             \n\t\t.d_byteenable                          (nios2_qsys_data_master_byteenable),                          \n\t\t.d_read                                (nios2_qsys_data_master_read),                                \n\t\t.d_readdata                            (nios2_qsys_data_master_readdata),                            \n\t\t.d_waitrequest                         (nios2_qsys_data_master_waitrequest),                         \n\t\t.d_write                               (nios2_qsys_data_master_write),                               \n\t\t.d_writedata                           (nios2_qsys_data_master_writedata),                           \n\t\t.d_readdatavalid                       (nios2_qsys_data_master_readdatavalid),                       \n\t\t.jtag_debug_module_debugaccess_to_roms (nios2_qsys_data_master_debugaccess),                         \n\t\t.i_address                             (nios2_qsys_instruction_master_address),                      \n\t\t.i_read                                (nios2_qsys_instruction_master_read),                         \n\t\t.i_readdata                            (nios2_qsys_instruction_master_readdata),                     \n\t\t.i_waitrequest                         (nios2_qsys_instruction_master_waitrequest),                  \n\t\t.i_readdatavalid                       (nios2_qsys_instruction_master_readdatavalid),                \n\t\t.d_irq                                 (nios2_qsys_d_irq_irq),                                       \n\t\t.jtag_debug_module_resetrequest        (nios2_qsys_jtag_debug_module_reset_reset),                   \n\t\t.jtag_debug_module_address             (mm_interconnect_0_nios2_qsys_jtag_debug_module_address),     \n\t\t.jtag_debug_module_byteenable          (mm_interconnect_0_nios2_qsys_jtag_debug_module_byteenable),  \n\t\t.jtag_debug_module_debugaccess         (mm_interconnect_0_nios2_qsys_jtag_debug_module_debugaccess), \n\t\t.jtag_debug_module_read                (mm_interconnect_0_nios2_qsys_jtag_debug_module_read),        \n\t\t.jtag_debug_module_readdata            (mm_interconnect_0_nios2_qsys_jtag_debug_module_readdata),    \n\t\t.jtag_debug_module_waitrequest         (mm_interconnect_0_nios2_qsys_jtag_debug_module_waitrequest), \n\t\t.jtag_debug_module_write               (mm_interconnect_0_nios2_qsys_jtag_debug_module_write),       \n\t\t.jtag_debug_module_writedata           (mm_interconnect_0_nios2_qsys_jtag_debug_module_writedata),   \n\t\t.no_ci_readra                          ()                                                            \n\t);\n\n\tDE1_SoC_QSYS_onchip_memory2 onchip_memory2 (\n\t\t.clk        (pll_outclk0_clk),                                \n\t\t.address    (mm_interconnect_0_onchip_memory2_s1_address),    \n\t\t.clken      (mm_interconnect_0_onchip_memory2_s1_clken),      \n\t\t.chipselect (mm_interconnect_0_onchip_memory2_s1_chipselect), \n\t\t.write      (mm_interconnect_0_onchip_memory2_s1_write),      \n\t\t.readdata   (mm_interconnect_0_onchip_memory2_s1_readdata),   \n\t\t.writedata  (mm_interconnect_0_onchip_memory2_s1_writedata),  \n\t\t.byteenable (mm_interconnect_0_onchip_memory2_s1_byteenable), \n\t\t.reset      (rst_controller_001_reset_out_reset),             \n\t\t.reset_req  (rst_controller_001_reset_out_reset_req)          \n\t);\n\n\tDE1_SoC_QSYS_sysid_qsys sysid_qsys (\n\t\t.clock    (pll_outclk0_clk),                                     \n\t\t.reset_n  (~rst_controller_001_reset_out_reset),                 \n\t\t.readdata (mm_interconnect_0_sysid_qsys_control_slave_readdata), \n\t\t.address  (mm_interconnect_0_sysid_qsys_control_slave_address)   \n\t);\n\n\tDE1_SoC_QSYS_timer timer (\n\t\t.clk        (pll_outclk0_clk),                       \n\t\t.reset_n    (~rst_controller_001_reset_out_reset),   \n\t\t.address    (mm_interconnect_0_timer_s1_address),    \n\t\t.writedata  (mm_interconnect_0_timer_s1_writedata),  \n\t\t.readdata   (mm_interconnect_0_timer_s1_readdata),   \n\t\t.chipselect (mm_interconnect_0_timer_s1_chipselect), \n\t\t.write_n    (~mm_interconnect_0_timer_s1_write),     \n\t\t.irq        (irq_mapper_receiver0_irq)               \n\t);\n\n\tDE1_SoC_QSYS_jtag_uart jtag_uart (\n\t\t.clk            (pll_outclk0_clk),                                           \n\t\t.rst_n          (~rst_controller_001_reset_out_reset),                       \n\t\t.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  \n\t\t.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     \n\t\t.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       \n\t\t.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    \n\t\t.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      \n\t\t.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   \n\t\t.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), \n\t\t.av_irq         (irq_mapper_receiver1_irq)                                   \n\t);\n\n\tDE1_SoC_QSYS_key key (\n\t\t.clk        (pll_outclk0_clk),                     \n\t\t.reset_n    (~rst_controller_001_reset_out_reset), \n\t\t.address    (mm_interconnect_0_key_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_key_s1_write),     \n\t\t.writedata  (mm_interconnect_0_key_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_key_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_key_s1_readdata),   \n\t\t.in_port    (key_external_connection_export),      \n\t\t.irq        (irq_mapper_receiver2_irq)             \n\t);\n\n\tDE1_SoC_QSYS_pll pll (\n\t\t.refclk   (clk_clk),                            \n\t\t.rst      (rst_controller_002_reset_out_reset), \n\t\t.outclk_0 (pll_outclk0_clk),                    \n\t\t.outclk_1 (clk_sdram_clk),                      \n\t\t.locked   (pll_locked_export)                   \n\t);\n\n\tDE1_SoC_QSYS_sdram sdram (\n\t\t.clk            (pll_outclk0_clk),                          \n\t\t.reset_n        (~rst_controller_001_reset_out_reset),      \n\t\t.az_addr        (mm_interconnect_0_sdram_s1_address),       \n\t\t.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   \n\t\t.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    \n\t\t.az_data        (mm_interconnect_0_sdram_s1_writedata),     \n\t\t.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         \n\t\t.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        \n\t\t.za_data        (mm_interconnect_0_sdram_s1_readdata),      \n\t\t.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), \n\t\t.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   \n\t\t.zs_addr        (sdram_wire_addr),                          \n\t\t.zs_ba          (sdram_wire_ba),                            \n\t\t.zs_cas_n       (sdram_wire_cas_n),                         \n\t\t.zs_cke         (sdram_wire_cke),                           \n\t\t.zs_cs_n        (sdram_wire_cs_n),                          \n\t\t.zs_dq          (sdram_wire_dq),                            \n\t\t.zs_dqm         (sdram_wire_dqm),                           \n\t\t.zs_ras_n       (sdram_wire_ras_n),                         \n\t\t.zs_we_n        (sdram_wire_we_n)                           \n\t);\n\n\tDE1_SoC_QSYS_mm_interconnect_0 mm_interconnect_0 (\n\t\t.pll_outclk0_clk                                   (pll_outclk0_clk),                                            \n\t\t.nios2_qsys_reset_n_reset_bridge_in_reset_reset    (rst_controller_reset_out_reset),                             \n\t\t.onchip_memory2_reset1_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                         \n\t\t.nios2_qsys_data_master_address                    (nios2_qsys_data_master_address),                             \n\t\t.nios2_qsys_data_master_waitrequest                (nios2_qsys_data_master_waitrequest),                         \n\t\t.nios2_qsys_data_master_byteenable                 (nios2_qsys_data_master_byteenable),                          \n\t\t.nios2_qsys_data_master_read                       (nios2_qsys_data_master_read),                                \n\t\t.nios2_qsys_data_master_readdata                   (nios2_qsys_data_master_readdata),                            \n\t\t.nios2_qsys_data_master_readdatavalid              (nios2_qsys_data_master_readdatavalid),                       \n\t\t.nios2_qsys_data_master_write                      (nios2_qsys_data_master_write),                               \n\t\t.nios2_qsys_data_master_writedata                  (nios2_qsys_data_master_writedata),                           \n\t\t.nios2_qsys_data_master_debugaccess                (nios2_qsys_data_master_debugaccess),                         \n\t\t.nios2_qsys_instruction_master_address             (nios2_qsys_instruction_master_address),                      \n\t\t.nios2_qsys_instruction_master_waitrequest         (nios2_qsys_instruction_master_waitrequest),                  \n\t\t.nios2_qsys_instruction_master_read                (nios2_qsys_instruction_master_read),                         \n\t\t.nios2_qsys_instruction_master_readdata            (nios2_qsys_instruction_master_readdata),                     \n\t\t.nios2_qsys_instruction_master_readdatavalid       (nios2_qsys_instruction_master_readdatavalid),                \n\t\t.jtag_uart_avalon_jtag_slave_address               (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),      \n\t\t.jtag_uart_avalon_jtag_slave_write                 (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),        \n\t\t.jtag_uart_avalon_jtag_slave_read                  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),         \n\t\t.jtag_uart_avalon_jtag_slave_readdata              (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),     \n\t\t.jtag_uart_avalon_jtag_slave_writedata             (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),    \n\t\t.jtag_uart_avalon_jtag_slave_waitrequest           (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest),  \n\t\t.jtag_uart_avalon_jtag_slave_chipselect            (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),   \n\t\t.key_s1_address                                    (mm_interconnect_0_key_s1_address),                           \n\t\t.key_s1_write                                      (mm_interconnect_0_key_s1_write),                             \n\t\t.key_s1_readdata                                   (mm_interconnect_0_key_s1_readdata),                          \n\t\t.key_s1_writedata                                  (mm_interconnect_0_key_s1_writedata),                         \n\t\t.key_s1_chipselect                                 (mm_interconnect_0_key_s1_chipselect),                        \n\t\t.nios2_qsys_jtag_debug_module_address              (mm_interconnect_0_nios2_qsys_jtag_debug_module_address),     \n\t\t.nios2_qsys_jtag_debug_module_write                (mm_interconnect_0_nios2_qsys_jtag_debug_module_write),       \n\t\t.nios2_qsys_jtag_debug_module_read                 (mm_interconnect_0_nios2_qsys_jtag_debug_module_read),        \n\t\t.nios2_qsys_jtag_debug_module_readdata             (mm_interconnect_0_nios2_qsys_jtag_debug_module_readdata),    \n\t\t.nios2_qsys_jtag_debug_module_writedata            (mm_interconnect_0_nios2_qsys_jtag_debug_module_writedata),   \n\t\t.nios2_qsys_jtag_debug_module_byteenable           (mm_interconnect_0_nios2_qsys_jtag_debug_module_byteenable),  \n\t\t.nios2_qsys_jtag_debug_module_waitrequest          (mm_interconnect_0_nios2_qsys_jtag_debug_module_waitrequest), \n\t\t.nios2_qsys_jtag_debug_module_debugaccess          (mm_interconnect_0_nios2_qsys_jtag_debug_module_debugaccess), \n\t\t.onchip_memory2_s1_address                         (mm_interconnect_0_onchip_memory2_s1_address),                \n\t\t.onchip_memory2_s1_write                           (mm_interconnect_0_onchip_memory2_s1_write),                  \n\t\t.onchip_memory2_s1_readdata                        (mm_interconnect_0_onchip_memory2_s1_readdata),               \n\t\t.onchip_memory2_s1_writedata                       (mm_interconnect_0_onchip_memory2_s1_writedata),              \n\t\t.onchip_memory2_s1_byteenable                      (mm_interconnect_0_onchip_memory2_s1_byteenable),             \n\t\t.onchip_memory2_s1_chipselect                      (mm_interconnect_0_onchip_memory2_s1_chipselect),             \n\t\t.onchip_memory2_s1_clken                           (mm_interconnect_0_onchip_memory2_s1_clken),                  \n\t\t.sdram_s1_address                                  (mm_interconnect_0_sdram_s1_address),                         \n\t\t.sdram_s1_write                                    (mm_interconnect_0_sdram_s1_write),                           \n\t\t.sdram_s1_read                                     (mm_interconnect_0_sdram_s1_read),                            \n\t\t.sdram_s1_readdata                                 (mm_interconnect_0_sdram_s1_readdata),                        \n\t\t.sdram_s1_writedata                                (mm_interconnect_0_sdram_s1_writedata),                       \n\t\t.sdram_s1_byteenable                               (mm_interconnect_0_sdram_s1_byteenable),                      \n\t\t.sdram_s1_readdatavalid                            (mm_interconnect_0_sdram_s1_readdatavalid),                   \n\t\t.sdram_s1_waitrequest                              (mm_interconnect_0_sdram_s1_waitrequest),                     \n\t\t.sdram_s1_chipselect                               (mm_interconnect_0_sdram_s1_chipselect),                      \n\t\t.sysid_qsys_control_slave_address                  (mm_interconnect_0_sysid_qsys_control_slave_address),         \n\t\t.sysid_qsys_control_slave_readdata                 (mm_interconnect_0_sysid_qsys_control_slave_readdata),        \n\t\t.timer_s1_address                                  (mm_interconnect_0_timer_s1_address),                         \n\t\t.timer_s1_write                                    (mm_interconnect_0_timer_s1_write),                           \n\t\t.timer_s1_readdata                                 (mm_interconnect_0_timer_s1_readdata),                        \n\t\t.timer_s1_writedata                                (mm_interconnect_0_timer_s1_writedata),                       \n\t\t.timer_s1_chipselect                               (mm_interconnect_0_timer_s1_chipselect)                       \n\t);\n\n\tDE1_SoC_QSYS_irq_mapper irq_mapper (\n\t\t.clk           (pll_outclk0_clk),                \n\t\t.reset         (rst_controller_reset_out_reset), \n\t\t.receiver0_irq (irq_mapper_receiver0_irq),       \n\t\t.receiver1_irq (irq_mapper_receiver1_irq),       \n\t\t.receiver2_irq (irq_mapper_receiver2_irq),       \n\t\t.sender_irq    (nios2_qsys_d_irq_irq)            \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (2),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (1),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller (\n\t\t.reset_in0      (~reset_reset_n),                           \n\t\t.reset_in1      (nios2_qsys_jtag_debug_module_reset_reset), \n\t\t.clk            (pll_outclk0_clk),                          \n\t\t.reset_out      (rst_controller_reset_out_reset),           \n\t\t.reset_req      (rst_controller_reset_out_reset_req),       \n\t\t.reset_req_in0  (1'b0),                                     \n\t\t.reset_req_in1  (1'b0),                                     \n\t\t.reset_in2      (1'b0),                                     \n\t\t.reset_req_in2  (1'b0),                                     \n\t\t.reset_in3      (1'b0),                                     \n\t\t.reset_req_in3  (1'b0),                                     \n\t\t.reset_in4      (1'b0),                                     \n\t\t.reset_req_in4  (1'b0),                                     \n\t\t.reset_in5      (1'b0),                                     \n\t\t.reset_req_in5  (1'b0),                                     \n\t\t.reset_in6      (1'b0),                                     \n\t\t.reset_req_in6  (1'b0),                                     \n\t\t.reset_in7      (1'b0),                                     \n\t\t.reset_req_in7  (1'b0),                                     \n\t\t.reset_in8      (1'b0),                                     \n\t\t.reset_req_in8  (1'b0),                                     \n\t\t.reset_in9      (1'b0),                                     \n\t\t.reset_req_in9  (1'b0),                                     \n\t\t.reset_in10     (1'b0),                                     \n\t\t.reset_req_in10 (1'b0),                                     \n\t\t.reset_in11     (1'b0),                                     \n\t\t.reset_req_in11 (1'b0),                                     \n\t\t.reset_in12     (1'b0),                                     \n\t\t.reset_req_in12 (1'b0),                                     \n\t\t.reset_in13     (1'b0),                                     \n\t\t.reset_req_in13 (1'b0),                                     \n\t\t.reset_in14     (1'b0),                                     \n\t\t.reset_req_in14 (1'b0),                                     \n\t\t.reset_in15     (1'b0),                                     \n\t\t.reset_req_in15 (1'b0)                                      \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (1),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (1),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller_001 (\n\t\t.reset_in0      (~reset_reset_n),                         \n\t\t.clk            (pll_outclk0_clk),                        \n\t\t.reset_out      (rst_controller_001_reset_out_reset),     \n\t\t.reset_req      (rst_controller_001_reset_out_reset_req), \n\t\t.reset_req_in0  (1'b0),                                   \n\t\t.reset_in1      (1'b0),                                   \n\t\t.reset_req_in1  (1'b0),                                   \n\t\t.reset_in2      (1'b0),                                   \n\t\t.reset_req_in2  (1'b0),                                   \n\t\t.reset_in3      (1'b0),                                   \n\t\t.reset_req_in3  (1'b0),                                   \n\t\t.reset_in4      (1'b0),                                   \n\t\t.reset_req_in4  (1'b0),                                   \n\t\t.reset_in5      (1'b0),                                   \n\t\t.reset_req_in5  (1'b0),                                   \n\t\t.reset_in6      (1'b0),                                   \n\t\t.reset_req_in6  (1'b0),                                   \n\t\t.reset_in7      (1'b0),                                   \n\t\t.reset_req_in7  (1'b0),                                   \n\t\t.reset_in8      (1'b0),                                   \n\t\t.reset_req_in8  (1'b0),                                   \n\t\t.reset_in9      (1'b0),                                   \n\t\t.reset_req_in9  (1'b0),                                   \n\t\t.reset_in10     (1'b0),                                   \n\t\t.reset_req_in10 (1'b0),                                   \n\t\t.reset_in11     (1'b0),                                   \n\t\t.reset_req_in11 (1'b0),                                   \n\t\t.reset_in12     (1'b0),                                   \n\t\t.reset_req_in12 (1'b0),                                   \n\t\t.reset_in13     (1'b0),                                   \n\t\t.reset_req_in13 (1'b0),                                   \n\t\t.reset_in14     (1'b0),                                   \n\t\t.reset_req_in14 (1'b0),                                   \n\t\t.reset_in15     (1'b0),                                   \n\t\t.reset_req_in15 (1'b0)                                    \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (1),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (0),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller_002 (\n\t\t.reset_in0      (~reset_reset_n),                     \n\t\t.clk            (clk_clk),                            \n\t\t.reset_out      (rst_controller_002_reset_out_reset), \n\t\t.reset_req      (),                                   \n\t\t.reset_req_in0  (1'b0),                               \n\t\t.reset_in1      (1'b0),                               \n\t\t.reset_req_in1  (1'b0),                               \n\t\t.reset_in2      (1'b0),                               \n\t\t.reset_req_in2  (1'b0),                               \n\t\t.reset_in3      (1'b0),                               \n\t\t.reset_req_in3  (1'b0),                               \n\t\t.reset_in4      (1'b0),                               \n\t\t.reset_req_in4  (1'b0),                               \n\t\t.reset_in5      (1'b0),                               \n\t\t.reset_req_in5  (1'b0),                               \n\t\t.reset_in6      (1'b0),                               \n\t\t.reset_req_in6  (1'b0),                               \n\t\t.reset_in7      (1'b0),                               \n\t\t.reset_req_in7  (1'b0),                               \n\t\t.reset_in8      (1'b0),                               \n\t\t.reset_req_in8  (1'b0),                               \n\t\t.reset_in9      (1'b0),                               \n\t\t.reset_req_in9  (1'b0),                               \n\t\t.reset_in10     (1'b0),                               \n\t\t.reset_req_in10 (1'b0),                               \n\t\t.reset_in11     (1'b0),                               \n\t\t.reset_req_in11 (1'b0),                               \n\t\t.reset_in12     (1'b0),                               \n\t\t.reset_req_in12 (1'b0),                               \n\t\t.reset_in13     (1'b0),                               \n\t\t.reset_req_in13 (1'b0),                               \n\t\t.reset_in14     (1'b0),                               \n\t\t.reset_req_in14 (1'b0),                               \n\t\t.reset_in15     (1'b0),                               \n\t\t.reset_req_in15 (1'b0)                                \n\t);\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: DE1_SoC_QSYS. Module specification: This module implements a System-on-Chip (SoC) design for a DE1 development board, integrating various components including a Nios II processor, memory interfaces (SDRAM and on-chip memory), peripheral controllers (timer, JTAG UART, key input), and system components (PLL, reset controller). It uses an Avalon memory-mapped interface to interconnect these components. The module has input ports for the main clock (clk_clk), reset signal (reset_reset_n), and key inputs (key_external_connection_export). Output ports include SDRAM interface signals (sdram_wire_*), PLL status (pll_locked_export), and SDRAM clock (clk_sdram_clk). Internal signals facilitate communication between components, such as Nios II data"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: DE1_SoC_QSYS\n\nExplanation: This module appears to be a top-level system-on-chip (SoC) design for a DE1 development board. It integrates various components such as a Nios II processor, memory interfaces (SDRAM and on-chip memory), peripheral controllers (timer, JTAG UART, key input), and system components (PLL, reset controller). The module interconnects these components using an Avalon memory-mapped interface, creating a complete embedded system. It handles clock distribution, reset signals, and provides external connections for SDRAM and user input (keys)."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nclk_clk, reset_reset_n, key_external_connection_export\n\nExplanation:\n- clk_clk: Main input clock for the system\n- reset_reset_n: Active-low reset signal\n- key_external_connection_export: 4-bit input for external key connections\n\nOutput ports:\nclk_sdram_clk, pll_locked_export, sdram_wire_addr, sdram_wire_ba, sdram_wire_cas_n, sdram_wire_cke, sdram_wire_cs_n, sdram_wire_ras_n, sdram_wire_we_n\n\nExplanation:\n- clk_sdram_clk: Clock output for SDRAM\n- pll_locked_export: PLL lock status signal\n- sdram_wire_addr: SDRAM address bus (13 bits)\n- sdram_wire_ba: SDRAM bank address (2 bits)\n- sdram_wire_cas_n: SDRAM column address strobe (active low)\n- sdram_wire_cke: SDRAM clock enable\n- sdram_wire_cs_n: SDRAM chip select (active low)\n- sdram_wire_ras_n: SDRAM row address strobe (active low)\n- sdram_wire_we_n: SDRAM write enable (active low)\n\nInout port:\nsdram_wire_dq\n\nExplanation:\n- sdram_wire_dq: Bidirectional SDRAM data bus (16 bits)"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the given code, here are the internal signals and their explanations:\n\nInternal signals: pll_outclk0_clk, nios2_qsys_data_master_waitrequest, nios2_qsys_data_master_writedata, nios2_qsys_data_master_address, nios2_qsys_data_master_write, nios2_qsys_data_master_read, nios2_qsys_data_master_readdata, nios2_qsys_data_master_debugaccess, nios2_qsys_data_master_readdatavalid, nios2_qsys_data_master_byteenable, mm_interconnect_0_nios2_qsys_jtag_debug_module_waitrequest, mm_interconnect_0_nios2_qsys_jtag_debug_module_writedata, mm_interconnect_0_nios2_qsys_jtag_debug_module_address, mm_interconnect_0_nios2_qsys_jtag_debug_module_write, mm_interconnect_0_nios2_qsys_jtag_debug_module_read, mm_interconnect_0_nios2_qsys_jtag_debug_module_readdata, mm_interconnect_0_nios2_qsys_jtag_debug_module_debugaccess, mm_interconnect_0_nios2_qsys_jtag_debug_module_byteenable.\n\nExplanation: \n- pll_outclk0_clk: Output clock from the PLL, used as the main system clock.\n- nios2_qsys_data_master_*: Signals for the Nios II processor's data master interface, including address, data, and control signals.\n- mm_interconnect_0_nios2_qsys_jtag_debug_module_*: Signals for the JTAG debug module of the Nios II processor, facilitating debugging and communication.\n- *_waitrequest, *_write, *_read: Control signals for managing data transfers between components.\n- *_address, *_writedata, *_readdata: Address and data signals for memory and peripheral access.\n- *_debugaccess, *_byteenable: Signals for debug operations and byte-level data access control.\n\nThese internal signals facilitate communication and data transfer between various components of the SoC, particularly the Nios II processor, memory interfaces, and peripherals."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n`timescale 1 ps / 1 ps\nmodule DE1_SoC_QSYS (\n\t\tinput  wire        clk_clk,                        \n\t\tinput  wire        reset_reset_n,                  \n\t\tinput  wire [3:0]  key_external_connection_export, \n\t\toutput wire        clk_sdram_clk,                  \n\t\toutput wire        pll_locked_export,              \n\t\toutput wire [12:0] sdram_wire_addr,                \n\t\toutput wire [1:0]  sdram_wire_ba,                  \n\t\toutput wire        sdram_wire_cas_n,               \n\t\toutput wire        sdram_wire_cke,                 \n\t\toutput wire        sdram_wire_cs_n,                \n\t\tinout  wire [15:0] sdram_wire_dq,                  \n\t\toutput wire [1:0]  sdram_wire_dqm,                 \n\t\toutput wire        sdram_wire_ras_n,               \n\t\toutput wire        sdram_wire_we_n                 \n\t);\n\n\twire         pll_outclk0_clk;                                            \n\twire         nios2_qsys_data_master_waitrequest;                         \n\twire  [31:0] nios2_qsys_data_master_writedata;                           \n\twire  [29:0] nios2_qsys_data_master_address;                             \n\twire         nios2_qsys_data_master_write;                               \n\twire         nios2_qsys_data_master_read;                                \n\twire  [31:0] nios2_qsys_data_master_readdata;                            \n\twire         nios2_qsys_data_master_debugaccess;                         \n\twire         nios2_qsys_data_master_readdatavalid;                       \n\twire   [3:0] nios2_qsys_data_master_byteenable;                          \n\twire         mm_interconnect_0_nios2_qsys_jtag_debug_module_waitrequest; \n\twire  [31:0] mm_interconnect_0_nios2_qsys_jtag_debug_module_writedata;   \n\twire   [8:0] mm_interconnect_0_nios2_qsys_jtag_debug_module_address;     \n\twire         mm_interconnect_0_nios2_qsys_jtag_debug_module_write;       \n\twire         mm_interconnect_0_nios2_qsys_jtag_debug_module_read;        \n\twire  [31:0] mm_interconnect_0_nios2_qsys_jtag_debug_module_readdata;    \n\twire         mm_interconnect_0_nios2_qsys_jtag_debug_module_debugaccess; \n\twire   [3:0] mm_interconnect_0_nios2_qsys_jtag_debug_module_byteenable;  \n\twire  [15:0] mm_interconnect_0_timer_s1_writedata;                       \n\twire   [2:0] mm_interconnect_0_timer_s1_address;                         \n\twire         mm_interconnect_0_timer_s1_chipselect;                      \n\twire         mm_interconnect_0_timer_s1_write;                           \n\twire  [15:0] mm_interconnect_0_timer_s1_readdata;                        \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest;  \n\twire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;    \n\twire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;      \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;   \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;        \n\twire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;         \n\twire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;     \n\twire  [31:0] mm_interconnect_0_key_s1_writedata;                         \n\twire   [1:0] mm_interconnect_0_key_s1_address;                           \n\twire         mm_interconnect_0_key_s1_chipselect;                        \n\twire         mm_interconnect_0_key_s1_write;                             \n\twire  [31:0] mm_interconnect_0_key_s1_readdata;                          \n\twire         mm_interconnect_0_sdram_s1_waitrequest;                     \n\twire  [15:0] mm_interconnect_0_sdram_s1_writedata;                       \n\twire  [24:0] mm_interconnect_0_sdram_s1_address;                         \n\twire         mm_interconnect_0_sdram_s1_chipselect;                      \n\twire         mm_interconnect_0_sdram_s1_write;                           \n\twire         mm_interconnect_0_sdram_s1_read;                            \n\twire  [15:0] mm_interconnect_0_sdram_s1_readdata;                        \n\twire         mm_interconnect_0_sdram_s1_readdatavalid;                   \n\twire   [1:0] mm_interconnect_0_sdram_s1_byteenable;                      \n\twire  [31:0] mm_interconnect_0_onchip_memory2_s1_writedata;              \n\twire  [14:0] mm_interconnect_0_onchip_memory2_s1_address;                \n\twire         mm_interconnect_0_onchip_memory2_s1_chipselect;             \n\twire         mm_interconnect_0_onchip_memory2_s1_clken;                  \n\twire         mm_interconnect_0_onchip_memory2_s1_write;                  \n\twire  [31:0] mm_interconnect_0_onchip_memory2_s1_readdata;               \n\twire   [3:0] mm_interconnect_0_onchip_memory2_s1_byteenable;             \n\twire         nios2_qsys_instruction_master_waitrequest;                  \n\twire  [29:0] nios2_qsys_instruction_master_address;                      \n\twire         nios2_qsys_instruction_master_read;                         \n\twire  [31:0] nios2_qsys_instruction_master_readdata;                     \n\twire         nios2_qsys_instruction_master_readdatavalid;                \n\twire   [0:0] mm_interconnect_0_sysid_qsys_control_slave_address;         \n\twire  [31:0] mm_interconnect_0_sysid_qsys_control_slave_readdata;        \n\twire         irq_mapper_receiver0_irq;                                   \n\twire         irq_mapper_receiver1_irq;                                   \n\twire         irq_mapper_receiver2_irq;                                   \n\twire  [31:0] nios2_qsys_d_irq_irq;                                       \n\twire         rst_controller_reset_out_reset;                             \n\twire         rst_controller_reset_out_reset_req;                         \n\twire         nios2_qsys_jtag_debug_module_reset_reset;                   \n\twire         rst_controller_001_reset_out_reset;                         \n\twire         rst_controller_001_reset_out_reset_req;                     \n\twire         rst_controller_002_reset_out_reset;                         \n\n\tDE1_SoC_QSYS_nios2_qsys nios2_qsys (\n\t\t.clk                                   (pll_outclk0_clk),                                            \n\t\t.reset_n                               (~rst_controller_reset_out_reset),                            \n\t\t.reset_req                             (rst_controller_reset_out_reset_req),                         \n\t\t.d_address                             (nios2_qsys_data_master_address),                             \n\t\t.d_byteenable                          (nios2_qsys_data_master_byteenable),                          \n\t\t.d_read                                (nios2_qsys_data_master_read),                                \n\t\t.d_readdata                            (nios2_qsys_data_master_readdata),                            \n\t\t.d_waitrequest                         (nios2_qsys_data_master_waitrequest),                         \n\t\t.d_write                               (nios2_qsys_data_master_write),                               \n\t\t.d_writedata                           (nios2_qsys_data_master_writedata),                           \n\t\t.d_readdatavalid                       (nios2_qsys_data_master_readdatavalid),                       \n\t\t.jtag_debug_module_debugaccess_to_roms (nios2_qsys_data_master_debugaccess),                         \n\t\t.i_address                             (nios2_qsys_instruction_master_address),                      \n\t\t.i_read                                (nios2_qsys_instruction_master_read),                         \n\t\t.i_readdata                            (nios2_qsys_instruction_master_readdata),                     \n\t\t.i_waitrequest                         (nios2_qsys_instruction_master_waitrequest),                  \n\t\t.i_readdatavalid                       (nios2_qsys_instruction_master_readdatavalid),                \n\t\t.d_irq                                 (nios2_qsys_d_irq_irq),                                       \n\t\t.jtag_debug_module_resetrequest        (nios2_qsys_jtag_debug_module_reset_reset),                   \n\t\t.jtag_debug_module_address             (mm_interconnect_0_nios2_qsys_jtag_debug_module_address),     \n\t\t.jtag_debug_module_byteenable          (mm_interconnect_0_nios2_qsys_jtag_debug_module_byteenable),  \n\t\t.jtag_debug_module_debugaccess         (mm_interconnect_0_nios2_qsys_jtag_debug_module_debugaccess), \n\t\t.jtag_debug_module_read                (mm_interconnect_0_nios2_qsys_jtag_debug_module_read),        \n\t\t.jtag_debug_module_readdata            (mm_interconnect_0_nios2_qsys_jtag_debug_module_readdata),    \n\t\t.jtag_debug_module_waitrequest         (mm_interconnect_0_nios2_qsys_jtag_debug_module_waitrequest), \n\t\t.jtag_debug_module_write               (mm_interconnect_0_nios2_qsys_jtag_debug_module_write),       \n\t\t.jtag_debug_module_writedata           (mm_interconnect_0_nios2_qsys_jtag_debug_module_writedata),   \n\t\t.no_ci_readra                          ()                                                            \n\t);\n\n\tDE1_SoC_QSYS_onchip_memory2 onchip_memory2 (\n\t\t.clk        (pll_outclk0_clk),                                \n\t\t.address    (mm_interconnect_0_onchip_memory2_s1_address),    \n\t\t.clken      (mm_interconnect_0_onchip_memory2_s1_clken),      \n\t\t.chipselect (mm_interconnect_0_onchip_memory2_s1_chipselect), \n\t\t.write      (mm_interconnect_0_onchip_memory2_s1_write),      \n\t\t.readdata   (mm_interconnect_0_onchip_memory2_s1_readdata),   \n\t\t.writedata  (mm_interconnect_0_onchip_memory2_s1_writedata),  \n\t\t.byteenable (mm_interconnect_0_onchip_memory2_s1_byteenable), \n\t\t.reset      (rst_controller_001_reset_out_reset),             \n\t\t.reset_req  (rst_controller_001_reset_out_reset_req)          \n\t);\n\n\tDE1_SoC_QSYS_sysid_qsys sysid_qsys (\n\t\t.clock    (pll_outclk0_clk),                                     \n\t\t.reset_n  (~rst_controller_001_reset_out_reset),                 \n\t\t.readdata (mm_interconnect_0_sysid_qsys_control_slave_readdata), \n\t\t.address  (mm_interconnect_0_sysid_qsys_control_slave_address)   \n\t);\n\n\tDE1_SoC_QSYS_timer timer (\n\t\t.clk        (pll_outclk0_clk),                       \n\t\t.reset_n    (~rst_controller_001_reset_out_reset),   \n\t\t.address    (mm_interconnect_0_timer_s1_address),    \n\t\t.writedata  (mm_interconnect_0_timer_s1_writedata),  \n\t\t.readdata   (mm_interconnect_0_timer_s1_readdata),   \n\t\t.chipselect (mm_interconnect_0_timer_s1_chipselect), \n\t\t.write_n    (~mm_interconnect_0_timer_s1_write),     \n\t\t.irq        (irq_mapper_receiver0_irq)               \n\t);\n\n\tDE1_SoC_QSYS_jtag_uart jtag_uart (\n\t\t.clk            (pll_outclk0_clk),                                           \n\t\t.rst_n          (~rst_controller_001_reset_out_reset),                       \n\t\t.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  \n\t\t.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     \n\t\t.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       \n\t\t.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    \n\t\t.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      \n\t\t.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   \n\t\t.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), \n\t\t.av_irq         (irq_mapper_receiver1_irq)                                   \n\t);\n\n\tDE1_SoC_QSYS_key key (\n\t\t.clk        (pll_outclk0_clk),                     \n\t\t.reset_n    (~rst_controller_001_reset_out_reset), \n\t\t.address    (mm_interconnect_0_key_s1_address),    \n\t\t.write_n    (~mm_interconnect_0_key_s1_write),     \n\t\t.writedata  (mm_interconnect_0_key_s1_writedata),  \n\t\t.chipselect (mm_interconnect_0_key_s1_chipselect), \n\t\t.readdata   (mm_interconnect_0_key_s1_readdata),   \n\t\t.in_port    (key_external_connection_export),      \n\t\t.irq        (irq_mapper_receiver2_irq)             \n\t);\n\n\tDE1_SoC_QSYS_pll pll (\n\t\t.refclk   (clk_clk),                            \n\t\t.rst      (rst_controller_002_reset_out_reset), \n\t\t.outclk_0 (pll_outclk0_clk),                    \n\t\t.outclk_1 (clk_sdram_clk),                      \n\t\t.locked   (pll_locked_export)                   \n\t);\n\n\tDE1_SoC_QSYS_sdram sdram (\n\t\t.clk            (pll_outclk0_clk),                          \n\t\t.reset_n        (~rst_controller_001_reset_out_reset),      \n\t\t.az_addr        (mm_interconnect_0_sdram_s1_address),       \n\t\t.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   \n\t\t.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    \n\t\t.az_data        (mm_interconnect_0_sdram_s1_writedata),     \n\t\t.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         \n\t\t.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        \n\t\t.za_data        (mm_interconnect_0_sdram_s1_readdata),      \n\t\t.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), \n\t\t.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   \n\t\t.zs_addr        (sdram_wire_addr),                          \n\t\t.zs_ba          (sdram_wire_ba),                            \n\t\t.zs_cas_n       (sdram_wire_cas_n),                         \n\t\t.zs_cke         (sdram_wire_cke),                           \n\t\t.zs_cs_n        (sdram_wire_cs_n),                          \n\t\t.zs_dq          (sdram_wire_dq),                            \n\t\t.zs_dqm         (sdram_wire_dqm),                           \n\t\t.zs_ras_n       (sdram_wire_ras_n),                         \n\t\t.zs_we_n        (sdram_wire_we_n)                           \n\t);\n\n\tDE1_SoC_QSYS_mm_interconnect_0 mm_interconnect_0 (\n\t\t.pll_outclk0_clk                                   (pll_outclk0_clk),                                            \n\t\t.nios2_qsys_reset_n_reset_bridge_in_reset_reset    (rst_controller_reset_out_reset),                             \n\t\t.onchip_memory2_reset1_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                         \n\t\t.nios2_qsys_data_master_address                    (nios2_qsys_data_master_address),                             \n\t\t.nios2_qsys_data_master_waitrequest                (nios2_qsys_data_master_waitrequest),                         \n\t\t.nios2_qsys_data_master_byteenable                 (nios2_qsys_data_master_byteenable),                          \n\t\t.nios2_qsys_data_master_read                       (nios2_qsys_data_master_read),                                \n\t\t.nios2_qsys_data_master_readdata                   (nios2_qsys_data_master_readdata),                            \n\t\t.nios2_qsys_data_master_readdatavalid              (nios2_qsys_data_master_readdatavalid),                       \n\t\t.nios2_qsys_data_master_write                      (nios2_qsys_data_master_write),                               \n\t\t.nios2_qsys_data_master_writedata                  (nios2_qsys_data_master_writedata),                           \n\t\t.nios2_qsys_data_master_debugaccess                (nios2_qsys_data_master_debugaccess),                         \n\t\t.nios2_qsys_instruction_master_address             (nios2_qsys_instruction_master_address),                      \n\t\t.nios2_qsys_instruction_master_waitrequest         (nios2_qsys_instruction_master_waitrequest),                  \n\t\t.nios2_qsys_instruction_master_read                (nios2_qsys_instruction_master_read),                         \n\t\t.nios2_qsys_instruction_master_readdata            (nios2_qsys_instruction_master_readdata),                     \n\t\t.nios2_qsys_instruction_master_readdatavalid       (nios2_qsys_instruction_master_readdatavalid),                \n\t\t.jtag_uart_avalon_jtag_slave_address               (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),      \n\t\t.jtag_uart_avalon_jtag_slave_write                 (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),        \n\t\t.jtag_uart_avalon_jtag_slave_read                  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),         \n\t\t.jtag_uart_avalon_jtag_slave_readdata              (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),     \n\t\t.jtag_uart_avalon_jtag_slave_writedata             (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),    \n\t\t.jtag_uart_avalon_jtag_slave_waitrequest           (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest),  \n\t\t.jtag_uart_avalon_jtag_slave_chipselect            (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),   \n\t\t.key_s1_address                                    (mm_interconnect_0_key_s1_address),                           \n\t\t.key_s1_write                                      (mm_interconnect_0_key_s1_write),                             \n\t\t.key_s1_readdata                                   (mm_interconnect_0_key_s1_readdata),                          \n\t\t.key_s1_writedata                                  (mm_interconnect_0_key_s1_writedata),                         \n\t\t.key_s1_chipselect                                 (mm_interconnect_0_key_s1_chipselect),                        \n\t\t.nios2_qsys_jtag_debug_module_address              (mm_interconnect_0_nios2_qsys_jtag_debug_module_address),     \n\t\t.nios2_qsys_jtag_debug_module_write                (mm_interconnect_0_nios2_qsys_jtag_debug_module_write),       \n\t\t.nios2_qsys_jtag_debug_module_read                 (mm_interconnect_0_nios2_qsys_jtag_debug_module_read),        \n\t\t.nios2_qsys_jtag_debug_module_readdata             (mm_interconnect_0_nios2_qsys_jtag_debug_module_readdata),    \n\t\t.nios2_qsys_jtag_debug_module_writedata            (mm_interconnect_0_nios2_qsys_jtag_debug_module_writedata),   \n\t\t.nios2_qsys_jtag_debug_module_byteenable           (mm_interconnect_0_nios2_qsys_jtag_debug_module_byteenable),  \n\t\t.nios2_qsys_jtag_debug_module_waitrequest          (mm_interconnect_0_nios2_qsys_jtag_debug_module_waitrequest), \n\t\t.nios2_qsys_jtag_debug_module_debugaccess          (mm_interconnect_0_nios2_qsys_jtag_debug_module_debugaccess), \n\t\t.onchip_memory2_s1_address                         (mm_interconnect_0_onchip_memory2_s1_address),                \n\t\t.onchip_memory2_s1_write                           (mm_interconnect_0_onchip_memory2_s1_write),                  \n\t\t.onchip_memory2_s1_readdata                        (mm_interconnect_0_onchip_memory2_s1_readdata),               \n\t\t.onchip_memory2_s1_writedata                       (mm_interconnect_0_onchip_memory2_s1_writedata),              \n\t\t.onchip_memory2_s1_byteenable                      (mm_interconnect_0_onchip_memory2_s1_byteenable),             \n\t\t.onchip_memory2_s1_chipselect                      (mm_interconnect_0_onchip_memory2_s1_chipselect),             \n\t\t.onchip_memory2_s1_clken                           (mm_interconnect_0_onchip_memory2_s1_clken),                  \n\t\t.sdram_s1_address                                  (mm_interconnect_0_sdram_s1_address),                         \n\t\t.sdram_s1_write                                    (mm_interconnect_0_sdram_s1_write),                           \n\t\t.sdram_s1_read                                     (mm_interconnect_0_sdram_s1_read),                            \n\t\t.sdram_s1_readdata                                 (mm_interconnect_0_sdram_s1_readdata),                        \n\t\t.sdram_s1_writedata                                (mm_interconnect_0_sdram_s1_writedata),                       \n\t\t.sdram_s1_byteenable                               (mm_interconnect_0_sdram_s1_byteenable),                      \n\t\t.sdram_s1_readdatavalid                            (mm_interconnect_0_sdram_s1_readdatavalid),                   \n\t\t.sdram_s1_waitrequest                              (mm_interconnect_0_sdram_s1_waitrequest),                     \n\t\t.sdram_s1_chipselect                               (mm_interconnect_0_sdram_s1_chipselect),                      \n\t\t.sysid_qsys_control_slave_address                  (mm_interconnect_0_sysid_qsys_control_slave_address),         \n\t\t.sysid_qsys_control_slave_readdata                 (mm_interconnect_0_sysid_qsys_control_slave_readdata),        \n\t\t.timer_s1_address                                  (mm_interconnect_0_timer_s1_address),                         \n\t\t.timer_s1_write                                    (mm_interconnect_0_timer_s1_write),                           \n\t\t.timer_s1_readdata                                 (mm_interconnect_0_timer_s1_readdata),                        \n\t\t.timer_s1_writedata                                (mm_interconnect_0_timer_s1_writedata),                       \n\t\t.timer_s1_chipselect                               (mm_interconnect_0_timer_s1_chipselect)                       \n\t);\n\n\tDE1_SoC_QSYS_irq_mapper irq_mapper (\n\t\t.clk           (pll_outclk0_clk),                \n\t\t.reset         (rst_controller_reset_out_reset), \n\t\t.receiver0_irq (irq_mapper_receiver0_irq),       \n\t\t.receiver1_irq (irq_mapper_receiver1_irq),       \n\t\t.receiver2_irq (irq_mapper_receiver2_irq),       \n\t\t.sender_irq    (nios2_qsys_d_irq_irq)            \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (2),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (1),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller (\n\t\t.reset_in0      (~reset_reset_n),                           \n\t\t.reset_in1      (nios2_qsys_jtag_debug_module_reset_reset), \n\t\t.clk            (pll_outclk0_clk),                          \n\t\t.reset_out      (rst_controller_reset_out_reset),           \n\t\t.reset_req      (rst_controller_reset_out_reset_req),       \n\t\t.reset_req_in0  (1'b0),                                     \n\t\t.reset_req_in1  (1'b0),                                     \n\t\t.reset_in2      (1'b0),                                     \n\t\t.reset_req_in2  (1'b0),                                     \n\t\t.reset_in3      (1'b0),                                     \n\t\t.reset_req_in3  (1'b0),                                     \n\t\t.reset_in4      (1'b0),                                     \n\t\t.reset_req_in4  (1'b0),                                     \n\t\t.reset_in5      (1'b0),                                     \n\t\t.reset_req_in5  (1'b0),                                     \n\t\t.reset_in6      (1'b0),                                     \n\t\t.reset_req_in6  (1'b0),                                     \n\t\t.reset_in7      (1'b0),                                     \n\t\t.reset_req_in7  (1'b0),                                     \n\t\t.reset_in8      (1'b0),                                     \n\t\t.reset_req_in8  (1'b0),                                     \n\t\t.reset_in9      (1'b0),                                     \n\t\t.reset_req_in9  (1'b0),                                     \n\t\t.reset_in10     (1'b0),                                     \n\t\t.reset_req_in10 (1'b0),                                     \n\t\t.reset_in11     (1'b0),                                     \n\t\t.reset_req_in11 (1'b0),                                     \n\t\t.reset_in12     (1'b0),                                     \n\t\t.reset_req_in12 (1'b0),                                     \n\t\t.reset_in13     (1'b0),                                     \n\t\t.reset_req_in13 (1'b0),                                     \n\t\t.reset_in14     (1'b0),                                     \n\t\t.reset_req_in14 (1'b0),                                     \n\t\t.reset_in15     (1'b0),                                     \n\t\t.reset_req_in15 (1'b0)                                      \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (1),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (1),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller_001 (\n\t\t.reset_in0      (~reset_reset_n),                         \n\t\t.clk            (pll_outclk0_clk),                        \n\t\t.reset_out      (rst_controller_001_reset_out_reset),     \n\t\t.reset_req      (rst_controller_001_reset_out_reset_req), \n\t\t.reset_req_in0  (1'b0),                                   \n\t\t.reset_in1      (1'b0),                                   \n\t\t.reset_req_in1  (1'b0),                                   \n\t\t.reset_in2      (1'b0),                                   \n\t\t.reset_req_in2  (1'b0),                                   \n\t\t.reset_in3      (1'b0),                                   \n\t\t.reset_req_in3  (1'b0),                                   \n\t\t.reset_in4      (1'b0),                                   \n\t\t.reset_req_in4  (1'b0),                                   \n\t\t.reset_in5      (1'b0),                                   \n\t\t.reset_req_in5  (1'b0),                                   \n\t\t.reset_in6      (1'b0),                                   \n\t\t.reset_req_in6  (1'b0),                                   \n\t\t.reset_in7      (1'b0),                                   \n\t\t.reset_req_in7  (1'b0),                                   \n\t\t.reset_in8      (1'b0),                                   \n\t\t.reset_req_in8  (1'b0),                                   \n\t\t.reset_in9      (1'b0),                                   \n\t\t.reset_req_in9  (1'b0),                                   \n\t\t.reset_in10     (1'b0),                                   \n\t\t.reset_req_in10 (1'b0),                                   \n\t\t.reset_in11     (1'b0),                                   \n\t\t.reset_req_in11 (1'b0),                                   \n\t\t.reset_in12     (1'b0),                                   \n\t\t.reset_req_in12 (1'b0),                                   \n\t\t.reset_in13     (1'b0),                                   \n\t\t.reset_req_in13 (1'b0),                                   \n\t\t.reset_in14     (1'b0),                                   \n\t\t.reset_req_in14 (1'b0),                                   \n\t\t.reset_in15     (1'b0),                                   \n\t\t.reset_req_in15 (1'b0)                                    \n\t);\n\n\taltera_reset_controller #(\n\t\t.NUM_RESET_INPUTS          (1),\n\t\t.OUTPUT_RESET_SYNC_EDGES   (\"deassert\"),\n\t\t.SYNC_DEPTH                (2),\n\t\t.RESET_REQUEST_PRESENT     (0),\n\t\t.RESET_REQ_WAIT_TIME       (1),\n\t\t.MIN_RST_ASSERTION_TIME    (3),\n\t\t.RESET_REQ_EARLY_DSRT_TIME (1),\n\t\t.USE_RESET_REQUEST_IN0     (0),\n\t\t.USE_RESET_REQUEST_IN1     (0),\n\t\t.USE_RESET_REQUEST_IN2     (0),\n\t\t.USE_RESET_REQUEST_IN3     (0),\n\t\t.USE_RESET_REQUEST_IN4     (0),\n\t\t.USE_RESET_REQUEST_IN5     (0),\n\t\t.USE_RESET_REQUEST_IN6     (0),\n\t\t.USE_RESET_REQUEST_IN7     (0),\n\t\t.USE_RESET_REQUEST_IN8     (0),\n\t\t.USE_RESET_REQUEST_IN9     (0),\n\t\t.USE_RESET_REQUEST_IN10    (0),\n\t\t.USE_RESET_REQUEST_IN11    (0),\n\t\t.USE_RESET_REQUEST_IN12    (0),\n\t\t.USE_RESET_REQUEST_IN13    (0),\n\t\t.USE_RESET_REQUEST_IN14    (0),\n\t\t.USE_RESET_REQUEST_IN15    (0),\n\t\t.ADAPT_RESET_REQUEST       (0)\n\t) rst_controller_002 (\n\t\t.reset_in0      (~reset_reset_n),                     \n\t\t.clk            (clk_clk),                            \n\t\t.reset_out      (rst_controller_002_reset_out_reset), \n\t\t.reset_req      (),                                   \n\t\t.reset_req_in0  (1'b0),                               \n\t\t.reset_in1      (1'b0),                               \n\t\t.reset_req_in1  (1'b0),                               \n\t\t.reset_in2      (1'b0),                               \n\t\t.reset_req_in2  (1'b0),                               \n\t\t.reset_in3      (1'b0),                               \n\t\t.reset_req_in3  (1'b0),                               \n\t\t.reset_in4      (1'b0),                               \n\t\t.reset_req_in4  (1'b0),                               \n\t\t.reset_in5      (1'b0),                               \n\t\t.reset_req_in5  (1'b0),                               \n\t\t.reset_in6      (1'b0),                               \n\t\t.reset_req_in6  (1'b0),                               \n\t\t.reset_in7      (1'b0),                               \n\t\t.reset_req_in7  (1'b0),                               \n\t\t.reset_in8      (1'b0),                               \n\t\t.reset_req_in8  (1'b0),                               \n\t\t.reset_in9      (1'b0),                               \n\t\t.reset_req_in9  (1'b0),                               \n\t\t.reset_in10     (1'b0),                               \n\t\t.reset_req_in10 (1'b0),                               \n\t\t.reset_in11     (1'b0),                               \n\t\t.reset_req_in11 (1'b0),                               \n\t\t.reset_in12     (1'b0),                               \n\t\t.reset_req_in12 (1'b0),                               \n\t\t.reset_in13     (1'b0),                               \n\t\t.reset_req_in13 (1'b0),                               \n\t\t.reset_in14     (1'b0),                               \n\t\t.reset_req_in14 (1'b0),                               \n\t\t.reset_in15     (1'b0),                               \n\t\t.reset_req_in15 (1'b0)                                \n\t);\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: DE1_SoC_QSYS. Module specification: This module implements a System-on-Chip (SoC) design for a DE1 development board, integrating various components including a Nios II processor, memory interfaces (SDRAM and on-chip memory), peripheral controllers (timer, JTAG UART, key input), and system components (PLL, reset controller). It uses an Avalon memory-mapped interface to interconnect these components. The module has input ports for the main clock (clk_clk), reset signal (reset_reset_n), and key inputs (key_external_connection_export). Output ports include SDRAM interface signals (sdram_wire_*), PLL status (pll_locked_export), and SDRAM clock (clk_sdram_clk). Internal signals facilitate communication between components, such as Nios II data"
                }
            ]
        }
    ]
}