{
    "spec": "Module name: soc_system_hps_0. Module specification: The soc_system_hps_0 module serves as an interface bridge between a Hard Processor System (HPS) and FPGA fabric, facilitating communication and control functions. It handles a wide array of input and output signals related to reset controls, AXI interface transactions, IRQ inputs, memory controller interfaces, and various peripheral interfaces (EMAC, QSPI, SDIO, USB, SPI, UART, I2C, and GPIOs). The module has numerous input and output ports for these functions, including clock inputs, AXI interface signals, memory signals, and peripheral I/O signals. While there are no explicitly declared internal signals, the module instantiates two sub-modules: soc_system_hps_0_fpga_interfaces and soc_system_hps_0_hps_io",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: soc_system_hps_0.\n\nExplanation: The module `soc_system_hps_0` acts as an interface bridge between a Hard Processor System (HPS) and FPGA fabric, facilitating communication and control functions. It handles a wide array of input and output signals related to different functionalities such as reset controls, AXI interface transactions for read and write operations, IRQ inputs, memory controller interfaces, and additional peripheral interfaces for communication and storage like EMAC (Ethernet MAC), QSPI, SDIO, USB, SPI, UART, I2C, and GPIOs. The module thus enables integration and interaction of the HPS with additional custom/logic functionality implemented in the FPGA, notably checking and ensuring correct instantiation through parameter checks."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nf2h_cold_rst_req_n, f2h_dbg_rst_req_n, f2h_warm_rst_req_n, f2h_stm_hwevents, f2h_axi_clk, f2h_AWID, f2h_AWADDR, f2h_AWLEN, f2h_AWSIZE, f2h_AWBURST, f2h_AWLOCK, f2h_AWCACHE, f2h_AWPROT, f2h_AWVALID, f2h_AWUSER, f2h_WID, f2h_WDATA, f2h_WSTRB, f2h_WLAST, f2h_WVALID, f2h_BREADY, f2h_ARID, f2h_ARADDR, f2h_ARLEN, f2h_ARSIZE, f2h_ARBURST, f2h_ARLOCK, f2h_ARCACHE, f2h_ARPROT, f2h_ARVALID, f2h_ARUSER, f2h_RREADY, h2f_lw_axi_clk, h2f_lw_AWREADY, h2f_lw_WREADY, h2f_lw_BID, h2f_lw_BRESP, h2f_lw_BVALID, h2f_lw_ARREADY, h2f_lw_RID, h2f_lw_RDATA, h2f_lw_RRESP, h2f_lw_RLAST, h2f_lw_RVALID, h2f_axi_clk, h2f_AWREADY, h2f_WREADY, h2f_BID, h2f_BRESP, h2f_BVALID, h2f_ARREADY, h2f_RID, h2f_RDATA, h2f_RRESP, h2f_RLAST, h2f_RVALID, f2h_irq_p0, f2h_irq_p1, oct_rzqin, hps_io_emac1_inst_RXD0, hps_io_emac1_inst_RX_CTL, hps_io_emac1_inst_RX_CLK, hps_io_emac1_inst_RXD1, hps_io_emac1_inst_RXD2, hps_io_emac1_inst_RXD3, hps_io_usb1_inst_CLK, hps_io_usb1_inst_DIR, hps_io_usb1_inst_NXT, hps_io_spim1_inst_MISO, hps_io_uart0_inst_RX.\n\nExplanation: These ports are used for various input signals including reset requests, AXI interface inputs, clock inputs, interrupt requests, and I/O signals for different peripherals like EMAC, USB, SPI, and UART.\n\nOutput ports:\nh2f_rst_n, f2h_AWREADY, f2h_WREADY, f2h_BID, f2h_BRESP, f2h_BVALID, f2h_ARREADY, f2h_RID, f2h_RDATA, f2h_RRESP, f2h_RLAST, f2h_RVALID, h2f_lw_AWID, h2f_lw_AWADDR, h2f_lw_AWLEN, h2f_lw_AWSIZE, h2f_lw_AWBURST, h2f_lw_AWLOCK, h2f_lw_AWCACHE, h2f_lw_AWPROT, h2f_lw_AWVALID, h2f_lw_WID, h2f_lw_WDATA, h2f_lw_WSTRB, h2f_lw_WLAST, h2f_lw_WVALID, h2f_lw_BREADY, h2f_lw_ARID, h2f_lw_ARADDR, h2f_lw_ARLEN, h2f_lw_ARSIZE, h2f_lw_ARBURST, h2f_lw_ARLOCK, h2f_lw_ARCACHE, h2f_lw_ARPROT, h2f_lw_ARVALID, h2f_lw_RREADY, h2f_AWID, h2f_AWADDR, h2f_AWLEN, h2f_AWSIZE, h2f_AWBURST, h2f_AWLOCK, h2f_AWCACHE, h2f_AWPROT, h2f_AWVALID, h2f_WID, h2f_WDATA, h2f_WSTRB, h2f_WLAST, h2f_WVALID, h2f_BREADY, h2f_ARID, h2f_ARADDR, h2f_ARLEN, h2f_ARSIZE, h2f_ARBURST, h2f_ARLOCK, h2f_ARCACHE, h2f_ARPROT, h2f_ARVALID, h2f_RREADY, mem_a, mem_ba, mem_ck, mem_ck_n, mem_cke, mem_cs_n, mem_ras_n, mem_cas_n, mem_we_n, mem_reset_n, mem_odt, mem_dm, hps_io_emac1_inst_TX_CLK, hps_io_emac1_inst_TXD0, hps_io_emac1_inst_TXD1, hps_io_emac1_inst_TXD2, hps_io_emac1_inst_TXD3, hps_io_emac1_inst_MDC, hps_io_emac1_inst_TX_CTL, hps_io_qspi_inst_SS0, hps_io_qspi_inst_CLK, hps_io_sdio_inst_CLK, hps_io_usb1_inst_STP, hps_io_spim1_inst_CLK, hps_io_spim1_inst_MOSI, hps_io_spim1_inst_SS0, hps_io_uart0_inst_TX.\n\nExplanation: These ports are used for various output signals including reset, AXI interface outputs, memory controller signals, and I/O signals for different peripherals like EMAC, QSPI, SDIO, USB, SPI, and UART."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the provided code, I don't see any explicitly declared internal signals within the module soc_system_hps_0. The module primarily consists of input and output ports, parameter declarations, and instantiations of two sub-modules: soc_system_hps_0_fpga_interfaces and soc_system_hps_0_hps_io.\n\nInternal signals: None explicitly declared.\n\nExplanation: The module soc_system_hps_0 appears to be a top-level wrapper that connects external ports to two internal sub-modules. It doesn't define any additional internal signals beyond its input and output ports. The actual signal processing and internal logic likely occur within the instantiated sub-modules soc_system_hps_0_fpga_interfaces and soc_system_hps_0_hps_io.\n\nThe module does include a generate block for parameter checking, but this doesn't introduce any functional internal signals - it's used for design-time error checking of the module parameters F2S_Width and S2F_Width."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n`timescale 1 ps / 1 ps\nmodule soc_system_hps_0 #(\n\t\tparameter F2S_Width = 2,\n\t\tparameter S2F_Width = 2\n\t) (\n\t\toutput wire        h2f_rst_n,                \n\t\tinput  wire        f2h_cold_rst_req_n,       \n\t\tinput  wire        f2h_dbg_rst_req_n,        \n\t\tinput  wire        f2h_warm_rst_req_n,       \n\t\tinput  wire [27:0] f2h_stm_hwevents,         \n\t\tinput  wire        f2h_axi_clk,              \n\t\tinput  wire [7:0]  f2h_AWID,                 \n\t\tinput  wire [31:0] f2h_AWADDR,               \n\t\tinput  wire [3:0]  f2h_AWLEN,                \n\t\tinput  wire [2:0]  f2h_AWSIZE,               \n\t\tinput  wire [1:0]  f2h_AWBURST,              \n\t\tinput  wire [1:0]  f2h_AWLOCK,               \n\t\tinput  wire [3:0]  f2h_AWCACHE,              \n\t\tinput  wire [2:0]  f2h_AWPROT,               \n\t\tinput  wire        f2h_AWVALID,              \n\t\toutput wire        f2h_AWREADY,              \n\t\tinput  wire [4:0]  f2h_AWUSER,               \n\t\tinput  wire [7:0]  f2h_WID,                  \n\t\tinput  wire [63:0] f2h_WDATA,                \n\t\tinput  wire [7:0]  f2h_WSTRB,                \n\t\tinput  wire        f2h_WLAST,                \n\t\tinput  wire        f2h_WVALID,               \n\t\toutput wire        f2h_WREADY,               \n\t\toutput wire [7:0]  f2h_BID,                  \n\t\toutput wire [1:0]  f2h_BRESP,                \n\t\toutput wire        f2h_BVALID,               \n\t\tinput  wire        f2h_BREADY,               \n\t\tinput  wire [7:0]  f2h_ARID,                 \n\t\tinput  wire [31:0] f2h_ARADDR,               \n\t\tinput  wire [3:0]  f2h_ARLEN,                \n\t\tinput  wire [2:0]  f2h_ARSIZE,               \n\t\tinput  wire [1:0]  f2h_ARBURST,              \n\t\tinput  wire [1:0]  f2h_ARLOCK,               \n\t\tinput  wire [3:0]  f2h_ARCACHE,              \n\t\tinput  wire [2:0]  f2h_ARPROT,               \n\t\tinput  wire        f2h_ARVALID,              \n\t\toutput wire        f2h_ARREADY,              \n\t\tinput  wire [4:0]  f2h_ARUSER,               \n\t\toutput wire [7:0]  f2h_RID,                  \n\t\toutput wire [63:0] f2h_RDATA,                \n\t\toutput wire [1:0]  f2h_RRESP,                \n\t\toutput wire        f2h_RLAST,                \n\t\toutput wire        f2h_RVALID,               \n\t\tinput  wire        f2h_RREADY,               \n\t\tinput  wire        h2f_lw_axi_clk,           \n\t\toutput wire [11:0] h2f_lw_AWID,              \n\t\toutput wire [20:0] h2f_lw_AWADDR,            \n\t\toutput wire [3:0]  h2f_lw_AWLEN,             \n\t\toutput wire [2:0]  h2f_lw_AWSIZE,            \n\t\toutput wire [1:0]  h2f_lw_AWBURST,           \n\t\toutput wire [1:0]  h2f_lw_AWLOCK,            \n\t\toutput wire [3:0]  h2f_lw_AWCACHE,           \n\t\toutput wire [2:0]  h2f_lw_AWPROT,            \n\t\toutput wire        h2f_lw_AWVALID,           \n\t\tinput  wire        h2f_lw_AWREADY,           \n\t\toutput wire [11:0] h2f_lw_WID,               \n\t\toutput wire [31:0] h2f_lw_WDATA,             \n\t\toutput wire [3:0]  h2f_lw_WSTRB,             \n\t\toutput wire        h2f_lw_WLAST,             \n\t\toutput wire        h2f_lw_WVALID,            \n\t\tinput  wire        h2f_lw_WREADY,            \n\t\tinput  wire [11:0] h2f_lw_BID,               \n\t\tinput  wire [1:0]  h2f_lw_BRESP,             \n\t\tinput  wire        h2f_lw_BVALID,            \n\t\toutput wire        h2f_lw_BREADY,            \n\t\toutput wire [11:0] h2f_lw_ARID,              \n\t\toutput wire [20:0] h2f_lw_ARADDR,            \n\t\toutput wire [3:0]  h2f_lw_ARLEN,             \n\t\toutput wire [2:0]  h2f_lw_ARSIZE,            \n\t\toutput wire [1:0]  h2f_lw_ARBURST,           \n\t\toutput wire [1:0]  h2f_lw_ARLOCK,            \n\t\toutput wire [3:0]  h2f_lw_ARCACHE,           \n\t\toutput wire [2:0]  h2f_lw_ARPROT,            \n\t\toutput wire        h2f_lw_ARVALID,           \n\t\tinput  wire        h2f_lw_ARREADY,           \n\t\tinput  wire [11:0] h2f_lw_RID,               \n\t\tinput  wire [31:0] h2f_lw_RDATA,             \n\t\tinput  wire [1:0]  h2f_lw_RRESP,             \n\t\tinput  wire        h2f_lw_RLAST,             \n\t\tinput  wire        h2f_lw_RVALID,            \n\t\toutput wire        h2f_lw_RREADY,            \n\t\tinput  wire        h2f_axi_clk,              \n\t\toutput wire [11:0] h2f_AWID,                 \n\t\toutput wire [29:0] h2f_AWADDR,               \n\t\toutput wire [3:0]  h2f_AWLEN,                \n\t\toutput wire [2:0]  h2f_AWSIZE,               \n\t\toutput wire [1:0]  h2f_AWBURST,              \n\t\toutput wire [1:0]  h2f_AWLOCK,               \n\t\toutput wire [3:0]  h2f_AWCACHE,              \n\t\toutput wire [2:0]  h2f_AWPROT,               \n\t\toutput wire        h2f_AWVALID,              \n\t\tinput  wire        h2f_AWREADY,              \n\t\toutput wire [11:0] h2f_WID,                  \n\t\toutput wire [63:0] h2f_WDATA,                \n\t\toutput wire [7:0]  h2f_WSTRB,                \n\t\toutput wire        h2f_WLAST,                \n\t\toutput wire        h2f_WVALID,               \n\t\tinput  wire        h2f_WREADY,               \n\t\tinput  wire [11:0] h2f_BID,                  \n\t\tinput  wire [1:0]  h2f_BRESP,                \n\t\tinput  wire        h2f_BVALID,               \n\t\toutput wire        h2f_BREADY,               \n\t\toutput wire [11:0] h2f_ARID,                 \n\t\toutput wire [29:0] h2f_ARADDR,               \n\t\toutput wire [3:0]  h2f_ARLEN,                \n\t\toutput wire [2:0]  h2f_ARSIZE,               \n\t\toutput wire [1:0]  h2f_ARBURST,              \n\t\toutput wire [1:0]  h2f_ARLOCK,               \n\t\toutput wire [3:0]  h2f_ARCACHE,              \n\t\toutput wire [2:0]  h2f_ARPROT,               \n\t\toutput wire        h2f_ARVALID,              \n\t\tinput  wire        h2f_ARREADY,              \n\t\tinput  wire [11:0] h2f_RID,                  \n\t\tinput  wire [63:0] h2f_RDATA,                \n\t\tinput  wire [1:0]  h2f_RRESP,                \n\t\tinput  wire        h2f_RLAST,                \n\t\tinput  wire        h2f_RVALID,               \n\t\toutput wire        h2f_RREADY,               \n\t\tinput  wire [31:0] f2h_irq_p0,               \n\t\tinput  wire [31:0] f2h_irq_p1,               \n\t\toutput wire [14:0] mem_a,                    \n\t\toutput wire [2:0]  mem_ba,                   \n\t\toutput wire        mem_ck,                   \n\t\toutput wire        mem_ck_n,                 \n\t\toutput wire        mem_cke,                  \n\t\toutput wire        mem_cs_n,                 \n\t\toutput wire        mem_ras_n,                \n\t\toutput wire        mem_cas_n,                \n\t\toutput wire        mem_we_n,                 \n\t\toutput wire        mem_reset_n,              \n\t\tinout  wire [31:0] mem_dq,                   \n\t\tinout  wire [3:0]  mem_dqs,                  \n\t\tinout  wire [3:0]  mem_dqs_n,                \n\t\toutput wire        mem_odt,                  \n\t\toutput wire [3:0]  mem_dm,                   \n\t\tinput  wire        oct_rzqin,                \n\t\toutput wire        hps_io_emac1_inst_TX_CLK, \n\t\toutput wire        hps_io_emac1_inst_TXD0,   \n\t\toutput wire        hps_io_emac1_inst_TXD1,   \n\t\toutput wire        hps_io_emac1_inst_TXD2,   \n\t\toutput wire        hps_io_emac1_inst_TXD3,   \n\t\tinput  wire        hps_io_emac1_inst_RXD0,   \n\t\tinout  wire        hps_io_emac1_inst_MDIO,   \n\t\toutput wire        hps_io_emac1_inst_MDC,    \n\t\tinput  wire        hps_io_emac1_inst_RX_CTL, \n\t\toutput wire        hps_io_emac1_inst_TX_CTL, \n\t\tinput  wire        hps_io_emac1_inst_RX_CLK, \n\t\tinput  wire        hps_io_emac1_inst_RXD1,   \n\t\tinput  wire        hps_io_emac1_inst_RXD2,   \n\t\tinput  wire        hps_io_emac1_inst_RXD3,   \n\t\tinout  wire        hps_io_qspi_inst_IO0,     \n\t\tinout  wire        hps_io_qspi_inst_IO1,     \n\t\tinout  wire        hps_io_qspi_inst_IO2,     \n\t\tinout  wire        hps_io_qspi_inst_IO3,     \n\t\toutput wire        hps_io_qspi_inst_SS0,     \n\t\toutput wire        hps_io_qspi_inst_CLK,     \n\t\tinout  wire        hps_io_sdio_inst_CMD,     \n\t\tinout  wire        hps_io_sdio_inst_D0,      \n\t\tinout  wire        hps_io_sdio_inst_D1,      \n\t\toutput wire        hps_io_sdio_inst_CLK,     \n\t\tinout  wire        hps_io_sdio_inst_D2,      \n\t\tinout  wire        hps_io_sdio_inst_D3,      \n\t\tinout  wire        hps_io_usb1_inst_D0,      \n\t\tinout  wire        hps_io_usb1_inst_D1,      \n\t\tinout  wire        hps_io_usb1_inst_D2,      \n\t\tinout  wire        hps_io_usb1_inst_D3,      \n\t\tinout  wire        hps_io_usb1_inst_D4,      \n\t\tinout  wire        hps_io_usb1_inst_D5,      \n\t\tinout  wire        hps_io_usb1_inst_D6,      \n\t\tinout  wire        hps_io_usb1_inst_D7,      \n\t\tinput  wire        hps_io_usb1_inst_CLK,     \n\t\toutput wire        hps_io_usb1_inst_STP,     \n\t\tinput  wire        hps_io_usb1_inst_DIR,     \n\t\tinput  wire        hps_io_usb1_inst_NXT,     \n\t\toutput wire        hps_io_spim1_inst_CLK,    \n\t\toutput wire        hps_io_spim1_inst_MOSI,   \n\t\tinput  wire        hps_io_spim1_inst_MISO,   \n\t\toutput wire        hps_io_spim1_inst_SS0,    \n\t\tinput  wire        hps_io_uart0_inst_RX,     \n\t\toutput wire        hps_io_uart0_inst_TX,     \n\t\tinout  wire        hps_io_i2c0_inst_SDA,     \n\t\tinout  wire        hps_io_i2c0_inst_SCL,     \n\t\tinout  wire        hps_io_i2c1_inst_SDA,     \n\t\tinout  wire        hps_io_i2c1_inst_SCL,     \n\t\tinout  wire        hps_io_gpio_inst_GPIO09,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO35,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO40,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO41,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO48,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO53,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO54,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO61   \n\t);\n\n\tgenerate\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tif (F2S_Width != 2)\n\t\tbegin\n\t\t\tinitial begin\n\t\t\t\t$display(\"Generated module instantiated with wrong parameters\");\n\t\t\t\t$stop;\n\t\t\tend\n\t\t\tinstantiated_with_wrong_parameters_error_see_comment_above\n\t\t\t\t\tf2s_width_check ( .error(1'b1) );\n\t\tend\n\t\tif (S2F_Width != 2)\n\t\tbegin\n\t\t\tinitial begin\n\t\t\t\t$display(\"Generated module instantiated with wrong parameters\");\n\t\t\t\t$stop;\n\t\t\tend\n\t\t\tinstantiated_with_wrong_parameters_error_see_comment_above\n\t\t\t\t\ts2f_width_check ( .error(1'b1) );\n\t\tend\n\tendgenerate\n\n\tsoc_system_hps_0_fpga_interfaces fpga_interfaces (\n\t\t.h2f_rst_n          (h2f_rst_n),          \n\t\t.f2h_cold_rst_req_n (f2h_cold_rst_req_n), \n\t\t.f2h_dbg_rst_req_n  (f2h_dbg_rst_req_n),  \n\t\t.f2h_warm_rst_req_n (f2h_warm_rst_req_n), \n\t\t.f2h_stm_hwevents   (f2h_stm_hwevents),   \n\t\t.f2h_axi_clk        (f2h_axi_clk),        \n\t\t.f2h_AWID           (f2h_AWID),           \n\t\t.f2h_AWADDR         (f2h_AWADDR),         \n\t\t.f2h_AWLEN          (f2h_AWLEN),          \n\t\t.f2h_AWSIZE         (f2h_AWSIZE),         \n\t\t.f2h_AWBURST        (f2h_AWBURST),        \n\t\t.f2h_AWLOCK         (f2h_AWLOCK),         \n\t\t.f2h_AWCACHE        (f2h_AWCACHE),        \n\t\t.f2h_AWPROT         (f2h_AWPROT),         \n\t\t.f2h_AWVALID        (f2h_AWVALID),        \n\t\t.f2h_AWREADY        (f2h_AWREADY),        \n\t\t.f2h_AWUSER         (f2h_AWUSER),         \n\t\t.f2h_WID            (f2h_WID),            \n\t\t.f2h_WDATA          (f2h_WDATA),          \n\t\t.f2h_WSTRB          (f2h_WSTRB),          \n\t\t.f2h_WLAST          (f2h_WLAST),          \n\t\t.f2h_WVALID         (f2h_WVALID),         \n\t\t.f2h_WREADY         (f2h_WREADY),         \n\t\t.f2h_BID            (f2h_BID),            \n\t\t.f2h_BRESP          (f2h_BRESP),          \n\t\t.f2h_BVALID         (f2h_BVALID),         \n\t\t.f2h_BREADY         (f2h_BREADY),         \n\t\t.f2h_ARID           (f2h_ARID),           \n\t\t.f2h_ARADDR         (f2h_ARADDR),         \n\t\t.f2h_ARLEN          (f2h_ARLEN),          \n\t\t.f2h_ARSIZE         (f2h_ARSIZE),         \n\t\t.f2h_ARBURST        (f2h_ARBURST),        \n\t\t.f2h_ARLOCK         (f2h_ARLOCK),         \n\t\t.f2h_ARCACHE        (f2h_ARCACHE),        \n\t\t.f2h_ARPROT         (f2h_ARPROT),         \n\t\t.f2h_ARVALID        (f2h_ARVALID),        \n\t\t.f2h_ARREADY        (f2h_ARREADY),        \n\t\t.f2h_ARUSER         (f2h_ARUSER),         \n\t\t.f2h_RID            (f2h_RID),            \n\t\t.f2h_RDATA          (f2h_RDATA),          \n\t\t.f2h_RRESP          (f2h_RRESP),          \n\t\t.f2h_RLAST          (f2h_RLAST),          \n\t\t.f2h_RVALID         (f2h_RVALID),         \n\t\t.f2h_RREADY         (f2h_RREADY),         \n\t\t.h2f_lw_axi_clk     (h2f_lw_axi_clk),     \n\t\t.h2f_lw_AWID        (h2f_lw_AWID),        \n\t\t.h2f_lw_AWADDR      (h2f_lw_AWADDR),      \n\t\t.h2f_lw_AWLEN       (h2f_lw_AWLEN),       \n\t\t.h2f_lw_AWSIZE      (h2f_lw_AWSIZE),      \n\t\t.h2f_lw_AWBURST     (h2f_lw_AWBURST),     \n\t\t.h2f_lw_AWLOCK      (h2f_lw_AWLOCK),      \n\t\t.h2f_lw_AWCACHE     (h2f_lw_AWCACHE),     \n\t\t.h2f_lw_AWPROT      (h2f_lw_AWPROT),      \n\t\t.h2f_lw_AWVALID     (h2f_lw_AWVALID),     \n\t\t.h2f_lw_AWREADY     (h2f_lw_AWREADY),     \n\t\t.h2f_lw_WID         (h2f_lw_WID),         \n\t\t.h2f_lw_WDATA       (h2f_lw_WDATA),       \n\t\t.h2f_lw_WSTRB       (h2f_lw_WSTRB),       \n\t\t.h2f_lw_WLAST       (h2f_lw_WLAST),       \n\t\t.h2f_lw_WVALID      (h2f_lw_WVALID),      \n\t\t.h2f_lw_WREADY      (h2f_lw_WREADY),      \n\t\t.h2f_lw_BID         (h2f_lw_BID),         \n\t\t.h2f_lw_BRESP       (h2f_lw_BRESP),       \n\t\t.h2f_lw_BVALID      (h2f_lw_BVALID),      \n\t\t.h2f_lw_BREADY      (h2f_lw_BREADY),      \n\t\t.h2f_lw_ARID        (h2f_lw_ARID),        \n\t\t.h2f_lw_ARADDR      (h2f_lw_ARADDR),      \n\t\t.h2f_lw_ARLEN       (h2f_lw_ARLEN),       \n\t\t.h2f_lw_ARSIZE      (h2f_lw_ARSIZE),      \n\t\t.h2f_lw_ARBURST     (h2f_lw_ARBURST),     \n\t\t.h2f_lw_ARLOCK      (h2f_lw_ARLOCK),      \n\t\t.h2f_lw_ARCACHE     (h2f_lw_ARCACHE),     \n\t\t.h2f_lw_ARPROT      (h2f_lw_ARPROT),      \n\t\t.h2f_lw_ARVALID     (h2f_lw_ARVALID),     \n\t\t.h2f_lw_ARREADY     (h2f_lw_ARREADY),     \n\t\t.h2f_lw_RID         (h2f_lw_RID),         \n\t\t.h2f_lw_RDATA       (h2f_lw_RDATA),       \n\t\t.h2f_lw_RRESP       (h2f_lw_RRESP),       \n\t\t.h2f_lw_RLAST       (h2f_lw_RLAST),       \n\t\t.h2f_lw_RVALID      (h2f_lw_RVALID),      \n\t\t.h2f_lw_RREADY      (h2f_lw_RREADY),      \n\t\t.h2f_axi_clk        (h2f_axi_clk),        \n\t\t.h2f_AWID           (h2f_AWID),           \n\t\t.h2f_AWADDR         (h2f_AWADDR),         \n\t\t.h2f_AWLEN          (h2f_AWLEN),          \n\t\t.h2f_AWSIZE         (h2f_AWSIZE),         \n\t\t.h2f_AWBURST        (h2f_AWBURST),        \n\t\t.h2f_AWLOCK         (h2f_AWLOCK),         \n\t\t.h2f_AWCACHE        (h2f_AWCACHE),        \n\t\t.h2f_AWPROT         (h2f_AWPROT),         \n\t\t.h2f_AWVALID        (h2f_AWVALID),        \n\t\t.h2f_AWREADY        (h2f_AWREADY),        \n\t\t.h2f_WID            (h2f_WID),            \n\t\t.h2f_WDATA          (h2f_WDATA),          \n\t\t.h2f_WSTRB          (h2f_WSTRB),          \n\t\t.h2f_WLAST          (h2f_WLAST),          \n\t\t.h2f_WVALID         (h2f_WVALID),         \n\t\t.h2f_WREADY         (h2f_WREADY),         \n\t\t.h2f_BID            (h2f_BID),            \n\t\t.h2f_BRESP          (h2f_BRESP),          \n\t\t.h2f_BVALID         (h2f_BVALID),         \n\t\t.h2f_BREADY         (h2f_BREADY),         \n\t\t.h2f_ARID           (h2f_ARID),           \n\t\t.h2f_ARADDR         (h2f_ARADDR),         \n\t\t.h2f_ARLEN          (h2f_ARLEN),          \n\t\t.h2f_ARSIZE         (h2f_ARSIZE),         \n\t\t.h2f_ARBURST        (h2f_ARBURST),        \n\t\t.h2f_ARLOCK         (h2f_ARLOCK),         \n\t\t.h2f_ARCACHE        (h2f_ARCACHE),        \n\t\t.h2f_ARPROT         (h2f_ARPROT),         \n\t\t.h2f_ARVALID        (h2f_ARVALID),        \n\t\t.h2f_ARREADY        (h2f_ARREADY),        \n\t\t.h2f_RID            (h2f_RID),            \n\t\t.h2f_RDATA          (h2f_RDATA),          \n\t\t.h2f_RRESP          (h2f_RRESP),          \n\t\t.h2f_RLAST          (h2f_RLAST),          \n\t\t.h2f_RVALID         (h2f_RVALID),         \n\t\t.h2f_RREADY         (h2f_RREADY),         \n\t\t.f2h_irq_p0         (f2h_irq_p0),         \n\t\t.f2h_irq_p1         (f2h_irq_p1)          \n\t);\n\n\tsoc_system_hps_0_hps_io hps_io (\n\t\t.mem_a                    (mem_a),                    \n\t\t.mem_ba                   (mem_ba),                   \n\t\t.mem_ck                   (mem_ck),                   \n\t\t.mem_ck_n                 (mem_ck_n),                 \n\t\t.mem_cke                  (mem_cke),                  \n\t\t.mem_cs_n                 (mem_cs_n),                 \n\t\t.mem_ras_n                (mem_ras_n),                \n\t\t.mem_cas_n                (mem_cas_n),                \n\t\t.mem_we_n                 (mem_we_n),                 \n\t\t.mem_reset_n              (mem_reset_n),              \n\t\t.mem_dq                   (mem_dq),                   \n\t\t.mem_dqs                  (mem_dqs),                  \n\t\t.mem_dqs_n                (mem_dqs_n),                \n\t\t.mem_odt                  (mem_odt),                  \n\t\t.mem_dm                   (mem_dm),                   \n\t\t.oct_rzqin                (oct_rzqin),                \n\t\t.hps_io_emac1_inst_TX_CLK (hps_io_emac1_inst_TX_CLK), \n\t\t.hps_io_emac1_inst_TXD0   (hps_io_emac1_inst_TXD0),   \n\t\t.hps_io_emac1_inst_TXD1   (hps_io_emac1_inst_TXD1),   \n\t\t.hps_io_emac1_inst_TXD2   (hps_io_emac1_inst_TXD2),   \n\t\t.hps_io_emac1_inst_TXD3   (hps_io_emac1_inst_TXD3),   \n\t\t.hps_io_emac1_inst_RXD0   (hps_io_emac1_inst_RXD0),   \n\t\t.hps_io_emac1_inst_MDIO   (hps_io_emac1_inst_MDIO),   \n\t\t.hps_io_emac1_inst_MDC    (hps_io_emac1_inst_MDC),    \n\t\t.hps_io_emac1_inst_RX_CTL (hps_io_emac1_inst_RX_CTL), \n\t\t.hps_io_emac1_inst_TX_CTL (hps_io_emac1_inst_TX_CTL), \n\t\t.hps_io_emac1_inst_RX_CLK (hps_io_emac1_inst_RX_CLK), \n\t\t.hps_io_emac1_inst_RXD1   (hps_io_emac1_inst_RXD1),   \n\t\t.hps_io_emac1_inst_RXD2   (hps_io_emac1_inst_RXD2),   \n\t\t.hps_io_emac1_inst_RXD3   (hps_io_emac1_inst_RXD3),   \n\t\t.hps_io_qspi_inst_IO0     (hps_io_qspi_inst_IO0),     \n\t\t.hps_io_qspi_inst_IO1     (hps_io_qspi_inst_IO1),     \n\t\t.hps_io_qspi_inst_IO2     (hps_io_qspi_inst_IO2),     \n\t\t.hps_io_qspi_inst_IO3     (hps_io_qspi_inst_IO3),     \n\t\t.hps_io_qspi_inst_SS0     (hps_io_qspi_inst_SS0),     \n\t\t.hps_io_qspi_inst_CLK     (hps_io_qspi_inst_CLK),     \n\t\t.hps_io_sdio_inst_CMD     (hps_io_sdio_inst_CMD),     \n\t\t.hps_io_sdio_inst_D0      (hps_io_sdio_inst_D0),      \n\t\t.hps_io_sdio_inst_D1      (hps_io_sdio_inst_D1),      \n\t\t.hps_io_sdio_inst_CLK     (hps_io_sdio_inst_CLK),     \n\t\t.hps_io_sdio_inst_D2      (hps_io_sdio_inst_D2),      \n\t\t.hps_io_sdio_inst_D3      (hps_io_sdio_inst_D3),      \n\t\t.hps_io_usb1_inst_D0      (hps_io_usb1_inst_D0),      \n\t\t.hps_io_usb1_inst_D1      (hps_io_usb1_inst_D1),      \n\t\t.hps_io_usb1_inst_D2      (hps_io_usb1_inst_D2),      \n\t\t.hps_io_usb1_inst_D3      (hps_io_usb1_inst_D3),      \n\t\t.hps_io_usb1_inst_D4      (hps_io_usb1_inst_D4),      \n\t\t.hps_io_usb1_inst_D5      (hps_io_usb1_inst_D5),      \n\t\t.hps_io_usb1_inst_D6      (hps_io_usb1_inst_D6),      \n\t\t.hps_io_usb1_inst_D7      (hps_io_usb1_inst_D7),      \n\t\t.hps_io_usb1_inst_CLK     (hps_io_usb1_inst_CLK),     \n\t\t.hps_io_usb1_inst_STP     (hps_io_usb1_inst_STP),     \n\t\t.hps_io_usb1_inst_DIR     (hps_io_usb1_inst_DIR),     \n\t\t.hps_io_usb1_inst_NXT     (hps_io_usb1_inst_NXT),     \n\t\t.hps_io_spim1_inst_CLK    (hps_io_spim1_inst_CLK),    \n\t\t.hps_io_spim1_inst_MOSI   (hps_io_spim1_inst_MOSI),   \n\t\t.hps_io_spim1_inst_MISO   (hps_io_spim1_inst_MISO),   \n\t\t.hps_io_spim1_inst_SS0    (hps_io_spim1_inst_SS0),    \n\t\t.hps_io_uart0_inst_RX     (hps_io_uart0_inst_RX),     \n\t\t.hps_io_uart0_inst_TX     (hps_io_uart0_inst_TX),     \n\t\t.hps_io_i2c0_inst_SDA     (hps_io_i2c0_inst_SDA),     \n\t\t.hps_io_i2c0_inst_SCL     (hps_io_i2c0_inst_SCL),     \n\t\t.hps_io_i2c1_inst_SDA     (hps_io_i2c1_inst_SDA),     \n\t\t.hps_io_i2c1_inst_SCL     (hps_io_i2c1_inst_SCL),     \n\t\t.hps_io_gpio_inst_GPIO09  (hps_io_gpio_inst_GPIO09),  \n\t\t.hps_io_gpio_inst_GPIO35  (hps_io_gpio_inst_GPIO35),  \n\t\t.hps_io_gpio_inst_GPIO40  (hps_io_gpio_inst_GPIO40),  \n\t\t.hps_io_gpio_inst_GPIO41  (hps_io_gpio_inst_GPIO41),  \n\t\t.hps_io_gpio_inst_GPIO48  (hps_io_gpio_inst_GPIO48),  \n\t\t.hps_io_gpio_inst_GPIO53  (hps_io_gpio_inst_GPIO53),  \n\t\t.hps_io_gpio_inst_GPIO54  (hps_io_gpio_inst_GPIO54),  \n\t\t.hps_io_gpio_inst_GPIO61  (hps_io_gpio_inst_GPIO61)   \n\t);\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: soc_system_hps_0. Module specification: The soc_system_hps_0 module serves as an interface bridge between a Hard Processor System (HPS) and FPGA fabric, facilitating communication and control functions. It handles a wide array of input and output signals related to reset controls, AXI interface transactions, IRQ inputs, memory controller interfaces, and various peripheral interfaces (EMAC, QSPI, SDIO, USB, SPI, UART, I2C, and GPIOs). The module has numerous input and output ports for these functions, including clock inputs, AXI interface signals, memory signals, and peripheral I/O signals. While there are no explicitly declared internal signals, the module instantiates two sub-modules: soc_system_hps_0_fpga_interfaces and soc_system_hps_0_hps_io"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: soc_system_hps_0.\n\nExplanation: The module `soc_system_hps_0` acts as an interface bridge between a Hard Processor System (HPS) and FPGA fabric, facilitating communication and control functions. It handles a wide array of input and output signals related to different functionalities such as reset controls, AXI interface transactions for read and write operations, IRQ inputs, memory controller interfaces, and additional peripheral interfaces for communication and storage like EMAC (Ethernet MAC), QSPI, SDIO, USB, SPI, UART, I2C, and GPIOs. The module thus enables integration and interaction of the HPS with additional custom/logic functionality implemented in the FPGA, notably checking and ensuring correct instantiation through parameter checks."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nf2h_cold_rst_req_n, f2h_dbg_rst_req_n, f2h_warm_rst_req_n, f2h_stm_hwevents, f2h_axi_clk, f2h_AWID, f2h_AWADDR, f2h_AWLEN, f2h_AWSIZE, f2h_AWBURST, f2h_AWLOCK, f2h_AWCACHE, f2h_AWPROT, f2h_AWVALID, f2h_AWUSER, f2h_WID, f2h_WDATA, f2h_WSTRB, f2h_WLAST, f2h_WVALID, f2h_BREADY, f2h_ARID, f2h_ARADDR, f2h_ARLEN, f2h_ARSIZE, f2h_ARBURST, f2h_ARLOCK, f2h_ARCACHE, f2h_ARPROT, f2h_ARVALID, f2h_ARUSER, f2h_RREADY, h2f_lw_axi_clk, h2f_lw_AWREADY, h2f_lw_WREADY, h2f_lw_BID, h2f_lw_BRESP, h2f_lw_BVALID, h2f_lw_ARREADY, h2f_lw_RID, h2f_lw_RDATA, h2f_lw_RRESP, h2f_lw_RLAST, h2f_lw_RVALID, h2f_axi_clk, h2f_AWREADY, h2f_WREADY, h2f_BID, h2f_BRESP, h2f_BVALID, h2f_ARREADY, h2f_RID, h2f_RDATA, h2f_RRESP, h2f_RLAST, h2f_RVALID, f2h_irq_p0, f2h_irq_p1, oct_rzqin, hps_io_emac1_inst_RXD0, hps_io_emac1_inst_RX_CTL, hps_io_emac1_inst_RX_CLK, hps_io_emac1_inst_RXD1, hps_io_emac1_inst_RXD2, hps_io_emac1_inst_RXD3, hps_io_usb1_inst_CLK, hps_io_usb1_inst_DIR, hps_io_usb1_inst_NXT, hps_io_spim1_inst_MISO, hps_io_uart0_inst_RX.\n\nExplanation: These ports are used for various input signals including reset requests, AXI interface inputs, clock inputs, interrupt requests, and I/O signals for different peripherals like EMAC, USB, SPI, and UART.\n\nOutput ports:\nh2f_rst_n, f2h_AWREADY, f2h_WREADY, f2h_BID, f2h_BRESP, f2h_BVALID, f2h_ARREADY, f2h_RID, f2h_RDATA, f2h_RRESP, f2h_RLAST, f2h_RVALID, h2f_lw_AWID, h2f_lw_AWADDR, h2f_lw_AWLEN, h2f_lw_AWSIZE, h2f_lw_AWBURST, h2f_lw_AWLOCK, h2f_lw_AWCACHE, h2f_lw_AWPROT, h2f_lw_AWVALID, h2f_lw_WID, h2f_lw_WDATA, h2f_lw_WSTRB, h2f_lw_WLAST, h2f_lw_WVALID, h2f_lw_BREADY, h2f_lw_ARID, h2f_lw_ARADDR, h2f_lw_ARLEN, h2f_lw_ARSIZE, h2f_lw_ARBURST, h2f_lw_ARLOCK, h2f_lw_ARCACHE, h2f_lw_ARPROT, h2f_lw_ARVALID, h2f_lw_RREADY, h2f_AWID, h2f_AWADDR, h2f_AWLEN, h2f_AWSIZE, h2f_AWBURST, h2f_AWLOCK, h2f_AWCACHE, h2f_AWPROT, h2f_AWVALID, h2f_WID, h2f_WDATA, h2f_WSTRB, h2f_WLAST, h2f_WVALID, h2f_BREADY, h2f_ARID, h2f_ARADDR, h2f_ARLEN, h2f_ARSIZE, h2f_ARBURST, h2f_ARLOCK, h2f_ARCACHE, h2f_ARPROT, h2f_ARVALID, h2f_RREADY, mem_a, mem_ba, mem_ck, mem_ck_n, mem_cke, mem_cs_n, mem_ras_n, mem_cas_n, mem_we_n, mem_reset_n, mem_odt, mem_dm, hps_io_emac1_inst_TX_CLK, hps_io_emac1_inst_TXD0, hps_io_emac1_inst_TXD1, hps_io_emac1_inst_TXD2, hps_io_emac1_inst_TXD3, hps_io_emac1_inst_MDC, hps_io_emac1_inst_TX_CTL, hps_io_qspi_inst_SS0, hps_io_qspi_inst_CLK, hps_io_sdio_inst_CLK, hps_io_usb1_inst_STP, hps_io_spim1_inst_CLK, hps_io_spim1_inst_MOSI, hps_io_spim1_inst_SS0, hps_io_uart0_inst_TX.\n\nExplanation: These ports are used for various output signals including reset, AXI interface outputs, memory controller signals, and I/O signals for different peripherals like EMAC, QSPI, SDIO, USB, SPI, and UART."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the provided code, I don't see any explicitly declared internal signals within the module soc_system_hps_0. The module primarily consists of input and output ports, parameter declarations, and instantiations of two sub-modules: soc_system_hps_0_fpga_interfaces and soc_system_hps_0_hps_io.\n\nInternal signals: None explicitly declared.\n\nExplanation: The module soc_system_hps_0 appears to be a top-level wrapper that connects external ports to two internal sub-modules. It doesn't define any additional internal signals beyond its input and output ports. The actual signal processing and internal logic likely occur within the instantiated sub-modules soc_system_hps_0_fpga_interfaces and soc_system_hps_0_hps_io.\n\nThe module does include a generate block for parameter checking, but this doesn't introduce any functional internal signals - it's used for design-time error checking of the module parameters F2S_Width and S2F_Width."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n`timescale 1 ps / 1 ps\nmodule soc_system_hps_0 #(\n\t\tparameter F2S_Width = 2,\n\t\tparameter S2F_Width = 2\n\t) (\n\t\toutput wire        h2f_rst_n,                \n\t\tinput  wire        f2h_cold_rst_req_n,       \n\t\tinput  wire        f2h_dbg_rst_req_n,        \n\t\tinput  wire        f2h_warm_rst_req_n,       \n\t\tinput  wire [27:0] f2h_stm_hwevents,         \n\t\tinput  wire        f2h_axi_clk,              \n\t\tinput  wire [7:0]  f2h_AWID,                 \n\t\tinput  wire [31:0] f2h_AWADDR,               \n\t\tinput  wire [3:0]  f2h_AWLEN,                \n\t\tinput  wire [2:0]  f2h_AWSIZE,               \n\t\tinput  wire [1:0]  f2h_AWBURST,              \n\t\tinput  wire [1:0]  f2h_AWLOCK,               \n\t\tinput  wire [3:0]  f2h_AWCACHE,              \n\t\tinput  wire [2:0]  f2h_AWPROT,               \n\t\tinput  wire        f2h_AWVALID,              \n\t\toutput wire        f2h_AWREADY,              \n\t\tinput  wire [4:0]  f2h_AWUSER,               \n\t\tinput  wire [7:0]  f2h_WID,                  \n\t\tinput  wire [63:0] f2h_WDATA,                \n\t\tinput  wire [7:0]  f2h_WSTRB,                \n\t\tinput  wire        f2h_WLAST,                \n\t\tinput  wire        f2h_WVALID,               \n\t\toutput wire        f2h_WREADY,               \n\t\toutput wire [7:0]  f2h_BID,                  \n\t\toutput wire [1:0]  f2h_BRESP,                \n\t\toutput wire        f2h_BVALID,               \n\t\tinput  wire        f2h_BREADY,               \n\t\tinput  wire [7:0]  f2h_ARID,                 \n\t\tinput  wire [31:0] f2h_ARADDR,               \n\t\tinput  wire [3:0]  f2h_ARLEN,                \n\t\tinput  wire [2:0]  f2h_ARSIZE,               \n\t\tinput  wire [1:0]  f2h_ARBURST,              \n\t\tinput  wire [1:0]  f2h_ARLOCK,               \n\t\tinput  wire [3:0]  f2h_ARCACHE,              \n\t\tinput  wire [2:0]  f2h_ARPROT,               \n\t\tinput  wire        f2h_ARVALID,              \n\t\toutput wire        f2h_ARREADY,              \n\t\tinput  wire [4:0]  f2h_ARUSER,               \n\t\toutput wire [7:0]  f2h_RID,                  \n\t\toutput wire [63:0] f2h_RDATA,                \n\t\toutput wire [1:0]  f2h_RRESP,                \n\t\toutput wire        f2h_RLAST,                \n\t\toutput wire        f2h_RVALID,               \n\t\tinput  wire        f2h_RREADY,               \n\t\tinput  wire        h2f_lw_axi_clk,           \n\t\toutput wire [11:0] h2f_lw_AWID,              \n\t\toutput wire [20:0] h2f_lw_AWADDR,            \n\t\toutput wire [3:0]  h2f_lw_AWLEN,             \n\t\toutput wire [2:0]  h2f_lw_AWSIZE,            \n\t\toutput wire [1:0]  h2f_lw_AWBURST,           \n\t\toutput wire [1:0]  h2f_lw_AWLOCK,            \n\t\toutput wire [3:0]  h2f_lw_AWCACHE,           \n\t\toutput wire [2:0]  h2f_lw_AWPROT,            \n\t\toutput wire        h2f_lw_AWVALID,           \n\t\tinput  wire        h2f_lw_AWREADY,           \n\t\toutput wire [11:0] h2f_lw_WID,               \n\t\toutput wire [31:0] h2f_lw_WDATA,             \n\t\toutput wire [3:0]  h2f_lw_WSTRB,             \n\t\toutput wire        h2f_lw_WLAST,             \n\t\toutput wire        h2f_lw_WVALID,            \n\t\tinput  wire        h2f_lw_WREADY,            \n\t\tinput  wire [11:0] h2f_lw_BID,               \n\t\tinput  wire [1:0]  h2f_lw_BRESP,             \n\t\tinput  wire        h2f_lw_BVALID,            \n\t\toutput wire        h2f_lw_BREADY,            \n\t\toutput wire [11:0] h2f_lw_ARID,              \n\t\toutput wire [20:0] h2f_lw_ARADDR,            \n\t\toutput wire [3:0]  h2f_lw_ARLEN,             \n\t\toutput wire [2:0]  h2f_lw_ARSIZE,            \n\t\toutput wire [1:0]  h2f_lw_ARBURST,           \n\t\toutput wire [1:0]  h2f_lw_ARLOCK,            \n\t\toutput wire [3:0]  h2f_lw_ARCACHE,           \n\t\toutput wire [2:0]  h2f_lw_ARPROT,            \n\t\toutput wire        h2f_lw_ARVALID,           \n\t\tinput  wire        h2f_lw_ARREADY,           \n\t\tinput  wire [11:0] h2f_lw_RID,               \n\t\tinput  wire [31:0] h2f_lw_RDATA,             \n\t\tinput  wire [1:0]  h2f_lw_RRESP,             \n\t\tinput  wire        h2f_lw_RLAST,             \n\t\tinput  wire        h2f_lw_RVALID,            \n\t\toutput wire        h2f_lw_RREADY,            \n\t\tinput  wire        h2f_axi_clk,              \n\t\toutput wire [11:0] h2f_AWID,                 \n\t\toutput wire [29:0] h2f_AWADDR,               \n\t\toutput wire [3:0]  h2f_AWLEN,                \n\t\toutput wire [2:0]  h2f_AWSIZE,               \n\t\toutput wire [1:0]  h2f_AWBURST,              \n\t\toutput wire [1:0]  h2f_AWLOCK,               \n\t\toutput wire [3:0]  h2f_AWCACHE,              \n\t\toutput wire [2:0]  h2f_AWPROT,               \n\t\toutput wire        h2f_AWVALID,              \n\t\tinput  wire        h2f_AWREADY,              \n\t\toutput wire [11:0] h2f_WID,                  \n\t\toutput wire [63:0] h2f_WDATA,                \n\t\toutput wire [7:0]  h2f_WSTRB,                \n\t\toutput wire        h2f_WLAST,                \n\t\toutput wire        h2f_WVALID,               \n\t\tinput  wire        h2f_WREADY,               \n\t\tinput  wire [11:0] h2f_BID,                  \n\t\tinput  wire [1:0]  h2f_BRESP,                \n\t\tinput  wire        h2f_BVALID,               \n\t\toutput wire        h2f_BREADY,               \n\t\toutput wire [11:0] h2f_ARID,                 \n\t\toutput wire [29:0] h2f_ARADDR,               \n\t\toutput wire [3:0]  h2f_ARLEN,                \n\t\toutput wire [2:0]  h2f_ARSIZE,               \n\t\toutput wire [1:0]  h2f_ARBURST,              \n\t\toutput wire [1:0]  h2f_ARLOCK,               \n\t\toutput wire [3:0]  h2f_ARCACHE,              \n\t\toutput wire [2:0]  h2f_ARPROT,               \n\t\toutput wire        h2f_ARVALID,              \n\t\tinput  wire        h2f_ARREADY,              \n\t\tinput  wire [11:0] h2f_RID,                  \n\t\tinput  wire [63:0] h2f_RDATA,                \n\t\tinput  wire [1:0]  h2f_RRESP,                \n\t\tinput  wire        h2f_RLAST,                \n\t\tinput  wire        h2f_RVALID,               \n\t\toutput wire        h2f_RREADY,               \n\t\tinput  wire [31:0] f2h_irq_p0,               \n\t\tinput  wire [31:0] f2h_irq_p1,               \n\t\toutput wire [14:0] mem_a,                    \n\t\toutput wire [2:0]  mem_ba,                   \n\t\toutput wire        mem_ck,                   \n\t\toutput wire        mem_ck_n,                 \n\t\toutput wire        mem_cke,                  \n\t\toutput wire        mem_cs_n,                 \n\t\toutput wire        mem_ras_n,                \n\t\toutput wire        mem_cas_n,                \n\t\toutput wire        mem_we_n,                 \n\t\toutput wire        mem_reset_n,              \n\t\tinout  wire [31:0] mem_dq,                   \n\t\tinout  wire [3:0]  mem_dqs,                  \n\t\tinout  wire [3:0]  mem_dqs_n,                \n\t\toutput wire        mem_odt,                  \n\t\toutput wire [3:0]  mem_dm,                   \n\t\tinput  wire        oct_rzqin,                \n\t\toutput wire        hps_io_emac1_inst_TX_CLK, \n\t\toutput wire        hps_io_emac1_inst_TXD0,   \n\t\toutput wire        hps_io_emac1_inst_TXD1,   \n\t\toutput wire        hps_io_emac1_inst_TXD2,   \n\t\toutput wire        hps_io_emac1_inst_TXD3,   \n\t\tinput  wire        hps_io_emac1_inst_RXD0,   \n\t\tinout  wire        hps_io_emac1_inst_MDIO,   \n\t\toutput wire        hps_io_emac1_inst_MDC,    \n\t\tinput  wire        hps_io_emac1_inst_RX_CTL, \n\t\toutput wire        hps_io_emac1_inst_TX_CTL, \n\t\tinput  wire        hps_io_emac1_inst_RX_CLK, \n\t\tinput  wire        hps_io_emac1_inst_RXD1,   \n\t\tinput  wire        hps_io_emac1_inst_RXD2,   \n\t\tinput  wire        hps_io_emac1_inst_RXD3,   \n\t\tinout  wire        hps_io_qspi_inst_IO0,     \n\t\tinout  wire        hps_io_qspi_inst_IO1,     \n\t\tinout  wire        hps_io_qspi_inst_IO2,     \n\t\tinout  wire        hps_io_qspi_inst_IO3,     \n\t\toutput wire        hps_io_qspi_inst_SS0,     \n\t\toutput wire        hps_io_qspi_inst_CLK,     \n\t\tinout  wire        hps_io_sdio_inst_CMD,     \n\t\tinout  wire        hps_io_sdio_inst_D0,      \n\t\tinout  wire        hps_io_sdio_inst_D1,      \n\t\toutput wire        hps_io_sdio_inst_CLK,     \n\t\tinout  wire        hps_io_sdio_inst_D2,      \n\t\tinout  wire        hps_io_sdio_inst_D3,      \n\t\tinout  wire        hps_io_usb1_inst_D0,      \n\t\tinout  wire        hps_io_usb1_inst_D1,      \n\t\tinout  wire        hps_io_usb1_inst_D2,      \n\t\tinout  wire        hps_io_usb1_inst_D3,      \n\t\tinout  wire        hps_io_usb1_inst_D4,      \n\t\tinout  wire        hps_io_usb1_inst_D5,      \n\t\tinout  wire        hps_io_usb1_inst_D6,      \n\t\tinout  wire        hps_io_usb1_inst_D7,      \n\t\tinput  wire        hps_io_usb1_inst_CLK,     \n\t\toutput wire        hps_io_usb1_inst_STP,     \n\t\tinput  wire        hps_io_usb1_inst_DIR,     \n\t\tinput  wire        hps_io_usb1_inst_NXT,     \n\t\toutput wire        hps_io_spim1_inst_CLK,    \n\t\toutput wire        hps_io_spim1_inst_MOSI,   \n\t\tinput  wire        hps_io_spim1_inst_MISO,   \n\t\toutput wire        hps_io_spim1_inst_SS0,    \n\t\tinput  wire        hps_io_uart0_inst_RX,     \n\t\toutput wire        hps_io_uart0_inst_TX,     \n\t\tinout  wire        hps_io_i2c0_inst_SDA,     \n\t\tinout  wire        hps_io_i2c0_inst_SCL,     \n\t\tinout  wire        hps_io_i2c1_inst_SDA,     \n\t\tinout  wire        hps_io_i2c1_inst_SCL,     \n\t\tinout  wire        hps_io_gpio_inst_GPIO09,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO35,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO40,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO41,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO48,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO53,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO54,  \n\t\tinout  wire        hps_io_gpio_inst_GPIO61   \n\t);\n\n\tgenerate\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tif (F2S_Width != 2)\n\t\tbegin\n\t\t\tinitial begin\n\t\t\t\t$display(\"Generated module instantiated with wrong parameters\");\n\t\t\t\t$stop;\n\t\t\tend\n\t\t\tinstantiated_with_wrong_parameters_error_see_comment_above\n\t\t\t\t\tf2s_width_check ( .error(1'b1) );\n\t\tend\n\t\tif (S2F_Width != 2)\n\t\tbegin\n\t\t\tinitial begin\n\t\t\t\t$display(\"Generated module instantiated with wrong parameters\");\n\t\t\t\t$stop;\n\t\t\tend\n\t\t\tinstantiated_with_wrong_parameters_error_see_comment_above\n\t\t\t\t\ts2f_width_check ( .error(1'b1) );\n\t\tend\n\tendgenerate\n\n\tsoc_system_hps_0_fpga_interfaces fpga_interfaces (\n\t\t.h2f_rst_n          (h2f_rst_n),          \n\t\t.f2h_cold_rst_req_n (f2h_cold_rst_req_n), \n\t\t.f2h_dbg_rst_req_n  (f2h_dbg_rst_req_n),  \n\t\t.f2h_warm_rst_req_n (f2h_warm_rst_req_n), \n\t\t.f2h_stm_hwevents   (f2h_stm_hwevents),   \n\t\t.f2h_axi_clk        (f2h_axi_clk),        \n\t\t.f2h_AWID           (f2h_AWID),           \n\t\t.f2h_AWADDR         (f2h_AWADDR),         \n\t\t.f2h_AWLEN          (f2h_AWLEN),          \n\t\t.f2h_AWSIZE         (f2h_AWSIZE),         \n\t\t.f2h_AWBURST        (f2h_AWBURST),        \n\t\t.f2h_AWLOCK         (f2h_AWLOCK),         \n\t\t.f2h_AWCACHE        (f2h_AWCACHE),        \n\t\t.f2h_AWPROT         (f2h_AWPROT),         \n\t\t.f2h_AWVALID        (f2h_AWVALID),        \n\t\t.f2h_AWREADY        (f2h_AWREADY),        \n\t\t.f2h_AWUSER         (f2h_AWUSER),         \n\t\t.f2h_WID            (f2h_WID),            \n\t\t.f2h_WDATA          (f2h_WDATA),          \n\t\t.f2h_WSTRB          (f2h_WSTRB),          \n\t\t.f2h_WLAST          (f2h_WLAST),          \n\t\t.f2h_WVALID         (f2h_WVALID),         \n\t\t.f2h_WREADY         (f2h_WREADY),         \n\t\t.f2h_BID            (f2h_BID),            \n\t\t.f2h_BRESP          (f2h_BRESP),          \n\t\t.f2h_BVALID         (f2h_BVALID),         \n\t\t.f2h_BREADY         (f2h_BREADY),         \n\t\t.f2h_ARID           (f2h_ARID),           \n\t\t.f2h_ARADDR         (f2h_ARADDR),         \n\t\t.f2h_ARLEN          (f2h_ARLEN),          \n\t\t.f2h_ARSIZE         (f2h_ARSIZE),         \n\t\t.f2h_ARBURST        (f2h_ARBURST),        \n\t\t.f2h_ARLOCK         (f2h_ARLOCK),         \n\t\t.f2h_ARCACHE        (f2h_ARCACHE),        \n\t\t.f2h_ARPROT         (f2h_ARPROT),         \n\t\t.f2h_ARVALID        (f2h_ARVALID),        \n\t\t.f2h_ARREADY        (f2h_ARREADY),        \n\t\t.f2h_ARUSER         (f2h_ARUSER),         \n\t\t.f2h_RID            (f2h_RID),            \n\t\t.f2h_RDATA          (f2h_RDATA),          \n\t\t.f2h_RRESP          (f2h_RRESP),          \n\t\t.f2h_RLAST          (f2h_RLAST),          \n\t\t.f2h_RVALID         (f2h_RVALID),         \n\t\t.f2h_RREADY         (f2h_RREADY),         \n\t\t.h2f_lw_axi_clk     (h2f_lw_axi_clk),     \n\t\t.h2f_lw_AWID        (h2f_lw_AWID),        \n\t\t.h2f_lw_AWADDR      (h2f_lw_AWADDR),      \n\t\t.h2f_lw_AWLEN       (h2f_lw_AWLEN),       \n\t\t.h2f_lw_AWSIZE      (h2f_lw_AWSIZE),      \n\t\t.h2f_lw_AWBURST     (h2f_lw_AWBURST),     \n\t\t.h2f_lw_AWLOCK      (h2f_lw_AWLOCK),      \n\t\t.h2f_lw_AWCACHE     (h2f_lw_AWCACHE),     \n\t\t.h2f_lw_AWPROT      (h2f_lw_AWPROT),      \n\t\t.h2f_lw_AWVALID     (h2f_lw_AWVALID),     \n\t\t.h2f_lw_AWREADY     (h2f_lw_AWREADY),     \n\t\t.h2f_lw_WID         (h2f_lw_WID),         \n\t\t.h2f_lw_WDATA       (h2f_lw_WDATA),       \n\t\t.h2f_lw_WSTRB       (h2f_lw_WSTRB),       \n\t\t.h2f_lw_WLAST       (h2f_lw_WLAST),       \n\t\t.h2f_lw_WVALID      (h2f_lw_WVALID),      \n\t\t.h2f_lw_WREADY      (h2f_lw_WREADY),      \n\t\t.h2f_lw_BID         (h2f_lw_BID),         \n\t\t.h2f_lw_BRESP       (h2f_lw_BRESP),       \n\t\t.h2f_lw_BVALID      (h2f_lw_BVALID),      \n\t\t.h2f_lw_BREADY      (h2f_lw_BREADY),      \n\t\t.h2f_lw_ARID        (h2f_lw_ARID),        \n\t\t.h2f_lw_ARADDR      (h2f_lw_ARADDR),      \n\t\t.h2f_lw_ARLEN       (h2f_lw_ARLEN),       \n\t\t.h2f_lw_ARSIZE      (h2f_lw_ARSIZE),      \n\t\t.h2f_lw_ARBURST     (h2f_lw_ARBURST),     \n\t\t.h2f_lw_ARLOCK      (h2f_lw_ARLOCK),      \n\t\t.h2f_lw_ARCACHE     (h2f_lw_ARCACHE),     \n\t\t.h2f_lw_ARPROT      (h2f_lw_ARPROT),      \n\t\t.h2f_lw_ARVALID     (h2f_lw_ARVALID),     \n\t\t.h2f_lw_ARREADY     (h2f_lw_ARREADY),     \n\t\t.h2f_lw_RID         (h2f_lw_RID),         \n\t\t.h2f_lw_RDATA       (h2f_lw_RDATA),       \n\t\t.h2f_lw_RRESP       (h2f_lw_RRESP),       \n\t\t.h2f_lw_RLAST       (h2f_lw_RLAST),       \n\t\t.h2f_lw_RVALID      (h2f_lw_RVALID),      \n\t\t.h2f_lw_RREADY      (h2f_lw_RREADY),      \n\t\t.h2f_axi_clk        (h2f_axi_clk),        \n\t\t.h2f_AWID           (h2f_AWID),           \n\t\t.h2f_AWADDR         (h2f_AWADDR),         \n\t\t.h2f_AWLEN          (h2f_AWLEN),          \n\t\t.h2f_AWSIZE         (h2f_AWSIZE),         \n\t\t.h2f_AWBURST        (h2f_AWBURST),        \n\t\t.h2f_AWLOCK         (h2f_AWLOCK),         \n\t\t.h2f_AWCACHE        (h2f_AWCACHE),        \n\t\t.h2f_AWPROT         (h2f_AWPROT),         \n\t\t.h2f_AWVALID        (h2f_AWVALID),        \n\t\t.h2f_AWREADY        (h2f_AWREADY),        \n\t\t.h2f_WID            (h2f_WID),            \n\t\t.h2f_WDATA          (h2f_WDATA),          \n\t\t.h2f_WSTRB          (h2f_WSTRB),          \n\t\t.h2f_WLAST          (h2f_WLAST),          \n\t\t.h2f_WVALID         (h2f_WVALID),         \n\t\t.h2f_WREADY         (h2f_WREADY),         \n\t\t.h2f_BID            (h2f_BID),            \n\t\t.h2f_BRESP          (h2f_BRESP),          \n\t\t.h2f_BVALID         (h2f_BVALID),         \n\t\t.h2f_BREADY         (h2f_BREADY),         \n\t\t.h2f_ARID           (h2f_ARID),           \n\t\t.h2f_ARADDR         (h2f_ARADDR),         \n\t\t.h2f_ARLEN          (h2f_ARLEN),          \n\t\t.h2f_ARSIZE         (h2f_ARSIZE),         \n\t\t.h2f_ARBURST        (h2f_ARBURST),        \n\t\t.h2f_ARLOCK         (h2f_ARLOCK),         \n\t\t.h2f_ARCACHE        (h2f_ARCACHE),        \n\t\t.h2f_ARPROT         (h2f_ARPROT),         \n\t\t.h2f_ARVALID        (h2f_ARVALID),        \n\t\t.h2f_ARREADY        (h2f_ARREADY),        \n\t\t.h2f_RID            (h2f_RID),            \n\t\t.h2f_RDATA          (h2f_RDATA),          \n\t\t.h2f_RRESP          (h2f_RRESP),          \n\t\t.h2f_RLAST          (h2f_RLAST),          \n\t\t.h2f_RVALID         (h2f_RVALID),         \n\t\t.h2f_RREADY         (h2f_RREADY),         \n\t\t.f2h_irq_p0         (f2h_irq_p0),         \n\t\t.f2h_irq_p1         (f2h_irq_p1)          \n\t);\n\n\tsoc_system_hps_0_hps_io hps_io (\n\t\t.mem_a                    (mem_a),                    \n\t\t.mem_ba                   (mem_ba),                   \n\t\t.mem_ck                   (mem_ck),                   \n\t\t.mem_ck_n                 (mem_ck_n),                 \n\t\t.mem_cke                  (mem_cke),                  \n\t\t.mem_cs_n                 (mem_cs_n),                 \n\t\t.mem_ras_n                (mem_ras_n),                \n\t\t.mem_cas_n                (mem_cas_n),                \n\t\t.mem_we_n                 (mem_we_n),                 \n\t\t.mem_reset_n              (mem_reset_n),              \n\t\t.mem_dq                   (mem_dq),                   \n\t\t.mem_dqs                  (mem_dqs),                  \n\t\t.mem_dqs_n                (mem_dqs_n),                \n\t\t.mem_odt                  (mem_odt),                  \n\t\t.mem_dm                   (mem_dm),                   \n\t\t.oct_rzqin                (oct_rzqin),                \n\t\t.hps_io_emac1_inst_TX_CLK (hps_io_emac1_inst_TX_CLK), \n\t\t.hps_io_emac1_inst_TXD0   (hps_io_emac1_inst_TXD0),   \n\t\t.hps_io_emac1_inst_TXD1   (hps_io_emac1_inst_TXD1),   \n\t\t.hps_io_emac1_inst_TXD2   (hps_io_emac1_inst_TXD2),   \n\t\t.hps_io_emac1_inst_TXD3   (hps_io_emac1_inst_TXD3),   \n\t\t.hps_io_emac1_inst_RXD0   (hps_io_emac1_inst_RXD0),   \n\t\t.hps_io_emac1_inst_MDIO   (hps_io_emac1_inst_MDIO),   \n\t\t.hps_io_emac1_inst_MDC    (hps_io_emac1_inst_MDC),    \n\t\t.hps_io_emac1_inst_RX_CTL (hps_io_emac1_inst_RX_CTL), \n\t\t.hps_io_emac1_inst_TX_CTL (hps_io_emac1_inst_TX_CTL), \n\t\t.hps_io_emac1_inst_RX_CLK (hps_io_emac1_inst_RX_CLK), \n\t\t.hps_io_emac1_inst_RXD1   (hps_io_emac1_inst_RXD1),   \n\t\t.hps_io_emac1_inst_RXD2   (hps_io_emac1_inst_RXD2),   \n\t\t.hps_io_emac1_inst_RXD3   (hps_io_emac1_inst_RXD3),   \n\t\t.hps_io_qspi_inst_IO0     (hps_io_qspi_inst_IO0),     \n\t\t.hps_io_qspi_inst_IO1     (hps_io_qspi_inst_IO1),     \n\t\t.hps_io_qspi_inst_IO2     (hps_io_qspi_inst_IO2),     \n\t\t.hps_io_qspi_inst_IO3     (hps_io_qspi_inst_IO3),     \n\t\t.hps_io_qspi_inst_SS0     (hps_io_qspi_inst_SS0),     \n\t\t.hps_io_qspi_inst_CLK     (hps_io_qspi_inst_CLK),     \n\t\t.hps_io_sdio_inst_CMD     (hps_io_sdio_inst_CMD),     \n\t\t.hps_io_sdio_inst_D0      (hps_io_sdio_inst_D0),      \n\t\t.hps_io_sdio_inst_D1      (hps_io_sdio_inst_D1),      \n\t\t.hps_io_sdio_inst_CLK     (hps_io_sdio_inst_CLK),     \n\t\t.hps_io_sdio_inst_D2      (hps_io_sdio_inst_D2),      \n\t\t.hps_io_sdio_inst_D3      (hps_io_sdio_inst_D3),      \n\t\t.hps_io_usb1_inst_D0      (hps_io_usb1_inst_D0),      \n\t\t.hps_io_usb1_inst_D1      (hps_io_usb1_inst_D1),      \n\t\t.hps_io_usb1_inst_D2      (hps_io_usb1_inst_D2),      \n\t\t.hps_io_usb1_inst_D3      (hps_io_usb1_inst_D3),      \n\t\t.hps_io_usb1_inst_D4      (hps_io_usb1_inst_D4),      \n\t\t.hps_io_usb1_inst_D5      (hps_io_usb1_inst_D5),      \n\t\t.hps_io_usb1_inst_D6      (hps_io_usb1_inst_D6),      \n\t\t.hps_io_usb1_inst_D7      (hps_io_usb1_inst_D7),      \n\t\t.hps_io_usb1_inst_CLK     (hps_io_usb1_inst_CLK),     \n\t\t.hps_io_usb1_inst_STP     (hps_io_usb1_inst_STP),     \n\t\t.hps_io_usb1_inst_DIR     (hps_io_usb1_inst_DIR),     \n\t\t.hps_io_usb1_inst_NXT     (hps_io_usb1_inst_NXT),     \n\t\t.hps_io_spim1_inst_CLK    (hps_io_spim1_inst_CLK),    \n\t\t.hps_io_spim1_inst_MOSI   (hps_io_spim1_inst_MOSI),   \n\t\t.hps_io_spim1_inst_MISO   (hps_io_spim1_inst_MISO),   \n\t\t.hps_io_spim1_inst_SS0    (hps_io_spim1_inst_SS0),    \n\t\t.hps_io_uart0_inst_RX     (hps_io_uart0_inst_RX),     \n\t\t.hps_io_uart0_inst_TX     (hps_io_uart0_inst_TX),     \n\t\t.hps_io_i2c0_inst_SDA     (hps_io_i2c0_inst_SDA),     \n\t\t.hps_io_i2c0_inst_SCL     (hps_io_i2c0_inst_SCL),     \n\t\t.hps_io_i2c1_inst_SDA     (hps_io_i2c1_inst_SDA),     \n\t\t.hps_io_i2c1_inst_SCL     (hps_io_i2c1_inst_SCL),     \n\t\t.hps_io_gpio_inst_GPIO09  (hps_io_gpio_inst_GPIO09),  \n\t\t.hps_io_gpio_inst_GPIO35  (hps_io_gpio_inst_GPIO35),  \n\t\t.hps_io_gpio_inst_GPIO40  (hps_io_gpio_inst_GPIO40),  \n\t\t.hps_io_gpio_inst_GPIO41  (hps_io_gpio_inst_GPIO41),  \n\t\t.hps_io_gpio_inst_GPIO48  (hps_io_gpio_inst_GPIO48),  \n\t\t.hps_io_gpio_inst_GPIO53  (hps_io_gpio_inst_GPIO53),  \n\t\t.hps_io_gpio_inst_GPIO54  (hps_io_gpio_inst_GPIO54),  \n\t\t.hps_io_gpio_inst_GPIO61  (hps_io_gpio_inst_GPIO61)   \n\t);\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: soc_system_hps_0. Module specification: The soc_system_hps_0 module serves as an interface bridge between a Hard Processor System (HPS) and FPGA fabric, facilitating communication and control functions. It handles a wide array of input and output signals related to reset controls, AXI interface transactions, IRQ inputs, memory controller interfaces, and various peripheral interfaces (EMAC, QSPI, SDIO, USB, SPI, UART, I2C, and GPIOs). The module has numerous input and output ports for these functions, including clock inputs, AXI interface signals, memory signals, and peripheral I/O signals. While there are no explicitly declared internal signals, the module instantiates two sub-modules: soc_system_hps_0_fpga_interfaces and soc_system_hps_0_hps_io"
                }
            ]
        }
    ]
}