Module name: intr_capturer. Module specification: The "intr_capturer" module is designed to capture and manage interrupts in a system with configurable interrupt lines, support for handling interrupts in both upper and lower ranges, and read operations following a wait state. It operates with a clock input (`clk`) for synchronizing the internal operations, an active-low reset signal (`rst_n`) for clearing interrupt captures, and an interrupt input vector (`interrupt_in`) whose width is determined by `NUM_INTR`. Additionally, it has an address (`addr`) and read enable (`read`) input controlling the read operations for interrupt data captured. The output consists of a 32-bit data bus (`rddata`) delivering stored interrupt data. Internally, the module utilizes a register (`interrupt_reg`) to store the current states of the interrupts, and a register (`readdata_with_waitstate`) that introduces a delay between data processing and presentation at the output. There are several conditional-handling wires: `readdata_lower_intr` and `readdata_higher_intr` for separating lower and potentially higher interrupt data based on `NUM_INTR`; `access_lower_32` and `access_higher_32` make decisions based on the address and current `read` command. The logic is structured into clock-driven blocks for capturing interrupt inputs and managing output data readiness, with additional conditionally compiled blocks for handling configurations where the number of interrupts exceeds 32. This design ensures that the module can adapt to both smaller and larger numbers of interrupts seamlessly.