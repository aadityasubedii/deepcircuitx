{
    "spec": "Module name: `altera_reset_controller`.\n\nModule specification: The `altera_reset_controller` is a crucial Verilog module designed to manage and synchronize reset signals in digital circuits. It accepts multiple reset (`reset_inX`) and reset request (`reset_req_inX`) inputs, where X ranges from 0 to 15, reflecting various reset conditions across different modules or systems. The primary output ports include `reset_out` for the synchronized reset signal and `reset_req` for the synchronized reset request signal, catering to system-wide reset needs and synchronization requirements. Internally, signals like `merged_reset`, which consolidates input resets using a logical OR operation, and `merged_reset_req_in`, which combines reset request inputs based on parameter settings, play key roles in the module's function. The module utilizes various internal blocks for the synchronization and management of reset signals. These include a general condition synchronization and a specialized block for managing more complex reset requirements, such as when extended synchronization or specific timing considerations are involved. The synchronization mechanism leverages parameters such as `SYNC_DEPTH` to achieve stability against issues like metastability by configuring synchronization depths and reset timings precisely. Overall, the `altera_reset_controller` provides a robust and configurable solution for handling resets in complex digital systems, ensuring reliable operation and interoperability of various system components.",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: altera_reset_controller.\n\nExplanation: The `altera_reset_controller` module is designed to manage reset signals in digital circuits. It takes multiple reset and reset request inputs, processes them based on configuration parameters, and outputs a synchronized reset signal (`reset_out`) and a reset request signal (`reset_req`). The behavior of the module can be customized with parameters such as the number of reset inputs, synchronization depth, minimum reset assertion time, and whether to use reset requests for each input. A synchronizer mechanism is utilized to ensure that the reset signals are stable and free from metastability issues, especially when crossing different clock domains or when dealing with asynchronous reset signals. The module also considers adjustable timing configurations like wait times before deassertion, and it uses conditional generation (`generate ... endgenerate`) to adapt its internal structure according to parameter settings, providing tailored functionality for specific application needs."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports: [reset_in0, reset_in1, reset_in2, reset_in3, reset_in4, reset_in5, reset_in6, reset_in7, reset_in8, reset_in9, reset_in10, reset_in11, reset_in12, reset_in13, reset_in14, reset_in15, reset_req_in0, reset_req_in1, reset_req_in2, reset_req_in3, reset_req_in4, reset_req_in5, reset_req_in6, reset_req_in7, reset_req_in8, reset_req_in9, reset_req_in10, reset_req_in11, reset_req_in12, reset_req_in13, reset_req_in14, reset_req_in15, clk]. Explanation: The `reset_inX` inputs (where X ranges from 0 to 15) are used to input various reset signals into the module, which are then merged and synchronized to generate a single output reset signal. The `reset_req_inX` inputs (also ranging from 0 to 15) serve similar purposes but for reset request signals, which can influence the output reset request signal based on configured parameters. The `clk` input is the clock signal used for synchronizing the reset signals to the target clock domain, preventing potential issues such as metastability.\n\nOutput ports: [reset_out, reset_req]. Explanation: The `reset_out` port outputs the synchronized and possibly delayed reset signal based on input resets and configuration parameters, ensuring that the reset is asserted for a sufficient duration and is stable. The `reset_req` port outputs a synchronized reset request signal which might be used for signaling other components in the system that a reset was requested, facilitating orderly resets across multiple system components."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nInternal signals: [merged_reset, merged_reset_req_in, reset_out_pre, reset_req_pre, altera_reset_synchronizer_int_chain, r_sync_rst_chain, r_sync_rst, r_early_rst].\n\nExplanation:\n\n1. **merged_reset**: This signal consolidates all reset input signals (reset_in0 to reset_in15) into a single line. Logical OR operation is applied across all reset inputs signals, combining them into `merged_reset`, which is then used for further synchronization.\n\n2. **merged_reset_req_in**: Similar to `merged_reset`, this signal aggregates all reset request input signals (reset_req_in0 to reset_req_in15) based on their usage configuration (USE_RESET_REQUEST_INX parameters). This merged signal influences the `reset_req` output, after passing through synchronization stages.\n\n3. **reset_out_pre** and **reset_req_pre**: These intermediate signals hold the values of the reset and reset requests after they have been processed through initial synchronization stages (`altera_reset_synchronizer_uq1` and `altera_reset_synchronizer_uq2` for reset and reset requests respectively), but before they are processed through additional logic or the final output assignment.\n\n4. **altera_reset_synchronizer_int_chain**: A shift register array used in deeper synchronization stages. It maintains the synchronization depth defined by RSTREQ_ASRT_SYNC_TAP and helps in stabilizing the reset signal to combat metastability by delaying it according to the system's synchronization needs.\n\n5. **r_sync_rst_chain**: A shift register that further delays the reset signal based on MAX_RST_ASSERTION or calculated lengths, extending the reset signal duration to meet certain timing requirements and ensuring a stable, glitch-free output.\n\n6. **r_sync_rst**: This signal is a part of control logic together with `altera_reset_synchronizer_int_chain` and `r_sync_rst_chain`, determining the final reset state to be output based on conditions evaluated in a case statement. It effectively decides whether the output reset should be asserted or deasserted.\n\n7. **r_early_rst**: This signal handles the early reset conditions based on `r_sync_rst_chain` and is pivotal in the logic deciding the final state of the reset request output (`reset_req`). It uses boolean conditions to ascertain whether the reset request output should react instantaneously or be delayed.\n\nThese internal signals provide crucial stages of synchronization and conditional logic necessary to ensure that the reset outputs are robust, stable, and adherent to the module's parameter configurations, thereby fulfilling the role of a comprehensive reset management system in digital circuits."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1 ns / 1 ns\n\nmodule altera_reset_controller\n#(\n    parameter NUM_RESET_INPUTS              = 6,\n    parameter USE_RESET_REQUEST_IN0 = 0,\n    parameter USE_RESET_REQUEST_IN1 = 0,\n    parameter USE_RESET_REQUEST_IN2 = 0,\n    parameter USE_RESET_REQUEST_IN3 = 0,\n    parameter USE_RESET_REQUEST_IN4 = 0,\n    parameter USE_RESET_REQUEST_IN5 = 0,\n    parameter USE_RESET_REQUEST_IN6 = 0,\n    parameter USE_RESET_REQUEST_IN7 = 0,\n    parameter USE_RESET_REQUEST_IN8 = 0,\n    parameter USE_RESET_REQUEST_IN9 = 0,\n    parameter USE_RESET_REQUEST_IN10 = 0,\n    parameter USE_RESET_REQUEST_IN11 = 0,\n    parameter USE_RESET_REQUEST_IN12 = 0,\n    parameter USE_RESET_REQUEST_IN13 = 0,\n    parameter USE_RESET_REQUEST_IN14 = 0,\n    parameter USE_RESET_REQUEST_IN15 = 0,\n    parameter OUTPUT_RESET_SYNC_EDGES       = \"deassert\",\n    parameter SYNC_DEPTH                    = 2,\n    parameter RESET_REQUEST_PRESENT         = 0,\n    parameter RESET_REQ_WAIT_TIME           = 3,\n    parameter MIN_RST_ASSERTION_TIME        = 11,\n    parameter RESET_REQ_EARLY_DSRT_TIME     = 4,\n    parameter ADAPT_RESET_REQUEST          = 0\n)\n(\n    \n    \n    \n    input reset_in0,\n    input reset_in1,\n    input reset_in2,\n    input reset_in3,\n    input reset_in4,\n    input reset_in5,\n    input reset_in6,\n    input reset_in7,\n    input reset_in8,\n    input reset_in9,\n    input reset_in10,\n    input reset_in11,\n    input reset_in12,\n    input reset_in13,\n    input reset_in14,\n    input reset_in15,\n    input reset_req_in0,\n    input reset_req_in1,\n    input reset_req_in2,\n    input reset_req_in3,\n    input reset_req_in4,\n    input reset_req_in5,\n    input reset_req_in6,\n    input reset_req_in7,\n    input reset_req_in8,\n    input reset_req_in9,\n    input reset_req_in10,\n    input reset_req_in11,\n    input reset_req_in12,\n    input reset_req_in13,\n    input reset_req_in14,\n    input reset_req_in15,\n\n\n    input  clk,\n    output reg reset_out,\n    output reg reset_req\n);\n\n   \n   localparam ASYNC_RESET = (OUTPUT_RESET_SYNC_EDGES == \"deassert\");\n\n   \n   \n   \n   localparam MIN_METASTABLE = 3;\n   localparam RSTREQ_ASRT_SYNC_TAP = MIN_METASTABLE + RESET_REQ_WAIT_TIME;\n\n   localparam LARGER = RESET_REQ_WAIT_TIME > RESET_REQ_EARLY_DSRT_TIME ? RESET_REQ_WAIT_TIME : RESET_REQ_EARLY_DSRT_TIME;\n\n   localparam ASSERTION_CHAIN_LENGTH =  (MIN_METASTABLE > LARGER) ? \n                                            MIN_RST_ASSERTION_TIME + 1 :\n                                        (\n                                        (MIN_RST_ASSERTION_TIME > LARGER)? \n                                            MIN_RST_ASSERTION_TIME + (LARGER - MIN_METASTABLE + 1) + 1 :\n                                            MIN_RST_ASSERTION_TIME + RESET_REQ_EARLY_DSRT_TIME + RESET_REQ_WAIT_TIME - MIN_METASTABLE + 2\n                                        );\n\n   localparam RESET_REQ_DRST_TAP = RESET_REQ_EARLY_DSRT_TIME + 1;\n   \n\n   wire merged_reset;\n   wire merged_reset_req_in;\n   wire reset_out_pre;\n   wire reset_req_pre;\n\n   \n   (*preserve*) reg  [RSTREQ_ASRT_SYNC_TAP: 0]  altera_reset_synchronizer_int_chain;\n   reg [ASSERTION_CHAIN_LENGTH-1: 0]            r_sync_rst_chain;\n   reg                                          r_sync_rst;\n   reg                                          r_early_rst;\n\n    \n    \n    \n    assign merged_reset = (  \n                              reset_in0 | \n                              reset_in1 | \n                              reset_in2 | \n                              reset_in3 | \n                              reset_in4 | \n                              reset_in5 | \n                              reset_in6 | \n                              reset_in7 | \n                              reset_in8 | \n                              reset_in9 | \n                              reset_in10 | \n                              reset_in11 | \n                              reset_in12 | \n                              reset_in13 | \n                              reset_in14 | \n                              reset_in15\n                          );\n\n    assign merged_reset_req_in = (\n                              ( (USE_RESET_REQUEST_IN0 == 1) ? reset_req_in0 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN1 == 1) ? reset_req_in1 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN2 == 1) ? reset_req_in2 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN3 == 1) ? reset_req_in3 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN4 == 1) ? reset_req_in4 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN5 == 1) ? reset_req_in5 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN6 == 1) ? reset_req_in6 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN7 == 1) ? reset_req_in7 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN8 == 1) ? reset_req_in8 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN9 == 1) ? reset_req_in9 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN10 == 1) ? reset_req_in10 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN11 == 1) ? reset_req_in11 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN12 == 1) ? reset_req_in12 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN13 == 1) ? reset_req_in13 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN14 == 1) ? reset_req_in14 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN15 == 1) ? reset_req_in15 : 1'b0) \n                            );\n\n\n    \n    \n    \n    \n    generate if (OUTPUT_RESET_SYNC_EDGES == \"none\" && (RESET_REQUEST_PRESENT==0)) begin\n\n        assign reset_out_pre = merged_reset;\n        assign reset_req_pre = merged_reset_req_in;\n\n    end else begin\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH),\n            .ASYNC_RESET(RESET_REQUEST_PRESENT? 1'b1 : ASYNC_RESET)\n        )\n        alt_rst_sync_uq1\n        (\n            .clk        (clk),\n            .reset_in   (merged_reset),\n            .reset_out  (reset_out_pre)\n        );\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH),\n            .ASYNC_RESET(0)\n        )\n        alt_rst_req_sync_uq1\n        (\n            .clk        (clk),\n            .reset_in   (merged_reset_req_in),\n            .reset_out  (reset_req_pre)\n        );\n\n    end\n    endgenerate\n\n    generate if ( ( (RESET_REQUEST_PRESENT == 0) && (ADAPT_RESET_REQUEST==0) )|\n                  ( (ADAPT_RESET_REQUEST == 1) && (OUTPUT_RESET_SYNC_EDGES != \"deassert\") ) ) begin\n        always @* begin\n            reset_out = reset_out_pre;\n            reset_req = reset_req_pre;\n        end\n    end else if ( (RESET_REQUEST_PRESENT == 0) && (ADAPT_RESET_REQUEST==1) ) begin\n\n        wire reset_out_pre2;\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH+1),\n            .ASYNC_RESET(0)\n        )\n        alt_rst_sync_uq2\n        (\n            .clk        (clk),\n            .reset_in   (reset_out_pre),\n            .reset_out  (reset_out_pre2)\n        );\n\n        always @* begin\n            reset_out = reset_out_pre2;\n            reset_req = reset_req_pre;\n        end\n\n    end\n    else begin\n\n    \n    initial\n    begin\n        altera_reset_synchronizer_int_chain <= {RSTREQ_ASRT_SYNC_TAP{1'b1}};\n    end\n\n    always @(posedge clk)\n    begin\n        altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP:0] <= \n            {altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP-1:0], reset_out_pre}; \n    end\n\n    \n    initial\n    begin\n        r_sync_rst_chain <= {ASSERTION_CHAIN_LENGTH{1'b1}};\n    end\n\n    always @(posedge clk)\n    begin\n        if (altera_reset_synchronizer_int_chain[MIN_METASTABLE-1] == 1'b1)\n        begin\n            r_sync_rst_chain <= {ASSERTION_CHAIN_LENGTH{1'b1}};\n    end\n    else\n    begin\n        r_sync_rst_chain <= {1'b0, r_sync_rst_chain[ASSERTION_CHAIN_LENGTH-1:1]};\n    end\n    end\n\n    \n    \n\n    always @(posedge clk)\n    begin\n        case ({altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP], r_sync_rst_chain[1], r_sync_rst})\n            3'b000:   r_sync_rst <= 1'b0; \n            3'b001:   r_sync_rst <= 1'b0;\n            3'b010:   r_sync_rst <= 1'b0;\n            3'b011:   r_sync_rst <= 1'b1;\n            3'b100:   r_sync_rst <= 1'b1; \n            3'b101:   r_sync_rst <= 1'b1;\n            3'b110:   r_sync_rst <= 1'b1;\n            3'b111:   r_sync_rst <= 1'b1; \n            default:  r_sync_rst <= 1'b1;\n        endcase\n\n        case ({r_sync_rst_chain[1], r_sync_rst_chain[RESET_REQ_DRST_TAP] | reset_req_pre})\n            2'b00:   r_early_rst <= 1'b0; \n            2'b01:   r_early_rst <= 1'b1; \n            2'b10:   r_early_rst <= 1'b0; \n            2'b11:   r_early_rst <= 1'b1; \n            default: r_early_rst <= 1'b1;\n        endcase\n    end\n\n    always @* begin\n        reset_out = r_sync_rst;\n        reset_req = r_early_rst;\n    end\n\n    end\n    endgenerate\n\nendmodule\n```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: `altera_reset_controller`.\n\nModule specification: The `altera_reset_controller` is a crucial Verilog module designed to manage and synchronize reset signals in digital circuits. It accepts multiple reset (`reset_inX`) and reset request (`reset_req_inX`) inputs, where X ranges from 0 to 15, reflecting various reset conditions across different modules or systems. The primary output ports include `reset_out` for the synchronized reset signal and `reset_req` for the synchronized reset request signal, catering to system-wide reset needs and synchronization requirements. Internally, signals like `merged_reset`, which consolidates input resets using a logical OR operation, and `merged_reset_req_in`, which combines reset request inputs based on parameter settings, play key roles in the module's function. The module utilizes various internal blocks for the synchronization and management of reset signals. These include a general condition synchronization and a specialized block for managing more complex reset requirements, such as when extended synchronization or specific timing considerations are involved. The synchronization mechanism leverages parameters such as `SYNC_DEPTH` to achieve stability against issues like metastability by configuring synchronization depths and reset timings precisely. Overall, the `altera_reset_controller` provides a robust and configurable solution for handling resets in complex digital systems, ensuring reliable operation and interoperability of various system components."
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: altera_reset_controller.\n\nExplanation: The `altera_reset_controller` module is designed to manage reset signals in digital circuits. It takes multiple reset and reset request inputs, processes them based on configuration parameters, and outputs a synchronized reset signal (`reset_out`) and a reset request signal (`reset_req`). The behavior of the module can be customized with parameters such as the number of reset inputs, synchronization depth, minimum reset assertion time, and whether to use reset requests for each input. A synchronizer mechanism is utilized to ensure that the reset signals are stable and free from metastability issues, especially when crossing different clock domains or when dealing with asynchronous reset signals. The module also considers adjustable timing configurations like wait times before deassertion, and it uses conditional generation (`generate ... endgenerate`) to adapt its internal structure according to parameter settings, providing tailored functionality for specific application needs."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports: [reset_in0, reset_in1, reset_in2, reset_in3, reset_in4, reset_in5, reset_in6, reset_in7, reset_in8, reset_in9, reset_in10, reset_in11, reset_in12, reset_in13, reset_in14, reset_in15, reset_req_in0, reset_req_in1, reset_req_in2, reset_req_in3, reset_req_in4, reset_req_in5, reset_req_in6, reset_req_in7, reset_req_in8, reset_req_in9, reset_req_in10, reset_req_in11, reset_req_in12, reset_req_in13, reset_req_in14, reset_req_in15, clk]. Explanation: The `reset_inX` inputs (where X ranges from 0 to 15) are used to input various reset signals into the module, which are then merged and synchronized to generate a single output reset signal. The `reset_req_inX` inputs (also ranging from 0 to 15) serve similar purposes but for reset request signals, which can influence the output reset request signal based on configured parameters. The `clk` input is the clock signal used for synchronizing the reset signals to the target clock domain, preventing potential issues such as metastability.\n\nOutput ports: [reset_out, reset_req]. Explanation: The `reset_out` port outputs the synchronized and possibly delayed reset signal based on input resets and configuration parameters, ensuring that the reset is asserted for a sufficient duration and is stable. The `reset_req` port outputs a synchronized reset request signal which might be used for signaling other components in the system that a reset was requested, facilitating orderly resets across multiple system components."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nInternal signals: [merged_reset, merged_reset_req_in, reset_out_pre, reset_req_pre, altera_reset_synchronizer_int_chain, r_sync_rst_chain, r_sync_rst, r_early_rst].\n\nExplanation:\n\n1. **merged_reset**: This signal consolidates all reset input signals (reset_in0 to reset_in15) into a single line. Logical OR operation is applied across all reset inputs signals, combining them into `merged_reset`, which is then used for further synchronization.\n\n2. **merged_reset_req_in**: Similar to `merged_reset`, this signal aggregates all reset request input signals (reset_req_in0 to reset_req_in15) based on their usage configuration (USE_RESET_REQUEST_INX parameters). This merged signal influences the `reset_req` output, after passing through synchronization stages.\n\n3. **reset_out_pre** and **reset_req_pre**: These intermediate signals hold the values of the reset and reset requests after they have been processed through initial synchronization stages (`altera_reset_synchronizer_uq1` and `altera_reset_synchronizer_uq2` for reset and reset requests respectively), but before they are processed through additional logic or the final output assignment.\n\n4. **altera_reset_synchronizer_int_chain**: A shift register array used in deeper synchronization stages. It maintains the synchronization depth defined by RSTREQ_ASRT_SYNC_TAP and helps in stabilizing the reset signal to combat metastability by delaying it according to the system's synchronization needs.\n\n5. **r_sync_rst_chain**: A shift register that further delays the reset signal based on MAX_RST_ASSERTION or calculated lengths, extending the reset signal duration to meet certain timing requirements and ensuring a stable, glitch-free output.\n\n6. **r_sync_rst**: This signal is a part of control logic together with `altera_reset_synchronizer_int_chain` and `r_sync_rst_chain`, determining the final reset state to be output based on conditions evaluated in a case statement. It effectively decides whether the output reset should be asserted or deasserted.\n\n7. **r_early_rst**: This signal handles the early reset conditions based on `r_sync_rst_chain` and is pivotal in the logic deciding the final state of the reset request output (`reset_req`). It uses boolean conditions to ascertain whether the reset request output should react instantaneously or be delayed.\n\nThese internal signals provide crucial stages of synchronization and conditional logic necessary to ensure that the reset outputs are robust, stable, and adherent to the module's parameter configurations, thereby fulfilling the role of a comprehensive reset management system in digital circuits."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`timescale 1 ns / 1 ns\n\nmodule altera_reset_controller\n#(\n    parameter NUM_RESET_INPUTS              = 6,\n    parameter USE_RESET_REQUEST_IN0 = 0,\n    parameter USE_RESET_REQUEST_IN1 = 0,\n    parameter USE_RESET_REQUEST_IN2 = 0,\n    parameter USE_RESET_REQUEST_IN3 = 0,\n    parameter USE_RESET_REQUEST_IN4 = 0,\n    parameter USE_RESET_REQUEST_IN5 = 0,\n    parameter USE_RESET_REQUEST_IN6 = 0,\n    parameter USE_RESET_REQUEST_IN7 = 0,\n    parameter USE_RESET_REQUEST_IN8 = 0,\n    parameter USE_RESET_REQUEST_IN9 = 0,\n    parameter USE_RESET_REQUEST_IN10 = 0,\n    parameter USE_RESET_REQUEST_IN11 = 0,\n    parameter USE_RESET_REQUEST_IN12 = 0,\n    parameter USE_RESET_REQUEST_IN13 = 0,\n    parameter USE_RESET_REQUEST_IN14 = 0,\n    parameter USE_RESET_REQUEST_IN15 = 0,\n    parameter OUTPUT_RESET_SYNC_EDGES       = \"deassert\",\n    parameter SYNC_DEPTH                    = 2,\n    parameter RESET_REQUEST_PRESENT         = 0,\n    parameter RESET_REQ_WAIT_TIME           = 3,\n    parameter MIN_RST_ASSERTION_TIME        = 11,\n    parameter RESET_REQ_EARLY_DSRT_TIME     = 4,\n    parameter ADAPT_RESET_REQUEST          = 0\n)\n(\n    \n    \n    \n    input reset_in0,\n    input reset_in1,\n    input reset_in2,\n    input reset_in3,\n    input reset_in4,\n    input reset_in5,\n    input reset_in6,\n    input reset_in7,\n    input reset_in8,\n    input reset_in9,\n    input reset_in10,\n    input reset_in11,\n    input reset_in12,\n    input reset_in13,\n    input reset_in14,\n    input reset_in15,\n    input reset_req_in0,\n    input reset_req_in1,\n    input reset_req_in2,\n    input reset_req_in3,\n    input reset_req_in4,\n    input reset_req_in5,\n    input reset_req_in6,\n    input reset_req_in7,\n    input reset_req_in8,\n    input reset_req_in9,\n    input reset_req_in10,\n    input reset_req_in11,\n    input reset_req_in12,\n    input reset_req_in13,\n    input reset_req_in14,\n    input reset_req_in15,\n\n\n    input  clk,\n    output reg reset_out,\n    output reg reset_req\n);\n\n   \n   localparam ASYNC_RESET = (OUTPUT_RESET_SYNC_EDGES == \"deassert\");\n\n   \n   \n   \n   localparam MIN_METASTABLE = 3;\n   localparam RSTREQ_ASRT_SYNC_TAP = MIN_METASTABLE + RESET_REQ_WAIT_TIME;\n\n   localparam LARGER = RESET_REQ_WAIT_TIME > RESET_REQ_EARLY_DSRT_TIME ? RESET_REQ_WAIT_TIME : RESET_REQ_EARLY_DSRT_TIME;\n\n   localparam ASSERTION_CHAIN_LENGTH =  (MIN_METASTABLE > LARGER) ? \n                                            MIN_RST_ASSERTION_TIME + 1 :\n                                        (\n                                        (MIN_RST_ASSERTION_TIME > LARGER)? \n                                            MIN_RST_ASSERTION_TIME + (LARGER - MIN_METASTABLE + 1) + 1 :\n                                            MIN_RST_ASSERTION_TIME + RESET_REQ_EARLY_DSRT_TIME + RESET_REQ_WAIT_TIME - MIN_METASTABLE + 2\n                                        );\n\n   localparam RESET_REQ_DRST_TAP = RESET_REQ_EARLY_DSRT_TIME + 1;\n   \n\n   wire merged_reset;\n   wire merged_reset_req_in;\n   wire reset_out_pre;\n   wire reset_req_pre;\n\n   \n   (*preserve*) reg  [RSTREQ_ASRT_SYNC_TAP: 0]  altera_reset_synchronizer_int_chain;\n   reg [ASSERTION_CHAIN_LENGTH-1: 0]            r_sync_rst_chain;\n   reg                                          r_sync_rst;\n   reg                                          r_early_rst;\n\n    \n    \n    \n    assign merged_reset = (  \n                              reset_in0 | \n                              reset_in1 | \n                              reset_in2 | \n                              reset_in3 | \n                              reset_in4 | \n                              reset_in5 | \n                              reset_in6 | \n                              reset_in7 | \n                              reset_in8 | \n                              reset_in9 | \n                              reset_in10 | \n                              reset_in11 | \n                              reset_in12 | \n                              reset_in13 | \n                              reset_in14 | \n                              reset_in15\n                          );\n\n    assign merged_reset_req_in = (\n                              ( (USE_RESET_REQUEST_IN0 == 1) ? reset_req_in0 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN1 == 1) ? reset_req_in1 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN2 == 1) ? reset_req_in2 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN3 == 1) ? reset_req_in3 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN4 == 1) ? reset_req_in4 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN5 == 1) ? reset_req_in5 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN6 == 1) ? reset_req_in6 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN7 == 1) ? reset_req_in7 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN8 == 1) ? reset_req_in8 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN9 == 1) ? reset_req_in9 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN10 == 1) ? reset_req_in10 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN11 == 1) ? reset_req_in11 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN12 == 1) ? reset_req_in12 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN13 == 1) ? reset_req_in13 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN14 == 1) ? reset_req_in14 : 1'b0)  |\n                              ( (USE_RESET_REQUEST_IN15 == 1) ? reset_req_in15 : 1'b0) \n                            );\n\n\n    \n    \n    \n    \n    generate if (OUTPUT_RESET_SYNC_EDGES == \"none\" && (RESET_REQUEST_PRESENT==0)) begin\n\n        assign reset_out_pre = merged_reset;\n        assign reset_req_pre = merged_reset_req_in;\n\n    end else begin\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH),\n            .ASYNC_RESET(RESET_REQUEST_PRESENT? 1'b1 : ASYNC_RESET)\n        )\n        alt_rst_sync_uq1\n        (\n            .clk        (clk),\n            .reset_in   (merged_reset),\n            .reset_out  (reset_out_pre)\n        );\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH),\n            .ASYNC_RESET(0)\n        )\n        alt_rst_req_sync_uq1\n        (\n            .clk        (clk),\n            .reset_in   (merged_reset_req_in),\n            .reset_out  (reset_req_pre)\n        );\n\n    end\n    endgenerate\n\n    generate if ( ( (RESET_REQUEST_PRESENT == 0) && (ADAPT_RESET_REQUEST==0) )|\n                  ( (ADAPT_RESET_REQUEST == 1) && (OUTPUT_RESET_SYNC_EDGES != \"deassert\") ) ) begin\n        always @* begin\n            reset_out = reset_out_pre;\n            reset_req = reset_req_pre;\n        end\n    end else if ( (RESET_REQUEST_PRESENT == 0) && (ADAPT_RESET_REQUEST==1) ) begin\n\n        wire reset_out_pre2;\n\n        altera_reset_synchronizer\n        #(\n            .DEPTH      (SYNC_DEPTH+1),\n            .ASYNC_RESET(0)\n        )\n        alt_rst_sync_uq2\n        (\n            .clk        (clk),\n            .reset_in   (reset_out_pre),\n            .reset_out  (reset_out_pre2)\n        );\n\n        always @* begin\n            reset_out = reset_out_pre2;\n            reset_req = reset_req_pre;\n        end\n\n    end\n    else begin\n\n    \n    initial\n    begin\n        altera_reset_synchronizer_int_chain <= {RSTREQ_ASRT_SYNC_TAP{1'b1}};\n    end\n\n    always @(posedge clk)\n    begin\n        altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP:0] <= \n            {altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP-1:0], reset_out_pre}; \n    end\n\n    \n    initial\n    begin\n        r_sync_rst_chain <= {ASSERTION_CHAIN_LENGTH{1'b1}};\n    end\n\n    always @(posedge clk)\n    begin\n        if (altera_reset_synchronizer_int_chain[MIN_METASTABLE-1] == 1'b1)\n        begin\n            r_sync_rst_chain <= {ASSERTION_CHAIN_LENGTH{1'b1}};\n    end\n    else\n    begin\n        r_sync_rst_chain <= {1'b0, r_sync_rst_chain[ASSERTION_CHAIN_LENGTH-1:1]};\n    end\n    end\n\n    \n    \n\n    always @(posedge clk)\n    begin\n        case ({altera_reset_synchronizer_int_chain[RSTREQ_ASRT_SYNC_TAP], r_sync_rst_chain[1], r_sync_rst})\n            3'b000:   r_sync_rst <= 1'b0; \n            3'b001:   r_sync_rst <= 1'b0;\n            3'b010:   r_sync_rst <= 1'b0;\n            3'b011:   r_sync_rst <= 1'b1;\n            3'b100:   r_sync_rst <= 1'b1; \n            3'b101:   r_sync_rst <= 1'b1;\n            3'b110:   r_sync_rst <= 1'b1;\n            3'b111:   r_sync_rst <= 1'b1; \n            default:  r_sync_rst <= 1'b1;\n        endcase\n\n        case ({r_sync_rst_chain[1], r_sync_rst_chain[RESET_REQ_DRST_TAP] | reset_req_pre})\n            2'b00:   r_early_rst <= 1'b0; \n            2'b01:   r_early_rst <= 1'b1; \n            2'b10:   r_early_rst <= 1'b0; \n            2'b11:   r_early_rst <= 1'b1; \n            default: r_early_rst <= 1'b1;\n        endcase\n    end\n\n    always @* begin\n        reset_out = r_sync_rst;\n        reset_req = r_early_rst;\n    end\n\n    end\n    endgenerate\n\nendmodule\n</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: `altera_reset_controller`.\n\nModule specification: The `altera_reset_controller` is a crucial Verilog module designed to manage and synchronize reset signals in digital circuits. It accepts multiple reset (`reset_inX`) and reset request (`reset_req_inX`) inputs, where X ranges from 0 to 15, reflecting various reset conditions across different modules or systems. The primary output ports include `reset_out` for the synchronized reset signal and `reset_req` for the synchronized reset request signal, catering to system-wide reset needs and synchronization requirements. Internally, signals like `merged_reset`, which consolidates input resets using a logical OR operation, and `merged_reset_req_in`, which combines reset request inputs based on parameter settings, play key roles in the module's function. The module utilizes various internal blocks for the synchronization and management of reset signals. These include a general condition synchronization and a specialized block for managing more complex reset requirements, such as when extended synchronization or specific timing considerations are involved. The synchronization mechanism leverages parameters such as `SYNC_DEPTH` to achieve stability against issues like metastability by configuring synchronization depths and reset timings precisely. Overall, the `altera_reset_controller` provides a robust and configurable solution for handling resets in complex digital systems, ensuring reliable operation and interoperability of various system components."
                }
            ]
        }
    ]
}