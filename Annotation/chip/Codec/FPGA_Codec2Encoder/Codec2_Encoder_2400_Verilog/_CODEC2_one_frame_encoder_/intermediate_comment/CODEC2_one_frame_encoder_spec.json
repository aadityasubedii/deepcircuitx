{
    "spec": "Module name: CODEC2_one_frame_encoder. Module specification: This module implements a single-frame encoder for the CODEC2 audio compression algorithm. It processes input speech samples, performs analysis on two parts of the frame, extracts various parameters (pitch, LSP coefficients, energy), and encodes them into a 48-bit compressed representation. The module has input ports for start_oneframe, clk, and rst signals, and output ports for encoded data (encoded_bits), intermediate values (out_mem_x, out_mem_y, out_prevf0, out_xq0, out_xq1), and various encoded parameters (c_encode_model_wo, c_pitch1, c_pitch2, c_cmax1, c_cmax2, c_e, c_sn). Internal signals include control signals for sub-modules (startaof, startspeech",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: CODEC2_one_frame_encoder\n\nExplanation: This module appears to be an encoder for a single frame of audio data using the CODEC2 algorithm. It processes input speech samples, performs analysis on the frame, extracts various parameters (such as pitch, LSP coefficients, and energy), and encodes them into a compressed bit representation. The module includes several stages like analyzing two parts of the frame, speech-to-LSP conversion, encoding model parameters, and quantizing LSP values. The final output is a 48-bit encoded representation of the frame, which includes voicing information, energy, and quantized LSP coefficients."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports:\nstart_oneframe, clk, rst\n\nExplanation:\nstart_oneframe: Signal to initiate processing of one frame\nclk: Clock signal for synchronous operations\nrst: Reset signal to initialize the module\n\nOutput ports:\nout_mem_x, out_mem_y, out_prevf0, out_xq0, out_xq1, encoded_bits, done_oneframe, c_encode_model_wo, c_pitch1, c_pitch2, c_cmax1, c_cmax2, c_e, c_sn\n\nExplanation:\nout_mem_x, out_mem_y: Memory outputs for x and y values\nout_prevf0, out_xq0, out_xq1: Previous f0 and quantized x values\nencoded_bits: Final 48-bit encoded representation of the frame\ndone_oneframe: Signal indicating completion of frame processing\nc_encode_model_wo: Encoded model parameter\nc_pitch1, c_pitch2: Pitch-related parameters\nc_cmax1, c_cmax2: Maximum correlation values\nc_e: Energy parameter\nc_sn: Encoded spectral amplitude"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the given code, here are the internal signals and their explanations:\n\nInternal signals: startaof, aof_mem_x_in, aof_mem_y_in, aof_in_prev_f0, aof_out_sn, aof_out_mem_fir, aof_out_sq, aof_voiced1, c_w0_1, check_pitch1, startspeech, s_out_sn, startewoe, encode_in_e, encode_model_wo, xq0, xq1, start_elsp, in_index, in_lsp0 to in_lsp9, lsp, toGray, clsp0 to clsp9.\n\nExplanation:\n- startaof: Control signal to start the analyse_one_frame module\n- aof_mem_x_in, aof_mem_y_in: Input memory signals for analyse_one_frame module\n- aof_in_prev_f0: Previous fundamental frequency input for analyse_one_frame\n- aof_out_sn: Output signal from the speech RAM\n- aof_out_mem_fir, aof_out_sq: Output signals from FIR and square memories\n- aof_voiced1: Stores the voiced/unvoiced decision from the first frame analysis\n- c_w0_1: Stores the fundamental frequency from the first frame analysis\n- check_pitch1: Stores the pitch from the first frame analysis\n- startspeech: Control signal to start the speech_to_uq_lsps_modified module\n- s_out_sn: Speech samples input to the speech module\n- startewoe: Control signal to start the encode_WoE module\n- encode_in_e, encode_model_wo: Inputs for the encode_WoE module\n- xq0, xq1: Quantized x values for encode_WoE module\n- start_elsp: Control signal to start the encode_lsp_scalar_index module\n- in_index: Index input for the encode_lsp_scalar_index module\n- in_lsp0 to in_lsp9: LSP coefficient inputs for encode_lsp_scalar_index\n- lsp: Counter for LSP processing\n- toGray: Temporary storage for Gray code conversion\n- clsp0 to clsp9: Quantized and Gray-coded LSP indices\n\nThese internal signals are used for controlling various sub-modules, storing intermediate results, and facilitating data flow between different stages of the encoding process."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\t\t\t\t\t\t\t\t\t\t\n module CODEC2_one_frame_encoder (\tstart_oneframe,clk, rst,\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tout_mem_x,out_mem_y,out_prevf0, out_xq0, out_xq1,\n\t\t\t\t\t\t\t\t\t\t\tencoded_bits,\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tdone_oneframe,c_encode_model_wo,c_pitch1,c_pitch2,c_cmax1, c_cmax2,c_e,c_sn\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t    \t);\n\n\n\n\n\t\t\t\tparameter N = 32;\n\t\t\t\tparameter Q = 16;\n\t\t\t\tparameter BITS_WIDTH = 48;\n\t\t\t\t\n\t\t\t\tparameter N1 = 80;\n\t\t\t\tparameter Q1 = 16;\n\n\t\t\t\tinput clk,rst,start_oneframe;\n\t\t\t\treg  [N-1:0] in_prevf0,in_xq0, in_xq1;\n\t\t\t\n\t\t\t\toutput reg [BITS_WIDTH-1 : 0] encoded_bits;\n\t\t\t\t\n\t\t\t\toutput reg [N1-1:0] out_mem_x,out_mem_y;\n\t\t\t\toutput reg [N-1:0] out_prevf0, out_xq0, out_xq1;\n\t\t\t\t\n\t\t\t\toutput  reg [9:0] c_cmax1, c_cmax2;\n\n\t\t\t\toutput reg done_oneframe;\n\t\t\t\t\n\t\t\t\treg [N-1:0] check_sum;\n\t\n\t\t\t\treg [N-1:0] c_w0_1,c_w0_2,c_w0,c_w1;\n\t\n\t\t\t\treg [N-1:0] check_pitch1, check_pitch2;\n\t\t\t\t\t\n\t\t\t\toutput reg [N-1:0] c_encode_model_wo,c_pitch1,c_pitch2;\n\t\t\t\t\n\t\t\t\toutput reg [N-1:0] c_e,c_sn;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t \n\t\t\t\treg [9:0] addr_speech;\n\t\t\t\twire [N-1:0] out_speech;\n\t\t\t\tRAM_speech_0  r_speech_0(addr_speech,clk,,1,0,out_speech); \n\t\t\t\n\n\t\t\t\treg [9:0] addr_sn;\n\t\t\t\treg [N-1:0] write_c2_sn;\n\t\t\t\treg re_c2_sn,we_c2_sn;\n\t\t\t\twire [N-1:0] read_c2_sn_out;\n\t\t\t\t \n\t\t\t\tRAM_c2_sn_test_nlp c2_sn (addr_sn,clk,write_c2_sn,re_c2_sn,we_c2_sn,read_c2_sn_out);   \n\n\n\t\t\t\treg [9:0] addr_mem_fir;\n\t\t\t\treg [N1-1:0] in_mem_fir;\n\t\t\t\treg read_fir, write_fir;\n\t\t\t\twire [N1-1:0] out_mem_fir;\n\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\tRAM_nlp_mem_fir_80  mem_fir   (addr_mem_fir,clk,in_mem_fir,read_fir,write_fir,out_mem_fir);\t\n\n\n\t\t\t\treg [9:0] addr_nlp_sq;\n\t\t\t\treg [N1-1:0] in_sq;\n\t\t\t\treg read_sq,write_sq;\n\t\t\t\twire [N1-1:0] out_sq;\n\n\t\t\t\tRAM_nlp_sq_80    nlp_sq\t   (addr_nlp_sq,clk,in_sq,read_sq,write_sq,out_sq);\t \n\t\t\t\t\n\n\n\n\n\nparameter START = 7'd0,\n          START_AOF1 = 7'd1,\n          RUN_AOF1 = 7'd2,\n          START_AOF2 = 7'd3,\n          RUN_AOF2 = 7'd4,\n          DONE = 7'd5,\n\t\t\t INIT_FOR_2 = 7'd6,\n\t\t\t CHECK_FOR2 = 7'd7,\n\t\t\t READ_SN2 = 7'd8,\n\t\t\t SET_DELAY_3 = 7'd9,\n\t\t\t SET_DELAY_4 = 7'd10,\n\t\t\t READ_DATA_SN2 = 7'd11,\n\t\t\t INCR_FOR2 = 7'd12,\n\t\t\t GET_AOF1 = 7'd13,\n\t\t\t AA_SET_ADDR = 7'd14,\n\t\t\t AA_SET_ADDR1 = 7'd15,\n\t\t\t AA_SET_ADDR2 = 7'd16,\n\t\t\t AA_SET_ADDR_GET = 7'd17,\n\t\t\t INIT_FOR_4 = 7'd18,\n\t\t\tCHECK_FOR_4 = 7'd19,\n\t\t\tREAD_SN4 = 7'd20,\n\t\t\tSET_DELAY_5 = 7'd21,\n\t\t\tSET_DELAY_6 = 7'd22,\n\t\t\tREAD_DATA_SN4 = 7'd23,\n\t\t\tINCR_FOR_4 = 7'd24,\n\t\t\tGET_AOF2 = 7'd25,\n\t\t\tSTART_SPEECH = 7'd26,\n\t\t\tRUN_SPEECH = 7'd27,\n\t\t\tGET_SPEECH = 7'd28,\n\t\t\tSTART_ENCODEWOE = 7'd29,\n\t\t\tRUN_ENCODEWOE = 7'd30,\n\t\t\tGET_ENCODEWOE = 7'd31,\n\t\t\tINIT_FOR_LSP = 7'd32,\n\t\t\tCHECK_LSP = 7'd33,\n\t\t\tSET_DATA_LSP = 7'd34,\n\t\t\tINCR_LSP = 7'd35,\n\t\t\tSTART_ELSP1 = 7'd36,\n\t\t\tSET_INDEX = 7'd37,\n\t\t\tRUN_ELSP = 7'd38,\n\t\t\tGET_ELSP = 7'd39,\n\t\t\tINCR_INDEX = 7'd40,\n\t\t\tCHECK_INDEX = 7'd41,\n\t\t\tINDEX_TO_GRAY = 7'd42,\n\t\t\tSET_ENCODED_BITS = 7'd43;\n\t\t\t\n\nreg [6:0] STATE, NEXT_STATE;\n\nparameter [9:0] N_SAMP = 10'd80,\n\t\t\t\tM_PITCH = 10'd320;\n\n\n\n reg [9:0] i;\n reg [N-1:0] sn_data;\n \n \n \n reg [N-1:0] a1_in1;\n reg [N-1:0] a1_in2;\n wire [N-1:0] a1_out;\n \n qadd   #(Q,N)\t\t\tadder1    (a1_in1,a1_in2,a1_out);\n \n\n\n\n\n\nreg startaof;\nreg [N1-1:0] aof_mem_x_in,aof_mem_y_in, aof_out_mem_fir, aof_out_sq;\nreg [N-1:0] aof_in_prev_f0, aof_out_sn;\nwire [N1-1:0] aof_mem_x_out,aof_mem_y_out,aof_in_mem_fir,aof_in_sq;\nwire [N-1:0] aof_out_prev_f0,out_best_f0,aof_w0_out,aof_nlp_pitch;\nwire [9:0] aof_addr_sn,aof_addr_mem_fir,aof_addr_nlp_sq;\nwire voiced_bit,doneaof,aof_read_fir,aof_write_fir,aof_read_sq,aof_write_sq;\nwire [9:0] c_cmax;\nwire [N-1:0] aof_check_i;\nwire [N1-1:0] c_outreal,aof_check_in_real,aof_check_in_imag;\n\nanalyse_one_frame aof (\tstartaof,clk,rst,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t aof_mem_x_in,aof_mem_y_in,aof_in_prev_f0,aof_out_sn,aof_out_mem_fir,aof_out_sq,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t     aof_mem_x_out,aof_mem_y_out,aof_out_prev_f0,out_best_f0,aof_w0_out,voiced_bit,aof_addr_sn,\n\t\t\t\t\t\t\t aof_addr_mem_fir,aof_in_mem_fir,aof_nlp_pitch,aof_read_fir,aof_write_fir,\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t aof_addr_nlp_sq,aof_in_sq,aof_read_sq,aof_write_sq,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t doneaof ,c_cmax,aof_check_i\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t );\n\t\t\t\t\t\t\t \nwire [N-1:0] aof_c_w0,aof_c_w1;\nreg aof_voiced1;\t\t\t\n\nreg [9:0] i1,j1;\t\n\n\nreg startspeech;\nreg [N-1:0] s_out_sn;\nwire [N-1:0] E_speech,lsp0,lsp1,lsp2,lsp3,lsp4,lsp5,lsp6,lsp7,lsp8,lsp9,check_corr;\nwire [9:0] s_addr_sn;\nwire donespeech;\n\nspeech_to_uq_lsps_modified speech_module(startspeech,clk,rst,s_out_sn,\n\t\t\t\t\t\t\tE_speech,lsp0,lsp1,lsp2,lsp3,lsp4,lsp5,lsp6,lsp7,lsp8,lsp9,s_addr_sn,\n\t\t\t\t\t\t\tdonespeech);\n\n\t\t\t\t\t\t\t\n\n\nreg startewoe;\nreg [N-1:0] encode_model_wo,encode_in_e;\nreg [N-1:0] xq0, xq1;\nwire [N-1:0] encode_out_n1,e_out_xq0,e_out_xq1;\nwire doneewoe;\n\n\nencode_WoE encode_module(startewoe,clk,rst,encode_model_wo,encode_in_e,xq0,xq1,e_out_xq0,e_out_xq1,encode_out_n1,doneewoe);\n\t\t \nreg [3:0] lsp;\nreg [7:0] toGray;\n\n\n\nreg [3:0] clsp0,clsp1,clsp2,clsp3,clsp4,clsp5,clsp6,clsp7,clsp8,clsp9;\nreg start_elsp;\nreg [3:0] in_index;\nreg [N-1:0] in_lsp0,in_lsp1,in_lsp2,in_lsp3,in_lsp4,in_lsp5,in_lsp6,in_lsp7,in_lsp8,in_lsp9;\n\nwire [3:0] out_index;\nwire done_elsp;\n\nencode_lsp_scalar_index e_lsp_scalar(start_elsp,clk,rst,in_index,\n\t\t\t\t\t\t\t\t\tin_lsp0,in_lsp1,in_lsp2,in_lsp3,in_lsp4,in_lsp5,in_lsp6,in_lsp7,in_lsp8,in_lsp9,\n\t\t\t\t\t\t\t\t\tout_index,\n\t\t\t\t\t\t\t\t\tdone_elsp);\n\n\n\n\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\t\tSTATE <= START;\n\telse\n\t\tSTATE <= NEXT_STATE;\n\nend\n\n\nalways@(*)\nbegin\n\tcase(STATE)\n\t\n\t\t \n\n\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t   \n\t   \n\t\n\t\n\t\t\n\t\t\n\n\n\n\n\n\n\n\n\n\t\t\n\t\tREAD_SN2:\n\t\tbegin\n\t\t\taddr_speech = i1;\n\t\t\taddr_sn = i1 + 10'd240;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_3:\n\t\tbegin\n\t\t\taddr_speech = i1;\n\t\t\taddr_sn = i1 + 10'd240;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_4:\n\t\tbegin\n\t\t\taddr_speech = i1;\n\t\t\taddr_sn = i1 + 10'd240;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_DATA_SN2:\n\t\tbegin\n\t\t\t\n\t\t\twrite_c2_sn = out_speech;\n\t\t\taddr_speech = i1;\n\t\t\taddr_sn = i1 + 10'd240;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\t\t\n\t\tSTART_AOF1:\n\t\tbegin\n\t\t\t\n\t\t\t\n\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\n\t\t\t \n\n\n\n\n\n\n\n\n\n  \n\t\tend\n\t\n\t\tRUN_AOF1:\n\t\tbegin\n\t\t\t\n\t\t\taof_out_sn = read_c2_sn_out;\n\t\t\taddr_sn = aof_addr_sn;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\n\t\t\taddr_mem_fir = aof_addr_mem_fir;\n\t\t\taof_out_mem_fir = out_mem_fir;\n\t\t\tin_mem_fir = aof_in_mem_fir;\n\t\t\tread_fir = aof_read_fir;\n\t\t\twrite_fir = aof_write_fir;\n\t\t\t\t\n\t\t\taddr_nlp_sq = aof_addr_nlp_sq;\n\t\t\taof_out_sq = out_sq;\n\t\t\tin_sq = aof_in_sq;\n\t\t\tread_sq = aof_read_sq;\n\t\t\twrite_sq = aof_write_sq;\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\t\t\n\t\t\n\n\n\n\n\n\n\n\n\t\t\n\t\tREAD_SN4:\n\t\tbegin\n\t\t\taddr_speech = j1;\n\t\t\taddr_sn = j1 + 10'd160;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_5:\n\t\tbegin\n\t\t\taddr_speech = j1;\n\t\t\taddr_sn = j1 + 10'd160;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_6:\n\t\tbegin\n\t\t\taddr_speech = j1;\n\t\t\taddr_sn = j1 + 10'd160;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\tend\n\t\t\n\t\tREAD_DATA_SN4:\n\t\tbegin\n\t\t\twrite_c2_sn = out_speech;\n\t\t\taddr_speech = j1;\n\t\t\taddr_sn = j1 + 10'd160;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\tend\n\t   \n\t\t\n\n\n\n\t\t\n\t\tSTART_AOF2:\n\t\tbegin\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\tend\n\n\t\tRUN_AOF2:\n\t\tbegin\n\t\t\taof_out_sn = read_c2_sn_out;\n\t\t\taddr_sn = aof_addr_sn;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\n\t\t\taddr_mem_fir = aof_addr_mem_fir;\n\t\t\taof_out_mem_fir = out_mem_fir;\n\t\t\tin_mem_fir = aof_in_mem_fir;\n\t\t\tread_fir = aof_read_fir;\n\t\t\twrite_fir = aof_write_fir;\n\t\t\t\t\n\t\t\taddr_nlp_sq = aof_addr_nlp_sq;\n\t\t\taof_out_sq = out_sq;\n\t\t\tin_sq = aof_in_sq;\n\t\t\tread_sq = aof_read_sq;\n\t\t\twrite_sq = aof_write_sq;\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\t\t\n\t\t\n\t\tSTART_SPEECH:\n\t\tbegin\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\n\t\tRUN_SPEECH:\n\t\tbegin\n\t\t\ts_out_sn = read_c2_sn_out;\n\t\t\taddr_sn = s_addr_sn; \n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\n\t\t\n\t\t\n\tAA_SET_ADDR:\n\tbegin\n\t\taddr_sn = 10'd248;\n\t\twe_c2_sn = 1'b0;\n\t\tre_c2_sn = 1'b1;\n\t\t\n\tend\n\t\n\tAA_SET_ADDR1:\n\tbegin\n\t\t\taddr_sn = 10'd248;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\t\n\tend\n\t\n\tAA_SET_ADDR2:\n\tbegin\n\t\t\taddr_sn = 10'd248;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\n\tend\n\t\n\tAA_SET_ADDR_GET:\n\tbegin\n\t\t\taddr_sn = 10'd248;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\n\tend\n\t\n\tdefault:\n\tbegin\n\t\t    addr_sn = 10'd0;\n\t\t\tre_c2_sn = 10'd0;\n\t\t\twe_c2_sn = 10'd0;\n\t\t\taddr_speech = 10'd0;\n\t\t\t\n\t\t\t\n\t\t\n\tend\n\t\n\tendcase\n\n\n\nend \n\n\nalways@(*)                              \nbegin\n\tcase(STATE)\n\n\tSTART:\n\tbegin\n\t\tif(start_oneframe)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_2; \n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START;\n\t\tend\n\t\t\n\tend\n\t\n\t\n\n\n\n\t\n\tINIT_FOR_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR2;\n\tend\n\t\n\tCHECK_FOR2:\n\tbegin\n\t\tif(i1 < N_SAMP)   \n\t\tbegin\n\t\t\tNEXT_STATE = READ_SN2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_AOF1;   \n\t\tend\n\tend\n\t\n\tREAD_SN2:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_3;\n\tend\n\t\n\tSET_DELAY_3:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_4;\n\tend\n\t\n\tSET_DELAY_4:\n\tbegin\n\t\tNEXT_STATE = READ_DATA_SN2;\n\tend\n\t\n\tREAD_DATA_SN2:\n\tbegin\n\t\tNEXT_STATE = INCR_FOR2; \n\tend\n    \n\t\n\tINCR_FOR2:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR2;\n\tend\n\t\n\tSTART_AOF1:\n\tbegin\n\t\tNEXT_STATE = RUN_AOF1;\n\tend\n\n\tRUN_AOF1:\n\tbegin\n\t\tif(doneaof)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_AOF1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_AOF1;\n\t\tend\n\tend\n\t\n\tGET_AOF1:\n\tbegin\n\t\tNEXT_STATE =  INIT_FOR_4; \n\tend\n\t\n\tINIT_FOR_4:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR_4;\n\tend\n\t\n\tCHECK_FOR_4:\n\tbegin\n\t\tif(j1 < 10'd160)   \n\t\tbegin\n\t\t\tNEXT_STATE = READ_SN4;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_AOF2;   \n\t\tend\n\tend\n\t\n\tREAD_SN4:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_5;\n\tend\n\t\n\tSET_DELAY_5:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_6;\n\tend\n\t\n\tSET_DELAY_6:\n\tbegin\n\t\tNEXT_STATE = READ_DATA_SN4;\n\tend\n\t\n\tREAD_DATA_SN4:\n\tbegin\n\t\tNEXT_STATE = INCR_FOR_4; \n\tend\n   \n\tINCR_FOR_4:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR_4;\n\tend\n\t\n\tSTART_AOF2:\n\tbegin\n\t\tNEXT_STATE = RUN_AOF2;\n\tend\n\n\tRUN_AOF2:\n\tbegin\n\t\tif(doneaof)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_AOF2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_AOF2;\n\t\tend\n\n\tend\n\t\n\tGET_AOF2:\n\tbegin\n\t\tNEXT_STATE = START_SPEECH;\n\tend\n\t\n\tSTART_SPEECH:\n\tbegin\n\t\tNEXT_STATE = RUN_SPEECH;\n\tend\n\n\tRUN_SPEECH:\n\tbegin\n\t\tif(donespeech)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_SPEECH;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_SPEECH;\n\t\tend\n\n\tend\n\t\n\tGET_SPEECH:\n\tbegin\n\t\tNEXT_STATE = START_ENCODEWOE;\n\tend\n\t\n\tSTART_ENCODEWOE:\n\tbegin\n\t\tNEXT_STATE = RUN_ENCODEWOE;\n\tend\n\n\tRUN_ENCODEWOE:\n\tbegin\n\t\tif(doneewoe)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_ENCODEWOE;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_ENCODEWOE;\n\t\tend\n\tend\n\t\n\tGET_ENCODEWOE:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_LSP;\n\tend\n\t\n\tINIT_FOR_LSP:\n\tbegin\n\t\tNEXT_STATE = CHECK_LSP;\n\tend\n\t\n\tCHECK_LSP:\n\tbegin\n\t\tif(lsp < 4'd10)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_DATA_LSP;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_ELSP1;\n\t\tend\n\tend\n\t\n\tSET_DATA_LSP:\n\tbegin\n\t\tNEXT_STATE = INCR_LSP;\n\tend\n\t\n\tINCR_LSP:\n\tbegin\n\t\tNEXT_STATE = CHECK_LSP;\n\tend\n\t\n\tSTART_ELSP1:\n\tbegin\n\t\tNEXT_STATE = SET_INDEX;\n\tend\n\t\n\tSET_INDEX:\n\tbegin\n\t\tNEXT_STATE = RUN_ELSP;\n\tend\n\n\tRUN_ELSP:\n\tbegin\n\t\tif(done_elsp)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_ELSP;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_ELSP;\n\t\tend\n\tend\n\t\n\tGET_ELSP:\n\tbegin\n\t\tNEXT_STATE = INCR_INDEX;\n\tend\n\t\n\tINCR_INDEX:\n\tbegin\n\t\tNEXT_STATE = CHECK_INDEX;\n\tend\n\t\t\n\tCHECK_INDEX:\n\tbegin\t\n\t\tif(in_index < 4'd10)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_INDEX;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INDEX_TO_GRAY;\n\t\tend\n\t\t\n\tend\n\t\n\tINDEX_TO_GRAY:\n\tbegin\n\t\tNEXT_STATE = SET_ENCODED_BITS;\n\tend\n\t\n\tSET_ENCODED_BITS:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\t\n\tAA_SET_ADDR:\n\tbegin\n\t\tNEXT_STATE = AA_SET_ADDR1;\n\tend\n\t\n\tAA_SET_ADDR1:\n\tbegin\n\t\tNEXT_STATE = AA_SET_ADDR2;\n\tend\n\t\n\tAA_SET_ADDR2:\n\tbegin\n\t\tNEXT_STATE = AA_SET_ADDR_GET;\n\tend\n\t\n\tAA_SET_ADDR_GET:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\t\n\t\n\tDONE:\n\tbegin\n\t\tNEXT_STATE = DONE;    \n\tend\n\n\tdefault:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tendcase\nend\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\tbegin\n\t\tdone_oneframe <= 1'b0;\n\t\t\t\n\tend\n\n\telse\n\tbegin\n\t\tcase(STATE)\n\n\t\tSTART:\n\t\tbegin\n\t\t\tdone_oneframe <= 1'b0;\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\t\t\n\t\tINIT_FOR_2:\n\t\tbegin\n\t\t\ti1 <= 10'd0;\n\t\t\tencoded_bits <= 48'd0;\n\t\t\tcheck_sum <= 32'b0;\n\t\tend\n\t\t\t\n\n\t\tCHECK_FOR2:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_SN2:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_3:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_4:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_DATA_SN2:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\t\n\t\t\n\t\tINCR_FOR2:\n\t\tbegin\n\t\t\ti1 <= i1 + 10'd1;\n\t\tend\n\n\n\t\tSTART_AOF1:\n\t\tbegin\n\t\t\tstartaof <= 1'b1;\n\t\t\t\t\n\t\t    aof_mem_x_in <= 32'b0;\n\t\t\taof_mem_y_in <= 32'b0;\n\t\t\taof_in_prev_f0 <= {16'd50,16'd0};   \n\t\t\t\n\t\t\t\n\n\n\t\t\t\n\t\tend\n\n\t\tRUN_AOF1:\n\t\tbegin\t\t\t\n\t\t\tstartaof <= 1'b0;\n\t\tend\n\t\t\n\t\tGET_AOF1:\n\t\tbegin\n\t\t\t\n\t\t\taof_voiced1 <= voiced_bit;\n\t\t\tc_w0_1 <= aof_w0_out;\n\t\t\t\n\t\t\tcheck_pitch1 <= aof_nlp_pitch;\n\t\t\tc_cmax1 <= c_cmax;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tc_encode_model_wo <= aof_w0_out;\n\t\t\t\n\t\t\t\n\t\t\tout_mem_x <= aof_mem_x_out;\n\t\t\tout_mem_y <= aof_mem_y_out;\n\t\t\tout_prevf0 <= aof_out_prev_f0;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\t\n\t\tINIT_FOR_4:\n\t\tbegin\n\t\t\tj1 <= 10'd0;\n\t\tend\n\t\t\n\t\tCHECK_FOR_4:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_SN4:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_5:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_6:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_DATA_SN4:\n\t\tbegin\n\t\t\t\n\t\tend\n\t   \n\t\tINCR_FOR_4:\n\t\tbegin\n\t\t\tj1 <= j1 + 10'd1;\n\t\tend\n\t\t\n\t\tSTART_AOF2:\n\t\tbegin\n\t\t\tstartaof <= 1'b1;\n\t\t\t\t\n\t\t    aof_mem_x_in <= aof_mem_x_out;\n\t\t\taof_mem_y_in <= aof_mem_y_out;\n\t\t\taof_in_prev_f0 <= aof_out_prev_f0;   \n\t\tend\n\n\t\tRUN_AOF2:\n\t\tbegin\n\t\t\tstartaof <= 1'b0;\n\t\tend\n\t\t\n\t\tGET_AOF2:\n\t\tbegin\n\t\t\t\n\t\t\tc_encode_model_wo <= aof_w0_out;\n\t\t\t\n\t\t\tout_mem_x <= aof_mem_x_out;\n\t\t\tout_mem_y <= aof_mem_y_out;\n\t\t\tout_prevf0 <= aof_out_prev_f0;\n\t\t\t\n\t\t\tencoded_bits <= {aof_voiced1,voiced_bit,46'd0};\n\t\tend\n\t\t\n\t\tSTART_SPEECH:\n\t\tbegin\n\t\t\tstartspeech <= 1'b1;\n\t\t\t\n\t\tend\n\n\t\tRUN_SPEECH:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tstartspeech <= 1'b0;\n\t\tend\n\t\t\n\t\tGET_SPEECH:\n\t\tbegin\n\t\t\tc_e <= E_speech;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tc_pitch1 <= lsp0;\n\t\t\tc_pitch2 <= lsp1;\n\t\tend\n\t\t\n\t\tSTART_ENCODEWOE:\n\t\tbegin\n\t\t\tstartewoe <= 1'b1;\n\t\t\tencode_in_e <= E_speech;\n\t\t\tencode_model_wo <= aof_w0_out;\n\t\t\tc_encode_model_wo <= aof_w0_out;\n\t\t\n\n\t\t\txq0 <= 32'b0;\n\t\t\txq1 <= 32'b0; \n\t\t\t\n\t\t\t\n\n\t\tend\n\n\t\tRUN_ENCODEWOE:\n\t\tbegin\n\t\t\tstartewoe <= 1'b0;\n\t\tend\n\t\t\n\t\tGET_ENCODEWOE:\n\t\tbegin\n\t\t\tc_sn <= encode_out_n1; \n\t\t\t\n\t\t\tout_xq0 <= e_out_xq0;\n\t\t\tout_xq1 <= e_out_xq1;\n\t\t\t\n\t\t\ttoGray[7] <= encode_out_n1[7];\n\t\t\ttoGray[6] <= encode_out_n1[7] ^ encode_out_n1[6];\n\t\t\ttoGray[5] <= encode_out_n1[6] ^ encode_out_n1[5];\n\t\t\ttoGray[4] <= encode_out_n1[5] ^ encode_out_n1[4];\n\t\t\ttoGray[3] <= encode_out_n1[4] ^ encode_out_n1[3];\n\t\t\ttoGray[2] <= encode_out_n1[3] ^ encode_out_n1[2];\n\t\t\ttoGray[1] <= encode_out_n1[2] ^ encode_out_n1[1];\n\t\t\ttoGray[0] <= encode_out_n1[1] ^ encode_out_n1[0];\n\t\tend\n\t\t\n\t\tINIT_FOR_LSP:\n\t\tbegin\n\t\t\tlsp <= 4'd0;\n\t\t\tencoded_bits <= {encoded_bits[47:46],toGray,38'd0};\n\t\tend\n\t\t\n\t\tCHECK_LSP:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DATA_LSP:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\t\tcase(lsp)\n\t\t\t\n\t\t\t4'd0:\t\n\t\t\tbegin\n\t\t\t\tin_lsp0 <= lsp0;\n\t\t\tend\n\t\t\t4'd1:\n\t\t\tbegin\n\t\t\t\tin_lsp1 <= lsp1;\n\t\t\tend\n\t\t\t4'd2:\n\t\t\tbegin\n\t\t\t\tin_lsp2 <= lsp2;\n\t\t\tend\t\t\t\n\t\t\t4'd3:\t\n\t\t\tbegin\n\t\t\t\tin_lsp3 <= lsp3;\n\t\t\tend\t\n\t\t\t4'd4:\n\t\t\tbegin\n\t\t\t\tin_lsp4 <= lsp4;\n\t\t\tend\t\t\t\t\n\t\t\t4'd5:\t\n\t\t\tbegin\n\t\t\t\tin_lsp5 <= lsp5;\n\t\t\tend\t\n\t\t\t4'd6:\n\t\t\tbegin\n\t\t\t\tin_lsp6 <= lsp6;\n\t\t\tend\t\t\t\t\n\t\t\t4'd7:\n\t\t\tbegin\n\t\t\t\tin_lsp7 <= lsp7;\n\t\t\tend\t\t\t\t\n\t\t\t4'd8:\n\t\t\tbegin\n\t\t\t\tin_lsp8 <= lsp8;\n\t\t\tend\t\t\t\t\n\t\t\t4'd9:\t\n\t\t\tbegin\n\t\t\t\tin_lsp9 <= lsp9;\n\t\t\tend\t\n\t\t\t\n\t\t\tendcase\n\t\t\t\n\t\tend\n\t\t\n\t\tINCR_LSP:\n\t\tbegin\n\t\t\tlsp <= lsp + 4'd1;\n\t\tend\n\t\t\n\t\tSTART_ELSP1:\n\t\tbegin\n\t\t\tin_index <= 4'd0;\n\t\tend\n\t\t\n\t\tSET_INDEX:\n\t\tbegin\n\t\t\tstart_elsp <= 1'b1;\n\t\tend\n\n\t\tRUN_ELSP:\n\t\tbegin\n\t\t\tstart_elsp <= 1'b0;\t\t\n\t\tend\n\t\t\n\t\tGET_ELSP:\n\t\tbegin\n\t\t\tcase(in_index)\n\t\t\t4'd0:\n\t\t\t\tbegin\n\t\t\t\tclsp0 <= out_index;\n\t\t\t\tend\n\t\t\t4'd1:\t\n\t\t\t\tbegin\n\t\t\t\tclsp1 <= out_index;\n\t\t\t\tend\n\t\t\t4'd2:\t\n\t\t\t\tbegin\n\t\t\t\tclsp2 <= out_index;\n\t\t\t\tend\n\t\t\t4'd3:\t\n\t\t\t\tbegin\n\t\t\t\tclsp3 <= out_index;\n\t\t\t\tend\n\t\t\t4'd4:\n\t\t\t\tbegin\n\t\t\t\tclsp4 <= out_index;\n\t\t\t\tend\n\t\t\t4'd5:\t\n\t\t\t\tbegin\n\t\t\t\tclsp5 <= out_index;\n\t\t\t\tend\n\t\t\t4'd6:\t\n\t\t\t\tbegin\n\t\t\t\tclsp6 <= out_index;\n\t\t\t\tend\n\t\t\t4'd7:\n\t\t\t\tbegin\n\t\t\t\tclsp7 <= out_index;\n\t\t\t\tend\n\t\t\t4'd8:\n\t\t\t\tbegin\n\t\t\t\tclsp8 <= out_index;\n\t\t\t\tend\n\t\t\t4'd9:\n\t\t\t\tbegin\n\t\t\t\tclsp9 <= out_index;\n\t\t\t\tend\n\t\t\tendcase \n\t\t\t\t\t\t\t\t\t\n\t\tend\n\t\t\n\t\tINCR_INDEX:\n\t\tbegin\n\t\t\tin_index <= in_index + 4'd1;\n\t\tend\n\t\t\n\t\tCHECK_INDEX:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tINDEX_TO_GRAY:\n\t\tbegin\n\t\t\tcase(clsp0)\n\t\t\t\t4'd0 : clsp0 <= 4'd0;\n\t\t\t\t4'd1 : clsp0 <= 4'd1;\n\t\t\t\t4'd2 : clsp0 <= 4'd3;\n\t\t\t\t4'd3 : clsp0 <= 4'd2;\n\t\t\t\t4'd4 : clsp0 <= 4'd6;\n\t\t\t\t4'd5 : clsp0 <= 4'd7;\n\t\t\t\t4'd6 : clsp0 <= 4'd5;\n\t\t\t\t4'd7 : clsp0 <= 4'd4;\n\t\t\t\t4'd8 : clsp0 <= 4'd12;\n\t\t\t\t4'd9 : clsp0 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp1)\n\t\t\t\t4'd0 : clsp1 <= 4'd0;\n\t\t\t\t4'd1 : clsp1 <= 4'd1;\n\t\t\t\t4'd2 : clsp1 <= 4'd3;\n\t\t\t\t4'd3 : clsp1 <= 4'd2;\n\t\t\t\t4'd4 : clsp1 <= 4'd6;\n\t\t\t\t4'd5 : clsp1 <= 4'd7;\n\t\t\t\t4'd6 : clsp1 <= 4'd5;\n\t\t\t\t4'd7 : clsp1 <= 4'd4;\n\t\t\t\t4'd8 : clsp1 <= 4'd12;\n\t\t\t\t4'd9 : clsp1 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp2)\n\t\t\t\t4'd0 : clsp2 <= 4'd0;\n\t\t\t\t4'd1 : clsp2 <= 4'd1;\n\t\t\t\t4'd2 : clsp2 <= 4'd3;\n\t\t\t\t4'd3 : clsp2 <= 4'd2;\n\t\t\t\t4'd4 : clsp2 <= 4'd6;\n\t\t\t\t4'd5 : clsp2 <= 4'd7;\n\t\t\t\t4'd6 : clsp2 <= 4'd5;\n\t\t\t\t4'd7 : clsp2 <= 4'd4;\n\t\t\t\t4'd8 : clsp2 <= 4'd12;\n\t\t\t\t4'd9 : clsp2 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp3)\n\t\t\t\t4'd0 : clsp3 <= 4'd0;\n\t\t\t\t4'd1 : clsp3 <= 4'd1;\n\t\t\t\t4'd2 : clsp3 <= 4'd3;\n\t\t\t\t4'd3 : clsp3 <= 4'd2;\n\t\t\t\t4'd4 : clsp3 <= 4'd6;\n\t\t\t\t4'd5 : clsp3 <= 4'd7;\n\t\t\t\t4'd6 : clsp3 <= 4'd5;\n\t\t\t\t4'd7 : clsp3 <= 4'd4;\n\t\t\t\t4'd8 : clsp3 <= 4'd12;\n\t\t\t\t4'd9 : clsp3 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp4)\n\t\t\t\t4'd0 : clsp4 <= 4'd0;\n\t\t\t\t4'd1 : clsp4 <= 4'd1;\n\t\t\t\t4'd2 : clsp4 <= 4'd3;\n\t\t\t\t4'd3 : clsp4 <= 4'd2;\n\t\t\t\t4'd4 : clsp4 <= 4'd6;\n\t\t\t\t4'd5 : clsp4 <= 4'd7;\n\t\t\t\t4'd6 : clsp4 <= 4'd5;\n\t\t\t\t4'd7 : clsp4 <= 4'd4;\n\t\t\t\t4'd8 : clsp4 <= 4'd12;\n\t\t\t\t4'd9 : clsp4 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp5)\n\t\t\t\t4'd0 : clsp5 <= 4'd0;\n\t\t\t\t4'd1 : clsp5 <= 4'd1;\n\t\t\t\t4'd2 : clsp5 <= 4'd3;\n\t\t\t\t4'd3 : clsp5 <= 4'd2;\n\t\t\t\t4'd4 : clsp5 <= 4'd6;\n\t\t\t\t4'd5 : clsp5 <= 4'd7;\n\t\t\t\t4'd6 : clsp5 <= 4'd5;\n\t\t\t\t4'd7 : clsp5 <= 4'd4;\n\t\t\t\t4'd8 : clsp5 <= 4'd12;\n\t\t\t\t4'd9 : clsp5 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp6)\n\t\t\t\t4'd0 : clsp6 <= 4'd0;\n\t\t\t\t4'd1 : clsp6 <= 4'd1;\n\t\t\t\t4'd2 : clsp6 <= 4'd3;\n\t\t\t\t4'd3 : clsp6 <= 4'd2;\n\t\t\t\t4'd4 : clsp6 <= 4'd6;\n\t\t\t\t4'd5 : clsp6 <= 4'd7;\n\t\t\t\t4'd6 : clsp6 <= 4'd5;\n\t\t\t\t4'd7 : clsp6 <= 4'd4;\n\t\t\t\t4'd8 : clsp6 <= 4'd12;\n\t\t\t\t4'd9 : clsp6 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp7)\n\t\t\t\t4'd0 : clsp7 <= 3'd0;\n\t\t\t\t4'd1 : clsp7 <= 3'd1;\n\t\t\t\t4'd2 : clsp7 <= 3'd3;\n\t\t\t\t4'd3 : clsp7 <= 3'd2;\n\t\t\t\t4'd4 : clsp7 <= 3'd6;\n\t\t\t\t4'd5 : clsp7 <= 3'd7;\n\t\t\t\t4'd6 : clsp7 <= 3'd5;\n\t\t\t\t4'd7 : clsp7 <= 3'd4;\n\t\t\t\t4'd8 : clsp7 <= 3'd12;\n\t\t\t\t4'd9 : clsp7 <= 3'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp8)\n\t\t\t\t4'd0 : clsp8 <= 3'd0;\n\t\t\t\t4'd1 : clsp8 <= 3'd1;\n\t\t\t\t4'd2 : clsp8 <= 3'd3;\n\t\t\t\t4'd3 : clsp8 <= 3'd2;\n\t\t\t\t4'd4 : clsp8 <= 3'd6;\n\t\t\t\t4'd5 : clsp8 <= 3'd7;\n\t\t\t\t4'd6 : clsp8 <= 3'd5;\n\t\t\t\t4'd7 : clsp8 <= 3'd4;\n\t\t\t\t4'd8 : clsp8 <= 3'd12;\n\t\t\t\t4'd9 : clsp8 <= 3'd13;\n\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp9)\n\t\t\t\t4'd0 : clsp9 <= 2'd0;\n\t\t\t\t4'd1 : clsp9 <= 2'd1;\n\t\t\t\t4'd2 : clsp9 <= 2'd3;\n\t\t\t\t4'd3 : clsp9 <= 2'd2;\n\t\t\t\t4'd4 : clsp9 <= 2'd6;\n\t\t\t\t4'd5 : clsp9 <= 2'd7;\n\t\t\t\t4'd6 : clsp9 <= 2'd5;\n\t\t\t\t4'd7 : clsp9 <= 2'd4;\n\t\t\t\t4'd8 : clsp9 <= 2'd12;\n\t\t\t\t4'd9 : clsp9 <= 2'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\t\n\t\tend\n\t\n\t\tSET_ENCODED_BITS:\n\t\tbegin\n\t\t\tencoded_bits <= {encoded_bits[47:38],clsp0,clsp1,clsp2,clsp3,clsp4,\n\t\t\t\t\t\t\t\t\t\t\t\tclsp5,clsp6,clsp7[2:0],clsp8[2:0],clsp9[1:0],2'd0};\n\t\tend\t\n\t\t\n\t\t\n\t\t\n\t\tAA_SET_ADDR:\n\t\tbegin\n\t\t\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tAA_SET_ADDR1:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tAA_SET_ADDR2:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tAA_SET_ADDR_GET:\n\t\tbegin\n\t\t\t\n\t\tend\t\n\t\t\n\t\tDONE:\n\t\tbegin\n\t\t\tdone_oneframe <= 1'b1;\n\t\t\t\t\t\n\t\tend\n\n\t\tendcase\n\tend\n\nend\n\n\nendmodule```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: CODEC2_one_frame_encoder. Module specification: This module implements a single-frame encoder for the CODEC2 audio compression algorithm. It processes input speech samples, performs analysis on two parts of the frame, extracts various parameters (pitch, LSP coefficients, energy), and encodes them into a 48-bit compressed representation. The module has input ports for start_oneframe, clk, and rst signals, and output ports for encoded data (encoded_bits), intermediate values (out_mem_x, out_mem_y, out_prevf0, out_xq0, out_xq1), and various encoded parameters (c_encode_model_wo, c_pitch1, c_pitch2, c_cmax1, c_cmax2, c_e, c_sn). Internal signals include control signals for sub-modules (startaof, startspeech"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: CODEC2_one_frame_encoder\n\nExplanation: This module appears to be an encoder for a single frame of audio data using the CODEC2 algorithm. It processes input speech samples, performs analysis on the frame, extracts various parameters (such as pitch, LSP coefficients, and energy), and encodes them into a compressed bit representation. The module includes several stages like analyzing two parts of the frame, speech-to-LSP conversion, encoding model parameters, and quantizing LSP values. The final output is a 48-bit encoded representation of the frame, which includes voicing information, energy, and quantized LSP coefficients."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports:\nstart_oneframe, clk, rst\n\nExplanation:\nstart_oneframe: Signal to initiate processing of one frame\nclk: Clock signal for synchronous operations\nrst: Reset signal to initialize the module\n\nOutput ports:\nout_mem_x, out_mem_y, out_prevf0, out_xq0, out_xq1, encoded_bits, done_oneframe, c_encode_model_wo, c_pitch1, c_pitch2, c_cmax1, c_cmax2, c_e, c_sn\n\nExplanation:\nout_mem_x, out_mem_y: Memory outputs for x and y values\nout_prevf0, out_xq0, out_xq1: Previous f0 and quantized x values\nencoded_bits: Final 48-bit encoded representation of the frame\ndone_oneframe: Signal indicating completion of frame processing\nc_encode_model_wo: Encoded model parameter\nc_pitch1, c_pitch2: Pitch-related parameters\nc_cmax1, c_cmax2: Maximum correlation values\nc_e: Energy parameter\nc_sn: Encoded spectral amplitude"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the given code, here are the internal signals and their explanations:\n\nInternal signals: startaof, aof_mem_x_in, aof_mem_y_in, aof_in_prev_f0, aof_out_sn, aof_out_mem_fir, aof_out_sq, aof_voiced1, c_w0_1, check_pitch1, startspeech, s_out_sn, startewoe, encode_in_e, encode_model_wo, xq0, xq1, start_elsp, in_index, in_lsp0 to in_lsp9, lsp, toGray, clsp0 to clsp9.\n\nExplanation:\n- startaof: Control signal to start the analyse_one_frame module\n- aof_mem_x_in, aof_mem_y_in: Input memory signals for analyse_one_frame module\n- aof_in_prev_f0: Previous fundamental frequency input for analyse_one_frame\n- aof_out_sn: Output signal from the speech RAM\n- aof_out_mem_fir, aof_out_sq: Output signals from FIR and square memories\n- aof_voiced1: Stores the voiced/unvoiced decision from the first frame analysis\n- c_w0_1: Stores the fundamental frequency from the first frame analysis\n- check_pitch1: Stores the pitch from the first frame analysis\n- startspeech: Control signal to start the speech_to_uq_lsps_modified module\n- s_out_sn: Speech samples input to the speech module\n- startewoe: Control signal to start the encode_WoE module\n- encode_in_e, encode_model_wo: Inputs for the encode_WoE module\n- xq0, xq1: Quantized x values for encode_WoE module\n- start_elsp: Control signal to start the encode_lsp_scalar_index module\n- in_index: Index input for the encode_lsp_scalar_index module\n- in_lsp0 to in_lsp9: LSP coefficient inputs for encode_lsp_scalar_index\n- lsp: Counter for LSP processing\n- toGray: Temporary storage for Gray code conversion\n- clsp0 to clsp9: Quantized and Gray-coded LSP indices\n\nThese internal signals are used for controlling various sub-modules, storing intermediate results, and facilitating data flow between different stages of the encoding process."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\t\t\t\t\t\t\t\t\t\t\n module CODEC2_one_frame_encoder (\tstart_oneframe,clk, rst,\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tout_mem_x,out_mem_y,out_prevf0, out_xq0, out_xq1,\n\t\t\t\t\t\t\t\t\t\t\tencoded_bits,\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tdone_oneframe,c_encode_model_wo,c_pitch1,c_pitch2,c_cmax1, c_cmax2,c_e,c_sn\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t    \t);\n\n\n\n\n\t\t\t\tparameter N = 32;\n\t\t\t\tparameter Q = 16;\n\t\t\t\tparameter BITS_WIDTH = 48;\n\t\t\t\t\n\t\t\t\tparameter N1 = 80;\n\t\t\t\tparameter Q1 = 16;\n\n\t\t\t\tinput clk,rst,start_oneframe;\n\t\t\t\treg  [N-1:0] in_prevf0,in_xq0, in_xq1;\n\t\t\t\n\t\t\t\toutput reg [BITS_WIDTH-1 : 0] encoded_bits;\n\t\t\t\t\n\t\t\t\toutput reg [N1-1:0] out_mem_x,out_mem_y;\n\t\t\t\toutput reg [N-1:0] out_prevf0, out_xq0, out_xq1;\n\t\t\t\t\n\t\t\t\toutput  reg [9:0] c_cmax1, c_cmax2;\n\n\t\t\t\toutput reg done_oneframe;\n\t\t\t\t\n\t\t\t\treg [N-1:0] check_sum;\n\t\n\t\t\t\treg [N-1:0] c_w0_1,c_w0_2,c_w0,c_w1;\n\t\n\t\t\t\treg [N-1:0] check_pitch1, check_pitch2;\n\t\t\t\t\t\n\t\t\t\toutput reg [N-1:0] c_encode_model_wo,c_pitch1,c_pitch2;\n\t\t\t\t\n\t\t\t\toutput reg [N-1:0] c_e,c_sn;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t \n\t\t\t\treg [9:0] addr_speech;\n\t\t\t\twire [N-1:0] out_speech;\n\t\t\t\tRAM_speech_0  r_speech_0(addr_speech,clk,,1,0,out_speech); \n\t\t\t\n\n\t\t\t\treg [9:0] addr_sn;\n\t\t\t\treg [N-1:0] write_c2_sn;\n\t\t\t\treg re_c2_sn,we_c2_sn;\n\t\t\t\twire [N-1:0] read_c2_sn_out;\n\t\t\t\t \n\t\t\t\tRAM_c2_sn_test_nlp c2_sn (addr_sn,clk,write_c2_sn,re_c2_sn,we_c2_sn,read_c2_sn_out);   \n\n\n\t\t\t\treg [9:0] addr_mem_fir;\n\t\t\t\treg [N1-1:0] in_mem_fir;\n\t\t\t\treg read_fir, write_fir;\n\t\t\t\twire [N1-1:0] out_mem_fir;\n\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\tRAM_nlp_mem_fir_80  mem_fir   (addr_mem_fir,clk,in_mem_fir,read_fir,write_fir,out_mem_fir);\t\n\n\n\t\t\t\treg [9:0] addr_nlp_sq;\n\t\t\t\treg [N1-1:0] in_sq;\n\t\t\t\treg read_sq,write_sq;\n\t\t\t\twire [N1-1:0] out_sq;\n\n\t\t\t\tRAM_nlp_sq_80    nlp_sq\t   (addr_nlp_sq,clk,in_sq,read_sq,write_sq,out_sq);\t \n\t\t\t\t\n\n\n\n\n\nparameter START = 7'd0,\n          START_AOF1 = 7'd1,\n          RUN_AOF1 = 7'd2,\n          START_AOF2 = 7'd3,\n          RUN_AOF2 = 7'd4,\n          DONE = 7'd5,\n\t\t\t INIT_FOR_2 = 7'd6,\n\t\t\t CHECK_FOR2 = 7'd7,\n\t\t\t READ_SN2 = 7'd8,\n\t\t\t SET_DELAY_3 = 7'd9,\n\t\t\t SET_DELAY_4 = 7'd10,\n\t\t\t READ_DATA_SN2 = 7'd11,\n\t\t\t INCR_FOR2 = 7'd12,\n\t\t\t GET_AOF1 = 7'd13,\n\t\t\t AA_SET_ADDR = 7'd14,\n\t\t\t AA_SET_ADDR1 = 7'd15,\n\t\t\t AA_SET_ADDR2 = 7'd16,\n\t\t\t AA_SET_ADDR_GET = 7'd17,\n\t\t\t INIT_FOR_4 = 7'd18,\n\t\t\tCHECK_FOR_4 = 7'd19,\n\t\t\tREAD_SN4 = 7'd20,\n\t\t\tSET_DELAY_5 = 7'd21,\n\t\t\tSET_DELAY_6 = 7'd22,\n\t\t\tREAD_DATA_SN4 = 7'd23,\n\t\t\tINCR_FOR_4 = 7'd24,\n\t\t\tGET_AOF2 = 7'd25,\n\t\t\tSTART_SPEECH = 7'd26,\n\t\t\tRUN_SPEECH = 7'd27,\n\t\t\tGET_SPEECH = 7'd28,\n\t\t\tSTART_ENCODEWOE = 7'd29,\n\t\t\tRUN_ENCODEWOE = 7'd30,\n\t\t\tGET_ENCODEWOE = 7'd31,\n\t\t\tINIT_FOR_LSP = 7'd32,\n\t\t\tCHECK_LSP = 7'd33,\n\t\t\tSET_DATA_LSP = 7'd34,\n\t\t\tINCR_LSP = 7'd35,\n\t\t\tSTART_ELSP1 = 7'd36,\n\t\t\tSET_INDEX = 7'd37,\n\t\t\tRUN_ELSP = 7'd38,\n\t\t\tGET_ELSP = 7'd39,\n\t\t\tINCR_INDEX = 7'd40,\n\t\t\tCHECK_INDEX = 7'd41,\n\t\t\tINDEX_TO_GRAY = 7'd42,\n\t\t\tSET_ENCODED_BITS = 7'd43;\n\t\t\t\n\nreg [6:0] STATE, NEXT_STATE;\n\nparameter [9:0] N_SAMP = 10'd80,\n\t\t\t\tM_PITCH = 10'd320;\n\n\n\n reg [9:0] i;\n reg [N-1:0] sn_data;\n \n \n \n reg [N-1:0] a1_in1;\n reg [N-1:0] a1_in2;\n wire [N-1:0] a1_out;\n \n qadd   #(Q,N)\t\t\tadder1    (a1_in1,a1_in2,a1_out);\n \n\n\n\n\n\nreg startaof;\nreg [N1-1:0] aof_mem_x_in,aof_mem_y_in, aof_out_mem_fir, aof_out_sq;\nreg [N-1:0] aof_in_prev_f0, aof_out_sn;\nwire [N1-1:0] aof_mem_x_out,aof_mem_y_out,aof_in_mem_fir,aof_in_sq;\nwire [N-1:0] aof_out_prev_f0,out_best_f0,aof_w0_out,aof_nlp_pitch;\nwire [9:0] aof_addr_sn,aof_addr_mem_fir,aof_addr_nlp_sq;\nwire voiced_bit,doneaof,aof_read_fir,aof_write_fir,aof_read_sq,aof_write_sq;\nwire [9:0] c_cmax;\nwire [N-1:0] aof_check_i;\nwire [N1-1:0] c_outreal,aof_check_in_real,aof_check_in_imag;\n\nanalyse_one_frame aof (\tstartaof,clk,rst,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t aof_mem_x_in,aof_mem_y_in,aof_in_prev_f0,aof_out_sn,aof_out_mem_fir,aof_out_sq,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t     aof_mem_x_out,aof_mem_y_out,aof_out_prev_f0,out_best_f0,aof_w0_out,voiced_bit,aof_addr_sn,\n\t\t\t\t\t\t\t aof_addr_mem_fir,aof_in_mem_fir,aof_nlp_pitch,aof_read_fir,aof_write_fir,\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t aof_addr_nlp_sq,aof_in_sq,aof_read_sq,aof_write_sq,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t doneaof ,c_cmax,aof_check_i\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t );\n\t\t\t\t\t\t\t \nwire [N-1:0] aof_c_w0,aof_c_w1;\nreg aof_voiced1;\t\t\t\n\nreg [9:0] i1,j1;\t\n\n\nreg startspeech;\nreg [N-1:0] s_out_sn;\nwire [N-1:0] E_speech,lsp0,lsp1,lsp2,lsp3,lsp4,lsp5,lsp6,lsp7,lsp8,lsp9,check_corr;\nwire [9:0] s_addr_sn;\nwire donespeech;\n\nspeech_to_uq_lsps_modified speech_module(startspeech,clk,rst,s_out_sn,\n\t\t\t\t\t\t\tE_speech,lsp0,lsp1,lsp2,lsp3,lsp4,lsp5,lsp6,lsp7,lsp8,lsp9,s_addr_sn,\n\t\t\t\t\t\t\tdonespeech);\n\n\t\t\t\t\t\t\t\n\n\nreg startewoe;\nreg [N-1:0] encode_model_wo,encode_in_e;\nreg [N-1:0] xq0, xq1;\nwire [N-1:0] encode_out_n1,e_out_xq0,e_out_xq1;\nwire doneewoe;\n\n\nencode_WoE encode_module(startewoe,clk,rst,encode_model_wo,encode_in_e,xq0,xq1,e_out_xq0,e_out_xq1,encode_out_n1,doneewoe);\n\t\t \nreg [3:0] lsp;\nreg [7:0] toGray;\n\n\n\nreg [3:0] clsp0,clsp1,clsp2,clsp3,clsp4,clsp5,clsp6,clsp7,clsp8,clsp9;\nreg start_elsp;\nreg [3:0] in_index;\nreg [N-1:0] in_lsp0,in_lsp1,in_lsp2,in_lsp3,in_lsp4,in_lsp5,in_lsp6,in_lsp7,in_lsp8,in_lsp9;\n\nwire [3:0] out_index;\nwire done_elsp;\n\nencode_lsp_scalar_index e_lsp_scalar(start_elsp,clk,rst,in_index,\n\t\t\t\t\t\t\t\t\tin_lsp0,in_lsp1,in_lsp2,in_lsp3,in_lsp4,in_lsp5,in_lsp6,in_lsp7,in_lsp8,in_lsp9,\n\t\t\t\t\t\t\t\t\tout_index,\n\t\t\t\t\t\t\t\t\tdone_elsp);\n\n\n\n\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\t\tSTATE <= START;\n\telse\n\t\tSTATE <= NEXT_STATE;\n\nend\n\n\nalways@(*)\nbegin\n\tcase(STATE)\n\t\n\t\t \n\n\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t   \n\t   \n\t\n\t\n\t\t\n\t\t\n\n\n\n\n\n\n\n\n\n\t\t\n\t\tREAD_SN2:\n\t\tbegin\n\t\t\taddr_speech = i1;\n\t\t\taddr_sn = i1 + 10'd240;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_3:\n\t\tbegin\n\t\t\taddr_speech = i1;\n\t\t\taddr_sn = i1 + 10'd240;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_4:\n\t\tbegin\n\t\t\taddr_speech = i1;\n\t\t\taddr_sn = i1 + 10'd240;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_DATA_SN2:\n\t\tbegin\n\t\t\t\n\t\t\twrite_c2_sn = out_speech;\n\t\t\taddr_speech = i1;\n\t\t\taddr_sn = i1 + 10'd240;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\t\t\n\t\tSTART_AOF1:\n\t\tbegin\n\t\t\t\n\t\t\t\n\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\n\t\t\t \n\n\n\n\n\n\n\n\n\n  \n\t\tend\n\t\n\t\tRUN_AOF1:\n\t\tbegin\n\t\t\t\n\t\t\taof_out_sn = read_c2_sn_out;\n\t\t\taddr_sn = aof_addr_sn;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\n\t\t\taddr_mem_fir = aof_addr_mem_fir;\n\t\t\taof_out_mem_fir = out_mem_fir;\n\t\t\tin_mem_fir = aof_in_mem_fir;\n\t\t\tread_fir = aof_read_fir;\n\t\t\twrite_fir = aof_write_fir;\n\t\t\t\t\n\t\t\taddr_nlp_sq = aof_addr_nlp_sq;\n\t\t\taof_out_sq = out_sq;\n\t\t\tin_sq = aof_in_sq;\n\t\t\tread_sq = aof_read_sq;\n\t\t\twrite_sq = aof_write_sq;\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\t\t\n\t\t\n\n\n\n\n\n\n\n\n\t\t\n\t\tREAD_SN4:\n\t\tbegin\n\t\t\taddr_speech = j1;\n\t\t\taddr_sn = j1 + 10'd160;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_5:\n\t\tbegin\n\t\t\taddr_speech = j1;\n\t\t\taddr_sn = j1 + 10'd160;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_6:\n\t\tbegin\n\t\t\taddr_speech = j1;\n\t\t\taddr_sn = j1 + 10'd160;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\tend\n\t\t\n\t\tREAD_DATA_SN4:\n\t\tbegin\n\t\t\twrite_c2_sn = out_speech;\n\t\t\taddr_speech = j1;\n\t\t\taddr_sn = j1 + 10'd160;\n\t\t\tre_c2_sn = 1'b0;\n\t\t\twe_c2_sn = 1'b1;\n\t\tend\n\t   \n\t\t\n\n\n\n\t\t\n\t\tSTART_AOF2:\n\t\tbegin\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\tend\n\n\t\tRUN_AOF2:\n\t\tbegin\n\t\t\taof_out_sn = read_c2_sn_out;\n\t\t\taddr_sn = aof_addr_sn;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\n\t\t\taddr_mem_fir = aof_addr_mem_fir;\n\t\t\taof_out_mem_fir = out_mem_fir;\n\t\t\tin_mem_fir = aof_in_mem_fir;\n\t\t\tread_fir = aof_read_fir;\n\t\t\twrite_fir = aof_write_fir;\n\t\t\t\t\n\t\t\taddr_nlp_sq = aof_addr_nlp_sq;\n\t\t\taof_out_sq = out_sq;\n\t\t\tin_sq = aof_in_sq;\n\t\t\tread_sq = aof_read_sq;\n\t\t\twrite_sq = aof_write_sq;\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\t\t\n\t\t\n\t\tSTART_SPEECH:\n\t\tbegin\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\n\t\tRUN_SPEECH:\n\t\tbegin\n\t\t\ts_out_sn = read_c2_sn_out;\n\t\t\taddr_sn = s_addr_sn; \n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\n\t\t\n\t\t\n\tAA_SET_ADDR:\n\tbegin\n\t\taddr_sn = 10'd248;\n\t\twe_c2_sn = 1'b0;\n\t\tre_c2_sn = 1'b1;\n\t\t\n\tend\n\t\n\tAA_SET_ADDR1:\n\tbegin\n\t\t\taddr_sn = 10'd248;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\t\n\tend\n\t\n\tAA_SET_ADDR2:\n\tbegin\n\t\t\taddr_sn = 10'd248;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\t\t\n\tend\n\t\n\tAA_SET_ADDR_GET:\n\tbegin\n\t\t\taddr_sn = 10'd248;\n\t\t\twe_c2_sn = 1'b0;\n\t\t\tre_c2_sn = 1'b1;\n\n\tend\n\t\n\tdefault:\n\tbegin\n\t\t    addr_sn = 10'd0;\n\t\t\tre_c2_sn = 10'd0;\n\t\t\twe_c2_sn = 10'd0;\n\t\t\taddr_speech = 10'd0;\n\t\t\t\n\t\t\t\n\t\t\n\tend\n\t\n\tendcase\n\n\n\nend \n\n\nalways@(*)                              \nbegin\n\tcase(STATE)\n\n\tSTART:\n\tbegin\n\t\tif(start_oneframe)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_2; \n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START;\n\t\tend\n\t\t\n\tend\n\t\n\t\n\n\n\n\t\n\tINIT_FOR_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR2;\n\tend\n\t\n\tCHECK_FOR2:\n\tbegin\n\t\tif(i1 < N_SAMP)   \n\t\tbegin\n\t\t\tNEXT_STATE = READ_SN2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_AOF1;   \n\t\tend\n\tend\n\t\n\tREAD_SN2:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_3;\n\tend\n\t\n\tSET_DELAY_3:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_4;\n\tend\n\t\n\tSET_DELAY_4:\n\tbegin\n\t\tNEXT_STATE = READ_DATA_SN2;\n\tend\n\t\n\tREAD_DATA_SN2:\n\tbegin\n\t\tNEXT_STATE = INCR_FOR2; \n\tend\n    \n\t\n\tINCR_FOR2:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR2;\n\tend\n\t\n\tSTART_AOF1:\n\tbegin\n\t\tNEXT_STATE = RUN_AOF1;\n\tend\n\n\tRUN_AOF1:\n\tbegin\n\t\tif(doneaof)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_AOF1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_AOF1;\n\t\tend\n\tend\n\t\n\tGET_AOF1:\n\tbegin\n\t\tNEXT_STATE =  INIT_FOR_4; \n\tend\n\t\n\tINIT_FOR_4:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR_4;\n\tend\n\t\n\tCHECK_FOR_4:\n\tbegin\n\t\tif(j1 < 10'd160)   \n\t\tbegin\n\t\t\tNEXT_STATE = READ_SN4;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_AOF2;   \n\t\tend\n\tend\n\t\n\tREAD_SN4:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_5;\n\tend\n\t\n\tSET_DELAY_5:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_6;\n\tend\n\t\n\tSET_DELAY_6:\n\tbegin\n\t\tNEXT_STATE = READ_DATA_SN4;\n\tend\n\t\n\tREAD_DATA_SN4:\n\tbegin\n\t\tNEXT_STATE = INCR_FOR_4; \n\tend\n   \n\tINCR_FOR_4:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR_4;\n\tend\n\t\n\tSTART_AOF2:\n\tbegin\n\t\tNEXT_STATE = RUN_AOF2;\n\tend\n\n\tRUN_AOF2:\n\tbegin\n\t\tif(doneaof)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_AOF2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_AOF2;\n\t\tend\n\n\tend\n\t\n\tGET_AOF2:\n\tbegin\n\t\tNEXT_STATE = START_SPEECH;\n\tend\n\t\n\tSTART_SPEECH:\n\tbegin\n\t\tNEXT_STATE = RUN_SPEECH;\n\tend\n\n\tRUN_SPEECH:\n\tbegin\n\t\tif(donespeech)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_SPEECH;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_SPEECH;\n\t\tend\n\n\tend\n\t\n\tGET_SPEECH:\n\tbegin\n\t\tNEXT_STATE = START_ENCODEWOE;\n\tend\n\t\n\tSTART_ENCODEWOE:\n\tbegin\n\t\tNEXT_STATE = RUN_ENCODEWOE;\n\tend\n\n\tRUN_ENCODEWOE:\n\tbegin\n\t\tif(doneewoe)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_ENCODEWOE;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_ENCODEWOE;\n\t\tend\n\tend\n\t\n\tGET_ENCODEWOE:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_LSP;\n\tend\n\t\n\tINIT_FOR_LSP:\n\tbegin\n\t\tNEXT_STATE = CHECK_LSP;\n\tend\n\t\n\tCHECK_LSP:\n\tbegin\n\t\tif(lsp < 4'd10)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_DATA_LSP;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_ELSP1;\n\t\tend\n\tend\n\t\n\tSET_DATA_LSP:\n\tbegin\n\t\tNEXT_STATE = INCR_LSP;\n\tend\n\t\n\tINCR_LSP:\n\tbegin\n\t\tNEXT_STATE = CHECK_LSP;\n\tend\n\t\n\tSTART_ELSP1:\n\tbegin\n\t\tNEXT_STATE = SET_INDEX;\n\tend\n\t\n\tSET_INDEX:\n\tbegin\n\t\tNEXT_STATE = RUN_ELSP;\n\tend\n\n\tRUN_ELSP:\n\tbegin\n\t\tif(done_elsp)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_ELSP;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_ELSP;\n\t\tend\n\tend\n\t\n\tGET_ELSP:\n\tbegin\n\t\tNEXT_STATE = INCR_INDEX;\n\tend\n\t\n\tINCR_INDEX:\n\tbegin\n\t\tNEXT_STATE = CHECK_INDEX;\n\tend\n\t\t\n\tCHECK_INDEX:\n\tbegin\t\n\t\tif(in_index < 4'd10)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_INDEX;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INDEX_TO_GRAY;\n\t\tend\n\t\t\n\tend\n\t\n\tINDEX_TO_GRAY:\n\tbegin\n\t\tNEXT_STATE = SET_ENCODED_BITS;\n\tend\n\t\n\tSET_ENCODED_BITS:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\t\n\tAA_SET_ADDR:\n\tbegin\n\t\tNEXT_STATE = AA_SET_ADDR1;\n\tend\n\t\n\tAA_SET_ADDR1:\n\tbegin\n\t\tNEXT_STATE = AA_SET_ADDR2;\n\tend\n\t\n\tAA_SET_ADDR2:\n\tbegin\n\t\tNEXT_STATE = AA_SET_ADDR_GET;\n\tend\n\t\n\tAA_SET_ADDR_GET:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\t\n\t\n\tDONE:\n\tbegin\n\t\tNEXT_STATE = DONE;    \n\tend\n\n\tdefault:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tendcase\nend\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\tbegin\n\t\tdone_oneframe <= 1'b0;\n\t\t\t\n\tend\n\n\telse\n\tbegin\n\t\tcase(STATE)\n\n\t\tSTART:\n\t\tbegin\n\t\t\tdone_oneframe <= 1'b0;\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\t\n\n\n\n\t\t\n\t\tINIT_FOR_2:\n\t\tbegin\n\t\t\ti1 <= 10'd0;\n\t\t\tencoded_bits <= 48'd0;\n\t\t\tcheck_sum <= 32'b0;\n\t\tend\n\t\t\t\n\n\t\tCHECK_FOR2:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_SN2:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_3:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_4:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_DATA_SN2:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\t\n\t\t\n\t\tINCR_FOR2:\n\t\tbegin\n\t\t\ti1 <= i1 + 10'd1;\n\t\tend\n\n\n\t\tSTART_AOF1:\n\t\tbegin\n\t\t\tstartaof <= 1'b1;\n\t\t\t\t\n\t\t    aof_mem_x_in <= 32'b0;\n\t\t\taof_mem_y_in <= 32'b0;\n\t\t\taof_in_prev_f0 <= {16'd50,16'd0};   \n\t\t\t\n\t\t\t\n\n\n\t\t\t\n\t\tend\n\n\t\tRUN_AOF1:\n\t\tbegin\t\t\t\n\t\t\tstartaof <= 1'b0;\n\t\tend\n\t\t\n\t\tGET_AOF1:\n\t\tbegin\n\t\t\t\n\t\t\taof_voiced1 <= voiced_bit;\n\t\t\tc_w0_1 <= aof_w0_out;\n\t\t\t\n\t\t\tcheck_pitch1 <= aof_nlp_pitch;\n\t\t\tc_cmax1 <= c_cmax;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tc_encode_model_wo <= aof_w0_out;\n\t\t\t\n\t\t\t\n\t\t\tout_mem_x <= aof_mem_x_out;\n\t\t\tout_mem_y <= aof_mem_y_out;\n\t\t\tout_prevf0 <= aof_out_prev_f0;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\t\n\t\tINIT_FOR_4:\n\t\tbegin\n\t\t\tj1 <= 10'd0;\n\t\tend\n\t\t\n\t\tCHECK_FOR_4:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_SN4:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_5:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_6:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tREAD_DATA_SN4:\n\t\tbegin\n\t\t\t\n\t\tend\n\t   \n\t\tINCR_FOR_4:\n\t\tbegin\n\t\t\tj1 <= j1 + 10'd1;\n\t\tend\n\t\t\n\t\tSTART_AOF2:\n\t\tbegin\n\t\t\tstartaof <= 1'b1;\n\t\t\t\t\n\t\t    aof_mem_x_in <= aof_mem_x_out;\n\t\t\taof_mem_y_in <= aof_mem_y_out;\n\t\t\taof_in_prev_f0 <= aof_out_prev_f0;   \n\t\tend\n\n\t\tRUN_AOF2:\n\t\tbegin\n\t\t\tstartaof <= 1'b0;\n\t\tend\n\t\t\n\t\tGET_AOF2:\n\t\tbegin\n\t\t\t\n\t\t\tc_encode_model_wo <= aof_w0_out;\n\t\t\t\n\t\t\tout_mem_x <= aof_mem_x_out;\n\t\t\tout_mem_y <= aof_mem_y_out;\n\t\t\tout_prevf0 <= aof_out_prev_f0;\n\t\t\t\n\t\t\tencoded_bits <= {aof_voiced1,voiced_bit,46'd0};\n\t\tend\n\t\t\n\t\tSTART_SPEECH:\n\t\tbegin\n\t\t\tstartspeech <= 1'b1;\n\t\t\t\n\t\tend\n\n\t\tRUN_SPEECH:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tstartspeech <= 1'b0;\n\t\tend\n\t\t\n\t\tGET_SPEECH:\n\t\tbegin\n\t\t\tc_e <= E_speech;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tc_pitch1 <= lsp0;\n\t\t\tc_pitch2 <= lsp1;\n\t\tend\n\t\t\n\t\tSTART_ENCODEWOE:\n\t\tbegin\n\t\t\tstartewoe <= 1'b1;\n\t\t\tencode_in_e <= E_speech;\n\t\t\tencode_model_wo <= aof_w0_out;\n\t\t\tc_encode_model_wo <= aof_w0_out;\n\t\t\n\n\t\t\txq0 <= 32'b0;\n\t\t\txq1 <= 32'b0; \n\t\t\t\n\t\t\t\n\n\t\tend\n\n\t\tRUN_ENCODEWOE:\n\t\tbegin\n\t\t\tstartewoe <= 1'b0;\n\t\tend\n\t\t\n\t\tGET_ENCODEWOE:\n\t\tbegin\n\t\t\tc_sn <= encode_out_n1; \n\t\t\t\n\t\t\tout_xq0 <= e_out_xq0;\n\t\t\tout_xq1 <= e_out_xq1;\n\t\t\t\n\t\t\ttoGray[7] <= encode_out_n1[7];\n\t\t\ttoGray[6] <= encode_out_n1[7] ^ encode_out_n1[6];\n\t\t\ttoGray[5] <= encode_out_n1[6] ^ encode_out_n1[5];\n\t\t\ttoGray[4] <= encode_out_n1[5] ^ encode_out_n1[4];\n\t\t\ttoGray[3] <= encode_out_n1[4] ^ encode_out_n1[3];\n\t\t\ttoGray[2] <= encode_out_n1[3] ^ encode_out_n1[2];\n\t\t\ttoGray[1] <= encode_out_n1[2] ^ encode_out_n1[1];\n\t\t\ttoGray[0] <= encode_out_n1[1] ^ encode_out_n1[0];\n\t\tend\n\t\t\n\t\tINIT_FOR_LSP:\n\t\tbegin\n\t\t\tlsp <= 4'd0;\n\t\t\tencoded_bits <= {encoded_bits[47:46],toGray,38'd0};\n\t\tend\n\t\t\n\t\tCHECK_LSP:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DATA_LSP:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\t\tcase(lsp)\n\t\t\t\n\t\t\t4'd0:\t\n\t\t\tbegin\n\t\t\t\tin_lsp0 <= lsp0;\n\t\t\tend\n\t\t\t4'd1:\n\t\t\tbegin\n\t\t\t\tin_lsp1 <= lsp1;\n\t\t\tend\n\t\t\t4'd2:\n\t\t\tbegin\n\t\t\t\tin_lsp2 <= lsp2;\n\t\t\tend\t\t\t\n\t\t\t4'd3:\t\n\t\t\tbegin\n\t\t\t\tin_lsp3 <= lsp3;\n\t\t\tend\t\n\t\t\t4'd4:\n\t\t\tbegin\n\t\t\t\tin_lsp4 <= lsp4;\n\t\t\tend\t\t\t\t\n\t\t\t4'd5:\t\n\t\t\tbegin\n\t\t\t\tin_lsp5 <= lsp5;\n\t\t\tend\t\n\t\t\t4'd6:\n\t\t\tbegin\n\t\t\t\tin_lsp6 <= lsp6;\n\t\t\tend\t\t\t\t\n\t\t\t4'd7:\n\t\t\tbegin\n\t\t\t\tin_lsp7 <= lsp7;\n\t\t\tend\t\t\t\t\n\t\t\t4'd8:\n\t\t\tbegin\n\t\t\t\tin_lsp8 <= lsp8;\n\t\t\tend\t\t\t\t\n\t\t\t4'd9:\t\n\t\t\tbegin\n\t\t\t\tin_lsp9 <= lsp9;\n\t\t\tend\t\n\t\t\t\n\t\t\tendcase\n\t\t\t\n\t\tend\n\t\t\n\t\tINCR_LSP:\n\t\tbegin\n\t\t\tlsp <= lsp + 4'd1;\n\t\tend\n\t\t\n\t\tSTART_ELSP1:\n\t\tbegin\n\t\t\tin_index <= 4'd0;\n\t\tend\n\t\t\n\t\tSET_INDEX:\n\t\tbegin\n\t\t\tstart_elsp <= 1'b1;\n\t\tend\n\n\t\tRUN_ELSP:\n\t\tbegin\n\t\t\tstart_elsp <= 1'b0;\t\t\n\t\tend\n\t\t\n\t\tGET_ELSP:\n\t\tbegin\n\t\t\tcase(in_index)\n\t\t\t4'd0:\n\t\t\t\tbegin\n\t\t\t\tclsp0 <= out_index;\n\t\t\t\tend\n\t\t\t4'd1:\t\n\t\t\t\tbegin\n\t\t\t\tclsp1 <= out_index;\n\t\t\t\tend\n\t\t\t4'd2:\t\n\t\t\t\tbegin\n\t\t\t\tclsp2 <= out_index;\n\t\t\t\tend\n\t\t\t4'd3:\t\n\t\t\t\tbegin\n\t\t\t\tclsp3 <= out_index;\n\t\t\t\tend\n\t\t\t4'd4:\n\t\t\t\tbegin\n\t\t\t\tclsp4 <= out_index;\n\t\t\t\tend\n\t\t\t4'd5:\t\n\t\t\t\tbegin\n\t\t\t\tclsp5 <= out_index;\n\t\t\t\tend\n\t\t\t4'd6:\t\n\t\t\t\tbegin\n\t\t\t\tclsp6 <= out_index;\n\t\t\t\tend\n\t\t\t4'd7:\n\t\t\t\tbegin\n\t\t\t\tclsp7 <= out_index;\n\t\t\t\tend\n\t\t\t4'd8:\n\t\t\t\tbegin\n\t\t\t\tclsp8 <= out_index;\n\t\t\t\tend\n\t\t\t4'd9:\n\t\t\t\tbegin\n\t\t\t\tclsp9 <= out_index;\n\t\t\t\tend\n\t\t\tendcase \n\t\t\t\t\t\t\t\t\t\n\t\tend\n\t\t\n\t\tINCR_INDEX:\n\t\tbegin\n\t\t\tin_index <= in_index + 4'd1;\n\t\tend\n\t\t\n\t\tCHECK_INDEX:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tINDEX_TO_GRAY:\n\t\tbegin\n\t\t\tcase(clsp0)\n\t\t\t\t4'd0 : clsp0 <= 4'd0;\n\t\t\t\t4'd1 : clsp0 <= 4'd1;\n\t\t\t\t4'd2 : clsp0 <= 4'd3;\n\t\t\t\t4'd3 : clsp0 <= 4'd2;\n\t\t\t\t4'd4 : clsp0 <= 4'd6;\n\t\t\t\t4'd5 : clsp0 <= 4'd7;\n\t\t\t\t4'd6 : clsp0 <= 4'd5;\n\t\t\t\t4'd7 : clsp0 <= 4'd4;\n\t\t\t\t4'd8 : clsp0 <= 4'd12;\n\t\t\t\t4'd9 : clsp0 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp1)\n\t\t\t\t4'd0 : clsp1 <= 4'd0;\n\t\t\t\t4'd1 : clsp1 <= 4'd1;\n\t\t\t\t4'd2 : clsp1 <= 4'd3;\n\t\t\t\t4'd3 : clsp1 <= 4'd2;\n\t\t\t\t4'd4 : clsp1 <= 4'd6;\n\t\t\t\t4'd5 : clsp1 <= 4'd7;\n\t\t\t\t4'd6 : clsp1 <= 4'd5;\n\t\t\t\t4'd7 : clsp1 <= 4'd4;\n\t\t\t\t4'd8 : clsp1 <= 4'd12;\n\t\t\t\t4'd9 : clsp1 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp2)\n\t\t\t\t4'd0 : clsp2 <= 4'd0;\n\t\t\t\t4'd1 : clsp2 <= 4'd1;\n\t\t\t\t4'd2 : clsp2 <= 4'd3;\n\t\t\t\t4'd3 : clsp2 <= 4'd2;\n\t\t\t\t4'd4 : clsp2 <= 4'd6;\n\t\t\t\t4'd5 : clsp2 <= 4'd7;\n\t\t\t\t4'd6 : clsp2 <= 4'd5;\n\t\t\t\t4'd7 : clsp2 <= 4'd4;\n\t\t\t\t4'd8 : clsp2 <= 4'd12;\n\t\t\t\t4'd9 : clsp2 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp3)\n\t\t\t\t4'd0 : clsp3 <= 4'd0;\n\t\t\t\t4'd1 : clsp3 <= 4'd1;\n\t\t\t\t4'd2 : clsp3 <= 4'd3;\n\t\t\t\t4'd3 : clsp3 <= 4'd2;\n\t\t\t\t4'd4 : clsp3 <= 4'd6;\n\t\t\t\t4'd5 : clsp3 <= 4'd7;\n\t\t\t\t4'd6 : clsp3 <= 4'd5;\n\t\t\t\t4'd7 : clsp3 <= 4'd4;\n\t\t\t\t4'd8 : clsp3 <= 4'd12;\n\t\t\t\t4'd9 : clsp3 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp4)\n\t\t\t\t4'd0 : clsp4 <= 4'd0;\n\t\t\t\t4'd1 : clsp4 <= 4'd1;\n\t\t\t\t4'd2 : clsp4 <= 4'd3;\n\t\t\t\t4'd3 : clsp4 <= 4'd2;\n\t\t\t\t4'd4 : clsp4 <= 4'd6;\n\t\t\t\t4'd5 : clsp4 <= 4'd7;\n\t\t\t\t4'd6 : clsp4 <= 4'd5;\n\t\t\t\t4'd7 : clsp4 <= 4'd4;\n\t\t\t\t4'd8 : clsp4 <= 4'd12;\n\t\t\t\t4'd9 : clsp4 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp5)\n\t\t\t\t4'd0 : clsp5 <= 4'd0;\n\t\t\t\t4'd1 : clsp5 <= 4'd1;\n\t\t\t\t4'd2 : clsp5 <= 4'd3;\n\t\t\t\t4'd3 : clsp5 <= 4'd2;\n\t\t\t\t4'd4 : clsp5 <= 4'd6;\n\t\t\t\t4'd5 : clsp5 <= 4'd7;\n\t\t\t\t4'd6 : clsp5 <= 4'd5;\n\t\t\t\t4'd7 : clsp5 <= 4'd4;\n\t\t\t\t4'd8 : clsp5 <= 4'd12;\n\t\t\t\t4'd9 : clsp5 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp6)\n\t\t\t\t4'd0 : clsp6 <= 4'd0;\n\t\t\t\t4'd1 : clsp6 <= 4'd1;\n\t\t\t\t4'd2 : clsp6 <= 4'd3;\n\t\t\t\t4'd3 : clsp6 <= 4'd2;\n\t\t\t\t4'd4 : clsp6 <= 4'd6;\n\t\t\t\t4'd5 : clsp6 <= 4'd7;\n\t\t\t\t4'd6 : clsp6 <= 4'd5;\n\t\t\t\t4'd7 : clsp6 <= 4'd4;\n\t\t\t\t4'd8 : clsp6 <= 4'd12;\n\t\t\t\t4'd9 : clsp6 <= 4'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp7)\n\t\t\t\t4'd0 : clsp7 <= 3'd0;\n\t\t\t\t4'd1 : clsp7 <= 3'd1;\n\t\t\t\t4'd2 : clsp7 <= 3'd3;\n\t\t\t\t4'd3 : clsp7 <= 3'd2;\n\t\t\t\t4'd4 : clsp7 <= 3'd6;\n\t\t\t\t4'd5 : clsp7 <= 3'd7;\n\t\t\t\t4'd6 : clsp7 <= 3'd5;\n\t\t\t\t4'd7 : clsp7 <= 3'd4;\n\t\t\t\t4'd8 : clsp7 <= 3'd12;\n\t\t\t\t4'd9 : clsp7 <= 3'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp8)\n\t\t\t\t4'd0 : clsp8 <= 3'd0;\n\t\t\t\t4'd1 : clsp8 <= 3'd1;\n\t\t\t\t4'd2 : clsp8 <= 3'd3;\n\t\t\t\t4'd3 : clsp8 <= 3'd2;\n\t\t\t\t4'd4 : clsp8 <= 3'd6;\n\t\t\t\t4'd5 : clsp8 <= 3'd7;\n\t\t\t\t4'd6 : clsp8 <= 3'd5;\n\t\t\t\t4'd7 : clsp8 <= 3'd4;\n\t\t\t\t4'd8 : clsp8 <= 3'd12;\n\t\t\t\t4'd9 : clsp8 <= 3'd13;\n\n\t\t\tendcase\n\t\t\t\n\t\t\tcase(clsp9)\n\t\t\t\t4'd0 : clsp9 <= 2'd0;\n\t\t\t\t4'd1 : clsp9 <= 2'd1;\n\t\t\t\t4'd2 : clsp9 <= 2'd3;\n\t\t\t\t4'd3 : clsp9 <= 2'd2;\n\t\t\t\t4'd4 : clsp9 <= 2'd6;\n\t\t\t\t4'd5 : clsp9 <= 2'd7;\n\t\t\t\t4'd6 : clsp9 <= 2'd5;\n\t\t\t\t4'd7 : clsp9 <= 2'd4;\n\t\t\t\t4'd8 : clsp9 <= 2'd12;\n\t\t\t\t4'd9 : clsp9 <= 2'd13;\n\t\t\tendcase\n\t\t\t\n\t\t\t\n\t\tend\n\t\n\t\tSET_ENCODED_BITS:\n\t\tbegin\n\t\t\tencoded_bits <= {encoded_bits[47:38],clsp0,clsp1,clsp2,clsp3,clsp4,\n\t\t\t\t\t\t\t\t\t\t\t\tclsp5,clsp6,clsp7[2:0],clsp8[2:0],clsp9[1:0],2'd0};\n\t\tend\t\n\t\t\n\t\t\n\t\t\n\t\tAA_SET_ADDR:\n\t\tbegin\n\t\t\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tAA_SET_ADDR1:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tAA_SET_ADDR2:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tAA_SET_ADDR_GET:\n\t\tbegin\n\t\t\t\n\t\tend\t\n\t\t\n\t\tDONE:\n\t\tbegin\n\t\t\tdone_oneframe <= 1'b1;\n\t\t\t\t\t\n\t\tend\n\n\t\tendcase\n\tend\n\nend\n\n\nendmodule</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: CODEC2_one_frame_encoder. Module specification: This module implements a single-frame encoder for the CODEC2 audio compression algorithm. It processes input speech samples, performs analysis on two parts of the frame, extracts various parameters (pitch, LSP coefficients, energy), and encodes them into a 48-bit compressed representation. The module has input ports for start_oneframe, clk, and rst signals, and output ports for encoded data (encoded_bits), intermediate values (out_mem_x, out_mem_y, out_prevf0, out_xq0, out_xq1), and various encoded parameters (c_encode_model_wo, c_pitch1, c_pitch2, c_cmax1, c_cmax2, c_e, c_sn). Internal signals include control signals for sub-modules (startaof, startspeech"
                }
            ]
        }
    ]
}