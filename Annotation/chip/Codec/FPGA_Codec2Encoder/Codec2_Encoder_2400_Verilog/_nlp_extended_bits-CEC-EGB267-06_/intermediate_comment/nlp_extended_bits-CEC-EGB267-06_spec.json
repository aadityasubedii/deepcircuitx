{
    "spec": "Module name: nlp_extended_bits. Module specification: The nlp_extended_bits module implements a Natural Language Processing (NLP) algorithm with extended bit precision for pitch detection. It processes input signals through multiple stages, including initialization, notch filtering, Fast Fourier Transform (FFT), and post-processing. The module has input ports for starting the process (startnlp), clock (clk), reset (rst), input memory values (nlp_mem_x, nlp_mem_y), and previous fundamental frequency (prev_f0). Output ports include the best fundamental frequency (best_f0), previous fundamental frequency (out_prev_f0), completion signal (donenlp), pitch value (pitch), and several debug outputs. Internally, it uses numerous signals for memory addressing, data processing, and state management. The module operates using a state machine with multiple stages: initialization, data processing loops, FFT calculation,",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: nlp_extended_bits.\n\nExplanation: This module appears to be implementing a Natural Language Processing (NLP) algorithm with extended bit precision. It performs various operations including initialization, data processing through multiple loops, Fast Fourier Transform (FFT), and post-processing. The module handles input signals, processes them through several stages including notch filtering, FFT calculation, and peak detection. It outputs a pitch value and other related parameters. The module uses a state machine to control its operations and includes various memory components and mathematical operations to perform its calculations."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nBased on the provided Verilog code, here are the input and output ports of the nlp_extended_bits module:\n\nInput ports: startnlp, clk, rst, nlp_mem_x, nlp_mem_y, prev_f0. Explanation:\n- startnlp: Starts the NLP processing\n- clk: Clock signal for synchronous operations\n- rst: Reset signal\n- nlp_mem_x, nlp_mem_y: 80-bit input memory values for NLP processing\n- prev_f0: 32-bit previous fundamental frequency value\n\nOutput ports: best_f0, out_prev_f0, donenlp, pitch, check_cmax_bin, check_i, check_fw_real, check_in_real, clk_fft. Explanation:\n- best_f0: 32-bit best fundamental frequency output\n- out_prev_f0: 32-bit output of the previous fundamental frequency\n- donenlp: Signal indicating NLP processing is complete\n- pitch: 32-bit pitch output\n- check_cmax_bin: 10-bit output for debugging/checking purposes\n- check_i: 10-bit output for debugging/checking purposes\n- check_fw_real: 80-bit output for debugging/checking purposes\n- check_in_real: 80-bit output for debugging/checking purposes\n- clk_fft: 40-bit output related to FFT clock cycles"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code, here are the internal signals and their explanations:\n\nInternal signals: i1, i, j, addr_sn, out_sn, addr_mem_fir, in_mem_fir, read_fir, write_fir, out_mem_fir, addr_nlp_sq, in_sq, read_sq, write_sq, out_sq, STATE, NEXT_STATE, ms1_in1, ms1_in2, as1_in1, as1_in2, ms1_out, as1_out, t_mem_x, t_mem_y, m1, m2, m3, m4, a1, a2, notch, mem_x, mem_y, mem_fir_j_1, startdiv, div_in, div_ans, donediv, m1_in1, m1_in2, m1_out, addr_nlp_w, data_out_nlp_w, addr_nlp_fir, data_out_nlp_fir, addr_in_imag, addr_in_real, addr_out_real, addr_out_imag, in_imag_data, in_real_data, write_fft_real, write_fft_imag, out_fft_real, out_fft_imag, startfft, donefft, fft_in_imag_data, fft_in_real_data, gmax, gmax_bin, startppsm, pp_gmax, pp_gmax_bin, pp_prev_f0, pp_best_f0, out_sq_i_n, clk_nlp.\n\nExplanation:\n- i1, i, j: Loop counters for various operations\n- addr_sn, out_sn: Address and output for sn memory\n- addr_mem_fir, in_mem_fir, read_fir, write_fir, out_mem_fir: Signals for FIR memory operations\n- addr_nlp_sq, in_sq, read_sq, write_sq, out_sq: Signals for NLP square memory operations\n- STATE, NEXT_STATE: Current and next state for the state machine\n- ms1_in1, ms1_in2, as1_in1, as1_in2, ms1_out, as1_out: Inputs and outputs for multiplication and addition operations\n- t_mem_x, t_mem_y: Temporary memory values\n- m1, m2, m3, m4, a1, a2: Intermediate values for calculations\n- notch, mem_x, mem_y: Signals for notch filtering\n- mem_fir_j_1: FIR memory value\n- startdiv, div_in, div_ans, donediv: Signals for division operation\n- m1_in1, m1_in2, m1_out: Inputs and output for multiplication operation\n- addr_nlp_w, data_out_nlp_w: Address and data for NLP window memory\n- addr_nlp_fir, data_out_nlp_fir: Address and data for NLP FIR memory\n- addr_in_imag, addr_in_real, addr_out_real, addr_out_imag, in_imag_data, in_real_data, write_fft_real, write_fft_imag, out_fft_real, out_fft_imag: Signals for FFT input/output operations\n- startfft, donefft: Control signals for FFT operation\n- fft_in_imag_data, fft_in_real_data: FFT input data\n- gmax, gmax_bin: Maximum value and its bin for peak detection\n- startppsm, pp_gmax, pp_gmax_bin, pp_prev_f0, pp_best_f0: Signals for post-processing sub-multiples calculation\n- out_sq_i_n: Output square value\n- clk_nlp: Clock counter for NLP operations\n\nThese signals are used throughout the module for various operations including memory access, mathematical calculations, state control, and data processing in the NLP algorithm."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t\n     module nlp_extended_bits (startnlp,clk,rst, \n\t\t\tnlp_mem_x,nlp_mem_y,prev_f0,best_f0,out_prev_f0,pitch,\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tdonenlp, check_cmax_bin, check_i,check_fw_real,check_in_real,clk_fft\n\t\t\t\n\t\t\t);   \n\t\t\t \n\t\t\t \n\t\t\tparameter N = 32;\n\t\t\tparameter Q = 16;\n\t\t\t\n\t\t\tparameter N1 = 80;\n\t\t\tparameter Q1 = 16;\n\t\t\t\n\t\t     input clk,rst,startnlp;\n\t\t\tinput [N1-1:0] nlp_mem_x,nlp_mem_y;\n\t\t\t\n\t\t\tinput [N-1:0] prev_f0;\n\t\t\t\n\t\t\toutput reg [N-1:0] best_f0,out_prev_f0;\n\n\t\t\toutput reg donenlp;\n\t\t\toutput reg [N-1:0] pitch;\n\t\t\treg [N1-1:0] nlp_mem_x_out,nlp_mem_y_out;\n\t\t\t\n\t\t\toutput reg [N1-1:0] check_fw_real;\n\t\t\t\n\t\t\t reg [N1-1:0] check_in_sq;\n\t\t\t output reg [N1-1:0] check_in_real;\n\t\t\t reg [N1-1:0] check_in_imag;\n\t\t\t  reg [4:0] sig;\n\t\t\t  reg [N1-1:0] check_gmax;\n\t\t\t  reg [9:0] check_gmax_bin;\n\t\t\t\n\t\t\toutput reg [9:0] check_cmax_bin,check_i;\n\t\t\toutput reg [39:0] clk_fft;\n\t\t\t\n\t\t\t\n\t\t\treg [9:0] i1;\n\t\t\treg [39:0] clk_nlp;\n\t\n\t\t   \n\t\t\t\t reg [9:0] addr_sn;\n\t\t\t\twire [N-1:0] out_sn;\n\t\t\t\tRAM_c2_sn_test_nlp c2_sn (addr_sn,clk,,1,0,out_sn);  \n\t\t \n\t\t\t\t  reg [9:0] addr_mem_fir;\n\t\t\t\t reg [N1-1:0] in_mem_fir;\n\t\t\t\t reg read_fir, write_fir;\n\t\t\t\t wire [N1-1:0] out_mem_fir;\n\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t RAM_nlp_mem_fir_80  mem_fir   (addr_mem_fir,clk,in_mem_fir,read_fir,write_fir,out_mem_fir); \t\n\n\t\t\t\t\n\t\t\t\t reg [9:0] addr_nlp_sq;\n\t\t\t\t reg [N1-1:0] in_sq;\n\t\t\t\t reg read_sq,write_sq;\n\t\t\t\t wire [N1-1:0] out_sq;\n\n\t\t\t\t RAM_nlp_sq_80    nlp_sq\t   (addr_nlp_sq,clk,in_sq,read_sq,write_sq,out_sq);    \n  \n\n\n\n\nparameter START = 8'd0,\n          INIT_FOR_1 = 8'd1,\n          CHECK_I = 8'd2,\n          READ_SN = 8'd3,\n          SET_DELAY_1 = 8'd4,\n          SET_DELAY_2 = 8'd5,\n          CALC_SN_SQ = 8'd6,\n          SET_NLP_SQ = 8'd7,\n          INCR_I = 8'd8,\n\t\t\t INIT_FOR_2 = 8'd9,\n          CHECK_I_2 = 8'd10,\n          SET_ADDR_SQ_2 = 8'd11,\n          SET_DELAY_3 = 8'd12,\n          SET_DELAY_4 = 8'd13,\n          NOTCH_1 = 8'd14,\n          NOTCH_2 = 8'd15,\n          SET_MEM_X = 8'd16,\n          SET_MEM_Y = 8'd17,\n          SET_NEW_SQ_1 = 8'd18,\n          SET_NEW_SQ_2 = 8'd19,\n          INCR_I_2 = 8'd20,\n\t\t    INIT_FOR_3 = 8'd21,\n          CHECK_I_3 = 8'd22,\n          INNER_FOR_1 = 8'd23,\n          CHECK_J = 8'd24,\n          SET_ADDR_FIR = 8'd25,\n          SET_DELAY_5 = 8'd26,\n          SET_DELAY_6 = 8'd27,\n          GET_FIR_1 = 8'd28,\n          ADDR_WRITE_FIR = 8'd29,\n          GET_FIR_2 = 8'd30,\n          INCR_J = 8'd31,\n          ADDR_LAST_FIR = 8'd32,\n          SET_DELAY_7 = 8'd33,\n          SET_DELAY_8 = 8'd34,\n          SET_LAST_FIR = 8'd35,\n          INNER_FOR_2 = 8'd36,\n          CHECK_J_2 = 8'd37,\n          READ_FIR1 = 8'd38,\n          SET_DELAY_9 = 8'd39,\n          SET_DELAY_10 = 8'd40,\n          MULT_NLP_FIR = 8'd41,\n          ADDR_FIR_SQ = 8'd42,\n          SET_SQ_FIR = 8'd43,\n          INCR_J_2 = 8'd44,\n          INCR_I3 = 8'd45,\n          DONE = 8'd46,\n\t\t    SET_SQ_0 = 8'd47,\n\t\t    SET_DELAY_11 = 8'd48,\n\t\t    SET_DELAY_12 = 8'd49,\n\t\t    FFT_INIT = 8'd50,\n          FFT_ADDR = 8'd51,\n          DELAY_FFT_1 = 8'd52,\n          DELAY_FFT_2 = 8'd53,\n          WRITE_FFT_INIT = 8'd54,\n          INCR_I4 = 8'd55,\n          CHECK_I4 = 8'd56,\n          INIT_FOR_4 = 8'd57,\n          CHECK_I5 = 8'd58,\n          CALC_FFT_ADDR = 8'd59,\n          FOR_DELAY_1 = 8'd60,\n          FOR_DELAY_2 = 8'd61,\n          CALC_FFT_SQ_W = 8'd62,\n          WRITE_FFT_REAL1 = 8'd63,\n          INCR_I_5 = 8'd64,\n\t\t    START_DFT = 8'd65,\n\t\t    RUN_DFT = 8'd66,\n\t\t    INIT_FOR_5 = 8'd67,\n          CHECK_I_6 = 8'd68,\n          SET_ADDR_FOR_5 = 8'd69,\n          FOR_5_DELAY1 = 8'd70,\n          FOR_5_DELAY2 = 8'd71,\n          MULT_REAL_IMAGE_SQ = 8'd72,\n          ADD_REAL_IMAG_SQ = 8'd73,\n          SET_FW_REAL_ADD = 8'd74,\n          INCR_I6 = 8'd75,\n\t\t    RUN_DFT_2 = 8'd76,\n\t\t\t SET_GMAX_GMAX_BIN = 8'd77,\n\t\t\t INIT_FOR_GMAX = 8'd78,\n\t\t\t CHECK_I_GMAX = 8'd79,\n\t\t\t SET_ADDR_FW_GMAX = 8'd80,\n\t\t\t SET_DELAY_GMAX1 = 8'd81,\n\t\t\t SET_DELAY_GMAX2 = 8'd82,\n\t\t\t SET_IF_GMAX = 8'd83,\n\t\t\t INCR_I_GMAX = 8'd84,\n\t\t\t START_PPSM = 8'd85,\n\t\t\t GET_BESTF0 = 8'd86,\n\t\t\t INIT_FOR_SQ = 8'd87,\n\t\t\t CHECK_FOR_SQ = 8'd88,\n\t\t\t SET_ADDR_FOR_SQ = 8'd89,\n\t\t\t FOR_SQ_DELAY1 = 8'd90,\n\t\t\t FOR_SQ_DELAY2 = 8'd91,\n\t\t\t GET_SQ_I_N = 8'd92,\n\t\t\t SET_SQ_I_N = 8'd93,\n\t\t\t INCR_SQ_I = 8'd94,\n\t\t\t START_DIV_BEST0 = 8'd95,\n\t\t\t CALC_DIV_BESTF0 = 8'd96,\n\t\t\t SET_PITCH = 8'd97,\n\t\t\t RUN_PPSM = 8'd98,\n\t\t\t C_FFT1 = 8'd99,\n\t\t\t C_FFT1D1 = 8'd100,\n\t\t\t C_FFT1D2 = 8'd101,\n\t\t\t C_FFT2  = 8'd102,\n\t\t\t CHECK_IF_GMAX = 8'd103,\n\t\t\t SET_DELAY_41 = 8'd104,\n\t\t\t SET_DELAY_42 = 8'd105,\n\t\t\t SET_DELAY_81 = 8'd106,\n\t\t\t SET_DELAY_82 = 8'd107,\n\t\t\t SET_DELAY_2_1 = 8'd108,\n\t\t\t SET_DELAY_2_2 = 8'd109;\n\t\t  \n\nreg [7:0] STATE, NEXT_STATE;\n\nparameter [9:0]\n\t\t\t\t\n\t\t\t\tDEC = 10'd5;\n\t\t\t\t\nparameter [N-1:0] COEFF \t= 32'b00000000000000001111001100110011,\n\t\t\t\t\t\tONE   \t= 32'b00000000000000010000000000000000,\n\t\t\t\t\t\tNLP_FS \t= {16'd8000,16'd0};\n\t\t\t\t\t\t\nparameter [N1-1:0] COEFF_S = {64'b0,16'b1111001100110011};\n\n\n\t\t\t\t  \n\n\n\t\t\t\t\t\n\n\n\n\n\n\nreg [N1-1:0] ms1_in1,ms1_in2,as1_in1,as1_in2;\nwire [N1-1:0] ms1_out,as1_out;\n\nqmult  \t\t\t#(Q1,N1) \t\t\tqmult96_1\t   (ms1_in1,ms1_in2,ms1_out);\nqadd   \t\t\t#(Q1,N1)\t\t\tadder96_1      (as1_in1,as1_in2,as1_out);\n\n\n\nreg [9:0] i,j;\nreg \t\t\t[N-1:0] \t\ta1_in1,a1_in2,a2_in1,a2_in2;\nwire \t\t\t[N-1:0] \t\ta1_out,a2_out;\n\n\nreg [N1-1:0] t_mem_x,t_mem_y;\nreg [N1-1:0] m1,m2,m3,m4,a1,a2;\n\n\n\nreg [N1-1:0] notch,mem_x,mem_y;\n\nreg [N1-1:0] mem_fir_j_1;\nreg startdiv;\nreg [N-1:0] div_in;\nwire [N-1:0] div_ans;\nwire donediv;\n\nreg [N-1:0] m1_in1,m1_in2;\nwire [N-1:0] m1_out;\nqmult  \t\t\t#(Q,N) \t\t\tqmult1\t   (m1_in1,m1_in2,m1_out);\nqadd   \t\t\t#(Q,N)\t\t\tadder1     (a1_in1,a1_in2,a1_out);\n\n\nqadd   \t\t\t#(Q,N)\t\t\tadder2     (a2_in1,a2_in2,a2_out);\n\nfpdiv_clk  \t  \t \t\t\t\tdivider\t   (startdiv,clk,rst,div_in,div_ans,donediv);\n\n\nreg [5:0] addr_nlp_w;\nwire [N1-1:0] data_out_nlp_w;\n\nROM_nlp_w    nlp_w (addr_nlp_w, data_out_nlp_w);\n\nreg [5:0] addr_nlp_fir;\nwire [N1-1:0] data_out_nlp_fir;\n\nROM_nlp_fir    nlp_fir (addr_nlp_fir, data_out_nlp_fir);\n\n\nreg [9:0] \t\taddr_in_imag,addr_in_real,addr_out_real,addr_out_imag;\nwire   [N1-1:0]\t\tin_imag_data,in_real_data;\n\t\t\nwire [9:0] fft_addr_in_imag,fft_addr_in_real,fft_addr_out_real,fft_addr_out_imag;\nreg [N1-1:0] write_fft_real;\nreg [N1-1:0] write_fft_imag; \n\nreg [9:0] addr_out_real_gmax,gmax_bin;\nreg [N1-1:0] write_fft_real_gmax;\nreg [N1-1:0] gmax;\nwire [N1-1:0] out_fft_real, out_fft_imag,fft_write_fft_real,fft_write_fft_imag,out_fft_real_gmax;\n\nreg read_in_fftr,read_in_ffti,write_in_fftr,write_in_ffti,re_out_fftr_gmax,we_out_fftr_gmax,\n\t\t\tre_fftr,re_ffti,we_fftr,we_ffti,re_out_fftr,re_out_ffti,we_out_fftr,we_out_ffti,startfft;\nreg [N1-1:0] write_in_fft_real,write_in_fft_imag;\nwire donefft,doneppsm;\n\nreg [N1-1:0] fft_in_imag_data,fft_in_real_data;\n\nreg [N-1:0] pp_m1_out;\nwire [N-1:0] pp_m1_in1,pp_m1_in2;\n\nreg startppsm;\nreg [N1-1:0] out_fw_real,pp_gmax;\nreg [9:0] pp_gmax_bin;\nreg [N-1:0] pp_prev_f0;\nwire [N-1:0] pp_best_f0;\nwire [9:0] addr_fw_real;\nreg [N1-1:0] out_sq_i_n;\n\nwire [9:0] c_cmax;\n\nreg [N1-1:0] gt1_in1,gt1_in2;\nwire [N1-1:0] c_fw_real,check_sig;\nwire gt1;\n\n\n\nRAM_in_fft_real_80     in_real\t   (addr_in_real,clk,write_in_fft_real,re_fftr,we_fftr,in_real_data);\nRAM_in_fft_imag_80     in_imag\t   (addr_in_imag,clk,write_in_fft_imag,re_ffti,we_ffti,in_imag_data);\n\nRAM_out_fft_real_80    fft_out_real(addr_out_real,clk,write_fft_real,re_out_fftr,we_out_fftr,out_fft_real);\nRAM_out_fft_imag_80    fft_out_imag(addr_out_imag,clk,write_fft_imag,re_out_ffti,we_out_ffti,out_fft_imag);\n\nRAM_out_fft_real_gmax_80    fft_out_real_gmax(addr_out_real_gmax,clk,write_fft_real_gmax,re_out_fftr_gmax,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twe_out_fftr_gmax,out_fft_real_gmax);\n\n\nfft_nlp_extended_bits fft_nlp_module (startfft,clk,rst,fft_in_imag_data,fft_in_real_data,\n\t\t\t\t\tfft_addr_in_imag,fft_addr_in_real,fft_addr_out_real,fft_addr_out_imag,\n\t\t\t\t\t\t\t\tfft_write_fft_real,fft_write_fft_imag,donefft,\n\t\t\t\t\t\t\t\tcheck_sig\n\t\t\t\t\t\t\t\t);\n\n\n\n  post_process_sub_multiples_calc  ppsm (startppsm,clk,rst,out_fw_real,\n\t\t\t\t\t\t\tpp_gmax,pp_gmax_bin,pp_prev_f0,pp_best_f0,addr_fw_real,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdoneppsm,c_cmax,c_fw_real);\n\t\t\t\t\t\t\t\n\nfpgreaterthan\t#(Q1,N1)    \t\tfpgt1      (gt1_in1,gt1_in2,gt1);\t\t\t\t\t\t\t\n\n\n\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\t\tSTATE <= START;\n\telse\n\t\tSTATE <= NEXT_STATE;\n\nend\n\n\nalways@(*)\nbegin\n\tcase(STATE)\n\t\tADD_REAL_IMAG_SQ:\n\t\tbegin\n\t\t\twe_out_fftr_gmax = 1'b1;\n\t\t\tre_out_fftr_gmax = 1'b0;\n\t\t\taddr_out_real_gmax = i; \n\t\tend\n\n\t\tSET_FW_REAL_ADD:\n\t\tbegin\n\t\t\t\n\t\t\twe_out_fftr_gmax = 1'b1;\n\t\t\tre_out_fftr_gmax = 1'b0;\n\t\t\taddr_out_real_gmax = i; \n\t\tend\n\t\t\n\t\tSET_ADDR_FW_GMAX:\n\t\tbegin\n\t\t\taddr_out_real_gmax = i;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\t\twe_out_fftr_gmax = 1'b0; \n\t\tend\n\t\t\n\t\tSET_DELAY_GMAX1:\n\t\tbegin\n\t\t\taddr_out_real_gmax = i;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\t\twe_out_fftr_gmax = 1'b0; \n\t\tend\n\t\t\n\t\tSET_DELAY_GMAX2:\n\t\tbegin\n\t\t\taddr_out_real_gmax = i;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\t\twe_out_fftr_gmax = 1'b0; \n\t\tend\n\t\t\n\t\tSTART_PPSM:\n\t\tbegin\n\t\t\twe_out_fftr_gmax = 1'b0;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\tend\n\t\t\n\t\tRUN_PPSM:\n\t\tbegin\n\t\t\tout_fw_real = out_fft_real_gmax;\n\t\t\taddr_out_real_gmax = addr_fw_real; \n\t\t\twe_out_fftr_gmax = 1'b0;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\tend\n\t\n\tendcase\n end \n\nalways@(*)                              \nbegin\n\tcase(STATE)\n\n\tSTART:\n\tbegin\n\t\tif(startnlp == 1'b1)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START;\n\t\tend\n\tend\n\n\tINIT_FOR_1:\n\tbegin\n\t\tNEXT_STATE = CHECK_I;\n\tend\n\n\tCHECK_I:\n\tbegin\n\t\tif(i1 < 10'd320)  \n\t\tbegin\n\t\t\tNEXT_STATE = READ_SN;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_2;\n\t\tend\n\tend\n\n\tREAD_SN:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_1;\n\tend\n\n\tSET_DELAY_1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_2;\n\tend\n\n\tSET_DELAY_2:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_2_1;\n\tend\n\t\n\tSET_DELAY_2_1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_2_2;\n\tend\n\t\n\tSET_DELAY_2_2:\n\tbegin\n\t\tNEXT_STATE = CALC_SN_SQ;\n\tend\n\n\tCALC_SN_SQ:\n\tbegin\n\t\tNEXT_STATE = SET_NLP_SQ;\n\tend\n\n\tSET_NLP_SQ:\n\tbegin\n\t\tNEXT_STATE = INCR_I;\n\tend\n\n\tINCR_I:\n\tbegin\n\t\tNEXT_STATE = CHECK_I;\n\tend\n\t\n\tINIT_FOR_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_2;\n\tend\n\n\tCHECK_I_2:\n\tbegin\n\t\tif(i < 10'd320)   \n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_SQ_2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_3;\n\t\tend\n\tend\n\n\tSET_ADDR_SQ_2:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_3;\n\tend\n\n\tSET_DELAY_3:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_4;\n\tend\n\n\tSET_DELAY_4:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_41;\n\tend\n\t\n\tSET_DELAY_41:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_42;\t\n\tend\n\t\t\n\tSET_DELAY_42:\n\tbegin\n\t\tNEXT_STATE = NOTCH_1;\n\tend\n\n\tNOTCH_1:\n\tbegin\n\t\tNEXT_STATE = NOTCH_2;\n\tend\n\n\tNOTCH_2:\n\tbegin\n\t\tNEXT_STATE = SET_MEM_X;\n\tend\n\n\tSET_MEM_X:\n\tbegin\n\t\tNEXT_STATE = SET_MEM_Y;\n\tend\n\n\tSET_MEM_Y:\n\tbegin\n\t\tNEXT_STATE = SET_NEW_SQ_1;\n\tend\n\n\tSET_NEW_SQ_1:\n\tbegin\n\t\tNEXT_STATE = SET_NEW_SQ_2;\n\tend\n\n\tSET_NEW_SQ_2:\n\tbegin\n\t\tNEXT_STATE = INCR_I_2;\n\tend\n\n\tINCR_I_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_2;\n\tend\n\t\n\tINIT_FOR_3:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_3;\n\tend\n\n\tCHECK_I_3:\n\tbegin\n\t\tif(i < 10'd320)\n\t\tbegin\n\t\t\tNEXT_STATE = INNER_FOR_1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = FFT_INIT;\n\t\tend\n\tend\n\n\tINNER_FOR_1:\n\tbegin\n\t\tNEXT_STATE = CHECK_J;\n\tend\n\n\tCHECK_J:\n\tbegin\n\t\tif(j < 10'd48)   \n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_FIR;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = ADDR_LAST_FIR;\n\t\tend\n\tend\n\n\tSET_ADDR_FIR:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_5;\n\tend\n\n\tSET_DELAY_5:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_6;\n\tend\n\n\tSET_DELAY_6:\n\tbegin\n\t\tNEXT_STATE = GET_FIR_1;\n\tend\n\n\tGET_FIR_1:\n\tbegin\n\t\tNEXT_STATE = ADDR_WRITE_FIR;\n\tend\n\n\tADDR_WRITE_FIR:\n\tbegin\n\t\tNEXT_STATE = GET_FIR_2;\n\tend\n\n\tGET_FIR_2:\n\tbegin\n\t\tNEXT_STATE = INCR_J;\n\tend\n\n\tINCR_J:\n\tbegin\n\t\tNEXT_STATE = CHECK_J;\n\tend\n\n\tADDR_LAST_FIR:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_7;\n\tend\n\n\tSET_DELAY_7:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_8;\n\tend\n\n\tSET_DELAY_8:\n\tbegin\n\t\tNEXT_STATE = SET_LAST_FIR;\n\tend\n\t\n\tSET_DELAY_81:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_82;\n\tend\n\t\t\n\tSET_DELAY_82:\n\tbegin\n\t\tNEXT_STATE = SET_LAST_FIR;\n\tend\n\n\tSET_LAST_FIR:\n\tbegin\n\t\tNEXT_STATE = SET_SQ_0;\n\tend\n\t\n\tSET_SQ_0:\n\tbegin\n\t\tNEXT_STATE = INNER_FOR_2;\n\tend\n\n\tINNER_FOR_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_J_2;\n\tend\n\n\tCHECK_J_2:\n\tbegin\n\t\tif(j < 10'd48)\n\t\tbegin\n\t\t\tNEXT_STATE = READ_FIR1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INCR_I3;\n\t\tend\n\tend\n\n\tREAD_FIR1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_9;\n\tend\n\n\tSET_DELAY_9:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_10;\n\tend\n\n\tSET_DELAY_10:\n\tbegin\n\t\tNEXT_STATE = MULT_NLP_FIR;\n\tend\n\n\tMULT_NLP_FIR:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_11;\n\tend\n\t\n\tSET_DELAY_11:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_12;\n\tend\n\t\t\n\tSET_DELAY_12:\n\tbegin\n\t\tNEXT_STATE = ADDR_FIR_SQ;\n\tend\n\n\tADDR_FIR_SQ:\n\tbegin\n\t\tNEXT_STATE = SET_SQ_FIR;\n\tend\n\n\tSET_SQ_FIR:\n\tbegin\n\t\tNEXT_STATE = INCR_J_2;\n\tend\n\n\tINCR_J_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_J_2;\n\tend\n\n\tINCR_I3:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_3;\n\tend\n\t\n\tFFT_INIT:\n\tbegin\n\t\tNEXT_STATE = FFT_ADDR;\n\tend\n\n\tFFT_ADDR:\n\tbegin\n\t\tNEXT_STATE = DELAY_FFT_1;\n\tend\n\n\tDELAY_FFT_1:\n\tbegin\n\t\tNEXT_STATE = DELAY_FFT_2;\n\tend\n\n\tDELAY_FFT_2:\n\tbegin\n\t\tNEXT_STATE = WRITE_FFT_INIT;\n\tend\n\n\tWRITE_FFT_INIT:\n\tbegin\n\t\tNEXT_STATE = INCR_I4;\n\tend\n\n\tINCR_I4:\n\tbegin\n\t\tNEXT_STATE = CHECK_I4;\n\tend\n\n\tCHECK_I4:\n\tbegin\n\t\tif(i < 10'd512)\n\t\tbegin\n\t\t\tNEXT_STATE = FFT_ADDR;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_4;\n\t\tend\n\t\t\n\tend\n\n\tINIT_FOR_4:\n\tbegin\n\t\tNEXT_STATE = CHECK_I5;\n\tend\n\n\tCHECK_I5:\n\tbegin\n\t\tif(i < 10'd64)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_FFT_ADDR;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_DFT;  \n\t\tend\n\t\t\n\tend\n\n\tCALC_FFT_ADDR:\n\tbegin\n\t\tNEXT_STATE = FOR_DELAY_1;\n\tend\n\n\tFOR_DELAY_1:\n\tbegin\n\t\tNEXT_STATE = FOR_DELAY_2;\n\tend\n\n\tFOR_DELAY_2:\n\tbegin\n\t\tNEXT_STATE = CALC_FFT_SQ_W;\n\tend\n\n\tCALC_FFT_SQ_W:\n\tbegin\n\t\tNEXT_STATE = WRITE_FFT_REAL1;\n\tend\n\n\tWRITE_FFT_REAL1:\n\tbegin\n\t\tNEXT_STATE = INCR_I_5;\n\tend\n\n\tINCR_I_5:\n\tbegin\n\t\tNEXT_STATE = CHECK_I5;\n\tend\n\t\n\tSTART_DFT:\n\tbegin\n\t\tNEXT_STATE = RUN_DFT;\n\tend\n\t\n\tRUN_DFT:\n\tbegin\n\t\tif(donefft)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_5; \n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_DFT;\n\t\tend\n\tend\n\t\n\t\n\t\n\t\n\t\n\t\n\tINIT_FOR_5:\n\tbegin\n\t\tNEXT_STATE =  CHECK_I_6;\n\tend\n\n\tCHECK_I_6:\n\tbegin\n\t\tif(i < 10'd512)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_FOR_5;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = SET_GMAX_GMAX_BIN; \n\t\tend\n\tend\n\n\tSET_ADDR_FOR_5:\n\tbegin\n\t\tNEXT_STATE = FOR_5_DELAY1;\n\tend\n\n\tFOR_5_DELAY1:\n\tbegin\n\t\tNEXT_STATE = FOR_5_DELAY2;\n\tend\n\n\tFOR_5_DELAY2:\n\tbegin\n\t\tNEXT_STATE = MULT_REAL_IMAGE_SQ;\n\tend\n\n\tMULT_REAL_IMAGE_SQ:\n\tbegin\n\t\tNEXT_STATE = ADD_REAL_IMAG_SQ;\n\tend\n\n\tADD_REAL_IMAG_SQ:\n\tbegin\n\t\tNEXT_STATE = SET_FW_REAL_ADD;\n\t\n\t\t\n\tend\n\n\tSET_FW_REAL_ADD:\n\tbegin\n\t\tNEXT_STATE = INCR_I6;\n\tend\n\n\tINCR_I6:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_6;\n\tend\n\t\n\tSET_GMAX_GMAX_BIN:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_GMAX;\n\tend\n\t\n\tINIT_FOR_GMAX:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_GMAX;\n\tend\n\t\n\tCHECK_I_GMAX:\n\tbegin\n\t\tif(i <= 10'd128)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_FW_GMAX;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_PPSM; \n\t\tend\n\tend\n\t\n\tSET_ADDR_FW_GMAX:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_GMAX1;\n\t\t\n\t\t\n\tend\n\t\n\tSET_DELAY_GMAX1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_GMAX2;\n\tend\n\t\n\tSET_DELAY_GMAX2:\n\tbegin\n\t\tNEXT_STATE = CHECK_IF_GMAX;\n\tend\n\t\n\tCHECK_IF_GMAX:\n\tbegin\n\t\tNEXT_STATE = SET_IF_GMAX;\n\tend\n\t\n\tSET_IF_GMAX:\n\tbegin\n\t\tNEXT_STATE = INCR_I_GMAX;\n\tend\n\t\n\tINCR_I_GMAX:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_GMAX;\n\tend\n\t\n\tSTART_PPSM:\n\tbegin\n\t\tNEXT_STATE = RUN_PPSM;\n\tend\n\t\n\tRUN_PPSM:\n\tbegin\n\t\tif(doneppsm)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_BESTF0;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_PPSM;\n\t\tend\n\t\t\n\t\t\n\t\t\n\tend\n\t\n\tGET_BESTF0:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_SQ;\n\tend\n\t\n\tINIT_FOR_SQ:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR_SQ;\n\tend\n\t\n\tCHECK_FOR_SQ:\n\tbegin\n\t\tif(i < 10'd240)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_FOR_SQ;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_DIV_BEST0;\n\t\tend\n\t\t\n\tend\n\t\n\tSET_ADDR_FOR_SQ:\n\tbegin\n\t\tNEXT_STATE = FOR_SQ_DELAY1;\n\tend\n\t\n\tFOR_SQ_DELAY1:\n\tbegin\n\t\tNEXT_STATE = FOR_SQ_DELAY2;\n\tend\n\t\n\tFOR_SQ_DELAY2:\n\tbegin\n\t\tNEXT_STATE = GET_SQ_I_N;\n\tend\n\t\n\tGET_SQ_I_N:\n\tbegin\n\t\tNEXT_STATE = SET_SQ_I_N;\n\tend\n\t\n\tSET_SQ_I_N:\n\tbegin\n\t\tNEXT_STATE = INCR_SQ_I;\n\tend\n\t\n\tINCR_SQ_I:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR_SQ;\n\tend\n\t\n\tSTART_DIV_BEST0:\n\tbegin\n\t\tNEXT_STATE = CALC_DIV_BESTF0;\n\tend\n\t\n\tCALC_DIV_BESTF0:\n\tbegin\n\t\tif(donediv)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_PITCH;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_DIV_BESTF0;\n\t\tend\n\tend\n\t\n\tSET_PITCH:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tDONE:\n\tbegin\n\t\tNEXT_STATE =  DONE; \n\tend\n\n\tdefault:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\t\n\tC_FFT1:\n\tbegin\n\t\tNEXT_STATE = C_FFT1D1;\n\tend\n\t\n\tC_FFT1D1:\n\tbegin\n\t\tNEXT_STATE = C_FFT1D2;\n\tend\n\t\n\tC_FFT1D2:\n\tbegin\n\t\tNEXT_STATE = C_FFT2;\n\tend\n\t\n\tC_FFT2:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tendcase\nend\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\tbegin\n\n\t\tdonenlp <= 1'b0;\n\n\tend\n\n\telse\n\tbegin\n\t\tcase(STATE)\n\n\t\tSTART:\n\t\tbegin\n\t\t\tdonenlp <= 1'b0;\n\t\t\tclk_nlp <= 40'b0;\n\t\tend\n\n\t\tINIT_FOR_1:\n\t\tbegin\n\t\t\ti1 <= 10'd240;\n\t\t\twrite_sq <= 1'b1;\n\t\t\tread_sq <= 1'b0;\n\t\t\t\n\t\t\tcheck_in_real <= 80'b0;\n\t\t\tcheck_in_imag <= 80'b0;\n\t\t\t\n\t\t    mem_x <= nlp_mem_x;\n\t\t\tmem_y <= nlp_mem_y;    \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\n\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\t\t\n\t\tend\n\n\t\tCHECK_I:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tREAD_SN:\n\t\tbegin\n\t\t\taddr_sn <= i1;\n\t\t\taddr_nlp_sq <= i1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_2_1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_2_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\t\t\n\n\t\tCALC_SN_SQ:\n\t\tbegin\n\t\t\tms1_in1 <= {out_sn[N-1],48'd0,out_sn[N-2:0]};\n\t\t\tms1_in2 <= {out_sn[N-1],48'd0,out_sn[N-2:0]};\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_NLP_SQ:\n\t\tbegin\n\t\t\tin_sq <= ms1_out;\n\t\t\t\n\t\t\t\n\n\n\n\n\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_I:\n\t\tbegin\n\t\t\ti1 <= i1 + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINIT_FOR_2:\n\t\tbegin\n\t\t\ti <= 10'd240;\n\t\t\t\n\t\t\t\n\t\t\tt_mem_x <= mem_x;\n\t\t\tt_mem_y <= mem_y;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\n\t\tend\n\n\t\tCHECK_I_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_ADDR_SQ_2:\n\t\tbegin\n\t\t\taddr_nlp_sq <= i;\n\t\t\tread_sq <= 1'b1;\n\t\t\twrite_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_3:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_4:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_41:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\t\n\t\tSET_DELAY_42:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tNOTCH_1:\n\t\tbegin\n\t\t\tas1_in1 <= out_sq;\n\t\t\tas1_in2 <= {(t_mem_x[N1-1] == 0)?1'b1:1'b0,t_mem_x[N1-2:0]};\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tNOTCH_2:\n\t\tbegin\n\t\t\tms1_in1 <= COEFF_S;   \n\t\t\tms1_in2 <= t_mem_y;\n\t\t\tnotch <= as1_out;\n\t\t\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_MEM_X:\n\t\tbegin\n\t\t\tas1_in1 <= notch;\n\t\t\tas1_in2 <= ms1_out;\n\t\t\tt_mem_x <= out_sq;\n\t\t\twrite_sq <= 1'b1;\n\t\t\tread_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\n\t\tend\n\n\t\tSET_MEM_Y:\n\t\tbegin\n\t\t\tt_mem_y <= as1_out;\n\t\t\tnotch <= as1_out;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_NEW_SQ_1:\n\t\tbegin\n\t\t\tas1_in1 <= notch;\n\t\t\tas1_in2 <= {63'd0,1'b1,16'b0};   \n\t\t\t\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_NEW_SQ_2:\n\t\tbegin\n\t\t\tin_sq <= as1_out;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_I_2:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINIT_FOR_3:\n\t\tbegin\n\t\t\ti <= 10'd240;\n\t\t\t\n\t\t\tnlp_mem_x_out <= t_mem_x;\n\t\t\tnlp_mem_y_out <= t_mem_y;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_I_3:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINNER_FOR_1:\n\t\tbegin\n\t\t\tj <= 10'd0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_J:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_ADDR_FIR:\n\t\tbegin\n\t\t\taddr_mem_fir <= j + 10'd1;\n\t\t\tread_fir <= 1'b1;\n\t\t\twrite_fir <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_5:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_6:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tGET_FIR_1:\n\t\tbegin\n\t\t\tmem_fir_j_1 <= out_mem_fir;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tADDR_WRITE_FIR:\n\t\tbegin\n\t\t\taddr_mem_fir <= j;\n\t\t\tread_fir <= 1'b0;\n\t\t\twrite_fir <= 1'b1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tGET_FIR_2:\n\t\tbegin\n\t\t\tin_mem_fir <= mem_fir_j_1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_J:\n\t\tbegin\n\t\t\tj <= j + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tADDR_LAST_FIR:\n\t\tbegin\n\t\t\taddr_mem_fir <= 10'd47;\n\t\t\tread_fir <= 1'b0;\n\t\t\twrite_fir <= 1'b1;\n\t\t\n\t\t\taddr_nlp_sq <= i;\n\t\t\tread_sq <= 1'b1;\n\t\t\twrite_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_7:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_8:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_81:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_82:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_LAST_FIR:\n\t\tbegin\n\t\t\tin_mem_fir <= out_sq;\n\t\t\twrite_sq <= 1'b1;\n\t\t\tread_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_SQ_0:\n\t\tbegin\n\t\t\tin_sq <= 80'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINNER_FOR_2:\n\t\tbegin\n\t\t\tj <= 10'd0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_J_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tREAD_FIR1:\n\t\tbegin\n\t\t\taddr_mem_fir <= j;\n\t\t\tread_fir <= 1'b1;\n\t\t\twrite_fir <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_9:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_10:\n\t\tbegin\n\t\t\taddr_nlp_fir <= j;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tMULT_NLP_FIR:\n\t\tbegin\n\t\t\tms1_in1 <= out_mem_fir;\n\t\t\tms1_in2 <= data_out_nlp_fir;\n\t\t\t\n\t\t\twrite_sq <= 1'b0;\n\t\t\tread_sq <= 1'b1;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_11:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_12:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tADDR_FIR_SQ:\n\t\tbegin\n\t\t\tas1_in1 <= ms1_out;\n\t\t\tas1_in2 <= out_sq;\n\t\t\twrite_sq <= 1'b1;\n\t\t\tread_sq <= 1'b0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_SQ_FIR:\n\t\tbegin\n\t\t\tin_sq <= as1_out;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\n\t\tINCR_J_2:\n\t\tbegin\n\t\t\tj <= j + 10'd1;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\n\t\tINCR_I3:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tFFT_INIT:\n\t\tbegin\n\t\t\ti <= 10'd0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tFFT_ADDR:\n\t\tbegin\n\t\t\taddr_in_real <= i;\n\t\t\taddr_in_imag <= i;\n\t\t\tre_fftr <= 1'b0;\n\t\t\tre_ffti <= 1'b0;\n\t\t\twe_fftr <= 1'b1;\n\t\t\twe_ffti <= 1'b1;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\n\t\tDELAY_FFT_1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tDELAY_FFT_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tWRITE_FFT_INIT:\n\t\tbegin\n\t\t\twrite_in_fft_real <= 80'b0;\n\t\t\twrite_in_fft_imag <= 80'b0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_I4:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_I4:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINIT_FOR_4:\n\t\tbegin\n\t\t\ti <= 10'd0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_I5:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCALC_FFT_ADDR:\n\t\tbegin\n\t\t\taddr_nlp_sq <= i * DEC;\n\t\t\tread_sq <= 1'b1;\n\t\t\twrite_sq <= 1'b0;\n\t\t\t\n\t\t\t\n\t\t\taddr_in_real <= i;\n\t\t\tre_fftr <= 1'b0;\n\t\t\twe_fftr <= 1'b1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\tend\n\n\t\tFOR_DELAY_1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tFOR_DELAY_2:\n\t\tbegin\n\t\t\taddr_nlp_w <= i;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCALC_FFT_SQ_W:\n\t\tbegin\n\t\t\tms1_in1 <= out_sq;\n\t\t\tms1_in2 <= data_out_nlp_w;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\n\t\tWRITE_FFT_REAL1:\n\t\tbegin\n\t\t\twrite_in_fft_real <= ms1_out;\n\t\t\tif(i == 10'd48)\n\t\t\tbegin\n\t\t\t\tcheck_in_sq <= out_sq;  \n\t\t\tend\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_I_5:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\t\t\n\t\tSTART_DFT:\n\t\tbegin\n\t\t\tstartfft <= 1'b1;\n\t\t\t\n\t\t\tre_fftr <= 1'b1;\n\t\t\twe_fftr <= 1'b0;\n\t\t\tre_ffti <= 1'b1;\n\t\t\twe_ffti <= 1'b0;\n\t\t\t\n\t\t\tre_out_fftr <= 1'b0;\n\t\t\twe_out_fftr <= 1'b1;\n\t\t\tre_out_ffti <= 1'b0;\n\t\t\twe_out_ffti <= 1'b1;\n\t\t\t\n\t\t\tsig <= 5'd0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tRUN_DFT:\n\t\tbegin\n\t\t\tstartfft <= 1'b0;\n\t\t\taddr_in_real <= fft_addr_in_real;\n\t\t\taddr_in_imag <= fft_addr_in_imag;\n\t\t\t\n\t\t\taddr_out_real <= fft_addr_out_real;\n\t\t\taddr_out_imag <= fft_addr_out_imag;\n\t\t\n\t\t\twrite_fft_real <= fft_write_fft_real;\n\t\t\twrite_fft_imag <= fft_write_fft_imag;\n\t\t\t\n\t\t\tfft_in_imag_data <= in_imag_data;\n\t\t\tfft_in_real_data <= in_real_data;\n\t\t\t\n\t\t\tsig <= sig + 5'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINIT_FOR_5:\n\t\tbegin\n\t\t\ti <= 10'd0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_I_6:\n\t\tbegin\n\t\t\tcheck_fw_real <= check_sig;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_ADDR_FOR_5:\n\t\tbegin\n\t\t\taddr_out_real <= i;\n\t\t\taddr_out_imag <= i;\n\t\t\tre_out_fftr <= 1'b1;\n\t\t\twe_out_fftr <= 1'b0;\n\t\t\tre_out_ffti <= 1'b1;\n\t\t\twe_out_ffti <= 1'b0; \n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tFOR_5_DELAY1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tFOR_5_DELAY2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tMULT_REAL_IMAGE_SQ:\n\t\tbegin\n\t\t\t\n\n\n\n\n\t\t\t\n\t\t\tm1 <= {17'b0,out_fft_real[N1-2:16]};\n\t\t\tm2 <= {17'b0,out_fft_real[N1-2:16]};\n\t\t\tm3 <= {17'b0,out_fft_imag[N1-2:16]};\n\t\t\tm4 <= {17'b0,out_fft_imag[N1-2:16]};\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\tend\n\n\t\tADD_REAL_IMAG_SQ:\n\t\tbegin\n\t\t\t\n\n\t\t\t\n\t\t\ta1 <= m1 * m2;\n\t\t\ta2 <= m3 * m4;\n\t\t\t\n\t\t\t\n\n\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\tend\n\n\t\tSET_FW_REAL_ADD:\n\t\tbegin\n\t\t\twrite_fft_real_gmax <= a1 + a2;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\n\n\n\n\t\t\t\n\t\tend\n\n\t\tINCR_I6:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend \n\t\t\n\t\tSET_GMAX_GMAX_BIN:\n\t\tbegin\n\t\t\tgmax <= 80'b0;\n\t\t\tgmax_bin <= 10'd16;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINIT_FOR_GMAX:\n\t\tbegin\n\t\t\ti <= 10'd16; \n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tCHECK_I_GMAX:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_ADDR_FW_GMAX:\n\t\tbegin\n\t\t\t\n\n\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_GMAX1:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_GMAX2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tCHECK_IF_GMAX:\n\t\tbegin\n\t\t\tgt1_in1 <= out_fft_real_gmax;\n\t\t\tgt1_in2 <= gmax;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_IF_GMAX:\n\t\tbegin\n\t\t\t\n\t\t\tif(gt1)\n\t\t\tbegin\n\t\t\t\tgmax <= out_fft_real_gmax;\n\t\t\t\tgmax_bin <= i;   \n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINCR_I_GMAX:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSTART_PPSM:\n\t\tbegin\n\t\t\tstartppsm <= 1'b1;\n\t\t\t\n\t\t\tpp_gmax <= gmax;\n\t\t\tpp_gmax_bin <= gmax_bin;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tpp_prev_f0 <= prev_f0;\n\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tRUN_PPSM:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tstartppsm <= 1'b0;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tGET_BESTF0:\n\t\tbegin\n\t\t\tbest_f0 <= pp_best_f0;\n\t\t\t\n\t\t\t\n\t\t\tcheck_i <= c_cmax;\n\t\t\t\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\t\n\t\t\t\n\n\t\t\n\t\tINIT_FOR_SQ:\n\t\tbegin\n\t\t\ti <= 10'd0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tCHECK_FOR_SQ:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_ADDR_FOR_SQ:\n\t\tbegin\n\t\t\taddr_nlp_sq <= i + 10'd80;\n\t\t\tread_sq <= 1'b1;\n\t\t\twrite_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\t\n\n\n\t\t\t\n\t\tend\n\t\t\n\t\tFOR_SQ_DELAY1:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tFOR_SQ_DELAY2:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tGET_SQ_I_N:\n\t\tbegin\n\t\t\tout_sq_i_n <= out_sq;\n\t\t\taddr_nlp_sq <= i;\n\t\t\tread_sq <= 1'b0;\n\t\t\twrite_sq <= 1'b1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_SQ_I_N:\n\t\tbegin\n\t\t\tin_sq <= out_sq_i_n;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINCR_SQ_I:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSTART_DIV_BEST0:\n\t\tbegin\n\t\t\tstartdiv <= 1'b1;\n\t\t\tdiv_in <= best_f0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tCALC_DIV_BESTF0:\n\t\tbegin\n\t\t\tm1_in1 <= div_ans;\n\t\t\tm1_in2 <= NLP_FS;\n\t\t\tstartdiv <= 1'b0; \n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_PITCH:\n\t\tbegin\n\t\t\tpitch <= m1_out;\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\tout_prev_f0 <= best_f0;\n\t\t\t\n\t\t\t\n\t\t\t\n\n\t\t\t\n\t\tend\n\t\t\n\t\tDONE:\n\t\tbegin\n\t\t\tdonenlp <= 1'b1;\n\t\t\tcheck_fw_real <= clk_nlp;\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tC_FFT1:\n\t\tbegin\n\t\t\taddr_out_real <= 10'd30;\n\t\t\tre_out_fftr <= 1'b1;\n\t\t\twe_out_fftr <= 1'b0;\n\t\tend\n\t\t\n\t\tC_FFT1D1:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tC_FFT1D2:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tC_FFT2:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tendcase\n\tend\n\nend\n\n\nendmodule```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: nlp_extended_bits. Module specification: The nlp_extended_bits module implements a Natural Language Processing (NLP) algorithm with extended bit precision for pitch detection. It processes input signals through multiple stages, including initialization, notch filtering, Fast Fourier Transform (FFT), and post-processing. The module has input ports for starting the process (startnlp), clock (clk), reset (rst), input memory values (nlp_mem_x, nlp_mem_y), and previous fundamental frequency (prev_f0). Output ports include the best fundamental frequency (best_f0), previous fundamental frequency (out_prev_f0), completion signal (donenlp), pitch value (pitch), and several debug outputs. Internally, it uses numerous signals for memory addressing, data processing, and state management. The module operates using a state machine with multiple stages: initialization, data processing loops, FFT calculation,"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: nlp_extended_bits.\n\nExplanation: This module appears to be implementing a Natural Language Processing (NLP) algorithm with extended bit precision. It performs various operations including initialization, data processing through multiple loops, Fast Fourier Transform (FFT), and post-processing. The module handles input signals, processes them through several stages including notch filtering, FFT calculation, and peak detection. It outputs a pitch value and other related parameters. The module uses a state machine to control its operations and includes various memory components and mathematical operations to perform its calculations."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nBased on the provided Verilog code, here are the input and output ports of the nlp_extended_bits module:\n\nInput ports: startnlp, clk, rst, nlp_mem_x, nlp_mem_y, prev_f0. Explanation:\n- startnlp: Starts the NLP processing\n- clk: Clock signal for synchronous operations\n- rst: Reset signal\n- nlp_mem_x, nlp_mem_y: 80-bit input memory values for NLP processing\n- prev_f0: 32-bit previous fundamental frequency value\n\nOutput ports: best_f0, out_prev_f0, donenlp, pitch, check_cmax_bin, check_i, check_fw_real, check_in_real, clk_fft. Explanation:\n- best_f0: 32-bit best fundamental frequency output\n- out_prev_f0: 32-bit output of the previous fundamental frequency\n- donenlp: Signal indicating NLP processing is complete\n- pitch: 32-bit pitch output\n- check_cmax_bin: 10-bit output for debugging/checking purposes\n- check_i: 10-bit output for debugging/checking purposes\n- check_fw_real: 80-bit output for debugging/checking purposes\n- check_in_real: 80-bit output for debugging/checking purposes\n- clk_fft: 40-bit output related to FFT clock cycles"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code, here are the internal signals and their explanations:\n\nInternal signals: i1, i, j, addr_sn, out_sn, addr_mem_fir, in_mem_fir, read_fir, write_fir, out_mem_fir, addr_nlp_sq, in_sq, read_sq, write_sq, out_sq, STATE, NEXT_STATE, ms1_in1, ms1_in2, as1_in1, as1_in2, ms1_out, as1_out, t_mem_x, t_mem_y, m1, m2, m3, m4, a1, a2, notch, mem_x, mem_y, mem_fir_j_1, startdiv, div_in, div_ans, donediv, m1_in1, m1_in2, m1_out, addr_nlp_w, data_out_nlp_w, addr_nlp_fir, data_out_nlp_fir, addr_in_imag, addr_in_real, addr_out_real, addr_out_imag, in_imag_data, in_real_data, write_fft_real, write_fft_imag, out_fft_real, out_fft_imag, startfft, donefft, fft_in_imag_data, fft_in_real_data, gmax, gmax_bin, startppsm, pp_gmax, pp_gmax_bin, pp_prev_f0, pp_best_f0, out_sq_i_n, clk_nlp.\n\nExplanation:\n- i1, i, j: Loop counters for various operations\n- addr_sn, out_sn: Address and output for sn memory\n- addr_mem_fir, in_mem_fir, read_fir, write_fir, out_mem_fir: Signals for FIR memory operations\n- addr_nlp_sq, in_sq, read_sq, write_sq, out_sq: Signals for NLP square memory operations\n- STATE, NEXT_STATE: Current and next state for the state machine\n- ms1_in1, ms1_in2, as1_in1, as1_in2, ms1_out, as1_out: Inputs and outputs for multiplication and addition operations\n- t_mem_x, t_mem_y: Temporary memory values\n- m1, m2, m3, m4, a1, a2: Intermediate values for calculations\n- notch, mem_x, mem_y: Signals for notch filtering\n- mem_fir_j_1: FIR memory value\n- startdiv, div_in, div_ans, donediv: Signals for division operation\n- m1_in1, m1_in2, m1_out: Inputs and output for multiplication operation\n- addr_nlp_w, data_out_nlp_w: Address and data for NLP window memory\n- addr_nlp_fir, data_out_nlp_fir: Address and data for NLP FIR memory\n- addr_in_imag, addr_in_real, addr_out_real, addr_out_imag, in_imag_data, in_real_data, write_fft_real, write_fft_imag, out_fft_real, out_fft_imag: Signals for FFT input/output operations\n- startfft, donefft: Control signals for FFT operation\n- fft_in_imag_data, fft_in_real_data: FFT input data\n- gmax, gmax_bin: Maximum value and its bin for peak detection\n- startppsm, pp_gmax, pp_gmax_bin, pp_prev_f0, pp_best_f0: Signals for post-processing sub-multiples calculation\n- out_sq_i_n: Output square value\n- clk_nlp: Clock counter for NLP operations\n\nThese signals are used throughout the module for various operations including memory access, mathematical calculations, state control, and data processing in the NLP algorithm."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\t\n     module nlp_extended_bits (startnlp,clk,rst, \n\t\t\tnlp_mem_x,nlp_mem_y,prev_f0,best_f0,out_prev_f0,pitch,\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tdonenlp, check_cmax_bin, check_i,check_fw_real,check_in_real,clk_fft\n\t\t\t\n\t\t\t);   \n\t\t\t \n\t\t\t \n\t\t\tparameter N = 32;\n\t\t\tparameter Q = 16;\n\t\t\t\n\t\t\tparameter N1 = 80;\n\t\t\tparameter Q1 = 16;\n\t\t\t\n\t\t     input clk,rst,startnlp;\n\t\t\tinput [N1-1:0] nlp_mem_x,nlp_mem_y;\n\t\t\t\n\t\t\tinput [N-1:0] prev_f0;\n\t\t\t\n\t\t\toutput reg [N-1:0] best_f0,out_prev_f0;\n\n\t\t\toutput reg donenlp;\n\t\t\toutput reg [N-1:0] pitch;\n\t\t\treg [N1-1:0] nlp_mem_x_out,nlp_mem_y_out;\n\t\t\t\n\t\t\toutput reg [N1-1:0] check_fw_real;\n\t\t\t\n\t\t\t reg [N1-1:0] check_in_sq;\n\t\t\t output reg [N1-1:0] check_in_real;\n\t\t\t reg [N1-1:0] check_in_imag;\n\t\t\t  reg [4:0] sig;\n\t\t\t  reg [N1-1:0] check_gmax;\n\t\t\t  reg [9:0] check_gmax_bin;\n\t\t\t\n\t\t\toutput reg [9:0] check_cmax_bin,check_i;\n\t\t\toutput reg [39:0] clk_fft;\n\t\t\t\n\t\t\t\n\t\t\treg [9:0] i1;\n\t\t\treg [39:0] clk_nlp;\n\t\n\t\t   \n\t\t\t\t reg [9:0] addr_sn;\n\t\t\t\twire [N-1:0] out_sn;\n\t\t\t\tRAM_c2_sn_test_nlp c2_sn (addr_sn,clk,,1,0,out_sn);  \n\t\t \n\t\t\t\t  reg [9:0] addr_mem_fir;\n\t\t\t\t reg [N1-1:0] in_mem_fir;\n\t\t\t\t reg read_fir, write_fir;\n\t\t\t\t wire [N1-1:0] out_mem_fir;\n\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t RAM_nlp_mem_fir_80  mem_fir   (addr_mem_fir,clk,in_mem_fir,read_fir,write_fir,out_mem_fir); \t\n\n\t\t\t\t\n\t\t\t\t reg [9:0] addr_nlp_sq;\n\t\t\t\t reg [N1-1:0] in_sq;\n\t\t\t\t reg read_sq,write_sq;\n\t\t\t\t wire [N1-1:0] out_sq;\n\n\t\t\t\t RAM_nlp_sq_80    nlp_sq\t   (addr_nlp_sq,clk,in_sq,read_sq,write_sq,out_sq);    \n  \n\n\n\n\nparameter START = 8'd0,\n          INIT_FOR_1 = 8'd1,\n          CHECK_I = 8'd2,\n          READ_SN = 8'd3,\n          SET_DELAY_1 = 8'd4,\n          SET_DELAY_2 = 8'd5,\n          CALC_SN_SQ = 8'd6,\n          SET_NLP_SQ = 8'd7,\n          INCR_I = 8'd8,\n\t\t\t INIT_FOR_2 = 8'd9,\n          CHECK_I_2 = 8'd10,\n          SET_ADDR_SQ_2 = 8'd11,\n          SET_DELAY_3 = 8'd12,\n          SET_DELAY_4 = 8'd13,\n          NOTCH_1 = 8'd14,\n          NOTCH_2 = 8'd15,\n          SET_MEM_X = 8'd16,\n          SET_MEM_Y = 8'd17,\n          SET_NEW_SQ_1 = 8'd18,\n          SET_NEW_SQ_2 = 8'd19,\n          INCR_I_2 = 8'd20,\n\t\t    INIT_FOR_3 = 8'd21,\n          CHECK_I_3 = 8'd22,\n          INNER_FOR_1 = 8'd23,\n          CHECK_J = 8'd24,\n          SET_ADDR_FIR = 8'd25,\n          SET_DELAY_5 = 8'd26,\n          SET_DELAY_6 = 8'd27,\n          GET_FIR_1 = 8'd28,\n          ADDR_WRITE_FIR = 8'd29,\n          GET_FIR_2 = 8'd30,\n          INCR_J = 8'd31,\n          ADDR_LAST_FIR = 8'd32,\n          SET_DELAY_7 = 8'd33,\n          SET_DELAY_8 = 8'd34,\n          SET_LAST_FIR = 8'd35,\n          INNER_FOR_2 = 8'd36,\n          CHECK_J_2 = 8'd37,\n          READ_FIR1 = 8'd38,\n          SET_DELAY_9 = 8'd39,\n          SET_DELAY_10 = 8'd40,\n          MULT_NLP_FIR = 8'd41,\n          ADDR_FIR_SQ = 8'd42,\n          SET_SQ_FIR = 8'd43,\n          INCR_J_2 = 8'd44,\n          INCR_I3 = 8'd45,\n          DONE = 8'd46,\n\t\t    SET_SQ_0 = 8'd47,\n\t\t    SET_DELAY_11 = 8'd48,\n\t\t    SET_DELAY_12 = 8'd49,\n\t\t    FFT_INIT = 8'd50,\n          FFT_ADDR = 8'd51,\n          DELAY_FFT_1 = 8'd52,\n          DELAY_FFT_2 = 8'd53,\n          WRITE_FFT_INIT = 8'd54,\n          INCR_I4 = 8'd55,\n          CHECK_I4 = 8'd56,\n          INIT_FOR_4 = 8'd57,\n          CHECK_I5 = 8'd58,\n          CALC_FFT_ADDR = 8'd59,\n          FOR_DELAY_1 = 8'd60,\n          FOR_DELAY_2 = 8'd61,\n          CALC_FFT_SQ_W = 8'd62,\n          WRITE_FFT_REAL1 = 8'd63,\n          INCR_I_5 = 8'd64,\n\t\t    START_DFT = 8'd65,\n\t\t    RUN_DFT = 8'd66,\n\t\t    INIT_FOR_5 = 8'd67,\n          CHECK_I_6 = 8'd68,\n          SET_ADDR_FOR_5 = 8'd69,\n          FOR_5_DELAY1 = 8'd70,\n          FOR_5_DELAY2 = 8'd71,\n          MULT_REAL_IMAGE_SQ = 8'd72,\n          ADD_REAL_IMAG_SQ = 8'd73,\n          SET_FW_REAL_ADD = 8'd74,\n          INCR_I6 = 8'd75,\n\t\t    RUN_DFT_2 = 8'd76,\n\t\t\t SET_GMAX_GMAX_BIN = 8'd77,\n\t\t\t INIT_FOR_GMAX = 8'd78,\n\t\t\t CHECK_I_GMAX = 8'd79,\n\t\t\t SET_ADDR_FW_GMAX = 8'd80,\n\t\t\t SET_DELAY_GMAX1 = 8'd81,\n\t\t\t SET_DELAY_GMAX2 = 8'd82,\n\t\t\t SET_IF_GMAX = 8'd83,\n\t\t\t INCR_I_GMAX = 8'd84,\n\t\t\t START_PPSM = 8'd85,\n\t\t\t GET_BESTF0 = 8'd86,\n\t\t\t INIT_FOR_SQ = 8'd87,\n\t\t\t CHECK_FOR_SQ = 8'd88,\n\t\t\t SET_ADDR_FOR_SQ = 8'd89,\n\t\t\t FOR_SQ_DELAY1 = 8'd90,\n\t\t\t FOR_SQ_DELAY2 = 8'd91,\n\t\t\t GET_SQ_I_N = 8'd92,\n\t\t\t SET_SQ_I_N = 8'd93,\n\t\t\t INCR_SQ_I = 8'd94,\n\t\t\t START_DIV_BEST0 = 8'd95,\n\t\t\t CALC_DIV_BESTF0 = 8'd96,\n\t\t\t SET_PITCH = 8'd97,\n\t\t\t RUN_PPSM = 8'd98,\n\t\t\t C_FFT1 = 8'd99,\n\t\t\t C_FFT1D1 = 8'd100,\n\t\t\t C_FFT1D2 = 8'd101,\n\t\t\t C_FFT2  = 8'd102,\n\t\t\t CHECK_IF_GMAX = 8'd103,\n\t\t\t SET_DELAY_41 = 8'd104,\n\t\t\t SET_DELAY_42 = 8'd105,\n\t\t\t SET_DELAY_81 = 8'd106,\n\t\t\t SET_DELAY_82 = 8'd107,\n\t\t\t SET_DELAY_2_1 = 8'd108,\n\t\t\t SET_DELAY_2_2 = 8'd109;\n\t\t  \n\nreg [7:0] STATE, NEXT_STATE;\n\nparameter [9:0]\n\t\t\t\t\n\t\t\t\tDEC = 10'd5;\n\t\t\t\t\nparameter [N-1:0] COEFF \t= 32'b00000000000000001111001100110011,\n\t\t\t\t\t\tONE   \t= 32'b00000000000000010000000000000000,\n\t\t\t\t\t\tNLP_FS \t= {16'd8000,16'd0};\n\t\t\t\t\t\t\nparameter [N1-1:0] COEFF_S = {64'b0,16'b1111001100110011};\n\n\n\t\t\t\t  \n\n\n\t\t\t\t\t\n\n\n\n\n\n\nreg [N1-1:0] ms1_in1,ms1_in2,as1_in1,as1_in2;\nwire [N1-1:0] ms1_out,as1_out;\n\nqmult  \t\t\t#(Q1,N1) \t\t\tqmult96_1\t   (ms1_in1,ms1_in2,ms1_out);\nqadd   \t\t\t#(Q1,N1)\t\t\tadder96_1      (as1_in1,as1_in2,as1_out);\n\n\n\nreg [9:0] i,j;\nreg \t\t\t[N-1:0] \t\ta1_in1,a1_in2,a2_in1,a2_in2;\nwire \t\t\t[N-1:0] \t\ta1_out,a2_out;\n\n\nreg [N1-1:0] t_mem_x,t_mem_y;\nreg [N1-1:0] m1,m2,m3,m4,a1,a2;\n\n\n\nreg [N1-1:0] notch,mem_x,mem_y;\n\nreg [N1-1:0] mem_fir_j_1;\nreg startdiv;\nreg [N-1:0] div_in;\nwire [N-1:0] div_ans;\nwire donediv;\n\nreg [N-1:0] m1_in1,m1_in2;\nwire [N-1:0] m1_out;\nqmult  \t\t\t#(Q,N) \t\t\tqmult1\t   (m1_in1,m1_in2,m1_out);\nqadd   \t\t\t#(Q,N)\t\t\tadder1     (a1_in1,a1_in2,a1_out);\n\n\nqadd   \t\t\t#(Q,N)\t\t\tadder2     (a2_in1,a2_in2,a2_out);\n\nfpdiv_clk  \t  \t \t\t\t\tdivider\t   (startdiv,clk,rst,div_in,div_ans,donediv);\n\n\nreg [5:0] addr_nlp_w;\nwire [N1-1:0] data_out_nlp_w;\n\nROM_nlp_w    nlp_w (addr_nlp_w, data_out_nlp_w);\n\nreg [5:0] addr_nlp_fir;\nwire [N1-1:0] data_out_nlp_fir;\n\nROM_nlp_fir    nlp_fir (addr_nlp_fir, data_out_nlp_fir);\n\n\nreg [9:0] \t\taddr_in_imag,addr_in_real,addr_out_real,addr_out_imag;\nwire   [N1-1:0]\t\tin_imag_data,in_real_data;\n\t\t\nwire [9:0] fft_addr_in_imag,fft_addr_in_real,fft_addr_out_real,fft_addr_out_imag;\nreg [N1-1:0] write_fft_real;\nreg [N1-1:0] write_fft_imag; \n\nreg [9:0] addr_out_real_gmax,gmax_bin;\nreg [N1-1:0] write_fft_real_gmax;\nreg [N1-1:0] gmax;\nwire [N1-1:0] out_fft_real, out_fft_imag,fft_write_fft_real,fft_write_fft_imag,out_fft_real_gmax;\n\nreg read_in_fftr,read_in_ffti,write_in_fftr,write_in_ffti,re_out_fftr_gmax,we_out_fftr_gmax,\n\t\t\tre_fftr,re_ffti,we_fftr,we_ffti,re_out_fftr,re_out_ffti,we_out_fftr,we_out_ffti,startfft;\nreg [N1-1:0] write_in_fft_real,write_in_fft_imag;\nwire donefft,doneppsm;\n\nreg [N1-1:0] fft_in_imag_data,fft_in_real_data;\n\nreg [N-1:0] pp_m1_out;\nwire [N-1:0] pp_m1_in1,pp_m1_in2;\n\nreg startppsm;\nreg [N1-1:0] out_fw_real,pp_gmax;\nreg [9:0] pp_gmax_bin;\nreg [N-1:0] pp_prev_f0;\nwire [N-1:0] pp_best_f0;\nwire [9:0] addr_fw_real;\nreg [N1-1:0] out_sq_i_n;\n\nwire [9:0] c_cmax;\n\nreg [N1-1:0] gt1_in1,gt1_in2;\nwire [N1-1:0] c_fw_real,check_sig;\nwire gt1;\n\n\n\nRAM_in_fft_real_80     in_real\t   (addr_in_real,clk,write_in_fft_real,re_fftr,we_fftr,in_real_data);\nRAM_in_fft_imag_80     in_imag\t   (addr_in_imag,clk,write_in_fft_imag,re_ffti,we_ffti,in_imag_data);\n\nRAM_out_fft_real_80    fft_out_real(addr_out_real,clk,write_fft_real,re_out_fftr,we_out_fftr,out_fft_real);\nRAM_out_fft_imag_80    fft_out_imag(addr_out_imag,clk,write_fft_imag,re_out_ffti,we_out_ffti,out_fft_imag);\n\nRAM_out_fft_real_gmax_80    fft_out_real_gmax(addr_out_real_gmax,clk,write_fft_real_gmax,re_out_fftr_gmax,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\twe_out_fftr_gmax,out_fft_real_gmax);\n\n\nfft_nlp_extended_bits fft_nlp_module (startfft,clk,rst,fft_in_imag_data,fft_in_real_data,\n\t\t\t\t\tfft_addr_in_imag,fft_addr_in_real,fft_addr_out_real,fft_addr_out_imag,\n\t\t\t\t\t\t\t\tfft_write_fft_real,fft_write_fft_imag,donefft,\n\t\t\t\t\t\t\t\tcheck_sig\n\t\t\t\t\t\t\t\t);\n\n\n\n  post_process_sub_multiples_calc  ppsm (startppsm,clk,rst,out_fw_real,\n\t\t\t\t\t\t\tpp_gmax,pp_gmax_bin,pp_prev_f0,pp_best_f0,addr_fw_real,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdoneppsm,c_cmax,c_fw_real);\n\t\t\t\t\t\t\t\n\nfpgreaterthan\t#(Q1,N1)    \t\tfpgt1      (gt1_in1,gt1_in2,gt1);\t\t\t\t\t\t\t\n\n\n\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\t\tSTATE <= START;\n\telse\n\t\tSTATE <= NEXT_STATE;\n\nend\n\n\nalways@(*)\nbegin\n\tcase(STATE)\n\t\tADD_REAL_IMAG_SQ:\n\t\tbegin\n\t\t\twe_out_fftr_gmax = 1'b1;\n\t\t\tre_out_fftr_gmax = 1'b0;\n\t\t\taddr_out_real_gmax = i; \n\t\tend\n\n\t\tSET_FW_REAL_ADD:\n\t\tbegin\n\t\t\t\n\t\t\twe_out_fftr_gmax = 1'b1;\n\t\t\tre_out_fftr_gmax = 1'b0;\n\t\t\taddr_out_real_gmax = i; \n\t\tend\n\t\t\n\t\tSET_ADDR_FW_GMAX:\n\t\tbegin\n\t\t\taddr_out_real_gmax = i;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\t\twe_out_fftr_gmax = 1'b0; \n\t\tend\n\t\t\n\t\tSET_DELAY_GMAX1:\n\t\tbegin\n\t\t\taddr_out_real_gmax = i;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\t\twe_out_fftr_gmax = 1'b0; \n\t\tend\n\t\t\n\t\tSET_DELAY_GMAX2:\n\t\tbegin\n\t\t\taddr_out_real_gmax = i;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\t\twe_out_fftr_gmax = 1'b0; \n\t\tend\n\t\t\n\t\tSTART_PPSM:\n\t\tbegin\n\t\t\twe_out_fftr_gmax = 1'b0;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\tend\n\t\t\n\t\tRUN_PPSM:\n\t\tbegin\n\t\t\tout_fw_real = out_fft_real_gmax;\n\t\t\taddr_out_real_gmax = addr_fw_real; \n\t\t\twe_out_fftr_gmax = 1'b0;\n\t\t\tre_out_fftr_gmax = 1'b1;\n\t\tend\n\t\n\tendcase\n end \n\nalways@(*)                              \nbegin\n\tcase(STATE)\n\n\tSTART:\n\tbegin\n\t\tif(startnlp == 1'b1)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START;\n\t\tend\n\tend\n\n\tINIT_FOR_1:\n\tbegin\n\t\tNEXT_STATE = CHECK_I;\n\tend\n\n\tCHECK_I:\n\tbegin\n\t\tif(i1 < 10'd320)  \n\t\tbegin\n\t\t\tNEXT_STATE = READ_SN;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_2;\n\t\tend\n\tend\n\n\tREAD_SN:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_1;\n\tend\n\n\tSET_DELAY_1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_2;\n\tend\n\n\tSET_DELAY_2:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_2_1;\n\tend\n\t\n\tSET_DELAY_2_1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_2_2;\n\tend\n\t\n\tSET_DELAY_2_2:\n\tbegin\n\t\tNEXT_STATE = CALC_SN_SQ;\n\tend\n\n\tCALC_SN_SQ:\n\tbegin\n\t\tNEXT_STATE = SET_NLP_SQ;\n\tend\n\n\tSET_NLP_SQ:\n\tbegin\n\t\tNEXT_STATE = INCR_I;\n\tend\n\n\tINCR_I:\n\tbegin\n\t\tNEXT_STATE = CHECK_I;\n\tend\n\t\n\tINIT_FOR_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_2;\n\tend\n\n\tCHECK_I_2:\n\tbegin\n\t\tif(i < 10'd320)   \n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_SQ_2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_3;\n\t\tend\n\tend\n\n\tSET_ADDR_SQ_2:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_3;\n\tend\n\n\tSET_DELAY_3:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_4;\n\tend\n\n\tSET_DELAY_4:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_41;\n\tend\n\t\n\tSET_DELAY_41:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_42;\t\n\tend\n\t\t\n\tSET_DELAY_42:\n\tbegin\n\t\tNEXT_STATE = NOTCH_1;\n\tend\n\n\tNOTCH_1:\n\tbegin\n\t\tNEXT_STATE = NOTCH_2;\n\tend\n\n\tNOTCH_2:\n\tbegin\n\t\tNEXT_STATE = SET_MEM_X;\n\tend\n\n\tSET_MEM_X:\n\tbegin\n\t\tNEXT_STATE = SET_MEM_Y;\n\tend\n\n\tSET_MEM_Y:\n\tbegin\n\t\tNEXT_STATE = SET_NEW_SQ_1;\n\tend\n\n\tSET_NEW_SQ_1:\n\tbegin\n\t\tNEXT_STATE = SET_NEW_SQ_2;\n\tend\n\n\tSET_NEW_SQ_2:\n\tbegin\n\t\tNEXT_STATE = INCR_I_2;\n\tend\n\n\tINCR_I_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_2;\n\tend\n\t\n\tINIT_FOR_3:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_3;\n\tend\n\n\tCHECK_I_3:\n\tbegin\n\t\tif(i < 10'd320)\n\t\tbegin\n\t\t\tNEXT_STATE = INNER_FOR_1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = FFT_INIT;\n\t\tend\n\tend\n\n\tINNER_FOR_1:\n\tbegin\n\t\tNEXT_STATE = CHECK_J;\n\tend\n\n\tCHECK_J:\n\tbegin\n\t\tif(j < 10'd48)   \n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_FIR;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = ADDR_LAST_FIR;\n\t\tend\n\tend\n\n\tSET_ADDR_FIR:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_5;\n\tend\n\n\tSET_DELAY_5:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_6;\n\tend\n\n\tSET_DELAY_6:\n\tbegin\n\t\tNEXT_STATE = GET_FIR_1;\n\tend\n\n\tGET_FIR_1:\n\tbegin\n\t\tNEXT_STATE = ADDR_WRITE_FIR;\n\tend\n\n\tADDR_WRITE_FIR:\n\tbegin\n\t\tNEXT_STATE = GET_FIR_2;\n\tend\n\n\tGET_FIR_2:\n\tbegin\n\t\tNEXT_STATE = INCR_J;\n\tend\n\n\tINCR_J:\n\tbegin\n\t\tNEXT_STATE = CHECK_J;\n\tend\n\n\tADDR_LAST_FIR:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_7;\n\tend\n\n\tSET_DELAY_7:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_8;\n\tend\n\n\tSET_DELAY_8:\n\tbegin\n\t\tNEXT_STATE = SET_LAST_FIR;\n\tend\n\t\n\tSET_DELAY_81:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_82;\n\tend\n\t\t\n\tSET_DELAY_82:\n\tbegin\n\t\tNEXT_STATE = SET_LAST_FIR;\n\tend\n\n\tSET_LAST_FIR:\n\tbegin\n\t\tNEXT_STATE = SET_SQ_0;\n\tend\n\t\n\tSET_SQ_0:\n\tbegin\n\t\tNEXT_STATE = INNER_FOR_2;\n\tend\n\n\tINNER_FOR_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_J_2;\n\tend\n\n\tCHECK_J_2:\n\tbegin\n\t\tif(j < 10'd48)\n\t\tbegin\n\t\t\tNEXT_STATE = READ_FIR1;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INCR_I3;\n\t\tend\n\tend\n\n\tREAD_FIR1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_9;\n\tend\n\n\tSET_DELAY_9:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_10;\n\tend\n\n\tSET_DELAY_10:\n\tbegin\n\t\tNEXT_STATE = MULT_NLP_FIR;\n\tend\n\n\tMULT_NLP_FIR:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_11;\n\tend\n\t\n\tSET_DELAY_11:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_12;\n\tend\n\t\t\n\tSET_DELAY_12:\n\tbegin\n\t\tNEXT_STATE = ADDR_FIR_SQ;\n\tend\n\n\tADDR_FIR_SQ:\n\tbegin\n\t\tNEXT_STATE = SET_SQ_FIR;\n\tend\n\n\tSET_SQ_FIR:\n\tbegin\n\t\tNEXT_STATE = INCR_J_2;\n\tend\n\n\tINCR_J_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_J_2;\n\tend\n\n\tINCR_I3:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_3;\n\tend\n\t\n\tFFT_INIT:\n\tbegin\n\t\tNEXT_STATE = FFT_ADDR;\n\tend\n\n\tFFT_ADDR:\n\tbegin\n\t\tNEXT_STATE = DELAY_FFT_1;\n\tend\n\n\tDELAY_FFT_1:\n\tbegin\n\t\tNEXT_STATE = DELAY_FFT_2;\n\tend\n\n\tDELAY_FFT_2:\n\tbegin\n\t\tNEXT_STATE = WRITE_FFT_INIT;\n\tend\n\n\tWRITE_FFT_INIT:\n\tbegin\n\t\tNEXT_STATE = INCR_I4;\n\tend\n\n\tINCR_I4:\n\tbegin\n\t\tNEXT_STATE = CHECK_I4;\n\tend\n\n\tCHECK_I4:\n\tbegin\n\t\tif(i < 10'd512)\n\t\tbegin\n\t\t\tNEXT_STATE = FFT_ADDR;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_4;\n\t\tend\n\t\t\n\tend\n\n\tINIT_FOR_4:\n\tbegin\n\t\tNEXT_STATE = CHECK_I5;\n\tend\n\n\tCHECK_I5:\n\tbegin\n\t\tif(i < 10'd64)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_FFT_ADDR;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_DFT;  \n\t\tend\n\t\t\n\tend\n\n\tCALC_FFT_ADDR:\n\tbegin\n\t\tNEXT_STATE = FOR_DELAY_1;\n\tend\n\n\tFOR_DELAY_1:\n\tbegin\n\t\tNEXT_STATE = FOR_DELAY_2;\n\tend\n\n\tFOR_DELAY_2:\n\tbegin\n\t\tNEXT_STATE = CALC_FFT_SQ_W;\n\tend\n\n\tCALC_FFT_SQ_W:\n\tbegin\n\t\tNEXT_STATE = WRITE_FFT_REAL1;\n\tend\n\n\tWRITE_FFT_REAL1:\n\tbegin\n\t\tNEXT_STATE = INCR_I_5;\n\tend\n\n\tINCR_I_5:\n\tbegin\n\t\tNEXT_STATE = CHECK_I5;\n\tend\n\t\n\tSTART_DFT:\n\tbegin\n\t\tNEXT_STATE = RUN_DFT;\n\tend\n\t\n\tRUN_DFT:\n\tbegin\n\t\tif(donefft)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_5; \n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_DFT;\n\t\tend\n\tend\n\t\n\t\n\t\n\t\n\t\n\t\n\tINIT_FOR_5:\n\tbegin\n\t\tNEXT_STATE =  CHECK_I_6;\n\tend\n\n\tCHECK_I_6:\n\tbegin\n\t\tif(i < 10'd512)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_FOR_5;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = SET_GMAX_GMAX_BIN; \n\t\tend\n\tend\n\n\tSET_ADDR_FOR_5:\n\tbegin\n\t\tNEXT_STATE = FOR_5_DELAY1;\n\tend\n\n\tFOR_5_DELAY1:\n\tbegin\n\t\tNEXT_STATE = FOR_5_DELAY2;\n\tend\n\n\tFOR_5_DELAY2:\n\tbegin\n\t\tNEXT_STATE = MULT_REAL_IMAGE_SQ;\n\tend\n\n\tMULT_REAL_IMAGE_SQ:\n\tbegin\n\t\tNEXT_STATE = ADD_REAL_IMAG_SQ;\n\tend\n\n\tADD_REAL_IMAG_SQ:\n\tbegin\n\t\tNEXT_STATE = SET_FW_REAL_ADD;\n\t\n\t\t\n\tend\n\n\tSET_FW_REAL_ADD:\n\tbegin\n\t\tNEXT_STATE = INCR_I6;\n\tend\n\n\tINCR_I6:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_6;\n\tend\n\t\n\tSET_GMAX_GMAX_BIN:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_GMAX;\n\tend\n\t\n\tINIT_FOR_GMAX:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_GMAX;\n\tend\n\t\n\tCHECK_I_GMAX:\n\tbegin\n\t\tif(i <= 10'd128)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_FW_GMAX;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_PPSM; \n\t\tend\n\tend\n\t\n\tSET_ADDR_FW_GMAX:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_GMAX1;\n\t\t\n\t\t\n\tend\n\t\n\tSET_DELAY_GMAX1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_GMAX2;\n\tend\n\t\n\tSET_DELAY_GMAX2:\n\tbegin\n\t\tNEXT_STATE = CHECK_IF_GMAX;\n\tend\n\t\n\tCHECK_IF_GMAX:\n\tbegin\n\t\tNEXT_STATE = SET_IF_GMAX;\n\tend\n\t\n\tSET_IF_GMAX:\n\tbegin\n\t\tNEXT_STATE = INCR_I_GMAX;\n\tend\n\t\n\tINCR_I_GMAX:\n\tbegin\n\t\tNEXT_STATE = CHECK_I_GMAX;\n\tend\n\t\n\tSTART_PPSM:\n\tbegin\n\t\tNEXT_STATE = RUN_PPSM;\n\tend\n\t\n\tRUN_PPSM:\n\tbegin\n\t\tif(doneppsm)\n\t\tbegin\n\t\t\tNEXT_STATE = GET_BESTF0;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = RUN_PPSM;\n\t\tend\n\t\t\n\t\t\n\t\t\n\tend\n\t\n\tGET_BESTF0:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_SQ;\n\tend\n\t\n\tINIT_FOR_SQ:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR_SQ;\n\tend\n\t\n\tCHECK_FOR_SQ:\n\tbegin\n\t\tif(i < 10'd240)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_FOR_SQ;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START_DIV_BEST0;\n\t\tend\n\t\t\n\tend\n\t\n\tSET_ADDR_FOR_SQ:\n\tbegin\n\t\tNEXT_STATE = FOR_SQ_DELAY1;\n\tend\n\t\n\tFOR_SQ_DELAY1:\n\tbegin\n\t\tNEXT_STATE = FOR_SQ_DELAY2;\n\tend\n\t\n\tFOR_SQ_DELAY2:\n\tbegin\n\t\tNEXT_STATE = GET_SQ_I_N;\n\tend\n\t\n\tGET_SQ_I_N:\n\tbegin\n\t\tNEXT_STATE = SET_SQ_I_N;\n\tend\n\t\n\tSET_SQ_I_N:\n\tbegin\n\t\tNEXT_STATE = INCR_SQ_I;\n\tend\n\t\n\tINCR_SQ_I:\n\tbegin\n\t\tNEXT_STATE = CHECK_FOR_SQ;\n\tend\n\t\n\tSTART_DIV_BEST0:\n\tbegin\n\t\tNEXT_STATE = CALC_DIV_BESTF0;\n\tend\n\t\n\tCALC_DIV_BESTF0:\n\tbegin\n\t\tif(donediv)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_PITCH;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_DIV_BESTF0;\n\t\tend\n\tend\n\t\n\tSET_PITCH:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tDONE:\n\tbegin\n\t\tNEXT_STATE =  DONE; \n\tend\n\n\tdefault:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\t\n\tC_FFT1:\n\tbegin\n\t\tNEXT_STATE = C_FFT1D1;\n\tend\n\t\n\tC_FFT1D1:\n\tbegin\n\t\tNEXT_STATE = C_FFT1D2;\n\tend\n\t\n\tC_FFT1D2:\n\tbegin\n\t\tNEXT_STATE = C_FFT2;\n\tend\n\t\n\tC_FFT2:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tendcase\nend\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\tbegin\n\n\t\tdonenlp <= 1'b0;\n\n\tend\n\n\telse\n\tbegin\n\t\tcase(STATE)\n\n\t\tSTART:\n\t\tbegin\n\t\t\tdonenlp <= 1'b0;\n\t\t\tclk_nlp <= 40'b0;\n\t\tend\n\n\t\tINIT_FOR_1:\n\t\tbegin\n\t\t\ti1 <= 10'd240;\n\t\t\twrite_sq <= 1'b1;\n\t\t\tread_sq <= 1'b0;\n\t\t\t\n\t\t\tcheck_in_real <= 80'b0;\n\t\t\tcheck_in_imag <= 80'b0;\n\t\t\t\n\t\t    mem_x <= nlp_mem_x;\n\t\t\tmem_y <= nlp_mem_y;    \n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\t\n\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\t\t\n\t\tend\n\n\t\tCHECK_I:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tREAD_SN:\n\t\tbegin\n\t\t\taddr_sn <= i1;\n\t\t\taddr_nlp_sq <= i1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_2_1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_2_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\t\t\n\n\t\tCALC_SN_SQ:\n\t\tbegin\n\t\t\tms1_in1 <= {out_sn[N-1],48'd0,out_sn[N-2:0]};\n\t\t\tms1_in2 <= {out_sn[N-1],48'd0,out_sn[N-2:0]};\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_NLP_SQ:\n\t\tbegin\n\t\t\tin_sq <= ms1_out;\n\t\t\t\n\t\t\t\n\n\n\n\n\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_I:\n\t\tbegin\n\t\t\ti1 <= i1 + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINIT_FOR_2:\n\t\tbegin\n\t\t\ti <= 10'd240;\n\t\t\t\n\t\t\t\n\t\t\tt_mem_x <= mem_x;\n\t\t\tt_mem_y <= mem_y;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\n\t\tend\n\n\t\tCHECK_I_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_ADDR_SQ_2:\n\t\tbegin\n\t\t\taddr_nlp_sq <= i;\n\t\t\tread_sq <= 1'b1;\n\t\t\twrite_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_3:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_4:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_41:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\t\n\t\tSET_DELAY_42:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tNOTCH_1:\n\t\tbegin\n\t\t\tas1_in1 <= out_sq;\n\t\t\tas1_in2 <= {(t_mem_x[N1-1] == 0)?1'b1:1'b0,t_mem_x[N1-2:0]};\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tNOTCH_2:\n\t\tbegin\n\t\t\tms1_in1 <= COEFF_S;   \n\t\t\tms1_in2 <= t_mem_y;\n\t\t\tnotch <= as1_out;\n\t\t\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_MEM_X:\n\t\tbegin\n\t\t\tas1_in1 <= notch;\n\t\t\tas1_in2 <= ms1_out;\n\t\t\tt_mem_x <= out_sq;\n\t\t\twrite_sq <= 1'b1;\n\t\t\tread_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\n\t\tend\n\n\t\tSET_MEM_Y:\n\t\tbegin\n\t\t\tt_mem_y <= as1_out;\n\t\t\tnotch <= as1_out;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_NEW_SQ_1:\n\t\tbegin\n\t\t\tas1_in1 <= notch;\n\t\t\tas1_in2 <= {63'd0,1'b1,16'b0};   \n\t\t\t\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_NEW_SQ_2:\n\t\tbegin\n\t\t\tin_sq <= as1_out;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_I_2:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINIT_FOR_3:\n\t\tbegin\n\t\t\ti <= 10'd240;\n\t\t\t\n\t\t\tnlp_mem_x_out <= t_mem_x;\n\t\t\tnlp_mem_y_out <= t_mem_y;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_I_3:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINNER_FOR_1:\n\t\tbegin\n\t\t\tj <= 10'd0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_J:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_ADDR_FIR:\n\t\tbegin\n\t\t\taddr_mem_fir <= j + 10'd1;\n\t\t\tread_fir <= 1'b1;\n\t\t\twrite_fir <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_5:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_6:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tGET_FIR_1:\n\t\tbegin\n\t\t\tmem_fir_j_1 <= out_mem_fir;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tADDR_WRITE_FIR:\n\t\tbegin\n\t\t\taddr_mem_fir <= j;\n\t\t\tread_fir <= 1'b0;\n\t\t\twrite_fir <= 1'b1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tGET_FIR_2:\n\t\tbegin\n\t\t\tin_mem_fir <= mem_fir_j_1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_J:\n\t\tbegin\n\t\t\tj <= j + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tADDR_LAST_FIR:\n\t\tbegin\n\t\t\taddr_mem_fir <= 10'd47;\n\t\t\tread_fir <= 1'b0;\n\t\t\twrite_fir <= 1'b1;\n\t\t\n\t\t\taddr_nlp_sq <= i;\n\t\t\tread_sq <= 1'b1;\n\t\t\twrite_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_7:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_8:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_81:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_82:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_LAST_FIR:\n\t\tbegin\n\t\t\tin_mem_fir <= out_sq;\n\t\t\twrite_sq <= 1'b1;\n\t\t\tread_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_SQ_0:\n\t\tbegin\n\t\t\tin_sq <= 80'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINNER_FOR_2:\n\t\tbegin\n\t\t\tj <= 10'd0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_J_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tREAD_FIR1:\n\t\tbegin\n\t\t\taddr_mem_fir <= j;\n\t\t\tread_fir <= 1'b1;\n\t\t\twrite_fir <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_9:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_DELAY_10:\n\t\tbegin\n\t\t\taddr_nlp_fir <= j;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tMULT_NLP_FIR:\n\t\tbegin\n\t\t\tms1_in1 <= out_mem_fir;\n\t\t\tms1_in2 <= data_out_nlp_fir;\n\t\t\t\n\t\t\twrite_sq <= 1'b0;\n\t\t\tread_sq <= 1'b1;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_11:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_12:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tADDR_FIR_SQ:\n\t\tbegin\n\t\t\tas1_in1 <= ms1_out;\n\t\t\tas1_in2 <= out_sq;\n\t\t\twrite_sq <= 1'b1;\n\t\t\tread_sq <= 1'b0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_SQ_FIR:\n\t\tbegin\n\t\t\tin_sq <= as1_out;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\n\t\tINCR_J_2:\n\t\tbegin\n\t\t\tj <= j + 10'd1;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\n\t\tINCR_I3:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tFFT_INIT:\n\t\tbegin\n\t\t\ti <= 10'd0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tFFT_ADDR:\n\t\tbegin\n\t\t\taddr_in_real <= i;\n\t\t\taddr_in_imag <= i;\n\t\t\tre_fftr <= 1'b0;\n\t\t\tre_ffti <= 1'b0;\n\t\t\twe_fftr <= 1'b1;\n\t\t\twe_ffti <= 1'b1;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\n\t\tDELAY_FFT_1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tDELAY_FFT_2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tWRITE_FFT_INIT:\n\t\tbegin\n\t\t\twrite_in_fft_real <= 80'b0;\n\t\t\twrite_in_fft_imag <= 80'b0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_I4:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_I4:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINIT_FOR_4:\n\t\tbegin\n\t\t\ti <= 10'd0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_I5:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCALC_FFT_ADDR:\n\t\tbegin\n\t\t\taddr_nlp_sq <= i * DEC;\n\t\t\tread_sq <= 1'b1;\n\t\t\twrite_sq <= 1'b0;\n\t\t\t\n\t\t\t\n\t\t\taddr_in_real <= i;\n\t\t\tre_fftr <= 1'b0;\n\t\t\twe_fftr <= 1'b1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\tend\n\n\t\tFOR_DELAY_1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tFOR_DELAY_2:\n\t\tbegin\n\t\t\taddr_nlp_w <= i;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCALC_FFT_SQ_W:\n\t\tbegin\n\t\t\tms1_in1 <= out_sq;\n\t\t\tms1_in2 <= data_out_nlp_w;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\n\t\tWRITE_FFT_REAL1:\n\t\tbegin\n\t\t\twrite_in_fft_real <= ms1_out;\n\t\t\tif(i == 10'd48)\n\t\t\tbegin\n\t\t\t\tcheck_in_sq <= out_sq;  \n\t\t\tend\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tINCR_I_5:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\t\t\n\t\tSTART_DFT:\n\t\tbegin\n\t\t\tstartfft <= 1'b1;\n\t\t\t\n\t\t\tre_fftr <= 1'b1;\n\t\t\twe_fftr <= 1'b0;\n\t\t\tre_ffti <= 1'b1;\n\t\t\twe_ffti <= 1'b0;\n\t\t\t\n\t\t\tre_out_fftr <= 1'b0;\n\t\t\twe_out_fftr <= 1'b1;\n\t\t\tre_out_ffti <= 1'b0;\n\t\t\twe_out_ffti <= 1'b1;\n\t\t\t\n\t\t\tsig <= 5'd0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tRUN_DFT:\n\t\tbegin\n\t\t\tstartfft <= 1'b0;\n\t\t\taddr_in_real <= fft_addr_in_real;\n\t\t\taddr_in_imag <= fft_addr_in_imag;\n\t\t\t\n\t\t\taddr_out_real <= fft_addr_out_real;\n\t\t\taddr_out_imag <= fft_addr_out_imag;\n\t\t\n\t\t\twrite_fft_real <= fft_write_fft_real;\n\t\t\twrite_fft_imag <= fft_write_fft_imag;\n\t\t\t\n\t\t\tfft_in_imag_data <= in_imag_data;\n\t\t\tfft_in_real_data <= in_real_data;\n\t\t\t\n\t\t\tsig <= sig + 5'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINIT_FOR_5:\n\t\tbegin\n\t\t\ti <= 10'd0;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tCHECK_I_6:\n\t\tbegin\n\t\t\tcheck_fw_real <= check_sig;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tSET_ADDR_FOR_5:\n\t\tbegin\n\t\t\taddr_out_real <= i;\n\t\t\taddr_out_imag <= i;\n\t\t\tre_out_fftr <= 1'b1;\n\t\t\twe_out_fftr <= 1'b0;\n\t\t\tre_out_ffti <= 1'b1;\n\t\t\twe_out_ffti <= 1'b0; \n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tFOR_5_DELAY1:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tFOR_5_DELAY2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\n\t\tMULT_REAL_IMAGE_SQ:\n\t\tbegin\n\t\t\t\n\n\n\n\n\t\t\t\n\t\t\tm1 <= {17'b0,out_fft_real[N1-2:16]};\n\t\t\tm2 <= {17'b0,out_fft_real[N1-2:16]};\n\t\t\tm3 <= {17'b0,out_fft_imag[N1-2:16]};\n\t\t\tm4 <= {17'b0,out_fft_imag[N1-2:16]};\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\tend\n\n\t\tADD_REAL_IMAG_SQ:\n\t\tbegin\n\t\t\t\n\n\t\t\t\n\t\t\ta1 <= m1 * m2;\n\t\t\ta2 <= m3 * m4;\n\t\t\t\n\t\t\t\n\n\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\tend\n\n\t\tSET_FW_REAL_ADD:\n\t\tbegin\n\t\t\twrite_fft_real_gmax <= a1 + a2;\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\n\n\n\n\t\t\t\n\t\tend\n\n\t\tINCR_I6:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend \n\t\t\n\t\tSET_GMAX_GMAX_BIN:\n\t\tbegin\n\t\t\tgmax <= 80'b0;\n\t\t\tgmax_bin <= 10'd16;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINIT_FOR_GMAX:\n\t\tbegin\n\t\t\ti <= 10'd16; \n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tCHECK_I_GMAX:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_ADDR_FW_GMAX:\n\t\tbegin\n\t\t\t\n\n\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_GMAX1:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_DELAY_GMAX2:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tCHECK_IF_GMAX:\n\t\tbegin\n\t\t\tgt1_in1 <= out_fft_real_gmax;\n\t\t\tgt1_in2 <= gmax;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_IF_GMAX:\n\t\tbegin\n\t\t\t\n\t\t\tif(gt1)\n\t\t\tbegin\n\t\t\t\tgmax <= out_fft_real_gmax;\n\t\t\t\tgmax_bin <= i;   \n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINCR_I_GMAX:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSTART_PPSM:\n\t\tbegin\n\t\t\tstartppsm <= 1'b1;\n\t\t\t\n\t\t\tpp_gmax <= gmax;\n\t\t\tpp_gmax_bin <= gmax_bin;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tpp_prev_f0 <= prev_f0;\n\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tRUN_PPSM:\n\t\tbegin\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tstartppsm <= 1'b0;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tGET_BESTF0:\n\t\tbegin\n\t\t\tbest_f0 <= pp_best_f0;\n\t\t\t\n\t\t\t\n\t\t\tcheck_i <= c_cmax;\n\t\t\t\n\t\t\t\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\t\n\t\t\t\n\n\t\t\n\t\tINIT_FOR_SQ:\n\t\tbegin\n\t\t\ti <= 10'd0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tCHECK_FOR_SQ:\n\t\tbegin\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSET_ADDR_FOR_SQ:\n\t\tbegin\n\t\t\taddr_nlp_sq <= i + 10'd80;\n\t\t\tread_sq <= 1'b1;\n\t\t\twrite_sq <= 1'b0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\t\n\n\n\t\t\t\n\t\tend\n\t\t\n\t\tFOR_SQ_DELAY1:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tFOR_SQ_DELAY2:\n\t\tbegin\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tGET_SQ_I_N:\n\t\tbegin\n\t\t\tout_sq_i_n <= out_sq;\n\t\t\taddr_nlp_sq <= i;\n\t\t\tread_sq <= 1'b0;\n\t\t\twrite_sq <= 1'b1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_SQ_I_N:\n\t\tbegin\n\t\t\tin_sq <= out_sq_i_n;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tINCR_SQ_I:\n\t\tbegin\n\t\t\ti <= i + 10'd1;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\tend\n\t\t\n\t\tSTART_DIV_BEST0:\n\t\tbegin\n\t\t\tstartdiv <= 1'b1;\n\t\t\tdiv_in <= best_f0;\n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tCALC_DIV_BESTF0:\n\t\tbegin\n\t\t\tm1_in1 <= div_ans;\n\t\t\tm1_in2 <= NLP_FS;\n\t\t\tstartdiv <= 1'b0; \n\t\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_PITCH:\n\t\tbegin\n\t\t\tpitch <= m1_out;\n\t\t\tclk_nlp <= clk_nlp + 40'b1;\n\t\t\tout_prev_f0 <= best_f0;\n\t\t\t\n\t\t\t\n\t\t\t\n\n\t\t\t\n\t\tend\n\t\t\n\t\tDONE:\n\t\tbegin\n\t\t\tdonenlp <= 1'b1;\n\t\t\tcheck_fw_real <= clk_nlp;\n\t\t\t\n\t\t\t\n\t\tend\n\t\t\n\t\tC_FFT1:\n\t\tbegin\n\t\t\taddr_out_real <= 10'd30;\n\t\t\tre_out_fftr <= 1'b1;\n\t\t\twe_out_fftr <= 1'b0;\n\t\tend\n\t\t\n\t\tC_FFT1D1:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tC_FFT1D2:\n\t\tbegin\n\t\t\n\t\tend\n\t\t\n\t\tC_FFT2:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tendcase\n\tend\n\nend\n\n\nendmodule</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: nlp_extended_bits. Module specification: The nlp_extended_bits module implements a Natural Language Processing (NLP) algorithm with extended bit precision for pitch detection. It processes input signals through multiple stages, including initialization, notch filtering, Fast Fourier Transform (FFT), and post-processing. The module has input ports for starting the process (startnlp), clock (clk), reset (rst), input memory values (nlp_mem_x, nlp_mem_y), and previous fundamental frequency (prev_f0). Output ports include the best fundamental frequency (best_f0), previous fundamental frequency (out_prev_f0), completion signal (donenlp), pitch value (pitch), and several debug outputs. Internally, it uses numerous signals for memory addressing, data processing, and state management. The module operates using a state machine with multiple stages: initialization, data processing loops, FFT calculation,"
                }
            ]
        }
    ]
}