{
    "spec": "Module name: estimate_voicing_mbe. Module specification: This module implements a Model-Based Estimator (MBE) for voice activity detection in speech analysis. It processes input signals to determine whether a given audio frame is voiced or unvoiced. The module takes inputs including startevmbe (start signal), clk (clock), rst (reset), L_in (10-bit model order), Wo_in (32-bit fundamental frequency), out_am (32-bit amplitude), and out_sw_real/imag (32-bit spectral weights). It outputs snr (32-bit signal-to-noise ratio), voiced (1-bit voicing decision), addr_am/sw_real/imag (10-bit memory addresses), and doneevmbe (completion signal). Internally, it uses numerous signals for calculations and control, such as STATE and NEXT_STATE for FSM control,",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: estimate_voicing_mbe\n\nExplanation: This module appears to be an implementation of a Model-Based Estimator (MBE) for voice activity detection or speech analysis. It processes input signals to estimate whether a given frame of audio is voiced or unvoiced. The module uses various parameters like signal-to-noise ratio (SNR), energy ratios, and frequency domain analysis to make this determination. It includes complex operations such as FFT calculations, logarithms, and divisions to analyze the spectral characteristics of the input signal. The module goes through multiple states to perform these calculations, ultimately setting a 'voiced' flag to indicate whether the current frame is considered voiced or not."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nBased on the given Verilog code, here are the input and output ports of the module along with their explanations:\n\nInput ports: startevmbe, clk, rst, L_in, Wo_in, out_am, out_sw_real, out_sw_imag. \nExplanation:\n- startevmbe: Start signal to begin the estimation process\n- clk: Clock signal for synchronous operations\n- rst: Reset signal to initialize the module\n- L_in: 10-bit input related to the model order\n- Wo_in: 32-bit input representing the fundamental frequency\n- out_am: 32-bit input for amplitude information\n- out_sw_real, out_sw_imag: 32-bit inputs for real and imaginary parts of spectral weights\n\nOutput ports: snr, voiced, addr_am, addr_sw_real, addr_sw_imag, doneevmbe.\nExplanation:\n- snr: 32-bit output representing the calculated signal-to-noise ratio\n- voiced: 1-bit output indicating whether the frame is voiced (1) or unvoiced (0)\n- addr_am: 10-bit output address for accessing amplitude memory\n- addr_sw_real, addr_sw_imag: 10-bit output addresses for accessing real and imaginary spectral weight memories\n- doneevmbe: 1-bit output signal indicating the completion of the estimation process"
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code, here are the internal signals and their explanations:\n\nInternal signals: STATE, NEXT_STATE, a1_in1, a1_in2, a2_in1, a2_in2, m3_in1, m3_in2, a3_in1, a3_in2, gt1_in1, gt1_in2, lt1_in1, lt1_in2, lt2_in1, lt2_in2, model_L, addr_w_real, startdiv, startlog, div_in, in_x, one_by_error, m1_in1, m1_in2, m2_in1, m2_in2, max_l, l, offset, l_1000hz, l_2000hz, l_4000hz, Wo, one_by_ehigh, log_e, wo_fft_mul, Am_real, Am_imag, den, error, eratio, elow_by_ehigh, l1, m1, m2, l2, l3, elow, ehigh, al_temp, bl_temp, one_by_den, log_snr, al, bl, sig, ew_real, ew_imag.\n\nExplanation:\n- STATE, NEXT_STATE: FSM state registers for controlling the module's operation\n- a1_in1, a1_in2, a2_in1, a2_in2, m3_in1, m3_in2, a3_in1, a3_in2: Inputs for adders and multipliers\n- gt1_in1, gt1_in2, lt1_in1, lt1_in2, lt2_in1, lt2_in2: Inputs for comparison operations\n- model_L: Stores the model order\n- addr_w_real: Address for accessing real part of spectral weights\n- startdiv, startlog: Control signals for division and logarithm operations\n- div_in, in_x: Inputs for division and logarithm operations\n- one_by_error: Stores the reciprocal of the error\n- m1_in1, m1_in2, m2_in1, m2_in2: Inputs for multipliers\n- max_l, l, offset, l_1000hz, l_2000hz, l_4000hz: Various counters and frequency-related values\n- Wo: Stores the fundamental frequency\n- one_by_ehigh, log_e, wo_fft_mul: Intermediate calculation results\n- Am_real, Am_imag, den: Real and imaginary parts of amplitude and denominator\n- error, eratio, elow_by_ehigh: Error-related calculations\n- l1, m1, m2, l2, l3: Loop counters\n- elow, ehigh: Energy calculations for low and high frequency bands\n- al_temp, bl_temp, one_by_den, log_snr: Temporary storage for calculations\n- al, bl: Band limits\n- sig: Signal accumulator\n- ew_real, ew_imag: Real and imaginary parts of error weights\n\nThese internal signals are used for various calculations, temporary storage, and control flow management within the module to estimate voicing in the input signal."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule estimate_voicing_mbe (startevmbe, clk, rst, L_in, Wo_in, out_am,out_sw_real,out_sw_imag, snr, voiced , addr_am,addr_sw_real,addr_sw_imag,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdoneevmbe\t);\n\n\n\n\n\n\t\t\tparameter N = 32;\n\t\t\tparameter Q = 16;\n\n\t\t\tinput clk,rst,startevmbe;\n\t\t\t\n\t\t\tinput [9:0] L_in; \n\t\t\tinput [N-1:0] Wo_in,out_am,out_sw_real,out_sw_imag;\n\t\t\toutput reg [N-1:0] snr;\n\t\t\toutput reg voiced;\n\t\t\toutput reg [9:0] addr_am,addr_sw_real,addr_sw_imag;\n\t\t\toutput reg doneevmbe;\n\t\t\t\n\t\t\t\n\t\t\t\n\n\n\n\n\nparameter START = 7'd0,\n          INIT = 7'd1,\n          INIT_LOOP = 7'd2,\n          CHECK_L = 7'd3,\n          SET_ADDR_AM = 7'd4,\n          SET_DELAY_1 = 7'd5,\n          SET_DELAY_2 = 7'd6,\n          GET_AM = 7'd7,\n          ADD_SIG = 7'd8,\n          SET_SIG = 7'd9,\n          INCR_L = 7'd10,\n\t\t  CALC_L_1000HZ_1 = 7'd11,\n\t\t  CALC_L_1000HZ_2 = 7'd12,\n\t\t  SET_L1 = 7'd13,\n\t\t  CHECK_L1 = 7'd14,\n\t\t  INIT_MAIN_FOR = 7'd15,\n\t\t  CALC_AL_BL_1 = 7'd16,\n\t\t  CALC_AL_BL_2 = 7'd17,\n\t\t  CALC_AL_BL_3 = 7'd18,\n\t\t  SET_AL_BL = 7'd19,\n\t\t  CALC_OFFSET_1 = 7'd20,\n\t\t  CALC_OFFSET_2 = 7'd21,\n\t\t  CALC_OFFSET_3 = 7'd22,\n\t\t  SET_OFFSET_INIT_FOR_1 = 7'd23,\n\t\t  CHECK_M1 = 7'd24,\n\t\t  SET_ADDR_SW_W = 7'd25,\n\t\t  SET_DELAY_SW_1 = 7'd26,\n\t\t  SET_DELAY_SW_2 = 7'd27,\n\t\t  SET_SW_W = 7'd28,\n\t\t  CALC_AM_DEN = 7'd29,\n\t\t  INCR_M1 = 7'd30,\n\t\t  SET_AM_DEN = 7'd31,\n\t\t  CEIL_AL_BL_1 = 7'd32,\n\t\t  CEIL_AL_BL_2 = 7'd33,\n\t\t  INCR_L1 = 7'd34,\n\t\t  CALC_ONE_BY_DEN_1 = 7'd35,\n\t\t  CALC_ONE_BY_DEN_2 = 7'd36,\n\t\t  CALC_ONE_BY_DEN_3 = 7'd37,\n\t\t  SET_AM_REAL_IMAG_1 = 7'd38,\n\t\t  SET_AM_REAL_IMAG_2 = 7'd39,\n\t\t  INIT_FOR_2 = 7'd40,\n\t\t  CHECK_M2 = 7'd41,\n\t\t  SET_ADDR_SW_W_M2 = 7'd42,\n\t\t  SET_DELAY_3 = 7'd43,\n\t\t  SET_DELAY_4 = 7'd44,\n\t\t  SET_SW_W_M2 = 7'd45,\n\t\t  CALC_ERROR_1 = 7'd46,\n\t\t  CALC_ERROR_2 = 7'd47,\n\t\t  CALC_ERROR_3 = 7'd48,\n\t\t  CALC_ERROR_4 = 7'd49,\n\t\t  CALC_ERROR_5 = 7'd50,\n\t\t  SET_ERROR_FINAL = 7'd51,\n\t\t  INCR_M2 = 7'd52,\n\t\t  CALC_ONE_BY_ERROR_1 = 7'd53,\n\t\t  CALC_ONE_BY_ERROR_2 = 7'd54,\n\t\t  CALC_ONE_BY_ERROR_3 = 7'd55,\n\t\t  CALC_LOG_SNR_1 = 7'd56,\n\t\t  CALC_LOG_SNR_2 = 7'd57,\n\t\t  CALC_LOG_SNR_3 = 7'd58,\n\t\t  SET_LOG_SNR_1 = 7'd59,\n\t\t  SET_LOG_SNR_2 = 7'd60,\n\t\t  CHECK_SNR_V_THRESH = 7'd61,\n\t\t  SET_VOICED_BIT = 7'd62,\n\t\t  CALC_L2_L3 = 7'd63,\n          SET_L2_L3 = 7'd64,\n          INIT_FOR_L2 = 7'd65,\n          CHECK_L2 = 7'd66,\n          SET_ADDR_AM_2 = 7'd67,\n          SET_DELAY_5 = 7'd68,\n          SET_DELAY_6 = 7'd69,\n          GET_AM_2 = 7'd70,\n          ADD_ELOW = 7'd71,\n          SET_ELOW = 7'd72,\n          INCR_L2 = 7'd73,\n          INIT_FOR_L3 = 7'd74,\n          CHECK_L3 = 7'd75,\n          SET_ADDR_AM_3 = 7'd76,\n          SET_DELAY_7 = 7'd77,\n          SET_DELAY_8 = 7'd78,\n          GET_AM_3 = 7'd79,\n          ADD_EHIGH = 7'd80,\n          SET_EHIGH = 7'd81,\n          INCR_L3 = 7'd82,\n          CALC_ONE_BY_EHIGH_1 = 7'd83,\n          CALC_ONE_BY_EHIGH_2 = 7'd84,\n          CALC_ONE_BY_EHIGH_3 = 7'd85,\n          CALC_E_BY_E_1 = 7'd86,\n          CALC_E_BY_E_2 = 7'd87,\n          LOG_E_BY_E_1 = 7'd88,\n          LOG_E_BY_E_2 = 7'd89,\n          LOG_E_BY_E_3 = 7'd90,\n          SET_ERATIO = 7'd91,\n          SET_IF_ERATIO = 7'd92,\n          DET_VOICED_1 = 7'd93,\n          SET_IF_SIXTY = 7'd94,\n          DET_VOICED_FINAL = 7'd95,\n          DONE = 7'd96;\n\nreg [6:0] STATE, NEXT_STATE;\n\n\n\n\n\nparameter POINT_0001\t\t = 32'b0_000000000000000_0000000000000110,\n\t\t    POINT_TWO_FIVE = 32'b0_000000000000000_0100000000000000,\n\t\t\t POINT_FIVE\t\t = 32'b0_000000000000000_1000000000000000,\n\t\t\t NEG_POINT_FIVE = 32'b1_000000000000000_1000000000000000,\n\t\t\t ONE\t\t\t\t = 32'b0_000000000000001_0000000000000000,\n\t\t\t TWO\t\t\t\t = 32'b0_000000000000010_0000000000000000,\n\t\t\t FOUR \t\t\t = 32'b0_000000000000100_0000000000000000,\n\t\t\t TEN\t\t\t\t = 32'b0_000000000001010_0000000000000000,\n\t\t\t NEG_TEN\t\t\t = 32'b1_000000000001010_0000000000000000,\n\t\t\t NEG_FOUR\t\t = 32'b1_000000000000100_0000000000000000,\n\t\t    FFT_BY_2PI\t\t = 32'b0_000000001010001_0111110011000001,\n\t\t\t FFT_BY_2\t\t = 32'b0_000000100000000_0000000000000000,\n\t\t\t SIXTY\t\t\t = 32'b0_000000000000000_0000110000010000,\n\t\t\t V_THRESH \t\t = 32'b0_000000000000110_0000000000000000;\n\nreg \t[N-1:0] \ta1_in1,a1_in2,a2_in1,a2_in2,\n\t\t\t\t\tm3_in1,m3_in2,a3_in1,a3_in2,\n\t\t\t\t\tgt1_in1, gt1_in2, lt1_in1, lt1_in2, lt2_in1, lt2_in2;\nwire \t[N-1:0] \ta1_out,a2_out,m3_out,a3_out;\nwire \t\t\t\tgt1, lt1, lt2;\n\nreg \t[N-1:0] \tmodel_L;\n\n\n\nreg  [9:0]  addr_w_real;\nwire [N-1:0] out_w_real;\n\nreg startdiv,startlog;\nwire donediv,donelog;\nreg [N-1:0] div_in,in_x;\nwire [N-1:0] div_ans,out_y;\n\nreg [N-1:0] one_by_error;\n\n\nreg [N-1:0] m1_in1,m1_in2,m2_in1,m2_in2;\nwire [N-1:0] m1_out,m2_out;\n\nqmult  \t\t\t#(Q,N) \t\t\tqmult1\t   (m1_in1,m1_in2,m1_out);\nqadd   \t\t\t#(Q,N)\t\t\tadder1      (a1_in1,a1_in2,a1_out);\n\nqmult  \t\t\t#(Q,N) \t\t\tqmult2\t   (m2_in1,m2_in2,m2_out);\nqadd   \t\t\t#(Q,N)\t\t\tadder2      (a2_in1,a2_in2,a2_out);\n\nqmult  \t\t\t#(Q,N) \t\t\tqmult3\t   (m3_in1,m3_in2,m3_out); \t\nqadd   \t\t\t#(Q,N)\t\t\tadder3      (a3_in1,a3_in2,a3_out);\n\n\n\n\n\nRAM_W_real       w_real\t\t\t(addr_w_real,clk,,1,0,out_w_real);\n\nfpdiv_clk  \t  \t divider\t    (startdiv,clk,rst,div_in,div_ans,donediv);\nfp_log10 \t\t log10\t\t (startlog,clk,rst,in_x,out_y,donelog);\n\nfpgreaterthan\t#(Q,N)    fpgt1          (gt1_in1,gt1_in2,gt1);\nfplessthan\t\t#(Q,N)\t fplt1 \t\t\t (lt1_in1,lt1_in2,lt1);\nfplessthan\t\t#(Q,N)\t fplt2 \t\t\t (lt2_in1,lt2_in2,lt2);\n\nreg [9:0] max_l;\nreg [9:0] l,offset;\nreg [9:0] l_1000hz;\nreg [9:0] l_2000hz,l_4000hz;\nreg [N-1:0]  Wo,one_by_ehigh,log_e,wo_fft_mul;\nreg [N-1:0] Am_real, Am_imag, den, error,eratio,elow_by_ehigh;\nreg [9:0] l1,m1,m2,l2,l3;\nreg [N-1:0] elow,ehigh;\nreg [N-1:0] al_temp,bl_temp,one_by_den,log_snr;\n\nreg [9:0] al,bl;\nreg [N-1:0] sig;\n\nreg [N-1:0] ew_real,ew_imag; \n\n\n\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\t\tSTATE <= START;\n\telse\n\t\tSTATE <= NEXT_STATE;\n\nend\n\n\nalways@(*)                              \nbegin\n\tcase(STATE)\n\n\tSTART:\n\tbegin\n\t\tif(startevmbe == 1'b1)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START;\n\t\tend\n\tend\n\n\tINIT:\n\tbegin\n\t\tNEXT_STATE = INIT_LOOP;\n\tend\n\n\tINIT_LOOP:\n\tbegin\n\t\tNEXT_STATE = CHECK_L;\n\tend\n\n\tCHECK_L:\n\tbegin\n\t\tif(l <= max_l)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_AM;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_L_1000HZ_1;\n\t\tend\n\tend\n\n\tSET_ADDR_AM:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_1;\n\tend\n\n\tSET_DELAY_1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_2;\n\tend\n\n\tSET_DELAY_2:\n\tbegin\n\t\tNEXT_STATE = GET_AM;\n\tend\n\n\tGET_AM:\n\tbegin\n\t\tNEXT_STATE = ADD_SIG;\n\tend\n\n\tADD_SIG:\n\tbegin\n\t\tNEXT_STATE = SET_SIG;\n\tend\n\n\tSET_SIG:\n\tbegin\n\t\tNEXT_STATE = INCR_L;\n\tend\n\n\tINCR_L:\n\tbegin\n\t\tNEXT_STATE = CHECK_L;\n\tend\n\t\n\tCALC_L_1000HZ_1:\n\tbegin\n\t\tNEXT_STATE = CALC_L_1000HZ_2;\n\tend\n\n\tCALC_L_1000HZ_2:\n\tbegin\n\t\tNEXT_STATE = SET_L1;\n\tend\n\t\n\tSET_L1:\n\tbegin\n\t\tNEXT_STATE = CHECK_L1;\n\tend\n\t\n\tCHECK_L1:\n\tbegin\n\t\tif(l1 <= l_1000hz)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_MAIN_FOR;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_ERROR_1;\n\t\tend\n\tend\n\t\n\tINIT_MAIN_FOR:\n\tbegin\n\t\tNEXT_STATE = CALC_AL_BL_1;\n\tend\n\t\n\tCALC_AL_BL_1:\n\tbegin\n\t\tNEXT_STATE = CALC_AL_BL_2;\n\tend\n\t\n\tCALC_AL_BL_2:\n\tbegin\n\t\tNEXT_STATE = CALC_AL_BL_3;\n\tend\t\n\t\n\tCALC_AL_BL_3: \n\tbegin\n\t\tNEXT_STATE = SET_AL_BL;\n\tend\t\n\t\n\tSET_AL_BL :\n\tbegin\n\t\tNEXT_STATE = CEIL_AL_BL_1;\n\tend\t\n\t\n\tCEIL_AL_BL_1:\n\tbegin\n\t\tNEXT_STATE = CEIL_AL_BL_2;\n\tend\n\t\t\n\tCEIL_AL_BL_2:\n\tbegin\n\t\tNEXT_STATE = CALC_OFFSET_1;\n\tend\n\t\n\tCALC_OFFSET_1:\n\tbegin\n\t\tNEXT_STATE = CALC_OFFSET_2;\n\tend\n\t\n\tCALC_OFFSET_2 :\n\tbegin\n\t\tNEXT_STATE = CALC_OFFSET_3;\n\tend\n\t\n\tCALC_OFFSET_3:\n\tbegin\n\t\tNEXT_STATE = SET_OFFSET_INIT_FOR_1;\n\tend\n\t\n\tSET_OFFSET_INIT_FOR_1:\n\tbegin\n\t\tNEXT_STATE = CHECK_M1;\n\tend\n\t\n\tCHECK_M1:\n\tbegin\n\t\tif(m1 < bl)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_SW_W;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_DEN_1;\n\t\tend\n\tend\n\t\n\tSET_ADDR_SW_W :\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_SW_1;\n\tend\n\t\n\tSET_DELAY_SW_1 :\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_SW_2;\n\tend\n\t\n\tSET_DELAY_SW_2 :\n\tbegin\n\t\tNEXT_STATE = SET_SW_W;\n\tend\n\t\n\tSET_SW_W :\n\tbegin\n\t\tNEXT_STATE = CALC_AM_DEN;\n\tend\n\t\n\tCALC_AM_DEN :\n\tbegin\n\t\tNEXT_STATE = SET_AM_DEN;\n\tend\n\t\n\tSET_AM_DEN:\n\tbegin\n\t\tNEXT_STATE = INCR_M1;\n\tend\n\t\n\tINCR_M1 :\n\tbegin\n\t\tNEXT_STATE = CHECK_M1;\n\tend\n\t\n\tINCR_L1:\n\tbegin\n\t\tNEXT_STATE = CHECK_L1;\n\tend\n\t\n\tCALC_ONE_BY_DEN_1:\n\tbegin\n\t\tNEXT_STATE = CALC_ONE_BY_DEN_2;\n\tend\n\t\n\tCALC_ONE_BY_DEN_2:\n\tbegin\n\t\tif(donediv)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_DEN_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_DEN_2;\n\t\tend\n\tend\n\t\n\tCALC_ONE_BY_DEN_3:\n\tbegin\n\t\tNEXT_STATE = SET_AM_REAL_IMAG_1;\n\tend\n\t\n\tSET_AM_REAL_IMAG_1:\n\tbegin\n\t\tNEXT_STATE = SET_AM_REAL_IMAG_2;\n\tend\n\t\n\tSET_AM_REAL_IMAG_2:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_2;\n\tend\n\t\n\tINIT_FOR_2 :\n\tbegin\n\t\tNEXT_STATE = CHECK_M2;\n\tend\n\t\n\tCHECK_M2 :\n\tbegin\n\t\tif(m2 < bl)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_SW_W_M2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INCR_L1;\n\t\tend\n\tend\n\t\n\tSET_ADDR_SW_W_M2 :\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_3;\n\tend\n\t\n\tSET_DELAY_3 :\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_4;\n\tend\n\t\n\tSET_DELAY_4:\n\tbegin\n\t\tNEXT_STATE = SET_SW_W_M2;\n\tend\n\t\n\tSET_SW_W_M2 :\n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_1;\n\tend\n\t\n\tCALC_ERROR_1: \n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_2;\n\tend\n\t\n\tCALC_ERROR_2 :\n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_3;\n\tend\n\t\n\tCALC_ERROR_3 :\n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_4;\n\tend\n\t\n\tCALC_ERROR_4 :\n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_5;\n\tend\n\t\n\tCALC_ERROR_5 :\n\tbegin\n\t\tNEXT_STATE = SET_ERROR_FINAL;\n\tend\n\t\n\tSET_ERROR_FINAL :\n\tbegin\n\t\tNEXT_STATE = INCR_M2;\n\tend\n\t\n\tINCR_M2 :\n\tbegin\n\t\tNEXT_STATE = CHECK_M2;\n\tend\n\t\n\tCALC_ONE_BY_ERROR_1:\n\tbegin\n\t\tNEXT_STATE = CALC_ONE_BY_ERROR_2;\n\tend\n\t\n\tCALC_ONE_BY_ERROR_2:\n\tbegin\n\t\tif(donediv)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_ERROR_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_ERROR_2;\n\t\tend\n\tend\n\t\n\tCALC_ONE_BY_ERROR_3:\n\tbegin\n\t\tNEXT_STATE = CALC_LOG_SNR_1;\n\tend\n\t\n\tCALC_LOG_SNR_1:\n\tbegin\n\t\tNEXT_STATE = CALC_LOG_SNR_2;\n\tend\n\t\n\tCALC_LOG_SNR_2:\n\tbegin\n\t\tif(donelog)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_LOG_SNR_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_LOG_SNR_2;\n\t\tend\n\t\t\n\tend\n\t\n\tCALC_LOG_SNR_3:\n\tbegin\n\t\tNEXT_STATE = SET_LOG_SNR_1;\n\tend\n\t\n\tSET_LOG_SNR_1:\n\tbegin\n\t\tNEXT_STATE = SET_LOG_SNR_2;\n\tend\n\t\n\tSET_LOG_SNR_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_SNR_V_THRESH;\n\tend\n\t\n\tCHECK_SNR_V_THRESH:\n\tbegin\n\t\tNEXT_STATE = SET_VOICED_BIT;\n\tend\n\t\n\tSET_VOICED_BIT:\n\tbegin\n\t\tNEXT_STATE = CALC_L2_L3;\n\tend\n\t\n\tCALC_L2_L3:\n\tbegin\n\t\tNEXT_STATE = SET_L2_L3;\n\tend\n\n\tSET_L2_L3:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_L2;\n\tend\n\n\tINIT_FOR_L2:\n\tbegin\n\t\tNEXT_STATE = CHECK_L2;\n\tend\n\n\tCHECK_L2:\n\tbegin\n\t\tif(l2 <= l_2000hz)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_AM_2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_L3;\n\t\tend\n\tend\n\n\tSET_ADDR_AM_2:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_5;\n\tend\n\n\tSET_DELAY_5:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_6;\n\tend\n\n\tSET_DELAY_6:\n\tbegin\n\t\tNEXT_STATE = GET_AM_2;\n\tend\n\n\tGET_AM_2:\n\tbegin\n\t\tNEXT_STATE = ADD_ELOW;\n\tend\n\n\tADD_ELOW:\n\tbegin\n\t\tNEXT_STATE = SET_ELOW;\n\tend\n\n\tSET_ELOW:\n\tbegin\n\t\tNEXT_STATE = INCR_L2;\n\tend\n\n\tINCR_L2:\n\tbegin\n\t\tNEXT_STATE = CHECK_L2;\n\tend\n\n\tINIT_FOR_L3:\n\tbegin\n\t\tNEXT_STATE = CHECK_L3;\n\tend\n\n\tCHECK_L3:\n\tbegin\n\t\tif(l3 <= l_4000hz)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_AM_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_EHIGH_1;\n\t\tend\n\tend\n\n\tSET_ADDR_AM_3:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_7;\n\tend\n\n\tSET_DELAY_7:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_8;\n\tend\n\n\tSET_DELAY_8:\n\tbegin\n\t\tNEXT_STATE = GET_AM_3;\n\tend\n\n\tGET_AM_3:\n\tbegin\n\t\tNEXT_STATE = ADD_EHIGH;\n\tend\n\n\tADD_EHIGH:\n\tbegin\n\t\tNEXT_STATE = SET_EHIGH;\n\tend\n\n\tSET_EHIGH:\n\tbegin\n\t\tNEXT_STATE = INCR_L3;\n\tend\n\n\tINCR_L3:\n\tbegin\n\t\tNEXT_STATE = CHECK_L3;\n\tend\n\n\tCALC_ONE_BY_EHIGH_1:\n\tbegin\n\t\tNEXT_STATE = CALC_ONE_BY_EHIGH_2;\n\tend\n\n\tCALC_ONE_BY_EHIGH_2:\n\tbegin\n\t\tif(donediv)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_EHIGH_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_EHIGH_2;\n\t\tend\n\tend\n\n\tCALC_ONE_BY_EHIGH_3:\n\tbegin\n\t\tNEXT_STATE = CALC_E_BY_E_1;\n\tend\n\n\tCALC_E_BY_E_1:\n\tbegin\n\t\tNEXT_STATE = CALC_E_BY_E_2;\n\tend\n\n\tCALC_E_BY_E_2:\n\tbegin\n\t\tNEXT_STATE = LOG_E_BY_E_1;\n\tend\n\n\tLOG_E_BY_E_1:\n\tbegin\n\t\tif(donelog)\n\t\tbegin\n\t\t\tNEXT_STATE = LOG_E_BY_E_2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = LOG_E_BY_E_1;\n\t\tend\n\tend\n\n\tLOG_E_BY_E_2:\n\tbegin\n\t\tNEXT_STATE = LOG_E_BY_E_3;\n\tend\n\n\tLOG_E_BY_E_3:\n\tbegin\n\t\tNEXT_STATE = SET_ERATIO;\n\tend\n\n\tSET_ERATIO:\n\tbegin\n\t\tNEXT_STATE = SET_IF_ERATIO;\n\tend\n\n\tSET_IF_ERATIO:\n\tbegin\n\t\tNEXT_STATE = DET_VOICED_1;\n\tend\n\n\tDET_VOICED_1:\n\tbegin\n\t\tNEXT_STATE = SET_IF_SIXTY;\n\tend\n\n\tSET_IF_SIXTY:\n\tbegin\n\t\tNEXT_STATE = DET_VOICED_FINAL;\n\tend\n\n\tDET_VOICED_FINAL:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tDONE:\n\tbegin\n\t\tNEXT_STATE = START;\n\tend\n\n\tdefault:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tendcase\nend\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\tbegin\n\n\t\tdoneevmbe <= 1'b0;\n\n\tend\n\n\telse\n\tbegin\n\t\tcase(STATE)\n\n\t\tSTART:\n\t\tbegin\n\t\t\tdoneevmbe <= 1'b0;\n\t\t\tvoiced <= 1'b1;\n\t\tend\n\n\t\tINIT:\n\t\tbegin\n\t\t\tsig <= POINT_0001;\n\t\t\terror <= POINT_0001;\n\t\t\tehigh <= POINT_0001;\n\t\t\telow  <= POINT_0001;\n\t\t\tm1_in1 <= {6'b0,L_in,16'b0};\n\t\t\tm1_in2 <= POINT_TWO_FIVE;\n\t\t\tmodel_L <= {6'b0,L_in,16'b0};\n\t\t\tWo <= Wo_in;\n\t\tend\n\n\t\tINIT_LOOP:\n\t\tbegin\n\t\t\tl <= 10'd1;\n\t\t\tmax_l <= m1_out[25:16];\n\t\tend\n\n\t\tCHECK_L:\n\t\tbegin \n\t\t\t\n\t\tend\n\n\t\tSET_ADDR_AM:\n\t\tbegin\n\t\t\taddr_am <= l;\n\t\tend\n\n\t\tSET_DELAY_1:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_DELAY_2:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tGET_AM:\n\t\tbegin\n\t\t\tm1_in1 <= out_am;\n\t\t\tm1_in2 <= out_am;\n\t\t\t\n\t\tend\n\n\t\tADD_SIG:\n\t\tbegin\n\t\t\ta1_in1 <= m1_out;\n\t\t\ta1_in2 <= sig;\n\t\tend\n\n\t\tSET_SIG:\n\t\tbegin\n\t\t\tsig <= a1_out;\n\t\tend\n\n\t\tINCR_L:\n\t\tbegin\n\t\t\tl <= l + 10'd1;\n\t\tend\n\t\t\n\t\tCALC_L_1000HZ_1:\n\t\tbegin\n\t\t\tm1_in1 <= model_L;\n\t\t\tm1_in2 <= POINT_TWO_FIVE;\n\t\tend\n\n\t\tCALC_L_1000HZ_2:\n\t\tbegin\n\t\t\tl_1000hz <= m1_out[25:16];\n\t\tend\n\t\t\n\t\tSET_L1:\n\t\tbegin\n\t\t\tl1 <= 10'd1;\n\t\tend\n\t\t\n\t\tCHECK_L1:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tINIT_MAIN_FOR:\n\t\tbegin\n\t\t\tAm_real <= 32'b0;\n\t\t\tAm_imag <= 32'b0;\n\t\t\tden\t\t<= 32'b1;\n\t\tend\t\n\n\t\tCALC_AL_BL_1:\n\t\tbegin\n\t\t\tm1_in1 <= Wo;\n\t\t\tm1_in2 <= FFT_BY_2PI;\n\t\tend\n\t\t\n\t\tCALC_AL_BL_2:\n\t\tbegin\n\t\t\ta1_in1 <= {6'b0,l1,16'b0};\n\t\t\ta1_in2 <= NEG_POINT_FIVE;\n\t\t\ta2_in1 <= {6'b0,l1,16'b0};\n\t\t\ta2_in2 <= POINT_FIVE;\n\t\t\two_fft_mul <= m1_out;\n\t\tend\t\n\t\t\n\t\tCALC_AL_BL_3: \n\t\tbegin\n\t\t\tm1_in1 <= a1_out;\n\t\t\tm1_in2 <= m1_out;\n\t\t\tm2_in1 <= a2_out;\n\t\t\tm2_in2 <= m1_out;\n\t\tend\t\n\t\t\n\t\tSET_AL_BL :\n\t\tbegin\n\t\t\tal_temp <= m1_out;\n\t\t\tbl_temp <= m2_out;\n\t\tend\t\n\t\t\n\t\tCEIL_AL_BL_1:\n\t\tbegin\n\t\t\ta1_in1 <= al_temp;\n\t\t\ta1_in2 <= ONE;\n\t\t\t\n\t\t\ta2_in1 <= bl_temp;\n\t\t\ta2_in2 <= ONE;\n\t\tend\n\t\t\n\t\tCEIL_AL_BL_2:\n\t\tbegin\n\t\t\tal <= a1_out[25:16];\n\t\t\tbl <= a2_out[25:16];\n\t\tend\n\t\t\n\t\tCALC_OFFSET_1:\n\t\tbegin\n\t\t\tm1_in1 <= {6'b0,l1,16'b0};\n\t\t\tm1_in2 <= wo_fft_mul;\n\t\tend\n\t\t\n\t\tCALC_OFFSET_2 :\n\t\tbegin\n\t\t\ta1_in1 <= {1'b1,m1_out[N-2:0]};\n\t\t\ta1_in2 <= POINT_FIVE;\n\t\tend\n\t\t\n\t\tCALC_OFFSET_3:\n\t\tbegin\n\t\t\t\n\t\t\ta1_in1 <= a1_out;\n\t\t\ta1_in2 <= FFT_BY_2;\n\t\tend\n\t\t\n\t\tSET_OFFSET_INIT_FOR_1:\n\t\tbegin\n\t\t\toffset <= a1_out[25:16];\n\t\t\tm1 <= al;\n\t\tend\n\t\t\n\t\tCHECK_M1:\n\t\tbegin\n\t\t\ta1_in1 <=  {6'b0,offset,16'b0};\n\t\t\ta1_in2 <=  {6'b0,m1,16'b0};\n\t\tend\n\t\t\n\t\tSET_ADDR_SW_W :\n\t\tbegin\n\t\t\taddr_sw_real <= m1;\n\t\t\taddr_sw_imag <= m1;\n\t\t\t\n\t\t\taddr_w_real <= a1_out[25:16];\n\t\tend\n\t\t\n\t\tSET_DELAY_SW_1 :\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_SW_2 :\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_SW_W :\n\t\tbegin\n\t\t\tm1_in1 <= out_sw_real;\n\t\t\tm1_in2 <= out_w_real;\n\t\t\tm2_in1 <= out_sw_imag;\n\t\t\tm2_in2 <= out_w_real;\n\t\t\tm3_in1 <= out_w_real;\n\t\t\tm3_in2 <= out_w_real;\n\t\tend\n\t\t\n\t\tCALC_AM_DEN :\n\t\tbegin\n\t\t\ta1_in1 <= m1_out;\n\t\t\ta1_in2 <= Am_real;\n\t\t\ta2_in1 <= m2_out;\n\t\t\ta2_in2 <= Am_imag;\n\t\t\ta3_in1 <= den;\n\t\t\ta3_in2 <= m3_out;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_AM_DEN:\n\t\tbegin\n\t\t\tAm_real <= a1_out;\n\t\t\tAm_imag <= a2_out;\n\t\t\tden <= a3_out;\n\t\tend\n\t\t\n\t\tINCR_M1 :\n\t\tbegin\n\t\t\tm1 <= m1 + 10'd1;\n\t\tend\n\t\t\n\t\tINCR_L1:\n\t\tbegin\n\t\t\tl1 <= l1 + 10'd1;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_DEN_1:\n\t\tbegin\n\t\t\tstartdiv <= 1'b1;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_DEN_2:\n\t\tbegin\n\t\t\tdiv_in <= den;\n\t\t\tstartdiv <= 1'b0;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_DEN_3:\n\t\tbegin\n\t\t\tone_by_den <= div_ans;\n\t\tend\n\t\t\n\t\tSET_AM_REAL_IMAG_1:\n\t\tbegin\n\t\t\tm1_in1 <= Am_real;\n\t\t\tm1_in2 <= one_by_den;\n\t\t\tm2_in1 <= Am_imag;\n\t\t\tm2_in2 <= one_by_den;\n\t\tend\n\t\t\n\t\tSET_AM_REAL_IMAG_2:\n\t\tbegin\n\t\t\tAm_real <= m1_out;\n\t\t\tAm_imag <= m2_out;\n\t\tend\n\t\t\n\t\tINIT_FOR_2 :\n\t\tbegin\n\t\t\tm2 <= al;\n\t\tend\n\t\t\n\t\tCHECK_M2 :\n\t\tbegin\n\t\t\ta1_in1 <=  {6'b0,offset,16'b0};\n\t\t\ta1_in2 <=  {6'b0,m2,16'b0};\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_ADDR_SW_W_M2 :\n\t\tbegin\n\t\t\taddr_sw_real <= m2;\n\t\t\taddr_sw_imag <= m2;\n\t\t\t\n\t\t\taddr_w_real <= a1_out[25:16];\n\t\tend\n\t\t\n\t\tSET_DELAY_3 :\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_4 :\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_SW_W_M2:\n\t\tbegin\n\t\t\tm1_in1 <= Am_real;\n\t\t\tm1_in2 <= out_w_real;\n\t\t\tm2_in1 <= Am_imag;\n\t\t\tm2_in2 <= out_w_real;\n\t\tend\n\t\t\n\t\tCALC_ERROR_1 :\n\t\tbegin\n\t\t\ta1_in1 <= out_sw_real;\n\t\t\ta1_in2 <= {(m1_out[N-1] == 0)?1'b1:1'b0,m1_out[N-2:0]};\n\t\t\ta2_in1 <= out_sw_imag;\n\t\t\ta2_in2 <= {(m2_out[N-1] == 0)?1'b1:1'b0,m2_out[N-2:0]};\n\t\tend\n\t\t\n\t\tCALC_ERROR_2: \n\t\tbegin\n\t\t\tew_real <= a1_out;\n\t\t\tew_imag <= a2_out;\n\t\tend\n\t\t\n\t\tCALC_ERROR_3 :\n\t\tbegin\n\t\t\tm1_in1 <= ew_real;\n\t\t\tm1_in2 <= ew_real;\n\t\t\tm2_in1 <= ew_imag;\n\t\t\tm2_in2 <= ew_imag;\n\t\t\t\n\t\tend\n\t\t\n\t\tCALC_ERROR_4 :\n\t\tbegin\n\t\t\ta1_in1 <= error;\n\t\t\ta1_in2 <= m1_out;\n\t\tend\n\t\t\n\t\tCALC_ERROR_5 :\n\t\tbegin\n\t\t\ta1_in1 <= a1_out;\n\t\t\ta1_in2 <= m2_out;\n\t\tend\n\t\t\n\t\tSET_ERROR_FINAL :\n\t\tbegin\n\t\t\terror <= a1_out;\n\t\tend\n\t\t\n\t\tINCR_M2 :\n\t\tbegin\n\t\t\tm2 <= m2 + 10'd1;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_ERROR_1:\n\t\tbegin\n\t\t\tstartdiv <= 1'b1;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_ERROR_2:\n\t\tbegin\n\t\t\tdiv_in <= error;\n\t\t\tstartdiv <= 1'b0;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_ERROR_3:\n\t\tbegin\n\t\t\tone_by_error <= div_ans;\n\t\tend\n\t\t\n\t\tCALC_LOG_SNR_1:\n\t\tbegin\n\t\t\tm1_in1 <= sig;\n\t\t\tm1_in2 <= one_by_error;\n\t\t\tstartlog <= 1'b1;\n\t\tend\n\t\t\n\t\tCALC_LOG_SNR_2:\n\t\tbegin\n\t\t\tin_x <= m1_out;\t\n\t\t\tstartlog <= 1'b0;\n\t\tend\n\t\t\n\t\tCALC_LOG_SNR_3:\n\t\tbegin\n\t\t\tlog_snr <= out_y;\n\t\tend\n\t\t\n\t\tSET_LOG_SNR_1:\n\t\tbegin\n\t\t\tm1_in1 <= log_snr;\n\t\t\tm1_in2 <= TEN;\n\t\tend\n\t\t\n\t\tSET_LOG_SNR_2:\n\t\tbegin\n\t\t\tsnr <= m1_out;\n\t\tend\n\t\t\n\t\tCHECK_SNR_V_THRESH:\n\t\tbegin\n\t\t\tgt1_in1 <= snr;\n\t\t\tgt1_in2 <= V_THRESH;\n\t\tend\n\t\t\n\t\tSET_VOICED_BIT:\n\t\tbegin\n\t\t\tif(gt1)\n\t\t\tbegin\n\t\t\t\tvoiced <= 1'b1;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tvoiced <= 1'b0;\n\t\t\tend\n\t\t\t\n\t\tend\n\t\t\n\t\tCALC_L2_L3:\n\t\tbegin\n\t\t\tm1_in1 <= {6'b0,l_1000hz,16'b0};\n\t\t\tm1_in2 <= TWO;\n\t\t\tm2_in1 <= {6'b0,l_1000hz,16'b0};\n\t\t\tm2_in2 <= FOUR;\n\t\tend\n\n\t\tSET_L2_L3:\n\t\tbegin\n\t\t\tl_2000hz <= m1_out[25:16];\n\t\t\tl_4000hz <= m2_out[25:16];\n\t\tend\n\n\t\tINIT_FOR_L2:\n\t\tbegin\n\t\t\tl2 <= 10'd1;\n\t\tend\n\n\t\tCHECK_L2:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_ADDR_AM_2:\n\t\tbegin\n\t\t\taddr_am <= l2;\n\t\tend\n\n\t\tSET_DELAY_5:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_DELAY_6:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tGET_AM_2:\n\t\tbegin\n\t\t\tm1_in1 <= out_am;\n\t\t\tm1_in2 <= out_am;\n\t\tend\n\n\t\tADD_ELOW:\n\t\tbegin\n\t\t\ta1_in1 <= elow;\n\t\t\ta1_in2 <= m1_out;\n\t\t\t\n\t\tend\n\n\t\tSET_ELOW:\n\t\tbegin\n\t\t\telow <= a1_out;\n\t\tend\n\n\t\tINCR_L2:\n\t\tbegin\n\t\t\tl2 <= l2 + 10'd1;\n\t\tend\n\n\t\tINIT_FOR_L3:\n\t\tbegin\n\t\t\tl3 <= l_2000hz;\n\t\tend\n\n\t\tCHECK_L3:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_ADDR_AM_3:\n\t\tbegin\n\t\t\taddr_am <= l3;\n\t\tend\n\n\t\tSET_DELAY_7:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_DELAY_8:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tGET_AM_3:\n\t\tbegin\n\t\t\tm1_in1 <= out_am;\n\t\t\tm1_in2 <= out_am;\n\t\tend\n\n\t\tADD_EHIGH:\n\t\tbegin\n\t\t\ta1_in1 <= ehigh;\n\t\t\ta1_in2 <= m1_out;\n\t\tend\n\n\t\tSET_EHIGH:\n\t\tbegin\n\t\t\tehigh <= a1_out;\n\t\tend\n\n\t\tINCR_L3:\n\t\tbegin\n\t\t\tl3 <= l3 + 10'd1;\n\t\tend\n\n\t\tCALC_ONE_BY_EHIGH_1:\n\t\tbegin\n\t\t\tstartdiv <= 1'b1;\n\t\tend\n\n\t\tCALC_ONE_BY_EHIGH_2:\n\t\tbegin\n\t\t\tdiv_in <= ehigh;\n\t\t\tstartdiv <= 1'b0;\n\t\tend\n\n\t\tCALC_ONE_BY_EHIGH_3:\n\t\tbegin\n\t\t\tone_by_ehigh <= div_ans;\n\t\tend\n\n\t\tCALC_E_BY_E_1:\n\t\tbegin\n\t\t\tm1_in1 <= elow;\n\t\t\tm1_in2 <= one_by_ehigh;\n\t\tend\n\n\t\tCALC_E_BY_E_2:\n\t\tbegin\n\t\t\telow_by_ehigh <= m1_out;\n\t\t\tstartlog <= 1'b1;\n\t\tend\n\n\t\tLOG_E_BY_E_1:\n\t\tbegin\n\t\t\tin_x <= elow_by_ehigh;\n\t\t\tstartlog <= 1'b0;\n\t\tend\n\n\t\tLOG_E_BY_E_2:\n\t\tbegin\n\t\t\tlog_e <= out_y;\n\t\tend\n\n\t\tLOG_E_BY_E_3:\n\t\tbegin\n\t\t\tm1_in1 <= log_e;\n\t\t\tm1_in2 <= TEN;\n\t\tend\n\n\t\tSET_ERATIO:\n\t\tbegin\n\t\t\teratio <= m1_out;\n\t\tend\n\n\t\tSET_IF_ERATIO:\n\t\tbegin\n\t\t\tgt1_in1 <= eratio;\n\t\t\tgt1_in2 <= TEN;\n\t\t\tlt1_in1 <= eratio;\n\t\t\tlt1_in2 <= NEG_TEN;\n\t\tend\n\n\t\tDET_VOICED_1:\n\t\tbegin\n\t\t\tif(!voiced)\n\t\t\tbegin\n\t\t\t\tif(gt1)\n\t\t\t\tbegin\n\t\t\t\t\tvoiced <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tvoiced <= 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tif(lt1)\n\t\t\t\tbegin\n\t\t\t\t\tvoiced <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tvoiced <= 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tend\n\n\t\tSET_IF_SIXTY:\n\t\tbegin\n\t\t\tlt1_in1 <= eratio;\n\t\t\tlt1_in2 <= NEG_FOUR;\n\t\t\tlt2_in1 <= Wo;\n\t\t\tlt2_in2 <= SIXTY;\n\t\tend\n\n\t\tDET_VOICED_FINAL:\n\t\tbegin\n\t\t\tif(lt1 && (lt2 || (Wo == SIXTY)))\n\t\t\tbegin\n\t\t\t\tvoiced <= 1'b0;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tvoiced <= 1'b1;\n\t\t\tend\n\t\tend\n\t\n\t\tDONE:\n\t\tbegin\n\t\t\tdoneevmbe <= 1'b1;\n\t\tend\n\n\t\tendcase\n\tend\n\nend\n\n\nendmodule```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: estimate_voicing_mbe. Module specification: This module implements a Model-Based Estimator (MBE) for voice activity detection in speech analysis. It processes input signals to determine whether a given audio frame is voiced or unvoiced. The module takes inputs including startevmbe (start signal), clk (clock), rst (reset), L_in (10-bit model order), Wo_in (32-bit fundamental frequency), out_am (32-bit amplitude), and out_sw_real/imag (32-bit spectral weights). It outputs snr (32-bit signal-to-noise ratio), voiced (1-bit voicing decision), addr_am/sw_real/imag (10-bit memory addresses), and doneevmbe (completion signal). Internally, it uses numerous signals for calculations and control, such as STATE and NEXT_STATE for FSM control,"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: estimate_voicing_mbe\n\nExplanation: This module appears to be an implementation of a Model-Based Estimator (MBE) for voice activity detection or speech analysis. It processes input signals to estimate whether a given frame of audio is voiced or unvoiced. The module uses various parameters like signal-to-noise ratio (SNR), energy ratios, and frequency domain analysis to make this determination. It includes complex operations such as FFT calculations, logarithms, and divisions to analyze the spectral characteristics of the input signal. The module goes through multiple states to perform these calculations, ultimately setting a 'voiced' flag to indicate whether the current frame is considered voiced or not."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nBased on the given Verilog code, here are the input and output ports of the module along with their explanations:\n\nInput ports: startevmbe, clk, rst, L_in, Wo_in, out_am, out_sw_real, out_sw_imag. \nExplanation:\n- startevmbe: Start signal to begin the estimation process\n- clk: Clock signal for synchronous operations\n- rst: Reset signal to initialize the module\n- L_in: 10-bit input related to the model order\n- Wo_in: 32-bit input representing the fundamental frequency\n- out_am: 32-bit input for amplitude information\n- out_sw_real, out_sw_imag: 32-bit inputs for real and imaginary parts of spectral weights\n\nOutput ports: snr, voiced, addr_am, addr_sw_real, addr_sw_imag, doneevmbe.\nExplanation:\n- snr: 32-bit output representing the calculated signal-to-noise ratio\n- voiced: 1-bit output indicating whether the frame is voiced (1) or unvoiced (0)\n- addr_am: 10-bit output address for accessing amplitude memory\n- addr_sw_real, addr_sw_imag: 10-bit output addresses for accessing real and imaginary spectral weight memories\n- doneevmbe: 1-bit output signal indicating the completion of the estimation process"
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code, here are the internal signals and their explanations:\n\nInternal signals: STATE, NEXT_STATE, a1_in1, a1_in2, a2_in1, a2_in2, m3_in1, m3_in2, a3_in1, a3_in2, gt1_in1, gt1_in2, lt1_in1, lt1_in2, lt2_in1, lt2_in2, model_L, addr_w_real, startdiv, startlog, div_in, in_x, one_by_error, m1_in1, m1_in2, m2_in1, m2_in2, max_l, l, offset, l_1000hz, l_2000hz, l_4000hz, Wo, one_by_ehigh, log_e, wo_fft_mul, Am_real, Am_imag, den, error, eratio, elow_by_ehigh, l1, m1, m2, l2, l3, elow, ehigh, al_temp, bl_temp, one_by_den, log_snr, al, bl, sig, ew_real, ew_imag.\n\nExplanation:\n- STATE, NEXT_STATE: FSM state registers for controlling the module's operation\n- a1_in1, a1_in2, a2_in1, a2_in2, m3_in1, m3_in2, a3_in1, a3_in2: Inputs for adders and multipliers\n- gt1_in1, gt1_in2, lt1_in1, lt1_in2, lt2_in1, lt2_in2: Inputs for comparison operations\n- model_L: Stores the model order\n- addr_w_real: Address for accessing real part of spectral weights\n- startdiv, startlog: Control signals for division and logarithm operations\n- div_in, in_x: Inputs for division and logarithm operations\n- one_by_error: Stores the reciprocal of the error\n- m1_in1, m1_in2, m2_in1, m2_in2: Inputs for multipliers\n- max_l, l, offset, l_1000hz, l_2000hz, l_4000hz: Various counters and frequency-related values\n- Wo: Stores the fundamental frequency\n- one_by_ehigh, log_e, wo_fft_mul: Intermediate calculation results\n- Am_real, Am_imag, den: Real and imaginary parts of amplitude and denominator\n- error, eratio, elow_by_ehigh: Error-related calculations\n- l1, m1, m2, l2, l3: Loop counters\n- elow, ehigh: Energy calculations for low and high frequency bands\n- al_temp, bl_temp, one_by_den, log_snr: Temporary storage for calculations\n- al, bl: Band limits\n- sig: Signal accumulator\n- ew_real, ew_imag: Real and imaginary parts of error weights\n\nThese internal signals are used for various calculations, temporary storage, and control flow management within the module to estimate voicing in the input signal."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule estimate_voicing_mbe (startevmbe, clk, rst, L_in, Wo_in, out_am,out_sw_real,out_sw_imag, snr, voiced , addr_am,addr_sw_real,addr_sw_imag,\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdoneevmbe\t);\n\n\n\n\n\n\t\t\tparameter N = 32;\n\t\t\tparameter Q = 16;\n\n\t\t\tinput clk,rst,startevmbe;\n\t\t\t\n\t\t\tinput [9:0] L_in; \n\t\t\tinput [N-1:0] Wo_in,out_am,out_sw_real,out_sw_imag;\n\t\t\toutput reg [N-1:0] snr;\n\t\t\toutput reg voiced;\n\t\t\toutput reg [9:0] addr_am,addr_sw_real,addr_sw_imag;\n\t\t\toutput reg doneevmbe;\n\t\t\t\n\t\t\t\n\t\t\t\n\n\n\n\n\nparameter START = 7'd0,\n          INIT = 7'd1,\n          INIT_LOOP = 7'd2,\n          CHECK_L = 7'd3,\n          SET_ADDR_AM = 7'd4,\n          SET_DELAY_1 = 7'd5,\n          SET_DELAY_2 = 7'd6,\n          GET_AM = 7'd7,\n          ADD_SIG = 7'd8,\n          SET_SIG = 7'd9,\n          INCR_L = 7'd10,\n\t\t  CALC_L_1000HZ_1 = 7'd11,\n\t\t  CALC_L_1000HZ_2 = 7'd12,\n\t\t  SET_L1 = 7'd13,\n\t\t  CHECK_L1 = 7'd14,\n\t\t  INIT_MAIN_FOR = 7'd15,\n\t\t  CALC_AL_BL_1 = 7'd16,\n\t\t  CALC_AL_BL_2 = 7'd17,\n\t\t  CALC_AL_BL_3 = 7'd18,\n\t\t  SET_AL_BL = 7'd19,\n\t\t  CALC_OFFSET_1 = 7'd20,\n\t\t  CALC_OFFSET_2 = 7'd21,\n\t\t  CALC_OFFSET_3 = 7'd22,\n\t\t  SET_OFFSET_INIT_FOR_1 = 7'd23,\n\t\t  CHECK_M1 = 7'd24,\n\t\t  SET_ADDR_SW_W = 7'd25,\n\t\t  SET_DELAY_SW_1 = 7'd26,\n\t\t  SET_DELAY_SW_2 = 7'd27,\n\t\t  SET_SW_W = 7'd28,\n\t\t  CALC_AM_DEN = 7'd29,\n\t\t  INCR_M1 = 7'd30,\n\t\t  SET_AM_DEN = 7'd31,\n\t\t  CEIL_AL_BL_1 = 7'd32,\n\t\t  CEIL_AL_BL_2 = 7'd33,\n\t\t  INCR_L1 = 7'd34,\n\t\t  CALC_ONE_BY_DEN_1 = 7'd35,\n\t\t  CALC_ONE_BY_DEN_2 = 7'd36,\n\t\t  CALC_ONE_BY_DEN_3 = 7'd37,\n\t\t  SET_AM_REAL_IMAG_1 = 7'd38,\n\t\t  SET_AM_REAL_IMAG_2 = 7'd39,\n\t\t  INIT_FOR_2 = 7'd40,\n\t\t  CHECK_M2 = 7'd41,\n\t\t  SET_ADDR_SW_W_M2 = 7'd42,\n\t\t  SET_DELAY_3 = 7'd43,\n\t\t  SET_DELAY_4 = 7'd44,\n\t\t  SET_SW_W_M2 = 7'd45,\n\t\t  CALC_ERROR_1 = 7'd46,\n\t\t  CALC_ERROR_2 = 7'd47,\n\t\t  CALC_ERROR_3 = 7'd48,\n\t\t  CALC_ERROR_4 = 7'd49,\n\t\t  CALC_ERROR_5 = 7'd50,\n\t\t  SET_ERROR_FINAL = 7'd51,\n\t\t  INCR_M2 = 7'd52,\n\t\t  CALC_ONE_BY_ERROR_1 = 7'd53,\n\t\t  CALC_ONE_BY_ERROR_2 = 7'd54,\n\t\t  CALC_ONE_BY_ERROR_3 = 7'd55,\n\t\t  CALC_LOG_SNR_1 = 7'd56,\n\t\t  CALC_LOG_SNR_2 = 7'd57,\n\t\t  CALC_LOG_SNR_3 = 7'd58,\n\t\t  SET_LOG_SNR_1 = 7'd59,\n\t\t  SET_LOG_SNR_2 = 7'd60,\n\t\t  CHECK_SNR_V_THRESH = 7'd61,\n\t\t  SET_VOICED_BIT = 7'd62,\n\t\t  CALC_L2_L3 = 7'd63,\n          SET_L2_L3 = 7'd64,\n          INIT_FOR_L2 = 7'd65,\n          CHECK_L2 = 7'd66,\n          SET_ADDR_AM_2 = 7'd67,\n          SET_DELAY_5 = 7'd68,\n          SET_DELAY_6 = 7'd69,\n          GET_AM_2 = 7'd70,\n          ADD_ELOW = 7'd71,\n          SET_ELOW = 7'd72,\n          INCR_L2 = 7'd73,\n          INIT_FOR_L3 = 7'd74,\n          CHECK_L3 = 7'd75,\n          SET_ADDR_AM_3 = 7'd76,\n          SET_DELAY_7 = 7'd77,\n          SET_DELAY_8 = 7'd78,\n          GET_AM_3 = 7'd79,\n          ADD_EHIGH = 7'd80,\n          SET_EHIGH = 7'd81,\n          INCR_L3 = 7'd82,\n          CALC_ONE_BY_EHIGH_1 = 7'd83,\n          CALC_ONE_BY_EHIGH_2 = 7'd84,\n          CALC_ONE_BY_EHIGH_3 = 7'd85,\n          CALC_E_BY_E_1 = 7'd86,\n          CALC_E_BY_E_2 = 7'd87,\n          LOG_E_BY_E_1 = 7'd88,\n          LOG_E_BY_E_2 = 7'd89,\n          LOG_E_BY_E_3 = 7'd90,\n          SET_ERATIO = 7'd91,\n          SET_IF_ERATIO = 7'd92,\n          DET_VOICED_1 = 7'd93,\n          SET_IF_SIXTY = 7'd94,\n          DET_VOICED_FINAL = 7'd95,\n          DONE = 7'd96;\n\nreg [6:0] STATE, NEXT_STATE;\n\n\n\n\n\nparameter POINT_0001\t\t = 32'b0_000000000000000_0000000000000110,\n\t\t    POINT_TWO_FIVE = 32'b0_000000000000000_0100000000000000,\n\t\t\t POINT_FIVE\t\t = 32'b0_000000000000000_1000000000000000,\n\t\t\t NEG_POINT_FIVE = 32'b1_000000000000000_1000000000000000,\n\t\t\t ONE\t\t\t\t = 32'b0_000000000000001_0000000000000000,\n\t\t\t TWO\t\t\t\t = 32'b0_000000000000010_0000000000000000,\n\t\t\t FOUR \t\t\t = 32'b0_000000000000100_0000000000000000,\n\t\t\t TEN\t\t\t\t = 32'b0_000000000001010_0000000000000000,\n\t\t\t NEG_TEN\t\t\t = 32'b1_000000000001010_0000000000000000,\n\t\t\t NEG_FOUR\t\t = 32'b1_000000000000100_0000000000000000,\n\t\t    FFT_BY_2PI\t\t = 32'b0_000000001010001_0111110011000001,\n\t\t\t FFT_BY_2\t\t = 32'b0_000000100000000_0000000000000000,\n\t\t\t SIXTY\t\t\t = 32'b0_000000000000000_0000110000010000,\n\t\t\t V_THRESH \t\t = 32'b0_000000000000110_0000000000000000;\n\nreg \t[N-1:0] \ta1_in1,a1_in2,a2_in1,a2_in2,\n\t\t\t\t\tm3_in1,m3_in2,a3_in1,a3_in2,\n\t\t\t\t\tgt1_in1, gt1_in2, lt1_in1, lt1_in2, lt2_in1, lt2_in2;\nwire \t[N-1:0] \ta1_out,a2_out,m3_out,a3_out;\nwire \t\t\t\tgt1, lt1, lt2;\n\nreg \t[N-1:0] \tmodel_L;\n\n\n\nreg  [9:0]  addr_w_real;\nwire [N-1:0] out_w_real;\n\nreg startdiv,startlog;\nwire donediv,donelog;\nreg [N-1:0] div_in,in_x;\nwire [N-1:0] div_ans,out_y;\n\nreg [N-1:0] one_by_error;\n\n\nreg [N-1:0] m1_in1,m1_in2,m2_in1,m2_in2;\nwire [N-1:0] m1_out,m2_out;\n\nqmult  \t\t\t#(Q,N) \t\t\tqmult1\t   (m1_in1,m1_in2,m1_out);\nqadd   \t\t\t#(Q,N)\t\t\tadder1      (a1_in1,a1_in2,a1_out);\n\nqmult  \t\t\t#(Q,N) \t\t\tqmult2\t   (m2_in1,m2_in2,m2_out);\nqadd   \t\t\t#(Q,N)\t\t\tadder2      (a2_in1,a2_in2,a2_out);\n\nqmult  \t\t\t#(Q,N) \t\t\tqmult3\t   (m3_in1,m3_in2,m3_out); \t\nqadd   \t\t\t#(Q,N)\t\t\tadder3      (a3_in1,a3_in2,a3_out);\n\n\n\n\n\nRAM_W_real       w_real\t\t\t(addr_w_real,clk,,1,0,out_w_real);\n\nfpdiv_clk  \t  \t divider\t    (startdiv,clk,rst,div_in,div_ans,donediv);\nfp_log10 \t\t log10\t\t (startlog,clk,rst,in_x,out_y,donelog);\n\nfpgreaterthan\t#(Q,N)    fpgt1          (gt1_in1,gt1_in2,gt1);\nfplessthan\t\t#(Q,N)\t fplt1 \t\t\t (lt1_in1,lt1_in2,lt1);\nfplessthan\t\t#(Q,N)\t fplt2 \t\t\t (lt2_in1,lt2_in2,lt2);\n\nreg [9:0] max_l;\nreg [9:0] l,offset;\nreg [9:0] l_1000hz;\nreg [9:0] l_2000hz,l_4000hz;\nreg [N-1:0]  Wo,one_by_ehigh,log_e,wo_fft_mul;\nreg [N-1:0] Am_real, Am_imag, den, error,eratio,elow_by_ehigh;\nreg [9:0] l1,m1,m2,l2,l3;\nreg [N-1:0] elow,ehigh;\nreg [N-1:0] al_temp,bl_temp,one_by_den,log_snr;\n\nreg [9:0] al,bl;\nreg [N-1:0] sig;\n\nreg [N-1:0] ew_real,ew_imag; \n\n\n\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\t\tSTATE <= START;\n\telse\n\t\tSTATE <= NEXT_STATE;\n\nend\n\n\nalways@(*)                              \nbegin\n\tcase(STATE)\n\n\tSTART:\n\tbegin\n\t\tif(startevmbe == 1'b1)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = START;\n\t\tend\n\tend\n\n\tINIT:\n\tbegin\n\t\tNEXT_STATE = INIT_LOOP;\n\tend\n\n\tINIT_LOOP:\n\tbegin\n\t\tNEXT_STATE = CHECK_L;\n\tend\n\n\tCHECK_L:\n\tbegin\n\t\tif(l <= max_l)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_AM;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_L_1000HZ_1;\n\t\tend\n\tend\n\n\tSET_ADDR_AM:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_1;\n\tend\n\n\tSET_DELAY_1:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_2;\n\tend\n\n\tSET_DELAY_2:\n\tbegin\n\t\tNEXT_STATE = GET_AM;\n\tend\n\n\tGET_AM:\n\tbegin\n\t\tNEXT_STATE = ADD_SIG;\n\tend\n\n\tADD_SIG:\n\tbegin\n\t\tNEXT_STATE = SET_SIG;\n\tend\n\n\tSET_SIG:\n\tbegin\n\t\tNEXT_STATE = INCR_L;\n\tend\n\n\tINCR_L:\n\tbegin\n\t\tNEXT_STATE = CHECK_L;\n\tend\n\t\n\tCALC_L_1000HZ_1:\n\tbegin\n\t\tNEXT_STATE = CALC_L_1000HZ_2;\n\tend\n\n\tCALC_L_1000HZ_2:\n\tbegin\n\t\tNEXT_STATE = SET_L1;\n\tend\n\t\n\tSET_L1:\n\tbegin\n\t\tNEXT_STATE = CHECK_L1;\n\tend\n\t\n\tCHECK_L1:\n\tbegin\n\t\tif(l1 <= l_1000hz)\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_MAIN_FOR;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_ERROR_1;\n\t\tend\n\tend\n\t\n\tINIT_MAIN_FOR:\n\tbegin\n\t\tNEXT_STATE = CALC_AL_BL_1;\n\tend\n\t\n\tCALC_AL_BL_1:\n\tbegin\n\t\tNEXT_STATE = CALC_AL_BL_2;\n\tend\n\t\n\tCALC_AL_BL_2:\n\tbegin\n\t\tNEXT_STATE = CALC_AL_BL_3;\n\tend\t\n\t\n\tCALC_AL_BL_3: \n\tbegin\n\t\tNEXT_STATE = SET_AL_BL;\n\tend\t\n\t\n\tSET_AL_BL :\n\tbegin\n\t\tNEXT_STATE = CEIL_AL_BL_1;\n\tend\t\n\t\n\tCEIL_AL_BL_1:\n\tbegin\n\t\tNEXT_STATE = CEIL_AL_BL_2;\n\tend\n\t\t\n\tCEIL_AL_BL_2:\n\tbegin\n\t\tNEXT_STATE = CALC_OFFSET_1;\n\tend\n\t\n\tCALC_OFFSET_1:\n\tbegin\n\t\tNEXT_STATE = CALC_OFFSET_2;\n\tend\n\t\n\tCALC_OFFSET_2 :\n\tbegin\n\t\tNEXT_STATE = CALC_OFFSET_3;\n\tend\n\t\n\tCALC_OFFSET_3:\n\tbegin\n\t\tNEXT_STATE = SET_OFFSET_INIT_FOR_1;\n\tend\n\t\n\tSET_OFFSET_INIT_FOR_1:\n\tbegin\n\t\tNEXT_STATE = CHECK_M1;\n\tend\n\t\n\tCHECK_M1:\n\tbegin\n\t\tif(m1 < bl)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_SW_W;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_DEN_1;\n\t\tend\n\tend\n\t\n\tSET_ADDR_SW_W :\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_SW_1;\n\tend\n\t\n\tSET_DELAY_SW_1 :\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_SW_2;\n\tend\n\t\n\tSET_DELAY_SW_2 :\n\tbegin\n\t\tNEXT_STATE = SET_SW_W;\n\tend\n\t\n\tSET_SW_W :\n\tbegin\n\t\tNEXT_STATE = CALC_AM_DEN;\n\tend\n\t\n\tCALC_AM_DEN :\n\tbegin\n\t\tNEXT_STATE = SET_AM_DEN;\n\tend\n\t\n\tSET_AM_DEN:\n\tbegin\n\t\tNEXT_STATE = INCR_M1;\n\tend\n\t\n\tINCR_M1 :\n\tbegin\n\t\tNEXT_STATE = CHECK_M1;\n\tend\n\t\n\tINCR_L1:\n\tbegin\n\t\tNEXT_STATE = CHECK_L1;\n\tend\n\t\n\tCALC_ONE_BY_DEN_1:\n\tbegin\n\t\tNEXT_STATE = CALC_ONE_BY_DEN_2;\n\tend\n\t\n\tCALC_ONE_BY_DEN_2:\n\tbegin\n\t\tif(donediv)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_DEN_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_DEN_2;\n\t\tend\n\tend\n\t\n\tCALC_ONE_BY_DEN_3:\n\tbegin\n\t\tNEXT_STATE = SET_AM_REAL_IMAG_1;\n\tend\n\t\n\tSET_AM_REAL_IMAG_1:\n\tbegin\n\t\tNEXT_STATE = SET_AM_REAL_IMAG_2;\n\tend\n\t\n\tSET_AM_REAL_IMAG_2:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_2;\n\tend\n\t\n\tINIT_FOR_2 :\n\tbegin\n\t\tNEXT_STATE = CHECK_M2;\n\tend\n\t\n\tCHECK_M2 :\n\tbegin\n\t\tif(m2 < bl)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_SW_W_M2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INCR_L1;\n\t\tend\n\tend\n\t\n\tSET_ADDR_SW_W_M2 :\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_3;\n\tend\n\t\n\tSET_DELAY_3 :\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_4;\n\tend\n\t\n\tSET_DELAY_4:\n\tbegin\n\t\tNEXT_STATE = SET_SW_W_M2;\n\tend\n\t\n\tSET_SW_W_M2 :\n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_1;\n\tend\n\t\n\tCALC_ERROR_1: \n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_2;\n\tend\n\t\n\tCALC_ERROR_2 :\n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_3;\n\tend\n\t\n\tCALC_ERROR_3 :\n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_4;\n\tend\n\t\n\tCALC_ERROR_4 :\n\tbegin\n\t\tNEXT_STATE = CALC_ERROR_5;\n\tend\n\t\n\tCALC_ERROR_5 :\n\tbegin\n\t\tNEXT_STATE = SET_ERROR_FINAL;\n\tend\n\t\n\tSET_ERROR_FINAL :\n\tbegin\n\t\tNEXT_STATE = INCR_M2;\n\tend\n\t\n\tINCR_M2 :\n\tbegin\n\t\tNEXT_STATE = CHECK_M2;\n\tend\n\t\n\tCALC_ONE_BY_ERROR_1:\n\tbegin\n\t\tNEXT_STATE = CALC_ONE_BY_ERROR_2;\n\tend\n\t\n\tCALC_ONE_BY_ERROR_2:\n\tbegin\n\t\tif(donediv)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_ERROR_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_ERROR_2;\n\t\tend\n\tend\n\t\n\tCALC_ONE_BY_ERROR_3:\n\tbegin\n\t\tNEXT_STATE = CALC_LOG_SNR_1;\n\tend\n\t\n\tCALC_LOG_SNR_1:\n\tbegin\n\t\tNEXT_STATE = CALC_LOG_SNR_2;\n\tend\n\t\n\tCALC_LOG_SNR_2:\n\tbegin\n\t\tif(donelog)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_LOG_SNR_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_LOG_SNR_2;\n\t\tend\n\t\t\n\tend\n\t\n\tCALC_LOG_SNR_3:\n\tbegin\n\t\tNEXT_STATE = SET_LOG_SNR_1;\n\tend\n\t\n\tSET_LOG_SNR_1:\n\tbegin\n\t\tNEXT_STATE = SET_LOG_SNR_2;\n\tend\n\t\n\tSET_LOG_SNR_2:\n\tbegin\n\t\tNEXT_STATE = CHECK_SNR_V_THRESH;\n\tend\n\t\n\tCHECK_SNR_V_THRESH:\n\tbegin\n\t\tNEXT_STATE = SET_VOICED_BIT;\n\tend\n\t\n\tSET_VOICED_BIT:\n\tbegin\n\t\tNEXT_STATE = CALC_L2_L3;\n\tend\n\t\n\tCALC_L2_L3:\n\tbegin\n\t\tNEXT_STATE = SET_L2_L3;\n\tend\n\n\tSET_L2_L3:\n\tbegin\n\t\tNEXT_STATE = INIT_FOR_L2;\n\tend\n\n\tINIT_FOR_L2:\n\tbegin\n\t\tNEXT_STATE = CHECK_L2;\n\tend\n\n\tCHECK_L2:\n\tbegin\n\t\tif(l2 <= l_2000hz)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_AM_2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = INIT_FOR_L3;\n\t\tend\n\tend\n\n\tSET_ADDR_AM_2:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_5;\n\tend\n\n\tSET_DELAY_5:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_6;\n\tend\n\n\tSET_DELAY_6:\n\tbegin\n\t\tNEXT_STATE = GET_AM_2;\n\tend\n\n\tGET_AM_2:\n\tbegin\n\t\tNEXT_STATE = ADD_ELOW;\n\tend\n\n\tADD_ELOW:\n\tbegin\n\t\tNEXT_STATE = SET_ELOW;\n\tend\n\n\tSET_ELOW:\n\tbegin\n\t\tNEXT_STATE = INCR_L2;\n\tend\n\n\tINCR_L2:\n\tbegin\n\t\tNEXT_STATE = CHECK_L2;\n\tend\n\n\tINIT_FOR_L3:\n\tbegin\n\t\tNEXT_STATE = CHECK_L3;\n\tend\n\n\tCHECK_L3:\n\tbegin\n\t\tif(l3 <= l_4000hz)\n\t\tbegin\n\t\t\tNEXT_STATE = SET_ADDR_AM_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_EHIGH_1;\n\t\tend\n\tend\n\n\tSET_ADDR_AM_3:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_7;\n\tend\n\n\tSET_DELAY_7:\n\tbegin\n\t\tNEXT_STATE = SET_DELAY_8;\n\tend\n\n\tSET_DELAY_8:\n\tbegin\n\t\tNEXT_STATE = GET_AM_3;\n\tend\n\n\tGET_AM_3:\n\tbegin\n\t\tNEXT_STATE = ADD_EHIGH;\n\tend\n\n\tADD_EHIGH:\n\tbegin\n\t\tNEXT_STATE = SET_EHIGH;\n\tend\n\n\tSET_EHIGH:\n\tbegin\n\t\tNEXT_STATE = INCR_L3;\n\tend\n\n\tINCR_L3:\n\tbegin\n\t\tNEXT_STATE = CHECK_L3;\n\tend\n\n\tCALC_ONE_BY_EHIGH_1:\n\tbegin\n\t\tNEXT_STATE = CALC_ONE_BY_EHIGH_2;\n\tend\n\n\tCALC_ONE_BY_EHIGH_2:\n\tbegin\n\t\tif(donediv)\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_EHIGH_3;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = CALC_ONE_BY_EHIGH_2;\n\t\tend\n\tend\n\n\tCALC_ONE_BY_EHIGH_3:\n\tbegin\n\t\tNEXT_STATE = CALC_E_BY_E_1;\n\tend\n\n\tCALC_E_BY_E_1:\n\tbegin\n\t\tNEXT_STATE = CALC_E_BY_E_2;\n\tend\n\n\tCALC_E_BY_E_2:\n\tbegin\n\t\tNEXT_STATE = LOG_E_BY_E_1;\n\tend\n\n\tLOG_E_BY_E_1:\n\tbegin\n\t\tif(donelog)\n\t\tbegin\n\t\t\tNEXT_STATE = LOG_E_BY_E_2;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tNEXT_STATE = LOG_E_BY_E_1;\n\t\tend\n\tend\n\n\tLOG_E_BY_E_2:\n\tbegin\n\t\tNEXT_STATE = LOG_E_BY_E_3;\n\tend\n\n\tLOG_E_BY_E_3:\n\tbegin\n\t\tNEXT_STATE = SET_ERATIO;\n\tend\n\n\tSET_ERATIO:\n\tbegin\n\t\tNEXT_STATE = SET_IF_ERATIO;\n\tend\n\n\tSET_IF_ERATIO:\n\tbegin\n\t\tNEXT_STATE = DET_VOICED_1;\n\tend\n\n\tDET_VOICED_1:\n\tbegin\n\t\tNEXT_STATE = SET_IF_SIXTY;\n\tend\n\n\tSET_IF_SIXTY:\n\tbegin\n\t\tNEXT_STATE = DET_VOICED_FINAL;\n\tend\n\n\tDET_VOICED_FINAL:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tDONE:\n\tbegin\n\t\tNEXT_STATE = START;\n\tend\n\n\tdefault:\n\tbegin\n\t\tNEXT_STATE = DONE;\n\tend\n\n\tendcase\nend\n\n\nalways@(posedge clk or negedge rst)     \nbegin\n\n\tif (rst == 1'b0)\n\tbegin\n\n\t\tdoneevmbe <= 1'b0;\n\n\tend\n\n\telse\n\tbegin\n\t\tcase(STATE)\n\n\t\tSTART:\n\t\tbegin\n\t\t\tdoneevmbe <= 1'b0;\n\t\t\tvoiced <= 1'b1;\n\t\tend\n\n\t\tINIT:\n\t\tbegin\n\t\t\tsig <= POINT_0001;\n\t\t\terror <= POINT_0001;\n\t\t\tehigh <= POINT_0001;\n\t\t\telow  <= POINT_0001;\n\t\t\tm1_in1 <= {6'b0,L_in,16'b0};\n\t\t\tm1_in2 <= POINT_TWO_FIVE;\n\t\t\tmodel_L <= {6'b0,L_in,16'b0};\n\t\t\tWo <= Wo_in;\n\t\tend\n\n\t\tINIT_LOOP:\n\t\tbegin\n\t\t\tl <= 10'd1;\n\t\t\tmax_l <= m1_out[25:16];\n\t\tend\n\n\t\tCHECK_L:\n\t\tbegin \n\t\t\t\n\t\tend\n\n\t\tSET_ADDR_AM:\n\t\tbegin\n\t\t\taddr_am <= l;\n\t\tend\n\n\t\tSET_DELAY_1:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_DELAY_2:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tGET_AM:\n\t\tbegin\n\t\t\tm1_in1 <= out_am;\n\t\t\tm1_in2 <= out_am;\n\t\t\t\n\t\tend\n\n\t\tADD_SIG:\n\t\tbegin\n\t\t\ta1_in1 <= m1_out;\n\t\t\ta1_in2 <= sig;\n\t\tend\n\n\t\tSET_SIG:\n\t\tbegin\n\t\t\tsig <= a1_out;\n\t\tend\n\n\t\tINCR_L:\n\t\tbegin\n\t\t\tl <= l + 10'd1;\n\t\tend\n\t\t\n\t\tCALC_L_1000HZ_1:\n\t\tbegin\n\t\t\tm1_in1 <= model_L;\n\t\t\tm1_in2 <= POINT_TWO_FIVE;\n\t\tend\n\n\t\tCALC_L_1000HZ_2:\n\t\tbegin\n\t\t\tl_1000hz <= m1_out[25:16];\n\t\tend\n\t\t\n\t\tSET_L1:\n\t\tbegin\n\t\t\tl1 <= 10'd1;\n\t\tend\n\t\t\n\t\tCHECK_L1:\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tINIT_MAIN_FOR:\n\t\tbegin\n\t\t\tAm_real <= 32'b0;\n\t\t\tAm_imag <= 32'b0;\n\t\t\tden\t\t<= 32'b1;\n\t\tend\t\n\n\t\tCALC_AL_BL_1:\n\t\tbegin\n\t\t\tm1_in1 <= Wo;\n\t\t\tm1_in2 <= FFT_BY_2PI;\n\t\tend\n\t\t\n\t\tCALC_AL_BL_2:\n\t\tbegin\n\t\t\ta1_in1 <= {6'b0,l1,16'b0};\n\t\t\ta1_in2 <= NEG_POINT_FIVE;\n\t\t\ta2_in1 <= {6'b0,l1,16'b0};\n\t\t\ta2_in2 <= POINT_FIVE;\n\t\t\two_fft_mul <= m1_out;\n\t\tend\t\n\t\t\n\t\tCALC_AL_BL_3: \n\t\tbegin\n\t\t\tm1_in1 <= a1_out;\n\t\t\tm1_in2 <= m1_out;\n\t\t\tm2_in1 <= a2_out;\n\t\t\tm2_in2 <= m1_out;\n\t\tend\t\n\t\t\n\t\tSET_AL_BL :\n\t\tbegin\n\t\t\tal_temp <= m1_out;\n\t\t\tbl_temp <= m2_out;\n\t\tend\t\n\t\t\n\t\tCEIL_AL_BL_1:\n\t\tbegin\n\t\t\ta1_in1 <= al_temp;\n\t\t\ta1_in2 <= ONE;\n\t\t\t\n\t\t\ta2_in1 <= bl_temp;\n\t\t\ta2_in2 <= ONE;\n\t\tend\n\t\t\n\t\tCEIL_AL_BL_2:\n\t\tbegin\n\t\t\tal <= a1_out[25:16];\n\t\t\tbl <= a2_out[25:16];\n\t\tend\n\t\t\n\t\tCALC_OFFSET_1:\n\t\tbegin\n\t\t\tm1_in1 <= {6'b0,l1,16'b0};\n\t\t\tm1_in2 <= wo_fft_mul;\n\t\tend\n\t\t\n\t\tCALC_OFFSET_2 :\n\t\tbegin\n\t\t\ta1_in1 <= {1'b1,m1_out[N-2:0]};\n\t\t\ta1_in2 <= POINT_FIVE;\n\t\tend\n\t\t\n\t\tCALC_OFFSET_3:\n\t\tbegin\n\t\t\t\n\t\t\ta1_in1 <= a1_out;\n\t\t\ta1_in2 <= FFT_BY_2;\n\t\tend\n\t\t\n\t\tSET_OFFSET_INIT_FOR_1:\n\t\tbegin\n\t\t\toffset <= a1_out[25:16];\n\t\t\tm1 <= al;\n\t\tend\n\t\t\n\t\tCHECK_M1:\n\t\tbegin\n\t\t\ta1_in1 <=  {6'b0,offset,16'b0};\n\t\t\ta1_in2 <=  {6'b0,m1,16'b0};\n\t\tend\n\t\t\n\t\tSET_ADDR_SW_W :\n\t\tbegin\n\t\t\taddr_sw_real <= m1;\n\t\t\taddr_sw_imag <= m1;\n\t\t\t\n\t\t\taddr_w_real <= a1_out[25:16];\n\t\tend\n\t\t\n\t\tSET_DELAY_SW_1 :\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_SW_2 :\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_SW_W :\n\t\tbegin\n\t\t\tm1_in1 <= out_sw_real;\n\t\t\tm1_in2 <= out_w_real;\n\t\t\tm2_in1 <= out_sw_imag;\n\t\t\tm2_in2 <= out_w_real;\n\t\t\tm3_in1 <= out_w_real;\n\t\t\tm3_in2 <= out_w_real;\n\t\tend\n\t\t\n\t\tCALC_AM_DEN :\n\t\tbegin\n\t\t\ta1_in1 <= m1_out;\n\t\t\ta1_in2 <= Am_real;\n\t\t\ta2_in1 <= m2_out;\n\t\t\ta2_in2 <= Am_imag;\n\t\t\ta3_in1 <= den;\n\t\t\ta3_in2 <= m3_out;\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_AM_DEN:\n\t\tbegin\n\t\t\tAm_real <= a1_out;\n\t\t\tAm_imag <= a2_out;\n\t\t\tden <= a3_out;\n\t\tend\n\t\t\n\t\tINCR_M1 :\n\t\tbegin\n\t\t\tm1 <= m1 + 10'd1;\n\t\tend\n\t\t\n\t\tINCR_L1:\n\t\tbegin\n\t\t\tl1 <= l1 + 10'd1;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_DEN_1:\n\t\tbegin\n\t\t\tstartdiv <= 1'b1;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_DEN_2:\n\t\tbegin\n\t\t\tdiv_in <= den;\n\t\t\tstartdiv <= 1'b0;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_DEN_3:\n\t\tbegin\n\t\t\tone_by_den <= div_ans;\n\t\tend\n\t\t\n\t\tSET_AM_REAL_IMAG_1:\n\t\tbegin\n\t\t\tm1_in1 <= Am_real;\n\t\t\tm1_in2 <= one_by_den;\n\t\t\tm2_in1 <= Am_imag;\n\t\t\tm2_in2 <= one_by_den;\n\t\tend\n\t\t\n\t\tSET_AM_REAL_IMAG_2:\n\t\tbegin\n\t\t\tAm_real <= m1_out;\n\t\t\tAm_imag <= m2_out;\n\t\tend\n\t\t\n\t\tINIT_FOR_2 :\n\t\tbegin\n\t\t\tm2 <= al;\n\t\tend\n\t\t\n\t\tCHECK_M2 :\n\t\tbegin\n\t\t\ta1_in1 <=  {6'b0,offset,16'b0};\n\t\t\ta1_in2 <=  {6'b0,m2,16'b0};\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_ADDR_SW_W_M2 :\n\t\tbegin\n\t\t\taddr_sw_real <= m2;\n\t\t\taddr_sw_imag <= m2;\n\t\t\t\n\t\t\taddr_w_real <= a1_out[25:16];\n\t\tend\n\t\t\n\t\tSET_DELAY_3 :\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_DELAY_4 :\n\t\tbegin\n\t\t\t\n\t\tend\n\t\t\n\t\tSET_SW_W_M2:\n\t\tbegin\n\t\t\tm1_in1 <= Am_real;\n\t\t\tm1_in2 <= out_w_real;\n\t\t\tm2_in1 <= Am_imag;\n\t\t\tm2_in2 <= out_w_real;\n\t\tend\n\t\t\n\t\tCALC_ERROR_1 :\n\t\tbegin\n\t\t\ta1_in1 <= out_sw_real;\n\t\t\ta1_in2 <= {(m1_out[N-1] == 0)?1'b1:1'b0,m1_out[N-2:0]};\n\t\t\ta2_in1 <= out_sw_imag;\n\t\t\ta2_in2 <= {(m2_out[N-1] == 0)?1'b1:1'b0,m2_out[N-2:0]};\n\t\tend\n\t\t\n\t\tCALC_ERROR_2: \n\t\tbegin\n\t\t\tew_real <= a1_out;\n\t\t\tew_imag <= a2_out;\n\t\tend\n\t\t\n\t\tCALC_ERROR_3 :\n\t\tbegin\n\t\t\tm1_in1 <= ew_real;\n\t\t\tm1_in2 <= ew_real;\n\t\t\tm2_in1 <= ew_imag;\n\t\t\tm2_in2 <= ew_imag;\n\t\t\t\n\t\tend\n\t\t\n\t\tCALC_ERROR_4 :\n\t\tbegin\n\t\t\ta1_in1 <= error;\n\t\t\ta1_in2 <= m1_out;\n\t\tend\n\t\t\n\t\tCALC_ERROR_5 :\n\t\tbegin\n\t\t\ta1_in1 <= a1_out;\n\t\t\ta1_in2 <= m2_out;\n\t\tend\n\t\t\n\t\tSET_ERROR_FINAL :\n\t\tbegin\n\t\t\terror <= a1_out;\n\t\tend\n\t\t\n\t\tINCR_M2 :\n\t\tbegin\n\t\t\tm2 <= m2 + 10'd1;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_ERROR_1:\n\t\tbegin\n\t\t\tstartdiv <= 1'b1;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_ERROR_2:\n\t\tbegin\n\t\t\tdiv_in <= error;\n\t\t\tstartdiv <= 1'b0;\n\t\tend\n\t\t\n\t\tCALC_ONE_BY_ERROR_3:\n\t\tbegin\n\t\t\tone_by_error <= div_ans;\n\t\tend\n\t\t\n\t\tCALC_LOG_SNR_1:\n\t\tbegin\n\t\t\tm1_in1 <= sig;\n\t\t\tm1_in2 <= one_by_error;\n\t\t\tstartlog <= 1'b1;\n\t\tend\n\t\t\n\t\tCALC_LOG_SNR_2:\n\t\tbegin\n\t\t\tin_x <= m1_out;\t\n\t\t\tstartlog <= 1'b0;\n\t\tend\n\t\t\n\t\tCALC_LOG_SNR_3:\n\t\tbegin\n\t\t\tlog_snr <= out_y;\n\t\tend\n\t\t\n\t\tSET_LOG_SNR_1:\n\t\tbegin\n\t\t\tm1_in1 <= log_snr;\n\t\t\tm1_in2 <= TEN;\n\t\tend\n\t\t\n\t\tSET_LOG_SNR_2:\n\t\tbegin\n\t\t\tsnr <= m1_out;\n\t\tend\n\t\t\n\t\tCHECK_SNR_V_THRESH:\n\t\tbegin\n\t\t\tgt1_in1 <= snr;\n\t\t\tgt1_in2 <= V_THRESH;\n\t\tend\n\t\t\n\t\tSET_VOICED_BIT:\n\t\tbegin\n\t\t\tif(gt1)\n\t\t\tbegin\n\t\t\t\tvoiced <= 1'b1;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tvoiced <= 1'b0;\n\t\t\tend\n\t\t\t\n\t\tend\n\t\t\n\t\tCALC_L2_L3:\n\t\tbegin\n\t\t\tm1_in1 <= {6'b0,l_1000hz,16'b0};\n\t\t\tm1_in2 <= TWO;\n\t\t\tm2_in1 <= {6'b0,l_1000hz,16'b0};\n\t\t\tm2_in2 <= FOUR;\n\t\tend\n\n\t\tSET_L2_L3:\n\t\tbegin\n\t\t\tl_2000hz <= m1_out[25:16];\n\t\t\tl_4000hz <= m2_out[25:16];\n\t\tend\n\n\t\tINIT_FOR_L2:\n\t\tbegin\n\t\t\tl2 <= 10'd1;\n\t\tend\n\n\t\tCHECK_L2:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_ADDR_AM_2:\n\t\tbegin\n\t\t\taddr_am <= l2;\n\t\tend\n\n\t\tSET_DELAY_5:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_DELAY_6:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tGET_AM_2:\n\t\tbegin\n\t\t\tm1_in1 <= out_am;\n\t\t\tm1_in2 <= out_am;\n\t\tend\n\n\t\tADD_ELOW:\n\t\tbegin\n\t\t\ta1_in1 <= elow;\n\t\t\ta1_in2 <= m1_out;\n\t\t\t\n\t\tend\n\n\t\tSET_ELOW:\n\t\tbegin\n\t\t\telow <= a1_out;\n\t\tend\n\n\t\tINCR_L2:\n\t\tbegin\n\t\t\tl2 <= l2 + 10'd1;\n\t\tend\n\n\t\tINIT_FOR_L3:\n\t\tbegin\n\t\t\tl3 <= l_2000hz;\n\t\tend\n\n\t\tCHECK_L3:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_ADDR_AM_3:\n\t\tbegin\n\t\t\taddr_am <= l3;\n\t\tend\n\n\t\tSET_DELAY_7:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tSET_DELAY_8:\n\t\tbegin\n\t\t\t\n\t\tend\n\n\t\tGET_AM_3:\n\t\tbegin\n\t\t\tm1_in1 <= out_am;\n\t\t\tm1_in2 <= out_am;\n\t\tend\n\n\t\tADD_EHIGH:\n\t\tbegin\n\t\t\ta1_in1 <= ehigh;\n\t\t\ta1_in2 <= m1_out;\n\t\tend\n\n\t\tSET_EHIGH:\n\t\tbegin\n\t\t\tehigh <= a1_out;\n\t\tend\n\n\t\tINCR_L3:\n\t\tbegin\n\t\t\tl3 <= l3 + 10'd1;\n\t\tend\n\n\t\tCALC_ONE_BY_EHIGH_1:\n\t\tbegin\n\t\t\tstartdiv <= 1'b1;\n\t\tend\n\n\t\tCALC_ONE_BY_EHIGH_2:\n\t\tbegin\n\t\t\tdiv_in <= ehigh;\n\t\t\tstartdiv <= 1'b0;\n\t\tend\n\n\t\tCALC_ONE_BY_EHIGH_3:\n\t\tbegin\n\t\t\tone_by_ehigh <= div_ans;\n\t\tend\n\n\t\tCALC_E_BY_E_1:\n\t\tbegin\n\t\t\tm1_in1 <= elow;\n\t\t\tm1_in2 <= one_by_ehigh;\n\t\tend\n\n\t\tCALC_E_BY_E_2:\n\t\tbegin\n\t\t\telow_by_ehigh <= m1_out;\n\t\t\tstartlog <= 1'b1;\n\t\tend\n\n\t\tLOG_E_BY_E_1:\n\t\tbegin\n\t\t\tin_x <= elow_by_ehigh;\n\t\t\tstartlog <= 1'b0;\n\t\tend\n\n\t\tLOG_E_BY_E_2:\n\t\tbegin\n\t\t\tlog_e <= out_y;\n\t\tend\n\n\t\tLOG_E_BY_E_3:\n\t\tbegin\n\t\t\tm1_in1 <= log_e;\n\t\t\tm1_in2 <= TEN;\n\t\tend\n\n\t\tSET_ERATIO:\n\t\tbegin\n\t\t\teratio <= m1_out;\n\t\tend\n\n\t\tSET_IF_ERATIO:\n\t\tbegin\n\t\t\tgt1_in1 <= eratio;\n\t\t\tgt1_in2 <= TEN;\n\t\t\tlt1_in1 <= eratio;\n\t\t\tlt1_in2 <= NEG_TEN;\n\t\tend\n\n\t\tDET_VOICED_1:\n\t\tbegin\n\t\t\tif(!voiced)\n\t\t\tbegin\n\t\t\t\tif(gt1)\n\t\t\t\tbegin\n\t\t\t\t\tvoiced <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tvoiced <= 1'b0;\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tif(lt1)\n\t\t\t\tbegin\n\t\t\t\t\tvoiced <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tvoiced <= 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\tend\n\n\t\tSET_IF_SIXTY:\n\t\tbegin\n\t\t\tlt1_in1 <= eratio;\n\t\t\tlt1_in2 <= NEG_FOUR;\n\t\t\tlt2_in1 <= Wo;\n\t\t\tlt2_in2 <= SIXTY;\n\t\tend\n\n\t\tDET_VOICED_FINAL:\n\t\tbegin\n\t\t\tif(lt1 && (lt2 || (Wo == SIXTY)))\n\t\t\tbegin\n\t\t\t\tvoiced <= 1'b0;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tvoiced <= 1'b1;\n\t\t\tend\n\t\tend\n\t\n\t\tDONE:\n\t\tbegin\n\t\t\tdoneevmbe <= 1'b1;\n\t\tend\n\n\t\tendcase\n\tend\n\nend\n\n\nendmodule</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: estimate_voicing_mbe. Module specification: This module implements a Model-Based Estimator (MBE) for voice activity detection in speech analysis. It processes input signals to determine whether a given audio frame is voiced or unvoiced. The module takes inputs including startevmbe (start signal), clk (clock), rst (reset), L_in (10-bit model order), Wo_in (32-bit fundamental frequency), out_am (32-bit amplitude), and out_sw_real/imag (32-bit spectral weights). It outputs snr (32-bit signal-to-noise ratio), voiced (1-bit voicing decision), addr_am/sw_real/imag (10-bit memory addresses), and doneevmbe (completion signal). Internally, it uses numerous signals for calculations and control, such as STATE and NEXT_STATE for FSM control,"
                }
            ]
        }
    ]
}