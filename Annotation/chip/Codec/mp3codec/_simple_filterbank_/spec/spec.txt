Module name: simple_filterbank. 
Module specification: The `simple_filterbank` module is designed to process a stream of input signal samples and perform a filtering operation to produce windowed samples output. The module uses synchronous logic, driven by an input clock (`clk`) and can be reset using the input reset signal (`rst`). It accepts 16-bit signed input samples (`sample`) accompanied by a validity signal (`sample_valid`). The output consists of a 16-bit signed `windowed_sample_output` and a validity flag `wso_valid` indicating the availability of the filtered output. Internally, samples are stored in an Elastic Buffer Register (`sample_ebr`), and a sequence-based filtering operation is executed using predefined coefficients from `filter_coef`, storing results in `windowed_ebr`. The filtering mechanism involves sequentially multiplying the buffered samples by coefficients and accumulating the results, managed by indices like `sample_idx` and `windowed_idx`. The control flow includes initialization of memory blocks, buffering input samples when valid, triggering the filtering process when adequate samples are accumulated, conducting the multiply-accumulate task, and output production managed by sequential flags (`filtering`, `filtering_r1`, `filtering_r2`). The module ensures that windowed outputs are provided systematically once a block of input samples is processed, highlighting a simple yet effective digital signal processing task within FPGA designs or other hardware implementations requiring signal filtering capabilities.