{
    "spec": "Module name: intra_bypass. Module specification: The intra_bypass module is part of an intra prediction system for video coding, specifically handling bypass operations. It processes various input signals related to coding unit (CU) and transform unit (TU) sizes, positions, and borders to generate bypass samples for different prediction modes and sizes, handling both luma and chroma components. The module has numerous input ports, including clock and reset signals, control flags, size and position parameters, border information, and various flags related to the intra prediction process. Output ports provide bypass samples for different prediction modes and components, positions of bypass samples, and bottom and right samples. Internal signals include position indicators, flags, storage for reconstructed and reference samples, and various control signals. The module is structured with several always blocks and generate statements, handling different aspects of the bypass process such as sample storage, reference sample selection, and bypass sample generation for various block sizes and positions. It includes",
    "gpt-message": [
        {
            "role": "system",
            "content": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
        },
        {
            "role": "user",
            "content": "Name of the module and its functionality is as follows: \nModule name: intra_bypass.\n\nExplanation: This module appears to be part of an intra prediction system for video coding, specifically handling bypass operations for intra prediction. It processes various input signals related to coding unit (CU) and transform unit (TU) sizes, positions, and borders. The module generates bypass samples for different prediction modes and sizes, handling both luma and chroma components. It includes logic for storing and selecting reference samples from neighboring blocks, which are crucial for intra prediction. The module also handles special cases for different partition sizes and positions within the coding tree unit (CTU)."
        },
        {
            "role": "user",
            "content": "Input and output ports and their explanation is as follows: \nInput ports: clk, rst_n, arst_n, bStop, n_bStop, nn_bStop, n_modeHor, tuSize, n_tuSize, xTb, nxtXTb, yTb, nxtYTb, X, Y, partIdx, n_partIdx, i_recSamples, l3_i_recSamples, order, n_order, nMaxCUlog2, isLtBorder, isBtBorder, isRtBorder, posBtBorderIn4, posRtBorderIn4, isCalStage, cIdx, n_cIdx, nn_cIdx, n_isBtTb4, n_isRtTb4, n_isBtTb8, n_isRtTb8.\n\nExplanation: These inputs include clock and reset signals, control flags, size and position parameters for coding units and transform units, border information, calculation stage flags, component index, and various other flags and indices related to the intra prediction process.\n\nOutput ports: byPa_P_DR_1, byPa_P_DR_1_cr, byPa_P_A_2, byPa_P_A_2_cr, byPa_DW_A_3, bypa_pos_1, bypa_pos_2, bypa_pos_3, btRtSamples, by4_1_forStop, by4_1_forStop_cr, by4_1_forStop_pos.\n\nExplanation: These outputs provide bypass samples for different prediction modes and components (luma and chroma), positions of bypass samples, bottom and right samples, and additional bypass samples for specific conditions. They are used in subsequent stages of the intra prediction process to generate predicted samples for the current block."
        },
        {
            "role": "user",
            "content": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code for the intra_bypass module, here are the internal signals and their explanations:\n\nInternal signals: bp1_pos, bp2_pos, bp3_pos, by4_1_forStop_pos_, bp1_f, bp2_f, bp3_f, temp_bp3_pos, recon, l3_recon, r_l, r_t, r_b, r_rt, r_br01_4, r_br01_8, r_br01_16, r_br01_32, r_br01_64, r_br2_8, r_br2_16, r_br2_32, r_l_cr, r_t_cr, r_b_cr, r_rt_cr, r_br01_4_cr, r_br01_8_cr, r_br01_16_cr, r_br01_32_cr, r_br2_8_cr, r_br2_16_cr, r_br2_32_cr, r_b_rt_tmp, r_l_tmp, r_t_tmp, r_br01_tmp, r_b_rt_tmp_cr, r_l_tmp_cr, r_t_tmp_cr, r_br01_tmp_cr, r_tl_4, r_tl_4_cr, p_dr1_4samples, p_dr1_4samples_cr, p_a2_4samples, dw_a3_4samples, temp_by4_1_forStop, cLastBut2, cLastBut3, x8, y8, bypa_1, bypa_2, bypa_3, tempForbp3, bypa_1_cr, nPB, nMaxCU, y_bar, x_bar, y_PB_bot, x_PB_right, Xplus1sf2, Yplus1sf2, x4InMaxCb, y4InMaxCb, n_x4InMaxCb, n_y4InMaxCb, a, a_cr, n_pIdx_4, n_pIdx_8, n_pIdx_16, n_pIdx_32, nxt_lt_cur_xTb, nnxt_lt_nxt_xTb, bDelayWrite.\n\nExplanation: These internal signals serve various purposes in the module:\n- bp1_pos, bp2_pos, bp3_pos: Position indicators for bypass samples.\n- bp1_f, bp2_f, bp3_f: Flags associated with bypass positions.\n- recon, l3_recon: 2D arrays to store reconstructed samples.\n- r_l, r_t, r_b, r_rt: Reference samples for left, top, bottom, and right positions.\n- r_br01_*, r_br2_*: Reference samples for different block sizes and positions.\n- *_cr versions: Chroma counterparts of the luma signals.\n- r_*_tmp: Temporary storage for reference samples.\n- r_tl_4: Top-left reference sample.\n- p_dr1_4samples, p_a2_4samples, dw_a3_4samples: Processed samples for different prediction modes.\n- cLastBut2, cLastBut3: Control flags for specific conditions.\n- x8, y8: 8x8 block position indicators.\n- bypa_1, bypa_2, bypa_3: Bypass sample storage.\n- nPB, nMaxCU: Size parameters for prediction block and maximum coding unit.\n- y_bar, x_bar, y_PB_bot, x_PB_right: Position indicators within the coding tree.\n- x4InMaxCb, y4InMaxCb: 4x4 block positions within the maximum coding block.\n- n_pIdx_*: Next partition index for different block sizes.\n- nxt_lt_cur_xTb, nnxt_lt_nxt_xTb: Flags for comparing current and next block positions.\n- bDelayWrite: Flag to control delayed writing of samples.\n\nThese signals are used for various calculations, temporary storage, and control flow within the intra prediction bypass process."
        },
        {
            "role": "user",
            "content": "Original Verilog code is as follows: \n```verilog\n`timescale 1ns/1ps\nmodule intra_bypass(\n\tclk,\n\tarst_n,\n\trst_n,\n\tbStop,\n\tn_bStop,\n\tnn_bStop,\n\ttuSize,\n\tn_tuSize,\n\tX,\n\tY,\n\tpartIdx,\n\tn_partIdx,\n\txTb,\n\tyTb,\n\tnxtXTb,\n\tnxtYTb,\n\tisLtBorder,\n\tisBtBorder,\n\tisRtBorder,\n\tposBtBorderIn4,\n\tposRtBorderIn4,\n\t\n\ti_recSamples,\n\tl3_i_recSamples,\n\tisCalStage,\n\torder,\n\tnMaxCUlog2,\n\tcIdx,\n\tn_cIdx,\n\tnn_cIdx,\n\t\n\tbyPa_P_DR_1,\n\tbyPa_P_DR_1_cr,\n\tbyPa_P_A_2,\n\tbyPa_P_A_2_cr,\n\tbyPa_DW_A_3,\n\t\n\tbypa_pos_1,\n\tbypa_pos_2,\n\tbypa_pos_3\n\t\n\t,btRtSamples\n\t,by4_1_forStop\n\t,by4_1_forStop_cr\n\t,by4_1_forStop_pos\n\t\n\t,n_isBtTb4\n\t,n_isRtTb4\t\n\t,n_isBtTb8\n\t,n_isRtTb8\n\t\n\t,n_modeHor\n\t,n_order\n);\n\n  parameter bitDepth = 8;\n  parameter isChroma = 0;\n\n\tinput\t\t\t\t\t\t\t\tclk,rst_n,arst_n,bStop,n_bStop,nn_bStop;\n\tinput\t\t\t\t\t\t\t\tn_modeHor;\n\tinput \t[2:0] \t\t\t\t\t\ttuSize,n_tuSize;\n\tinput \t[12:0]\t\t\t\t\t\txTb,nxtXTb;\n\tinput \t[12:0]\t\t\t\t\t\tyTb,nxtYTb;\n\tinput\t[2:0]\t\t\t\t\t\tX,Y;\n\tinput\t[1:0]\t\t\t\t\t\tpartIdx,n_partIdx;\n\tinput   [16*bitDepth-1:0] \t\t\ti_recSamples;\t\n\tinput   [16*bitDepth-1:0] \t\t\tl3_i_recSamples;\t\n\tinput\t[2:0]\t\t\t\t\t\torder,n_order;\n\tinput\t[2:0]\t\t\t\t\t\tnMaxCUlog2;\n\tinput\t\t\t\t\t\t\t\tisLtBorder;\n\tinput\t\t\t\t\t\t\t\tisBtBorder;\n\tinput\t\t\t\t\t\t\t\tisRtBorder;\n\tinput\t[4:0]\t\t\t\t\t\tposBtBorderIn4,posRtBorderIn4;\n\tinput\t\t\t\t\t\t\t\tisCalStage;\n\tinput\t[1:0]\t\t\t\t\t\tcIdx,n_cIdx,nn_cIdx;\n\tinput\t\t\t\t\t\t\t\tn_isBtTb4,n_isBtTb8;\n\tinput\t\t\t\t\t\t\t\tn_isRtTb4,n_isRtTb8;\n\t\n\treg [4:0]\t\t\t\t\t\tbp1_pos,bp2_pos,bp3_pos,by4_1_forStop_pos_;\n\treg\t\t\t\t\t\t\t\tbp1_f,bp2_f,bp3_f;\n\treg [5:0]\t\t\t\t\t\ttemp_bp3_pos;\n\toutput reg [5:0]\t\t\t\tbypa_pos_1,bypa_pos_2,bypa_pos_3;\n\toutput  [bitDepth*4-1:0] \t\t\t\t\tbyPa_P_DR_1;      \n\toutput  [bitDepth*4-1:0]\t\t\t\t\t\tbyPa_P_DR_1_cr;\n\toutput  [bitDepth*16-1:0] \t\t\t\t\tbyPa_P_A_2;      \n\toutput  [bitDepth*11-1:0] \t\t\t\t\tbyPa_P_A_2_cr;\n\toutput  [bitDepth*6-1:0] \t\t\t\t\tbyPa_DW_A_3;      \n\toutput\t[bitDepth*2-1:0] \t\t\t\t\tbtRtSamples;\n\toutput reg \t[bitDepth*4-1:0] \t\t\t\tby4_1_forStop,by4_1_forStop_cr;\n\toutput reg \t[4:0]\t\t\t\t\t\t\t\tby4_1_forStop_pos;\n\t\n\treg [bitDepth-1:0]\t\t\t\trecon[3:0][3:0];\n\treg [bitDepth-1:0]\t\t\t\tl3_recon[3:0][3:0];\n\t\n\treg [bitDepth-1:0]\t\t\t\tr_l,r_t,r_b,r_rt;\n\treg [bitDepth-1:0]\t\t\t\tr_br01_4,r_br01_8,r_br01_16,r_br01_32,r_br01_64;\n\treg [bitDepth-1:0]\t\t\t\tr_br2_8,r_br2_16,r_br2_32;\n\t\n\treg [bitDepth-1:0]\t\t\t\tr_l_cr,r_t_cr,r_b_cr,r_rt_cr;\n\treg [bitDepth-1:0]\t\t\t\tr_br01_4_cr,r_br01_8_cr,r_br01_16_cr,r_br01_32_cr;\n\treg [bitDepth-1:0]\t\t\t\tr_br2_8_cr,r_br2_16_cr,r_br2_32_cr;\n\t\n\treg [bitDepth-1:0]\t\t\t\tr_b_rt_tmp,r_l_tmp,r_t_tmp,r_br01_tmp;\n\treg [bitDepth-1:0]\t\t\t\tr_b_rt_tmp_cr,r_l_tmp_cr,r_t_tmp_cr,r_br01_tmp_cr;\n\treg [bitDepth-1:0]\t\t\t\tr_tl_4,r_tl_4_cr;\n\t\n\treg [bitDepth*4-1:0]\t\t\t\tp_dr1_4samples;\n\treg\t[bitDepth*4-1:0]\t\t\t\tp_dr1_4samples_cr;\n\treg [bitDepth*4-1:0]\t\t\t\tp_a2_4samples;\n\treg [bitDepth*4-1:0]\t\t\t\tdw_a3_4samples;\t\n\treg [bitDepth*4-1:0]\t\t\t\ttemp_by4_1_forStop;\n\t\n\treg \t\t\t\t\t\t\t\tcLastBut2,cLastBut3;\n\t\n\t\n\tassign byPa_P_DR_1 = {p_dr1_4samples};\n\tassign byPa_P_DR_1_cr = p_dr1_4samples_cr;\n\tassign byPa_P_A_2 = {r_l,r_t,r_br01_4,r_br01_8,r_br01_16,r_br01_32,r_br01_64,r_br2_8,r_br2_16,r_br2_32,r_b,r_rt,p_a2_4samples};\n\tassign byPa_P_A_2_cr = {r_l_cr,r_t_cr,\n\t\t\t\t\t\t\tr_br01_4_cr,r_br01_8_cr,r_br01_16_cr,r_br01_32_cr,\n\t\t\t\t\t\t\tr_br2_8_cr,r_br2_16_cr,r_br2_32_cr,r_b_cr,r_rt_cr};\n\tassign byPa_DW_A_3 = {r_tl_4,r_tl_4_cr,dw_a3_4samples};\n\tassign btRtSamples =  {r_b,r_rt};\n\t\n\treg x8;\n\treg y8;\n\t\n\treg [bitDepth*4-1:0]  bypa_1,bypa_2,bypa_3,tempForbp3;\n\treg [bitDepth*4-1:0]  bypa_1_cr;\n\t\n\treg [6:0] \tnPB,nMaxCU;\n\treg [6:0] \ty_bar,x_bar,y_PB_bot,x_PB_right;\n\treg [5:0] \tXplus1sf2,Yplus1sf2;\n\treg [4:0]\tx4InMaxCb,y4InMaxCb;\n\treg [4:0]\tn_x4InMaxCb,n_y4InMaxCb;\n\t\n\treg [bitDepth-1:0]\t\t\t\ta[3:0],a_cr[3:0];\t\n\n\treg [1:0]   n_pIdx_4,n_pIdx_8,n_pIdx_16,n_pIdx_32;\n\treg \t\t\tnxt_lt_cur_xTb;\n\treg \t\t\tnnxt_lt_nxt_xTb;\n\t\n\treg\t\t\t\tbDelayWrite;\n\t\n\talways @(*)\tbegin\n\t\tx8 = (xTb>>3)%2;\n\t\ty8 = (yTb>>3)%2;\n\t\t{a[0],a[1],a[2],a[3]} = bypa_3;\n\t\t{a_cr[0],a_cr[1],a_cr[2],a_cr[3]} = bypa_1_cr;\t\t\n\t\t\n\t\tn_pIdx_4 = {nxtYTb[2],nxtXTb[2]};\n\t\tn_pIdx_8 = {nxtYTb[3],nxtXTb[3]};\n\t\tn_pIdx_16 = {nxtYTb[4],nxtXTb[4]};\n\t\tn_pIdx_32 = {nxtYTb[5],nxtXTb[5]};\n\t\t\n\t\n\t\t\t\n\t\tnnxt_lt_nxt_xTb=0;\n\n\t\tif(n_tuSize==2)  begin\n\t\t\tif( (n_pIdx_4[0]==0 && !n_isRtTb4) || n_isBtTb4)\tnnxt_lt_nxt_xTb = 0;\n\t\t\telse if(n_pIdx_4==1 || n_isRtTb4)\tnnxt_lt_nxt_xTb = 1;\n\t\t\telse begin\n\t\t\t\tif( (n_pIdx_8[0]==0 && !n_isRtTb4) || n_isBtTb4)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\telse if(n_pIdx_8==1 || n_isRtTb4)\tnnxt_lt_nxt_xTb = 1;\n\t\t\t\telse begin\n\t\t\t\t\tif((n_pIdx_16[0]==0 && !n_isRtTb4) || n_isBtTb4)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\t\telse if(n_pIdx_16==1 || n_isRtTb4) \tnnxt_lt_nxt_xTb = 1;\n\t\t\t\t\telse begin\n\t\t\t\t\t\tif((n_pIdx_32[0]!=1 && !n_isRtTb4 )|| n_isBtTb4)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\t\t\telse if(n_pIdx_32==1) \tnnxt_lt_nxt_xTb = 1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif(n_tuSize==3)  begin\n\t\t\tif((n_pIdx_8[0]==0 && !n_isRtTb8) || n_isBtTb8)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\telse if(n_pIdx_8==1 || n_isRtTb8)\tnnxt_lt_nxt_xTb = 1;\n\t\t\t\telse begin\n\t\t\t\t\tif((n_pIdx_16[0]==0 && !n_isRtTb8) || n_isBtTb8)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\t\telse if(n_pIdx_16==1 || n_isRtTb8) \tnnxt_lt_nxt_xTb = 1;\n\t\t\t\t\telse begin\n\t\t\t\t\t\tif((n_pIdx_32[0]!=1 && !n_isRtTb8 )|| n_isBtTb8)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\t\t\telse if(n_pIdx_32==1) \tnnxt_lt_nxt_xTb = 1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\tend\n\n\n\tend\n\t\n\talways @(posedge clk or negedge arst_n)\tbegin\n\t\tif(~arst_n)\tbegin\n\t\t\tp_dr1_4samples <= 0;\n\t\t\tp_dr1_4samples_cr <= 0;\n\t\t\tp_a2_4samples <= 0;\n\t\t\tdw_a3_4samples <= 0;\n\t\t\ttempForbp3 <= 0; \n\t\t\tbypa_pos_1 <= 0;\n\t\t\tbypa_pos_2 <= 0;\n\t\t\ttemp_bp3_pos <= 0;\n\t\t\tbypa_pos_3 <= 0;\n\t\t\tby4_1_forStop <= 0;\n\t\t\tby4_1_forStop_cr<=0;\n\t\t\tby4_1_forStop_pos <=0;\n\t\t\tnxt_lt_cur_xTb <= 0;\n\t\t\tbDelayWrite<=0;\n\t\tend\n\t\telse if(~rst_n) begin\n\t\t\tp_dr1_4samples <= 0;\n\t\t\tp_dr1_4samples_cr <= 0;\n\t\t\tp_a2_4samples <= 0;\n\t\t\tdw_a3_4samples <= 0;\n\t\t\ttempForbp3 <= 0; \n\t\t\tbypa_pos_1 <= 0;\n\t\t\tbypa_pos_2 <= 0;\n\t\t\ttemp_bp3_pos <= 0;\n\t\t\tbypa_pos_3 <= 0;\n\t\t\tby4_1_forStop <= 0;\n\t\t\tby4_1_forStop_cr<=0;\n\t\t\tby4_1_forStop_pos <=0;\n\t\t\tnxt_lt_cur_xTb <= 0;\n\t\t\tbDelayWrite<=0;\n\t\tend\n\t\telse begin\n\t\t\tif(!bStop && !isChroma)\tbegin\n\t\t\t\ttemp_bp3_pos <= {bp3_f,bp3_pos};\n\t\t\t\tbypa_pos_3 <=  temp_bp3_pos;\n\t\t\t\ttempForbp3 <= bypa_3;\n\t\t\t\tdw_a3_4samples <= tempForbp3;\n\t\t\tend\n\t\t\telse if(isChroma) begin\n\t\t\t\tif((!bDelayWrite && !n_bStop) || (bDelayWrite && !nn_bStop) )\tbegin\n\t\t\t\t\tbypa_pos_3 <=  temp_bp3_pos;\n\t\t\t\t\tdw_a3_4samples <= tempForbp3;\n\t\t\t\tend\n\t\t\t\tif(!bStop)\tbegin\n\t\t\t\t\ttemp_bp3_pos <= {bp3_f,bp3_pos};\n\t\t\t\t\ttempForbp3 <= bypa_3;\n\t\t\t\tend\n\t\t\tend\n\t\t\tif(!bStop)\tbegin\n\t\t\t\tp_dr1_4samples <= cIdx!=2? bypa_1:p_dr1_4samples;\n\t\t\t\tp_dr1_4samples_cr <= cIdx==2? bypa_1_cr:p_dr1_4samples_cr; \n\t\t\t\tp_a2_4samples <= bypa_2;\n\n\t\t\t\tif(cIdx==0 || (cIdx==2 && n_cIdx==1))\tbegin\n\t\t\t\t\tbypa_pos_2 <=  {bp2_f,bp2_pos};\n\t\t\t\t\tif(tuSize==2 && partIdx==1)\n\t\t\t\t\t\tby4_1_forStop_pos <= by4_1_forStop_pos_;\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(tuSize==2 && partIdx==1 )\tbegin\n\t\t\t\t\tif(cIdx[1] ==0)\n\t\t\t\t\t\tby4_1_forStop <=   temp_by4_1_forStop;\n\t\t\t\t\telse\n\t\t\t\t\t\tby4_1_forStop_cr <= temp_by4_1_forStop;\n\t\t\t\tend\n\t\t\tend\n\t\t\tif(!n_bStop) begin\n\t\t\t\tnxt_lt_cur_xTb <= nnxt_lt_nxt_xTb;\n\t\t\t\tif(n_cIdx==0 || (n_cIdx==2 && nn_cIdx==1))\n\t\t\t\t\t\tbypa_pos_1 <=  {bp1_f,bp1_pos};\n\t\t\tend\n\t\t\t\n\t\t\tif(!n_bStop && nn_bStop)\n\t\t\t\tbDelayWrite <=1;\n\t\t\tif(bDelayWrite && !nn_bStop)\n\t\t\t\tbDelayWrite <=0;\n\t\tend\n\t\n\tend\n\t\n\n   generate\n\t  genvar i,j;\n\t  for(i=0;i<4; i=i+1)begin:yi\t\t\t\n\t\t  for(j=0 ;j<4;j=j+1) begin: xi\t\t\n\t\t   always @(*)       begin   \n\t\t      recon[i][j] = i_recSamples[16*bitDepth-1-bitDepth*(4*i+j): 15*bitDepth-bitDepth*(4*i+j)];\n\t\t      l3_recon[i][j] = l3_i_recSamples[16*bitDepth-1-bitDepth*(4*i+j): 15*bitDepth-bitDepth*(4*i+j)];\n\t\t\t  end\n\t\t end\n\t\tend\n\tendgenerate\n\n\t\n\t\n\t\n\t always @(*) begin\n\t\tx4InMaxCb = (xTb%nMaxCU)>>2;\n\t\ty4InMaxCb = (yTb%nMaxCU)>>2;\n\t\tn_x4InMaxCb = (nxtXTb%nMaxCU)>>2;\n\t\tn_y4InMaxCb = (nxtYTb%nMaxCU)>>2;\n\t\tbp1_f =0; bp2_f=0; bp3_f=0;\n\t\tby4_1_forStop_pos_ = 0;\n\t\tbp2_pos = 16; bp3_pos = 16;\n\t\tbp1_pos = 16; bp1_f = 0;\n\t\t\n\t\tif(tuSize==2 && partIdx==1 )\n\t\t\tby4_1_forStop_pos_ = x4InMaxCb; \t\n\t\tif(!isChroma) begin\n\t\t\tif(tuSize == 3'd2) \n\t\t\t\tcase(partIdx)\n\t\t\t\t2'b00: begin\n\t\t\t\t\t\tbp3_pos = x4InMaxCb;\tbp3_f =0;\t\n\t\t\t\t\t\tend\n\t\t\t\t2'b01: begin\n\t\t\t\t\t\tbp3_pos = x4InMaxCb;\tbp3_f =0;\n\t\t\t\t\t\tend\n\t\t\t\t2'b10:\tbegin\n\t\t\t\t\t\tbp3_pos = x4InMaxCb; \tbp3_f =0;\n\t\t\t\t\t\tend\n\t\t\t\tdefault:begin\n\t\t\t\t\t\tbp2_pos = (nxt_lt_cur_xTb)?x4InMaxCb:y4InMaxCb;\tbp2_f = (nxt_lt_cur_xTb)?0:1;\n\t\t\t\t\t\tbp3_pos = (nxt_lt_cur_xTb)?x4InMaxCb:y4InMaxCb;\tbp3_f = (nxt_lt_cur_xTb)?0:1;\n\t\t\t\t\t\tend\n\t\t\t\tendcase\n\t\t\tif(tuSize ==3'd3)\t\n\t\t\t\tcase({X[0],Y[0]})\n\t\t\t\t2'b10:\tbegin\n\t\t\t\t\t\t\tbp2_pos  = y4InMaxCb;\tbp2_f = 1;\n\t\t\t\t\t\t\tbp3_pos  = y4InMaxCb;\tbp3_f = 1;\t\t\t\t\t\t\n\t\t\t\t\t\tend\n\t\t\t\t2'b01:\tbegin\n\t\t\t\t\t\t\tbp2_pos  = x4InMaxCb;\tbp2_f = 0;\n\t\t\t\t\t\t\tbp3_pos  = x4InMaxCb;\tbp3_f =0;\n\t\t\t\t\t\tend\n\t\t\t\t2'b11:  begin\n\t\t\t\t\t\t\tbp3_pos = nxt_lt_cur_xTb?x4InMaxCb+1:y4InMaxCb+1;\n\t\t\t\t\t\t\tbp3_f = nxt_lt_cur_xTb?0:1;\n\t\t\t\t\t\tend\n\t\t\t\tdefault:\t\n\t\t\t\t\t\tbegin\n\t\t\t\t\t\t\tbp2_pos = 16; bp2_f = 0;\n\t\t\t\t\t\t\tbp3_pos = 16; bp3_f =0;\n\t\t\t\t\t\tend\n\t\t\t\tendcase\n\t\t\tif(tuSize ==3'd4 ) begin\n\t\t\t\tif(X==3 && Y==0) begin\n\t\t\t\t\tbp3_pos  = y4InMaxCb;\tbp3_f = 1;\n\t\t\t\tend\n\t\t\t\tif(X==0 && Y==3) begin\n\t\t\t\t\tbp3_pos  = x4InMaxCb;\tbp3_f =0;\n\t\t\t\tend\n\t\t\tend\t\n\t\t\t\t\n\t\t\t\n\t\t\tif(n_tuSize == 3'd2) \n\t\t\n\n\n\n\n\t\t\t\tbegin\n\t\t\t\t\tbp1_pos = (nnxt_lt_nxt_xTb)?n_x4InMaxCb:n_y4InMaxCb; bp1_f = (nnxt_lt_nxt_xTb)?0:1;\n\t\t\t\tend\n\t\t\n\t\t\t\t\n\t\t\tif(n_tuSize == 3'd3 && n_order==2)\tbegin\n\t\t\t\tbp1_pos = n_modeHor? n_x4InMaxCb:n_y4InMaxCb;\n\t\t\t\tbp1_f = n_modeHor? 0:1;\n\t\t\t\tend\n\t\tend\n\t\telse\tbegin\t\n\t\t\tif(tuSize==2)\n\t\t\t\tbegin\tbp3_pos = (nxt_lt_cur_xTb)?x4InMaxCb:y4InMaxCb; bp3_f = (nxt_lt_cur_xTb)?0:1;\t\t\t\tend\n\t\t\t\n\n\n\n\n\n\n\t\t\tif(tuSize==3 && cIdx==2 && order==2) begin\n\t\t\t\tif( nxt_lt_cur_xTb && Y==1) begin\n\t\t\t\t\tbp3_pos = x4InMaxCb; bp3_f = 0;\n\t\t\t\tend\n\t\t\t\tif( !nxt_lt_cur_xTb && Y==0) begin\n\t\t\t\t\tbp3_pos = y4InMaxCb; bp3_f = 1;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\t\n\t  end\t\t\t\n\t\n\t\n\n  generate \n    genvar k;\n    for ( k=0; k< 4 ; k= k+1) begin\t:xk\n      always @(*) begin\n\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\t\t\t\t\t\t\t\t\t\n\t\ttemp_by4_1_forStop[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =0;\t\t\t\t\t\t\n\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =0;\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\t\n\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\t\n\t\t\n\t\tif(tuSize==2 && partIdx==1 )\n\t\t\ttemp_by4_1_forStop[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\t\t\t\t\t\t\t\n        if(tuSize == 3'd2) \t\n\t\t\tcase(partIdx)\n\t\t\t2'b00: begin\n\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[k][3];\t\n\t\t\t\t\telse\n\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[k][3];\n\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;   \n\t\t\t\t\tif(!isChroma)\n\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\n\t\t\t\n\t\t\t\t\tend\n\t\t\t2'b01: begin\n\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[3][k]; \n\t\t\t\t\telse\n\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[3][k]; \n\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;  \n\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\t\tend\n\t\t\t2'b10:\tbegin\n\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[k][3];\n\t\t\t\t\telse\n\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[k][3];\n\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;  \n\t\t\t\t\tif(!isChroma)\n\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\n\t\t\t\n\t\t\t\t\tend\n\t\t\tdefault:begin\n\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\t\telse\n\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\t\tend\n\t\t\tendcase\n\t\tif(isChroma && tuSize==2)\n\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\n\t\tif(tuSize ==3'd3)\t\n\t\t\tcase({X[0],Y[0]})\n\t\t\t2'b10:\tbegin\n\t\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[k][3];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k]  = recon[k][3];\n\t\t\t\t\t\tif(!isChroma || (cIdx==2 && order==2 && !nxt_lt_cur_xTb))\n\t\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k]  = recon[k][3];\t\n\t\t\t\t\t\t\t\n\t\t\t\t\tend\n\t\t\t2'b01:\tbegin\n\t\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\t\t\tif(!isChroma || (cIdx==2 && order==2 && nxt_lt_cur_xTb))\n\t\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\t\tend\n\t\t\t2'b11:  bypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\tdefault:\t\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\tend\n\t\t\tendcase\n\t\tif(tuSize == 3'd4)\n\t\t\tif(X==3 && Y==0) bypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[k][3];\t\t\n\t\t\tif(Y==3 && X==0) bypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\n\t  end\t\t\t\n    end\t\t\t\n  endgenerate\n\t\n  \n  \n  \n\t\n\n\n\t\n\t\n\talways @(*)\tbegin\n\t\tXplus1sf2 = (X+1)<<2;\n\t\tYplus1sf2 = (Y+1)<<2;\n\t\tcLastBut2 = (order==6 || tuSize==2  || (tuSize==3 && order==2));\n\t\tcLastBut3 = (order==5 || tuSize==2  || (tuSize==3 && order==1));\n\t\tnPB = 1<<tuSize;\n\t\tnMaxCU = (1<<nMaxCUlog2);\n\t\ty_bar = yTb%nMaxCU+Yplus1sf2;\n\t\tx_bar = xTb%nMaxCU+Xplus1sf2;\n\t\ty_PB_bot = yTb%nMaxCU + nPB;\n\t\tx_PB_right = xTb%nMaxCU + nPB;\n\t\t\n\n\tend\n\t\n\t\n\n\talways @(posedge clk or negedge arst_n)\tbegin\n\t\n\t\tif(~arst_n)\tbegin\n\t\t\tr_tl_4 <=0;\n\t\t\tr_tl_4_cr <=0;\n\t\t\tr_t_tmp <=0;\n\t\t\tr_l_tmp <= 0;\n\t\t\tr_b_rt_tmp <= 0;\n\t\t\tr_br01_tmp <= 0;\n\t\t\tr_br01_4 <= 0;\n\t\t\tr_br01_8 <= 0;\n\t\t\tr_br01_16 <= 0;\n\t\t\tr_br01_32 <= 0;\n\t\t\tr_br01_64 <= 0;\n\t\t\tr_br2_8 <= 0;\n\t\t\tr_br2_16 <= 0;\n\t\t\tr_br2_32 <= 0;\t\t\n\t\t\tr_rt <= 0;\n\t\t\tr_b <= 0;\n\t\t\tr_t <= 0;\n\t\t\tr_l <= 0;\n\t\t\t\n\t\t\tr_t_tmp_cr <=0;\n\t\t\tr_l_tmp_cr <= 0;\n\t\t\tr_b_rt_tmp_cr <= 0;\n\t\t\tr_br01_tmp_cr <= 0;\n\t\t\tr_br01_4_cr <= 0;\n\t\t\tr_br01_8_cr <= 0;\n\t\t\tr_br01_16_cr <= 0;\n\t\t\tr_br01_32_cr <= 0;\n\t\t\tr_br2_8_cr <= 0;\n\t\t\tr_br2_16_cr <= 0;\n\t\t\tr_br2_32_cr <= 0;\t\n\t\t\tr_rt_cr <= 0;\n\t\t\tr_b_cr <= 0;\n\t\t\tr_t_cr <= 0;\n\t\t\tr_l_cr <= 0;\n\n\t\tend\n\t\telse if(~rst_n) begin\n\t\t\tr_tl_4 <=0;\n\t\t\tr_tl_4_cr <=0;\n\t\t\tr_t_tmp <=0;\n\t\t\tr_l_tmp <= 0;\n\t\t\tr_b_rt_tmp <= 0;\n\t\t\tr_br01_tmp <= 0;\n\t\t\tr_br01_4 <= 0;\n\t\t\tr_br01_8 <= 0;\n\t\t\tr_br01_16 <= 0;\n\t\t\tr_br01_32 <= 0;\n\t\t\tr_br01_64 <= 0;\n\t\t\tr_br2_8 <= 0;\n\t\t\tr_br2_16 <= 0;\n\t\t\tr_br2_32 <= 0;\n\t\t\tr_rt <= 0;\n\t\t\tr_b <= 0;\n\t\t\tr_t <= 0;\n\t\t\tr_l <= 0;\n\n\t\t\tr_t_tmp_cr <=0;\n\t\t\tr_l_tmp_cr <= 0;\n\t\t\tr_b_rt_tmp_cr <= 0;\n\t\t\tr_br01_tmp_cr <= 0;\n\t\t\tr_br01_4_cr <= 0;\n\t\t\tr_br01_8_cr <= 0;\n\t\t\tr_br01_16_cr <= 0;\n\t\t\tr_br01_32_cr <= 0;\n\t\t\tr_br2_8_cr <= 0;\n\t\t\tr_br2_16_cr <= 0;\n\t\t\tr_br2_32_cr <= 0;\t\n\t\t\tr_rt_cr <= 0;\n\t\t\tr_b_cr <= 0;\n\t\t\tr_t_cr <= 0;\n\t\t\tr_l_cr <= 0;\t\t\n\n\n\t\tend\n\t\telse \tbegin\n\t\t\n\t\t\n\t\t\n\t\tif (!bStop)\tbegin\n\t\t\tif(cIdx!=2 && isCalStage)\tbegin\n\t\t\t\tif( (Xplus1sf2 == nPB && X==Y && tuSize!=2) || (tuSize==2 && ((cIdx==0 && partIdx==0 ) || (cIdx==1))))\n\t\t\t\t\tr_tl_4 <= recon[3][3];\n\t\t\t\t\n\t\t\t\tif( Xplus1sf2 == nPB  && (yTb%(1<<nMaxCUlog2))==0 && Y==0)\t\t\n\t\t\t\t\tr_t_tmp <= recon[0][3];\t\n\t\t\t\tif( Yplus1sf2 == nPB  && isLtBorder && X==0)\t\t\t\n\t\t\t\t\tr_l_tmp <= recon[3][0];\t\n\t\t\t\tif(Yplus1sf2 == nPB && ((isBtBorder && posBtBorderIn4 == y4InMaxCb+(nPB>>2)) || (isRtBorder && posRtBorderIn4 == x4InMaxCb+(nPB>>2))) && Y==X )\n\t\t\t\t\tr_b_rt_tmp <= recon[3][3];\t\n\t\t\t\tif(Y==X && Yplus1sf2 == nPB)\n\t\t\t\t\tif(partIdx[1] == 0 )\n\t\t\t\t\t\tr_br01_tmp <= recon[3][3];\n\t\t\t\t\telse if (partIdx == 2)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd3: begin r_br2_8 <= recon[3][3];\tend\n\t\t\t\t\t\t\t3'd4: begin r_br2_16 <= recon[3][3];\tend\n\t\t\t\t\t\t\t3'd5: begin r_br2_32 <= recon[3][3];\tend\n\t\t\t\t\t\tendcase\n\t\t\t\t\telse if(partIdx==3) begin\n\t\t\t\t\t\tr_br01_tmp <= recon[3][3];\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin \n\t\t\t\t\t\t\t\tif(x_bar[2:0]==0 &&  y_bar[3:0] ==0 && y_bar[3] ==0 &&  x_bar[3] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_8 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[3:0]==0 &&  y_bar[4:0] ==0 && y_bar[4] ==0 &&  x_bar[4] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_16 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32 <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd3: begin \n\t\t\t\t\t\t\t\tif(x_bar[3:0]==0 &&  y_bar[4:0] ==0 && y_bar[4] ==0 &&  x_bar[4] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_16 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32 <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdefault: begin \n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32 <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tendcase\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\tif(yTb%(1<<nMaxCUlog2)==0)\t\t\t\t\t\t\n\t\t\t\t\tif((cLastBut3 && X==1) || tuSize==2 || (cLastBut2 && X==1 && tuSize==3))\n\t\t\t\t\t\tr_t<= recon[0][3];\n\t\t\t\t\telse if(tuSize>3 && cLastBut3)\n\t\t\t\t\t\tr_t <= r_t_tmp;\n\t\t\t\t\n\t\t\t\tif(cLastBut2 && isLtBorder)\t\t\n\t\t\t\t\tr_l <= ((tuSize>3 || (tuSize==3 && X==1) )? r_l_tmp: recon[3][0]);\n\t\t\t\tif(cLastBut3 && (isBtBorder && posBtBorderIn4 == y4InMaxCb+(nPB>>2)))\t\n\t\t\t\t\tr_b <= ((tuSize>2)?r_b_rt_tmp: recon[3][3]);\n\t\t\t\tif(cLastBut3 && (isRtBorder && posRtBorderIn4 == x4InMaxCb+(nPB>>2)))\t\n\t\t\t\t\tr_rt <= ((tuSize>2)?r_b_rt_tmp: recon[3][3]);\n\t\t\t\t\t\n\t\t\t\tif (cLastBut3)\tbegin\t\t\t\n\t\t\t\t\tif(partIdx[1] == 0)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin r_br01_4 <= recon[3][3];\t\tend\n\t\t\t\t\t\t\t3'd3: begin r_br01_8 <= r_br01_tmp ;\t\tend\t\t\t\n\t\t\t\t\t\t\t3'd4: begin r_br01_16 <= r_br01_tmp;\tend\n\t\t\t\t\t\t\tdefault: r_br01_32 <= r_br01_tmp;\n\t\t\t\t\t\tendcase\n\t\t\t\t\telse if (partIdx == 3)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[2:0]==0 &&  y_PB_bot[2:0] ==0 && y_PB_bot[3] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_8 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[3:0] ==0 &&  y_PB_bot[3:0] ==0 && y_PB_bot[4] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_16 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[5:0]==0 &&  y_PB_bot[5:0] ==0 && y_PB_bot[6] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_64 <= recon[3][3];\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd3: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[3:0] ==0 &&  y_PB_bot[3:0] ==0 && y_PB_bot[4] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_16 <= r_br01_tmp;\n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32 <= r_br01_tmp;\n\t\t\t\t\t\t\t\tif(x_PB_right[5:0]==0 &&  y_PB_bot[5:0] ==0 && y_PB_bot[6] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_64 <= r_br01_tmp;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd4: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32 <= r_br01_tmp;\n\t\t\t\t\t\t\t\tif(x_PB_right[5:0]==0 &&  y_PB_bot[5:0] ==0 && y_PB_bot[6] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_64 <= r_br01_tmp;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdefault: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[5:0]==0 &&  y_PB_bot[5:0] ==0 && y_PB_bot[6] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_64 <= r_br01_tmp;\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tendcase\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif(cIdx==2 && isCalStage)\tbegin\n\t\t\t\tif( (Xplus1sf2 == nPB && X==Y ) || tuSize==2)\n\t\t\t\t\tr_tl_4_cr <=recon[3][3];\n\t\t\t\tif( Xplus1sf2 == nPB  && (yTb%(1<<nMaxCUlog2))==0 && Y==0)\t\t\n\t\t\t\t\tr_t_tmp_cr <= recon[0][3];\t\n\t\t\t\tif( Yplus1sf2 == nPB  && isLtBorder && X==0)\t\t\t\n\t\t\t\t\tr_l_tmp_cr <= recon[3][0];\t\n\t\t\t\tif(Yplus1sf2 == nPB && ((isBtBorder && posBtBorderIn4 == y4InMaxCb+(nPB>>2)) || (isRtBorder && posRtBorderIn4 == x4InMaxCb+(nPB>>2))) && Y==X )\n\t\t\t\t\tr_b_rt_tmp_cr <= recon[3][3];\t\n\t\t\t\tif(Y==X && Yplus1sf2 == nPB)\n\t\t\t\t\tif(partIdx[1] == 0 )\n\t\t\t\t\t\tr_br01_tmp_cr <= recon[3][3];\n\t\t\t\t\telse if (partIdx == 2)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd3: begin r_br2_8_cr <= recon[3][3];\tend\n\t\t\t\t\t\t\t3'd4: begin r_br2_16_cr <= recon[3][3];\tend\n\t\t\t\t\t\t\t3'd5: begin r_br2_32_cr <= recon[3][3];\tend\n\t\t\t\t\t\tendcase\n\t\t\t\t\telse if(partIdx==3) begin\n\t\t\t\t\t\tr_br01_tmp_cr <= recon[3][3];\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin \n\t\t\t\t\t\t\t\tif(x_bar[2:0]==0 &&  y_bar[3:0] ==0 && y_bar[3] ==0 &&  x_bar[3] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_8_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[3:0]==0 &&  y_bar[4:0] ==0 && y_bar[4] ==0 &&  x_bar[4] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_16_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd3: begin \n\t\t\t\t\t\t\t\tif(x_bar[3:0]==0 &&  y_bar[4:0] ==0 && y_bar[4] ==0 &&  x_bar[4] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_16_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdefault: begin \n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tendcase\n\t\t\t\t\tend\n\t\t\t\tif(cLastBut2 && (yTb%(1<<nMaxCUlog2))==0)\t\t\t\t\t\t\n\t\t\t\t\tr_t_cr <= ((tuSize>3 || (tuSize==3 && X==0))? r_t_tmp_cr: recon[0][3]);\n\t\t\t\tif(cLastBut2 && isLtBorder)\n\t\t\t\t\tr_l_cr <= ((tuSize>3 || (tuSize==3 && X==1) )? r_l_tmp_cr: recon[3][0]);\n\t\t\t\tif(cLastBut2 && (isBtBorder && posBtBorderIn4 == y4InMaxCb+(nPB>>2)))\n\t\t\t\t\tr_b_cr <= ((tuSize>2)?r_b_rt_tmp_cr: recon[3][3]);\n\t\t\t\tif(cLastBut2 && (isRtBorder && posRtBorderIn4 == x4InMaxCb+(nPB>>2)))\n\t\t\t\t\tr_rt_cr <= ((tuSize>2)?r_b_rt_tmp_cr: recon[3][3]);\n\t\t\t\t\t\n\t\t\t\tif (cLastBut2)\tbegin\t\n\t\t\t\t\tif(partIdx[1] == 0)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin r_br01_4_cr <= recon[3][3];\t\tend\n\t\t\t\t\t\t\t3'd3: begin r_br01_8_cr <= r_br01_tmp_cr ;\t\tend\t\t\t\n\t\t\t\t\t\t\t3'd4: begin r_br01_16_cr <= r_br01_tmp_cr;\tend\n\t\t\t\t\t\t\tdefault: r_br01_32_cr <= r_br01_tmp_cr;\n\t\t\t\t\t\tendcase\n\t\t\t\t\telse if (partIdx == 3)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[2:0]==0 &&  y_PB_bot[2:0] ==0 && y_PB_bot[3] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_8_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[3:0] ==0 &&  y_PB_bot[3:0] ==0 && y_PB_bot[4] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_16_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32_cr <= recon[3][3];\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd3: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[3:0] ==0 &&  y_PB_bot[3:0] ==0 && y_PB_bot[4] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_16_cr <= r_br01_tmp_cr;\n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32_cr <= r_br01_tmp_cr;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdefault: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32_cr <= r_br01_tmp_cr;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tendcase\n\t\t\t\tend\n\t\t\tend\n\t\tend\t\n\tend\t\nend\n\t\t\n\n\t\n\t\n\t\t\n\t\t\t\n\nendmodule```"
        },
        {
            "role": "user",
            "content": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
        },
        {
            "role": "assistant",
            "content": "Module name: intra_bypass. Module specification: The intra_bypass module is part of an intra prediction system for video coding, specifically handling bypass operations. It processes various input signals related to coding unit (CU) and transform unit (TU) sizes, positions, and borders to generate bypass samples for different prediction modes and sizes, handling both luma and chroma components. The module has numerous input ports, including clock and reset signals, control flags, size and position parameters, border information, and various flags related to the intra prediction process. Output ports provide bypass samples for different prediction modes and components, positions of bypass samples, and bottom and right samples. Internal signals include position indicators, flags, storage for reconstructed and reference samples, and various control signals. The module is structured with several always blocks and generate statements, handling different aspects of the bypass process such as sample storage, reference sample selection, and bypass sample generation for various block sizes and positions. It includes"
        }
    ],
    "claude-message": [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are an expert in hardware design with a deep understanding of Verilog RTL codes. Now I want to train a large language model for code comment generation tasks specifically focused on Verilog RTL codes. And I want you to help me process the raw data, transforming it into suitable formats that can serve as inputs and outputs for the model."
                },
                {
                    "type": "text",
                    "text": "Name of the module and its functionality is as follows: \nModule name: intra_bypass.\n\nExplanation: This module appears to be part of an intra prediction system for video coding, specifically handling bypass operations for intra prediction. It processes various input signals related to coding unit (CU) and transform unit (TU) sizes, positions, and borders. The module generates bypass samples for different prediction modes and sizes, handling both luma and chroma components. It includes logic for storing and selecting reference samples from neighboring blocks, which are crucial for intra prediction. The module also handles special cases for different partition sizes and positions within the coding tree unit (CTU)."
                },
                {
                    "type": "text",
                    "text": "Input and output ports and their explanation is as follows: \nInput ports: clk, rst_n, arst_n, bStop, n_bStop, nn_bStop, n_modeHor, tuSize, n_tuSize, xTb, nxtXTb, yTb, nxtYTb, X, Y, partIdx, n_partIdx, i_recSamples, l3_i_recSamples, order, n_order, nMaxCUlog2, isLtBorder, isBtBorder, isRtBorder, posBtBorderIn4, posRtBorderIn4, isCalStage, cIdx, n_cIdx, nn_cIdx, n_isBtTb4, n_isRtTb4, n_isBtTb8, n_isRtTb8.\n\nExplanation: These inputs include clock and reset signals, control flags, size and position parameters for coding units and transform units, border information, calculation stage flags, component index, and various other flags and indices related to the intra prediction process.\n\nOutput ports: byPa_P_DR_1, byPa_P_DR_1_cr, byPa_P_A_2, byPa_P_A_2_cr, byPa_DW_A_3, bypa_pos_1, bypa_pos_2, bypa_pos_3, btRtSamples, by4_1_forStop, by4_1_forStop_cr, by4_1_forStop_pos.\n\nExplanation: These outputs provide bypass samples for different prediction modes and components (luma and chroma), positions of bypass samples, bottom and right samples, and additional bypass samples for specific conditions. They are used in subsequent stages of the intra prediction process to generate predicted samples for the current block."
                },
                {
                    "type": "text",
                    "text": "Internal signals and their explanation is as follows: \nBased on the provided Verilog code for the intra_bypass module, here are the internal signals and their explanations:\n\nInternal signals: bp1_pos, bp2_pos, bp3_pos, by4_1_forStop_pos_, bp1_f, bp2_f, bp3_f, temp_bp3_pos, recon, l3_recon, r_l, r_t, r_b, r_rt, r_br01_4, r_br01_8, r_br01_16, r_br01_32, r_br01_64, r_br2_8, r_br2_16, r_br2_32, r_l_cr, r_t_cr, r_b_cr, r_rt_cr, r_br01_4_cr, r_br01_8_cr, r_br01_16_cr, r_br01_32_cr, r_br2_8_cr, r_br2_16_cr, r_br2_32_cr, r_b_rt_tmp, r_l_tmp, r_t_tmp, r_br01_tmp, r_b_rt_tmp_cr, r_l_tmp_cr, r_t_tmp_cr, r_br01_tmp_cr, r_tl_4, r_tl_4_cr, p_dr1_4samples, p_dr1_4samples_cr, p_a2_4samples, dw_a3_4samples, temp_by4_1_forStop, cLastBut2, cLastBut3, x8, y8, bypa_1, bypa_2, bypa_3, tempForbp3, bypa_1_cr, nPB, nMaxCU, y_bar, x_bar, y_PB_bot, x_PB_right, Xplus1sf2, Yplus1sf2, x4InMaxCb, y4InMaxCb, n_x4InMaxCb, n_y4InMaxCb, a, a_cr, n_pIdx_4, n_pIdx_8, n_pIdx_16, n_pIdx_32, nxt_lt_cur_xTb, nnxt_lt_nxt_xTb, bDelayWrite.\n\nExplanation: These internal signals serve various purposes in the module:\n- bp1_pos, bp2_pos, bp3_pos: Position indicators for bypass samples.\n- bp1_f, bp2_f, bp3_f: Flags associated with bypass positions.\n- recon, l3_recon: 2D arrays to store reconstructed samples.\n- r_l, r_t, r_b, r_rt: Reference samples for left, top, bottom, and right positions.\n- r_br01_*, r_br2_*: Reference samples for different block sizes and positions.\n- *_cr versions: Chroma counterparts of the luma signals.\n- r_*_tmp: Temporary storage for reference samples.\n- r_tl_4: Top-left reference sample.\n- p_dr1_4samples, p_a2_4samples, dw_a3_4samples: Processed samples for different prediction modes.\n- cLastBut2, cLastBut3: Control flags for specific conditions.\n- x8, y8: 8x8 block position indicators.\n- bypa_1, bypa_2, bypa_3: Bypass sample storage.\n- nPB, nMaxCU: Size parameters for prediction block and maximum coding unit.\n- y_bar, x_bar, y_PB_bot, x_PB_right: Position indicators within the coding tree.\n- x4InMaxCb, y4InMaxCb: 4x4 block positions within the maximum coding block.\n- n_pIdx_*: Next partition index for different block sizes.\n- nxt_lt_cur_xTb, nnxt_lt_nxt_xTb: Flags for comparing current and next block positions.\n- bDelayWrite: Flag to control delayed writing of samples.\n\nThese signals are used for various calculations, temporary storage, and control flow within the intra prediction bypass process."
                },
                {
                    "type": "text",
                    "text": "Original Verilog code is as follows: \n<code>`timescale 1ns/1ps\nmodule intra_bypass(\n\tclk,\n\tarst_n,\n\trst_n,\n\tbStop,\n\tn_bStop,\n\tnn_bStop,\n\ttuSize,\n\tn_tuSize,\n\tX,\n\tY,\n\tpartIdx,\n\tn_partIdx,\n\txTb,\n\tyTb,\n\tnxtXTb,\n\tnxtYTb,\n\tisLtBorder,\n\tisBtBorder,\n\tisRtBorder,\n\tposBtBorderIn4,\n\tposRtBorderIn4,\n\t\n\ti_recSamples,\n\tl3_i_recSamples,\n\tisCalStage,\n\torder,\n\tnMaxCUlog2,\n\tcIdx,\n\tn_cIdx,\n\tnn_cIdx,\n\t\n\tbyPa_P_DR_1,\n\tbyPa_P_DR_1_cr,\n\tbyPa_P_A_2,\n\tbyPa_P_A_2_cr,\n\tbyPa_DW_A_3,\n\t\n\tbypa_pos_1,\n\tbypa_pos_2,\n\tbypa_pos_3\n\t\n\t,btRtSamples\n\t,by4_1_forStop\n\t,by4_1_forStop_cr\n\t,by4_1_forStop_pos\n\t\n\t,n_isBtTb4\n\t,n_isRtTb4\t\n\t,n_isBtTb8\n\t,n_isRtTb8\n\t\n\t,n_modeHor\n\t,n_order\n);\n\n  parameter bitDepth = 8;\n  parameter isChroma = 0;\n\n\tinput\t\t\t\t\t\t\t\tclk,rst_n,arst_n,bStop,n_bStop,nn_bStop;\n\tinput\t\t\t\t\t\t\t\tn_modeHor;\n\tinput \t[2:0] \t\t\t\t\t\ttuSize,n_tuSize;\n\tinput \t[12:0]\t\t\t\t\t\txTb,nxtXTb;\n\tinput \t[12:0]\t\t\t\t\t\tyTb,nxtYTb;\n\tinput\t[2:0]\t\t\t\t\t\tX,Y;\n\tinput\t[1:0]\t\t\t\t\t\tpartIdx,n_partIdx;\n\tinput   [16*bitDepth-1:0] \t\t\ti_recSamples;\t\n\tinput   [16*bitDepth-1:0] \t\t\tl3_i_recSamples;\t\n\tinput\t[2:0]\t\t\t\t\t\torder,n_order;\n\tinput\t[2:0]\t\t\t\t\t\tnMaxCUlog2;\n\tinput\t\t\t\t\t\t\t\tisLtBorder;\n\tinput\t\t\t\t\t\t\t\tisBtBorder;\n\tinput\t\t\t\t\t\t\t\tisRtBorder;\n\tinput\t[4:0]\t\t\t\t\t\tposBtBorderIn4,posRtBorderIn4;\n\tinput\t\t\t\t\t\t\t\tisCalStage;\n\tinput\t[1:0]\t\t\t\t\t\tcIdx,n_cIdx,nn_cIdx;\n\tinput\t\t\t\t\t\t\t\tn_isBtTb4,n_isBtTb8;\n\tinput\t\t\t\t\t\t\t\tn_isRtTb4,n_isRtTb8;\n\t\n\treg [4:0]\t\t\t\t\t\tbp1_pos,bp2_pos,bp3_pos,by4_1_forStop_pos_;\n\treg\t\t\t\t\t\t\t\tbp1_f,bp2_f,bp3_f;\n\treg [5:0]\t\t\t\t\t\ttemp_bp3_pos;\n\toutput reg [5:0]\t\t\t\tbypa_pos_1,bypa_pos_2,bypa_pos_3;\n\toutput  [bitDepth*4-1:0] \t\t\t\t\tbyPa_P_DR_1;      \n\toutput  [bitDepth*4-1:0]\t\t\t\t\t\tbyPa_P_DR_1_cr;\n\toutput  [bitDepth*16-1:0] \t\t\t\t\tbyPa_P_A_2;      \n\toutput  [bitDepth*11-1:0] \t\t\t\t\tbyPa_P_A_2_cr;\n\toutput  [bitDepth*6-1:0] \t\t\t\t\tbyPa_DW_A_3;      \n\toutput\t[bitDepth*2-1:0] \t\t\t\t\tbtRtSamples;\n\toutput reg \t[bitDepth*4-1:0] \t\t\t\tby4_1_forStop,by4_1_forStop_cr;\n\toutput reg \t[4:0]\t\t\t\t\t\t\t\tby4_1_forStop_pos;\n\t\n\treg [bitDepth-1:0]\t\t\t\trecon[3:0][3:0];\n\treg [bitDepth-1:0]\t\t\t\tl3_recon[3:0][3:0];\n\t\n\treg [bitDepth-1:0]\t\t\t\tr_l,r_t,r_b,r_rt;\n\treg [bitDepth-1:0]\t\t\t\tr_br01_4,r_br01_8,r_br01_16,r_br01_32,r_br01_64;\n\treg [bitDepth-1:0]\t\t\t\tr_br2_8,r_br2_16,r_br2_32;\n\t\n\treg [bitDepth-1:0]\t\t\t\tr_l_cr,r_t_cr,r_b_cr,r_rt_cr;\n\treg [bitDepth-1:0]\t\t\t\tr_br01_4_cr,r_br01_8_cr,r_br01_16_cr,r_br01_32_cr;\n\treg [bitDepth-1:0]\t\t\t\tr_br2_8_cr,r_br2_16_cr,r_br2_32_cr;\n\t\n\treg [bitDepth-1:0]\t\t\t\tr_b_rt_tmp,r_l_tmp,r_t_tmp,r_br01_tmp;\n\treg [bitDepth-1:0]\t\t\t\tr_b_rt_tmp_cr,r_l_tmp_cr,r_t_tmp_cr,r_br01_tmp_cr;\n\treg [bitDepth-1:0]\t\t\t\tr_tl_4,r_tl_4_cr;\n\t\n\treg [bitDepth*4-1:0]\t\t\t\tp_dr1_4samples;\n\treg\t[bitDepth*4-1:0]\t\t\t\tp_dr1_4samples_cr;\n\treg [bitDepth*4-1:0]\t\t\t\tp_a2_4samples;\n\treg [bitDepth*4-1:0]\t\t\t\tdw_a3_4samples;\t\n\treg [bitDepth*4-1:0]\t\t\t\ttemp_by4_1_forStop;\n\t\n\treg \t\t\t\t\t\t\t\tcLastBut2,cLastBut3;\n\t\n\t\n\tassign byPa_P_DR_1 = {p_dr1_4samples};\n\tassign byPa_P_DR_1_cr = p_dr1_4samples_cr;\n\tassign byPa_P_A_2 = {r_l,r_t,r_br01_4,r_br01_8,r_br01_16,r_br01_32,r_br01_64,r_br2_8,r_br2_16,r_br2_32,r_b,r_rt,p_a2_4samples};\n\tassign byPa_P_A_2_cr = {r_l_cr,r_t_cr,\n\t\t\t\t\t\t\tr_br01_4_cr,r_br01_8_cr,r_br01_16_cr,r_br01_32_cr,\n\t\t\t\t\t\t\tr_br2_8_cr,r_br2_16_cr,r_br2_32_cr,r_b_cr,r_rt_cr};\n\tassign byPa_DW_A_3 = {r_tl_4,r_tl_4_cr,dw_a3_4samples};\n\tassign btRtSamples =  {r_b,r_rt};\n\t\n\treg x8;\n\treg y8;\n\t\n\treg [bitDepth*4-1:0]  bypa_1,bypa_2,bypa_3,tempForbp3;\n\treg [bitDepth*4-1:0]  bypa_1_cr;\n\t\n\treg [6:0] \tnPB,nMaxCU;\n\treg [6:0] \ty_bar,x_bar,y_PB_bot,x_PB_right;\n\treg [5:0] \tXplus1sf2,Yplus1sf2;\n\treg [4:0]\tx4InMaxCb,y4InMaxCb;\n\treg [4:0]\tn_x4InMaxCb,n_y4InMaxCb;\n\t\n\treg [bitDepth-1:0]\t\t\t\ta[3:0],a_cr[3:0];\t\n\n\treg [1:0]   n_pIdx_4,n_pIdx_8,n_pIdx_16,n_pIdx_32;\n\treg \t\t\tnxt_lt_cur_xTb;\n\treg \t\t\tnnxt_lt_nxt_xTb;\n\t\n\treg\t\t\t\tbDelayWrite;\n\t\n\talways @(*)\tbegin\n\t\tx8 = (xTb>>3)%2;\n\t\ty8 = (yTb>>3)%2;\n\t\t{a[0],a[1],a[2],a[3]} = bypa_3;\n\t\t{a_cr[0],a_cr[1],a_cr[2],a_cr[3]} = bypa_1_cr;\t\t\n\t\t\n\t\tn_pIdx_4 = {nxtYTb[2],nxtXTb[2]};\n\t\tn_pIdx_8 = {nxtYTb[3],nxtXTb[3]};\n\t\tn_pIdx_16 = {nxtYTb[4],nxtXTb[4]};\n\t\tn_pIdx_32 = {nxtYTb[5],nxtXTb[5]};\n\t\t\n\t\n\t\t\t\n\t\tnnxt_lt_nxt_xTb=0;\n\n\t\tif(n_tuSize==2)  begin\n\t\t\tif( (n_pIdx_4[0]==0 && !n_isRtTb4) || n_isBtTb4)\tnnxt_lt_nxt_xTb = 0;\n\t\t\telse if(n_pIdx_4==1 || n_isRtTb4)\tnnxt_lt_nxt_xTb = 1;\n\t\t\telse begin\n\t\t\t\tif( (n_pIdx_8[0]==0 && !n_isRtTb4) || n_isBtTb4)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\telse if(n_pIdx_8==1 || n_isRtTb4)\tnnxt_lt_nxt_xTb = 1;\n\t\t\t\telse begin\n\t\t\t\t\tif((n_pIdx_16[0]==0 && !n_isRtTb4) || n_isBtTb4)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\t\telse if(n_pIdx_16==1 || n_isRtTb4) \tnnxt_lt_nxt_xTb = 1;\n\t\t\t\t\telse begin\n\t\t\t\t\t\tif((n_pIdx_32[0]!=1 && !n_isRtTb4 )|| n_isBtTb4)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\t\t\telse if(n_pIdx_32==1) \tnnxt_lt_nxt_xTb = 1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif(n_tuSize==3)  begin\n\t\t\tif((n_pIdx_8[0]==0 && !n_isRtTb8) || n_isBtTb8)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\telse if(n_pIdx_8==1 || n_isRtTb8)\tnnxt_lt_nxt_xTb = 1;\n\t\t\t\telse begin\n\t\t\t\t\tif((n_pIdx_16[0]==0 && !n_isRtTb8) || n_isBtTb8)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\t\telse if(n_pIdx_16==1 || n_isRtTb8) \tnnxt_lt_nxt_xTb = 1;\n\t\t\t\t\telse begin\n\t\t\t\t\t\tif((n_pIdx_32[0]!=1 && !n_isRtTb8 )|| n_isBtTb8)\tnnxt_lt_nxt_xTb = 0;\n\t\t\t\t\t\telse if(n_pIdx_32==1) \tnnxt_lt_nxt_xTb = 1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\tend\n\n\n\tend\n\t\n\talways @(posedge clk or negedge arst_n)\tbegin\n\t\tif(~arst_n)\tbegin\n\t\t\tp_dr1_4samples <= 0;\n\t\t\tp_dr1_4samples_cr <= 0;\n\t\t\tp_a2_4samples <= 0;\n\t\t\tdw_a3_4samples <= 0;\n\t\t\ttempForbp3 <= 0; \n\t\t\tbypa_pos_1 <= 0;\n\t\t\tbypa_pos_2 <= 0;\n\t\t\ttemp_bp3_pos <= 0;\n\t\t\tbypa_pos_3 <= 0;\n\t\t\tby4_1_forStop <= 0;\n\t\t\tby4_1_forStop_cr<=0;\n\t\t\tby4_1_forStop_pos <=0;\n\t\t\tnxt_lt_cur_xTb <= 0;\n\t\t\tbDelayWrite<=0;\n\t\tend\n\t\telse if(~rst_n) begin\n\t\t\tp_dr1_4samples <= 0;\n\t\t\tp_dr1_4samples_cr <= 0;\n\t\t\tp_a2_4samples <= 0;\n\t\t\tdw_a3_4samples <= 0;\n\t\t\ttempForbp3 <= 0; \n\t\t\tbypa_pos_1 <= 0;\n\t\t\tbypa_pos_2 <= 0;\n\t\t\ttemp_bp3_pos <= 0;\n\t\t\tbypa_pos_3 <= 0;\n\t\t\tby4_1_forStop <= 0;\n\t\t\tby4_1_forStop_cr<=0;\n\t\t\tby4_1_forStop_pos <=0;\n\t\t\tnxt_lt_cur_xTb <= 0;\n\t\t\tbDelayWrite<=0;\n\t\tend\n\t\telse begin\n\t\t\tif(!bStop && !isChroma)\tbegin\n\t\t\t\ttemp_bp3_pos <= {bp3_f,bp3_pos};\n\t\t\t\tbypa_pos_3 <=  temp_bp3_pos;\n\t\t\t\ttempForbp3 <= bypa_3;\n\t\t\t\tdw_a3_4samples <= tempForbp3;\n\t\t\tend\n\t\t\telse if(isChroma) begin\n\t\t\t\tif((!bDelayWrite && !n_bStop) || (bDelayWrite && !nn_bStop) )\tbegin\n\t\t\t\t\tbypa_pos_3 <=  temp_bp3_pos;\n\t\t\t\t\tdw_a3_4samples <= tempForbp3;\n\t\t\t\tend\n\t\t\t\tif(!bStop)\tbegin\n\t\t\t\t\ttemp_bp3_pos <= {bp3_f,bp3_pos};\n\t\t\t\t\ttempForbp3 <= bypa_3;\n\t\t\t\tend\n\t\t\tend\n\t\t\tif(!bStop)\tbegin\n\t\t\t\tp_dr1_4samples <= cIdx!=2? bypa_1:p_dr1_4samples;\n\t\t\t\tp_dr1_4samples_cr <= cIdx==2? bypa_1_cr:p_dr1_4samples_cr; \n\t\t\t\tp_a2_4samples <= bypa_2;\n\n\t\t\t\tif(cIdx==0 || (cIdx==2 && n_cIdx==1))\tbegin\n\t\t\t\t\tbypa_pos_2 <=  {bp2_f,bp2_pos};\n\t\t\t\t\tif(tuSize==2 && partIdx==1)\n\t\t\t\t\t\tby4_1_forStop_pos <= by4_1_forStop_pos_;\n\t\t\t\tend\n\t\t\t\n\t\t\t\tif(tuSize==2 && partIdx==1 )\tbegin\n\t\t\t\t\tif(cIdx[1] ==0)\n\t\t\t\t\t\tby4_1_forStop <=   temp_by4_1_forStop;\n\t\t\t\t\telse\n\t\t\t\t\t\tby4_1_forStop_cr <= temp_by4_1_forStop;\n\t\t\t\tend\n\t\t\tend\n\t\t\tif(!n_bStop) begin\n\t\t\t\tnxt_lt_cur_xTb <= nnxt_lt_nxt_xTb;\n\t\t\t\tif(n_cIdx==0 || (n_cIdx==2 && nn_cIdx==1))\n\t\t\t\t\t\tbypa_pos_1 <=  {bp1_f,bp1_pos};\n\t\t\tend\n\t\t\t\n\t\t\tif(!n_bStop && nn_bStop)\n\t\t\t\tbDelayWrite <=1;\n\t\t\tif(bDelayWrite && !nn_bStop)\n\t\t\t\tbDelayWrite <=0;\n\t\tend\n\t\n\tend\n\t\n\n   generate\n\t  genvar i,j;\n\t  for(i=0;i<4; i=i+1)begin:yi\t\t\t\n\t\t  for(j=0 ;j<4;j=j+1) begin: xi\t\t\n\t\t   always @(*)       begin   \n\t\t      recon[i][j] = i_recSamples[16*bitDepth-1-bitDepth*(4*i+j): 15*bitDepth-bitDepth*(4*i+j)];\n\t\t      l3_recon[i][j] = l3_i_recSamples[16*bitDepth-1-bitDepth*(4*i+j): 15*bitDepth-bitDepth*(4*i+j)];\n\t\t\t  end\n\t\t end\n\t\tend\n\tendgenerate\n\n\t\n\t\n\t\n\t always @(*) begin\n\t\tx4InMaxCb = (xTb%nMaxCU)>>2;\n\t\ty4InMaxCb = (yTb%nMaxCU)>>2;\n\t\tn_x4InMaxCb = (nxtXTb%nMaxCU)>>2;\n\t\tn_y4InMaxCb = (nxtYTb%nMaxCU)>>2;\n\t\tbp1_f =0; bp2_f=0; bp3_f=0;\n\t\tby4_1_forStop_pos_ = 0;\n\t\tbp2_pos = 16; bp3_pos = 16;\n\t\tbp1_pos = 16; bp1_f = 0;\n\t\t\n\t\tif(tuSize==2 && partIdx==1 )\n\t\t\tby4_1_forStop_pos_ = x4InMaxCb; \t\n\t\tif(!isChroma) begin\n\t\t\tif(tuSize == 3'd2) \n\t\t\t\tcase(partIdx)\n\t\t\t\t2'b00: begin\n\t\t\t\t\t\tbp3_pos = x4InMaxCb;\tbp3_f =0;\t\n\t\t\t\t\t\tend\n\t\t\t\t2'b01: begin\n\t\t\t\t\t\tbp3_pos = x4InMaxCb;\tbp3_f =0;\n\t\t\t\t\t\tend\n\t\t\t\t2'b10:\tbegin\n\t\t\t\t\t\tbp3_pos = x4InMaxCb; \tbp3_f =0;\n\t\t\t\t\t\tend\n\t\t\t\tdefault:begin\n\t\t\t\t\t\tbp2_pos = (nxt_lt_cur_xTb)?x4InMaxCb:y4InMaxCb;\tbp2_f = (nxt_lt_cur_xTb)?0:1;\n\t\t\t\t\t\tbp3_pos = (nxt_lt_cur_xTb)?x4InMaxCb:y4InMaxCb;\tbp3_f = (nxt_lt_cur_xTb)?0:1;\n\t\t\t\t\t\tend\n\t\t\t\tendcase\n\t\t\tif(tuSize ==3'd3)\t\n\t\t\t\tcase({X[0],Y[0]})\n\t\t\t\t2'b10:\tbegin\n\t\t\t\t\t\t\tbp2_pos  = y4InMaxCb;\tbp2_f = 1;\n\t\t\t\t\t\t\tbp3_pos  = y4InMaxCb;\tbp3_f = 1;\t\t\t\t\t\t\n\t\t\t\t\t\tend\n\t\t\t\t2'b01:\tbegin\n\t\t\t\t\t\t\tbp2_pos  = x4InMaxCb;\tbp2_f = 0;\n\t\t\t\t\t\t\tbp3_pos  = x4InMaxCb;\tbp3_f =0;\n\t\t\t\t\t\tend\n\t\t\t\t2'b11:  begin\n\t\t\t\t\t\t\tbp3_pos = nxt_lt_cur_xTb?x4InMaxCb+1:y4InMaxCb+1;\n\t\t\t\t\t\t\tbp3_f = nxt_lt_cur_xTb?0:1;\n\t\t\t\t\t\tend\n\t\t\t\tdefault:\t\n\t\t\t\t\t\tbegin\n\t\t\t\t\t\t\tbp2_pos = 16; bp2_f = 0;\n\t\t\t\t\t\t\tbp3_pos = 16; bp3_f =0;\n\t\t\t\t\t\tend\n\t\t\t\tendcase\n\t\t\tif(tuSize ==3'd4 ) begin\n\t\t\t\tif(X==3 && Y==0) begin\n\t\t\t\t\tbp3_pos  = y4InMaxCb;\tbp3_f = 1;\n\t\t\t\tend\n\t\t\t\tif(X==0 && Y==3) begin\n\t\t\t\t\tbp3_pos  = x4InMaxCb;\tbp3_f =0;\n\t\t\t\tend\n\t\t\tend\t\n\t\t\t\t\n\t\t\t\n\t\t\tif(n_tuSize == 3'd2) \n\t\t\n\n\n\n\n\t\t\t\tbegin\n\t\t\t\t\tbp1_pos = (nnxt_lt_nxt_xTb)?n_x4InMaxCb:n_y4InMaxCb; bp1_f = (nnxt_lt_nxt_xTb)?0:1;\n\t\t\t\tend\n\t\t\n\t\t\t\t\n\t\t\tif(n_tuSize == 3'd3 && n_order==2)\tbegin\n\t\t\t\tbp1_pos = n_modeHor? n_x4InMaxCb:n_y4InMaxCb;\n\t\t\t\tbp1_f = n_modeHor? 0:1;\n\t\t\t\tend\n\t\tend\n\t\telse\tbegin\t\n\t\t\tif(tuSize==2)\n\t\t\t\tbegin\tbp3_pos = (nxt_lt_cur_xTb)?x4InMaxCb:y4InMaxCb; bp3_f = (nxt_lt_cur_xTb)?0:1;\t\t\t\tend\n\t\t\t\n\n\n\n\n\n\n\t\t\tif(tuSize==3 && cIdx==2 && order==2) begin\n\t\t\t\tif( nxt_lt_cur_xTb && Y==1) begin\n\t\t\t\t\tbp3_pos = x4InMaxCb; bp3_f = 0;\n\t\t\t\tend\n\t\t\t\tif( !nxt_lt_cur_xTb && Y==0) begin\n\t\t\t\t\tbp3_pos = y4InMaxCb; bp3_f = 1;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\t\n\t  end\t\t\t\n\t\n\t\n\n  generate \n    genvar k;\n    for ( k=0; k< 4 ; k= k+1) begin\t:xk\n      always @(*) begin\n\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\t\t\t\t\t\t\t\t\t\n\t\ttemp_by4_1_forStop[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =0;\t\t\t\t\t\t\n\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =0;\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\t\n\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\t\n\t\t\n\t\tif(tuSize==2 && partIdx==1 )\n\t\t\ttemp_by4_1_forStop[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\t\t\t\t\t\t\t\n        if(tuSize == 3'd2) \t\n\t\t\tcase(partIdx)\n\t\t\t2'b00: begin\n\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[k][3];\t\n\t\t\t\t\telse\n\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[k][3];\n\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;   \n\t\t\t\t\tif(!isChroma)\n\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\n\t\t\t\n\t\t\t\t\tend\n\t\t\t2'b01: begin\n\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[3][k]; \n\t\t\t\t\telse\n\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[3][k]; \n\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;  \n\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\t\tend\n\t\t\t2'b10:\tbegin\n\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[k][3];\n\t\t\t\t\telse\n\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] =\trecon[k][3];\n\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;  \n\t\t\t\t\tif(!isChroma)\n\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\n\t\t\t\n\t\t\t\t\tend\n\t\t\tdefault:begin\n\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\t\telse\n\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\t\tend\n\t\t\tendcase\n\t\tif(isChroma && tuSize==2)\n\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\t\n\t\tif(tuSize ==3'd3)\t\n\t\t\tcase({X[0],Y[0]})\n\t\t\t2'b10:\tbegin\n\t\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[k][3];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k]  = recon[k][3];\n\t\t\t\t\t\tif(!isChroma || (cIdx==2 && order==2 && !nxt_lt_cur_xTb))\n\t\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k]  = recon[k][3];\t\n\t\t\t\t\t\t\t\n\t\t\t\t\tend\n\t\t\t2'b01:\tbegin\n\t\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\t\t\tif(!isChroma || (cIdx==2 && order==2 && nxt_lt_cur_xTb))\n\t\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\t\tend\n\t\t\t2'b11:  bypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = (nxt_lt_cur_xTb)?recon[3][k]:recon[k][3];\n\t\t\tdefault:\t\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif(cIdx!=2)\n\t\t\t\t\t\t\tbypa_1[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tbypa_1_cr[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\tbypa_2[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\t\tbypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = 0;\n\t\t\t\t\tend\n\t\t\tendcase\n\t\tif(tuSize == 3'd4)\n\t\t\tif(X==3 && Y==0) bypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[k][3];\t\t\n\t\t\tif(Y==3 && X==0) bypa_3[bitDepth*4-1-bitDepth*k:bitDepth*3-bitDepth*k] = recon[3][k];\n\t\t\t\n\t  end\t\t\t\n    end\t\t\t\n  endgenerate\n\t\n  \n  \n  \n\t\n\n\n\t\n\t\n\talways @(*)\tbegin\n\t\tXplus1sf2 = (X+1)<<2;\n\t\tYplus1sf2 = (Y+1)<<2;\n\t\tcLastBut2 = (order==6 || tuSize==2  || (tuSize==3 && order==2));\n\t\tcLastBut3 = (order==5 || tuSize==2  || (tuSize==3 && order==1));\n\t\tnPB = 1<<tuSize;\n\t\tnMaxCU = (1<<nMaxCUlog2);\n\t\ty_bar = yTb%nMaxCU+Yplus1sf2;\n\t\tx_bar = xTb%nMaxCU+Xplus1sf2;\n\t\ty_PB_bot = yTb%nMaxCU + nPB;\n\t\tx_PB_right = xTb%nMaxCU + nPB;\n\t\t\n\n\tend\n\t\n\t\n\n\talways @(posedge clk or negedge arst_n)\tbegin\n\t\n\t\tif(~arst_n)\tbegin\n\t\t\tr_tl_4 <=0;\n\t\t\tr_tl_4_cr <=0;\n\t\t\tr_t_tmp <=0;\n\t\t\tr_l_tmp <= 0;\n\t\t\tr_b_rt_tmp <= 0;\n\t\t\tr_br01_tmp <= 0;\n\t\t\tr_br01_4 <= 0;\n\t\t\tr_br01_8 <= 0;\n\t\t\tr_br01_16 <= 0;\n\t\t\tr_br01_32 <= 0;\n\t\t\tr_br01_64 <= 0;\n\t\t\tr_br2_8 <= 0;\n\t\t\tr_br2_16 <= 0;\n\t\t\tr_br2_32 <= 0;\t\t\n\t\t\tr_rt <= 0;\n\t\t\tr_b <= 0;\n\t\t\tr_t <= 0;\n\t\t\tr_l <= 0;\n\t\t\t\n\t\t\tr_t_tmp_cr <=0;\n\t\t\tr_l_tmp_cr <= 0;\n\t\t\tr_b_rt_tmp_cr <= 0;\n\t\t\tr_br01_tmp_cr <= 0;\n\t\t\tr_br01_4_cr <= 0;\n\t\t\tr_br01_8_cr <= 0;\n\t\t\tr_br01_16_cr <= 0;\n\t\t\tr_br01_32_cr <= 0;\n\t\t\tr_br2_8_cr <= 0;\n\t\t\tr_br2_16_cr <= 0;\n\t\t\tr_br2_32_cr <= 0;\t\n\t\t\tr_rt_cr <= 0;\n\t\t\tr_b_cr <= 0;\n\t\t\tr_t_cr <= 0;\n\t\t\tr_l_cr <= 0;\n\n\t\tend\n\t\telse if(~rst_n) begin\n\t\t\tr_tl_4 <=0;\n\t\t\tr_tl_4_cr <=0;\n\t\t\tr_t_tmp <=0;\n\t\t\tr_l_tmp <= 0;\n\t\t\tr_b_rt_tmp <= 0;\n\t\t\tr_br01_tmp <= 0;\n\t\t\tr_br01_4 <= 0;\n\t\t\tr_br01_8 <= 0;\n\t\t\tr_br01_16 <= 0;\n\t\t\tr_br01_32 <= 0;\n\t\t\tr_br01_64 <= 0;\n\t\t\tr_br2_8 <= 0;\n\t\t\tr_br2_16 <= 0;\n\t\t\tr_br2_32 <= 0;\n\t\t\tr_rt <= 0;\n\t\t\tr_b <= 0;\n\t\t\tr_t <= 0;\n\t\t\tr_l <= 0;\n\n\t\t\tr_t_tmp_cr <=0;\n\t\t\tr_l_tmp_cr <= 0;\n\t\t\tr_b_rt_tmp_cr <= 0;\n\t\t\tr_br01_tmp_cr <= 0;\n\t\t\tr_br01_4_cr <= 0;\n\t\t\tr_br01_8_cr <= 0;\n\t\t\tr_br01_16_cr <= 0;\n\t\t\tr_br01_32_cr <= 0;\n\t\t\tr_br2_8_cr <= 0;\n\t\t\tr_br2_16_cr <= 0;\n\t\t\tr_br2_32_cr <= 0;\t\n\t\t\tr_rt_cr <= 0;\n\t\t\tr_b_cr <= 0;\n\t\t\tr_t_cr <= 0;\n\t\t\tr_l_cr <= 0;\t\t\n\n\n\t\tend\n\t\telse \tbegin\n\t\t\n\t\t\n\t\t\n\t\tif (!bStop)\tbegin\n\t\t\tif(cIdx!=2 && isCalStage)\tbegin\n\t\t\t\tif( (Xplus1sf2 == nPB && X==Y && tuSize!=2) || (tuSize==2 && ((cIdx==0 && partIdx==0 ) || (cIdx==1))))\n\t\t\t\t\tr_tl_4 <= recon[3][3];\n\t\t\t\t\n\t\t\t\tif( Xplus1sf2 == nPB  && (yTb%(1<<nMaxCUlog2))==0 && Y==0)\t\t\n\t\t\t\t\tr_t_tmp <= recon[0][3];\t\n\t\t\t\tif( Yplus1sf2 == nPB  && isLtBorder && X==0)\t\t\t\n\t\t\t\t\tr_l_tmp <= recon[3][0];\t\n\t\t\t\tif(Yplus1sf2 == nPB && ((isBtBorder && posBtBorderIn4 == y4InMaxCb+(nPB>>2)) || (isRtBorder && posRtBorderIn4 == x4InMaxCb+(nPB>>2))) && Y==X )\n\t\t\t\t\tr_b_rt_tmp <= recon[3][3];\t\n\t\t\t\tif(Y==X && Yplus1sf2 == nPB)\n\t\t\t\t\tif(partIdx[1] == 0 )\n\t\t\t\t\t\tr_br01_tmp <= recon[3][3];\n\t\t\t\t\telse if (partIdx == 2)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd3: begin r_br2_8 <= recon[3][3];\tend\n\t\t\t\t\t\t\t3'd4: begin r_br2_16 <= recon[3][3];\tend\n\t\t\t\t\t\t\t3'd5: begin r_br2_32 <= recon[3][3];\tend\n\t\t\t\t\t\tendcase\n\t\t\t\t\telse if(partIdx==3) begin\n\t\t\t\t\t\tr_br01_tmp <= recon[3][3];\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin \n\t\t\t\t\t\t\t\tif(x_bar[2:0]==0 &&  y_bar[3:0] ==0 && y_bar[3] ==0 &&  x_bar[3] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_8 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[3:0]==0 &&  y_bar[4:0] ==0 && y_bar[4] ==0 &&  x_bar[4] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_16 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32 <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd3: begin \n\t\t\t\t\t\t\t\tif(x_bar[3:0]==0 &&  y_bar[4:0] ==0 && y_bar[4] ==0 &&  x_bar[4] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_16 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32 <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdefault: begin \n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32 <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tendcase\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\tif(yTb%(1<<nMaxCUlog2)==0)\t\t\t\t\t\t\n\t\t\t\t\tif((cLastBut3 && X==1) || tuSize==2 || (cLastBut2 && X==1 && tuSize==3))\n\t\t\t\t\t\tr_t<= recon[0][3];\n\t\t\t\t\telse if(tuSize>3 && cLastBut3)\n\t\t\t\t\t\tr_t <= r_t_tmp;\n\t\t\t\t\n\t\t\t\tif(cLastBut2 && isLtBorder)\t\t\n\t\t\t\t\tr_l <= ((tuSize>3 || (tuSize==3 && X==1) )? r_l_tmp: recon[3][0]);\n\t\t\t\tif(cLastBut3 && (isBtBorder && posBtBorderIn4 == y4InMaxCb+(nPB>>2)))\t\n\t\t\t\t\tr_b <= ((tuSize>2)?r_b_rt_tmp: recon[3][3]);\n\t\t\t\tif(cLastBut3 && (isRtBorder && posRtBorderIn4 == x4InMaxCb+(nPB>>2)))\t\n\t\t\t\t\tr_rt <= ((tuSize>2)?r_b_rt_tmp: recon[3][3]);\n\t\t\t\t\t\n\t\t\t\tif (cLastBut3)\tbegin\t\t\t\n\t\t\t\t\tif(partIdx[1] == 0)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin r_br01_4 <= recon[3][3];\t\tend\n\t\t\t\t\t\t\t3'd3: begin r_br01_8 <= r_br01_tmp ;\t\tend\t\t\t\n\t\t\t\t\t\t\t3'd4: begin r_br01_16 <= r_br01_tmp;\tend\n\t\t\t\t\t\t\tdefault: r_br01_32 <= r_br01_tmp;\n\t\t\t\t\t\tendcase\n\t\t\t\t\telse if (partIdx == 3)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[2:0]==0 &&  y_PB_bot[2:0] ==0 && y_PB_bot[3] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_8 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[3:0] ==0 &&  y_PB_bot[3:0] ==0 && y_PB_bot[4] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_16 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32 <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[5:0]==0 &&  y_PB_bot[5:0] ==0 && y_PB_bot[6] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_64 <= recon[3][3];\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd3: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[3:0] ==0 &&  y_PB_bot[3:0] ==0 && y_PB_bot[4] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_16 <= r_br01_tmp;\n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32 <= r_br01_tmp;\n\t\t\t\t\t\t\t\tif(x_PB_right[5:0]==0 &&  y_PB_bot[5:0] ==0 && y_PB_bot[6] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_64 <= r_br01_tmp;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd4: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32 <= r_br01_tmp;\n\t\t\t\t\t\t\t\tif(x_PB_right[5:0]==0 &&  y_PB_bot[5:0] ==0 && y_PB_bot[6] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_64 <= r_br01_tmp;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdefault: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[5:0]==0 &&  y_PB_bot[5:0] ==0 && y_PB_bot[6] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_64 <= r_br01_tmp;\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tendcase\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif(cIdx==2 && isCalStage)\tbegin\n\t\t\t\tif( (Xplus1sf2 == nPB && X==Y ) || tuSize==2)\n\t\t\t\t\tr_tl_4_cr <=recon[3][3];\n\t\t\t\tif( Xplus1sf2 == nPB  && (yTb%(1<<nMaxCUlog2))==0 && Y==0)\t\t\n\t\t\t\t\tr_t_tmp_cr <= recon[0][3];\t\n\t\t\t\tif( Yplus1sf2 == nPB  && isLtBorder && X==0)\t\t\t\n\t\t\t\t\tr_l_tmp_cr <= recon[3][0];\t\n\t\t\t\tif(Yplus1sf2 == nPB && ((isBtBorder && posBtBorderIn4 == y4InMaxCb+(nPB>>2)) || (isRtBorder && posRtBorderIn4 == x4InMaxCb+(nPB>>2))) && Y==X )\n\t\t\t\t\tr_b_rt_tmp_cr <= recon[3][3];\t\n\t\t\t\tif(Y==X && Yplus1sf2 == nPB)\n\t\t\t\t\tif(partIdx[1] == 0 )\n\t\t\t\t\t\tr_br01_tmp_cr <= recon[3][3];\n\t\t\t\t\telse if (partIdx == 2)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd3: begin r_br2_8_cr <= recon[3][3];\tend\n\t\t\t\t\t\t\t3'd4: begin r_br2_16_cr <= recon[3][3];\tend\n\t\t\t\t\t\t\t3'd5: begin r_br2_32_cr <= recon[3][3];\tend\n\t\t\t\t\t\tendcase\n\t\t\t\t\telse if(partIdx==3) begin\n\t\t\t\t\t\tr_br01_tmp_cr <= recon[3][3];\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin \n\t\t\t\t\t\t\t\tif(x_bar[2:0]==0 &&  y_bar[3:0] ==0 && y_bar[3] ==0 &&  x_bar[3] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_8_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[3:0]==0 &&  y_bar[4:0] ==0 && y_bar[4] ==0 &&  x_bar[4] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_16_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd3: begin \n\t\t\t\t\t\t\t\tif(x_bar[3:0]==0 &&  y_bar[4:0] ==0 && y_bar[4] ==0 &&  x_bar[4] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_16_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdefault: begin \n\t\t\t\t\t\t\t\tif(x_bar[4:0]==0 &&  y_bar[5:0] ==0 && y_bar[5] ==0 &&  x_bar[5] ==1) \n\t\t\t\t\t\t\t\t\tr_br2_32_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\tendcase\n\t\t\t\t\tend\n\t\t\t\tif(cLastBut2 && (yTb%(1<<nMaxCUlog2))==0)\t\t\t\t\t\t\n\t\t\t\t\tr_t_cr <= ((tuSize>3 || (tuSize==3 && X==0))? r_t_tmp_cr: recon[0][3]);\n\t\t\t\tif(cLastBut2 && isLtBorder)\n\t\t\t\t\tr_l_cr <= ((tuSize>3 || (tuSize==3 && X==1) )? r_l_tmp_cr: recon[3][0]);\n\t\t\t\tif(cLastBut2 && (isBtBorder && posBtBorderIn4 == y4InMaxCb+(nPB>>2)))\n\t\t\t\t\tr_b_cr <= ((tuSize>2)?r_b_rt_tmp_cr: recon[3][3]);\n\t\t\t\tif(cLastBut2 && (isRtBorder && posRtBorderIn4 == x4InMaxCb+(nPB>>2)))\n\t\t\t\t\tr_rt_cr <= ((tuSize>2)?r_b_rt_tmp_cr: recon[3][3]);\n\t\t\t\t\t\n\t\t\t\tif (cLastBut2)\tbegin\t\n\t\t\t\t\tif(partIdx[1] == 0)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin r_br01_4_cr <= recon[3][3];\t\tend\n\t\t\t\t\t\t\t3'd3: begin r_br01_8_cr <= r_br01_tmp_cr ;\t\tend\t\t\t\n\t\t\t\t\t\t\t3'd4: begin r_br01_16_cr <= r_br01_tmp_cr;\tend\n\t\t\t\t\t\t\tdefault: r_br01_32_cr <= r_br01_tmp_cr;\n\t\t\t\t\t\tendcase\n\t\t\t\t\telse if (partIdx == 3)\n\t\t\t\t\t\tcase (tuSize)\n\t\t\t\t\t\t\t3'd2: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[2:0]==0 &&  y_PB_bot[2:0] ==0 && y_PB_bot[3] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_8_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[3:0] ==0 &&  y_PB_bot[3:0] ==0 && y_PB_bot[4] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_16_cr <= recon[3][3];\n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32_cr <= recon[3][3];\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t3'd3: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[3:0] ==0 &&  y_PB_bot[3:0] ==0 && y_PB_bot[4] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_16_cr <= r_br01_tmp_cr;\n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32_cr <= r_br01_tmp_cr;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tdefault: begin \n\t\t\t\t\t\t\t\tif(x_PB_right[4:0]==0 &&  y_PB_bot[4:0] ==0 && y_PB_bot[5] ==1 ) \n\t\t\t\t\t\t\t\t\tr_br01_32_cr <= r_br01_tmp_cr;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tendcase\n\t\t\t\tend\n\t\t\tend\n\t\tend\t\n\tend\t\nend\n\t\t\n\n\t\n\t\n\t\t\n\t\t\t\n\nendmodule</code>"
                },
                {
                    "type": "text",
                    "text": "Based on the provided original Verilog code, its comments and above answers, generate a detailed specification for the module. Include the following information in a single, concise paragraph:\n1. The name of the module.\n2. A simple explanation of the module's functionality.\n3. The input and output ports, along with a brief explanation of each.\n4. The internal signals used within the module, with a brief explanation of their purpose.\n5. An overview of the different blocks or sections in the code and their functions.\nEnsure that the specification is clear and accurately reflects the details from the code and comments.\nYour answer should be structured and well-organized, providing a comprehensive and detailed overview of the module's design and operation.\nPlease provide your answer in the following format:\nModule name: [module name]. Module specification: [module specification]."
                },
                {
                    "type": "text",
                    "text": "Module name: intra_bypass. Module specification: The intra_bypass module is part of an intra prediction system for video coding, specifically handling bypass operations. It processes various input signals related to coding unit (CU) and transform unit (TU) sizes, positions, and borders to generate bypass samples for different prediction modes and sizes, handling both luma and chroma components. The module has numerous input ports, including clock and reset signals, control flags, size and position parameters, border information, and various flags related to the intra prediction process. Output ports provide bypass samples for different prediction modes and components, positions of bypass samples, and bottom and right samples. Internal signals include position indicators, flags, storage for reconstructed and reference samples, and various control signals. The module is structured with several always blocks and generate statements, handling different aspects of the bypass process such as sample storage, reference sample selection, and bypass sample generation for various block sizes and positions. It includes"
                }
            ]
        }
    ]
}