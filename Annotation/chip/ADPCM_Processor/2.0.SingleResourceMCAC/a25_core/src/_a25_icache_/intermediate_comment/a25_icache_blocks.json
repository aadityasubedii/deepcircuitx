{
    "line_num": [
        [
            825,
            830
        ],
        [
            807,
            820
        ],
        [
            805,
            805
        ],
        [
            791,
            802
        ],
        [
            789,
            789
        ],
        [
            776,
            786
        ],
        [
            762,
            771
        ],
        [
            759,
            761
        ],
        [
            745,
            756
        ],
        [
            739,
            743
        ],
        [
            683,
            726
        ],
        [
            678,
            682
        ],
        [
            649,
            676
        ],
        [
            645,
            648
        ],
        [
            619,
            642
        ],
        [
            614,
            618
        ],
        [
            592,
            612
        ],
        [
            587,
            591
        ],
        [
            542,
            580
        ],
        [
            519,
            534
        ],
        [
            503,
            514
        ],
        [
            501,
            502
        ],
        [
            488,
            498
        ],
        [
            474,
            483
        ],
        [
            471,
            473
        ],
        [
            461,
            463
        ],
        [
            458,
            458
        ],
        [
            455,
            455
        ],
        [
            394,
            465
        ],
        [
            393,
            393
        ],
        [
            386,
            387
        ],
        [
            383,
            384
        ],
        [
            381,
            381
        ],
        [
            379,
            379
        ],
        [
            371,
            376
        ],
        [
            367,
            367
        ],
        [
            363,
            364
        ],
        [
            359,
            360
        ],
        [
            354,
            356
        ],
        [
            351,
            352
        ],
        [
            339,
            349
        ],
        [
            336,
            336
        ],
        [
            328,
            334
        ],
        [
            318,
            326
        ],
        [
            233,
            313
        ],
        [
            226,
            226
        ],
        [
            208,
            224
        ]
    ],
    "blocks": [
        "    initial\n        begin\n        `TB_ERROR_MESSAGE\n        $display(\"Unsupported number of ways %0d\", WAYS);\n        $display(\"Set A25_ICACHE_WAYS in a25_config_defines.v to either 2,3,4 or 8\");\n        end",
        "\talways @( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\n\t\tend else begin\n\t\t  if ( (data_hit_way[0] + data_hit_way[1] + \n\t\t        data_hit_way[2] + data_hit_way[3] +\n\t\t        data_hit_way[4] + data_hit_way[5] +\n\t\t        data_hit_way[6] + data_hit_way[7] ) > 4'd1 )\n\t\t      begin\n\t\t      `TB_ERROR_MESSAGE\n\t\t      $display(\"Hit in more than one cache ways!\");                                                  \n\t\t      end\n\t\tend\n\tend",
        "else if ( WAYS == 8 )  begin : check_hit_8ways",
        "\talways @( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\n\t\tend else begin\n\t\t  if ( (data_hit_way[0] + data_hit_way[1] + \n\t\t        data_hit_way[2] + data_hit_way[3] ) > 4'd1 )\n\t\t      begin\n\t\t      `TB_ERROR_MESSAGE\n\t\t      $display(\"Hit in more than one cache ways!\");                                                  \n\t\t      end\n\t\tend\n\tend",
        "else if ( WAYS == 4 ) begin : check_hit_4ways",
        "\talways @( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\n\t\tend else begin\n\t\t  if ( (data_hit_way[0] + data_hit_way[1] + data_hit_way[2] ) > 4'd1 )\n\t\t      begin\n\t\t      `TB_ERROR_MESSAGE\n\t\t      $display(\"Hit in more than one cache ways!\");                                                  \n\t\t      end\n\t\tend\n\tend",
        "\talways @( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\n\t\tend else begin\n\t\t\tif ( (data_hit_way[0] + data_hit_way[1] ) > 4'd1 ) begin\n\t\t\t\t`TB_ERROR_MESSAGE\n\t\t\t\t$display(\"Hit in more than one cache ways!\");                                                  \n\t\t\tend\n\t\tend\n\tend",
        "generate\nif ( WAYS == 2 ) begin : check_hit_2ways\n",
        "assign xC_STATE    = c_state == CS_INIT            ? \"CS_INIT\"          :\n                     c_state == CS_IDLE            ? \"CS_IDLE\"          :\n                     c_state == CS_FILL0           ? \"CS_FILL0\"         :\n                     c_state == CS_FILL1           ? \"CS_FILL1\"         :\n                     c_state == CS_FILL2           ? \"CS_FILL2\"         :\n                     c_state == CS_FILL3           ? \"CS_FILL3\"         :\n                     c_state == CS_FILL4           ? \"CS_FILL4\"         :\n                     c_state == CS_FILL_COMPLETE   ? \"CS_FILL_COMPLETE\" :\n                     c_state == CS_EX_DELETE       ? \"CS_EX_DELETE\"     :\n                     c_state == CS_TURN_AROUND     ? \"CS_TURN_AROUND\"   :\n                     c_state == CS_WRITE_HIT1      ? \"CS_WRITE_HIT1\"    :\n                                                     \"UNKNOWN\"          ;",
        "assign xSOURCE_SEL = source_sel[C_CORE]            ? \"C_CORE\"           :\n                     source_sel[C_INIT]            ? \"C_INIT\"           :\n                     source_sel[C_FILL]            ? \"C_FILL\"           :\n                     source_sel[C_INVA]            ? \"C_INVA\"           :\n                                                     \"UNKNON\"           ;",
        "    function [WAYS-1:0] pick_way;\n    input [WAYS-1:0] valid_bits;\n    input [3:0]      random_num;\n    begin\n        if (      valid_bits[0] == 1'd0 )\n            \n            pick_way     = 8'b00000001;\n        else if ( valid_bits[1] == 1'd0 )\n            \n            pick_way     = 8'b00000010;\n        else if ( valid_bits[2] == 1'd0 )\n            \n            pick_way     = 8'b00000100;\n        else if ( valid_bits[3] == 1'd0 )\n            \n            pick_way     = 8'b00001000;\n        else if ( valid_bits[4] == 1'd0 )\n            \n            pick_way     = 8'b00010000;\n        else if ( valid_bits[5] == 1'd0 )\n            \n            pick_way     = 8'b00100000;\n        else if ( valid_bits[6] == 1'd0 )\n            \n            pick_way     = 8'b01000000;\n        else if ( valid_bits[7] == 1'd0 )\n            \n            pick_way     = 8'b10000000;\n        else\n            begin\n            \n            case (random_num[3:1])\n                3'd0:       pick_way = 8'b00010000;\n                3'd1:       pick_way = 8'b00100000;\n                3'd2:       pick_way = 8'b01000000;\n                3'd3:       pick_way = 8'b10000000;\n                3'd4:       pick_way = 8'b00000001;\n                3'd5:       pick_way = 8'b00000010;\n                3'd6:       pick_way = 8'b00000100;\n                default:    pick_way = 8'b00001000;\n            endcase\n            end\n    end\n    endfunction",
        "end\nelse begin : pick_way_8ways\n\n    assign next_way = pick_way ( valid_bits_r, random_num );\n",
        "    function [WAYS-1:0] pick_way;\n    input [WAYS-1:0] valid_bits;\n    input [3:0]      random_num;\n    begin\n        if (      valid_bits[0] == 1'd0 )\n            \n            pick_way     = 4'b0001;\n        else if ( valid_bits[1] == 1'd0 )\n            \n            pick_way     = 4'b0010;\n        else if ( valid_bits[2] == 1'd0 )\n            \n            pick_way     = 4'b0100;\n        else if ( valid_bits[3] == 1'd0 )\n            \n            pick_way     = 4'b1000;\n        else\n            begin\n            \n            case (random_num[3:1])\n                3'd0, 3'd1: pick_way = 4'b0100;\n                3'd2, 3'd3: pick_way = 4'b1000;\n                3'd4, 3'd5: pick_way = 4'b0001;\n                default:    pick_way = 4'b0010;\n            endcase\n            end\n    end\n    endfunction",
        "else if ( WAYS == 4 ) begin : pick_way_4ways\n\n    assign next_way = pick_way ( valid_bits_r, random_num );\n",
        "    function [WAYS-1:0] pick_way;\n    input [WAYS-1:0] valid_bits;\n    input [3:0]      random_num;\n    begin\n        if (      valid_bits[0] == 1'd0 )\n            \n            pick_way     = 3'b001;\n        else if ( valid_bits[1] == 1'd0 )\n            \n            pick_way     = 3'b010;\n        else if ( valid_bits[2] == 1'd0 )\n            \n            pick_way     = 3'b100;\n        else\n            begin\n            \n            case (random_num[3:1])\n                3'd0, 3'd1, 3'd2: pick_way = 3'b010;\n                3'd2, 3'd3, 3'd4: pick_way = 3'b100;\n                default:          pick_way = 3'b001;\n            endcase\n            end\n    end\n    endfunction",
        "end\nelse if ( WAYS == 3 ) begin : pick_way_3ways\n\n    assign next_way = pick_way ( valid_bits_r, random_num );\n",
        "    function [WAYS-1:0] pick_way;\n    input [WAYS-1:0] valid_bits;\n    input [3:0]      random_num;\n    begin\n        if (      valid_bits[0] == 1'd0 )\n            \n            pick_way     = 2'b01;\n        else if ( valid_bits[1] == 1'd0 )\n            \n            pick_way     = 2'b10;\n        else\n            begin\n            \n            case (random_num[3:1])\n                3'd0, 3'd3,\n                3'd5, 3'd6: pick_way = 2'b10;\n                default:    pick_way = 2'b01;\n            endcase\n            end\n    end\n    endfunction",
        "generate\nif ( WAYS == 2 ) begin : pick_way_2ways\n\n    assign next_way = pick_way ( valid_bits_r, random_num );\n",
        "generate\nif ( WAYS == 2 ) begin : read_data_2ways\n\n    assign hit_rdata    = data_hit_way[0] ? data_rdata_way[0] :\n                          data_hit_way[1] ? data_rdata_way[1] :\n                                     {CACHE_LINE_WIDTH{1'd1}} ;  \n                           \nend\nelse if ( WAYS == 3 ) begin : read_data_3ways\n\n    assign hit_rdata    = data_hit_way[0] ? data_rdata_way[0] :\n                          data_hit_way[1] ? data_rdata_way[1] :\n                          data_hit_way[2] ? data_rdata_way[2] :\n                                     {CACHE_LINE_WIDTH{1'd1}} ;  \n                           \nend\nelse if ( WAYS == 4 ) begin : read_data_4ways\n\n    assign hit_rdata    = data_hit_way[0] ? data_rdata_way[0] :\n                          data_hit_way[1] ? data_rdata_way[1] :\n                          data_hit_way[2] ? data_rdata_way[2] :\n                          data_hit_way[3] ? data_rdata_way[3] :\n                                     {CACHE_LINE_WIDTH{1'd1}} ;  \n                           \nend\nelse begin : read_data_8ways\n\n    assign hit_rdata    = data_hit_way[0] ? data_rdata_way[0] :\n                          data_hit_way[1] ? data_rdata_way[1] :\n                          data_hit_way[2] ? data_rdata_way[2] :\n                          data_hit_way[3] ? data_rdata_way[3] :\n                          data_hit_way[4] ? data_rdata_way[4] :\n                          data_hit_way[5] ? data_rdata_way[5] :\n                          data_hit_way[6] ? data_rdata_way[6] :\n                          data_hit_way[7] ? data_rdata_way[7] :\n                                     {CACHE_LINE_WIDTH{1'd1}} ;  \n                           \nend\nendgenerate",
        "    always @ ( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\t\t\tvalid_bits_r <= 'd0;\n\t\tend else begin\n\t\t\tif ( c_state == CS_IDLE ) begin\n\t\t\t\tvalid_bits_r <= {tag_rdata_way[7][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[6][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[5][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[4][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[3][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[2][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[1][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[0][TAG_WIDTH-1]};\n\t\t\tend\n\t\tend\n\tend            ",
        "\talways @ (posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\t\t\tvalid_bits_r <= 'd0;\n\t\tend else begin\n\t\t\tif ( c_state == CS_IDLE ) begin\n\t\t\t\tvalid_bits_r <= {tag_rdata_way[3][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[2][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[1][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[0][TAG_WIDTH-1]};\n\t\t\tend\n\t\tend\n\tend",
        "else if ( WAYS == 4 ) begin : valid_bits_4ways\n",
        "\talways @ ( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\t\t\tvalid_bits_r <= 'd0;\n\t\tend else begin\n\t\t\tif ( c_state == CS_IDLE ) begin\n\t\t\t\tvalid_bits_r <= {tag_rdata_way[2][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[1][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[0][TAG_WIDTH-1]};\n\t\t\tend\n\t\tend\n\tend",
        "\talways @ ( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\t\t\tvalid_bits_r <= 'd0;\n\t\tend else begin\n\t\t\tif ( c_state == CS_IDLE ) begin\n\t\t\t      valid_bits_r <= {tag_rdata_way[1][TAG_WIDTH-1], \n\t\t                       tag_rdata_way[0][TAG_WIDTH-1]};\n\t\t\tend\n\t\tend\n\tend",
        "generate\nif ( WAYS == 2 ) begin : valid_bits_2ways\n",
        "        assign data_hit_way[i]     = tag_rdata_way[i][TAG_WIDTH-1] &&                                                  \n                                     tag_rdata_way[i][TAG_ADDR_WIDTH-1:0] == i_address[31:TAG_ADDR32_LSB] &&  \n                                     c_state == CS_IDLE;                                                               ",
        "        assign data_wenable_way[i] = ( source_sel[C_FILL] || read_miss_fill ) && select_way[i];",
        "        assign tag_wenable_way[i]  = tag_wenable && ( select_way[i] || source_sel[C_INIT] );",
        "generate\n\tfor ( i=0; i<WAYS;i=i+1 ) begin : rams\n\n`ifndef verilog\n\tgeneric_sram_line_en_256x21 \n\tu_tag (\n\t\t.A(tag_address),\n\t\t.CE(clk),\n\t\t.WEB(~tag_wenable_way[i]),\n\t\t.OEB(1'b0),\n\t\t.CSB(1'b0),\n\t\t.I(tag_wdata),\n\t\t.O(tag_rdata_way[i])\n\t);\n\t\n\tfor (n=0; n<16; n=n+1) begin : mem_gen\n\t\tgeneric_sram_byte_en_256x8\n\t\tu_mem (\n\t\t\t.A(data_address),\n\t\t\t.CE(clk),\n\t\t\t.WEB(~data_wenable_way[i]),\n\t\t\t.OEB(1'b0),\n\t\t\t.CSB(1'b0),\n\t\t\t.I(i_wb_read_data[8*(n+1)-1:8*n]),\n\t\t\t.O(data_rdata_way[i][8*(n+1)-1:8*n])\t\n\t\t);\n\tend\n`else\n\tgeneric_sram_line_en #(\n\t\t.DATA_WIDTH          ( TAG_WIDTH          ),\n\t\t.INITIALIZE_TO_ZERO  ( 1                  ),\n\t\t.ADDRESS_WIDTH       ( CACHE_ADDR_WIDTH   ))\n\tu_tag (\n\t\t.clk                 ( clk                ),\n\t\t.reset               ( reset              ),\n\t\t.scan_enable         ( scan_enable        ),\n\t\t.test_mode           ( test_mode          ),\n\t\t.i_write_data        ( tag_wdata          ),\n\t\t.i_write_enable      ( tag_wenable_way[i] ),\n\t\t.i_address           ( tag_address        ),\n\t\t.o_read_data         ( tag_rdata_way[i]   )\t\n\t);\n\n\tgeneric_sram_byte_en #(\n\t\t.DATA_WIDTH          ( CACHE_LINE_WIDTH           ),\n\t\t.ADDRESS_WIDTH       ( CACHE_ADDR_WIDTH           ),\n\t\t.INITIALIZE_TO_ZERO  ( 2                          ))\n\tu_data (\n\t\t.clk                 ( clk                        ),\n\t\t.reset               ( reset                      ),\n\t\t.scan_enable         ( scan_enable                ),\n\t\t.test_mode           ( test_mode                  ),\n\t\t.i_write_data        ( i_wb_read_data             ),\n\t\t.i_write_enable      ( data_wenable_way[i]        ),\n\t\t.i_address           ( data_address               ),\n\t\t.i_byte_enable       ( {CACHE_LINE_WIDTH/8{1'd1}} ),\n\t\t.o_read_data         ( data_rdata_way[i]          )\n\t);                                                     \n`endif\n\n        \n        assign tag_wenable_way[i]  = tag_wenable && ( select_way[i] || source_sel[C_INIT] );\n\n        \n        assign data_wenable_way[i] = ( source_sel[C_FILL] || read_miss_fill ) && select_way[i];\n\n        \n        assign data_hit_way[i]     = tag_rdata_way[i][TAG_WIDTH-1] &&                                                  \n                                     tag_rdata_way[i][TAG_ADDR_WIDTH-1:0] == i_address[31:TAG_ADDR32_LSB] &&  \n                                     c_state == CS_IDLE;                                                               \n    end                                                         \nendgenerate",
        "genvar n;",
        "\nassign cache_busy_stall = (c_state == CS_TURN_AROUND  && enable && !read_buf_hit) || c_state == CS_INIT;",
        "assign read_miss        = enable && !idle_hit && !invalid_read;\n",
        "assign idle_hit         = |data_hit_way;",
        "assign enable           = i_select && i_cache_enable;",
        "assign tag_wenable      = read_miss_fill     ? 1'd1  :\n                          source_sel[C_INVA] ? 1'd1  :\n                          source_sel[C_FILL] ? 1'd1  :\n                          source_sel[C_INIT] ? 1'd1  :\n                          source_sel[C_CORE] ? 1'd0  :\n                                               1'd0  ;",
        "assign read_miss_fill   = c_state == CS_FILL3 && i_wb_ready;",
        "assign tag_wdata        = read_miss_fill     ? {1'd1, miss_address[31:TAG_ADDR32_LSB]} :\n                                               {TAG_WIDTH{1'd0}}                       ;",
        "assign data_address     = read_miss_fill     ? miss_address[CACHE_ADDR32_MSB:CACHE_ADDR32_LSB] : \n                                               address                                         ;",
        "assign tag_address      = read_miss_fill     ? miss_address      [CACHE_ADDR32_MSB:CACHE_ADDR32_LSB] :\n                          source_sel[C_INIT] ? init_count[CACHE_ADDR_WIDTH-1:0]                      :\n                                               address                                               ;",
        "assign fill_state       = c_state == CS_FILL3;\nassign wb_hit           = i_address == wb_address && i_wb_ready && fill_state;",
        "always @(posedge reset, posedge clk) begin\n\tif (reset) begin\n\t\twb_address <= 'd0;\n\tend else begin\n\t\tif ( o_wb_req ) begin\n\t\t\twb_address <= i_address;\n\t\tend else if ( i_wb_ready && fill_state ) begin\n\t\t\twb_address <= {wb_address[31:4], wb_address[3:2] + 1'd1, 2'd0};\n\t\tend\n\tend\nend",
        "assign invalid_read = address_r != i_address;",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\taddress_r <= 'd0;\n\tend else begin\n\t\taddress_r <= address_c;\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tmiss_address <= 'd0;\n\tend else begin\n\t\tif ( c_state == CS_IDLE ) begin\n\t\t\tmiss_address <= i_address;\n\t\tend\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tc_state    <= CS_IDLE;\n\t\tsource_sel <= 1'd1 << C_CORE;\n\t\tinit_count <= 'd0;\n\t\tselect_way <= 'd0;\n\t\trandom_num <= 4'hf;\n\tend else begin\n\t    if ( i_cache_flush )\n\t\t  begin\n\t\t  c_state     <= CS_INIT;\n\t\t  source_sel  <= 1'd1 << C_INIT;\n\t\t  init_count  <= 'd0;\n\t\t  `ifdef A25_CACHE_DEBUG  \n\t\t  `TB_DEBUG_MESSAGE  \n\t\t  $display(\"Cache Flush\");\n\t\t  `endif            \n\t\t  end\n\t    else    \n\t\t  case ( c_state )\n\t\t      CS_INIT :\n\t\t          if ( init_count < CACHE_LINES [CACHE_ADDR_WIDTH:0] )\n\t\t              begin\n\t\t              init_count  <= init_count + 1'd1;\n\t\t              source_sel  <= 1'd1 << C_INIT;\n\t\t              end\n\t\t          else\n\t\t              begin\n\t\t              source_sel  <= 1'd1 << C_CORE;\n\t\t              c_state     <= CS_TURN_AROUND;\n\t\t              end \n\t\t                 \n\t\t       CS_IDLE :\n\t\t          begin\n\t\t          source_sel  <= 1'd1 << C_CORE;\n\t\t          \n\t\t          if ( read_miss ) \n\t\t              c_state <= CS_FILL3; \n\t\t         end\n\t\t             \n\t\t          \n\t\t       CS_FILL3 :\n\t\t          begin\n\t\t          \n\t\t          \n\t\t          \n\t\t          select_way  <= next_way; \n\t\t          random_num  <= {random_num[2], random_num[1], random_num[0], \n\t\t                           random_num[3]^random_num[2]};\n\t\t                           \n\t\t          \n\t\t          \n\t\t          if ( i_wb_ready ) \n\t\t              begin\n\t\t              c_state     <= CS_FILL_COMPLETE;\n\t\t              end\n\t\t          end\n\t\t          \n\n\t\t       \n\t\t       CS_FILL_COMPLETE : \n\t\t          begin\n\t\t          \n\t\t          \n\t\t          \n\t\t          \n\t\t          source_sel  <= 1'd1 << C_CORE;              \n\t\t          c_state     <= CS_TURN_AROUND;    \n\t\t          end                                 \n\t\t                                                  \n\n\t\t       \n\t\t       \n\t\t       CS_TURN_AROUND : \n\t\t          begin\n\t\t          c_state     <= CS_IDLE;\n\t\t          end\n\t\t          \n\t\t  endcase                       \n\tend\nend",
        "assign read_buf_hit     = read_buf_valid_r && i_address[31:4] == read_buf_addr_r[31:4];",
        "always@(posedge reset, posedge clk) begin\n\tif (reset) begin\n\t\tread_buf_data_r <= 'd0;\n\t\tread_buf_addr_r <= 'd0;\n\t\tread_buf_valid_r <= 'd0;\n\tend else begin\n\t\tif ( i_cache_flush ) begin\n\t\t\tread_buf_valid_r <= 1'd0;\n\t\tend else if (i_wb_ready && c_state == CS_FILL3) begin\n\t\t\tread_buf_data_r  <= i_wb_read_data;\n\t\t\tread_buf_addr_r  <= miss_address;\n\t\t\tread_buf_valid_r <= 1'd1;\n\t\tend else if (o_wb_req) begin\n\t\t\tread_buf_valid_r <= 1'd0;\n\t\tend\n\tend\nend"
    ]
}