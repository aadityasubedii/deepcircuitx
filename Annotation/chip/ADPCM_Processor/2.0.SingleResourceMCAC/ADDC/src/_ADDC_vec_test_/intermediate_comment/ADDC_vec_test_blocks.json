{
    "line_num": [
        [
            279,
            281
        ],
        [
            241,
            261
        ],
        [
            226,
            265
        ],
        [
            214,
            222
        ],
        [
            208,
            270
        ],
        [
            204,
            273
        ],
        [
            201,
            276
        ],
        [
            200,
            277
        ],
        [
            94,
            283
        ],
        [
            92,
            92
        ],
        [
            74,
            90
        ]
    ],
    "blocks": [
        "  #10 $display(\"%t TEST COMPLETE\", $time);\n  \n  $finish;",
        "\t\tif (PK0 !== PK0s[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h PK0 = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, PK0, PK0s[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                if (SIGPK !== SIGPKs[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h SIGPK = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, SIGPK, SIGPKs[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end ",
        "              @(posedge clk);\n    \n              for (j=0; j<loop; j=j+1) begin\n                \n                DQ = DQs[j];\n                SEZ = SEZs[j];\n\n\t        @(negedge clk);\n\t\t\n\t\t`ifdef VERBOSE\n                \t$display(\"DQ = %h\", DQ);\n                \t$display(\"SEZ = %h\", SEZ);\n                \t$display(\"PK0 = %h\", PK0);\n\t        \t$display(\"SIGPK = %h\", SIGPK);\n\t\t`endif\n\t\tif (PK0 !== PK0s[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h PK0 = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, PK0, PK0s[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                if (SIGPK !== SIGPKs[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h SIGPK = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, SIGPK, SIGPKs[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                @(posedge clk);\n                \n              end ",
        "              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, DQs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sez.t\"}, SEZs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs);",
        "          if(!(model==0 && type==1)) begin \n          \n            for (law=2; law<4; law=law+1) begin\n            \n\t      $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, DQs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sez.t\"}, SEZs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs);\n              \n              loop = vectorSizes[0];\n              \n              @(posedge clk);\n    \n              for (j=0; j<loop; j=j+1) begin\n                \n                DQ = DQs[j];\n                SEZ = SEZs[j];\n\n\t        @(negedge clk);\n\t\t\n\t\t`ifdef VERBOSE\n                \t$display(\"DQ = %h\", DQ);\n                \t$display(\"SEZ = %h\", SEZ);\n                \t$display(\"PK0 = %h\", PK0);\n\t        \t$display(\"SIGPK = %h\", SIGPK);\n\t\t`endif\n\t\tif (PK0 !== PK0s[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h PK0 = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, PK0, PK0s[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                if (SIGPK !== SIGPKs[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h SIGPK = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, SIGPK, SIGPKs[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                @(posedge clk);\n                \n              end \n              \n            end \n            \n          end \n          ",
        "      for (operation=0; operation<2; operation = operation+1) begin\n      \n        for (type=0; type<2; type=type+1) begin\n        \n          if(!(model==0 && type==1)) begin \n          \n            for (law=2; law<4; law=law+1) begin\n            \n\t      $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, DQs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sez.t\"}, SEZs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs);\n              \n              loop = vectorSizes[0];\n              \n              @(posedge clk);\n    \n              for (j=0; j<loop; j=j+1) begin\n                \n                DQ = DQs[j];\n                SEZ = SEZs[j];\n\n\t        @(negedge clk);\n\t\t\n\t\t`ifdef VERBOSE\n                \t$display(\"DQ = %h\", DQ);\n                \t$display(\"SEZ = %h\", SEZ);\n                \t$display(\"PK0 = %h\", PK0);\n\t        \t$display(\"SIGPK = %h\", SIGPK);\n\t\t`endif\n\t\tif (PK0 !== PK0s[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h PK0 = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, PK0, PK0s[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                if (SIGPK !== SIGPKs[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h SIGPK = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, SIGPK, SIGPKs[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                @(posedge clk);\n                \n              end \n              \n            end \n            \n          end \n          \n        end \n        \n      end ",
        "  \n    for (rate=0; rate<4; rate=rate+1) begin\n    \n      for (operation=0; operation<2; operation = operation+1) begin\n      \n        for (type=0; type<2; type=type+1) begin\n        \n          if(!(model==0 && type==1)) begin \n          \n            for (law=2; law<4; law=law+1) begin\n            \n\t      $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, DQs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sez.t\"}, SEZs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs);\n              \n              loop = vectorSizes[0];\n              \n              @(posedge clk);\n    \n              for (j=0; j<loop; j=j+1) begin\n                \n                DQ = DQs[j];\n                SEZ = SEZs[j];\n\n\t        @(negedge clk);\n\t\t\n\t\t`ifdef VERBOSE\n                \t$display(\"DQ = %h\", DQ);\n                \t$display(\"SEZ = %h\", SEZ);\n                \t$display(\"PK0 = %h\", PK0);\n\t        \t$display(\"SIGPK = %h\", SIGPK);\n\t\t`endif\n\t\tif (PK0 !== PK0s[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h PK0 = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, PK0, PK0s[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                if (SIGPK !== SIGPKs[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h SIGPK = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, SIGPK, SIGPKs[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                @(posedge clk);\n                \n              end \n              \n            end \n            \n          end \n          \n        end \n        \n      end \n      \n    end \n    ",
        "  for (model=0; model<2; model=model+1) begin\n  \n    for (rate=0; rate<4; rate=rate+1) begin\n    \n      for (operation=0; operation<2; operation = operation+1) begin\n      \n        for (type=0; type<2; type=type+1) begin\n        \n          if(!(model==0 && type==1)) begin \n          \n            for (law=2; law<4; law=law+1) begin\n            \n\t      $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, DQs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sez.t\"}, SEZs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs);\n              \n              loop = vectorSizes[0];\n              \n              @(posedge clk);\n    \n              for (j=0; j<loop; j=j+1) begin\n                \n                DQ = DQs[j];\n                SEZ = SEZs[j];\n\n\t        @(negedge clk);\n\t\t\n\t\t`ifdef VERBOSE\n                \t$display(\"DQ = %h\", DQ);\n                \t$display(\"SEZ = %h\", SEZ);\n                \t$display(\"PK0 = %h\", PK0);\n\t        \t$display(\"SIGPK = %h\", SIGPK);\n\t\t`endif\n\t\tif (PK0 !== PK0s[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h PK0 = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, PK0, PK0s[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                if (SIGPK !== SIGPKs[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h SIGPK = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, SIGPK, SIGPKs[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                @(posedge clk);\n                \n              end \n              \n            end \n            \n          end \n          \n        end \n        \n      end \n      \n    end \n    \n  end ",
        "initial begin\n  $timeformat(-9,2,\"ns\", 16);\n  \n  `ifdef SDFSCAN\n  \t$sdf_annotate(\"sdf/ADDC_tsmc18_scan.sdf\", test.top);\n  `endif\n\n  clk         = 1'b0;\n  reset       = 1'b0;\n  scan_in0    = 1'b0;\n  scan_in1    = 1'b0;\n  scan_in2    = 1'b0;\n  scan_in3    = 1'b0;\n  scan_in4    = 1'b0;\n  scan_enable = 1'b0;\n  test_mode   = 1'b0;\n  PK0_ERROR   = 0;\n  SIGPK_ERROR = 0;\n\n\n  for (model=0; model<2; model=model+1) begin\n  \n    for (rate=0; rate<4; rate=rate+1) begin\n    \n      for (operation=0; operation<3; operation = operation+1) begin\n      \n        if(!(model==0 && operation==2)) begin \n        \n          for (type=0; type<2; type=type+1) begin\n          \n            for (law=0; law<2; law=law+1) begin\n            \n              $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, DQs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sez.t\"}, SEZs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs);\n              \n              loop = vectorSizes[0];\n\n              @(posedge clk);\n              \n              for (j=0; j<loop; j=j+1) begin\n              \n\n\n                DQ = DQs[j];\n                SEZ = SEZs[j];\n\n\n\t        @(negedge clk);\n\t\t\n\t\t`ifdef VERBOSE\n                \t$display(\"DQ = %h\", DQ);\n                \t$display(\"SEZ = %h\", SEZ);\n                \t$display(\"PK0 = %h\", PK0);\n\t        \t$display(\"SIGPK = %h\", SIGPK);\n\t\t`endif\n\t\t\n                if (PK0 !== PK0s[j]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h PK0 = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, PK0, PK0s[j]); \n                  PK0_ERROR = ~PK0_ERROR;\n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\n                end \n                \n                if (SIGPK !== SIGPKs[j]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h SIGPK = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, SIGPK, SIGPKs[j]); \n                  SIGPK_ERROR = ~SIGPK_ERROR;\n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n      \t\t@(posedge clk);\n                \n              end \n              \n            end \n            \n          end \n          \n        end \n        \n      end \n      \n    end \n    \n  end \n\n  \n  for (model=0; model<2; model=model+1) begin\n  \n    for (rate=0; rate<4; rate=rate+1) begin\n    \n      for (operation=0; operation<2; operation = operation+1) begin\n      \n        for (type=0; type<2; type=type+1) begin\n        \n          if(!(model==0 && type==1)) begin \n          \n            for (law=2; law<4; law=law+1) begin\n            \n\t      $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, DQs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sez.t\"}, SEZs);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs);\n              \n              loop = vectorSizes[0];\n              \n              @(posedge clk);\n    \n              for (j=0; j<loop; j=j+1) begin\n                \n                DQ = DQs[j];\n                SEZ = SEZs[j];\n\n\t        @(negedge clk);\n\t\t\n\t\t`ifdef VERBOSE\n                \t$display(\"DQ = %h\", DQ);\n                \t$display(\"SEZ = %h\", SEZ);\n                \t$display(\"PK0 = %h\", PK0);\n\t        \t$display(\"SIGPK = %h\", SIGPK);\n\t\t`endif\n\t\tif (PK0 !== PK0s[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h PK0 = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, PK0, PK0s[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                if (SIGPK !== SIGPKs[j][0]) begin\n\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, DQ = %h SEZ = %h SIGPK = %h instead of %h\",\n                  \t$time, j, models[model], rates[rate], laws[law], types[type], operations[operation], DQ, SEZ, SIGPK, SIGPKs[j]); \n\t\t\n\t\t`ifdef ERRORSTOP\n\t\t\t$stop;\n\t\t`endif\n\t\t\t\n                end \n                \n                @(posedge clk);\n                \n              end \n              \n            end \n            \n          end \n          \n        end \n        \n      end \n      \n    end \n    \n  end \n\n  #10 $display(\"%t TEST COMPLETE\", $time);\n  \n  $finish;\n  \nend ",
        "always #(`CLK_PERIOD/2) clk = ~clk;",
        "initial begin\n  rates[0]      = \"40\";\n  rates[1]      = \"32\";\n  rates[2]      = \"24\";\n  rates[3]      = \"16\";\n  laws[0]       = \"AA\";\n  laws[1]       = \"MM\";\n  laws[2]       = \"AM\";\n  laws[3]       = \"MA\";\n  operations[0] = \"nrm\";\n  operations[1] = \"ovr\";\n  operations[2] = \"i\";\n  types[0]      = \"reset\";\n  types[1]      = \"homing\";\n  models[0]     = \"enc\";\n  models[1]     = \"dec\";\nend"
    ]
}