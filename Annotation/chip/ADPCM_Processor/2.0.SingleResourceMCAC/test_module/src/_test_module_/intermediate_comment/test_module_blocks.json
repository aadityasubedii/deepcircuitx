{
    "line_num": [
        [
            371,
            387
        ],
        [
            355,
            362
        ],
        [
            343,
            350
        ],
        [
            330,
            337
        ],
        [
            319,
            325
        ],
        [
            307,
            314
        ],
        [
            295,
            302
        ],
        [
            271,
            290
        ],
        [
            255,
            264
        ],
        [
            239,
            248
        ],
        [
            231,
            231
        ],
        [
            230,
            230
        ],
        [
            216,
            223
        ],
        [
            155,
            202
        ],
        [
            134,
            149
        ],
        [
            128,
            133
        ],
        [
            120,
            126
        ]
    ],
    "blocks": [
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\ttb_uart_control_reg <= 'd0;\n\t\ttb_uart_push        <= 'd0;\n\t\ttb_uart_txd_reg     <= 'd0;\n\t\ttb_uart_status_reg  <= 'd0;\n\tend else begin\n\t    if ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_UART_CONTROL )\n\t\t  tb_uart_control_reg <= wb_wdata32[1:0];  \n\t\t  \n\t    if ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_UART_TXD )\n\t\t  begin\n\t\t  tb_uart_txd_reg   <= wb_wdata32[7:0];\n\t\t  tb_uart_push      <= !tb_uart_push;\n\t\t  end\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tphy_rst_reg <= 'd0;\n\tend else begin\n\t    if ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_PHY_RST )\n\t\t  phy_rst_reg <= wb_wdata32[0];     \n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tled_reg <= 'd0;\n\tend else begin\n\t\tif ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_LED )\n\t\t\tled_reg <= wb_wdata32[3:0];\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tmem_ctrl_reg <= 'd0;\n\tend else begin\n\t\tif ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_MEM_CTRL )\n\t\t\tmem_ctrl_reg <= wb_wdata32[0];\n\tend\nend ",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tcycles_reg <= 'd0;\n\tend else begin\n\t\tcycles_reg <= cycles_reg + 1'd1;\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\ttest_status_set <= 'd0;\n\tend else begin\n\t    if ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_STATUS )\n\t\t  test_status_set <= 1'd1;\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\ttest_status_reg <= 'd0;\n\tend else begin\n\t\tif ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_STATUS )\n\t\t\ttest_status_reg <= wb_wdata32;\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\trandom_num <= 8'hf3;\n\tend else begin\n\t\tif ( wb_start_write && i_wb_adr[15:8] == AMBER_TEST_RANDOM_NUM[15:8] )\n\t\t  random_num <= wb_wdata32[7:0];\n\t\t  \n\t\t\n\t\telse if ( wb_start_read && i_wb_adr[15:8] == AMBER_TEST_RANDOM_NUM[15:8] )\n\t\t  random_num <= { random_num[3]^random_num[1], \n\t\t\t\t      random_num[0]^random_num[5], \n\t\t\t\t      ~random_num[7]^random_num[4], \n\t\t\t\t      ~random_num[2],\n\t\t\t\t      random_num[6],\n\t\t\t\t      random_num[4]^~random_num[3],\n\t\t\t\t      random_num[7]^~random_num[1],\n\t\t\t\t      random_num[7]                     \n\t\t\t\t    };\n\tend    \nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tirq_timer <= 'd0;\n\tend else begin\n\t    if ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_IRQ_TIMER )\n\t\t  irq_timer <= wb_wdata32[7:0];\n\t    else if ( irq_timer > 8'd1 )\n\t\t  irq_timer <= irq_timer - 1'd1;\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tfirq_timer <= 'd0;\n\tend else begin\n\t    if ( wb_start_write && i_wb_adr[15:0] == AMBER_TEST_FIRQ_TIMER )\n\t\t  firq_timer <= wb_wdata32[7:0];\n\t    else if ( firq_timer > 8'd1 )\n\t\t  firq_timer <= firq_timer - 1'd1;\n\tend\nend",
        "assign o_firq = firq_timer == 8'd1;",
        "assign o_irq  = irq_timer  == 8'd1;",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tsim_ctrl_reg <= 3'b000;\n\tend else begin\n\t\t\n\t\tsim_ctrl_reg <= 3'd `AMBER_SIM_CTRL ;\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\twb_rdata32 <= 'd0;\n\tend else begin\n\t    if ( wb_start_read )\n\t\t  case ( i_wb_adr[15:0] )\n\t\t      AMBER_TEST_STATUS:           wb_rdata32 <= test_status_reg;\n\t\t      AMBER_TEST_FIRQ_TIMER:       wb_rdata32 <= {24'd0, firq_timer};\n\t\t      AMBER_TEST_IRQ_TIMER:        wb_rdata32 <= {24'd0, irq_timer};\n\t\t      AMBER_TEST_RANDOM_NUM:       wb_rdata32 <= {24'd0, random_num};\n\t\t      \n\t\t      \n\n\n\t\t      AMBER_TEST_RANDOM_NUM00: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM01: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM02: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM03: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM04: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM05: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM06: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM07: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM08: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM09: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM10: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM11: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM12: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM13: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM14: wb_rdata32 <= {24'd0, random_num};\n\t\t      AMBER_TEST_RANDOM_NUM15: wb_rdata32 <= {24'd0, random_num};\n\t\t      \n\t\t      \n\t\t      AMBER_TEST_UART_CONTROL:     wb_rdata32 <= {30'd0, tb_uart_control_reg};\n\t\t      AMBER_TEST_UART_STATUS:      wb_rdata32 <= {30'd0, tb_uart_status_reg};\n\t\t      AMBER_TEST_UART_TXD:         wb_rdata32 <= {24'd0, tb_uart_txd_reg};\n\t\t      \n\t\t      \n\t\t      AMBER_TEST_SIM_CTRL:         wb_rdata32 <= {29'd0, sim_ctrl_reg};\n\t\t      AMBER_TEST_MEM_CTRL:         wb_rdata32 <= {31'd0, mem_ctrl_reg};\n\t\t      \n\t\t      AMBER_TEST_CYCLES:           wb_rdata32 <=  cycles_reg;\n\t\t      AMBER_TEST_LED:              wb_rdata32 <= {27'd0, led_reg};\n\t\t      AMBER_TEST_PHY_RST:          wb_rdata32 <= {31'd0, phy_rst_reg};\n\t\t      default:                     wb_rdata32 <= 32'haabbccdd;\n\t\t      \n\t\t  endcase\n\tend\nend",
        "generate\nif (WB_DWIDTH == 128) \n    begin : wb128\n    assign wb_wdata32   = i_wb_adr[3:2] == 2'd3 ? i_wb_dat[127:96] :\n                          i_wb_adr[3:2] == 2'd2 ? i_wb_dat[ 95:64] :\n                          i_wb_adr[3:2] == 2'd1 ? i_wb_dat[ 63:32] :\n                                                  i_wb_dat[ 31: 0] ;\n                                                                                                                                            \n    assign o_wb_dat    = {4{wb_rdata32}};\n    end\nelse\n    begin : wb32\n    assign wb_wdata32  = i_wb_dat;\n    assign o_wb_dat    = wb_rdata32;\n    end\nendgenerate",
        "assign o_wb_ack     = i_wb_stb && ( wb_start_write || wb_start_read_d1 );\nassign o_wb_err     = 1'd0;\nassign o_mem_ctrl   = mem_ctrl_reg;\nassign o_led        = led_reg;\nassign o_phy_rst_n  = phy_rst_reg;\n",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\twb_start_read_d1 <= 'd0;\n\tend else begin\n\t\twb_start_read_d1 <= wb_start_read;\n\tend\nend"
    ]
}