{
    "line_num": [
        [
            1493,
            1713
        ],
        [
            1485,
            1486
        ],
        [
            1482,
            1484
        ],
        [
            1481,
            1487
        ],
        [
            1352,
            1488
        ],
        [
            1211,
            1347
        ],
        [
            1200,
            1205
        ],
        [
            1200,
            1206
        ],
        [
            1070,
            1206
        ],
        [
            929,
            1065
        ],
        [
            918,
            922
        ],
        [
            917,
            924
        ],
        [
            788,
            924
        ],
        [
            647,
            783
        ],
        [
            617,
            642
        ]
    ],
    "blocks": [
        "generate\nif (C_PORT_ENABLE[2] == 1'b1) begin: P2_cmd_field_mapping\n\n   if (C_P2_PORT_MODE == \"RD_MODE\") begin: RD_P2_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P2_equal_P0_cmd_field\n         assign p2_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P2_equal_P1_cmd_field\n         assign p2_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\"))  begin: RD_P2_equal_P3_cmd_field\n         assign p2_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P2_equal_P4_cmd_field\n         assign p2_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P2_equal_P5_cmd_field\n         assign p2_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P2_equal_P2_cmd_field\n         assign p2_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p2_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p2_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p2_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p2_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P2_cmd_field_mapping\n      assign p2_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n      assign p2_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n      assign p2_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n      assign p2_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n      assign p2_mcb_wr_en_sig           = p2_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[3] == 1'b1) begin: P3_cmd_field_mapping\n\n   if (C_P3_PORT_MODE == \"RD_MODE\") begin: RD_P3_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P3_equal_P0_cmd_field\n         assign p3_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P3_equal_P1_cmd_field\n         assign p3_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P3_equal_P2_cmd_field\n         assign p3_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P3_equal_P4_cmd_field\n         assign p3_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P3_equal_P5_cmd_field\n         assign p3_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P3_equal_P3_cmd_field\n         assign p3_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p3_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p3_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p3_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p3_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P3_cmd_field_mapping\n      assign p3_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n      assign p3_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n      assign p3_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n      assign p3_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n      assign p3_mcb_wr_en_sig           = p3_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[4] == 1'b1) begin: P4_cmd_field_mapping\n\n   if (C_P4_PORT_MODE == \"RD_MODE\") begin: RD_P4_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P4_equal_P0_cmd_field\n         assign p4_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P4_equal_P1_cmd_field\n         assign p4_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P4_equal_P2_cmd_field\n         assign p4_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\")) begin: RD_P4_equal_P3_cmd_field\n         assign p4_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[5] == 1'b1) && (C_P5_PORT_MODE == \"WR_MODE\")) begin: RD_P4_equal_P5_cmd_field\n         assign p4_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n        else begin: RD_P4_equal_P4_cmd_field\n         assign p4_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p4_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p4_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p4_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p4_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P4_cmd_field_mapping\n      assign p4_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n      assign p4_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n      assign p4_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n      assign p4_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n      assign p4_mcb_wr_en_sig           = p4_mcb_wr_en;\n   end\nend \n\nif (C_PORT_ENABLE[5] == 1'b1) begin: P5_cmd_field_mapping\n\n   if (C_P5_PORT_MODE == \"RD_MODE\") begin: RD_P5_cmd_field_mapping\n      if (C_PORT_ENABLE[0] == 1'b1) begin: RD_P5_equal_P0_cmd_field\n         assign p5_mcb_cmd_en_sig          = p0_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p0_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p0_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p0_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p0_mcb_wr_en;\n      end\t \n      else if (C_PORT_ENABLE[1] == 1'b1) begin: RD_P5_equal_P1_cmd_field\n         assign p5_mcb_cmd_en_sig          = p1_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p1_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p1_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p1_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p1_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[2] == 1'b1) && (C_P2_PORT_MODE == \"WR_MODE\"))  begin: RD_P5_equal_P2_cmd_field\n         assign p5_mcb_cmd_en_sig          = p2_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p2_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p2_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p2_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p2_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[3] == 1'b1) && (C_P3_PORT_MODE == \"WR_MODE\")) begin: RD_P5_equal_P3_cmd_field\n         assign p5_mcb_cmd_en_sig          = p3_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p3_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p3_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p3_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p3_mcb_wr_en;\n      end\t \n        else if ((C_PORT_ENABLE[4] == 1'b1) && (C_P4_PORT_MODE == \"WR_MODE\")) begin: RD_P5_equal_P4_cmd_field\n         assign p5_mcb_cmd_en_sig          = p4_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p4_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p4_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p4_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p4_mcb_wr_en;\n      end\n        else begin: RD_P5_equal_P5_cmd_field\n         assign p5_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n         assign p5_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n         assign p5_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n         assign p5_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n         assign p5_mcb_wr_en_sig           = p5_mcb_wr_en;\n      end\n   end   \n   else begin: WR_P5_cmd_field_mapping\n      assign p5_mcb_cmd_en_sig          = p5_mcb_cmd_en; \n      assign p5_mcb_cmd_instr_sig       = p5_mcb_cmd_instr;\n      assign p5_mcb_cmd_addr_sig        = p5_mcb_cmd_addr;\n      assign p5_mcb_cmd_bl_sig          = p5_mcb_cmd_bl;\n      assign p5_mcb_wr_en_sig           = p5_mcb_wr_en;\n   end\nend \nendgenerate",
        "      assign p5_cmp_data_valid = 'b0;\n      assign p5_cmp_error      = 'b0;",
        "      assign p5_error          = 'b0;\n      assign p5_error_status   = 'b0;\n      assign p5_cmp_data       = 'b0;",
        "   else begin: PORT5_NO_TG\n      assign p5_error          = 'b0;\n      assign p5_error_status   = 'b0;\n      assign p5_cmp_data       = 'b0;\n      assign p5_cmp_data_valid = 'b0;\n      assign p5_cmp_error      = 'b0;\n   end   ",
        "generate\n   if (C_PORT_ENABLE[5] == 1'b1) \n   begin : PORT5_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P5_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P5_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P5_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P5_DATA_MODE), \n      .PORT_MODE                     (C_P5_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p5\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p5_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p5_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p5_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p5_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p5_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p5_error),\n      .run_traffic_o                 (p5_tg_run_traffic),  \n      .start_addr_o                  (p5_tg_start_addr),\n      .end_addr_o                    (p5_tg_end_addr), \n      .cmd_seed_o                    (p5_tg_cmd_seed),  \n      .data_seed_o                   (p5_tg_data_seed), \n      .load_seed_o                   (p5_tg_load_seed), \n      .addr_mode_o                   (p5_tg_addr_mode), \n      .instr_mode_o                  (p5_tg_instr_mode), \n      .bl_mode_o                     (p5_tg_bl_mode), \n      .data_mode_o                   (p5_tg_data_mode), \n      .mode_load_o                   (p5_tg_mode_load), \n      .fixed_bl_o                    (p5_tg_fixed_bl), \n      .fixed_instr_o                 (p5_tg_fixed_instr), \n      .fixed_addr_o                  (p5_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P5_PORT_MODE),     \n      .DWIDTH                        (P5_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P5_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P5_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P5_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P5_END_ADDRESS)\n     )  \n   m_traffic_gen_p5 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p5_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p5_tg_start_addr),                  \n      .end_addr_i                    (p5_tg_end_addr),                  \n      .cmd_seed_i                    (p5_tg_cmd_seed),                  \n      .data_seed_i                   (p5_tg_data_seed),                  \n      .load_seed_i                   (p5_tg_load_seed),                \n      .addr_mode_i                   (p5_tg_addr_mode),                \n      .instr_mode_i                  (p5_tg_instr_mode),                  \n      .bl_mode_i                     (p5_tg_bl_mode),                  \n      .data_mode_i                   (p5_tg_data_mode),                  \n      .mode_load_i                   (p5_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p5_tg_fixed_bl),                     \n      .fixed_instr_i                 (p5_tg_fixed_instr),                     \n      .fixed_addr_i                  (p5_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p5_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p5_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p5_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p5_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p5_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p5_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p5_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p5_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p5_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p5_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p5_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p5_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p5_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p5_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p5_error),\n      .error_status                  (p5_error_status),\n      .cmp_data                      (p5_cmp_data),            \n      .cmp_data_valid                (p5_cmp_data_valid),                  \n      .cmp_error                     (p5_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );\n   end\n   else begin: PORT5_NO_TG\n      assign p5_error          = 'b0;\n      assign p5_error_status   = 'b0;\n      assign p5_cmp_data       = 'b0;\n      assign p5_cmp_data_valid = 'b0;\n      assign p5_cmp_error      = 'b0;\n   end   \nendgenerate    ",
        "generate\n   if (C_PORT_ENABLE[4] == 1'b1) \n   begin : PORT4_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P4_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P4_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P4_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P4_DATA_MODE), \n      .PORT_MODE                     (C_P4_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p4\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p4_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p4_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p4_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p4_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p4_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p4_error),\n      .run_traffic_o                 (p4_tg_run_traffic),  \n      .start_addr_o                  (p4_tg_start_addr),\n      .end_addr_o                    (p4_tg_end_addr), \n      .cmd_seed_o                    (p4_tg_cmd_seed),  \n      .data_seed_o                   (p4_tg_data_seed), \n      .load_seed_o                   (p4_tg_load_seed), \n      .addr_mode_o                   (p4_tg_addr_mode), \n      .instr_mode_o                  (p4_tg_instr_mode), \n      .bl_mode_o                     (p4_tg_bl_mode), \n      .data_mode_o                   (p4_tg_data_mode), \n      .mode_load_o                   (p4_tg_mode_load), \n      .fixed_bl_o                    (p4_tg_fixed_bl), \n      .fixed_instr_o                 (p4_tg_fixed_instr), \n      .fixed_addr_o                  (p4_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P4_PORT_MODE),     \n      .DWIDTH                        (P4_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P4_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P4_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P4_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P4_END_ADDRESS)\n     )  \n   m_traffic_gen_p4 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p4_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p4_tg_start_addr),                  \n      .end_addr_i                    (p4_tg_end_addr),                  \n      .cmd_seed_i                    (p4_tg_cmd_seed),                  \n      .data_seed_i                   (p4_tg_data_seed),                  \n      .load_seed_i                   (p4_tg_load_seed),                \n      .addr_mode_i                   (p4_tg_addr_mode),                \n      .instr_mode_i                  (p4_tg_instr_mode),                  \n      .bl_mode_i                     (p4_tg_bl_mode),                  \n      .data_mode_i                   (p4_tg_data_mode),                  \n      .mode_load_i                   (p4_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p4_tg_fixed_bl),                     \n      .fixed_instr_i                 (p4_tg_fixed_instr),                     \n      .fixed_addr_i                  (p4_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p4_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p4_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p4_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p4_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p4_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p4_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p4_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p4_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p4_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p4_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p4_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p4_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p4_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p4_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p4_error),\n      .error_status                  (p4_error_status),\n      .cmp_data                      (p4_cmp_data),            \n      .cmp_data_valid                (p4_cmp_data_valid),                  \n      .cmp_error                     (p4_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT4_NO_TG\n      assign p4_error          = 'b0;\n      assign p4_error_status   = 'b0;\n      assign p4_cmp_data       = 'b0;\n      assign p4_cmp_data_valid = 'b0;\n      assign p4_cmp_error      = 'b0;\n   end   \nendgenerate",
        "      assign p3_error          = 'b0;\n      assign p3_error_status   = 'b0;\n      assign p3_cmp_data       = 'b0;\n      assign p3_cmp_data_valid = 'b0;\n      assign p3_cmp_error      = 'b0;\n   end   ",
        "      assign p3_error          = 'b0;\n      assign p3_error_status   = 'b0;\n      assign p3_cmp_data       = 'b0;\n      assign p3_cmp_data_valid = 'b0;\n      assign p3_cmp_error      = 'b0;\n   end   \nendgenerate",
        "generate\n   if (C_PORT_ENABLE[3] == 1'b1) \n   begin : PORT3_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P3_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P3_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P3_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P3_DATA_MODE), \n      .PORT_MODE                     (C_P3_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p3\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p3_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p3_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p3_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p3_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p3_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p3_error),\n      .run_traffic_o                 (p3_tg_run_traffic),  \n      .start_addr_o                  (p3_tg_start_addr),\n      .end_addr_o                    (p3_tg_end_addr), \n      .cmd_seed_o                    (p3_tg_cmd_seed),  \n      .data_seed_o                   (p3_tg_data_seed), \n      .load_seed_o                   (p3_tg_load_seed), \n      .addr_mode_o                   (p3_tg_addr_mode), \n      .instr_mode_o                  (p3_tg_instr_mode), \n      .bl_mode_o                     (p3_tg_bl_mode), \n      .data_mode_o                   (p3_tg_data_mode), \n      .mode_load_o                   (p3_tg_mode_load), \n      .fixed_bl_o                    (p3_tg_fixed_bl), \n      .fixed_instr_o                 (p3_tg_fixed_instr), \n      .fixed_addr_o                  (p3_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P3_PORT_MODE),     \n      .DWIDTH                        (P3_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P3_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P3_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P3_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P3_END_ADDRESS)\n     )  \n   m_traffic_gen_p3 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p3_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p3_tg_start_addr),                  \n      .end_addr_i                    (p3_tg_end_addr),                  \n      .cmd_seed_i                    (p3_tg_cmd_seed),                  \n      .data_seed_i                   (p3_tg_data_seed),                  \n      .load_seed_i                   (p3_tg_load_seed),                \n      .addr_mode_i                   (p3_tg_addr_mode),                \n      .instr_mode_i                  (p3_tg_instr_mode),                  \n      .bl_mode_i                     (p3_tg_bl_mode),                  \n      .data_mode_i                   (p3_tg_data_mode),                  \n      .mode_load_i                   (p3_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p3_tg_fixed_bl),                     \n      .fixed_instr_i                 (p3_tg_fixed_instr),                     \n      .fixed_addr_i                  (p3_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p3_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p3_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p3_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p3_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p3_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p3_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p3_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p3_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p3_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p3_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p3_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p3_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p3_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p3_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p3_error),\n      .error_status                  (p3_error_status),\n      .cmp_data                      (p3_cmp_data),            \n      .cmp_data_valid                (p3_cmp_data_valid),                  \n      .cmp_error                     (p3_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT3_NO_TG\n      assign p3_error          = 'b0;\n      assign p3_error_status   = 'b0;\n      assign p3_cmp_data       = 'b0;\n      assign p3_cmp_data_valid = 'b0;\n      assign p3_cmp_error      = 'b0;\n   end   \nendgenerate",
        "generate\n   if (C_PORT_ENABLE[2] == 1'b1)\n   begin : PORT2_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (P2_DWIDTH), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (P2_BEGIN_ADDRESS),\n      .END_ADDRESS                   (P2_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (P2_DATA_MODE), \n      .PORT_MODE                     (C_P2_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p2\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p2_mcb_cmd_en_sig),   \n      .mcb_cmd_instr_i               (p2_mcb_cmd_instr_sig),\n      .mcb_cmd_addr_i                (p2_mcb_cmd_addr_sig), \n      .mcb_cmd_bl_i                  (p2_mcb_cmd_bl_sig),  \n      .mcb_wr_en_i                   (p2_mcb_wr_en_sig), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p2_error),\n      .run_traffic_o                 (p2_tg_run_traffic),  \n      .start_addr_o                  (p2_tg_start_addr),\n      .end_addr_o                    (p2_tg_end_addr), \n      .cmd_seed_o                    (p2_tg_cmd_seed),  \n      .data_seed_o                   (p2_tg_data_seed), \n      .load_seed_o                   (p2_tg_load_seed), \n      .addr_mode_o                   (p2_tg_addr_mode), \n      .instr_mode_o                  (p2_tg_instr_mode), \n      .bl_mode_o                     (p2_tg_bl_mode), \n      .data_mode_o                   (p2_tg_data_mode), \n      .mode_load_o                   (p2_tg_mode_load), \n      .fixed_bl_o                    (p2_tg_fixed_bl), \n      .fixed_instr_o                 (p2_tg_fixed_instr), \n      .fixed_addr_o                  (p2_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P2_PORT_MODE),     \n      .DWIDTH                        (P2_DWIDTH),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (P2_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (P2_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (P2_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (P2_END_ADDRESS)\n     )  \n   m_traffic_gen_p2 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p2_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p2_tg_start_addr),                  \n      .end_addr_i                    (p2_tg_end_addr),                  \n      .cmd_seed_i                    (p2_tg_cmd_seed),                  \n      .data_seed_i                   (p2_tg_data_seed),                  \n      .load_seed_i                   (p2_tg_load_seed),                \n      .addr_mode_i                   (p2_tg_addr_mode),                \n      .instr_mode_i                  (p2_tg_instr_mode),                  \n      .bl_mode_i                     (p2_tg_bl_mode),                  \n      .data_mode_i                   (p2_tg_data_mode),                  \n      .mode_load_i                   (p2_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p2_tg_fixed_bl),                     \n      .fixed_instr_i                 (p2_tg_fixed_instr),                     \n      .fixed_addr_i                  (p2_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p2_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p2_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p2_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p2_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p2_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p2_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p2_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p2_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p2_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p2_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p2_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p2_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p2_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p2_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p2_error),\n      .error_status                  (p2_error_status),\n      .cmp_data                      (p2_cmp_data),            \n      .cmp_data_valid                (p2_cmp_data_valid),                  \n      .cmp_error                     (p2_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end  \n   else begin: PORT2_NO_TG\n      assign p2_error          = 'b0;\n      assign p2_error_status   = 'b0;\n      assign p2_cmp_data       = 'b0;\n      assign p2_cmp_data_valid = 'b0;\n      assign p2_cmp_error      = 'b0;\n   end   \nendgenerate",
        "      assign p1_error          = 'b0;\n      assign p1_error_status   = 'b0;\n      assign p1_cmp_data       = 'b0;\n      assign p1_cmp_data_valid = 'b0;\n      assign p1_cmp_error      = 'b0;",
        "   else begin: PORT1_NO_TG\n      assign p1_error          = 'b0;\n      assign p1_error_status   = 'b0;\n      assign p1_cmp_data       = 'b0;\n      assign p1_cmp_data_valid = 'b0;\n      assign p1_cmp_error      = 'b0;\n   end   \nendgenerate",
        "generate\n   if (C_PORT_ENABLE[1] == 1'b1) \n   begin : PORT1_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (C_P1_DATA_PORT_SIZE), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (C_p1_BEGIN_ADDRESS),\n      .END_ADDRESS                   (C_p1_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (C_p1_DATA_MODE), \n      .PORT_MODE                     (C_P1_PORT_MODE) \n     )\n   init_mem_pattern_ctr_p1\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p1_mcb_cmd_en),   \n      .mcb_cmd_instr_i               (p1_mcb_cmd_instr),\n      .mcb_cmd_addr_i                (p1_mcb_cmd_addr), \n      .mcb_cmd_bl_i                  (p1_mcb_cmd_bl),  \n      .mcb_wr_en_i                   (p1_mcb_wr_en), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),\n      .vio_fixed_bl_value            (6'd64),\n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p1_error),\n      .run_traffic_o                 (p1_tg_run_traffic),  \n      .start_addr_o                  (p1_tg_start_addr),\n      .end_addr_o                    (p1_tg_end_addr), \n      .cmd_seed_o                    (p1_tg_cmd_seed),  \n      .data_seed_o                   (p1_tg_data_seed), \n      .load_seed_o                   (p1_tg_load_seed), \n      .addr_mode_o                   (p1_tg_addr_mode), \n      .instr_mode_o                  (p1_tg_instr_mode), \n      .bl_mode_o                     (p1_tg_bl_mode), \n      .data_mode_o                   (p1_tg_data_mode), \n      .mode_load_o                   (p1_tg_mode_load), \n      .fixed_bl_o                    (p1_tg_fixed_bl), \n      .fixed_instr_o                 (p1_tg_fixed_instr), \n      .fixed_addr_o                  (p1_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P1_PORT_MODE),     \n      .DWIDTH                        (C_P1_DATA_PORT_SIZE),   \n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (C_p1_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (C_p1_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (C_p1_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (C_p1_END_ADDRESS)\n     )  \n   m_traffic_gen_p1 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p1_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p1_tg_start_addr),                  \n      .end_addr_i                    (p1_tg_end_addr),                  \n      .cmd_seed_i                    (p1_tg_cmd_seed),                  \n      .data_seed_i                   (p1_tg_data_seed),                  \n      .load_seed_i                   (p1_tg_load_seed),                \n      .addr_mode_i                   (p1_tg_addr_mode),                \n      .instr_mode_i                  (p1_tg_instr_mode),                  \n      .bl_mode_i                     (p1_tg_bl_mode),                  \n      .data_mode_i                   (p1_tg_data_mode),                  \n      .mode_load_i                   (p1_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p1_tg_fixed_bl),                     \n      .fixed_instr_i                 (p1_tg_fixed_instr),                     \n      .fixed_addr_i                  (p1_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p1_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p1_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p1_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p1_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p1_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p1_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p1_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p1_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p1_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p1_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p1_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p1_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p1_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p1_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p1_error),\n      .error_status                  (p1_error_status),\n      .cmp_data                      (p1_cmp_data),            \n      .cmp_data_valid                (p1_cmp_data_valid),                  \n      .cmp_error                     (p1_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );     \n   end\n   else begin: PORT1_NO_TG\n      assign p1_error          = 'b0;\n      assign p1_error_status   = 'b0;\n      assign p1_cmp_data       = 'b0;\n      assign p1_cmp_data_valid = 'b0;\n      assign p1_cmp_error      = 'b0;\n   end   \nendgenerate",
        "generate\n   if (C_PORT_ENABLE[0] == 1'b1)\n   begin : PORT0_TG    \n   \n   init_mem_pattern_ctr #\n     (\n      .DWIDTH                        (C_P0_DATA_PORT_SIZE), \n      .FAMILY                        (FAMILY),\n      .BEGIN_ADDRESS                 (C_p0_BEGIN_ADDRESS),\n      .END_ADDRESS                   (C_p0_END_ADDRESS),\n      .CMD_SEED_VALUE                (32'h56456783),\n      .DATA_SEED_VALUE               (32'h12345678),  \n      .DATA_MODE                     (C_p0_DATA_MODE), \n      .PORT_MODE                     (C_P0_PORT_MODE) \n    )\n   init_mem_pattern_ctr_p0\n     (\n      .clk_i                         (clk0),   \n      .rst_i                         (rst0),     \n   \n      .mcb_cmd_en_i                  (p0_mcb_cmd_en),   \n      .mcb_cmd_instr_i               (p0_mcb_cmd_instr),\n      .mcb_cmd_addr_i                (p0_mcb_cmd_addr), \n      .mcb_cmd_bl_i                  (p0_mcb_cmd_bl),  \n      .mcb_wr_en_i                   (p0_mcb_wr_en), \n   \n      .vio_modify_enable\t     (vio_modify_enable),   \n      .vio_data_mode_value           (vio_data_mode_value),  \n      .vio_addr_mode_value           (vio_addr_mode_value),\n      .vio_bl_mode_value             (2'b10),  \n      .vio_fixed_bl_value            (6'd64),  \n      .mcb_init_done_i               (calib_done),\n      .cmp_error                     (p0_error),\n      .run_traffic_o                 (p0_tg_run_traffic),  \n      .start_addr_o                  (p0_tg_start_addr),\n      .end_addr_o                    (p0_tg_end_addr), \n      .cmd_seed_o                    (p0_tg_cmd_seed),  \n      .data_seed_o                   (p0_tg_data_seed), \n      .load_seed_o                   (p0_tg_load_seed), \n      .addr_mode_o                   (p0_tg_addr_mode), \n      .instr_mode_o                  (p0_tg_instr_mode), \n      .bl_mode_o                     (p0_tg_bl_mode), \n      .data_mode_o                   (p0_tg_data_mode), \n      .mode_load_o                   (p0_tg_mode_load), \n      .fixed_bl_o                    (p0_tg_fixed_bl), \n      .fixed_instr_o                 (p0_tg_fixed_instr), \n      .fixed_addr_o                  (p0_tg_fixed_addr) \n     );\n   \n   \n   mcb_traffic_gen #\n     (  \n      .MEM_BURST_LEN                 (C_MEM_BURST_LEN),  \n      .MEM_COL_WIDTH                 (C_MEM_NUM_COL_BITS),  \n      .NUM_DQ_PINS                   (C_NUM_DQ_PINS), \n      .DQ_ERROR_WIDTH                (DQ_ERROR_WIDTH),  \n      .PORT_MODE                     (C_P0_PORT_MODE),     \n      .DWIDTH                        (C_P0_DATA_PORT_SIZE),\n      .CMP_DATA_PIPE_STAGES          (CMP_DATA_PIPE_STAGES),   \n      .FAMILY                        (FAMILY),    \n      .SIMULATION                    (\"FALSE\"),   \n      .DATA_PATTERN                  (TG_DATA_PATTERN),  \n      .CMD_PATTERN                   (\"CGEN_ALL\"),  \n      .ADDR_WIDTH                    (30),  \n      .PRBS_SADDR_MASK_POS           (C_p0_PRBS_SADDR_MASK_POS), \n      .PRBS_EADDR_MASK_POS           (C_p0_PRBS_EADDR_MASK_POS),\n      .PRBS_SADDR                    (C_p0_BEGIN_ADDRESS), \n      .PRBS_EADDR                    (C_p0_END_ADDRESS)\n     )  \n   m_traffic_gen_p0 \n     (  \n      .clk_i                         (clk0),     \n      .rst_i                         (rst0),     \n      .run_traffic_i                 (p0_tg_run_traffic),                  \n      .manual_clear_error            (rst0),     \n      \n      .start_addr_i                  (p0_tg_start_addr),                  \n      .end_addr_i                    (p0_tg_end_addr),                  \n      .cmd_seed_i                    (p0_tg_cmd_seed),                  \n      .data_seed_i                   (p0_tg_data_seed),                  \n      .load_seed_i                   (p0_tg_load_seed),                \n      .addr_mode_i                   (p0_tg_addr_mode),                \n      .instr_mode_i                  (p0_tg_instr_mode),                  \n      .bl_mode_i                     (p0_tg_bl_mode),                  \n      .data_mode_i                   (p0_tg_data_mode),                  \n      .mode_load_i                   (p0_tg_mode_load),                  \n      \n      .fixed_bl_i                    (p0_tg_fixed_bl),                     \n      .fixed_instr_i                 (p0_tg_fixed_instr),                     \n      .fixed_addr_i                  (p0_tg_fixed_addr),                 \n      .fixed_data_i                  (), \n      \n      .bram_cmd_i                    (), \n      .bram_valid_i                  (), \n      .bram_rdy_o                    (),  \n      \n      \n      .mcb_cmd_en_o\t\t     (p0_mcb_cmd_en),                 \n      .mcb_cmd_instr_o\t\t     (p0_mcb_cmd_instr),                    \n      .mcb_cmd_bl_o\t\t     (p0_mcb_cmd_bl),                 \n      .mcb_cmd_addr_o\t\t     (p0_mcb_cmd_addr),                   \n      .mcb_cmd_full_i\t\t     (p0_mcb_cmd_full),                   \n   \n      .mcb_wr_en_o\t\t     (p0_mcb_wr_en),                \n      .mcb_wr_mask_o\t\t     (p0_mcb_wr_mask),                  \n      .mcb_wr_data_o\t\t     (p0_mcb_wr_data),                 \n      .mcb_wr_data_end_o             (), \n      .mcb_wr_full_i\t\t     (p0_mcb_wr_full),                  \n      .mcb_wr_fifo_counts\t     (p0_mcb_wr_fifo_counts),                       \n   \n      .mcb_rd_en_o\t\t     (p0_mcb_rd_en),                \n      .mcb_rd_data_i\t\t     (p0_mcb_rd_data),                  \n      .mcb_rd_empty_i\t\t     (p0_mcb_rd_empty),                   \n      .mcb_rd_fifo_counts\t     (p0_mcb_rd_fifo_counts),                       \n   \n      \n      .counts_rst                    (rst0),     \n      .wr_data_counts                (), \n      .rd_data_counts                (), \n      .error                         (p0_error),  \n      .error_status                  (p0_error_status),  \n      .cmp_data                      (p0_cmp_data),            \n      .cmp_data_valid                (p0_cmp_data_valid),                  \n      .cmp_error                     (p0_cmp_error),             \n      .mem_rd_data                   (), \n      .dq_error_bytelane_cmp         (), \n      .cumlative_dq_lane_error       ()\n     );\n   end     \n   else begin: PORT0_NO_TG\n      assign p0_error          = 'b0;\n      assign p0_error_status   = 'b0;\n      assign p0_cmp_data       = 'b0;\n      assign p0_cmp_data_valid = 'b0;\n      assign p0_cmp_error      = 'b0;\n   end   \nendgenerate",
        "generate\n   if (C_PORT_ENABLE[0] == 1) begin: port0_status \n      assign cmp_data       = p0_cmp_data[31:0];\n      assign cmp_data_valid = p0_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[1] == 1) begin: port1_status   \n      assign cmp_data       = p1_cmp_data[31:0];\n      assign cmp_data_valid = p1_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[2] == 1) begin: port2_status   \n      assign cmp_data       = p2_cmp_data[31:0];\n      assign cmp_data_valid = p2_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[3] == 1) begin: port3_status   \n      assign cmp_data       = p3_cmp_data[31:0];\n      assign cmp_data_valid = p3_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[4] == 1) begin: port4_status   \n      assign cmp_data       = p4_cmp_data[31:0];\n      assign cmp_data_valid = p4_cmp_data_valid;\n   end\n   else if (C_PORT_ENABLE[5] == 1) begin: port5_status   \n      assign cmp_data       = p5_cmp_data[31:0];\n      assign cmp_data_valid = p5_cmp_data_valid;\n   end\nendgenerate   "
    ]
}