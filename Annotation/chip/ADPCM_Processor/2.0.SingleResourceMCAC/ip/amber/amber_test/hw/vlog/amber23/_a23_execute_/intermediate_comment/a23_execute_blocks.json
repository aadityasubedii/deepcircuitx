{
    "line_num": [
        [
            606,
            630
        ],
        [
            541,
            599
        ],
        [
            525,
            535
        ],
        [
            510,
            518
        ],
        [
            506,
            508
        ],
        [
            487,
            499
        ],
        [
            485,
            485
        ],
        [
            478,
            478
        ],
        [
            455,
            476
        ]
    ],
    "blocks": [
        "wire    [(2*8)-1:0]    xCONDITION;\nwire    [(4*8)-1:0]    xMODE;\n\nassign  xCONDITION           = i_condition == EQ ? \"EQ\"  :\n                               i_condition == NE ? \"NE\"  :\n                               i_condition == CS ? \"CS\"  :\n                               i_condition == CC ? \"CC\"  :\n                               i_condition == MI ? \"MI\"  :\n                               i_condition == PL ? \"PL\"  :\n                               i_condition == VS ? \"VS\"  :\n                               i_condition == VC ? \"VC\"  :\n                               i_condition == HI ? \"HI\"  :\n                               i_condition == LS ? \"LS\"  :\n                               i_condition == GE ? \"GE\"  :\n                               i_condition == LT ? \"LT\"  :\n                               i_condition == GT ? \"GT\"  :\n                               i_condition == LE ? \"LE\"  :\n                               i_condition == AL ? \"AL\"  :\n                                                   \"NV \" ;\n\nassign  xMODE  =  status_bits_mode == SVC  ? \"SVC\"  :\n                  status_bits_mode == IRQ  ? \"IRQ\"  :\n                  status_bits_mode == FIRQ ? \"FIRQ\" :\n                  status_bits_mode == USR  ? \"USR\"  :\n                                             \"XXX\"  ;",
        "`ifndef A23_RAM_REGISTER_BANK\na23_register_bank u_register_bank(\n    .i_clk                   ( i_clk                     ),\n    .i_fetch_stall           ( i_fetch_stall             ),\n    .i_rm_sel                ( i_rm_sel                  ),\n    .i_rds_sel               ( i_rds_sel                 ),\n    .i_rn_sel                ( i_rn_sel                  ),\n    .i_pc_wen                ( pc_wen                    ),\n    .i_reg_bank_wen          ( reg_bank_wen              ),\n    .i_pc                    ( pc_nxt[25:2]              ),\n    .i_reg                   ( reg_write_nxt             ),\n    .i_mode_idec             ( i_status_bits_mode        ),\n    .i_mode_exec             ( status_bits_mode          ),\n\n    .i_status_bits_flags     ( status_bits_flags         ),\n    .i_status_bits_irq_mask  ( status_bits_irq_mask      ),\n    .i_status_bits_firq_mask ( status_bits_firq_mask     ),\n\n    \n    .i_firq_not_user_mode    ( i_firq_not_user_mode      ),\n    \n    \n    .i_mode_rds_exec         ( status_bits_mode_rds_oh   ),  \n    \n    .i_user_mode_regs_load   ( i_user_mode_regs_load     ),\n    .o_rm                    ( rm                        ),\n    .o_rs                    ( rs                        ),\n    .o_rd                    ( rd                        ),\n    .o_rn                    ( rn                        ),\n    .o_pc                    ( pc                        )\n);\n`else\na23_ram_register_bank u_register_bank(\n    .i_clk                   ( i_clk                     ),\n    .i_fetch_stall           ( i_fetch_stall             ),\n    .i_rm_sel                ( i_rm_sel_nxt              ),\n    .i_rds_sel               ( i_rds_sel_nxt             ),\n    .i_rn_sel                ( i_rn_sel_nxt              ),\n    .i_pc_wen                ( pc_wen                    ),\n    .i_reg_bank_wsel         ( reg_bank_wsel             ),\n    .i_pc                    ( pc_nxt[25:2]              ),\n    .i_reg                   ( reg_write_nxt             ),\n\n    .i_mode_exec_nxt         ( status_bits_mode_nr       ),\n    .i_mode_exec             ( status_bits_mode          ),\n    .i_mode_rds_exec         ( status_bits_mode_rds_nr   ),\n    .i_user_mode_regs_load   ( i_user_mode_regs_load     ),\n\n    .i_status_bits_flags     ( status_bits_flags         ),\n    .i_status_bits_irq_mask  ( status_bits_irq_mask      ),\n    .i_status_bits_firq_mask ( status_bits_firq_mask     ),\n\n    .o_rm                    ( rm                        ),\n    .o_rs                    ( rs                        ),\n    .o_rd                    ( rd                        ),\n    .o_rn                    ( rn                        ),\n    .o_pc                    ( pc                        )\n);\n`endif",
        "a23_multiply u_multiply (\n    .i_clk          ( i_clk                 ),\n    .i_fetch_stall  ( i_fetch_stall         ),\n    .i_a_in         ( rs                    ),\n    .i_b_in         ( rm                    ),\n    .i_function     ( i_multiply_function   ),\n    .i_execute      ( execute               ),\n    .o_out          ( multiply_out          ),\n    .o_flags        ( multiply_flags        ),  \n    .o_done         ( o_multiply_done       )     \n);",
        "a23_alu u_alu (\n    .i_a_in                 ( rn                      ),\n    .i_b_in                 ( barrel_shift_out        ),\n    .i_barrel_shift_carry   ( barrel_shift_carry_alu  ),\n    .i_status_bits_carry    ( status_bits_flags[1]    ),\n    .i_function             ( i_alu_function          ),\n  \n    .o_out                  ( alu_out                 ),\n    .o_flags                ( alu_flags               ));",
        "assign barrel_shift_carry_alu =  i_barrel_shift_data_sel == 2'd0 ? \n                                  (i_imm_shift_amount[4:1] == 0 ? status_bits_flags[1] : i_imm32[31]) : \n                                   barrel_shift_carry;",
        "`ifndef ALTERA_FPGA\na23_barrel_shift u_barrel_shift  (\n`else\na23_barrel_shift_fpga u_barrel_shift  (\n`endif\n    .i_in             ( barrel_shift_in           ),\n    .i_carry_in       ( carry_in                  ),\n    .i_shift_amount   ( shift_amount              ),\n    .i_shift_imm_zero ( i_shift_imm_zero          ),\n    .i_function       ( i_barrel_shift_function   ),\n\n    .o_out            ( barrel_shift_out          ),\n    .o_carry_out      ( barrel_shift_carry        ));",
        "assign carry_in = i_use_carry_in ? status_bits_flags[1] : 1'd0;",
        "assign o_address = address_r;",
        "always @( posedge i_clk )\n    begin                                                                                                             \n    o_priviledged           <= priviledged_update             ? priviledged_nxt              : o_priviledged;\n    o_exclusive             <= exclusive_update               ? i_exclusive_exec             : o_exclusive;\n    o_data_access           <= data_access_update             ? i_data_access_exec           : o_data_access;\n    o_write_enable          <= write_enable_update            ? write_enable_nxt             : o_write_enable;\n    o_write_data            <= write_data_update              ? write_data_nxt               : o_write_data; \n    address_r               <= address_update                 ? o_address_nxt                : address_r;    \n    o_adex                  <= address_update                 ? adex_nxt                     : o_adex;    \n    o_address_valid         <= address_update                 ? 1'd1                         : o_address_valid;\n    o_byte_enable           <= byte_enable_update             ? byte_enable_nxt              : o_byte_enable;\n    o_copro_write_data      <= copro_write_data_update        ? write_data_nxt               : o_copro_write_data; \n\n    base_address            <= base_address_update            ? rn                           : base_address;    \n\n    status_bits_flags       <= status_bits_flags_update       ? status_bits_flags_nxt        : status_bits_flags;\n    status_bits_mode        <=  status_bits_mode_nr;\n    status_bits_mode_rds_oh <= status_bits_mode_rds_oh_update ? status_bits_mode_rds_oh_nxt  : status_bits_mode_rds_oh;\n    status_bits_mode_rds    <= status_bits_mode_rds_nr;\n    status_bits_irq_mask    <= status_bits_irq_mask_update    ? status_bits_irq_mask_nxt     : status_bits_irq_mask;\n    status_bits_firq_mask   <= status_bits_firq_mask_update   ? status_bits_firq_mask_nxt    : status_bits_firq_mask;\n    end"
    ]
}