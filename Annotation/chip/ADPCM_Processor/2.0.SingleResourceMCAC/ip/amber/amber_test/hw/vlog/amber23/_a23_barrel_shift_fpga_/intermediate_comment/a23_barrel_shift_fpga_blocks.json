{
    "line_num": [
        [
            292,
            299
        ],
        [
            281,
            289
        ],
        [
            276,
            279
        ],
        [
            270,
            273
        ],
        [
            261,
            267
        ],
        [
            253,
            258
        ],
        [
            246,
            250
        ],
        [
            237,
            243
        ],
        [
            234,
            234
        ],
        [
            231,
            231
        ],
        [
            222,
            228
        ],
        [
            212,
            218
        ],
        [
            190,
            208
        ],
        [
            186,
            186
        ],
        [
            183,
            183
        ],
        [
            179,
            182
        ],
        [
            178,
            178
        ],
        [
            171,
            174
        ],
        [
            163,
            170
        ],
        [
            94,
            159
        ]
    ],
    "blocks": [
        "function [15:0] bit_swap;\ninput [15:0] value;\ninteger i;\nbegin\n\tfor (i = 0; i < 16; i = i + 1)\n\t\tbit_swap[i] = value[15 - i];\nend\nendfunction",
        "function [4:0] wrap;\ninput integer pos;\ninput integer level;\ninteger out;\nbegin\n\tout = pos - (1 << level);\n\twrap = out[4:0];\nend\nendfunction",
        "assign o_out[30:0] =\t(p_l[30:0] & lsl_mask[30:0]) |\n\t\t\t(p_r[30:0] & lsr_mask[30:0]) |\n\t\t\t(~lsr_mask[30:0] & {31{asr_sign}});\n",
        "assign {o_carry_out, o_out[31]} = i_function == LSL ? lsl_out :\n                              i_function == LSR ? lsr_out :\n                              i_function == ASR ? asr_out :\n                                                  ror_out ;",
        "assign asr_out[0] = \ti_in[31] ?\ti_in[31] :\n\t\t\t\t\tp_r[31] & lsr_mask[31] ;\n\n\nassign asr_out[1] =\tshift_over ?\ti_in[31] :\n\t\t\tshift_nzero ?\tp_r[31] :\n\t\t\t\t\ti_carry_in;",
        "assign lsr_out[0] = \tp_r[31] & lsr_mask[31];\n\n\nassign lsr_out[1] = i_shift_imm_zero ?\ti_in[31] :\n\t\t\tshift_nzero ?\tp_r[31] & lsr_mask[32]:\n\t\t\t\t\ti_carry_in;",
        "assign lsl_out[0] = \tp_l[31] & lsl_mask[31];\n\n\nassign lsl_out[1] = \tshift_nzero ?\tp_l[0] & lsl_mask[32]:\n\t\t\t\t\ti_carry_in;",
        "assign ror_out[0] = i_shift_imm_zero ?\ti_carry_in :\n\t\t\t\t\tp_r[31];\n\n\nassign ror_out[1] = i_shift_imm_zero ?\ti_in[0] :\n\t\t\tshift_nzero ?\tp_r[31] :\n\t\t\t\t\ti_carry_in;",
        "assign p_l = rot_prod[31:0];",
        "assign p_r = {rot_prod[30:0], rot_prod[31]};",
        "always @*\ncasez (lsr_selector) \n\t7'b1??:\tlsr_mask =  33'h_1_0000_0000;\n\t7'b01?:\tlsr_mask =  33'h_0_0000_0000;\n\t7'b000:\tlsr_mask = { 1'h_1, bit_swap(low_mask), 16'h_ffff};\n\t7'b001:\tlsr_mask = {17'h_1_0000, bit_swap(low_mask)};\nendcase",
        "always @*\ncasez (lsl_selector) \n\t7'b1??:\tlsl_mask =  33'h_1_0000_0000;\n\t7'b01?:\tlsl_mask =  33'h_0_0000_0000;\n\t7'b001:\tlsl_mask = { 1'h_1, low_mask, 16'h_0000};\n\t7'b000:\tlsl_mask = {17'h_1_ffff, low_mask};\nendcase",
        "always @*\ncase (low_selector) \n\t4'b0000:\tlow_mask = 16'hffff;\n\t4'b0001:\tlow_mask = 16'hfffe;\n\t4'b0010:\tlow_mask = 16'hfffc;\n\t4'b0011:\tlow_mask = 16'hfff8;\n\t4'b0100:\tlow_mask = 16'hfff0;\n\t4'b0101:\tlow_mask = 16'hffe0;\n\t4'b0110:\tlow_mask = 16'hffc0;\n\t4'b0111:\tlow_mask = 16'hff80;\n\t4'b1000:\tlow_mask = 16'hff00;\n\t4'b1001:\tlow_mask = 16'hfe00;\n\t4'b1010:\tlow_mask = 16'hfc00;\n\t4'b1011:\tlow_mask = 16'hf800;\n\t4'b1100:\tlow_mask = 16'hf000;\n\t4'b1101:\tlow_mask = 16'he000;\n\t4'b1110:\tlow_mask = 16'hc000;\n\t4'b1111:\tlow_mask = 16'h8000;\nendcase",
        "assign rot_prod = netgen[0].out;",
        "endgenerate",
        "\tfor (i = 1; i < 5; i = i + 1)\n\tbegin : router\n\t\tassign netgen[i-1].in = netgen[i].out;\n\tend",
        "\tassign netgen[4].in = i_in;",
        "\t\t\talways @*\n\t\t\t\tout[j] = in[j] & (~shift_amount[i] ^ direction) |\n\t\t\t\t\t in[wrap(j, i)] & (shift_amount[i] ^ direction);\n\t\tend",
        "generate\ngenvar i, j;\n\tfor (i = 0; i < 5; i = i + 1)\n\tbegin : netgen\n\t\twire [31:0] in;\n\t\treg [31:0] out;\n\t\tfor (j = 0; j < 32; j = j + 1)\n\t\tbegin : net",
        "always @*\nbegin\n\tshift_32 = i_shift_amount == 32;\n\n\tshift_over = |i_shift_amount[7:5];\n\n\tshift_nzero = |i_shift_amount[7:0];\n\n\tshift_amount = i_shift_amount[4:0];\n\n\tif (i_shift_imm_zero) begin\n\t\tif (i_function == LSR || i_function == ASR) begin\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tshift_nzero = 1'b1;\n\t\t\tshift_over = 1'b1;\n\t\t\t\n\t\t\t\n\t\tend else if (i_function == ROR) begin\n\t\t\t\n\t\t\tshift_amount[0] = 1'b1;\n\t\t\tshift_nzero = 1'b1;\n\t\tend\n\tend\n\n\t\n\t\n\t\n\tcase (i_function)\n\t\tLSL: low_selector = shift_amount[3:0];\n\t\tLSR: low_selector = shift_amount[3:0];\n\t\tASR: low_selector = shift_amount[3:0];\n\t\tROR: low_selector = 4'b0000;\n\tendcase\n\n\t\n\tcase (i_function)\n\t\tLSL: lsl_selector = {shift_32, shift_over, shift_amount[4]};\n\t\tLSR: lsl_selector = 3'b0_1_0; \n\t\tASR: lsl_selector = 3'b0_1_0; \n\t\tROR: lsl_selector = 3'b0_1_0; \n\tendcase\n\n\t\n\tcase (i_function)\n\t\tLSL: lsr_selector = 3'b0_1_0; \n\t\tLSR: lsr_selector = {shift_32, shift_over, shift_amount[4]};\n\t\tASR: lsr_selector = {shift_32, shift_over, shift_amount[4]};\n\t\tROR: lsr_selector = 3'b0_0_0; \n\tendcase\n\n\t\n\tcase (i_function)\n\t\tLSL: direction = 1'b0; \n\t\tLSR: direction = 1'b1; \n\t\tASR: direction = 1'b1; \n\t\tROR: direction = 1'b1; \n\tendcase\n\n\t\n\tasr_sign = 1'b0;\n\tif (i_function == ASR && i_in[31])\n\t\tasr_sign = 1'b1;\nend"
    ]
}