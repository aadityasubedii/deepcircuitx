{
    "line_num": [
        [
            969,
            970
        ],
        [
            963,
            967
        ],
        [
            949,
            959
        ],
        [
            947,
            947
        ],
        [
            938,
            946
        ],
        [
            936,
            936
        ],
        [
            928,
            935
        ],
        [
            918,
            925
        ],
        [
            915,
            917
        ],
        [
            903,
            912
        ],
        [
            897,
            901
        ],
        [
            886,
            887
        ],
        [
            841,
            884
        ],
        [
            836,
            840
        ],
        [
            807,
            834
        ],
        [
            802,
            806
        ],
        [
            777,
            800
        ],
        [
            772,
            775
        ],
        [
            750,
            770
        ],
        [
            745,
            749
        ],
        [
            700,
            738
        ],
        [
            678,
            691
        ],
        [
            666,
            675
        ],
        [
            655,
            663
        ],
        [
            654,
            654
        ],
        [
            645,
            652
        ],
        [
            643,
            644
        ],
        [
            633,
            633
        ],
        [
            629,
            629
        ],
        [
            626,
            626
        ],
        [
            563,
            564
        ],
        [
            546,
            556
        ],
        [
            542,
            542
        ],
        [
            535,
            535
        ],
        [
            532,
            532
        ],
        [
            530,
            530
        ],
        [
            528,
            528
        ],
        [
            526,
            526
        ],
        [
            521,
            523
        ],
        [
            514,
            518
        ],
        [
            503,
            511
        ],
        [
            492,
            499
        ],
        [
            485,
            489
        ],
        [
            480,
            484
        ],
        [
            478,
            479
        ],
        [
            472,
            476
        ],
        [
            470,
            470
        ],
        [
            465,
            468
        ],
        [
            460,
            462
        ],
        [
            453,
            458
        ],
        [
            447,
            451
        ],
        [
            438,
            444
        ],
        [
            416,
            435
        ],
        [
            414,
            414
        ],
        [
            408,
            408
        ],
        [
            400,
            406
        ],
        [
            394,
            394
        ],
        [
            393,
            393
        ],
        [
            381,
            391
        ],
        [
            375,
            378
        ],
        [
            367,
            373
        ],
        [
            359,
            365
        ],
        [
            351,
            357
        ],
        [
            339,
            345
        ],
        [
            233,
            334
        ]
    ],
    "blocks": [
        "end\nendgenerate",
        "        begin\n        `TB_ERROR_MESSAGE\n        $display(\"Unsupported number of ways %0d\", WAYS);\n        $display(\"Set A25_DCACHE_WAYS in a25_config_defines.v to either 2,3,4 or 8\");\n        end",
        "    always @( posedge clk )\n        if ( (data_hit_way[0] + data_hit_way[1] + \n              data_hit_way[2] + data_hit_way[3] +\n              data_hit_way[4] + data_hit_way[5] +\n              data_hit_way[6] + data_hit_way[7] ) > 4'd1 )\n            begin\n            `TB_ERROR_MESSAGE\n            $display(\"Hit in more than one cache ways!\");                                                  \n            end\n                           \nend",
        "else if ( WAYS == 8 )  begin : check_hit_8ways",
        "    always @( posedge clk )\n        if ( (data_hit_way[0] + data_hit_way[1] + \n              data_hit_way[2] + data_hit_way[3] ) > 4'd1 )\n            begin\n            `TB_ERROR_MESSAGE\n            $display(\"Hit in more than one cache ways!\");                                                  \n            end\n                           \nend",
        "else if ( WAYS == 4 ) begin : check_hit_4ways",
        "    always @( posedge clk )\n        if ( (data_hit_way[0] + data_hit_way[1] + data_hit_way[2] ) > 4'd1 )\n            begin\n            `TB_ERROR_MESSAGE\n            $display(\"Hit in more than one cache ways!\");                                                  \n            end\n                           \nend",
        "    always @( posedge clk )\n        if ( (data_hit_way[0] + data_hit_way[1] ) > 4'd1 )\n            begin\n            `TB_ERROR_MESSAGE\n            $display(\"Hit in more than one cache ways!\");                                                  \n            end\n                                                      \nend",
        "generate\nif ( WAYS == 2 ) begin : check_hit_2ways\n",
        "assign xC_STATE    = c_state == CS_INIT               ? \"INIT\"               :\n                     c_state == CS_IDLE               ? \"IDLE\"               :\n                     c_state == CS_FILL               ? \"FILL\"               :\n                     c_state == CS_FILL_COMPLETE      ? \"FILL_COMPLETE\"      :\n                     c_state == CS_EX_DELETE          ? \"EX_DELETE\"          :\n                     c_state == CS_TURN_AROUND        ? \"TURN_AROUND\"        :\n                     c_state == CS_WRITE_HIT          ? \"WRITE_HIT\"          :\n                     c_state == CS_WRITE_HIT_WAIT_WB  ? \"WRITE_HIT_WAIT_WB\"  :\n                     c_state == CS_WRITE_MISS_WAIT_WB ? \"WRITE_MISS_WAIT_WB\" :\n                                                        \"UNKNOWN\"               ;",
        "assign xSOURCE_SEL = source_sel[C_CORE]               ? \"C_CORE\"                :\n                     source_sel[C_INIT]               ? \"C_INIT\"                :\n                     source_sel[C_FILL]               ? \"C_FILL\"                :\n                     source_sel[C_INVA]               ? \"C_INVA\"                :\n                                                        \"UNKNON\"                ;",
        "end\nendgenerate",
        "    function [WAYS-1:0] pick_way;\n    input [WAYS-1:0] valid_bits;\n    input [3:0]      random_num;\n    begin\n        if (      valid_bits[0] == 1'd0 )\n            \n            pick_way     = 8'b00000001;\n        else if ( valid_bits[1] == 1'd0 )\n            \n            pick_way     = 8'b00000010;\n        else if ( valid_bits[2] == 1'd0 )\n            \n            pick_way     = 8'b00000100;\n        else if ( valid_bits[3] == 1'd0 )\n            \n            pick_way     = 8'b00001000;\n        else if ( valid_bits[4] == 1'd0 )\n            \n            pick_way     = 8'b00010000;\n        else if ( valid_bits[5] == 1'd0 )\n            \n            pick_way     = 8'b00100000;\n        else if ( valid_bits[6] == 1'd0 )\n            \n            pick_way     = 8'b01000000;\n        else if ( valid_bits[7] == 1'd0 )\n            \n            pick_way     = 8'b10000000;\n        else\n            begin\n            \n            case (random_num[3:1])\n                3'd0:       pick_way = 8'b00010000;\n                3'd1:       pick_way = 8'b00100000;\n                3'd2:       pick_way = 8'b01000000;\n                3'd3:       pick_way = 8'b10000000;\n                3'd4:       pick_way = 8'b00000001;\n                3'd5:       pick_way = 8'b00000010;\n                3'd6:       pick_way = 8'b00000100;\n                default:    pick_way = 8'b00001000;\n            endcase\n            end\n    end\n    endfunction",
        "end\nelse begin : pick_way_8ways\n\n    assign next_way = pick_way ( valid_bits_r, random_num );\n",
        "    function [WAYS-1:0] pick_way;\n    input [WAYS-1:0] valid_bits;\n    input [3:0]      random_num;\n    begin\n        if (      valid_bits[0] == 1'd0 )\n            \n            pick_way     = 4'b0001;\n        else if ( valid_bits[1] == 1'd0 )\n            \n            pick_way     = 4'b0010;\n        else if ( valid_bits[2] == 1'd0 )\n            \n            pick_way     = 4'b0100;\n        else if ( valid_bits[3] == 1'd0 )\n            \n            pick_way     = 4'b1000;\n        else\n            begin\n            \n            case (random_num[3:1])\n                3'd0, 3'd1: pick_way = 4'b0100;\n                3'd2, 3'd3: pick_way = 4'b1000;\n                3'd4, 3'd5: pick_way = 4'b0001;\n                default:    pick_way = 4'b0010;\n            endcase\n            end\n    end\n    endfunction",
        "end\nelse if ( WAYS == 4 ) begin : pick_way_4ways\n\n    assign next_way = pick_way ( valid_bits_r, random_num );\n",
        "    function [WAYS-1:0] pick_way;\n    input [WAYS-1:0] valid_bits;\n    input [3:0]      random_num;\n    begin\n        if (      valid_bits[0] == 1'd0 )\n            \n            pick_way     = 3'b001;\n        else if ( valid_bits[1] == 1'd0 )\n            \n            pick_way     = 3'b010;\n        else if ( valid_bits[2] == 1'd0 )\n            \n            pick_way     = 3'b100;\n        else\n            begin\n            \n            case (random_num[3:1])\n                3'd0, 3'd1, 3'd2: pick_way = 3'b010;\n                3'd2, 3'd3, 3'd4: pick_way = 3'b100;\n                default:          pick_way = 3'b001;\n            endcase\n            end\n    end\n    endfunction",
        "end\nelse if ( WAYS == 3 ) begin : pick_way_3ways\n\n    assign next_way = pick_way ( valid_bits_r, random_num );",
        "    function [WAYS-1:0] pick_way;\n    input [WAYS-1:0] valid_bits;\n    input [3:0]      random_num;\n    begin\n        if (      valid_bits[0] == 1'd0 )\n            \n            pick_way     = 2'b01;\n        else if ( valid_bits[1] == 1'd0 )\n            \n            pick_way     = 2'b10;\n        else\n            begin\n            \n            case (random_num[3:1])\n                3'd0, 3'd3,\n                3'd5, 3'd6: pick_way = 2'b10;\n                default:    pick_way = 2'b01;\n            endcase\n            end\n    end\n    endfunction",
        "generate\nif ( WAYS == 2 ) begin : pick_way_2ways\n\n    assign next_way = pick_way ( valid_bits_r, random_num );\n",
        "generate\nif ( WAYS == 2 ) begin : read_data_2ways\n\n    assign hit_rdata    = data_hit_way[0] ? data_rdata_way[0] :\n                          data_hit_way[1] ? data_rdata_way[1] :\n                                     {CACHE_LINE_WIDTH{1'd1}} ;  \n                           \nend\nelse if ( WAYS == 3 ) begin : read_data_3ways\n\n    assign hit_rdata    = data_hit_way[0] ? data_rdata_way[0] :\n                          data_hit_way[1] ? data_rdata_way[1] :\n                          data_hit_way[2] ? data_rdata_way[2] :\n                                     {CACHE_LINE_WIDTH{1'd1}} ;  \n                           \nend\nelse if ( WAYS == 4 ) begin : read_data_4ways\n\n    assign hit_rdata    = data_hit_way[0] ? data_rdata_way[0] :\n                          data_hit_way[1] ? data_rdata_way[1] :\n                          data_hit_way[2] ? data_rdata_way[2] :\n                          data_hit_way[3] ? data_rdata_way[3] :\n                                     {CACHE_LINE_WIDTH{1'd1}} ;  \n                           \nend\nelse begin : read_data_8ways\n\n    assign hit_rdata    = data_hit_way[0] ? data_rdata_way[0] :\n                          data_hit_way[1] ? data_rdata_way[1] :\n                          data_hit_way[2] ? data_rdata_way[2] :\n                          data_hit_way[3] ? data_rdata_way[3] :\n                          data_hit_way[4] ? data_rdata_way[4] :\n                          data_hit_way[5] ? data_rdata_way[5] :\n                          data_hit_way[6] ? data_rdata_way[6] :\n                          data_hit_way[7] ? data_rdata_way[7] :\n                                     {CACHE_LINE_WIDTH{1'd1}} ;  \n                           \nend\nendgenerate",
        "\talways @ ( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\t\t\tvalid_bits_r <= 'd0;\n\t\tend else if ( c_state == CS_IDLE ) begin\n\t\t\tvalid_bits_r <= {tag_rdata_way[7][TAG_WIDTH-1], \n\t\t\t                 tag_rdata_way[6][TAG_WIDTH-1], \n\t\t\t                 tag_rdata_way[5][TAG_WIDTH-1], \n\t\t\t                 tag_rdata_way[4][TAG_WIDTH-1], \n\t\t\t                 tag_rdata_way[3][TAG_WIDTH-1], \n\t\t\t                 tag_rdata_way[2][TAG_WIDTH-1], \n\t\t\t                 tag_rdata_way[1][TAG_WIDTH-1], \n\t\t\t                 tag_rdata_way[0][TAG_WIDTH-1]};\n\t\tend\n\tend",
        "\talways @ ( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\t\t\tvalid_bits_r <= 'd0;\n\t\tend else if ( c_state == CS_IDLE ) begin\n\t\t      valid_bits_r <= {tag_rdata_way[3][TAG_WIDTH-1], \n\t\t                       tag_rdata_way[2][TAG_WIDTH-1], \n\t\t                       tag_rdata_way[1][TAG_WIDTH-1], \n\t\t                       tag_rdata_way[0][TAG_WIDTH-1]};\n\t\tend\n\tend                  ",
        "\talways @ ( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\t\t\tvalid_bits_r <= 'd0;\n\t\tend else if ( c_state == CS_IDLE ) begin\n\t\t      valid_bits_r <= {tag_rdata_way[2][TAG_WIDTH-1], \n\t\t                       tag_rdata_way[1][TAG_WIDTH-1], \n\t\t                       tag_rdata_way[0][TAG_WIDTH-1]};\n\t\tend\n\tend              ",
        "else if ( WAYS == 3 ) begin : valid_bits_3ways",
        "\talways @ ( posedge reset, posedge clk ) begin\n\t\tif (reset) begin\n\t\t\tvalid_bits_r <= 'd0;\n\t\tend else if ( c_state == CS_IDLE ) begin\n\t\t\tvalid_bits_r <= {tag_rdata_way[1][TAG_WIDTH-1], \n\t\t\t\t\t     tag_rdata_way[0][TAG_WIDTH-1]};\n\t\tend\n\tend              ",
        "generate\nif ( WAYS == 2 ) begin : valid_bits_2ways",
        "        assign data_hit_way[i]     = tag_rdata_way[i][TAG_WIDTH-1] &&                                                  ",
        "        assign data_wenable_way[i] = (source_sel[C_FILL] && select_way[i]) || ",
        "        assign tag_wenable_way[i]  = tag_wenable && ( select_way[i] || source_sel[C_INIT] );",
        "generate\n    for ( i=0; i<WAYS;i=i+1 ) begin : rams",
        "                          \nassign write_state      = c_state == CS_IDLE || c_state == CS_WRITE_HIT ||  \n                          c_state == CS_WRITE_HIT_WAIT_WB ||  c_state == CS_WRITE_MISS_WAIT_WB;\n                          \nassign write_stall      = (write_miss && !(i_wb_cached_ready && write_state)) || (write_hit && !i_wb_cached_ready);\n\nassign read_stall       = request_hold && !idle_hit && !rbuf_hit && !wb_hit && !i_write_enable;\n\nassign cache_busy_stall = c_state == CS_FILL_COMPLETE || c_state == CS_TURN_AROUND || c_state == CS_INIT ||\n                          (fill_state && !rbuf_hit && !wb_hit) ||\n                          (c_state == CS_WRITE_HIT && !consecutive_write);",
        "assign ex_read_cache_busy = exclusive_access && !i_write_enable && c_state != CS_IDLE;",
        "assign ex_read_hit      = exclusive_access && !i_write_enable && idle_hit;",
        "assign read_miss        = request_hold && !idle_hit && !i_write_enable;",
        "assign write_miss       = request_hold &&  i_write_enable && !idle_hit && !consecutive_write;",
        "assign write_hit        = request_hold &&  i_write_enable && idle_hit;",
        "assign idle_hit         = |data_hit_way;",
        "assign request_pulse    = i_request && i_cache_enable;\n\nassign exclusive_access = i_exclusive && i_cache_enable;",
        "assign tag_wenable      = source_sel[C_INVA] ? 1'd1  :\n                          source_sel[C_FILL] ? 1'd1  :\n                          source_sel[C_INIT] ? 1'd1  :\n                          source_sel[C_CORE] ? 1'd0  :\n                                               1'd0  ;",
        "\n\nassign write_data_word  = i_byte_enable == 4'b0001 ? { o_read_data[31: 8], i_write_data[ 7: 0]                   } :\n                          i_byte_enable == 4'b0010 ? { o_read_data[31:16], i_write_data[15: 8], o_read_data[ 7:0]} :\n                          i_byte_enable == 4'b0100 ? { o_read_data[31:24], i_write_data[23:16], o_read_data[15:0]} :\n                          i_byte_enable == 4'b1000 ? {                     i_write_data[31:24], o_read_data[23:0]} :\n                          i_byte_enable == 4'b0011 ? { o_read_data[31:16], i_write_data[15: 0]                   } :\n                          i_byte_enable == 4'b1100 ? {                     i_write_data[31:16], o_read_data[15:0]} :\n                                                     i_write_data                                                  ;",
        "assign con_write_data_word  = \n                          i_byte_enable == 4'b0001 ? { con_read_data_word[31: 8], i_write_data[ 7: 0]                          } :\n                          i_byte_enable == 4'b0010 ? { con_read_data_word[31:16], i_write_data[15: 8], con_read_data_word[ 7:0]} :\n                          i_byte_enable == 4'b0100 ? { con_read_data_word[31:24], i_write_data[23:16], con_read_data_word[15:0]} :\n                          i_byte_enable == 4'b1000 ? {                            i_write_data[31:24], con_read_data_word[23:0]} :\n                          i_byte_enable == 4'b0011 ? { con_read_data_word[31:16], i_write_data[15: 0]                          } :\n                          i_byte_enable == 4'b1100 ? {                            i_write_data[31:16], con_read_data_word[15:0]} :\n                                                                   i_write_data                                                  ;",
        "assign con_read_data_word = \n                          i_address[3:2] == 2'd0 ? data_wdata_r[ 31:  0] :\n                          i_address[3:2] == 2'd1 ? data_wdata_r[ 63: 32] : \n                          i_address[3:2] == 2'd2 ? data_wdata_r[ 95: 64] : \n                                                   data_wdata_r[127: 96] ;",
        "assign consecutive_write_wdata = \n                          i_address[3:2] == 2'd0 ? {data_wdata_r[127:32], con_write_data_word                           } :\n                          i_address[3:2] == 2'd1 ? {data_wdata_r[127:64], con_write_data_word, data_wdata_r[31:0]  } :\n                          i_address[3:2] == 2'd2 ? {data_wdata_r[127:96], con_write_data_word, data_wdata_r[63:0]  } :\n                                                   {                      con_write_data_word, data_wdata_r[95:0]  } ;",
        "wire [31:0] con_write_data_word;\n",
        "\nassign write_hit_wdata  = i_address[3:2] == 2'd0 ? {hit_rdata[127:32], write_data_word                   } :\n                          i_address[3:2] == 2'd1 ? {hit_rdata[127:64], write_data_word, hit_rdata[31:0]  } :\n                          i_address[3:2] == 2'd2 ? {hit_rdata[127:96], write_data_word, hit_rdata[63:0]  } :\n                                                   {                   write_data_word, hit_rdata[95:0]  } ;",
        "assign read_miss_wdata  = wb_rdata_burst;",
        "    \nassign data_wdata       = write_hit && c_state == CS_IDLE ? write_hit_wdata : \n                          consecutive_write               ? consecutive_write_wdata :\n                                                            read_miss_wdata ;",
        "                                                          \nassign tag_wdata        = source_sel[C_FILL] ? {1'd1, miss_address[31:TAG_ADDR32_LSB]} :\n                                               {TAG_WIDTH{1'd0}}                       ;",
        "\nassign data_address     = consecutive_write  ? miss_address[CACHE_ADDR32_MSB:CACHE_ADDR32_LSB] : \n                          write_hit          ? i_address   [CACHE_ADDR32_MSB:CACHE_ADDR32_LSB] :\n                          source_sel[C_FILL] ? miss_address[CACHE_ADDR32_MSB:CACHE_ADDR32_LSB] : \n                          source_sel[C_CORE] ? address                                         :\n                                               {CACHE_ADDR_WIDTH{1'd0}}                        ;",
        "assign tag_address      = source_sel[C_FILL] ? miss_address      [CACHE_ADDR32_MSB:CACHE_ADDR32_LSB] :\n                          source_sel[C_INVA] ? ex_read_address                                       :\n                          source_sel[C_INIT] ? init_count[CACHE_ADDR_WIDTH-1:0]                      :\n                          source_sel[C_CORE] ? address                                               :\n                                               {CACHE_ADDR_WIDTH{1'd0}}                              ;",
        "always @ (posedge reset, posedge clk) begin\n\tif (reset) begin\n\t\tex_read_address <= 'd0;\n\tend else if ( ex_read_hit ) begin\n\t\tex_read_address <= i_address[CACHE_ADDR32_MSB:CACHE_ADDR32_LSB];\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tex_read_hit_r <= 'd0;\n\t\tex_read_hit_way <= 'd0;\n\tend else begin\n\t\tif ( ex_read_hit_clear ) begin\n\t\t\tex_read_hit_r   <= 1'd0;\n\t\t\tex_read_hit_way <= 'd0;\n\t\tend else if ( ex_read_hit ) begin\n\t\t\t`ifdef A25_CACHE_DEBUG\n\t\t\t\t`TB_DEBUG_MESSAGE\n\t\t\t\t$display (\"Exclusive access cache hit address 0x%08h\", i_address);\n\t\t\t`endif\n\t\t\tex_read_hit_r   <= 1'd1;\n\t\t\tex_read_hit_way <= data_hit_way;\n        \tend else if ( c_state == CS_FILL_COMPLETE && ex_read_hit_r ) begin\n\t\t\tex_read_hit_way <= select_way;\n\t\tend\n\tend\nend",
        "assign ex_read_hit_clear = c_state == CS_EX_DELETE;",
        "assign request_hold = request_pulse || request_r;",
        "always @(posedge reset, posedge clk) begin\n\tif (reset) begin\n\t\trequest_r \t<= 'd0;\n\tend else begin\n\t\trequest_r <= (request_pulse || request_r) && o_stall;\n\tend\nend",
        "assign wb_hit           = i_address == wb_address && i_wb_cached_ready && fill_state;",
        "assign fill_state       = c_state == CS_FILL ;",
        "always @(posedge reset, posedge clk) begin\n\tif (reset) begin\n\t\twb_address \t<= 'd0;\n\tend else begin\n\t\tif ( o_wb_cached_req ) begin\n\t\t\twb_address <= i_address;\n\t\tend else if ( i_wb_cached_ready && fill_state ) begin\n\t\t\twb_address <= {wb_address[31:4], wb_address[3:2] + 1'd1, 2'd0};\n\t\tend\n\tend\nend",
        "assign consecutive_write = miss_address[31:4] == i_address[31:4] && \n                           i_write_enable && \n                           c_state == CS_WRITE_HIT && \n                           request_pulse;",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tdata_wdata_r <= 'd0;\n\tend else if ( write_hit || consecutive_write ) begin\n\t\tdata_wdata_r   <= data_wdata;\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tdata_hit_way_r <= 'd0;\n\tend else if ( write_hit ) begin\n\t\tdata_hit_way_r      <= data_hit_way;\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tmiss_address <= 'd0;\n\tend else if ( o_wb_cached_req || write_hit ) begin\n\t\tmiss_address <= i_address;\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\twb_rdata_burst <= 'd0;\n\tend else if ( i_wb_cached_ready ) begin\n\t\twb_rdata_burst <= i_wb_cached_rdata;\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tinit_count\t<= 'd0;\n\t\tsource_sel\t<= 1'd1 << C_CORE;\n\t\tc_state\t<= CS_IDLE;\n\t\tselect_way\t<= 'd0;\n\t\trandom_num\t<= 4'hf;\n\tend else begin\n\t\tif ( i_cache_flush ) begin\n\t\t\tc_state     <= CS_INIT;\n\t\t\tsource_sel  <= 1'd1 << C_INIT;\n\t\t\tinit_count  <= 'd0;\n\t\t\t`ifdef A25_CACHE_DEBUG  \n\t\t\t`TB_DEBUG_MESSAGE  \n\t\t\t$display(\"Cache Flush\");\n\t\t\t`endif            \n\t\tend else begin\n\t\t\tcase ( c_state )\n\t\t\t\tCS_INIT : begin\n\t\t\t\t\tif ( init_count < CACHE_LINES [CACHE_ADDR_WIDTH:0] ) begin\n\t\t      \t\t\tinit_count  <= init_count + 1'd1;\n\t\t\t\t\t\tsource_sel  <= 1'd1 << C_INIT;\n\t\t\t\t      end else begin\n\t\t\t\t\t\tsource_sel  <= 1'd1 << C_CORE;\n\t\t\t\t\t\tc_state     <= CS_TURN_AROUND;\n\t\t              \tend \n\t\t\t\tend\n\t\t\t\tCS_IDLE : begin\n\t\t\t\t\tsource_sel  <= 1'd1 << C_CORE;\n\t\t\t\t\tif ( ex_read_hit || ex_read_hit_r ) begin\n\t\t\t\t\t\tselect_way  <= data_hit_way | ex_read_hit_way;\n\t\t\t\t\t\tc_state     <= CS_EX_DELETE;        \n\t\t\t\t\t\tsource_sel  <= 1'd1 << C_INVA;\n\t\t          \t\tend else if ( read_miss ) begin\n\t\t              \t\tc_state <= CS_FILL; \n\t\t          \t\tend else if ( write_hit ) begin\n\t\t              \t\tif ( i_wb_cached_ready ) begin\n\t\t                  \t\tc_state <= CS_WRITE_HIT;        \n\t\t              \t\tend else begin\n\t\t                  \t\tc_state <= CS_WRITE_HIT_WAIT_WB;        \n\t\t              \t\tend\n\t\t\t\t\tend else if ( write_miss && !i_wb_cached_ready ) begin\n\t\t                  \tc_state <= CS_WRITE_MISS_WAIT_WB;        \n\t\t          \t\tend\n\t\t\t\tend\n\t\t\t\tCS_FILL : begin\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t          \t\tif ( i_wb_cached_ready ) begin\n\t\t\t\t\t\tc_state     <= CS_FILL_COMPLETE;\n\t\t\t\t\t\tsource_sel  <= 1'd1 << C_FILL;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tselect_way  <= next_way; \n\t\t\t\t\t\trandom_num  <= {random_num[2], random_num[1], random_num[0], random_num[3]^random_num[2]};\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tCS_FILL_COMPLETE : begin\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tsource_sel  <= 1'd1 << C_CORE;              \n\t\t\t\t\tc_state     <= CS_TURN_AROUND;    \n\t\t\t\tend\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tCS_TURN_AROUND : begin\n\t\t\t\t\tc_state     <= CS_IDLE;\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tCS_EX_DELETE: begin\n\t\t\t\t\t`ifdef A25_CACHE_DEBUG    \n\t\t\t\t\t\t`TB_DEBUG_MESSAGE\n\t\t\t\t\t\t$display(\"Cache deleted Locked entry\");\n\t\t\t\t\t`endif    \n\t\t\t\t\tc_state    <= CS_TURN_AROUND;\n\t\t\t\t\tsource_sel <= 1'd1 << C_CORE;\n\t\t\t\tend   \n\t\t\t\tCS_WRITE_HIT: begin\n\t\t\t\t\tif ( !consecutive_write ) begin       \n\t\t\t\t\t\tc_state     <= CS_IDLE;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tCS_WRITE_HIT_WAIT_WB: begin\n\t\t\t\t\t\n\t\t\t\t\tif ( i_wb_cached_ready ) begin\n\t\t\t\t\t\tc_state     <= CS_IDLE;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tCS_WRITE_MISS_WAIT_WB: begin\n\t\t\t\t\t\n\t\t\t\t\tif ( i_wb_cached_ready ) begin\n\t\t\t\t\t\tc_state     <= CS_IDLE;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tendcase                       \n\t\tend\n\tend\nend"
    ]
}