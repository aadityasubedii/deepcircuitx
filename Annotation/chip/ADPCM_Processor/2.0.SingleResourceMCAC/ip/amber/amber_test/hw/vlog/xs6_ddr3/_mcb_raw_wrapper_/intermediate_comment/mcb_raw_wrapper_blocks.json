{
    "line_num": [
        [
            6640,
            6644
        ],
        [
            6625,
            6633
        ],
        [
            6614,
            6622
        ],
        [
            6604,
            6611
        ],
        [
            6595,
            6602
        ],
        [
            6587,
            6591
        ],
        [
            6575,
            6580
        ],
        [
            6570,
            6574
        ],
        [
            6568,
            6568
        ],
        [
            6567,
            6567
        ],
        [
            6566,
            6566
        ],
        [
            6565,
            6565
        ],
        [
            6552,
            6560
        ],
        [
            6541,
            6549
        ],
        [
            6215,
            6529
        ],
        [
            5747,
            6213
        ],
        [
            4884,
            5745
        ],
        [
            4647,
            4688
        ],
        [
            4643,
            4645
        ],
        [
            4602,
            4638
        ],
        [
            4560,
            4596
        ],
        [
            4474,
            4510
        ],
        [
            4433,
            4469
        ],
        [
            4388,
            4428
        ],
        [
            4348,
            4384
        ],
        [
            4303,
            4343
        ],
        [
            4262,
            4298
        ],
        [
            4221,
            4256
        ],
        [
            4176,
            4215
        ],
        [
            4130,
            4169
        ],
        [
            4118,
            4119
        ],
        [
            4112,
            4115
        ],
        [
            4099,
            4107
        ],
        [
            4098,
            4108
        ],
        [
            4095,
            4110
        ],
        [
            4085,
            4096
        ],
        [
            4074,
            4078
        ],
        [
            4061,
            4070
        ],
        [
            4033,
            4060
        ],
        [
            4029,
            4029
        ],
        [
            3958,
            4031
        ],
        [
            3463,
            3609
        ],
        [
            3453,
            3461
        ],
        [
            3448,
            3451
        ],
        [
            3428,
            3446
        ],
        [
            3403,
            3426
        ],
        [
            3389,
            3401
        ],
        [
            3361,
            3386
        ],
        [
            3335,
            3359
        ],
        [
            3296,
            3318
        ],
        [
            3267,
            3290
        ],
        [
            3233,
            3265
        ],
        [
            3213,
            3231
        ],
        [
            3179,
            3210
        ],
        [
            3148,
            3176
        ],
        [
            3111,
            3145
        ],
        [
            3061,
            3109
        ],
        [
            3031,
            3058
        ],
        [
            2991,
            3029
        ],
        [
            2969,
            2988
        ],
        [
            2951,
            2968
        ],
        [
            2934,
            2949
        ],
        [
            2902,
            2929
        ],
        [
            2860,
            2894
        ],
        [
            2826,
            2858
        ],
        [
            2791,
            2825
        ],
        [
            2759,
            2788
        ],
        [
            2724,
            2757
        ],
        [
            2694,
            2722
        ],
        [
            2641,
            2692
        ],
        [
            2605,
            2637
        ],
        [
            2567,
            2599
        ],
        [
            2530,
            2560
        ],
        [
            2495,
            2527
        ],
        [
            2464,
            2494
        ],
        [
            2426,
            2458
        ],
        [
            2391,
            2425
        ],
        [
            2354,
            2388
        ],
        [
            2305,
            2327
        ],
        [
            2257,
            2278
        ],
        [
            2221,
            2249
        ],
        [
            2190,
            2218
        ],
        [
            2159,
            2187
        ],
        [
            2126,
            2154
        ],
        [
            2097,
            2125
        ],
        [
            2066,
            2094
        ],
        [
            2047,
            2055
        ],
        [
            2037,
            2045
        ],
        [
            2027,
            2035
        ],
        [
            2017,
            2025
        ],
        [
            2006,
            2014
        ],
        [
            1996,
            2004
        ],
        [
            1986,
            1994
        ],
        [
            1976,
            1984
        ],
        [
            1955,
            1975
        ],
        [
            1771,
            1810
        ],
        [
            1674,
            1948
        ],
        [
            1436,
            1674
        ],
        [
            1199,
            1435
        ],
        [
            1197,
            1951
        ],
        [
            1178,
            1189
        ],
        [
            1159,
            1171
        ],
        [
            1154,
            1154
        ],
        [
            1144,
            1149
        ],
        [
            1134,
            1140
        ],
        [
            1120,
            1131
        ],
        [
            595,
            600
        ]
    ],
    "blocks": [
        "generate\nif( C_NUM_DQ_PINS == 16) begin : gen_udm\nOBUFT iob_udm (.I(ioi_udm), .T(t_udm), .O(mcbx_dram_udm)); \nend\nendgenerate",
        "generate\nif((C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) && C_NUM_DQ_PINS == 16) begin: gen_udqs_pullupdn\nPULLDOWN udqs_pulldown (.O(mcbx_dram_udqs));\nend else if(C_NUM_DQ_PINS == 16) begin: gen_udqs_pullupdn_ds\nPULLDOWN udqs_pulldown (.O(mcbx_dram_udqs));\nPULLUP   udqs_n_pullup (.O(mcbx_dram_udqs_n));\n\nend\nendgenerate",
        "generate \nif(C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) begin: gen_dqs_pullupdn\nPULLDOWN dqs_pulldown (.O(mcbx_dram_dqs));\nend else begin: gen_dqs_pullupdn_ds\nPULLDOWN dqs_pulldown (.O(mcbx_dram_dqs));\nPULLUP dqs_n_pullup (.O(mcbx_dram_dqs_n));\n\nend\nendgenerate",
        "generate\nif((C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) && C_NUM_DQ_PINS == 16) begin: gen_udqs_iobuf\nIOBUF iob_udqs  (.IO(mcbx_dram_udqs), .I(ioi_udqs),.T(t_udqs),.O(in_pre_udqsp));\nend else if(C_NUM_DQ_PINS == 16) begin: gen_udqs_iobufds\nIOBUFDS iob_udqs  (.IO(mcbx_dram_udqs),.IOB(mcbx_dram_udqs_n), .I(ioi_udqs),.T(t_udqs),.O(in_pre_udqsp));\n\nend\nendgenerate",
        "generate \nif(C_MEM_TYPE == \"DDR\" || C_MEM_TYPE ==\"MDDR\" || (C_MEM_TYPE == \"DDR2\" && (C_MEM_DDR2_DIFF_DQS_EN == \"NO\"))) begin: gen_dqs_iobuf\nIOBUF iob_dqs  (.IO(mcbx_dram_dqs), .I(ioi_dqs),.T(t_dqs),.O(in_pre_dqsp));\nend else begin: gen_dqs_iobufds\nIOBUFDS iob_dqs  (.IO(mcbx_dram_dqs),.IOB(mcbx_dram_dqs_n), .I(ioi_dqs),.T(t_dqs),.O(in_pre_dqsp));\n\nend\nendgenerate",
        "generate\n      for(dq_i = 0; dq_i < C_NUM_DQ_PINS; dq_i = dq_i + 1) begin : gen_dq_iobuft\n         IOBUF gen_iob_dq_inst (.IO(mcbx_dram_dq[dq_i]),.I(ioi_dq[dq_i]),.T(t_dq[dq_i]),.O(in_pre_dq[dq_i]));\n      end\nendgenerate",
        "generate\nif((C_MEM_TYPE == \"DDR3\"  && (C_MEM_DDR3_RTT != \"OFF\" || C_MEM_DDR3_DYN_WRT_ODT != \"OFF\"))\n ||(C_MEM_TYPE == \"DDR2\" &&  C_MEM_DDR2_RTT != \"OFF\") ) begin : gen_dram_odt\nOBUFT iob_odt (.O(mcbx_dram_odt),.I(ioi_odt),.T(t_odt));\nend\nendgenerate",
        "generate \nif (C_MEM_TYPE == \"DDR3\") begin : gen_ddr3_rst\nOBUFT iob_rst (.O(mcbx_dram_ddr3_rst),.I(ioi_rst),.T(t_rst));\nend\nendgenerate",
        "OBUFT iob_cke (.O(mcbx_dram_cke),.I(ioi_cke),.T(t_cke));",
        "OBUFT iob_we  (.O(mcbx_dram_we_n ),.I(ioi_we ),.T(t_we ));",
        "OBUFT iob_cas (.O(mcbx_dram_cas_n),.I(ioi_cas),.T(t_cas));",
        "OBUFT iob_ras (.O(mcbx_dram_ras_n),.I(ioi_ras),.T(t_ras));",
        "   generate \n      for(ba_i = 0; ba_i < C_MEM_BANKADDR_WIDTH; ba_i = ba_i + 1) begin : gen_ba_obuft\n        OBUFT iob_ba_inst\n        (.I  ( ioi_ba[ba_i]), \n         .T   ( t_ba[ba_i]), \n         .O ( mcbx_dram_ba[ba_i])\n        );\n      end       \n   endgenerate",
        "   generate \n      for(addr_i = 0; addr_i < C_MEM_ADDR_WIDTH; addr_i = addr_i + 1) begin : gen_addr_obuft\n        OBUFT iob_addr_inst\n        (.I  ( ioi_addr[addr_i]), \n         .T   ( t_addr[addr_i]), \n         .O ( mcbx_dram_addr[addr_i])\n        );\n      end       \n   endgenerate",
        "generate\nif(C_NUM_DQ_PINS == 4 ) begin : dq_3_0_data\n\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\n\nend\nendgenerate",
        "generate\nif(C_NUM_DQ_PINS == 8 ) begin : dq_7_0_data\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\nwire aux_sdi_out_6;\nwire aux_sdi_out_7;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ6_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_6\n(\n  .AUXSDO             (aux_sdi_out_6),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[6]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[6]),\n  .SDO(),\n  .TOUT               (t_dq[6]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_7),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[6]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[6]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[6]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ7_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_7\n(\n  .AUXSDO             (aux_sdi_out_7),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[7]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[7]),\n  .SDO(),\n  .TOUT               (t_dq[7]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[7]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[7]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[7]) \n);\n\n\n\nwire aux_sdi_out_4;\nwire aux_sdi_out_5;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ4_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_4\n(\n  .AUXSDO             (aux_sdi_out_4),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[4]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[4]),\n  .SDO(),\n  .TOUT               (t_dq[4]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_5),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[4]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[4]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[4]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ5_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_5\n(\n  .AUXSDO             (aux_sdi_out_5),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[5]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[5]),\n  .SDO(),\n  .TOUT               (t_dq[5]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_6),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[5]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[5]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[5]) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\nend\nendgenerate",
        "generate\nif(C_NUM_DQ_PINS == 16 ) begin : dq_15_0_data\n\n\n\n\nwire aux_sdi_out_14;\nwire aux_sdi_out_15;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ14_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (7),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n)\niodrp2_dq_14\n(\n  .AUXSDO             (aux_sdi_out_14),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[14]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[14]),\n  .SDO(),\n  .TOUT               (t_dq[14]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_15),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[14]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[14]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[14]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ15_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (7),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_15\n(\n  .AUXSDO             (aux_sdi_out_15),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[15]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[15]),\n  .SDO(),\n  .TOUT               (t_dq[15]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (1'b0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[15]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[15]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[15]) \n);\n\n\n\nwire aux_sdi_out_12;\nwire aux_sdi_out_13;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ12_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (6),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_12\n(\n  .AUXSDO             (aux_sdi_out_12),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[12]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[12]),\n  .SDO(),\n  .TOUT               (t_dq[12]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_13),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[12]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[12]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[12]) \n);\n\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ13_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (6),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_13\n(\n  .AUXSDO             (aux_sdi_out_13),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[13]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[13]),\n  .SDO(),\n  .TOUT               (t_dq[13]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_14),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[13]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[13]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[13]) \n);\n\n\nwire aux_sdi_out_udqsp;\nwire aux_sdi_out_udqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (UDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (14),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_udqsp_0\n(\n  .AUXSDO             (aux_sdi_out_udqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_udqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_udqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_udqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_udqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (UDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (14),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_udqsn_0\n(\n  .AUXSDO             (aux_sdi_out_udqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_udqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_udqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_12),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_udqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udqsn_tq) \n);\n\n\nwire aux_sdi_out_10;\nwire aux_sdi_out_11;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ10_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (5),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_10\n(\n  .AUXSDO             (aux_sdi_out_10),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[10]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[10]),\n  .SDO(),\n  .TOUT               (t_dq[10]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_11),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[10]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[10]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[10]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ11_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (5),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_11\n(\n  .AUXSDO             (aux_sdi_out_11),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[11]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[11]),\n  .SDO(),\n  .TOUT               (t_dq[11]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_udqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[11]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[11]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[11])\n);\n\n\n\nwire aux_sdi_out_8;\nwire aux_sdi_out_9;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ8_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (4),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_8\n(\n  .AUXSDO             (aux_sdi_out_8),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[8]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[8]),\n  .SDO(),\n  .TOUT               (t_dq[8]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_9),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[8]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[8]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[8]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ9_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (4),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_9\n(\n  .AUXSDO             (aux_sdi_out_9),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[9]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[9]),\n  .SDO(),\n  .TOUT               (t_dq[9]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_10),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[9]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[9]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[9]) \n);\n\n\nwire aux_sdi_out_0;\nwire aux_sdi_out_1;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ0_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_0\n(\n  .AUXSDO             (aux_sdi_out_0),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[0]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[0]),\n  .SDO(),\n  .TOUT               (t_dq[0]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_1),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[0]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[0]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[0]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ1_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (0),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_1\n(\n  .AUXSDO             (aux_sdi_out_1),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[1]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[1]),\n  .SDO(),\n  .TOUT               (t_dq[1]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_8),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[1]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[1]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[1]) \n);\n\n\nwire aux_sdi_out_2;\nwire aux_sdi_out_3;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ2_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_2\n(\n  .AUXSDO             (aux_sdi_out_2),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[2]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[2]),\n  .SDO(),\n  .TOUT               (t_dq[2]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_3),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[2]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[2]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[2]) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ3_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (1),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_3\n(\n  .AUXSDO             (aux_sdi_out_3),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[3]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[3]),\n  .SDO(),\n  .TOUT               (t_dq[3]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_0),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[3]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[3]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[3]) \n);\n\n\nwire aux_sdi_out_dqsp;\nwire aux_sdi_out_dqsn;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSP_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsp_0\n(\n  .AUXSDO             (aux_sdi_out_dqsp),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqs),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_m),\n  .SDO(),\n  .TOUT               (t_dqs),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsn),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsp_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsp_tq) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQS_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (LDQSN_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (15),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQS_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dqsn_0\n(\n  .AUXSDO             (aux_sdi_out_dqsn),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dqsn),\n  .DQSOUTN(),\n  .DQSOUTP            (idelay_dqs_ioi_s),\n  .SDO(),\n  .TOUT               (t_dqsn),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_2),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dqsp),\n  .IOCLK0             (ioclk0),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dqsn_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dqsn_tq) \n);\n\nwire aux_sdi_out_6;\nwire aux_sdi_out_7;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ6_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_6\n(\n  .AUXSDO             (aux_sdi_out_6),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[6]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[6]),\n  .SDO(),\n  .TOUT               (t_dq[6]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_7),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[6]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[6]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[6]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ7_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (3),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_7\n(\n  .AUXSDO             (aux_sdi_out_7),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[7]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[7]),\n  .SDO(),\n  .TOUT               (t_dq[7]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_dqsp),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[7]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[7]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[7]) \n);\n\n\n\nwire aux_sdi_out_4;\nwire aux_sdi_out_5;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ4_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_4\n(\n  .AUXSDO             (aux_sdi_out_4),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[4]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[4]),\n  .SDO(),\n  .TOUT               (t_dq[4]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_5),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[4]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[4]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[4]) \n);\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (DQ5_TAP_DELAY_VAL),  \n.MCB_ADDRESS          (2),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_5\n(\n  .AUXSDO             (aux_sdi_out_5),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_dq[5]),\n  .DQSOUTN(),\n  .DQSOUTP            (in_dq[5]),\n  .SDO(),\n  .TOUT               (t_dq[5]),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_6),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN            (in_pre_dq[5]),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (dq_oq[5]),\n  .SDI                (ioi_drp_sdo),\n  .T                  (dq_tq[5]) \n);\n\n\n\nwire aux_sdi_out_ldm;\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_MASTER),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_udm\n(\n  .AUXSDO             (ioi_drp_sdi),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_udm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_udm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_ldm),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (udm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (udm_t) \n);\n\n\n\n\n\nIODRP2_MCB #(\n.DATA_RATE            (C_DQ_IODRP2_DATA_RATE),   \n.IDELAY_VALUE         (0),  \n.MCB_ADDRESS          (8),  \n.ODELAY_VALUE         (0),  \n.SERDES_MODE          (C_DQ_IODRP2_SERDES_MODE_SLAVE),   \n.SIM_TAPDELAY_VALUE   (10)  \n\n)\niodrp2_dq_ldm\n(\n  .AUXSDO             (aux_sdi_out_ldm),\n  .DATAOUT(),\n  .DATAOUT2(),\n  .DOUT               (ioi_ldm),\n  .DQSOUTN(),\n  .DQSOUTP(),\n  .SDO(),\n  .TOUT               (t_ldm),\n  .ADD                (ioi_drp_add),\n  .AUXADDR            (ioi_drp_addr),\n  .AUXSDOIN           (aux_sdi_out_4),\n  .BKST               (ioi_drp_broadcast),\n  .CLK                (ioi_drp_clk),\n  .CS                 (ioi_drp_cs),\n  .IDATAIN(1'b0),\n  .IOCLK0             (ioclk90),\n  .IOCLK1(1'b0),\n  .MEMUPDATE          (ioi_drp_update),\n  .ODATAIN            (ldm_oq),\n  .SDI                (ioi_drp_sdo),\n  .T                  (ldm_t) \n);\nend\nendgenerate",
        "generate\n      for(dq = 0; dq < C_NUM_DQ_PINS; dq = dq + 1) begin : gen_dq\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2),           \n  .TRAIN_PATTERN (5)            \n) oserdes2_dq_0 \n(\n  .OQ       (dq_oq[dq]),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (dq_tq[dq]),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqo_p[dq]),\n  .D2       (dqo_n[dq]),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (ioi_drp_train)\n);\n\nend",
        "wire dq_oq [C_NUM_DQ_PINS-1:0];\nwire dq_tq [C_NUM_DQ_PINS-1:0];\n",
        "OSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ldm_0 \n(\n  .OQ       (ldm_oq),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (ldm_t),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqplm),\n  .D2       (dqnlm),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n",
        "OSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_udm_0 \n(\n  .OQ       (udm_oq),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (udm_t),\n  .CLK0     (ioclk90),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (dqpum),\n  .D2       (dqnum),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_90),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1       (dqIO_w_en_0),\n  .T2       (dqIO_w_en_0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE      (1'b1),\n  .TRAIN    (1'b0)\n);\n",
        "OSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ck_0 \n(\n  .OQ       (ioi_ck),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ       (t_ck),\n  .CLK0     (ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1       (1'b0),\n  .D2       (1'b1),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n\n  .RST      (1'b0),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n);",
        "OSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_we_0 \n(\n  .OQ       (ioi_we),\n  .TQ       (t_we),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (we_90),\n  .D2       (we_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n);\n",
        "generate \nif (C_MEM_TYPE == \"DDR3\"  ) begin : gen_ioi_rst\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_rst_0 \n(\n  .OQ       (ioi_rst),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_rst),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (rst_90),\n  .D2       (rst_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\nend\nendgenerate",
        "OSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ras_0 \n(\n  .OQ       (ioi_ras),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_ras),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (ras_90),\n  .D2       (ras_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1 (1'b0),\n  .T2 (1'b0),\n  .T3 (1'b0),\n  .T4 (1'b0),\n  .TCE (1'b1),\n  .TRAIN    (1'b0)\n    );\n",
        "generate\nif(C_MEM_TYPE == \"DDR3\" || C_MEM_TYPE == \"DDR2\" ) begin : gen_ioi_odt\n\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_odt_0 \n(\n  .OQ       (ioi_odt),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_odt),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (odt_90),\n  .D2       (odt_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\nend\nendgenerate",
        "OSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)    ,       \n  .TRAIN_PATTERN (15)\n) ioi_cke_0 \n(\n  .OQ       (ioi_cke),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_cke),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (cke_90),\n  .D2       (cke_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (pll_lock),\n  .RST      (1'b0),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (cke_train)\n    );",
        "OSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_cas_0 \n(\n  .OQ       (ioi_cas),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_cas),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (cas_90),\n  .D2       (cas_90),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );",
        "   generate \n      for(ba_ioi = 0; ba_ioi < C_MEM_BANKADDR_WIDTH; ba_ioi = ba_ioi + 1) begin : gen_ba_oserdes2\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_ba_0  \n(\n  .OQ       (ioi_ba[ba_ioi]),\n  .SHIFTOUT1 (),\n  .SHIFTOUT2 (),\n  .SHIFTOUT3 (),\n  .SHIFTOUT4 (),\n  .TQ       (t_ba[ba_ioi]),\n  .CLK0     (ioclk0),\n  .CLK1 (1'b0),\n  .CLKDIV (1'b0),\n  .D1       (ba_90[ba_ioi]),\n  .D2       (ba_90[ba_ioi]),\n  .D3 (1'b0),\n  .D4 (1'b0),\n  .IOCE     (pll_ce_0),\n  .OCE      (1'b1),\n  .RST      (int_sys_rst),\n  .SHIFTIN1 (1'b0),\n  .SHIFTIN2 (1'b0),\n  .SHIFTIN3 (1'b0),\n  .SHIFTIN4 (1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN    (1'b0)\n    );\n end       \n   endgenerate",
        "   generate \n      for(addr_ioi = 0; addr_ioi < C_MEM_ADDR_WIDTH; addr_ioi = addr_ioi + 1) begin : gen_addr_oserdes2\nOSERDES2 #(\n  .BYPASS_GCLK_FF (\"TRUE\"),\n  .DATA_RATE_OQ  (C_OSERDES2_DATA_RATE_OQ),         \n  .DATA_RATE_OT  (C_OSERDES2_DATA_RATE_OT),         \n  .OUTPUT_MODE   (C_OSERDES2_OUTPUT_MODE_SE),          \n  .SERDES_MODE   (C_OSERDES2_SERDES_MODE_MASTER),          \n  .DATA_WIDTH    (2)           \n) ioi_addr_0  \n(\n  .OQ(ioi_addr[addr_ioi]),\n  .SHIFTOUT1(),\n  .SHIFTOUT2(),\n  .SHIFTOUT3(),\n  .SHIFTOUT4(),\n  .TQ(t_addr[addr_ioi]),\n  .CLK0(ioclk0),\n  .CLK1(1'b0),\n  .CLKDIV(1'b0),\n  .D1(address_90[addr_ioi]),\n  .D2(address_90[addr_ioi]),\n  .D3(1'b0),\n  .D4(1'b0),\n  .IOCE(pll_ce_0),\n  .OCE(1'b1),\n  .RST(int_sys_rst),\n  .SHIFTIN1(1'b0),\n  .SHIFTIN2(1'b0),\n  .SHIFTIN3(1'b0),\n  .SHIFTIN4(1'b0),\n  .T1(1'b0),\n  .T2(1'b0),\n  .T3(1'b0),\n  .T4(1'b0),\n  .TCE(1'b1),\n  .TRAIN(1'b0)\n    );\n end       \n   endgenerate",
        "end \nendgenerate",
        "    if( C_MEM_TYPE != \"DDR2\") begin : gen_cketrain_b\n    \n        assign cke_train = 1'b0;\n    end        ",
        "        begin \n        if (int_sys_rst)\n           cke_train_reg <= 1'b0;\n        else \n           if ( wait_200us_done_r1 && ~wait_200us_done_r2 )\n               cke_train_reg <= 1'b1;\n           else if ( uo_done_cal)\n               cke_train_reg <= 1'b0;\n        end",
        "        always @ ( posedge ui_clk, posedge int_sys_rst)\n        begin \n        if (int_sys_rst)\n           cke_train_reg <= 1'b0;\n        else \n           if ( wait_200us_done_r1 && ~wait_200us_done_r2 )\n               cke_train_reg <= 1'b1;\n           else if ( uo_done_cal)\n               cke_train_reg <= 1'b0;\n        end\n        ",
        "          wait_200us_done_r2 <= wait_200us_done_r1;\n        end\n        \n        always @ ( posedge ui_clk, posedge int_sys_rst)\n        begin \n        if (int_sys_rst)\n           cke_train_reg <= 1'b0;\n        else \n           if ( wait_200us_done_r1 && ~wait_200us_done_r2 )\n               cke_train_reg <= 1'b1;\n           else if ( uo_done_cal)\n               cke_train_reg <= 1'b0;\n        end\n        \n        assign cke_train = cke_train_reg;\n    end",
        "        always @ ( posedge ui_clk)\n        begin \n          \n          \n          if (wait_200us_counter[14] && wait_200us_counter[13])\n             wait_200us_done_r1 <= 1'b1;\n          else\n             wait_200us_done_r1 <= 1'b0;\n          \n\n          wait_200us_done_r2 <= wait_200us_done_r1;\n        end",
        "        initial\n        begin\n           wait_200us_counter = 16'hFFFF;\n           $display(\"The 200 us wait period required before CKE goes active has been skipped in Simulation\\n\");\n        end       ",
        "        always @ (posedge ui_clk, posedge int_sys_rst)\n        begin\n            if (int_sys_rst)\n                wait_200us_counter <= 'b0;\n            else \n               if (wait_200us_counter[15])  \n                   wait_200us_counter <= wait_200us_counter                        ;\n               else\n                   wait_200us_counter <= wait_200us_counter + 1'b1;\n        end ",
        "generate   \nif ( C_CALIB_SOFT_IP != \"TRUE\") begin: gen_no_term_calib   \n    assign DONE_SOFTANDHARD_CAL = 1'b0;\n    assign MCB_SYSRST = int_sys_rst | (~wait_200us_counter[15]);\n    assign mcb_recal = calib_recal;\n    assign mcb_ui_read = ui_read;\n    assign mcb_ui_add = ui_add;\n    assign mcb_ui_cs = ui_cs;  \n    assign mcb_ui_clk = ui_clk;\n    assign mcb_ui_sdi = ui_sdi;\n    assign mcb_ui_addr = ui_addr;\n    assign mcb_ui_broadcast = ui_broadcast;\n    assign mcb_ui_drp_update = ui_drp_update;\n    assign mcb_ui_done_cal = ui_done_cal;\n    assign mcb_ui_cmd = ui_cmd;\n    assign mcb_ui_cmd_in = ui_cmd_in;\n    assign mcb_ui_cmd_en = ui_cmd_en;\n    assign mcb_ui_dq_lower_dec = ui_dq_lower_dec;\n    assign mcb_ui_dq_lower_inc = ui_dq_lower_inc;\n    assign mcb_ui_dq_upper_dec = ui_dq_upper_dec;\n    assign mcb_ui_dq_upper_inc = ui_dq_upper_inc;\n    assign mcb_ui_udqs_inc = ui_udqs_inc;\n    assign mcb_ui_udqs_dec = ui_udqs_dec;\n    assign mcb_ui_ldqs_inc = ui_ldqs_inc;\n    assign mcb_ui_ldqs_dec = ui_ldqs_dec; \n    assign selfrefresh_mode = 1'b0;\n \n    if (C_SIMULATION == \"FALSE\") begin: init_sequence",
        "        assign mcb_ui_clk = ui_clk;",
        "generate   \nif ( C_CALIB_SOFT_IP == \"TRUE\") begin: gen_term_calib\n\n\n  \n\n \nmcb_soft_calibration_top  # (\n\n    .C_MEM_TZQINIT_MAXCNT (C_MEM_TZQINIT_MAXCNT),\n    .C_MC_CALIBRATION_MODE(C_MC_CALIBRATION_MODE),\n    .SKIP_IN_TERM_CAL     (C_SKIP_IN_TERM_CAL),\n    .SKIP_DYNAMIC_CAL     (C_SKIP_DYNAMIC_CAL),\n    .SKIP_DYN_IN_TERM     (C_SKIP_DYN_IN_TERM),\n    .C_SIMULATION         (C_SIMULATION),\n    .C_MEM_TYPE           (C_MEM_TYPE)\n        )\n  mcb_soft_calibration_top_inst (\n    .UI_CLK               (ui_clk),               \n    .RST                  (int_sys_rst),              \n    .IOCLK                (ioclk0),               \n    .DONE_SOFTANDHARD_CAL (DONE_SOFTANDHARD_CAL), \n    .PLL_LOCK             (gated_pll_lock),\n    \n    .SELFREFRESH_REQ      (soft_cal_selfrefresh_req),    \n    .SELFREFRESH_MCB_MODE (selfrefresh_mcb_mode), \n    .SELFREFRESH_MCB_REQ  (selfrefresh_mcb_enter),\n    .SELFREFRESH_MODE     (selfrefresh_mode),     \n    \n    \n    \n    .MCB_UIADD            (mcb_ui_add),\n    .MCB_UISDI            (mcb_ui_sdi),\n    .MCB_UOSDO            (uo_sdo),               \n    .MCB_UODONECAL        (hard_done_cal),        \n    .MCB_UOREFRSHFLAG     (uo_refrsh_flag),       \n    .MCB_UICS             (mcb_ui_cs),            \n    .MCB_UIDRPUPDATE      (mcb_ui_drp_update),    \n    .MCB_UIBROADCAST      (mcb_ui_broadcast),     \n    .MCB_UIADDR           (mcb_ui_addr),          \n    .MCB_UICMDEN          (mcb_ui_cmd_en),        \n    .MCB_UIDONECAL        (mcb_ui_done_cal),      \n    .MCB_UIDQLOWERDEC     (mcb_ui_dq_lower_dec),\n    .MCB_UIDQLOWERINC     (mcb_ui_dq_lower_inc),\n    .MCB_UIDQUPPERDEC     (mcb_ui_dq_upper_dec),\n    .MCB_UIDQUPPERINC     (mcb_ui_dq_upper_inc),\n    .MCB_UILDQSDEC        (mcb_ui_ldqs_dec),\n    .MCB_UILDQSINC        (mcb_ui_ldqs_inc),\n    .MCB_UIREAD           (mcb_ui_read),          \n    .MCB_UIUDQSDEC        (mcb_ui_udqs_dec),\n    .MCB_UIUDQSINC        (mcb_ui_udqs_inc),\n    .MCB_RECAL            (mcb_recal),\n    .MCB_SYSRST           (MCB_SYSRST),           \n    .MCB_UICMD            (mcb_ui_cmd),\n    .MCB_UICMDIN          (mcb_ui_cmd_in),\n    .MCB_UIDQCOUNT        (mcb_ui_dqcount),\n    .MCB_UODATA           (uo_data),\n    .MCB_UODATAVALID      (uo_data_valid),\n    .MCB_UOCMDREADY       (uo_cmd_ready_in),\n    .MCB_UO_CAL_START     (uo_cal_start),\n    .RZQ_Pin              (rzq),\n    .ZIO_Pin              (zio),\n    .CKE_Train            (cke_train)\n    \n     );\n\n\n\n\n\n\n        assign mcb_ui_clk = ui_clk;\nend\nendgenerate",
        "                \n                \n\n  end else if(C_PORT_CONFIG == \"B128\" ) begin : u_config_5\n\n\n               \n               \n               assign mig_p0_arb_en      =  p0_arb_en ;\n               assign mig_p0_cmd_clk     =  p0_cmd_clk  ;\n               assign mig_p0_cmd_en      =  p0_cmd_en   ;\n               assign mig_p0_cmd_ra      =  p0_cmd_ra  ;\n               assign mig_p0_cmd_ba      =  p0_cmd_ba   ;\n               assign mig_p0_cmd_ca      =  p0_cmd_ca  ;\n               assign mig_p0_cmd_instr   =  p0_cmd_instr;\n               assign mig_p0_cmd_bl      =   {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n               \n               assign p0_cmd_empty       =      mig_p0_cmd_empty ;\n               assign p0_cmd_full        =      mig_p0_cmd_full  ;\n               \n \n \n                \n                \n                assign mig_p0_wr_clk   = p0_wr_clk;\n                assign mig_p0_rd_clk   = p0_rd_clk;\n                assign mig_p1_wr_clk   = p0_wr_clk;\n                assign mig_p1_rd_clk   = p0_rd_clk;\n                \n                assign mig_p2_clk   = p0_rd_clk;\n                assign mig_p3_clk   = p0_wr_clk;\n                assign mig_p4_clk   = p0_rd_clk;\n                assign mig_p5_clk   = p0_wr_clk;\n                \n                \n                if (C_USR_INTERFACE_MODE == \"AXI\") begin\n                \n                   assign mig_p0_wr_en    = p0_wr_en ;\n                   assign mig_p1_wr_en    = p0_wr_en ;\n                   assign mig_p3_en       = p0_wr_en ;\n                   assign mig_p5_en       = p0_wr_en ;\n                   end\n                else begin\n                        \n                   assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n                   assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                   assign mig_p3_en       = p0_wr_en & !p0_wr_full;\n                   assign mig_p5_en       = p0_wr_en & !p0_wr_full;\n                end        \n\n                \n                \n                \n                assign mig_p0_wr_data = p0_wr_data[31:0];\n                assign mig_p0_wr_mask = p0_wr_mask[3:0];\n                assign mig_p1_wr_data = p0_wr_data[63 : 32];\n                assign mig_p1_wr_mask = p0_wr_mask[7 : 4];                \n                assign mig_p3_wr_data = p0_wr_data[95 : 64];\n                assign mig_p3_wr_mask = p0_wr_mask[11 : 8];\n                assign mig_p5_wr_data = p0_wr_data[127 : 96];\n                assign mig_p5_wr_mask = p0_wr_mask[15 : 12];\n                \n                if (C_USR_INTERFACE_MODE == \"AXI\") begin\n                    assign mig_p0_rd_en    = p0_rd_en;\n                    assign mig_p1_rd_en    = p0_rd_en;\n                    assign mig_p2_en       = p0_rd_en;\n                    assign mig_p4_en       = p0_rd_en;\n                    end\n                else begin\n                    assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n                    assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n                    assign mig_p2_en       = p0_rd_en & !p0_rd_empty;\n                    assign mig_p4_en       = p0_rd_en & !p0_rd_empty;\n                end\n                \n                \n                assign p0_rd_data     = {mig_p4_rd_data , mig_p2_rd_data , mig_p1_rd_data , mig_p0_rd_data};\n                assign p0_rd_empty    = mig_p4_empty;\n                assign p0_rd_full     = mig_p4_full;\n                assign p0_rd_error    = mig_p0_rd_error | mig_p1_rd_error | mig_p2_error | mig_p4_error;  \n                assign p0_rd_overflow    = mig_p0_rd_overflow | mig_p1_rd_overflow | mig_p2_overflow | mig_p4_overflow; \n\n                assign p0_wr_underrun    = mig_p0_wr_underrun | mig_p1_wr_underrun | mig_p3_underrun | mig_p5_underrun;      \n                assign p0_wr_empty    = mig_p5_empty;\n                assign p0_wr_full     = mig_p5_full;\n                assign p0_wr_error    = mig_p0_wr_error | mig_p1_wr_error | mig_p3_error | mig_p5_error; \n                \n                assign p0_wr_count    = mig_p5_count;\n                assign p0_rd_count    = mig_p4_count;\n\n\n               \n               \n               assign mig_p1_arb_en      =      1'b0;\n               assign mig_p1_cmd_clk     =      1'b0;\n               assign mig_p1_cmd_en      =      1'b0;\n               assign mig_p1_cmd_ra      =      15'd0;\n               assign mig_p1_cmd_ba      =      3'd0;\n               assign mig_p1_cmd_ca      =      12'd0;\n               \n               assign mig_p1_cmd_instr   =      3'd0;\n               assign mig_p1_cmd_bl      =      6'd0;\n               \n               assign mig_p2_arb_en    =      1'b0;\n               assign mig_p2_cmd_clk     =      1'b0;\n               assign mig_p2_cmd_en      =      1'b0;\n               assign mig_p2_cmd_ra      =      15'd0;\n               assign mig_p2_cmd_ba      =      3'd0;\n               assign mig_p2_cmd_ca      =      12'd0;\n               \n               assign mig_p2_cmd_instr   =      3'd0;\n               assign mig_p2_cmd_bl      =      6'd0;\n               \n               assign mig_p3_arb_en    =      1'b0;\n               assign mig_p3_cmd_clk     =      1'b0;\n               assign mig_p3_cmd_en      =      1'b0;\n               assign mig_p3_cmd_ra      =      15'd0;\n               assign mig_p3_cmd_ba      =      3'd0;\n               assign mig_p3_cmd_ca      =      12'd0;\n               \n               assign mig_p3_cmd_instr   =      3'd0;\n               assign mig_p3_cmd_bl      =      6'd0;\n               \n               assign mig_p4_arb_en    =      1'b0;\n               assign mig_p4_cmd_clk     =      1'b0;\n               assign mig_p4_cmd_en      =      1'b0;\n               assign mig_p4_cmd_ra      =      15'd0;\n               assign mig_p4_cmd_ba      =      3'd0;\n               assign mig_p4_cmd_ca      =      12'd0;\n               \n               assign mig_p4_cmd_instr   =      3'd0;\n               assign mig_p4_cmd_bl      =      6'd0;\n               \n               assign mig_p5_arb_en    =      1'b0;\n               assign mig_p5_cmd_clk     =      1'b0;\n               assign mig_p5_cmd_en      =      1'b0;\n               assign mig_p5_cmd_ra      =      15'd0;\n               assign mig_p5_cmd_ba      =      3'd0;\n               assign mig_p5_cmd_ca      =      12'd0;\n               \n               assign mig_p5_cmd_instr   =      3'd0;\n               assign mig_p5_cmd_bl      =      6'd0;\n                             \n\n                                \nend\nendgenerate",
        "                       assign mig_p4_cmd_bl      =      6'd0;\n\n                       assign mig_p5_cmd_clk     =      1'b0;\n                       assign mig_p5_cmd_en      =      1'b0;\n                       assign mig_p5_cmd_ra      =      15'd0;\n                       assign mig_p5_cmd_ba      =      3'd0;\n                       assign mig_p5_cmd_ca      =      12'd0;                       \n                       assign mig_p5_cmd_instr   =      3'd0;\n                       assign mig_p5_cmd_bl      =      6'd0;",
        "                       assign mig_p4_cmd_en      =      1'b0;\n                       assign mig_p4_cmd_ra      =      15'd0;\n                       assign mig_p4_cmd_ba      =      3'd0;\n                       assign mig_p4_cmd_ca      =      12'd0;",
        "                       assign p1_rd_error    = 'b0; \n                       assign p1_rd_full     = 'b0; \n                       assign p1_rd_empty    = 'b0; \n                       assign p1_rd_data     = 'b0;\n                       \n                 end               \n                \n                  \n                       assign mig_p3_arb_en      =      1'b0;\n                       assign mig_p4_arb_en      =      1'b0;\n                       assign mig_p5_arb_en      =      1'b0;\n                       \n                       assign mig_p3_cmd_clk     =      1'b0;\n                       assign mig_p3_cmd_en      =      1'b0;\n                       assign mig_p3_cmd_ra      =      15'd0;\n                       assign mig_p3_cmd_ba      =      3'd0;\n                       assign mig_p3_cmd_ca      =      12'd0;\n                       assign mig_p3_cmd_instr   =      3'd0;\n",
        "                       assign mig_p2_cmd_ca      = 'b0;\n                       assign mig_p2_cmd_instr   = 'b0;\n                       assign mig_p2_cmd_bl      = 'b0;\n                       assign mig_p2_clk      = 'b0;\n                       assign mig_p3_clk      = 'b0;\n                       assign mig_p4_clk      = 'b0;\n                       assign mig_p5_clk      = 'b0;\n                       assign mig_p3_en       = 'b0;\n                       assign mig_p5_en       = 'b0;\n                       assign mig_p3_wr_data  = 'b0;\n                       assign mig_p3_wr_mask  = 'b0;\n                       assign mig_p5_wr_data  = 'b0;\n                       assign mig_p5_wr_mask  = 'b0; \n                       assign mig_p2_en    = 'b0;\n                       assign mig_p4_en    = 'b0;\n                       assign p1_cmd_empty    = 'b0;  \n                       assign p1_cmd_full     = 'b0;  \n\n                       assign p1_wr_count    = 'b0;\n                       assign p1_rd_count    = 'b0;\n                       assign p1_wr_full     = 'b0;\n                       assign p1_wr_error    = 'b0;\n                       assign p1_wr_empty    = 'b0;\n                       assign p1_wr_underrun = 'b0;",
        "                        assign p1_rd_data     = {mig_p4_rd_data , mig_p2_rd_data};\n                       \n                       \n                 end else\n                 begin\n                       assign mig_p2_arb_en      = 'b0;\n                   \n                  \n                  \n                       \n                       assign mig_p2_cmd_clk     = 'b0;\n                       assign mig_p2_cmd_en      = 'b0;\n                       assign mig_p2_cmd_ra      = 'b0;",
        "                        assign mig_p5_wr_data  = p1_wr_data[63 : 32];\n                        assign mig_p5_wr_mask  = p1_wr_mask[7 : 4];                       \n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p2_en    = p1_rd_en ;\n                        else\n                           assign mig_p2_en    = p1_rd_en & !p1_rd_empty;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p4_en    = p1_rd_en ;\n                        else\n                           assign mig_p4_en    = p1_rd_en & !p1_rd_empty;\n\n\n                        assign p1_cmd_empty       =      mig_p2_cmd_empty ;  \n                        assign p1_cmd_full        =      mig_p2_cmd_full  ;\n\n                        assign p1_wr_count    = mig_p5_count;\n                        assign p1_rd_count    = mig_p4_count;\n                        assign p1_wr_full    = mig_p5_full;\n                        assign p1_wr_error    = mig_p5_error | mig_p5_error;\n                        assign p1_wr_empty    = mig_p5_empty;\n                        assign p1_wr_underrun = mig_p3_underrun | mig_p5_underrun;\n                        assign p1_rd_overflow = mig_p4_overflow;\n                        assign p1_rd_error    = mig_p4_error;\n                        assign p1_rd_full     = mig_p4_full;",
        "                       assign mig_p2_cmd_instr   =      p1_cmd_instr;\n                       assign mig_p2_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n\n\n                        assign mig_p2_clk     = p1_rd_clk;\n                        assign mig_p3_clk     = p1_wr_clk;\n                        assign mig_p4_clk     = p1_rd_clk;\n                        assign mig_p5_clk     = p1_wr_clk;\n                         \n                        \n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p3_en    = p1_wr_en ;\n                        else\n                           assign mig_p3_en    = p1_wr_en & !p1_wr_full;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p5_en    = p1_wr_en ;\n                        else\n                           assign mig_p5_en    = p1_wr_en & !p1_wr_full;\n                        \n\n\n                        \n                        \n                        assign mig_p3_wr_data  = p1_wr_data[31:0];",
        "                        assign mig_p1_wr_en    = 'b0;\n                        assign mig_p0_wr_data  = 'b0;\n                        assign mig_p0_wr_mask  = 'b0;\n                        assign mig_p1_wr_data  = 'b0;\n                        assign mig_p1_wr_mask  = 'b0;            \n                   \n                        assign mig_p0_rd_en    = 'b0;\n                        assign mig_p1_rd_en    = 'b0;\n                        assign p0_rd_data     = 'b0;\n\n\n                        assign p0_cmd_empty   = 'b0;\n                        assign p0_cmd_full    = 'b0;\n                        assign p0_wr_empty    = 'b0;\n                        assign p0_wr_full     = 'b0;\n                        assign p0_wr_error    = 'b0;\n                        assign p0_wr_count    = 'b0;\n                        assign p0_rd_count    = 'b0;\n                        assign p0_wr_underrun = 'b0;  \n                        assign p0_rd_overflow = 'b0;\n                        assign p0_rd_error    = 'b0;\n                        assign p0_rd_full     = 'b0;\n                        assign p0_rd_empty    = 'b0;",
        "                        assign p0_cmd_full    =     mig_p0_cmd_full  ;\n                        assign p0_wr_empty    = mig_p1_wr_empty;      \n                        assign p0_wr_full    = mig_p1_wr_full;\n                        assign p0_wr_error    = mig_p1_wr_error | mig_p0_wr_error; \n                        assign p0_wr_count    = mig_p1_wr_count;\n                        assign p0_rd_count    = mig_p1_rd_count;\n                        assign p0_wr_underrun = mig_p1_wr_underrun | mig_p0_wr_underrun; \n                        assign p0_rd_overflow = mig_p1_rd_overflow | mig_p0_rd_overflow; \n                        assign p0_rd_error    = mig_p1_rd_error | mig_p0_rd_error; \n                        assign p0_rd_full     = mig_p1_rd_full;\n                        assign p0_rd_empty    = mig_p1_rd_empty;\n                       \n                       \n                 end else\n                 begin\n                       assign mig_p0_arb_en      =      'b0;\n                       assign mig_p0_cmd_clk     =      'b0;\n                       assign mig_p0_cmd_en      =      'b0;\n                       assign mig_p0_cmd_ra      =      'b0;\n                       assign mig_p0_cmd_ba      =      'b0;\n                       assign mig_p0_cmd_ca      =      'b0;\n                       assign mig_p0_cmd_instr   =      'b0;\n                       assign mig_p0_cmd_bl      =      'b0;\n",
        "                        assign mig_p0_rd_clk   = p0_rd_clk;\n                        assign mig_p1_wr_clk   = p0_wr_clk;\n                        assign mig_p1_rd_clk   = p0_rd_clk;\n                        \n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p0_wr_en    = p0_wr_en ;\n                        else\n                           assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p1_wr_en    = p0_wr_en ;\n                        else\n                           assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                        \n                        \n                        assign mig_p0_wr_data  = p0_wr_data[31:0];\n                        assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                        assign mig_p1_wr_data  = p0_wr_data[63 : 32];\n                        assign mig_p1_wr_mask  = p0_wr_mask[7 : 4];    \n\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p0_rd_en    = p0_rd_en ;\n                        else\n                           assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n\n                        if (C_USR_INTERFACE_MODE == \"AXI\")\n                           assign mig_p1_rd_en    = p0_rd_en ;\n                        else\n                           assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n                        \n                        assign p0_rd_data     = {mig_p1_rd_data , mig_p0_rd_data};\n                        ",
        "end else if(C_PORT_CONFIG == \"B64_B64\" ) begin : u_config_4\n\n               \n\n                 if (C_PORT_ENABLE[0] == 1'b1)\n                  begin\n               \n                       assign mig_p0_arb_en      =      p0_arb_en ;\n                       assign mig_p1_arb_en      =      p0_arb_en ;\n                       \n                       assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                       assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                       assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                       assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                       assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                       assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                       assign mig_p0_cmd_bl      =       {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n\n",
        "\n              \n               assign mig_p1_arb_en      =      1'b0;\n               assign mig_p1_cmd_clk     =      1'b0;\n               assign mig_p1_cmd_en      =      1'b0;\n               assign mig_p1_cmd_ra      =      15'd0;\n               assign mig_p1_cmd_ba      =      3'd0;\n               assign mig_p1_cmd_ca      =      12'd0;\n               \n               assign mig_p1_cmd_instr   =      3'd0;\n               assign mig_p1_cmd_bl      =      6'd0;\n                \n               assign mig_p3_arb_en    =      1'b0;\n               assign mig_p3_cmd_clk     =      1'b0;\n               assign mig_p3_cmd_en      =      1'b0;\n               assign mig_p3_cmd_ra      =      15'd0;\n               assign mig_p3_cmd_ba      =      3'd0;\n               assign mig_p3_cmd_ca      =      12'd0;\n               \n               assign mig_p3_cmd_instr   =      3'd0;\n               assign mig_p3_cmd_bl      =      6'd0;\n\n               assign mig_p5_arb_en    =      1'b0;\n               assign mig_p5_cmd_clk     =      1'b0;\n               assign mig_p5_cmd_en      =      1'b0;\n               assign mig_p5_cmd_ra      =      15'd0;\n               assign mig_p5_cmd_ba      =      3'd0;\n               assign mig_p5_cmd_ca      =      12'd0;\n               \n               assign mig_p5_cmd_instr   =      3'd0;\n               assign mig_p5_cmd_bl      =      6'd0;\n ",
        "               assign mig_p4_cmd_clk     = 'b0;   \n               assign mig_p4_cmd_en      = 'b0;   \n               assign mig_p4_cmd_ra      = 'b0;   \n               assign mig_p4_cmd_ba      = 'b0;   \n               assign mig_p4_cmd_ca      = 'b0;   \n               assign mig_p4_cmd_instr   = 'b0;   \n               assign mig_p4_cmd_bl      = 'b0;   \n               assign p2_cmd_empty       = 'b0;   \n               assign p2_cmd_full        = 'b0;   \n               assign mig_p5_en          = 'b0; \n               assign mig_p5_wr_data     = 'b0; \n               assign mig_p5_wr_mask     = 'b0; \n               assign mig_p4_en          = 'b0; \n\n                assign mig_p4_clk        = 'b0; \n                assign mig_p5_clk        = 'b0; \n\n                assign p2_rd_data        =   'b0;   \n                assign p2_wr_count       =   'b0;   \n                assign p2_rd_count       =   'b0;   \n                assign p2_wr_empty       =   'b0;   \n                assign p2_wr_full        =   'b0;   \n                assign p2_wr_error       =   'b0;   \n                assign p2_wr_underrun    =   'b0;   \n                assign p2_rd_overflow    =   'b0;     \n                assign p2_rd_error       =   'b0;   \n                assign p2_rd_full        =   'b0;   \n                assign p2_rd_empty       =   'b0;   \n",
        "       end\n       \n       if (C_PORT_ENABLE[2] == 1'b1)\n       begin\n               assign mig_p4_arb_en      = p2_arb_en ;\n               assign mig_p4_cmd_clk     = p2_cmd_clk  ;\n               assign mig_p4_cmd_en      = p2_cmd_en   ;\n               assign mig_p4_cmd_ra      = p2_cmd_ra  ;\n               assign mig_p4_cmd_ba      = p2_cmd_ba   ;\n               assign mig_p4_cmd_ca      = p2_cmd_ca  ;\n               assign mig_p4_cmd_instr   = p2_cmd_instr;\n               assign mig_p4_cmd_bl      = {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}   ;\n               assign p2_cmd_empty       = mig_p4_cmd_empty ; \n               assign p2_cmd_full        = mig_p4_cmd_full  ; \n               assign mig_p5_en          = p2_wr_en;\n               assign mig_p5_wr_data     = p2_wr_data[31:0];\n               assign mig_p5_wr_mask     = p2_wr_mask[3:0];\n               assign mig_p4_en          = p2_rd_en;\n               \n                assign mig_p4_clk        = p2_rd_clk;\n                assign mig_p5_clk        = p2_wr_clk;\n\n                assign p2_rd_data        = mig_p4_rd_data;\n                assign p2_wr_count       = mig_p5_count;\n                assign p2_rd_count       = mig_p4_count;\n                assign p2_wr_empty       = mig_p5_empty;\n                assign p2_wr_full        = mig_p5_full;\n                assign p2_wr_error       = mig_p5_error;  \n                assign p2_wr_underrun    = mig_p5_underrun;\n                assign p2_rd_overflow    = mig_p4_overflow;    \n                assign p2_rd_error       = mig_p4_error;\n                assign p2_rd_full        = mig_p4_full;\n                assign p2_rd_empty       = mig_p4_empty;\n               \n       end else",
        "               assign mig_p3_en       = p1_wr_en;\n               assign mig_p3_wr_data  = p1_wr_data[31:0];\n               assign mig_p3_wr_mask  = p1_wr_mask[3:0];\n               assign mig_p2_en       = p1_rd_en;\n\n               assign p1_rd_data        = mig_p2_rd_data;\n               assign p1_wr_count       = mig_p3_count;\n               assign p1_rd_count       = mig_p2_count;\n               assign p1_wr_empty       = mig_p3_empty;\n               assign p1_wr_error       = mig_p3_error;                 \n               assign p1_wr_full        = mig_p3_full;\n               assign p1_wr_underrun    = mig_p3_underrun;\n               assign p1_rd_overflow    = mig_p2_overflow; \n               assign p1_rd_error       = mig_p2_error;\n               assign p1_rd_full        = mig_p2_full;\n               assign p1_rd_empty       = mig_p2_empty;\n \n       end else\n       begin\n\n               assign mig_p2_arb_en      =     'b0; \n               assign mig_p2_cmd_clk     =     'b0; \n               assign mig_p2_cmd_en      =     'b0; \n               assign mig_p2_cmd_ra      =     'b0; \n               assign mig_p2_cmd_ba      =     'b0; \n               assign mig_p2_cmd_ca      =     'b0; \n               assign mig_p2_cmd_instr   =     'b0; \n               assign mig_p2_cmd_bl      =     'b0; \n               assign p1_cmd_empty       =     'b0; \n               assign p1_cmd_full        =     'b0; \n               assign mig_p3_en       = 'b0; \n               assign mig_p3_wr_data  = 'b0; \n               assign mig_p3_wr_mask  = 'b0; \n               assign mig_p2_en       = 'b0; \n\n               assign mig_p2_clk   = 'b0; \n               assign mig_p3_clk   = 'b0; \n               \n               assign p1_rd_data        = 'b0; \n               assign p1_wr_count       = 'b0; \n               assign p1_rd_count       = 'b0; \n               assign p1_wr_empty       = 'b0; \n               assign p1_wr_error       = 'b0;         \n               assign p1_wr_full        = 'b0; \n               assign p1_wr_underrun    = 'b0; \n               assign p1_rd_overflow    = 'b0; \n               assign p1_rd_error       = 'b0; \n               assign p1_rd_full        = 'b0; \n               assign p1_rd_empty       = 'b0; ",
        "               assign p0_wr_empty       =  'b0;\n               assign p0_wr_error       =  'b0;\n               assign p0_wr_full        =  'b0;\n               assign p0_wr_underrun    =  'b0;\n               assign p0_rd_overflow    =  'b0;\n               assign p0_rd_error       =  'b0;\n               assign p0_rd_full        =  'b0;\n                                         \n\n       end       \n       \n        \n \n       if (C_PORT_ENABLE[1] == 1'b1)\n       begin\n\n               assign mig_p2_arb_en      =      p1_arb_en ;\n               assign mig_p2_cmd_clk     =      p1_cmd_clk  ;\n               assign mig_p2_cmd_en      =      p1_cmd_en   ;\n               assign mig_p2_cmd_ra      =      p1_cmd_ra  ;\n               assign mig_p2_cmd_ba      =      p1_cmd_ba   ;\n               assign mig_p2_cmd_ca      =      p1_cmd_ca  ;\n               assign mig_p2_cmd_instr   =      p1_cmd_instr;\n               assign mig_p2_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n               assign p1_cmd_empty       =      mig_p2_cmd_empty;  \n               assign p1_cmd_full        =      mig_p2_cmd_full;   \n\n               assign mig_p2_clk         = p1_rd_clk;",
        "                assign p0_rd_overflow    = mig_p1_rd_overflow | mig_p0_rd_overflow; \n                assign p0_rd_error       = mig_p1_rd_error | mig_p0_rd_error; \n                assign p0_rd_full        = mig_p1_rd_full;\n\n \n       end else\n       begin\n       \n               assign mig_p0_arb_en      = 'b0;\n               assign mig_p0_cmd_clk     = 'b0;\n               assign mig_p0_cmd_en      = 'b0;\n               assign mig_p0_cmd_ra      = 'b0;\n               assign mig_p0_cmd_ba      = 'b0;\n               assign mig_p0_cmd_ca      = 'b0;\n               assign mig_p0_cmd_instr   = 'b0;\n               assign mig_p0_cmd_bl      = 'b0;\n               assign p0_cmd_empty       =  'b0;\n               assign p0_cmd_full        =  'b0;\n\n\n               assign mig_p0_wr_clk   = 'b0;\n               assign mig_p0_rd_clk   = 'b0;\n               assign mig_p1_wr_clk   = 'b0;\n               assign mig_p1_rd_clk   = 'b0;\n               \n               assign mig_p0_wr_en    = 'b0;\n               assign mig_p1_wr_en    = 'b0;\n               assign mig_p0_wr_data  = 'b0;\n               assign mig_p0_wr_mask  = 'b0;\n               assign mig_p1_wr_data  = 'b0;\n               assign mig_p1_wr_mask  = 'b0; \n\n               assign p0_rd_empty       = 'b0;\n               assign p0_rd_data        = 'b0;\n               assign mig_p0_rd_en      = 'b0;\n               assign mig_p1_rd_en      = 'b0;\n \n \n               assign p0_wr_count       =  'b0;",
        "               assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n               assign mig_p1_wr_data  = p0_wr_data[63 : 32];\n               assign mig_p1_wr_mask  = p0_wr_mask[7 : 4];     \n\n               assign p0_rd_empty       = mig_p1_rd_empty;\n               assign p0_rd_data        = {mig_p1_rd_data , mig_p0_rd_data}; \n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p0_rd_en    = p0_rd_en ;\n               else\n                   assign mig_p0_rd_en    = p0_rd_en & !p0_rd_empty;\n\n               if (C_USR_INTERFACE_MODE == \"AXI\")               \n                   assign mig_p1_rd_en    = p0_rd_en ;\n                else\n                   assign mig_p1_rd_en    = p0_rd_en & !p0_rd_empty;\n\n                assign p0_wr_count       = mig_p1_wr_count;  \n                assign p0_rd_count       = mig_p1_rd_count;\n                assign p0_wr_empty       = mig_p1_wr_empty;\n                assign p0_wr_error       = mig_p1_wr_error | mig_p0_wr_error;  ",
        "               assign p0_cmd_full        =  mig_p0_cmd_full  ;\n\n               assign mig_p0_wr_clk   = p0_wr_clk;\n               assign mig_p0_rd_clk   = p0_rd_clk;\n               assign mig_p1_wr_clk   = p0_wr_clk;\n               assign mig_p1_rd_clk   = p0_rd_clk;\n                \n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p0_wr_en    = p0_wr_en ;\n               else\n                   assign mig_p0_wr_en    = p0_wr_en & !p0_wr_full;\n\n               if (C_USR_INTERFACE_MODE == \"AXI\")\n                   assign mig_p1_wr_en    = p0_wr_en ;\n               else\n                   assign mig_p1_wr_en    = p0_wr_en & !p0_wr_full;\n                   \n               assign mig_p0_wr_data  = p0_wr_data[31:0];",
        "     \n  end else if(C_PORT_CONFIG == \"B64_B32_B32\" ) begin : u_config_3\n\n               \n \n \n       if (C_PORT_ENABLE[0] == 1'b1)\n       begin\n               assign mig_p0_arb_en      =  p0_arb_en ;\n               assign mig_p0_cmd_clk     =  p0_cmd_clk  ;\n               assign mig_p0_cmd_en      =  p0_cmd_en   ;\n               assign mig_p0_cmd_ra      =  p0_cmd_ra  ;\n               assign mig_p0_cmd_ba      =  p0_cmd_ba   ;\n               assign mig_p0_cmd_ca      =  p0_cmd_ca  ;\n               assign mig_p0_cmd_instr   =  p0_cmd_instr;\n               assign mig_p0_cmd_bl      =   {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;",
        "                            assign mig_p3_cmd_clk     =      1'b0;\n                            assign mig_p3_cmd_en      =      1'b0;\n                            assign mig_p3_cmd_ra      =      15'd0;\n                            assign mig_p3_cmd_ba      =      3'd0;\n                            assign mig_p3_cmd_ca      =      12'd0;\n                            assign mig_p3_cmd_instr   =      3'd0;\n                            assign mig_p3_cmd_bl      =      6'd0;\n                            assign mig_p3_arb_en      =      1'b0;  \n                            \n                            \n                            \n                            \n                            assign mig_p5_arb_en      =      1'b0;  \n                            assign mig_p5_cmd_clk     =      1'b0;\n                            assign mig_p5_cmd_en      =      1'b0;\n                            assign mig_p5_cmd_ra      =      15'd0;\n                            assign mig_p5_cmd_ba      =      3'd0;\n                            assign mig_p5_cmd_ca      =      12'd0;\n                            assign mig_p5_cmd_instr   =      3'd0;\n                            assign mig_p5_cmd_bl      =      6'd0;\n\n\n\n      \n      \n      \n      \n      ",
        "                            assign p1_rd_error    = mig_p1_rd_error;\n                            assign p2_rd_error    = mig_p2_error;\n                            assign p3_rd_error    = mig_p4_error;\n                            \n                            assign p0_rd_overflow = mig_p0_rd_overflow;\n                            assign p1_rd_overflow = mig_p1_rd_overflow;\n                            assign p2_rd_overflow = mig_p2_overflow;\n                            assign p3_rd_overflow = mig_p4_overflow;\n\n                            assign p0_wr_underrun = mig_p0_wr_underrun;\n                            assign p1_wr_underrun = mig_p1_wr_underrun;\n                            assign p2_wr_underrun = mig_p3_underrun;\n                            assign p3_wr_underrun = mig_p5_underrun;\n                            \n                            assign p0_wr_empty    = mig_p0_wr_empty;\n                            assign p1_wr_empty    = mig_p1_wr_empty;\n                            assign p2_wr_empty    = mig_p3_empty; \n                            assign p3_wr_empty    = mig_p5_empty; \n \n                            assign p0_wr_full    = mig_p0_wr_full;\n                            assign p1_wr_full    = mig_p1_wr_full;\n                            assign p2_wr_full    = mig_p3_full;\n                            assign p3_wr_full    = mig_p5_full;\n\n                            assign p0_wr_error    = mig_p0_wr_error;\n                            assign p1_wr_error    = mig_p1_wr_error;\n                            assign p2_wr_error    = mig_p3_error;\n                            assign p3_wr_error    = mig_p5_error;\n\n     \n                           assign p4_cmd_empty        =     1'b0;\n                           assign p4_cmd_full         =     1'b0;\n                           assign mig_p2_wr_mask  = 'b0;\n                           assign mig_p4_wr_mask  = 'b0;\n",
        "                            assign mig_p4_clk      = 'b0; \n                            assign mig_p4_en       = 'b0;                   \n                            assign mig_p5_clk      = 'b0;\n                            assign mig_p5_en       = 'b0;\n                            assign mig_p5_wr_data  = 'b0; \n                            assign mig_p5_wr_mask  = 'b0;\n                            assign p3_rd_count     = 'b0;\n                            assign p3_wr_count     = 'b0;\n                           \n                          \n                           \n                  end         \n                           \n                           assign p3_cmd_empty       =      mig_p4_cmd_empty ;\n                           assign p3_cmd_full        =      mig_p4_cmd_full  ;\n                           \n                           \n                            \n                            assign p0_rd_data     = mig_p0_rd_data;\n                            assign p1_rd_data     = mig_p1_rd_data;\n                            assign p2_rd_data     = mig_p2_rd_data;\n                            assign p3_rd_data     = mig_p4_rd_data;\n\n                            assign p0_rd_empty    = mig_p0_rd_empty;\n                            assign p1_rd_empty    = mig_p1_rd_empty;\n                            assign p2_rd_empty    = mig_p2_empty;\n                            assign p3_rd_empty    = mig_p4_empty;\n\n                            assign p0_rd_full     = mig_p0_rd_full;\n                            assign p1_rd_full     = mig_p1_rd_full;\n                            assign p2_rd_full     = mig_p2_full;\n                            assign p3_rd_full     = mig_p4_full;\n",
        "                           assign p2_cmd_empty       =      mig_p2_cmd_empty ;\n                           assign p2_cmd_full        =      mig_p2_cmd_full  ;\n  \n                 if (C_PORT_ENABLE[3] == 1'b1)\n                  begin   \n                           assign mig_p4_arb_en      =      p3_arb_en ;\n                           assign mig_p4_cmd_clk     =      p3_cmd_clk  ;\n                           assign mig_p4_cmd_en      =      p3_cmd_en   ;\n                           assign mig_p4_cmd_ra      =      p3_cmd_ra  ;\n                           assign mig_p4_cmd_ba      =      p3_cmd_ba   ;\n                           assign mig_p4_cmd_ca      =      p3_cmd_ca  ;\n                           assign mig_p4_cmd_instr   =      p3_cmd_instr;\n                           assign mig_p4_cmd_bl      =      {(p3_cmd_instr[2] | p3_cmd_bl[5]),p3_cmd_bl[4:0]}  ;\n\n                           assign mig_p4_clk      = p3_rd_clk;\n                           assign mig_p4_en       = p3_rd_en;                            \n                           assign mig_p5_clk      = p3_wr_clk;\n                           assign mig_p5_en       = p3_wr_en; \n                           assign mig_p5_wr_data  = p3_wr_data[31:0];\n                           assign mig_p5_wr_mask  = p3_wr_mask[3:0];\n                           assign p3_rd_count     = mig_p4_count;\n                           assign p3_wr_count     = mig_p5_count;\n                           \n                           \n                  end else\n                  begin\n                           assign mig_p4_arb_en      =     'b0;\n                           assign mig_p4_cmd_clk     =     'b0;\n                           assign mig_p4_cmd_en      =     'b0;\n                           assign mig_p4_cmd_ra      =     'b0;\n                           assign mig_p4_cmd_ba      =     'b0;\n                           assign mig_p4_cmd_ca      =     'b0;\n                           assign mig_p4_cmd_instr   =     'b0;\n                           assign mig_p4_cmd_bl      =     'b0;\n                           ",
        "                            assign mig_p2_en       = p2_rd_en;\n                            assign mig_p2_clk      = p2_rd_clk;\n                            assign mig_p3_en       = p2_wr_en;\n                            assign mig_p3_clk      = p2_wr_clk;\n                            assign mig_p3_wr_data  = p2_wr_data[31:0];\n                            assign mig_p3_wr_mask  = p2_wr_mask[3:0];\n                            assign p2_wr_count     = mig_p3_count;\n                            assign p2_rd_count     = mig_p2_count;\n                           \n                  end else\n                  begin\n\n                           assign mig_p2_arb_en      =      'b0;\n                           assign mig_p2_cmd_clk     =      'b0;\n                           assign mig_p2_cmd_en      =      'b0;\n                           assign mig_p2_cmd_ra      =      'b0;\n                           assign mig_p2_cmd_ba      =      'b0;\n                           assign mig_p2_cmd_ca      =      'b0;\n                           assign mig_p2_cmd_instr   =      'b0;\n                           assign mig_p2_cmd_bl      =      'b0;\n\n                            assign mig_p2_en       = 'b0; \n                            assign mig_p2_clk      = 'b0;\n                            assign mig_p3_en       = 'b0;\n                            assign mig_p3_clk      = 'b0;\n                            assign mig_p3_wr_data  = 'b0; \n                            assign mig_p3_wr_mask  = 'b0;\n                            assign p2_rd_count     = 'b0;\n                            assign p2_wr_count     = 'b0;\n                           ",
        "                           assign mig_p1_arb_en      =       'b0;\n                           assign mig_p1_cmd_clk     =       'b0;\n                           assign mig_p1_cmd_en      =       'b0;\n                           assign mig_p1_cmd_ra      =       'b0;\n                           assign mig_p1_cmd_ba      =       'b0;\n                           assign mig_p1_cmd_ca      =       'b0;\n                           assign mig_p1_cmd_instr   =       'b0;\n                           assign mig_p1_cmd_bl      =       'b0;\n                           \n                           assign mig_p1_wr_en    = 'b0; \n                           assign mig_p1_wr_clk   = 'b0;\n                           assign mig_p1_rd_en    = 'b0;\n                           assign mig_p1_wr_data  = 'b0;\n                           assign mig_p1_wr_mask  = 'b0;                \n                           assign mig_p1_rd_clk   = 'b0;\n                            assign p1_wr_count     = 'b0;\n                            assign p1_rd_count     = 'b0;\n                  \n                  end\n                           \n                           \n                           assign p1_cmd_empty       =      mig_p1_cmd_empty ;\n                           assign p1_cmd_full        =      mig_p1_cmd_full  ;\n \n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin   \n                           assign mig_p2_arb_en      =      p2_arb_en ;\n                           assign mig_p2_cmd_clk     =      p2_cmd_clk  ;\n                           assign mig_p2_cmd_en      =      p2_cmd_en   ;\n                           assign mig_p2_cmd_ra      =      p2_cmd_ra  ;\n                           assign mig_p2_cmd_ba      =      p2_cmd_ba   ;\n                           assign mig_p2_cmd_ca      =      p2_cmd_ca  ;\n                           assign mig_p2_cmd_instr   =      p2_cmd_instr;\n                           assign mig_p2_cmd_bl      =      {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}   ;",
        "                           assign p0_cmd_empty       =      mig_p0_cmd_empty ;\n                           assign p0_cmd_full        =      mig_p0_cmd_full  ;\n                           \n                           \n                  if (C_PORT_ENABLE[1] == 1'b1)\n                  begin\n                           \n\n                           assign mig_p1_arb_en      =      p1_arb_en ;\n                           assign mig_p1_cmd_clk     =      p1_cmd_clk  ;\n                           assign mig_p1_cmd_en      =      p1_cmd_en   ;\n                           assign mig_p1_cmd_ra      =      p1_cmd_ra  ;\n                           assign mig_p1_cmd_ba      =      p1_cmd_ba   ;\n                           assign mig_p1_cmd_ca      =      p1_cmd_ca  ;\n                           assign mig_p1_cmd_instr   =      p1_cmd_instr;\n                           assign mig_p1_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n                           \n                 \n                            assign mig_p1_wr_en    = p1_wr_en;\n                            assign mig_p1_wr_clk   = p1_wr_clk;\n                            assign mig_p1_rd_en    = p1_rd_en;\n                            assign mig_p1_wr_data  = p1_wr_data[31:0];\n                            assign mig_p1_wr_mask  = p1_wr_mask[3:0];                \n                            assign mig_p1_rd_clk   = p1_rd_clk;\n                            assign p1_wr_count     = mig_p1_wr_count;\n                            assign p1_rd_count     = mig_p1_rd_count;\n                           \n                  end else\n                  begin",
        "  end else if(C_PORT_CONFIG == \"B32_B32_B32_B32\" ) begin : u_config_2\n\n           \n               \n               \n               \n                  if (C_PORT_ENABLE[0] == 1'b1)\n                  begin\n                           \n                           assign mig_p0_arb_en      =      p0_arb_en ;\n                           assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                           assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                           assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                           assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                           assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                           assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                           assign mig_p0_cmd_bl      =       {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}   ;\n                           \n                           \n                           assign mig_p0_rd_en    = p0_rd_en;                            \n                           assign mig_p0_wr_clk   = p0_wr_clk;\n                           assign mig_p0_rd_clk   = p0_rd_clk;\n                           assign mig_p0_wr_en    = p0_wr_en;\n                           assign mig_p0_wr_data  = p0_wr_data[31:0]; \n                           assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                           assign p0_wr_count     = mig_p0_wr_count;\n                           assign p0_rd_count  = mig_p0_rd_count  ; \n\n                           \n                           \n                 end else\n                 begin\n                           assign mig_p0_arb_en      =       'b0;\n                           assign mig_p0_cmd_clk     =       'b0;\n                           assign mig_p0_cmd_en      =       'b0;\n                           assign mig_p0_cmd_ra      =       'b0;\n                           assign mig_p0_cmd_ba      =       'b0;\n                           assign mig_p0_cmd_ca      =       'b0;\n                           assign mig_p0_cmd_instr   =       'b0;\n                           assign mig_p0_cmd_bl      =       'b0;\n                           \n                           assign mig_p0_rd_en    = 'b0;                    \n                           assign mig_p0_wr_clk   = 'b0;\n                           assign mig_p0_rd_clk   = 'b0;\n                           assign mig_p0_wr_en    = 'b0;\n                           assign mig_p0_wr_data  = 'b0; \n                           assign mig_p0_wr_mask  = 'b0;\n                           assign p0_wr_count     = 'b0;\n                           assign p0_rd_count     = 'b0;\n\n                           \n                 end                           ",
        "         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[23:0] == \"R32\") begin : u_config1_5R\n\n                  if (C_PORT_ENABLE[5] == 1'b1)\n                  begin\n\n                       assign mig_p5_clk        = p5_rd_clk;\n                       assign p5_rd_data        = mig_p5_rd_data;                \n                       assign mig_p5_en         = p5_rd_en;  \n                       assign p5_rd_overflow    = mig_p5_overflow;\n                       assign p5_rd_error       = mig_p5_error;\n                       assign p5_rd_full        = mig_p5_full;\n                       assign p5_rd_empty       = mig_p5_empty;\n                       assign p5_rd_count       = mig_p5_count  ; \n                       \n                 end else\n                 begin\n                       assign mig_p5_clk        = 'b0;\n                       assign p5_rd_data        = 'b0;           \n                       assign mig_p5_en         = 'b0;\n                       assign p5_rd_overflow    = 'b0;\n                       assign p5_rd_error       = 'b0;\n                       assign p5_rd_full        = 'b0;\n                       assign p5_rd_empty       = 'b0;\n                       assign p5_rd_count       = 'b0;\n                 \n                 end\n                 assign p5_wr_full      = 'b0;\n                 assign p5_wr_empty     = 'b0;\n                 assign p5_wr_underrun  = 'b0;\n                 assign p5_wr_count     = 'b0;\n                 assign p5_wr_error     = 'b0;\n                 assign mig_p5_wr_data  = 'b0;\n                 assign mig_p5_wr_mask  = 'b0;",
        "         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[23:0] == \"W32\") begin : u_config1_5W\n       \n\n                       \n                  if (C_PORT_ENABLE[5] == 1'b1)\n                  begin\n                       assign mig_p5_clk   = p5_wr_clk;\n                       assign mig_p5_wr_data  = p5_wr_data[31:0];\n                       assign mig_p5_wr_mask  = p5_wr_mask[3:0];\n                       assign mig_p5_en       = p5_wr_en; \n                       assign p5_wr_full      = mig_p5_full;\n                       assign p5_wr_empty     = mig_p5_empty;\n                       assign p5_wr_underrun  = mig_p5_underrun;\n                       assign p5_wr_count     = mig_p5_count  ; \n                       assign p5_wr_error     = mig_p5_error;\n                       \n                  end else\n                  begin\n                       assign mig_p5_clk      = 'b0;\n                       assign mig_p5_wr_data  = 'b0;\n                       assign mig_p5_wr_mask  = 'b0;\n                       assign mig_p5_en       = 'b0;\n                       assign p5_wr_full      = 'b0;\n                       assign p5_wr_empty     = 'b0;\n                       assign p5_wr_underrun  = 'b0;\n                       assign p5_wr_count     = 'b0;\n                       assign p5_wr_error     = 'b0;\n                  end                           \n                   assign p5_rd_data        = 'b0;\n                   assign p5_rd_overflow    = 'b0;\n                   assign p5_rd_error       = 'b0;\n                   assign p5_rd_full        = 'b0;\n                   assign p5_rd_empty       = 'b0;",
        "         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[55:32]  == \"R32\") begin : u_config1_4R\n                       \n                  if (C_PORT_ENABLE[4] == 1'b1)\n                  begin\n                       assign mig_p4_clk        = p4_rd_clk;\n                       assign p4_rd_data        = mig_p4_rd_data;                \n                       assign mig_p4_en         = p4_rd_en;  \n                       assign p4_rd_overflow    = mig_p4_overflow;\n                       assign p4_rd_error       = mig_p4_error;\n                       assign p4_rd_full        = mig_p4_full;\n                       assign p4_rd_empty       = mig_p4_empty;\n                       assign p4_rd_count       = mig_p4_count  ; \n                       \n                  end else\n                  begin\n                       assign mig_p4_clk        = 'b0;\n                       assign p4_rd_data        = 'b0;\n                       assign mig_p4_en         = 'b0;\n                       assign p4_rd_overflow    = 'b0;\n                       assign p4_rd_error       = 'b0;\n                       assign p4_rd_full        = 'b0;\n                       assign p4_rd_empty       = 'b0;\n                       assign p4_rd_count       = 'b0;\n                  end                  \n                  assign p4_wr_full      = 'b0;\n                  assign p4_wr_empty     = 'b0;\n                  assign p4_wr_underrun  = 'b0;\n                  assign p4_wr_count     = 'b0;\n                  assign p4_wr_error     = 'b0;\n                  assign mig_p4_wr_data  = 'b0;\n                  assign mig_p4_wr_mask  = 'b0;",
        "         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[55:32]  == \"W32\") begin : u_config1_4W\n       \n\n                  if (C_PORT_ENABLE[4] == 1'b1)\n                  begin\n       \n                       assign mig_p4_clk      = p4_wr_clk;\n                       assign mig_p4_wr_data  = p4_wr_data[31:0];\n                       assign mig_p4_wr_mask  = p4_wr_mask[3:0];\n                       assign mig_p4_en       = p4_wr_en; \n                       assign p4_wr_full      = mig_p4_full;\n                       assign p4_wr_empty     = mig_p4_empty;\n                       assign p4_wr_underrun  = mig_p4_underrun;\n                       assign p4_wr_count     = mig_p4_count  ; \n                       assign p4_wr_error     = mig_p4_error;\n\n                  end else\n                  begin\n                       assign mig_p4_clk      = 'b0;\n                       assign mig_p4_wr_data  = 'b0;\n                       assign mig_p4_wr_mask  = 'b0;\n                       assign mig_p4_en       = 'b0;\n                       assign p4_wr_full      = 'b0;\n                       assign p4_wr_empty     = 'b0;\n                       assign p4_wr_underrun  = 'b0;\n                       assign p4_wr_count     = 'b0;\n                       assign p4_wr_error     = 'b0;\n                  end                           \n                   assign p4_rd_overflow    = 'b0;\n                   assign p4_rd_error       = 'b0;\n                   assign p4_rd_full        = 'b0;\n                   assign p4_rd_empty       = 'b0;\n                   assign p4_rd_count       = 'b0;",
        "       \n                  if (C_PORT_ENABLE[3] == 1'b1)\n                  begin\n\n                       assign mig_p3_clk     = p3_rd_clk;\n                       assign p3_rd_data     = mig_p3_rd_data;                \n                       assign mig_p3_en      = p3_rd_en;  \n                       assign p3_rd_overflow = mig_p3_overflow;\n                       assign p3_rd_error    = mig_p3_error;\n                       assign p3_rd_full     = mig_p3_full;\n                       assign p3_rd_empty    = mig_p3_empty;\n                       assign p3_rd_count    = mig_p3_count  ; \n                  end else\n                  begin \n                       assign mig_p3_clk     = 'b0;\n                       assign mig_p3_en      = 'b0;\n                       assign p3_rd_overflow = 'b0;\n                       assign p3_rd_full     = 'b0;\n                       assign p3_rd_empty    = 'b0;\n                       assign p3_rd_count    = 'b0;\n                       assign p3_rd_error    = 'b0;\n                       assign p3_rd_data     = 'b0;\n                  end                  \n                  assign p3_wr_full      = 'b0;\n                  assign p3_wr_empty     = 'b0;\n                  assign p3_wr_underrun  = 'b0;\n                  assign p3_wr_count     = 'b0;\n                  assign p3_wr_error     = 'b0;\n                  assign mig_p3_wr_data  = 'b0;\n                  assign mig_p3_wr_mask  = 'b0;\n         end ",
        "          if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[87:64]  == \"W32\") begin : u_config1_3W\n\n\n                  if (C_PORT_ENABLE[3] == 1'b1)\n                  begin\n\n                       assign mig_p3_clk   = p3_wr_clk;\n                       assign mig_p3_wr_data  = p3_wr_data[31:0];\n                       assign mig_p3_wr_mask  = p3_wr_mask[3:0];\n                       assign mig_p3_en       = p3_wr_en; \n                       assign p3_wr_full      = mig_p3_full;\n                       assign p3_wr_empty     = mig_p3_empty;\n                       assign p3_wr_underrun  = mig_p3_underrun;\n                       assign p3_wr_count     = mig_p3_count  ; \n                       assign p3_wr_error     = mig_p3_error;\n                       \n                  end else \n                  begin\n                       assign mig_p3_clk      = 'b0;\n                       assign mig_p3_wr_data  = 'b0;\n                       assign mig_p3_wr_mask  = 'b0;\n                       assign mig_p3_en       = 'b0;\n                       assign p3_wr_full      = 'b0;\n                       assign p3_wr_empty     = 'b0;\n                       assign p3_wr_underrun  = 'b0;\n                       assign p3_wr_count     = 'b0;\n                       assign p3_wr_error     = 'b0;\n                                                \n                  end\n                   assign p3_rd_overflow = 'b0;\n                   assign p3_rd_error    = 'b0;\n                   assign p3_rd_full     = 'b0;\n                   assign p3_rd_empty    = 'b0;",
        "         end else if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[119:96] == \"R32\") begin : u_config1_2R\n\n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin\n                       assign mig_p2_clk        = p2_rd_clk;\n                       assign p2_rd_data        = mig_p2_rd_data;\n                       assign mig_p2_en         = p2_rd_en;  \n                       assign p2_rd_overflow    = mig_p2_overflow;\n                       assign p2_rd_error       = mig_p2_error;\n                       assign p2_rd_full        = mig_p2_full;\n                       assign p2_rd_empty       = mig_p2_empty;\n                       assign p2_rd_count       = mig_p2_count  ; \n                       \n                  end else       \n                  begin\n                       assign mig_p2_clk        = 'b0;\n                       assign p2_rd_data        = 'b0;\n                       assign mig_p2_en         = 'b0;\n                       \n                       assign p2_rd_overflow    = 'b0;\n                       assign p2_rd_error       = 'b0;\n                       assign p2_rd_full        = 'b0;\n                       assign p2_rd_empty       = 'b0;\n                       assign p2_rd_count       = 'b0;\n                       \n                  end\n                  assign mig_p2_wr_data  = 'b0;\n                  assign mig_p2_wr_mask  = 'b0;\n                  assign p2_wr_error     = 'b0;\n                  assign p2_wr_full      = 'b0;\n                  assign p2_wr_empty     = 'b0;\n                  assign p2_wr_underrun  = 'b0;\n                  assign p2_wr_count     = 'b0;\n          \n          end ",
        "         if(C_PORT_CONFIG[183:160] == \"B32\" && C_PORT_CONFIG[119:96] == \"W32\") begin : u_config1_2W\n                  if (C_PORT_ENABLE[2] == 1'b1)\n                  begin\n                       assign mig_p2_clk      = p2_wr_clk;\n                       assign mig_p2_wr_data  = p2_wr_data[31:0];\n                       assign mig_p2_wr_mask  = p2_wr_mask[3:0];\n                       assign mig_p2_en       = p2_wr_en; \n                       assign p2_wr_error     = mig_p2_error;                       \n                       assign p2_wr_full      = mig_p2_full;\n                       assign p2_wr_empty     = mig_p2_empty;\n                       assign p2_wr_underrun  = mig_p2_underrun;\n                       assign p2_wr_count     = mig_p2_count  ; \n                       \n                       \n                  end else\n                  begin\n                       assign mig_p2_clk      = 'b0;\n                       assign mig_p2_wr_data  = 'b0;\n                       assign mig_p2_wr_mask  = 'b0;\n                       assign mig_p2_en       = 'b0;\n                       assign p2_wr_error     = 'b0;\n                       assign p2_wr_full      = 'b0;\n                       assign p2_wr_empty     = 'b0;\n                       assign p2_wr_underrun  = 'b0;\n                       assign p2_wr_count     = 'b0;\n                                                \n                  end                           \n                   assign p2_rd_data        = 'b0;\n                   assign p2_rd_overflow    = 'b0;\n                   assign p2_rd_error       = 'b0;\n                   assign p2_rd_full        = 'b0;\n                   assign p2_rd_empty       = 'b0;\n                   assign p2_rd_count       = 'b0;\n\n                       ",
        "               begin\n              \n                assign mig_p1_wr_clk   = p1_wr_clk;\n                assign mig_p1_rd_clk   = p1_rd_clk;                \n                assign mig_p1_wr_en    = p1_wr_en;\n                assign mig_p1_wr_mask  = p1_wr_mask[3:0];                \n                assign mig_p1_wr_data  = p1_wr_data[31:0];\n                assign mig_p1_rd_en    = p1_rd_en;\n                assign p1_rd_data     = mig_p1_rd_data;\n                assign p1_rd_empty    = mig_p1_rd_empty;\n                assign p1_rd_full     = mig_p1_rd_full;\n                assign p1_rd_error    = mig_p1_rd_error;\n                assign p1_wr_error    = mig_p1_wr_error;\n                assign p1_rd_overflow = mig_p1_rd_overflow;\n                assign p1_wr_underrun    = mig_p1_wr_underrun;\n                assign p1_wr_empty    = mig_p1_wr_empty;\n                assign p1_wr_full    = mig_p1_wr_full;\n                assign p1_wr_count  = mig_p1_wr_count;\n                assign p1_rd_count  = mig_p1_rd_count  ; \n                \n               end else\n               begin\n              ",
        "               if (C_PORT_ENABLE[0] == 1'b1)\n               begin\n                assign mig_p0_wr_clk   = p0_wr_clk;\n                assign mig_p0_rd_clk   = p0_rd_clk;\n                assign mig_p0_wr_en    = p0_wr_en;\n                assign mig_p0_rd_en    = p0_rd_en;\n                assign mig_p0_wr_mask  = p0_wr_mask[3:0];\n                assign mig_p0_wr_data  = p0_wr_data[31:0];\n                assign p0_rd_data        = mig_p0_rd_data;\n                assign p0_rd_full        = mig_p0_rd_full;\n                assign p0_rd_empty       = mig_p0_rd_empty;\n                assign p0_rd_error       = mig_p0_rd_error;\n                assign p0_wr_error       = mig_p0_wr_error;\n                assign p0_rd_overflow    = mig_p0_rd_overflow;\n                assign p0_wr_underrun    = mig_p0_wr_underrun;\n                assign p0_wr_empty       = mig_p0_wr_empty;\n                assign p0_wr_full        = mig_p0_wr_full;\n                assign p0_wr_count       = mig_p0_wr_count;\n                assign p0_rd_count       = mig_p0_rd_count  ; \n                \n                \n               end",
        "               if (C_PORT_ENABLE[5] == 1'b1)\n               begin\n\n                   assign  mig_p5_arb_en    =     p5_arb_en ;\n                   assign  mig_p5_cmd_clk   =     p5_cmd_clk  ;\n                   assign  mig_p5_cmd_en    =     p5_cmd_en   ;\n                   assign  mig_p5_cmd_ra    =     p5_cmd_ra  ;\n                   assign  mig_p5_cmd_ba    =     p5_cmd_ba   ;\n                   assign  mig_p5_cmd_ca    =     p5_cmd_ca  ;\n                   assign mig_p5_cmd_instr  =     p5_cmd_instr;\n                   assign mig_p5_cmd_bl     =     {(p5_cmd_instr[2] | p5_cmd_bl[5]),p5_cmd_bl[4:0]}  ;\n                   assign p5_cmd_empty   =     mig_p5_cmd_empty;\n                   assign p5_cmd_full    =     mig_p5_cmd_full ;\n                   \n               end else\n               begin\n                   assign  mig_p5_arb_en     =   'b0;\n                   assign  mig_p5_cmd_clk    =   'b0;\n                   assign  mig_p5_cmd_en     =   'b0;\n                   assign  mig_p5_cmd_ra     =   'b0;\n                   assign  mig_p5_cmd_ba     =   'b0;\n                   assign  mig_p5_cmd_ca     =   'b0;\n                   assign mig_p5_cmd_instr   =   'b0;\n                   assign mig_p5_cmd_bl      =   'b0;\n                   assign p5_cmd_empty   =     'b0;\n                   assign p5_cmd_full    =     'b0;\n                   \n               \n               end",
        "               if (C_PORT_ENABLE[4] == 1'b1)\n               begin\n\n                   assign mig_p4_arb_en    =        p4_arb_en ;\n                   assign mig_p4_cmd_clk     =      p4_cmd_clk  ;\n                   assign mig_p4_cmd_en      =      p4_cmd_en   ;\n                   assign mig_p4_cmd_ra      =      p4_cmd_ra  ;\n                   assign mig_p4_cmd_ba      =      p4_cmd_ba   ;\n                   assign mig_p4_cmd_ca      =      p4_cmd_ca  ;\n                   assign mig_p4_cmd_instr   =      p4_cmd_instr;\n                   assign mig_p4_cmd_bl      =      {(p4_cmd_instr[2] | p4_cmd_bl[5]),p4_cmd_bl[4:0]}  ;\n                   assign p4_cmd_empty   =      mig_p4_cmd_empty;\n                   assign p4_cmd_full    =      mig_p4_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p4_arb_en      =      'b0;\n                   assign mig_p4_cmd_clk     =      'b0;\n                   assign mig_p4_cmd_en      =      'b0;\n                   assign mig_p4_cmd_ra      =      'b0;\n                   assign mig_p4_cmd_ba      =      'b0;\n                   assign mig_p4_cmd_ca      =      'b0;\n                   assign mig_p4_cmd_instr   =      'b0;\n                   assign mig_p4_cmd_bl      =      'b0;\n                   assign p4_cmd_empty   =      'b0;\n                   assign p4_cmd_full    =      'b0;\n                   \n\n",
        " \n\n               if (C_PORT_ENABLE[3] == 1'b1)\n               begin\n\n                   assign mig_p3_arb_en    =        p3_arb_en ;\n                   assign mig_p3_cmd_clk     =      p3_cmd_clk  ;\n                   assign mig_p3_cmd_en      =      p3_cmd_en   ;\n                   assign mig_p3_cmd_ra      =      p3_cmd_ra  ;\n                   assign mig_p3_cmd_ba      =      p3_cmd_ba   ;\n                   assign mig_p3_cmd_ca      =      p3_cmd_ca  ;\n                   assign mig_p3_cmd_instr   =      p3_cmd_instr;\n                   assign mig_p3_cmd_bl      =      {(p3_cmd_instr[2] | p3_cmd_bl[5]),p3_cmd_bl[4:0]}  ;\n                   assign p3_cmd_empty   =      mig_p3_cmd_empty;\n                   assign p3_cmd_full    =      mig_p3_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p3_arb_en    =       'b0;\n                   assign mig_p3_cmd_clk     =     'b0;\n                   assign mig_p3_cmd_en      =     'b0;\n                   assign mig_p3_cmd_ra      =     'b0;\n                   assign mig_p3_cmd_ba      =     'b0;\n                   assign mig_p3_cmd_ca      =     'b0;\n                   assign mig_p3_cmd_instr   =     'b0;\n                   assign mig_p3_cmd_bl      =     'b0;\n                   assign p3_cmd_empty   =     'b0;\n                   assign p3_cmd_full    =     'b0;\n                   ",
        "               end\n               \n\n               if (C_PORT_ENABLE[2] == 1'b1)\n               begin\n\n                   assign mig_p2_arb_en      =      p2_arb_en ;\n                   assign mig_p2_cmd_clk     =      p2_cmd_clk  ;\n                   assign mig_p2_cmd_en      =      p2_cmd_en   ;\n                   assign mig_p2_cmd_ra      =      p2_cmd_ra  ;\n                   assign mig_p2_cmd_ba      =      p2_cmd_ba   ;\n                   assign mig_p2_cmd_ca      =      p2_cmd_ca  ;\n                   assign mig_p2_cmd_instr   =      p2_cmd_instr;\n                   assign mig_p2_cmd_bl      =      {(p2_cmd_instr[2] | p2_cmd_bl[5]),p2_cmd_bl[4:0]}  ;\n                   assign p2_cmd_empty   =      mig_p2_cmd_empty;\n                   assign p2_cmd_full    =      mig_p2_cmd_full ;\n                   \n               end else\n               begin\n\n                   assign mig_p2_arb_en      =      'b0;\n                   assign mig_p2_cmd_clk     =      'b0;\n                   assign mig_p2_cmd_en      =      'b0;\n                   assign mig_p2_cmd_ra      =      'b0;\n                   assign mig_p2_cmd_ba      =      'b0;\n                   assign mig_p2_cmd_ca      =      'b0;\n                   assign mig_p2_cmd_instr   =      'b0;\n                   assign mig_p2_cmd_bl      =      'b0;\n                   assign p2_cmd_empty   =       'b0;",
        "               if (C_PORT_ENABLE[1] == 1'b1)\n               begin\n\n\n                   assign mig_p1_arb_en      =      p1_arb_en ;\n                   assign mig_p1_cmd_clk     =      p1_cmd_clk  ;\n                   assign mig_p1_cmd_en      =      p1_cmd_en   ;\n                   assign mig_p1_cmd_ra      =      p1_cmd_ra  ;\n                   assign mig_p1_cmd_ba      =      p1_cmd_ba   ;\n                   assign mig_p1_cmd_ca      =      p1_cmd_ca  ;\n                   assign mig_p1_cmd_instr   =      p1_cmd_instr;\n                   assign mig_p1_cmd_bl      =      {(p1_cmd_instr[2] | p1_cmd_bl[5]),p1_cmd_bl[4:0]}  ;\n                   assign p1_cmd_empty       =      mig_p1_cmd_empty;\n                   assign p1_cmd_full        =      mig_p1_cmd_full ;\n                   \n               end else\n               begin\n                   assign mig_p1_arb_en      =     'b0;\n                   assign mig_p1_cmd_clk     =     'b0;\n                   assign mig_p1_cmd_en      =     'b0;\n                   assign mig_p1_cmd_ra      =     'b0;\n                   assign mig_p1_cmd_ba      =     'b0;\n                   assign mig_p1_cmd_ca      =     'b0;\n                   assign mig_p1_cmd_instr   =     'b0;\n                   assign mig_p1_cmd_bl      =     'b0;\n                   assign p1_cmd_empty       =      'b0;\n                   assign p1_cmd_full        =      'b0;\n                   \n                   ",
        "               if (C_PORT_ENABLE[0] == 1'b1)\n               begin\n\n                   assign mig_p0_arb_en      =      p0_arb_en ;\n                   assign mig_p0_cmd_clk     =      p0_cmd_clk  ;\n                   assign mig_p0_cmd_en      =      p0_cmd_en   ;\n                   assign mig_p0_cmd_ra      =      p0_cmd_ra  ;\n                   assign mig_p0_cmd_ba      =      p0_cmd_ba   ;\n                   assign mig_p0_cmd_ca      =      p0_cmd_ca  ;\n                   assign mig_p0_cmd_instr   =      p0_cmd_instr;\n                   assign mig_p0_cmd_bl      =      {(p0_cmd_instr[2] | p0_cmd_bl[5]),p0_cmd_bl[4:0]}  ;\n                   assign p0_cmd_empty       =      mig_p0_cmd_empty;\n                   assign p0_cmd_full        =      mig_p0_cmd_full ;\n                   \n               end else\n               begin\n               \n                   assign mig_p0_arb_en      =     'b0;\n                   assign mig_p0_cmd_clk     =     'b0;\n                   assign mig_p0_cmd_en      =     'b0;\n                   assign mig_p0_cmd_ra      =     'b0;\n                   assign mig_p0_cmd_ba      =     'b0;\n                   assign mig_p0_cmd_ca      =     'b0;\n                   assign mig_p0_cmd_instr   =     'b0;\n                   assign mig_p0_cmd_bl      =     'b0;\n                   assign p0_cmd_empty       =     'b0;\n                   assign p0_cmd_full        =     'b0;\n                   \n               end",
        "  always @(*)\n  begin\n    if ( C_PORT_CONFIG[23:0]  == \"R32\" && p5_cmd_en == 1'b1 \n         && p5_cmd_instr[2] == 1'b0  && p5_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 5\");\n           $finish;\n          end\n  end  ",
        "  always @(*)\n  begin\n    if ( C_PORT_CONFIG[23:0]  == \"W32\" && p5_cmd_en == 1'b1 \n         && p5_cmd_instr[2] == 1'b0 && p5_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 5\");\n           $finish;\n          end\n  end",
        "  always @(*)\n  begin\n    if ( C_PORT_CONFIG[55:32]  == \"R32\" && p4_cmd_en == 1'b1 \n         && p4_cmd_instr[2] == 1'b0 && p4_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 4\");\n           $finish;\n          end\n  end",
        "  always @(*)\n  begin\n    if ( C_PORT_CONFIG[55:32]  == \"W32\" && p4_cmd_en == 1'b1 \n         && p4_cmd_instr[2] == 1'b0 && p4_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 4\");\n           $finish;\n          end\n  end",
        "  always @(*)\n  begin\n    if ( C_PORT_CONFIG[87:64]  == \"R32\" && p3_cmd_en == 1'b1 \n         && p3_cmd_instr[2] == 1'b0  && p3_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 3\");\n           $finish;\n          end\n  end",
        "  always @(*)\n  begin\n    if ( C_PORT_CONFIG[87:64]  == \"W32\" && p3_cmd_en == 1'b1 \n         && p3_cmd_instr[2] == 1'b0 && p3_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 3\");\n           $finish;\n          end\n  end",
        "  always @(*)\n  begin\n    if ( C_PORT_CONFIG[119:96]  == \"R32\" && p2_cmd_en == 1'b1 \n         && p2_cmd_instr[2] == 1'b0 && p2_cmd_instr[0] == 1'b0 )\n          begin\n           $display(\"ERROR - Invalid Command for read only port 2\");\n           $finish;\n          end\n  end",
        "  always @(*)\n  begin\n    if ( C_PORT_CONFIG[119:96]  == \"W32\" && p2_cmd_en == 1'b1 \n         && p2_cmd_instr[2] == 1'b0 && p2_cmd_instr[0] == 1'b1 )\n          begin\n           $display(\"ERROR - Invalid Command for write only port 2\");\n           $finish;\n          end\n  end",
        "generate \n   \n   if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n      C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n      ) begin : u_config1_0      \n\n  ",
        "             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              end",
        "end else if(C_NUM_DQ_PINS == 4) begin : x4_Addr\n\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n\n               \n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p0_cmd_ba =  p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p0_cmd_ca = {p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p0_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n           \n              \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p1_cmd_ba =  p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p1_cmd_ca = {p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p1_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p2_cmd_ba =  p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p2_cmd_ca = {p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p2_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              \n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p3_cmd_ba =  p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p3_cmd_ca = {p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p3_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n \n\n          if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              end\n              \n              \n           end\n         else   \n            begin\n            \n               \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p0_cmd_ba =  p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p0_cmd_ca = {p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p0_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               \n           \n              \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p1_cmd_ba =  p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p1_cmd_ca = {p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p1_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p2_cmd_ba =  p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n             \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p2_cmd_ca = {p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p2_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n              \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p3_cmd_ba =  p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p3_cmd_ca = {p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p3_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n \n\n          if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n              end\n            \n            \n            \n            end\n           \nend ",
        "           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n                 \n\n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p0_cmd_ca[11:0] = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p0_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                 \n                \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p1_cmd_ca[11:0] = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p1_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                \n                \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p2_cmd_ca[11:0] = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p2_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n\n\n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p3_cmd_ca[11:0] = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p3_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                \n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p4_cmd_ca[11:0] = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p4_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n\n              \n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p5_cmd_ca[11:0] = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p5_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                end\n               \n            else  \n              begin\n                 \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n\n\n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};                \n                                   \n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p0_cmd_ca[11:0] = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p0_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n\n                \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p1_cmd_ca[11:0] = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p1_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                \n               \n                if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                        p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS  ]};  \n      \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p2_cmd_ca[11:0] = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p2_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n              \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p3_cmd_ca[11:0] = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p3_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n   \n   \n                 \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p4_cmd_ca[11:0] = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p4_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n                 \n   \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p5_cmd_ca[11:0] = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p5_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n             \n            end\n\n              \n\nend else if(C_NUM_DQ_PINS == 4) begin : x4_Addr",
        "if(C_NUM_DQ_PINS == 16) begin : x16_Addr\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p0_cmd_ca = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p0_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                \n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p1_cmd_ca = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p1_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS  + 1], p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p2_cmd_ca = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p2_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p3_cmd_ca = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p3_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p4_cmd_ca = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p4_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p5_cmd_ca = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p5_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n\n                \n                \n                end\n                \n          else  \n              begin\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p0_cmd_ca = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p0_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p1_cmd_ca = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p1_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p2_cmd_ca = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p2_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p3_cmd_ca = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p3_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p4_cmd_ca = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p4_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p5_cmd_ca = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p5_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n         \n              end\n       \nend else if(C_NUM_DQ_PINS == 8) begin : x8_Addr",
        " generate \n\nif(C_NUM_DQ_PINS == 16) begin : x16_Addr\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p0_cmd_ca = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p0_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                \n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p1_cmd_ca = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p1_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS  + 1], p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p2_cmd_ca = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p2_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p3_cmd_ca = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p3_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p4_cmd_ca = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p4_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)   \n                       assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS   :C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS + 1]};                         \n\n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +   C_MEM_NUM_COL_BITS   :  C_MEM_NUM_COL_BITS + 1]};\n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p5_cmd_ca = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p5_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n\n                \n                \n                end\n                \n          else  \n              begin\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p0_cmd_ca = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p0_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p0_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p1_cmd_ca = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p1_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p1_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p2_cmd_ca = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p2_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p2_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p3_cmd_ca = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p3_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p3_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p4_cmd_ca = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p4_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p4_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n                 \n\n                if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                       assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1];\n                else\n                       assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS  : C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS + 1]};\n                \n                \n                if (C_MEM_ADDR_WIDTH == 15)           \n                       assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1];                         \n                else\n                       assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] ,  p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_NUM_COL_BITS   : C_MEM_NUM_COL_BITS + 1]};                         \n                \n                if (C_MEM_NUM_COL_BITS == 12)  \n                       assign p5_cmd_ca = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1];\n                else\n                       assign p5_cmd_ca = {allzero[12:C_MEM_NUM_COL_BITS + 1], p5_cmd_byte_addr[C_MEM_NUM_COL_BITS : 1]};\n\n         \n              end\n       \nend else if(C_NUM_DQ_PINS == 8) begin : x8_Addr\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n                 \n\n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p0_cmd_ca[11:0] = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p0_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                 \n                \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p1_cmd_ca[11:0] = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p1_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                \n                \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p2_cmd_ca[11:0] = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p2_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n\n\n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p3_cmd_ca[11:0] = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p3_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                \n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p4_cmd_ca[11:0] = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p4_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n\n              \n              \n                 if (C_MEM_ADDR_WIDTH == 15)  \n                          assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1  : C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS ]};\n\n\n                 if (C_MEM_BANKADDR_WIDTH  == 3 )  \n                          assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 :  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_NUM_COL_BITS ]};  \n                 \n                 \n                 if (C_MEM_NUM_COL_BITS == 12)  \n                          assign p5_cmd_ca[11:0] = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p5_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                 \n                end\n               \n            else  \n              begin\n                 \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p0_cmd_ba = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n\n\n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};                \n                                   \n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p0_cmd_ca[11:0] = p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p0_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n\n                \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p1_cmd_ba = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p1_cmd_ca[11:0] = p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p1_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n                \n               \n                if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                       assign p2_cmd_ba = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                else\n                       assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                        p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS  ]};  \n      \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p2_cmd_ca[11:0] = p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p2_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n              \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p3_cmd_ba = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p3_cmd_ca[11:0] = p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p3_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n   \n   \n                 \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p4_cmd_ba = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p4_cmd_ca[11:0] = p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p4_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n\n                 \n   \n                 if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                          assign p5_cmd_ba = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ];  \n                 else\n                          assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH],  \n                                   p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1 : C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS ]};  \n                                   \n                 if (C_MEM_ADDR_WIDTH == 15) \n                          assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  + C_MEM_NUM_COL_BITS - 1  :  C_MEM_NUM_COL_BITS ];\n                 else\n                          assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH  +  C_MEM_NUM_COL_BITS - 1  : C_MEM_NUM_COL_BITS ]};\n                 \n                 if (C_MEM_NUM_COL_BITS == 12) \n                          assign p5_cmd_ca[11:0] = p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0];\n                 else\n                          assign p5_cmd_ca[11:0] = {allzero[11 : C_MEM_NUM_COL_BITS] , p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 1 : 0]};\n             \n            end\n\n              \n\nend else if(C_NUM_DQ_PINS == 4) begin : x4_Addr\n\n           if (C_MEM_ADDR_ORDER == \"ROW_BANK_COLUMN\") begin  \n\n               \n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p0_cmd_ba =  p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p0_cmd_ca = {p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p0_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n           \n              \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p1_cmd_ba =  p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p1_cmd_ca = {p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p1_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p2_cmd_ba =  p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p2_cmd_ca = {p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p2_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              \n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p3_cmd_ba =  p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p3_cmd_ca = {p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p3_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n \n\n          if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n\n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH + C_MEM_BANKADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 : C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 1]};\n                        \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_NUM_COL_BITS - 2 :  C_MEM_NUM_COL_BITS - 1]};\n\n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};                                \n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n              end\n              \n              \n           end\n         else   \n            begin\n            \n               \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p0_cmd_ba =  p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p0_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p0_cmd_ra = p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p0_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p0_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p0_cmd_ca = {p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p0_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p0_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               \n           \n              \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p1_cmd_ba =  p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p1_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p1_cmd_ra = p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p1_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p1_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p1_cmd_ca = {p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p1_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p1_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               \n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p2_cmd_ba =  p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p2_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n             \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p2_cmd_ra = p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p2_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p2_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p2_cmd_ca = {p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p2_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p2_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n              \n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p3_cmd_ba =  p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p3_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p3_cmd_ra = p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p3_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p3_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p3_cmd_ca = {p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p3_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p3_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n \n\n          if(C_PORT_CONFIG == \"B32_B32_R32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_R32_W32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_R32_W32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_R32_W32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_R32\" ||\n             C_PORT_CONFIG == \"B32_B32_W32_W32_W32_W32\"\n             ) \n               begin\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p4_cmd_ba =  p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p4_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p4_cmd_ra = p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p4_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p4_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p4_cmd_ca = {p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p4_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p4_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n\n\n               if (C_MEM_BANKADDR_WIDTH  == 3 ) \n                      assign p5_cmd_ba =  p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1];\n               else\n                      assign p5_cmd_ba = {allzero[2 : C_MEM_BANKADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_BANKADDR_WIDTH + C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 1]};\n               \n               \n               if (C_MEM_ADDR_WIDTH == 15) \n                     assign p5_cmd_ra = p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1];\n               else         \n                     assign p5_cmd_ra = {allzero[14 : C_MEM_ADDR_WIDTH ] , p5_cmd_byte_addr[C_MEM_ADDR_WIDTH +  C_MEM_NUM_COL_BITS - 2 : C_MEM_NUM_COL_BITS - 1]};\n                        \n                        \n               if (C_MEM_NUM_COL_BITS == 12) \n                     assign p5_cmd_ca = {p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n               else\n                     assign p5_cmd_ca = {allzero[11 : C_MEM_NUM_COL_BITS ] ,  p5_cmd_byte_addr[C_MEM_NUM_COL_BITS - 2 : 0] , 1'b0};\n              end\n            \n            \n            \n            end\n           \nend \n\n\nendgenerate",
        "always @ (posedge ui_clk)\nbegin \n  if (sys_rst)\n   soft_cal_selfrefresh_req <= 1'b0;\n  else if (selfrefresh_enter_r3)\n     soft_cal_selfrefresh_req <= 1'b1;\n  else if (~selfrefresh_enter_r3 && pll_lock)\n     soft_cal_selfrefresh_req <= 1'b0;\n  else\n     soft_cal_selfrefresh_req <= soft_cal_selfrefresh_req;\n  \nend   ",
        "always @ (posedge ui_clk)\nif (sys_rst)\n   begin\n      selfrefresh_enter_r1 <= 1'b0;\n      selfrefresh_enter_r2 <= 1'b0;\n      selfrefresh_enter_r3 <= 1'b0;\n   end\nelse\n   begin\n      selfrefresh_enter_r1 <= selfrefresh_enter;\n      selfrefresh_enter_r2 <= selfrefresh_enter_r1;\n      selfrefresh_enter_r3 <= selfrefresh_enter_r2;\n   end",
        "assign int_sys_rst =  sys_rst | ~gated_pll_lock;",
        "always @ (posedge ui_clk)\nbegin \n  if (~selfrefresh_enter && ~selfrefresh_mode)\n   syn_uiclk_pll_lock <= pll_lock;\n   \nend   ",
        "always @ (*)\nbegin\nif (normal_operation_window)\n   gated_pll_lock = pll_lock;\nelse\n   gated_pll_lock = syn_uiclk_pll_lock;\nend",
        "always @ (posedge ui_clk)\nbegin \nif (sys_rst)   \n   normal_operation_window <= 1'b1;\nelse if (selfrefresh_enter_r2 || selfrefresh_mode)\n   normal_operation_window <= 1'b0;\nelse if (~selfrefresh_enter_r2 && ~selfrefresh_mode)\n   normal_operation_window <= 1'b1;\nelse\n   normal_operation_window <= normal_operation_window;\n\nend   ",
        "  function integer cdiv (input integer num,\n                         input integer div); \n    begin\n      cdiv = (num/div) + (((num%div)>0) ? 1 : 0);\n    end\n  endfunction "
    ]
}