{
    "line_num": [
        [
            721,
            747
        ],
        [
            676,
            716
        ],
        [
            454,
            665
        ],
        [
            367,
            367
        ],
        [
            366,
            366
        ],
        [
            360,
            360
        ],
        [
            355,
            359
        ],
        [
            349,
            349
        ],
        [
            348,
            348
        ],
        [
            345,
            346
        ],
        [
            343,
            345
        ]
    ],
    "blocks": [
        "   initial\n   begin : Logging\n      fork\n         begin : calibration_done\n            wait (calib_done);\n            $display(\"Calibration Done\");\n            #50000000;\n            if (!error) begin\n               $display(\"TEST PASSED\");\n            end   \n            else begin\n               $display(\"TEST FAILED: DATA ERROR\");\t\t \n            end\n            disable calib_not_done;\n\t    $finish;\n         end\t \n         \n         begin : calib_not_done\n            #200000000;\n            if (!calib_done) begin\n               $display(\"TEST FAILED: INITIALIZATION DID NOT COMPLETE\");\n            end\n            disable calibration_done;\n\t    $finish;\n         end\n      join\t \n   end      ",
        "   generate\n   if(C3_NUM_DQ_PINS == 16) begin : MEM_INST3\n     ddr3_model_c3 u_mem_c3(\n      .ck         (mcb3_dram_ck),\n      .ck_n       (mcb3_dram_ck_n),\n      .cke        (mcb3_dram_cke),\n      .cs_n       (1'b0),\n      .ras_n      (mcb3_dram_ras_n),\n      .cas_n      (mcb3_dram_cas_n),\n      .we_n       (mcb3_dram_we_n),\n      .dm_tdqs    ({mcb3_dram_udm,mcb3_dram_dm}),\n      .ba         (mcb3_dram_ba),\n      .addr       (mcb3_dram_a),\n      .dq         (mcb3_dram_dq),\n      .dqs        ({mcb3_dram_udqs,mcb3_dram_dqs}),\n      .dqs_n      ({mcb3_dram_udqs_n,mcb3_dram_dqs_n}),\n      .tdqs_n     (),\n      .odt        (mcb3_dram_odt),\n      .rst_n      (mcb3_dram_reset_n)\n      );\n   end else begin\n     ddr3_model_c3 u_mem_c3(\n      .ck         (mcb3_dram_ck),\n      .ck_n       (mcb3_dram_ck_n),\n      .cke        (mcb3_dram_cke),\n      .cs_n       (1'b0),\n      .ras_n      (mcb3_dram_ras_n),\n      .cas_n      (mcb3_dram_cas_n),\n      .we_n       (mcb3_dram_we_n),\n      .dm_tdqs    (mcb3_dram_dm),\n      .ba         (mcb3_dram_ba),\n      .addr       (mcb3_dram_a),\n      .dq         (mcb3_dram_dq),\n      .dqs        (mcb3_dram_dqs),\n      .dqs_n      (mcb3_dram_dqs_n),\n      .tdqs_n     (),\n      .odt        (mcb3_dram_odt),\n      .rst_n      (mcb3_dram_reset_n)\n     );\n  end\nendgenerate",
        ");      \n\n\n\n\n\n\n\n      memc_tb_top #\n      (\n         .C_SIMULATION                   (C3_SIMULATION),\n         .C_NUM_DQ_PINS                  (C3_NUM_DQ_PINS),\n         .C_MEM_BURST_LEN                (C3_MEM_BURST_LEN),\n         .C_MEM_NUM_COL_BITS             (C3_MEM_NUM_COL_BITS),\n         .C_SMALL_DEVICE                 (C3_SMALL_DEVICE),\n\n         \n\t \n\t \n         .C_PORT_ENABLE                  (C3_PORT_ENABLE),\n   \t     .C_P0_MASK_SIZE                 (C3_P0_MASK_SIZE),\n         .C_P0_DATA_PORT_SIZE            (C3_P0_DATA_PORT_SIZE),\n         .C_P1_MASK_SIZE                 (C3_P1_MASK_SIZE),\n         .C_P1_DATA_PORT_SIZE            (C3_P1_DATA_PORT_SIZE),\n         .C_P0_PORT_MODE                 (C3_P0_PORT_MODE),  \n         .C_P1_PORT_MODE                 (C3_P1_PORT_MODE),  \n         .C_P2_PORT_MODE                 (C3_P2_PORT_MODE),  \n         .C_P3_PORT_MODE                 (C3_P3_PORT_MODE),\n         .C_P4_PORT_MODE                 (C3_P4_PORT_MODE),\n         .C_P5_PORT_MODE                 (C3_P5_PORT_MODE),\n\n         .C_p0_BEGIN_ADDRESS             (C3_p0_BEGIN_ADDRESS),\n         .C_p0_DATA_MODE                 (C3_p0_DATA_MODE),\n         .C_p0_END_ADDRESS               (C3_p0_END_ADDRESS),\n         .C_p0_PRBS_EADDR_MASK_POS       (C3_p0_PRBS_EADDR_MASK_POS),\n         .C_p0_PRBS_SADDR_MASK_POS       (C3_p0_PRBS_SADDR_MASK_POS),\n         .C_p1_BEGIN_ADDRESS             (C3_p1_BEGIN_ADDRESS),\n         .C_p1_DATA_MODE                 (C3_p1_DATA_MODE),\n         .C_p1_END_ADDRESS               (C3_p1_END_ADDRESS),\n         .C_p1_PRBS_EADDR_MASK_POS       (C3_p1_PRBS_EADDR_MASK_POS),\n         .C_p1_PRBS_SADDR_MASK_POS       (C3_p1_PRBS_SADDR_MASK_POS),\n         .C_p2_BEGIN_ADDRESS             (C3_p2_BEGIN_ADDRESS),\n         .C_p2_DATA_MODE                 (C3_p2_DATA_MODE),\n         .C_p2_END_ADDRESS               (C3_p2_END_ADDRESS),\n         .C_p2_PRBS_EADDR_MASK_POS       (C3_p2_PRBS_EADDR_MASK_POS),\n         .C_p2_PRBS_SADDR_MASK_POS       (C3_p2_PRBS_SADDR_MASK_POS),\n         .C_p3_BEGIN_ADDRESS             (C3_p3_BEGIN_ADDRESS),\n         .C_p3_DATA_MODE                 (C3_p3_DATA_MODE),\n         .C_p3_END_ADDRESS               (C3_p3_END_ADDRESS),\n         .C_p3_PRBS_EADDR_MASK_POS       (C3_p3_PRBS_EADDR_MASK_POS),\n         .C_p3_PRBS_SADDR_MASK_POS       (C3_p3_PRBS_SADDR_MASK_POS),\n         .C_p4_BEGIN_ADDRESS             (C3_p4_BEGIN_ADDRESS),\n         .C_p4_DATA_MODE                 (C3_p4_DATA_MODE),\n         .C_p4_END_ADDRESS               (C3_p4_END_ADDRESS),\n         .C_p4_PRBS_EADDR_MASK_POS       (C3_p4_PRBS_EADDR_MASK_POS),\n         .C_p4_PRBS_SADDR_MASK_POS       (C3_p4_PRBS_SADDR_MASK_POS),\n         .C_p5_BEGIN_ADDRESS             (C3_p5_BEGIN_ADDRESS),\n         .C_p5_DATA_MODE                 (C3_p5_DATA_MODE),\n         .C_p5_END_ADDRESS               (C3_p5_END_ADDRESS),\n         .C_p5_PRBS_EADDR_MASK_POS       (C3_p5_PRBS_EADDR_MASK_POS),\n         .C_p5_PRBS_SADDR_MASK_POS       (C3_p5_PRBS_SADDR_MASK_POS)\n         )\n      memc3_tb_top_inst\n      (\n         .error\t\t\t                 (c3_error),\n         .calib_done\t\t\t         (c3_calib_done), \n         .clk0\t\t\t                 (c3_clk0),\n         .rst0\t\t\t                 (c3_rst0),\n         .cmp_error\t\t\t             (c3_cmp_error),\n         .cmp_data_valid  \t             (c3_cmp_data_valid),\n         .cmp_data\t\t\t             (c3_cmp_data),\n         .vio_modify_enable              (c3_vio_modify_enable),\n         .vio_data_mode_value            (c3_vio_data_mode_value),\n         .vio_addr_mode_value            (c3_vio_addr_mode_value),\n         .p0_error_status\t             (c3_p0_error_status),\n         .p1_error_status\t             (c3_p1_error_status),\n         .p2_error_status\t             (c3_p2_error_status),\n         .p3_error_status\t             (c3_p3_error_status),\n         .p4_error_status\t             (c3_p4_error_status),\n         .p5_error_status\t             (c3_p5_error_status),\n\n\t \n\t \n\t \n\t \n\n         \n         \n         .p0_mcb_cmd_en                  (c3_p0_cmd_en),\n         .p0_mcb_cmd_instr               (c3_p0_cmd_instr),\n         .p0_mcb_cmd_bl                  (c3_p0_cmd_bl),\n         .p0_mcb_cmd_addr                (c3_p0_cmd_byte_addr),\n         .p0_mcb_cmd_full                (c3_p0_cmd_full),\n         \n         \n         .p0_mcb_wr_en                   (c3_p0_wr_en),\n         .p0_mcb_wr_mask                 (c3_p0_wr_mask),\n         .p0_mcb_wr_data                 (c3_p0_wr_data),\n         .p0_mcb_wr_full                 (c3_p0_wr_full),\n         .p0_mcb_wr_fifo_counts          (c3_p0_wr_count),\n         \n         \n         .p0_mcb_rd_en                   (c3_p0_rd_en),\n         .p0_mcb_rd_data                 (c3_p0_rd_data),\n         .p0_mcb_rd_empty                (c3_p0_rd_empty),\n         .p0_mcb_rd_fifo_counts          (c3_p0_rd_count),\n\n         \n         \n         .p1_mcb_cmd_en                  (c3_p1_cmd_en),\n         .p1_mcb_cmd_instr               (c3_p1_cmd_instr),\n         .p1_mcb_cmd_bl                  (c3_p1_cmd_bl),\n         .p1_mcb_cmd_addr                (c3_p1_cmd_byte_addr),\n         .p1_mcb_cmd_full                (c3_p1_cmd_full),\n         \n         \n         .p1_mcb_wr_en                   (c3_p1_wr_en),\n         .p1_mcb_wr_mask                 (c3_p1_wr_mask),\n         .p1_mcb_wr_data                 (c3_p1_wr_data),\n         .p1_mcb_wr_full                 (c3_p1_wr_full),\n         .p1_mcb_wr_fifo_counts          (c3_p1_wr_count),\n         \n         \n         .p1_mcb_rd_en                   (c3_p1_rd_en),\n         .p1_mcb_rd_data                 (c3_p1_rd_data),\n         .p1_mcb_rd_empty                (c3_p1_rd_empty),\n         .p1_mcb_rd_fifo_counts          (c3_p1_rd_count),\n\n         \n         \n         .p2_mcb_cmd_en                  (c3_p2_cmd_en),\n         .p2_mcb_cmd_instr               (c3_p2_cmd_instr),\n         .p2_mcb_cmd_bl                  (c3_p2_cmd_bl),\n         .p2_mcb_cmd_addr                (c3_p2_cmd_byte_addr),\n         .p2_mcb_cmd_full                (c3_p2_cmd_full),\n         \n         \n         .p2_mcb_wr_en                   (c3_p2_wr_en),\n         .p2_mcb_wr_mask                 (c3_p2_wr_mask),\n         .p2_mcb_wr_data                 (c3_p2_wr_data),\n         .p2_mcb_wr_full                 (c3_p2_wr_full),\n         .p2_mcb_wr_fifo_counts          (c3_p2_wr_count),\n         \n         \n         .p2_mcb_rd_en                   (c3_p2_rd_en),\n         .p2_mcb_rd_data                 (c3_p2_rd_data),\n         .p2_mcb_rd_empty                (c3_p2_rd_empty),\n         .p2_mcb_rd_fifo_counts          (c3_p2_rd_count),\n\n         \n         \n         .p3_mcb_cmd_en                  (c3_p3_cmd_en),\n         .p3_mcb_cmd_instr               (c3_p3_cmd_instr),\n         .p3_mcb_cmd_bl                  (c3_p3_cmd_bl),\n         .p3_mcb_cmd_addr                (c3_p3_cmd_byte_addr),\n         .p3_mcb_cmd_full                (c3_p3_cmd_full),\n         \n         \n         .p3_mcb_wr_en                   (c3_p3_wr_en),\n         .p3_mcb_wr_mask                 (c3_p3_wr_mask),\n         .p3_mcb_wr_data                 (c3_p3_wr_data),\n         .p3_mcb_wr_full                 (c3_p3_wr_full),\n         .p3_mcb_wr_fifo_counts          (c3_p3_wr_count),\n         \n         \n         .p3_mcb_rd_en                   (c3_p3_rd_en),\n         .p3_mcb_rd_data                 (c3_p3_rd_data),\n         .p3_mcb_rd_empty                (c3_p3_rd_empty),\n         .p3_mcb_rd_fifo_counts          (c3_p3_rd_count),\n\n         \n         \n         .p4_mcb_cmd_en                  (c3_p4_cmd_en),\n         .p4_mcb_cmd_instr               (c3_p4_cmd_instr),\n         .p4_mcb_cmd_bl                  (c3_p4_cmd_bl),\n         .p4_mcb_cmd_addr                (c3_p4_cmd_byte_addr),\n         .p4_mcb_cmd_full                (c3_p4_cmd_full),\n         \n         \n         .p4_mcb_wr_en                   (c3_p4_wr_en),\n         .p4_mcb_wr_mask                 (c3_p4_wr_mask),\n         .p4_mcb_wr_data                 (c3_p4_wr_data),\n         .p4_mcb_wr_full                 (c3_p4_wr_full),\n         .p4_mcb_wr_fifo_counts          (c3_p4_wr_count),\n         \n         \n         .p4_mcb_rd_en                   (c3_p4_rd_en),\n         .p4_mcb_rd_data                 (c3_p4_rd_data),\n         .p4_mcb_rd_empty                (c3_p4_rd_empty),\n         .p4_mcb_rd_fifo_counts          (c3_p4_rd_count),\n\n         \n         \n         .p5_mcb_cmd_en                  (c3_p5_cmd_en),\n         .p5_mcb_cmd_instr               (c3_p5_cmd_instr),\n         .p5_mcb_cmd_bl                  (c3_p5_cmd_bl),\n         .p5_mcb_cmd_addr                (c3_p5_cmd_byte_addr),\n         .p5_mcb_cmd_full                (c3_p5_cmd_full),\n         \n         \n         .p5_mcb_wr_en                   (c3_p5_wr_en),\n         .p5_mcb_wr_mask                 (c3_p5_wr_mask),\n         .p5_mcb_wr_data                 (c3_p5_wr_data),\n         .p5_mcb_wr_full                 (c3_p5_wr_full),\n         .p5_mcb_wr_fifo_counts          (c3_p5_wr_count),\n         \n         \n         .p5_mcb_rd_en                   (c3_p5_rd_en),\n         .p5_mcb_rd_data                 (c3_p5_rd_data),\n         .p5_mcb_rd_empty                (c3_p5_rd_empty),\n         .p5_mcb_rd_fifo_counts          (c3_p5_rd_count)\n        );",
        "assign calib_done = c3_calib_done;",
        "assign error = c3_error;",
        "   assign c3_sys_rst_i = C3_RST_ACT_LOW ? c3_sys_rst : ~c3_sys_rst;",
        "   initial begin\n      c3_sys_rst = 1'b0;\t\t\n      #20000;\n      c3_sys_rst = 1'b1;\n   end",
        "   assign                c3_sys_clk_n = ~c3_sys_clk;",
        "   assign                c3_sys_clk_p = c3_sys_clk;",
        "   always\n      #(C3_MEMCLK_PERIOD/2) c3_sys_clk = ~c3_sys_clk;",
        "   initial\n      c3_sys_clk = 1'b0;\n   always"
    ]
}