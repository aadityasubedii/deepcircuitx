{
    "line_num": [
        [
            934,
            939
        ],
        [
            913,
            932
        ],
        [
            906,
            911
        ],
        [
            892,
            903
        ],
        [
            885,
            890
        ],
        [
            876,
            883
        ],
        [
            854,
            874
        ],
        [
            806,
            842
        ],
        [
            790,
            804
        ],
        [
            783,
            787
        ],
        [
            776,
            781
        ],
        [
            764,
            774
        ],
        [
            756,
            762
        ],
        [
            745,
            752
        ],
        [
            737,
            743
        ],
        [
            717,
            718
        ],
        [
            706,
            715
        ],
        [
            704,
            704
        ],
        [
            690,
            700
        ],
        [
            688,
            689
        ],
        [
            684,
            686
        ],
        [
            681,
            683
        ],
        [
            675,
            679
        ],
        [
            671,
            671
        ],
        [
            653,
            668
        ],
        [
            649,
            651
        ],
        [
            644,
            645
        ],
        [
            627,
            640
        ],
        [
            625,
            626
        ],
        [
            619,
            619
        ],
        [
            609,
            618
        ],
        [
            607,
            608
        ],
        [
            600,
            605
        ],
        [
            574,
            598
        ],
        [
            557,
            571
        ],
        [
            546,
            548
        ],
        [
            538,
            544
        ],
        [
            528,
            536
        ],
        [
            519,
            521
        ],
        [
            508,
            516
        ],
        [
            496,
            506
        ],
        [
            493,
            495
        ],
        [
            483,
            491
        ],
        [
            424,
            480
        ],
        [
            419,
            422
        ],
        [
            409,
            416
        ],
        [
            335,
            380
        ],
        [
            333,
            335
        ],
        [
            309,
            329
        ],
        [
            307,
            309
        ],
        [
            302,
            302
        ],
        [
            295,
            298
        ],
        [
            292,
            294
        ],
        [
            289,
            289
        ],
        [
            285,
            288
        ],
        [
            282,
            284
        ],
        [
            273,
            280
        ],
        [
            265,
            271
        ],
        [
            254,
            264
        ],
        [
            243,
            250
        ]
    ],
    "blocks": [
        "always @ (prbs_bl)\nif (FAMILY == \"SPARTAN6\")  \n    prbs_brlen =  (prbs_bl[5:0] == 6'b000000) ? 6'b000001: prbs_bl[5:0];\nelse \n     prbs_brlen =  6'b000010;\nendgenerate",
        "generate\nif (CMD_PATTERN == \"CGEN_PRBS\" || CMD_PATTERN == \"CGEN_ALL\" ) begin: gen_prbs_bl\ncmd_prbs_gen #\n      (\n    .TCQ               (TCQ),      \n    .FAMILY      (FAMILY),\n    .PRBS_CMD    (\"BLEN\"),\n    .ADDR_WIDTH  (32),\n    .SEED_WIDTH  (15),\n    .PRBS_WIDTH  (20)\n   )\n   bl_prbs_gen\n  (\n   .clk_i             (clk_i),\n   .clk_en            (cmd_clk_en),\n   .prbs_seed_init    (load_seed_i),\n   .prbs_seed_i       (cmd_seed_i[16:2]),\n   .prbs_o            (prbs_bl)\n  );\nend",
        "always @ (bl_out)\n  if(bl_out >2 && FAMILY == \"VIRTEX6\") begin\n   $display(\"Error ! Not valid burst length\");\n   $stop;\n   end\n  ",
        "always @ (posedge clk_i) begin\n   if (mode_load_pulse)\n        bl_out <= #TCQ    fixed_bl_i ;\n   else if (cmd_clk_en) begin\n     case({bl_mode_reg})\n         0: bl_out <= #TCQ    bram_bl_i  ;\n         1: bl_out <= #TCQ    fixed_bl_i ;\n         2: bl_out <= #TCQ    prbs_brlen;\n         default : bl_out <= #TCQ    6'h1;\n     endcase\n   end\nend",
        "always @(posedge clk_i) begin\n   if (rst_i[6])\n       bl_out_reg <= #TCQ    fixed_bl_i;\n   else if (bl_out_vld)\n       bl_out_reg <= #TCQ    bl_out;\nend",
        "always @(addr_out,bl_out,end_addr_i,rst_i,buf_avail_r) begin\n    if (rst_i[5])\n        force_bl1 =   1'b0;\n    else if (((addr_out + bl_out* (DWIDTH/8)) >= end_addr_i) || (buf_avail_r  <= 50 && PORT_MODE == \"RD_MODE\"))\n        force_bl1 =   1'b1;\n    else\n        force_bl1 =   1'b0;\nend",
        "always @ (posedge clk_i) begin\nif (addr_out[31:24] >= end_addr_i[31:24])\n    A3_G_E3 <= #TCQ    1'b1;\nelse\n    A3_G_E3 <= #TCQ    1'b0;\n\nif (addr_out[23:16] >= end_addr_i[23:16])\n    A2_G_E2 <= #TCQ    1'b1;\nelse\n    A2_G_E2 <= #TCQ    1'b0;\n\nif (addr_out[15:8] >= end_addr_i[15:8])\n    A1_G_E1 <= #TCQ    1'b1;\nelse\n    A1_G_E1 <= #TCQ    1'b0;\n\nif (addr_out[7:0] > end_addr_i[7:0] - DWIDTH/8* bl_out + 1)\n    A0_G_E0 <= #TCQ    1'b1;\nelse\n    A0_G_E0 <= #TCQ    1'b0;\nend",
        "generate  \n\n\nif (CMD_PATTERN == \"CGEN_PRBS\" || CMD_PATTERN == \"CGEN_ALL\" ) begin: gen_prbs_instr\ncmd_prbs_gen #\n  (\n    .TCQ               (TCQ),\n    .PRBS_CMD    (\"INSTR\"),\n    .ADDR_WIDTH  (32),\n    .SEED_WIDTH  (15),\n    .PRBS_WIDTH  (20)\n   )\n   instr_prbs_gen_a\n  (\n   .clk_i              (clk_i),\n   .clk_en             (cmd_clk_en),\n   .prbs_seed_init     (load_seed_i),\n   .prbs_seed_i        (cmd_seed_i[14:0]),\n   .prbs_o             (prbs_instr_a)\n  );\n\ncmd_prbs_gen #\n  (\n    .PRBS_CMD    (\"INSTR\"),\n    .SEED_WIDTH  (15),\n    .PRBS_WIDTH  (20)\n   )\n   instr_prbs_gen_b\n  (\n   .clk_i              (clk_i),\n   .clk_en             (cmd_clk_en),\n   .prbs_seed_init     (load_seed_i),\n   .prbs_seed_i        (cmd_seed_i[16:2]),\n   .prbs_o             (prbs_instr_b)\n  );\nend\nendgenerate",
        "always @ (posedge clk_i) begin\n   case(instr_mode_i)\n         0: instr_out <= #TCQ    bram_instr_i;\n         1: instr_out <= #TCQ    fixed_instr_i;\n         2: instr_out <= #TCQ    {2'b00,(prbs_instr_a[0] | force_rd)};\n         3: instr_out <= #TCQ    {2'b0,prbs_instr_a[0]};  \n         4: instr_out <= #TCQ    {1'b0,prbs_instr_b[0], prbs_instr_a[0]};  \n         \n\n         5: instr_out <= #TCQ    {refresh_prbs ,prbs_instr_b[0], prbs_instr_a[0]};  \n\n\n         default : instr_out <= #TCQ    {2'b00,prbs_instr_a[0]};\n   endcase\nend",
        "always @ (instr_mode_i)\n  if(instr_mode_i  >2 && FAMILY == \"VIRTEX6\") begin\n   $display(\"Error ! Not valid instruction mode\");\n   $stop;\n   end",
        "always @ (posedge clk_i) begin\nif (FAMILY == \"SPARTAN6\")\n    refresh_prbs <= #TCQ  prbs_instr_b[3] & refresh_cmd_en;\nelse\n    refresh_prbs <= #TCQ  1'b0;\nend    ",
        "always @ (posedge clk_i) begin\nif (rst_i[4])\n   refresh_cmd_en <= #TCQ  'b0;\n\nelse if (refresh_timer == 10'h3ff)\n\n   refresh_cmd_en <= #TCQ  'b1;\nelse if (cmd_clk_en && refresh_cmd_en)\n   refresh_cmd_en <= #TCQ  'b0;\n\nend   ",
        "always @ (posedge clk_i) begin\nif (rst_i[4])\n   refresh_timer <= #TCQ  'b0;\nelse\n   refresh_timer <= #TCQ  refresh_timer + 1'b1;\n\nend",
        "always @ (posedge clk_i) begin\nif (rst_i[4])\n    force_rd <= #TCQ  1'b0;\nelse if (force_rd_counts[3])\n    force_rd <= #TCQ  1'b1;\nelse\n    force_rd <= #TCQ  1'b0;\nend",
        "always @ (posedge clk_i) begin\nif (rst_i[4])\n    force_rd_counts <= #TCQ  'b0;\nelse if (instr_vld) begin\n    force_rd_counts <= #TCQ  force_rd_counts + 1;\n    end\nend",
        "generate\n",
        "generate\n\nif (CMD_PATTERN == \"CGEN_FIXED\" || CMD_PATTERN == \"CGEN_ALL\" ) begin : fixed_addr_gen\n    assign fixed_addr = (DWIDTH == 32)?  {fixed_addr_i[31:2],2'b0} :\n                        (DWIDTH == 64)?  {fixed_addr_i[31:3],3'b0}:\n                        (DWIDTH <= 128)? {fixed_addr_i[31:4],4'b0}:\n                        (DWIDTH <= 256)? {fixed_addr_i[31:5],5'b0}:\n                                         {fixed_addr_i[31:6],6'b0};\n  end\nendgenerate",
        "endgenerate",
        "always @ (posedge clk_i) begin\n   if (rst_i[4]) begin\n        addr_counts <= #TCQ    start_addr_i;\n        mem_init_done <= #TCQ  1'b0;\n  end else if (cmd_clk_en_r || mode_load_pulse_r1)\n    if(addr_counts_next_r>= end_addr_i) begin\n                addr_counts <= #TCQ    start_addr_i;\n                mem_init_done <= #TCQ  1'b1;\n    end else if(addr_counts < end_addr_r)  \n                addr_counts <= #TCQ    addr_counts + INC_COUNTS;\nend",
        "always @ (posedge clk_i)\n  cmd_clk_en_r <= #TCQ  cmd_clk_en;",
        "always @ (posedge clk_i)\n    addr_counts_next_r <= #TCQ    addr_counts  + INC_COUNTS   ;\n",
        "always @ (posedge clk_i)\n    end_addr_range <= #TCQ    end_addr_i[15:0] - (DWIDTH/8 *bl_out_reg) + 1   ;\n",
        "always @ (posedge clk_i)\nbegin\n    mode_load_pulse_r1 <= #TCQ  mode_load_pulse;\n\nend",
        "    assign seq_addr = addr_counts;",
        "always @ (posedge clk_i) begin\nif (addr_out[31:24] >= end_addr_r[31:24])\n    AC3_G_E3 <= #TCQ    1'b1;\nelse\n    AC3_G_E3 <= #TCQ    1'b0;\n\nif (addr_out[23:16] >= end_addr_r[23:16])\n    AC2_G_E2 <= #TCQ    1'b1;\nelse\n    AC2_G_E2 <= #TCQ    1'b0;\n\nif (addr_out[15:8] >= end_addr_r[15:8])\n    AC1_G_E1 <= #TCQ    1'b1;\nelse\n    AC1_G_E1 <= #TCQ    1'b0;\nend",
        "always @ (posedge clk_i) begin\n     end_addr_r <= #TCQ  end_addr_i - DWIDTH/8*fixed_bl_i +1;\nend",
        "generate\n",
        "    always @ (posedge clk_i) begin\n    \nif ( (NUM_DQ_PINS >= 128 && NUM_DQ_PINS <= 144))       \n     INC_COUNTS <= #TCQ  64 * (MEM_BURST_INT/4);\n    \nelse if ( (NUM_DQ_PINS >= 64 && NUM_DQ_PINS < 128))       \n     INC_COUNTS <= #TCQ  32 * (MEM_BURST_INT/4);\nelse if ((NUM_DQ_PINS >= 32) && (NUM_DQ_PINS < 64))   \n     INC_COUNTS <= #TCQ  16 * (MEM_BURST_INT/4)   ;\nelse if ((NUM_DQ_PINS == 16) || (NUM_DQ_PINS == 24))  \n     INC_COUNTS <= #TCQ  8 * (MEM_BURST_INT/4);\nelse if ((NUM_DQ_PINS == 8) )\n     INC_COUNTS <= #TCQ  4 * (MEM_BURST_INT/4);\nend",
        "generate\nif (FAMILY == \"VIRTEX6\" ) begin : INC_COUNTS_V",
        "endgenerate",
        "always @ (posedge clk_i)\nif (mem_init_done)\n    INC_COUNTS <= #TCQ  (DWIDTH/8)*(bl_out_reg);\nelse  begin\n    if (fixed_bl_i == 0)\n       INC_COUNTS <= #TCQ  (DWIDTH/8)*(64);\n    else\n       INC_COUNTS <= #TCQ  (DWIDTH/8)*(fixed_bl_i);\n    end\nend",
        "generate\nif (FAMILY == \"SPARTAN6\" ) begin : INC_COUNTS_S",
        "always @ (posedge clk_i) begin\nif (addr_out[31:8] >= end_addr_i[31:8])\n    gen_addr_larger <=     1'b1;\nelse\n    gen_addr_larger <=     1'b0;\nend",
        "generate\nif (CMD_PATTERN == \"CGEN_PRBS\" || CMD_PATTERN == \"CGEN_ALL\" ) begin: gen_prbs_addr\ncmd_prbs_gen #\n  ( \n    .TCQ               (TCQ),\n    .FAMILY      (FAMILY),\n    .ADDR_WIDTH          (32),\n    .DWIDTH     (DWIDTH),\n    .PRBS_WIDTH (32),\n    .SEED_WIDTH (32),\n    .PRBS_EADDR_MASK_POS          (PRBS_EADDR_MASK_POS ),\n    .PRBS_SADDR_MASK_POS           (PRBS_SADDR_MASK_POS  ),\n    .PRBS_EADDR         (PRBS_EADDR),\n    .PRBS_SADDR          (PRBS_SADDR )\n   )\n   addr_prbs_gen\n  (\n   .clk_i            (clk_i),\n   .clk_en           (cmd_clk_en),\n   .prbs_seed_init   (mode_load_pulse),\n   .prbs_seed_i      (cmd_seed_i[31:0]),\n   .prbs_o           (prbs_addr)\n  );\nend\nendgenerate",
        "always @ (posedge clk_i) begin\nif (rst_i[3])\n  addr_out <= #TCQ    start_addr_i;\nelse\n   case({addr_mode_reg})\n         3'b000: addr_out <= #TCQ    bram_addr_i;\n         3'b001: addr_out <= #TCQ    fixed_addr;\n         3'b010: addr_out <= #TCQ    prbs_addr;\n         3'b011: addr_out <= #TCQ    {2'b0,seq_addr[29:0]};\n         3'b100: addr_out <= #TCQ    {2'b00,seq_addr[6:2],seq_addr[23:0]};\n         3'b101: addr_out <= #TCQ    {prbs_addr[31:20],seq_addr[19:0]} ;\n\n         default : addr_out <= #TCQ    'b0;\n   endcase\nend",
        "always @ (posedge clk_i)\n     mode_load_pulse <= #TCQ  mode_load_d1 & ~mode_load_d2;\n",
        "always @ (posedge clk_i) begin\n   if (mode_load_pulse) begin\n        bl_mode_reg    <= #TCQ    bl_mode_i ;\n   end\n   mode_load_d1         <= #TCQ    mode_load_i;\n   mode_load_d2         <= #TCQ    mode_load_d1;\nend",
        "always @ (posedge clk_i) begin\n   if (rst_i[3])\n        if (CMD_PATTERN == \"CGEN_BRAM\")\n         addr_mode_reg  <= #TCQ    3'b000;\n        else                                     \n         addr_mode_reg  <= #TCQ    3'b011;\n   else if (mode_load_pulse)\n         addr_mode_reg  <= #TCQ    addr_mode_i;\nend",
        " always @ (posedge clk_i)\n     buf_avail_r <= #TCQ  (rd_data_received_counts + 64) - rd_data_counts_asked;\n",
        "always @ (posedge clk_i) begin\n if (rst_i[0]) begin\n     rd_data_received_counts <= #TCQ  'b0;\n     rd_data_received_counts_total <= #TCQ  'b0;\n  end else if(reading_rd_data_i) begin\n     rd_data_received_counts <= #TCQ  rd_data_received_counts + 1;\n     rd_data_received_counts_total <= #TCQ  rd_data_received_counts_total + 1;\n     end\n end",
        "always @ (posedge clk_i) begin\n if (rst_i[0]) begin\n    rd_data_counts_asked <= #TCQ  'b0;\n  end else if (instr_vld_dly1 && pipe_data_in[32]== 1) begin\n    if (pipe_data_in[40:35] == 0)\n       rd_data_counts_asked <=  #TCQ rd_data_counts_asked + (64) ;\n    else\n       rd_data_counts_asked <=  #TCQ rd_data_counts_asked + (pipe_data_in[40:35]) ;\n\n    end\n end",
        " always @ (posedge clk_i)\n    instr_vld_dly1  <=  #TCQ instr_vld;\n",
        "always @ (posedge clk_i) \nbegin\n     if (rst_i[2])\n        pipe_data_in[41] <=  #TCQ   'b0;\n     else if (cmd_vld)\n        pipe_data_in[41] <=  #TCQ   instr_vld;\n     else if (rdy_i && pipe_out_vld)\n        pipe_data_in[41] <=  #TCQ   1'b0;\n end",
        " always @ (posedge clk_i)\n begin\n    if (rst_i[2]) begin\n       pipe_data_in[40:32] <= #TCQ    'b0;\n       force_smallvalue <= #TCQ  1'b0;\n       end\n    else if (instr_vld) begin\n      if (instr_mode_reg == 0) begin\n              pipe_data_in[34:32] <= #TCQ    instr_out;\n              end\n      else if (instr_out[2]) begin\n              pipe_data_in[34:32] <= #TCQ    3'b100;\n              end\n        \n      else if ( FAMILY == \"SPARTAN6\" && PORT_MODE == \"RD_MODE\")\n      begin\n            pipe_data_in[34:32] <= #TCQ  {instr_out[2:1],1'b1};\n              end\n            \n      else if ((force_wrcmd_gen || buf_avail_r <=  15) && FAMILY == \"SPARTAN6\" &&  PORT_MODE != \"RD_MODE\")\n      begin\n            pipe_data_in[34:32] <= #TCQ    {instr_out[2],2'b00};\n              end\n      else begin\n             pipe_data_in[34:32] <= #TCQ    instr_out; \n              end\n\n   \n   \n     if (bl_mode_i[1:0] == 2'b00)                                        \n          pipe_data_in[40:35] <=  #TCQ   bl_out;\n     else if (FAMILY == \"VIRTEX6\")\n              pipe_data_in[40:35] <=  #TCQ   bl_out;\n     else if (force_bl1 && (bl_mode_reg == 2'b10 ) && FAMILY == \"SPARTAN6\") \n\n      pipe_data_in[40:35] <=  #TCQ   6'b000001;\n     else if ((buf_avail_r[5:0]  >= 6'b111100 && buf_avail_r[6] == 1'b0) && pipe_data_in[32] == 1'b1 && FAMILY == \"SPARTAN6\")         \n\n\n       begin\n        if (bl_mode_reg == 2'b10)\n            force_smallvalue    <= #TCQ  ~force_smallvalue;\n      \n        if ((buf_avail_r[6] && bl_mode_reg == 2'b10))\n\n\n             pipe_data_in[40:35] <= #TCQ    {2'b0,bl_out[3:1],1'b1};\n        else\n            pipe_data_in[40:35] <=   #TCQ  bl_out;\n        end\n   else if (buf_avail_r  < 64 && rd_buff_avail_i >= 0 && instr_out[0] == 1'b1 && (bl_mode_reg == 2'b10 )) \n         if (FAMILY == \"SPARTAN6\")\n         pipe_data_in[40:35] <=  #TCQ   {2'b0,bl_out[3:0] + 1};\n         else\n            pipe_data_in[40:35] <=   #TCQ  bl_out;\n\n    end  ",
        " always @ (posedge clk_i)\n begin\n      instr_mode_reg <= #TCQ  instr_mode_i;\n end ",
        "   always @ (posedge clk_i) begin\n    if (rst_i[0])\n         force_wrcmd_gen <= #TCQ  1'b0;\n    else if (buf_avail_r == 63)\n         force_wrcmd_gen <= #TCQ  1'b0;\n    else if (instr_vld_dly1 && pipe_data_in[32]== 1 && pipe_data_in[41:35] > 16)\n         force_wrcmd_gen <= #TCQ  1'b1;\n    end",
        "    always @ (posedge clk_i) begin\n    if (rst_i[1])\n       pipe_data_in[31:0] <= #TCQ    start_addr_i;\n    else if (instr_vld)\n       \n      if (gen_addr_larger && (addr_mode_reg == 3'b100 || addr_mode_reg == 3'b010)) \n              pipe_data_in[31:0] <= #TCQ  {end_addr_i[31:8],8'h0};\n      else if ((NUM_DQ_PINS >= 128) && (NUM_DQ_PINS <=  144))\n      begin\n         if (MEM_BURST_LEN == 8)\n            pipe_data_in[31:0] <= #TCQ    {addr_out[31:7], 7'b0000000};\n         else      \n            pipe_data_in[31:0] <= #TCQ    {addr_out[31:6], 6'b000000};\n       end\n            \n      else if ((NUM_DQ_PINS >= 64) && (NUM_DQ_PINS < 128))\n            begin\n\n         if (MEM_BURST_LEN == 8)\n            pipe_data_in[31:0] <= #TCQ    {addr_out[31:6], 6'b000000};\n         else\n         pipe_data_in[31:0] <= #TCQ    {addr_out[31:5], 5'b00000};\n       end\n         \n      else if ((NUM_DQ_PINS == 32) || (NUM_DQ_PINS == 40) || (NUM_DQ_PINS == 48) || (NUM_DQ_PINS == 56))\n            begin\n\n         if (MEM_BURST_LEN == 8)     \n            pipe_data_in[31:0] <= #TCQ    {addr_out[31:5], 5'b00000};\n         else\n         pipe_data_in[31:0] <= #TCQ    {addr_out[31:4], 4'b0000};\n       end\n         \n      else if ((NUM_DQ_PINS == 16) || (NUM_DQ_PINS == 24))\n         if (MEM_BURST_LEN == 8)     \n            pipe_data_in[31:0] <= #TCQ    {addr_out[31:4], 4'b0000};\n         else\n         pipe_data_in[31:0] <= #TCQ    {addr_out[31:3], 3'b000};\n         \n      else if ((NUM_DQ_PINS == 8) )\n         if (MEM_BURST_LEN == 8)             \n            pipe_data_in[31:0] <= #TCQ    {addr_out[31:3], 3'b000};\n         else\n         pipe_data_in[31:0] <= #TCQ    {addr_out[31:2], 2'b00};\n         \nend",
        "generate\nif (FAMILY == \"VIRTEX6\")  begin: pipe_in_v6\n    always @ (posedge clk_i) begin",
        "    always @ (posedge clk_i) begin\n    if (rst_i[0])\n       pipe_data_in[31:0] <= #TCQ    start_addr_i;\n    else if (instr_vld)\n         if (gen_addr_larger && (addr_mode_reg == 3'b100 || addr_mode_reg == 3'b010)) \n            if (DWIDTH == 32)\n              pipe_data_in[31:0] <= #TCQ  {end_addr_i[31:8],8'h0};\n            else if (DWIDTH == 64)\n              pipe_data_in[31:0] <= #TCQ  {end_addr_i[31:9],9'h0};\n            else\n              pipe_data_in[31:0] <= #TCQ  {end_addr_i[31:10],10'h0};\n            \n         else begin\n             if (DWIDTH == 32)\n              pipe_data_in[31:0] <= #TCQ    {addr_out[31:2],2'b00} ;\n             else if (DWIDTH == 64)\n              pipe_data_in[31:0] <= #TCQ    {addr_out[31:3],3'b000} ;\n             else if (DWIDTH == 128)\n              pipe_data_in[31:0] <= #TCQ    {addr_out[31:4],4'b0000} ;\n             end\nend",
        "generate\nif (FAMILY == \"SPARTAN6\")  begin: pipe_in_s6\n    always @ (posedge clk_i) begin",
        "assign cmd_clk_en =  ( rdy_i & pipe_out_vld & run_traffic_i ||  mode_load_pulse && (CMD_PATTERN == \"CGEN_BRAM\"));",
        "always @(posedge clk_i) begin \n    cmd_vld          <=  #TCQ (cmd_clk_en | (mode_load_pulse & first_load_pulse )); \n                   \nend",
        "generate\nif (CMD_PATTERN != \"CGEN_BRAM\")  begin: cv2\n",
        "end endgenerate",
        "always @(posedge clk_i) begin \n    cmd_vld          <=  #TCQ (cmd_clk_en ); \n                   \nend",
        "generate\nif (CMD_PATTERN == \"CGEN_BRAM\")  begin: cv1\n",
        "always @ (posedge clk_i) begin\n if (rst_i[0])\n    first_load_pulse <= #TCQ 1'b1;\n else if (mode_load_pulse)\n    first_load_pulse <= #TCQ 1'b0;\n else\n    first_load_pulse <= #TCQ first_load_pulse;\n end",
        "always @(posedge clk_i) begin                    \n\n     instr_vld        <=  #TCQ  (cmd_clk_en | (mode_load_pulse & first_load_pulse));\n     bl_out_clk_en    <=  #TCQ  (cmd_clk_en | (mode_load_pulse & first_load_pulse));\n     bl_out_vld       <=  #TCQ  bl_out_clk_en;\n     pipe_data_in_vld <=  #TCQ  instr_vld;\n end",
        "assign addr_o       = pipe_data_o[31:0];\nassign instr_o      = pipe_data_o[34:32];\nassign bl_o         = pipe_data_o[40:35];\n\n\nassign cmd_o_vld    = pipe_data_o[41] & run_traffic_r;\nassign pipe_out_vld = pipe_data_o[41] & run_traffic_r;\n\n\nassign pipe_data_o = pipe_data_in;\n",
        "always @ (posedge clk_i)\nbegin\n     run_traffic_r <= #TCQ run_traffic_i;\n     if (  run_traffic_i &&   ~run_traffic_r )\n          run_traffic_pulse <= #TCQ 1'b1;\n     else\n          run_traffic_pulse <= #TCQ 1'b0;\nend     "
    ]
}