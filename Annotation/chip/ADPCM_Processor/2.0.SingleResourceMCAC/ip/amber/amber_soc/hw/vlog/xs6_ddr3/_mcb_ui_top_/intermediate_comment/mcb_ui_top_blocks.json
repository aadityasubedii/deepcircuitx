{
    "line_num": [
        [
            2156,
            2156
        ],
        [
            2058,
            2152
        ],
        [
            2054,
            2153
        ],
        [
            2027,
            2053
        ],
        [
            2026,
            2154
        ],
        [
            1939,
            2021
        ],
        [
            1927,
            1937
        ],
        [
            1923,
            2022
        ],
        [
            1895,
            1922
        ],
        [
            1808,
            1890
        ],
        [
            1796,
            1806
        ],
        [
            1792,
            1891
        ],
        [
            1766,
            1788
        ],
        [
            1765,
            1791
        ],
        [
            1764,
            1892
        ],
        [
            1668,
            1759
        ],
        [
            1662,
            1760
        ],
        [
            1635,
            1661
        ],
        [
            1634,
            1761
        ],
        [
            1504,
            1631
        ],
        [
            1414,
            1414
        ],
        [
            1406,
            1499
        ],
        [
            1402,
            1500
        ],
        [
            1375,
            1401
        ],
        [
            1374,
            1501
        ],
        [
            1162,
            1371
        ],
        [
            1122,
            1161
        ],
        [
            1067,
            1070
        ],
        [
            1037,
            1065
        ],
        [
            805,
            820
        ],
        [
            759,
            800
        ],
        [
            714,
            757
        ],
        [
            693,
            710
        ]
    ],
    "blocks": [
        "endmodule",
        "      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s5_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S5_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S5_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S5_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S5_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S5_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S5_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S5_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S5_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S5_AXI_ENABLE_AP           )\n        )\n        p5_axi_mcb\n        (\n        .aclk              ( s5_axi_aclk        ),\n        .aresetn           ( s5_axi_aresetn     ),\n        .s_axi_awid        ( s5_axi_awid        ),\n        .s_axi_awaddr      ( s5_axi_awaddr_i    ),\n        .s_axi_awlen       ( s5_axi_awlen       ),\n        .s_axi_awsize      ( s5_axi_awsize      ),\n        .s_axi_awburst     ( s5_axi_awburst     ),\n        .s_axi_awlock      ( s5_axi_awlock      ),\n        .s_axi_awcache     ( s5_axi_awcache     ),\n        .s_axi_awprot      ( s5_axi_awprot      ),\n        .s_axi_awqos       ( s5_axi_awqos       ),\n        .s_axi_awvalid     ( s5_axi_awvalid     ),\n        .s_axi_awready     ( s5_axi_awready     ),\n        .s_axi_wdata       ( s5_axi_wdata       ),\n        .s_axi_wstrb       ( s5_axi_wstrb       ),\n        .s_axi_wlast       ( s5_axi_wlast       ),\n        .s_axi_wvalid      ( s5_axi_wvalid      ),\n        .s_axi_wready      ( s5_axi_wready      ),\n        .s_axi_bid         ( s5_axi_bid         ),\n        .s_axi_bresp       ( s5_axi_bresp       ),\n        .s_axi_bvalid      ( s5_axi_bvalid      ),\n        .s_axi_bready      ( s5_axi_bready      ),\n        .s_axi_arid        ( s5_axi_arid        ),\n        .s_axi_araddr      ( s5_axi_araddr_i    ),\n        .s_axi_arlen       ( s5_axi_arlen       ),\n        .s_axi_arsize      ( s5_axi_arsize      ),\n        .s_axi_arburst     ( s5_axi_arburst     ),\n        .s_axi_arlock      ( s5_axi_arlock      ),\n        .s_axi_arcache     ( s5_axi_arcache     ),\n        .s_axi_arprot      ( s5_axi_arprot      ),\n        .s_axi_arqos       ( s5_axi_arqos       ),\n        .s_axi_arvalid     ( s5_axi_arvalid     ),\n        .s_axi_arready     ( s5_axi_arready     ),\n        .s_axi_rid         ( s5_axi_rid         ),\n        .s_axi_rdata       ( s5_axi_rdata       ),\n        .s_axi_rresp       ( s5_axi_rresp       ),\n        .s_axi_rlast       ( s5_axi_rlast       ),\n        .s_axi_rvalid      ( s5_axi_rvalid      ),\n        .s_axi_rready      ( s5_axi_rready      ),\n        .mcb_cmd_clk       ( p5_cmd_clk_i       ),\n        .mcb_cmd_en        ( p5_cmd_en_i        ),\n        .mcb_cmd_instr     ( p5_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p5_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p5_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p5_cmd_empty_i     ),\n        .mcb_cmd_full      ( p5_cmd_full_i      ),\n        .mcb_wr_clk        ( p5_wr_clk_i        ),\n        .mcb_wr_en         ( p5_wr_en_i         ),\n        .mcb_wr_mask       ( p5_wr_mask_i       ),\n        .mcb_wr_data       ( p5_wr_data_i       ),\n        .mcb_wr_full       ( p5_wr_full_i       ),\n        .mcb_wr_empty      ( p5_wr_empty_i      ),\n        .mcb_wr_count      ( p5_wr_count_i      ),\n        .mcb_wr_underrun   ( p5_wr_underrun_i   ),\n        .mcb_wr_error      ( p5_wr_error_i      ),\n        .mcb_rd_clk        ( p5_rd_clk_i        ),\n        .mcb_rd_en         ( p5_rd_en_i         ),\n        .mcb_rd_data       ( p5_rd_data_i       ),\n        .mcb_rd_full       ( p5_rd_full_i       ),\n        .mcb_rd_empty      ( p5_rd_empty_i      ),\n        .mcb_rd_count      ( p5_rd_count_i      ),\n        .mcb_rd_overflow   ( p5_rd_overflow_i   ),\n        .mcb_rd_error      ( p5_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );",
        "    else begin : P5_UI_AXI\n      assign  p5_arb_en_i        =  p5_arb_en;\n      assign  s5_axi_araddr_i    = s5_axi_araddr & P_S5_AXI_ADDRMASK;\n      assign  s5_axi_awaddr_i    = s5_axi_awaddr & P_S5_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s5_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S5_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S5_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S5_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S5_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S5_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S5_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S5_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S5_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S5_AXI_ENABLE_AP           )\n        )\n        p5_axi_mcb\n        (\n        .aclk              ( s5_axi_aclk        ),\n        .aresetn           ( s5_axi_aresetn     ),\n        .s_axi_awid        ( s5_axi_awid        ),\n        .s_axi_awaddr      ( s5_axi_awaddr_i    ),\n        .s_axi_awlen       ( s5_axi_awlen       ),\n        .s_axi_awsize      ( s5_axi_awsize      ),\n        .s_axi_awburst     ( s5_axi_awburst     ),\n        .s_axi_awlock      ( s5_axi_awlock      ),\n        .s_axi_awcache     ( s5_axi_awcache     ),\n        .s_axi_awprot      ( s5_axi_awprot      ),\n        .s_axi_awqos       ( s5_axi_awqos       ),\n        .s_axi_awvalid     ( s5_axi_awvalid     ),\n        .s_axi_awready     ( s5_axi_awready     ),\n        .s_axi_wdata       ( s5_axi_wdata       ),\n        .s_axi_wstrb       ( s5_axi_wstrb       ),\n        .s_axi_wlast       ( s5_axi_wlast       ),\n        .s_axi_wvalid      ( s5_axi_wvalid      ),\n        .s_axi_wready      ( s5_axi_wready      ),\n        .s_axi_bid         ( s5_axi_bid         ),\n        .s_axi_bresp       ( s5_axi_bresp       ),\n        .s_axi_bvalid      ( s5_axi_bvalid      ),\n        .s_axi_bready      ( s5_axi_bready      ),\n        .s_axi_arid        ( s5_axi_arid        ),\n        .s_axi_araddr      ( s5_axi_araddr_i    ),\n        .s_axi_arlen       ( s5_axi_arlen       ),\n        .s_axi_arsize      ( s5_axi_arsize      ),\n        .s_axi_arburst     ( s5_axi_arburst     ),\n        .s_axi_arlock      ( s5_axi_arlock      ),\n        .s_axi_arcache     ( s5_axi_arcache     ),\n        .s_axi_arprot      ( s5_axi_arprot      ),\n        .s_axi_arqos       ( s5_axi_arqos       ),\n        .s_axi_arvalid     ( s5_axi_arvalid     ),\n        .s_axi_arready     ( s5_axi_arready     ),\n        .s_axi_rid         ( s5_axi_rid         ),\n        .s_axi_rdata       ( s5_axi_rdata       ),\n        .s_axi_rresp       ( s5_axi_rresp       ),\n        .s_axi_rlast       ( s5_axi_rlast       ),\n        .s_axi_rvalid      ( s5_axi_rvalid      ),\n        .s_axi_rready      ( s5_axi_rready      ),\n        .mcb_cmd_clk       ( p5_cmd_clk_i       ),\n        .mcb_cmd_en        ( p5_cmd_en_i        ),\n        .mcb_cmd_instr     ( p5_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p5_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p5_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p5_cmd_empty_i     ),\n        .mcb_cmd_full      ( p5_cmd_full_i      ),\n        .mcb_wr_clk        ( p5_wr_clk_i        ),\n        .mcb_wr_en         ( p5_wr_en_i         ),\n        .mcb_wr_mask       ( p5_wr_mask_i       ),\n        .mcb_wr_data       ( p5_wr_data_i       ),\n        .mcb_wr_full       ( p5_wr_full_i       ),\n        .mcb_wr_empty      ( p5_wr_empty_i      ),\n        .mcb_wr_count      ( p5_wr_count_i      ),\n        .mcb_wr_underrun   ( p5_wr_underrun_i   ),\n        .mcb_wr_error      ( p5_wr_error_i      ),\n        .mcb_rd_clk        ( p5_rd_clk_i        ),\n        .mcb_rd_en         ( p5_rd_en_i         ),\n        .mcb_rd_data       ( p5_rd_data_i       ),\n        .mcb_rd_full       ( p5_rd_full_i       ),\n        .mcb_rd_empty      ( p5_rd_empty_i      ),\n        .mcb_rd_count      ( p5_rd_count_i      ),\n        .mcb_rd_overflow   ( p5_rd_overflow_i   ),\n        .mcb_rd_error      ( p5_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end",
        "    if (C_S5_AXI_ENABLE == 0) begin : P5_UI_MCB\n      assign  p5_arb_en_i        =  p5_arb_en        ; \n      assign  p5_cmd_clk_i       =  p5_cmd_clk       ; \n      assign  p5_cmd_en_i        =  p5_cmd_en        ; \n      assign  p5_cmd_instr_i     =  p5_cmd_instr     ; \n      assign  p5_cmd_bl_i        =  p5_cmd_bl        ; \n      assign  p5_cmd_byte_addr_i =  p5_cmd_byte_addr ; \n      assign  p5_cmd_empty       =  p5_cmd_empty_i   ; \n      assign  p5_cmd_full        =  p5_cmd_full_i    ; \n      assign  p5_wr_clk_i        =  p5_wr_clk        ; \n      assign  p5_wr_en_i         =  p5_wr_en         ; \n      assign  p5_wr_mask_i       =  p5_wr_mask       ; \n      assign  p5_wr_data_i       =  p5_wr_data       ; \n      assign  p5_wr_full         =  p5_wr_full_i     ; \n      assign  p5_wr_empty        =  p5_wr_empty_i    ; \n      assign  p5_wr_count        =  p5_wr_count_i    ; \n      assign  p5_wr_underrun     =  p5_wr_underrun_i ; \n      assign  p5_wr_error        =  p5_wr_error_i    ; \n      assign  p5_rd_clk_i        =  p5_rd_clk        ; \n      assign  p5_rd_en_i         =  p5_rd_en         ; \n      assign  p5_rd_data         =  p5_rd_data_i     ; \n      assign  p5_rd_full         =  p5_rd_full_i     ; \n      assign  p5_rd_empty        =  p5_rd_empty_i    ; \n      assign  p5_rd_count        =  p5_rd_count_i    ; \n      assign  p5_rd_overflow     =  p5_rd_overflow_i ; \n      assign  p5_rd_error        =  p5_rd_error_i    ; \n    end",
        "  generate\n    if (C_S5_AXI_ENABLE == 0) begin : P5_UI_MCB\n      assign  p5_arb_en_i        =  p5_arb_en        ; \n      assign  p5_cmd_clk_i       =  p5_cmd_clk       ; \n      assign  p5_cmd_en_i        =  p5_cmd_en        ; \n      assign  p5_cmd_instr_i     =  p5_cmd_instr     ; \n      assign  p5_cmd_bl_i        =  p5_cmd_bl        ; \n      assign  p5_cmd_byte_addr_i =  p5_cmd_byte_addr ; \n      assign  p5_cmd_empty       =  p5_cmd_empty_i   ; \n      assign  p5_cmd_full        =  p5_cmd_full_i    ; \n      assign  p5_wr_clk_i        =  p5_wr_clk        ; \n      assign  p5_wr_en_i         =  p5_wr_en         ; \n      assign  p5_wr_mask_i       =  p5_wr_mask       ; \n      assign  p5_wr_data_i       =  p5_wr_data       ; \n      assign  p5_wr_full         =  p5_wr_full_i     ; \n      assign  p5_wr_empty        =  p5_wr_empty_i    ; \n      assign  p5_wr_count        =  p5_wr_count_i    ; \n      assign  p5_wr_underrun     =  p5_wr_underrun_i ; \n      assign  p5_wr_error        =  p5_wr_error_i    ; \n      assign  p5_rd_clk_i        =  p5_rd_clk        ; \n      assign  p5_rd_en_i         =  p5_rd_en         ; \n      assign  p5_rd_data         =  p5_rd_data_i     ; \n      assign  p5_rd_full         =  p5_rd_full_i     ; \n      assign  p5_rd_empty        =  p5_rd_empty_i    ; \n      assign  p5_rd_count        =  p5_rd_count_i    ; \n      assign  p5_rd_overflow     =  p5_rd_overflow_i ; \n      assign  p5_rd_error        =  p5_rd_error_i    ; \n    end\n    else begin : P5_UI_AXI\n      assign  p5_arb_en_i        =  p5_arb_en;\n      assign  s5_axi_araddr_i    = s5_axi_araddr & P_S5_AXI_ADDRMASK;\n      assign  s5_axi_awaddr_i    = s5_axi_awaddr & P_S5_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s5_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S5_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S5_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S5_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S5_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S5_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S5_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S5_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S5_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S5_AXI_ENABLE_AP           )\n        )\n        p5_axi_mcb\n        (\n        .aclk              ( s5_axi_aclk        ),\n        .aresetn           ( s5_axi_aresetn     ),\n        .s_axi_awid        ( s5_axi_awid        ),\n        .s_axi_awaddr      ( s5_axi_awaddr_i    ),\n        .s_axi_awlen       ( s5_axi_awlen       ),\n        .s_axi_awsize      ( s5_axi_awsize      ),\n        .s_axi_awburst     ( s5_axi_awburst     ),\n        .s_axi_awlock      ( s5_axi_awlock      ),\n        .s_axi_awcache     ( s5_axi_awcache     ),\n        .s_axi_awprot      ( s5_axi_awprot      ),\n        .s_axi_awqos       ( s5_axi_awqos       ),\n        .s_axi_awvalid     ( s5_axi_awvalid     ),\n        .s_axi_awready     ( s5_axi_awready     ),\n        .s_axi_wdata       ( s5_axi_wdata       ),\n        .s_axi_wstrb       ( s5_axi_wstrb       ),\n        .s_axi_wlast       ( s5_axi_wlast       ),\n        .s_axi_wvalid      ( s5_axi_wvalid      ),\n        .s_axi_wready      ( s5_axi_wready      ),\n        .s_axi_bid         ( s5_axi_bid         ),\n        .s_axi_bresp       ( s5_axi_bresp       ),\n        .s_axi_bvalid      ( s5_axi_bvalid      ),\n        .s_axi_bready      ( s5_axi_bready      ),\n        .s_axi_arid        ( s5_axi_arid        ),\n        .s_axi_araddr      ( s5_axi_araddr_i    ),\n        .s_axi_arlen       ( s5_axi_arlen       ),\n        .s_axi_arsize      ( s5_axi_arsize      ),\n        .s_axi_arburst     ( s5_axi_arburst     ),\n        .s_axi_arlock      ( s5_axi_arlock      ),\n        .s_axi_arcache     ( s5_axi_arcache     ),\n        .s_axi_arprot      ( s5_axi_arprot      ),\n        .s_axi_arqos       ( s5_axi_arqos       ),\n        .s_axi_arvalid     ( s5_axi_arvalid     ),\n        .s_axi_arready     ( s5_axi_arready     ),\n        .s_axi_rid         ( s5_axi_rid         ),\n        .s_axi_rdata       ( s5_axi_rdata       ),\n        .s_axi_rresp       ( s5_axi_rresp       ),\n        .s_axi_rlast       ( s5_axi_rlast       ),\n        .s_axi_rvalid      ( s5_axi_rvalid      ),\n        .s_axi_rready      ( s5_axi_rready      ),\n        .mcb_cmd_clk       ( p5_cmd_clk_i       ),\n        .mcb_cmd_en        ( p5_cmd_en_i        ),\n        .mcb_cmd_instr     ( p5_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p5_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p5_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p5_cmd_empty_i     ),\n        .mcb_cmd_full      ( p5_cmd_full_i      ),\n        .mcb_wr_clk        ( p5_wr_clk_i        ),\n        .mcb_wr_en         ( p5_wr_en_i         ),\n        .mcb_wr_mask       ( p5_wr_mask_i       ),\n        .mcb_wr_data       ( p5_wr_data_i       ),\n        .mcb_wr_full       ( p5_wr_full_i       ),\n        .mcb_wr_empty      ( p5_wr_empty_i      ),\n        .mcb_wr_count      ( p5_wr_count_i      ),\n        .mcb_wr_underrun   ( p5_wr_underrun_i   ),\n        .mcb_wr_error      ( p5_wr_error_i      ),\n        .mcb_rd_clk        ( p5_rd_clk_i        ),\n        .mcb_rd_en         ( p5_rd_en_i         ),\n        .mcb_rd_data       ( p5_rd_data_i       ),\n        .mcb_rd_full       ( p5_rd_full_i       ),\n        .mcb_rd_empty      ( p5_rd_empty_i      ),\n        .mcb_rd_count      ( p5_rd_count_i      ),\n        .mcb_rd_overflow   ( p5_rd_overflow_i   ),\n        .mcb_rd_error      ( p5_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate",
        "      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S4_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S4_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S4_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S4_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S4_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S4_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S4_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S4_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S4_AXI_ENABLE_AP           )\n        )\n        p4_axi_mcb\n        (\n        .aclk              ( s4_axi_aclk        ),\n        .aresetn           ( s4_axi_aresetn     ),\n        .s_axi_awid        ( s4_axi_awid        ),\n        .s_axi_awaddr      ( s4_axi_awaddr_i    ),\n        .s_axi_awlen       ( s4_axi_awlen       ),\n        .s_axi_awsize      ( s4_axi_awsize      ),\n        .s_axi_awburst     ( s4_axi_awburst     ),\n        .s_axi_awlock      ( s4_axi_awlock      ),\n        .s_axi_awcache     ( s4_axi_awcache     ),\n        .s_axi_awprot      ( s4_axi_awprot      ),\n        .s_axi_awqos       ( s4_axi_awqos       ),\n        .s_axi_awvalid     ( s4_axi_awvalid     ),\n        .s_axi_awready     ( s4_axi_awready     ),\n        .s_axi_wdata       ( s4_axi_wdata       ),\n        .s_axi_wstrb       ( s4_axi_wstrb       ),\n        .s_axi_wlast       ( s4_axi_wlast       ),\n        .s_axi_wvalid      ( s4_axi_wvalid      ),\n        .s_axi_wready      ( s4_axi_wready      ),\n        .s_axi_bid         ( s4_axi_bid         ),\n        .s_axi_bresp       ( s4_axi_bresp       ),\n        .s_axi_bvalid      ( s4_axi_bvalid      ),\n        .s_axi_bready      ( s4_axi_bready      ),\n        .s_axi_arid        ( s4_axi_arid        ),\n        .s_axi_araddr      ( s4_axi_araddr_i    ),\n        .s_axi_arlen       ( s4_axi_arlen       ),\n        .s_axi_arsize      ( s4_axi_arsize      ),\n        .s_axi_arburst     ( s4_axi_arburst     ),\n        .s_axi_arlock      ( s4_axi_arlock      ),\n        .s_axi_arcache     ( s4_axi_arcache     ),\n        .s_axi_arprot      ( s4_axi_arprot      ),\n        .s_axi_arqos       ( s4_axi_arqos       ),\n        .s_axi_arvalid     ( s4_axi_arvalid     ),\n        .s_axi_arready     ( s4_axi_arready     ),\n        .s_axi_rid         ( s4_axi_rid         ),\n        .s_axi_rdata       ( s4_axi_rdata       ),\n        .s_axi_rresp       ( s4_axi_rresp       ),\n        .s_axi_rlast       ( s4_axi_rlast       ),\n        .s_axi_rvalid      ( s4_axi_rvalid      ),\n        .s_axi_rready      ( s4_axi_rready      ),\n        .mcb_cmd_clk       ( p4_cmd_clk_i       ),\n        .mcb_cmd_en        ( p4_cmd_en_i        ),\n        .mcb_cmd_instr     ( p4_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p4_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p4_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p4_cmd_empty_i     ),\n        .mcb_cmd_full      ( p4_cmd_full_i      ),\n        .mcb_wr_clk        ( p4_wr_clk_i        ),\n        .mcb_wr_en         ( p4_wr_en_i         ),\n        .mcb_wr_mask       ( p4_wr_mask_i       ),\n        .mcb_wr_data       ( p4_wr_data_i       ),\n        .mcb_wr_full       ( p4_wr_full_i       ),\n        .mcb_wr_empty      ( p4_wr_empty_i      ),\n        .mcb_wr_count      ( p4_wr_count_i      ),\n        .mcb_wr_underrun   ( p4_wr_underrun_i   ),\n        .mcb_wr_error      ( p4_wr_error_i      ),\n        .mcb_rd_clk        ( p4_rd_clk_i        ),\n        .mcb_rd_en         ( p4_rd_en_i         ),\n        .mcb_rd_data       ( p4_rd_data_i       ),\n        .mcb_rd_full       ( p4_rd_full_i       ),\n        .mcb_rd_empty      ( p4_rd_empty_i      ),\n        .mcb_rd_count      ( p4_rd_count_i      ),\n        .mcb_rd_overflow   ( p4_rd_overflow_i   ),\n        .mcb_rd_error      ( p4_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );",
        "      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s4_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );",
        "    else begin : P4_UI_AXI\n      assign  p4_arb_en_i        =  p4_arb_en;\n      assign  s4_axi_araddr_i    = s4_axi_araddr & P_S4_AXI_ADDRMASK;\n      assign  s4_axi_awaddr_i    = s4_axi_awaddr & P_S4_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s4_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S4_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S4_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S4_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S4_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S4_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S4_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S4_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S4_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S4_AXI_ENABLE_AP           )\n        )\n        p4_axi_mcb\n        (\n        .aclk              ( s4_axi_aclk        ),\n        .aresetn           ( s4_axi_aresetn     ),\n        .s_axi_awid        ( s4_axi_awid        ),\n        .s_axi_awaddr      ( s4_axi_awaddr_i    ),\n        .s_axi_awlen       ( s4_axi_awlen       ),\n        .s_axi_awsize      ( s4_axi_awsize      ),\n        .s_axi_awburst     ( s4_axi_awburst     ),\n        .s_axi_awlock      ( s4_axi_awlock      ),\n        .s_axi_awcache     ( s4_axi_awcache     ),\n        .s_axi_awprot      ( s4_axi_awprot      ),\n        .s_axi_awqos       ( s4_axi_awqos       ),\n        .s_axi_awvalid     ( s4_axi_awvalid     ),\n        .s_axi_awready     ( s4_axi_awready     ),\n        .s_axi_wdata       ( s4_axi_wdata       ),\n        .s_axi_wstrb       ( s4_axi_wstrb       ),\n        .s_axi_wlast       ( s4_axi_wlast       ),\n        .s_axi_wvalid      ( s4_axi_wvalid      ),\n        .s_axi_wready      ( s4_axi_wready      ),\n        .s_axi_bid         ( s4_axi_bid         ),\n        .s_axi_bresp       ( s4_axi_bresp       ),\n        .s_axi_bvalid      ( s4_axi_bvalid      ),\n        .s_axi_bready      ( s4_axi_bready      ),\n        .s_axi_arid        ( s4_axi_arid        ),\n        .s_axi_araddr      ( s4_axi_araddr_i    ),\n        .s_axi_arlen       ( s4_axi_arlen       ),\n        .s_axi_arsize      ( s4_axi_arsize      ),\n        .s_axi_arburst     ( s4_axi_arburst     ),\n        .s_axi_arlock      ( s4_axi_arlock      ),\n        .s_axi_arcache     ( s4_axi_arcache     ),\n        .s_axi_arprot      ( s4_axi_arprot      ),\n        .s_axi_arqos       ( s4_axi_arqos       ),\n        .s_axi_arvalid     ( s4_axi_arvalid     ),\n        .s_axi_arready     ( s4_axi_arready     ),\n        .s_axi_rid         ( s4_axi_rid         ),\n        .s_axi_rdata       ( s4_axi_rdata       ),\n        .s_axi_rresp       ( s4_axi_rresp       ),\n        .s_axi_rlast       ( s4_axi_rlast       ),\n        .s_axi_rvalid      ( s4_axi_rvalid      ),\n        .s_axi_rready      ( s4_axi_rready      ),\n        .mcb_cmd_clk       ( p4_cmd_clk_i       ),\n        .mcb_cmd_en        ( p4_cmd_en_i        ),\n        .mcb_cmd_instr     ( p4_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p4_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p4_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p4_cmd_empty_i     ),\n        .mcb_cmd_full      ( p4_cmd_full_i      ),\n        .mcb_wr_clk        ( p4_wr_clk_i        ),\n        .mcb_wr_en         ( p4_wr_en_i         ),\n        .mcb_wr_mask       ( p4_wr_mask_i       ),\n        .mcb_wr_data       ( p4_wr_data_i       ),\n        .mcb_wr_full       ( p4_wr_full_i       ),\n        .mcb_wr_empty      ( p4_wr_empty_i      ),\n        .mcb_wr_count      ( p4_wr_count_i      ),\n        .mcb_wr_underrun   ( p4_wr_underrun_i   ),\n        .mcb_wr_error      ( p4_wr_error_i      ),\n        .mcb_rd_clk        ( p4_rd_clk_i        ),\n        .mcb_rd_en         ( p4_rd_en_i         ),\n        .mcb_rd_data       ( p4_rd_data_i       ),\n        .mcb_rd_full       ( p4_rd_full_i       ),\n        .mcb_rd_empty      ( p4_rd_empty_i      ),\n        .mcb_rd_count      ( p4_rd_count_i      ),\n        .mcb_rd_overflow   ( p4_rd_overflow_i   ),\n        .mcb_rd_error      ( p4_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end",
        "  generate\n    if (C_S4_AXI_ENABLE == 0) begin : P4_UI_MCB\n      assign  p4_arb_en_i        =  p4_arb_en        ; \n      assign  p4_cmd_clk_i       =  p4_cmd_clk       ; \n      assign  p4_cmd_en_i        =  p4_cmd_en        ; \n      assign  p4_cmd_instr_i     =  p4_cmd_instr     ; \n      assign  p4_cmd_bl_i        =  p4_cmd_bl        ; \n      assign  p4_cmd_byte_addr_i =  p4_cmd_byte_addr ; \n      assign  p4_cmd_empty       =  p4_cmd_empty_i   ; \n      assign  p4_cmd_full        =  p4_cmd_full_i    ; \n      assign  p4_wr_clk_i        =  p4_wr_clk        ; \n      assign  p4_wr_en_i         =  p4_wr_en         ; \n      assign  p4_wr_mask_i       =  p4_wr_mask       ; \n      assign  p4_wr_data_i       =  p4_wr_data       ; \n      assign  p4_wr_full         =  p4_wr_full_i     ; \n      assign  p4_wr_empty        =  p4_wr_empty_i    ; \n      assign  p4_wr_count        =  p4_wr_count_i    ; \n      assign  p4_wr_underrun     =  p4_wr_underrun_i ; \n      assign  p4_wr_error        =  p4_wr_error_i    ; \n      assign  p4_rd_clk_i        =  p4_rd_clk        ; \n      assign  p4_rd_en_i         =  p4_rd_en         ; \n      assign  p4_rd_data         =  p4_rd_data_i     ; \n      assign  p4_rd_full         =  p4_rd_full_i     ; \n      assign  p4_rd_empty        =  p4_rd_empty_i    ; \n      assign  p4_rd_count        =  p4_rd_count_i    ; \n      assign  p4_rd_overflow     =  p4_rd_overflow_i ; \n      assign  p4_rd_error        =  p4_rd_error_i    ; \n    end",
        "      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S3_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S3_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S3_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S3_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S3_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S3_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S3_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S3_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S3_AXI_ENABLE_AP           )\n        )\n        p3_axi_mcb\n        (\n        .aclk              ( s3_axi_aclk        ),\n        .aresetn           ( s3_axi_aresetn     ),\n        .s_axi_awid        ( s3_axi_awid        ),\n        .s_axi_awaddr      ( s3_axi_awaddr_i    ),\n        .s_axi_awlen       ( s3_axi_awlen       ),\n        .s_axi_awsize      ( s3_axi_awsize      ),\n        .s_axi_awburst     ( s3_axi_awburst     ),\n        .s_axi_awlock      ( s3_axi_awlock      ),\n        .s_axi_awcache     ( s3_axi_awcache     ),\n        .s_axi_awprot      ( s3_axi_awprot      ),\n        .s_axi_awqos       ( s3_axi_awqos       ),\n        .s_axi_awvalid     ( s3_axi_awvalid     ),\n        .s_axi_awready     ( s3_axi_awready     ),\n        .s_axi_wdata       ( s3_axi_wdata       ),\n        .s_axi_wstrb       ( s3_axi_wstrb       ),\n        .s_axi_wlast       ( s3_axi_wlast       ),\n        .s_axi_wvalid      ( s3_axi_wvalid      ),\n        .s_axi_wready      ( s3_axi_wready      ),\n        .s_axi_bid         ( s3_axi_bid         ),\n        .s_axi_bresp       ( s3_axi_bresp       ),\n        .s_axi_bvalid      ( s3_axi_bvalid      ),\n        .s_axi_bready      ( s3_axi_bready      ),\n        .s_axi_arid        ( s3_axi_arid        ),\n        .s_axi_araddr      ( s3_axi_araddr_i    ),\n        .s_axi_arlen       ( s3_axi_arlen       ),\n        .s_axi_arsize      ( s3_axi_arsize      ),\n        .s_axi_arburst     ( s3_axi_arburst     ),\n        .s_axi_arlock      ( s3_axi_arlock      ),\n        .s_axi_arcache     ( s3_axi_arcache     ),\n        .s_axi_arprot      ( s3_axi_arprot      ),\n        .s_axi_arqos       ( s3_axi_arqos       ),\n        .s_axi_arvalid     ( s3_axi_arvalid     ),\n        .s_axi_arready     ( s3_axi_arready     ),\n        .s_axi_rid         ( s3_axi_rid         ),\n        .s_axi_rdata       ( s3_axi_rdata       ),\n        .s_axi_rresp       ( s3_axi_rresp       ),\n        .s_axi_rlast       ( s3_axi_rlast       ),\n        .s_axi_rvalid      ( s3_axi_rvalid      ),\n        .s_axi_rready      ( s3_axi_rready      ),\n        .mcb_cmd_clk       ( p3_cmd_clk_i       ),\n        .mcb_cmd_en        ( p3_cmd_en_i        ),\n        .mcb_cmd_instr     ( p3_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p3_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p3_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p3_cmd_empty_i     ),\n        .mcb_cmd_full      ( p3_cmd_full_i      ),\n        .mcb_wr_clk        ( p3_wr_clk_i        ),\n        .mcb_wr_en         ( p3_wr_en_i         ),\n        .mcb_wr_mask       ( p3_wr_mask_i       ),\n        .mcb_wr_data       ( p3_wr_data_i       ),\n        .mcb_wr_full       ( p3_wr_full_i       ),\n        .mcb_wr_empty      ( p3_wr_empty_i      ),\n        .mcb_wr_count      ( p3_wr_count_i      ),\n        .mcb_wr_underrun   ( p3_wr_underrun_i   ),\n        .mcb_wr_error      ( p3_wr_error_i      ),\n        .mcb_rd_clk        ( p3_rd_clk_i        ),\n        .mcb_rd_en         ( p3_rd_en_i         ),\n        .mcb_rd_data       ( p3_rd_data_i       ),\n        .mcb_rd_full       ( p3_rd_full_i       ),\n        .mcb_rd_empty      ( p3_rd_empty_i      ),\n        .mcb_rd_count      ( p3_rd_count_i      ),\n        .mcb_rd_overflow   ( p3_rd_overflow_i   ),\n        .mcb_rd_error      ( p3_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );",
        "      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s3_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );",
        "    else begin : P3_UI_AXI\n      assign  p3_arb_en_i        =  p3_arb_en;\n      assign  s3_axi_araddr_i    = s3_axi_araddr & P_S3_AXI_ADDRMASK;\n      assign  s3_axi_awaddr_i    = s3_axi_awaddr & P_S3_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s3_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S3_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S3_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S3_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S3_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S3_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S3_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S3_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S3_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S3_AXI_ENABLE_AP           )\n        )\n        p3_axi_mcb\n        (\n        .aclk              ( s3_axi_aclk        ),\n        .aresetn           ( s3_axi_aresetn     ),\n        .s_axi_awid        ( s3_axi_awid        ),\n        .s_axi_awaddr      ( s3_axi_awaddr_i    ),\n        .s_axi_awlen       ( s3_axi_awlen       ),\n        .s_axi_awsize      ( s3_axi_awsize      ),\n        .s_axi_awburst     ( s3_axi_awburst     ),\n        .s_axi_awlock      ( s3_axi_awlock      ),\n        .s_axi_awcache     ( s3_axi_awcache     ),\n        .s_axi_awprot      ( s3_axi_awprot      ),\n        .s_axi_awqos       ( s3_axi_awqos       ),\n        .s_axi_awvalid     ( s3_axi_awvalid     ),\n        .s_axi_awready     ( s3_axi_awready     ),\n        .s_axi_wdata       ( s3_axi_wdata       ),\n        .s_axi_wstrb       ( s3_axi_wstrb       ),\n        .s_axi_wlast       ( s3_axi_wlast       ),\n        .s_axi_wvalid      ( s3_axi_wvalid      ),\n        .s_axi_wready      ( s3_axi_wready      ),\n        .s_axi_bid         ( s3_axi_bid         ),\n        .s_axi_bresp       ( s3_axi_bresp       ),\n        .s_axi_bvalid      ( s3_axi_bvalid      ),\n        .s_axi_bready      ( s3_axi_bready      ),\n        .s_axi_arid        ( s3_axi_arid        ),\n        .s_axi_araddr      ( s3_axi_araddr_i    ),\n        .s_axi_arlen       ( s3_axi_arlen       ),\n        .s_axi_arsize      ( s3_axi_arsize      ),\n        .s_axi_arburst     ( s3_axi_arburst     ),\n        .s_axi_arlock      ( s3_axi_arlock      ),\n        .s_axi_arcache     ( s3_axi_arcache     ),\n        .s_axi_arprot      ( s3_axi_arprot      ),\n        .s_axi_arqos       ( s3_axi_arqos       ),\n        .s_axi_arvalid     ( s3_axi_arvalid     ),\n        .s_axi_arready     ( s3_axi_arready     ),\n        .s_axi_rid         ( s3_axi_rid         ),\n        .s_axi_rdata       ( s3_axi_rdata       ),\n        .s_axi_rresp       ( s3_axi_rresp       ),\n        .s_axi_rlast       ( s3_axi_rlast       ),\n        .s_axi_rvalid      ( s3_axi_rvalid      ),\n        .s_axi_rready      ( s3_axi_rready      ),\n        .mcb_cmd_clk       ( p3_cmd_clk_i       ),\n        .mcb_cmd_en        ( p3_cmd_en_i        ),\n        .mcb_cmd_instr     ( p3_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p3_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p3_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p3_cmd_empty_i     ),\n        .mcb_cmd_full      ( p3_cmd_full_i      ),\n        .mcb_wr_clk        ( p3_wr_clk_i        ),\n        .mcb_wr_en         ( p3_wr_en_i         ),\n        .mcb_wr_mask       ( p3_wr_mask_i       ),\n        .mcb_wr_data       ( p3_wr_data_i       ),\n        .mcb_wr_full       ( p3_wr_full_i       ),\n        .mcb_wr_empty      ( p3_wr_empty_i      ),\n        .mcb_wr_count      ( p3_wr_count_i      ),\n        .mcb_wr_underrun   ( p3_wr_underrun_i   ),\n        .mcb_wr_error      ( p3_wr_error_i      ),\n        .mcb_rd_clk        ( p3_rd_clk_i        ),\n        .mcb_rd_en         ( p3_rd_en_i         ),\n        .mcb_rd_data       ( p3_rd_data_i       ),\n        .mcb_rd_full       ( p3_rd_full_i       ),\n        .mcb_rd_empty      ( p3_rd_empty_i      ),\n        .mcb_rd_count      ( p3_rd_count_i      ),\n        .mcb_rd_overflow   ( p3_rd_overflow_i   ),\n        .mcb_rd_error      ( p3_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end",
        "      assign  p3_arb_en_i        =  p3_arb_en        ; \n      assign  p3_cmd_clk_i       =  p3_cmd_clk       ; \n      assign  p3_cmd_en_i        =  p3_cmd_en        ; \n      assign  p3_cmd_instr_i     =  p3_cmd_instr     ; \n      assign  p3_cmd_bl_i        =  p3_cmd_bl        ; \n      assign  p3_cmd_byte_addr_i =  p3_cmd_byte_addr ; \n      assign  p3_cmd_empty       =  p3_cmd_empty_i   ; \n      assign  p3_cmd_full        =  p3_cmd_full_i    ; \n      assign  p3_wr_clk_i        =  p3_wr_clk        ; \n      assign  p3_wr_en_i         =  p3_wr_en         ; \n      assign  p3_wr_mask_i       =  p3_wr_mask       ; \n      assign  p3_wr_data_i       =  p3_wr_data       ; \n      assign  p3_wr_full         =  p3_wr_full_i     ; \n      assign  p3_wr_empty        =  p3_wr_empty_i    ; \n      assign  p3_wr_count        =  p3_wr_count_i    ; \n      assign  p3_wr_underrun     =  p3_wr_underrun_i ; \n      assign  p3_wr_error        =  p3_wr_error_i    ; \n      assign  p3_rd_clk_i        =  p3_rd_clk        ; \n      assign  p3_rd_en_i         =  p3_rd_en         ; \n      assign  p3_rd_data         =  p3_rd_data_i     ; \n      assign  p3_rd_full         =  p3_rd_full_i     ; \n      assign  p3_rd_empty        =  p3_rd_empty_i    ; \n      assign  p3_rd_count        =  p3_rd_count_i    ; ",
        "    if (C_S3_AXI_ENABLE == 0) begin : P3_UI_MCB\n      assign  p3_arb_en_i        =  p3_arb_en        ; \n      assign  p3_cmd_clk_i       =  p3_cmd_clk       ; \n      assign  p3_cmd_en_i        =  p3_cmd_en        ; \n      assign  p3_cmd_instr_i     =  p3_cmd_instr     ; \n      assign  p3_cmd_bl_i        =  p3_cmd_bl        ; \n      assign  p3_cmd_byte_addr_i =  p3_cmd_byte_addr ; \n      assign  p3_cmd_empty       =  p3_cmd_empty_i   ; \n      assign  p3_cmd_full        =  p3_cmd_full_i    ; \n      assign  p3_wr_clk_i        =  p3_wr_clk        ; \n      assign  p3_wr_en_i         =  p3_wr_en         ; \n      assign  p3_wr_mask_i       =  p3_wr_mask       ; \n      assign  p3_wr_data_i       =  p3_wr_data       ; \n      assign  p3_wr_full         =  p3_wr_full_i     ; \n      assign  p3_wr_empty        =  p3_wr_empty_i    ; \n      assign  p3_wr_count        =  p3_wr_count_i    ; \n      assign  p3_wr_underrun     =  p3_wr_underrun_i ; \n      assign  p3_wr_error        =  p3_wr_error_i    ; \n      assign  p3_rd_clk_i        =  p3_rd_clk        ; \n      assign  p3_rd_en_i         =  p3_rd_en         ; \n      assign  p3_rd_data         =  p3_rd_data_i     ; \n      assign  p3_rd_full         =  p3_rd_full_i     ; \n      assign  p3_rd_empty        =  p3_rd_empty_i    ; \n      assign  p3_rd_count        =  p3_rd_count_i    ; \n      assign  p3_rd_overflow     =  p3_rd_overflow_i ; \n      assign  p3_rd_error        =  p3_rd_error_i    ; \n    end",
        "  generate\n    if (C_S3_AXI_ENABLE == 0) begin : P3_UI_MCB\n      assign  p3_arb_en_i        =  p3_arb_en        ; \n      assign  p3_cmd_clk_i       =  p3_cmd_clk       ; \n      assign  p3_cmd_en_i        =  p3_cmd_en        ; \n      assign  p3_cmd_instr_i     =  p3_cmd_instr     ; \n      assign  p3_cmd_bl_i        =  p3_cmd_bl        ; \n      assign  p3_cmd_byte_addr_i =  p3_cmd_byte_addr ; \n      assign  p3_cmd_empty       =  p3_cmd_empty_i   ; \n      assign  p3_cmd_full        =  p3_cmd_full_i    ; \n      assign  p3_wr_clk_i        =  p3_wr_clk        ; \n      assign  p3_wr_en_i         =  p3_wr_en         ; \n      assign  p3_wr_mask_i       =  p3_wr_mask       ; \n      assign  p3_wr_data_i       =  p3_wr_data       ; \n      assign  p3_wr_full         =  p3_wr_full_i     ; \n      assign  p3_wr_empty        =  p3_wr_empty_i    ; \n      assign  p3_wr_count        =  p3_wr_count_i    ; \n      assign  p3_wr_underrun     =  p3_wr_underrun_i ; \n      assign  p3_wr_error        =  p3_wr_error_i    ; \n      assign  p3_rd_clk_i        =  p3_rd_clk        ; \n      assign  p3_rd_en_i         =  p3_rd_en         ; \n      assign  p3_rd_data         =  p3_rd_data_i     ; \n      assign  p3_rd_full         =  p3_rd_full_i     ; \n      assign  p3_rd_empty        =  p3_rd_empty_i    ; \n      assign  p3_rd_count        =  p3_rd_count_i    ; \n      assign  p3_rd_overflow     =  p3_rd_overflow_i ; \n      assign  p3_rd_error        =  p3_rd_error_i    ; \n    end\n    else begin : P3_UI_AXI\n      assign  p3_arb_en_i        =  p3_arb_en;\n      assign  s3_axi_araddr_i    = s3_axi_araddr & P_S3_AXI_ADDRMASK;\n      assign  s3_axi_awaddr_i    = s3_axi_awaddr & P_S3_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s3_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S3_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S3_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S3_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S3_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S3_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S3_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S3_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S3_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S3_AXI_ENABLE_AP           )\n        )\n        p3_axi_mcb\n        (\n        .aclk              ( s3_axi_aclk        ),\n        .aresetn           ( s3_axi_aresetn     ),\n        .s_axi_awid        ( s3_axi_awid        ),\n        .s_axi_awaddr      ( s3_axi_awaddr_i    ),\n        .s_axi_awlen       ( s3_axi_awlen       ),\n        .s_axi_awsize      ( s3_axi_awsize      ),\n        .s_axi_awburst     ( s3_axi_awburst     ),\n        .s_axi_awlock      ( s3_axi_awlock      ),\n        .s_axi_awcache     ( s3_axi_awcache     ),\n        .s_axi_awprot      ( s3_axi_awprot      ),\n        .s_axi_awqos       ( s3_axi_awqos       ),\n        .s_axi_awvalid     ( s3_axi_awvalid     ),\n        .s_axi_awready     ( s3_axi_awready     ),\n        .s_axi_wdata       ( s3_axi_wdata       ),\n        .s_axi_wstrb       ( s3_axi_wstrb       ),\n        .s_axi_wlast       ( s3_axi_wlast       ),\n        .s_axi_wvalid      ( s3_axi_wvalid      ),\n        .s_axi_wready      ( s3_axi_wready      ),\n        .s_axi_bid         ( s3_axi_bid         ),\n        .s_axi_bresp       ( s3_axi_bresp       ),\n        .s_axi_bvalid      ( s3_axi_bvalid      ),\n        .s_axi_bready      ( s3_axi_bready      ),\n        .s_axi_arid        ( s3_axi_arid        ),\n        .s_axi_araddr      ( s3_axi_araddr_i    ),\n        .s_axi_arlen       ( s3_axi_arlen       ),\n        .s_axi_arsize      ( s3_axi_arsize      ),\n        .s_axi_arburst     ( s3_axi_arburst     ),\n        .s_axi_arlock      ( s3_axi_arlock      ),\n        .s_axi_arcache     ( s3_axi_arcache     ),\n        .s_axi_arprot      ( s3_axi_arprot      ),\n        .s_axi_arqos       ( s3_axi_arqos       ),\n        .s_axi_arvalid     ( s3_axi_arvalid     ),\n        .s_axi_arready     ( s3_axi_arready     ),\n        .s_axi_rid         ( s3_axi_rid         ),\n        .s_axi_rdata       ( s3_axi_rdata       ),\n        .s_axi_rresp       ( s3_axi_rresp       ),\n        .s_axi_rlast       ( s3_axi_rlast       ),\n        .s_axi_rvalid      ( s3_axi_rvalid      ),\n        .s_axi_rready      ( s3_axi_rready      ),\n        .mcb_cmd_clk       ( p3_cmd_clk_i       ),\n        .mcb_cmd_en        ( p3_cmd_en_i        ),\n        .mcb_cmd_instr     ( p3_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p3_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p3_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p3_cmd_empty_i     ),\n        .mcb_cmd_full      ( p3_cmd_full_i      ),\n        .mcb_wr_clk        ( p3_wr_clk_i        ),\n        .mcb_wr_en         ( p3_wr_en_i         ),\n        .mcb_wr_mask       ( p3_wr_mask_i       ),\n        .mcb_wr_data       ( p3_wr_data_i       ),\n        .mcb_wr_full       ( p3_wr_full_i       ),\n        .mcb_wr_empty      ( p3_wr_empty_i      ),\n        .mcb_wr_count      ( p3_wr_count_i      ),\n        .mcb_wr_underrun   ( p3_wr_underrun_i   ),\n        .mcb_wr_error      ( p3_wr_error_i      ),\n        .mcb_rd_clk        ( p3_rd_clk_i        ),\n        .mcb_rd_en         ( p3_rd_en_i         ),\n        .mcb_rd_data       ( p3_rd_data_i       ),\n        .mcb_rd_full       ( p3_rd_full_i       ),\n        .mcb_rd_empty      ( p3_rd_empty_i      ),\n        .mcb_rd_count      ( p3_rd_count_i      ),\n        .mcb_rd_overflow   ( p3_rd_overflow_i   ),\n        .mcb_rd_error      ( p3_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate",
        "      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s2_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S2_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S2_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S2_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S2_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S2_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S2_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S2_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S2_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S2_AXI_ENABLE_AP           )\n        )\n        p2_axi_mcb\n        (\n        .aclk              ( s2_axi_aclk        ),\n        .aresetn           ( s2_axi_aresetn     ),\n        .s_axi_awid        ( s2_axi_awid        ),\n        .s_axi_awaddr      ( s2_axi_awaddr_i    ),\n        .s_axi_awlen       ( s2_axi_awlen       ),\n        .s_axi_awsize      ( s2_axi_awsize      ),\n        .s_axi_awburst     ( s2_axi_awburst     ),\n        .s_axi_awlock      ( s2_axi_awlock      ),\n        .s_axi_awcache     ( s2_axi_awcache     ),\n        .s_axi_awprot      ( s2_axi_awprot      ),\n        .s_axi_awqos       ( s2_axi_awqos       ),\n        .s_axi_awvalid     ( s2_axi_awvalid     ),\n        .s_axi_awready     ( s2_axi_awready     ),\n        .s_axi_wdata       ( s2_axi_wdata       ),\n        .s_axi_wstrb       ( s2_axi_wstrb       ),\n        .s_axi_wlast       ( s2_axi_wlast       ),\n        .s_axi_wvalid      ( s2_axi_wvalid      ),\n        .s_axi_wready      ( s2_axi_wready      ),\n        .s_axi_bid         ( s2_axi_bid         ),\n        .s_axi_bresp       ( s2_axi_bresp       ),\n        .s_axi_bvalid      ( s2_axi_bvalid      ),\n        .s_axi_bready      ( s2_axi_bready      ),\n        .s_axi_arid        ( s2_axi_arid        ),\n        .s_axi_araddr      ( s2_axi_araddr_i    ),\n        .s_axi_arlen       ( s2_axi_arlen       ),\n        .s_axi_arsize      ( s2_axi_arsize      ),\n        .s_axi_arburst     ( s2_axi_arburst     ),\n        .s_axi_arlock      ( s2_axi_arlock      ),\n        .s_axi_arcache     ( s2_axi_arcache     ),\n        .s_axi_arprot      ( s2_axi_arprot      ),\n        .s_axi_arqos       ( s2_axi_arqos       ),\n        .s_axi_arvalid     ( s2_axi_arvalid     ),\n        .s_axi_arready     ( s2_axi_arready     ),\n        .s_axi_rid         ( s2_axi_rid         ),\n        .s_axi_rdata       ( s2_axi_rdata       ),\n        .s_axi_rresp       ( s2_axi_rresp       ),\n        .s_axi_rlast       ( s2_axi_rlast       ),\n        .s_axi_rvalid      ( s2_axi_rvalid      ),\n        .s_axi_rready      ( s2_axi_rready      ),\n        .mcb_cmd_clk       ( p2_cmd_clk_i       ),\n        .mcb_cmd_en        ( p2_cmd_en_i        ),\n        .mcb_cmd_instr     ( p2_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p2_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p2_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p2_cmd_empty_i     ),\n        .mcb_cmd_full      ( p2_cmd_full_i      ),\n        .mcb_wr_clk        ( p2_wr_clk_i        ),\n        .mcb_wr_en         ( p2_wr_en_i         ),\n        .mcb_wr_mask       ( p2_wr_mask_i       ),\n        .mcb_wr_data       ( p2_wr_data_i       ),\n        .mcb_wr_full       ( p2_wr_full_i       ),\n        .mcb_wr_empty      ( p2_wr_empty_i      ),\n        .mcb_wr_count      ( p2_wr_count_i      ),\n        .mcb_wr_underrun   ( p2_wr_underrun_i   ),\n        .mcb_wr_error      ( p2_wr_error_i      ),\n        .mcb_rd_clk        ( p2_rd_clk_i        ),\n        .mcb_rd_en         ( p2_rd_en_i         ),\n        .mcb_rd_data       ( p2_rd_data_i       ),\n        .mcb_rd_full       ( p2_rd_full_i       ),\n        .mcb_rd_empty      ( p2_rd_empty_i      ),\n        .mcb_rd_count      ( p2_rd_count_i      ),\n        .mcb_rd_overflow   ( p2_rd_overflow_i   ),\n        .mcb_rd_error      ( p2_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );",
        "    else begin : P2_UI_AXI\n      assign  p2_arb_en_i        =  p2_arb_en;\n      assign  s2_axi_araddr_i    = s2_axi_araddr & P_S2_AXI_ADDRMASK;\n      assign  s2_axi_awaddr_i    = s2_axi_awaddr & P_S2_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s2_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S2_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S2_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S2_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S2_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S2_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S2_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S2_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S2_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S2_AXI_ENABLE_AP           )\n        )\n        p2_axi_mcb\n        (\n        .aclk              ( s2_axi_aclk        ),\n        .aresetn           ( s2_axi_aresetn     ),\n        .s_axi_awid        ( s2_axi_awid        ),\n        .s_axi_awaddr      ( s2_axi_awaddr_i    ),\n        .s_axi_awlen       ( s2_axi_awlen       ),\n        .s_axi_awsize      ( s2_axi_awsize      ),\n        .s_axi_awburst     ( s2_axi_awburst     ),\n        .s_axi_awlock      ( s2_axi_awlock      ),\n        .s_axi_awcache     ( s2_axi_awcache     ),\n        .s_axi_awprot      ( s2_axi_awprot      ),\n        .s_axi_awqos       ( s2_axi_awqos       ),\n        .s_axi_awvalid     ( s2_axi_awvalid     ),\n        .s_axi_awready     ( s2_axi_awready     ),\n        .s_axi_wdata       ( s2_axi_wdata       ),\n        .s_axi_wstrb       ( s2_axi_wstrb       ),\n        .s_axi_wlast       ( s2_axi_wlast       ),\n        .s_axi_wvalid      ( s2_axi_wvalid      ),\n        .s_axi_wready      ( s2_axi_wready      ),\n        .s_axi_bid         ( s2_axi_bid         ),\n        .s_axi_bresp       ( s2_axi_bresp       ),\n        .s_axi_bvalid      ( s2_axi_bvalid      ),\n        .s_axi_bready      ( s2_axi_bready      ),\n        .s_axi_arid        ( s2_axi_arid        ),\n        .s_axi_araddr      ( s2_axi_araddr_i    ),\n        .s_axi_arlen       ( s2_axi_arlen       ),\n        .s_axi_arsize      ( s2_axi_arsize      ),\n        .s_axi_arburst     ( s2_axi_arburst     ),\n        .s_axi_arlock      ( s2_axi_arlock      ),\n        .s_axi_arcache     ( s2_axi_arcache     ),\n        .s_axi_arprot      ( s2_axi_arprot      ),\n        .s_axi_arqos       ( s2_axi_arqos       ),\n        .s_axi_arvalid     ( s2_axi_arvalid     ),\n        .s_axi_arready     ( s2_axi_arready     ),\n        .s_axi_rid         ( s2_axi_rid         ),\n        .s_axi_rdata       ( s2_axi_rdata       ),\n        .s_axi_rresp       ( s2_axi_rresp       ),\n        .s_axi_rlast       ( s2_axi_rlast       ),\n        .s_axi_rvalid      ( s2_axi_rvalid      ),\n        .s_axi_rready      ( s2_axi_rready      ),\n        .mcb_cmd_clk       ( p2_cmd_clk_i       ),\n        .mcb_cmd_en        ( p2_cmd_en_i        ),\n        .mcb_cmd_instr     ( p2_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p2_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p2_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p2_cmd_empty_i     ),\n        .mcb_cmd_full      ( p2_cmd_full_i      ),\n        .mcb_wr_clk        ( p2_wr_clk_i        ),\n        .mcb_wr_en         ( p2_wr_en_i         ),\n        .mcb_wr_mask       ( p2_wr_mask_i       ),\n        .mcb_wr_data       ( p2_wr_data_i       ),\n        .mcb_wr_full       ( p2_wr_full_i       ),\n        .mcb_wr_empty      ( p2_wr_empty_i      ),\n        .mcb_wr_count      ( p2_wr_count_i      ),\n        .mcb_wr_underrun   ( p2_wr_underrun_i   ),\n        .mcb_wr_error      ( p2_wr_error_i      ),\n        .mcb_rd_clk        ( p2_rd_clk_i        ),\n        .mcb_rd_en         ( p2_rd_en_i         ),\n        .mcb_rd_data       ( p2_rd_data_i       ),\n        .mcb_rd_full       ( p2_rd_full_i       ),\n        .mcb_rd_empty      ( p2_rd_empty_i      ),\n        .mcb_rd_count      ( p2_rd_count_i      ),\n        .mcb_rd_overflow   ( p2_rd_overflow_i   ),\n        .mcb_rd_error      ( p2_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end",
        "    if (C_S2_AXI_ENABLE == 0) begin : P2_UI_MCB\n      assign  p2_arb_en_i        =  p2_arb_en        ; \n      assign  p2_cmd_clk_i       =  p2_cmd_clk       ; \n      assign  p2_cmd_en_i        =  p2_cmd_en        ; \n      assign  p2_cmd_instr_i     =  p2_cmd_instr     ; \n      assign  p2_cmd_bl_i        =  p2_cmd_bl        ; \n      assign  p2_cmd_byte_addr_i =  p2_cmd_byte_addr ; \n      assign  p2_cmd_empty       =  p2_cmd_empty_i   ; \n      assign  p2_cmd_full        =  p2_cmd_full_i    ; \n      assign  p2_wr_clk_i        =  p2_wr_clk        ; \n      assign  p2_wr_en_i         =  p2_wr_en         ; \n      assign  p2_wr_mask_i       =  p2_wr_mask       ; \n      assign  p2_wr_data_i       =  p2_wr_data       ; \n      assign  p2_wr_full         =  p2_wr_full_i     ; \n      assign  p2_wr_empty        =  p2_wr_empty_i    ; \n      assign  p2_wr_count        =  p2_wr_count_i    ; \n      assign  p2_wr_underrun     =  p2_wr_underrun_i ; \n      assign  p2_wr_error        =  p2_wr_error_i    ; \n      assign  p2_rd_clk_i        =  p2_rd_clk        ; \n      assign  p2_rd_en_i         =  p2_rd_en         ; \n      assign  p2_rd_data         =  p2_rd_data_i     ; \n      assign  p2_rd_full         =  p2_rd_full_i     ; \n      assign  p2_rd_empty        =  p2_rd_empty_i    ; \n      assign  p2_rd_count        =  p2_rd_count_i    ; \n      assign  p2_rd_overflow     =  p2_rd_overflow_i ; \n      assign  p2_rd_error        =  p2_rd_error_i    ; \n    end",
        "  generate\n    if (C_S2_AXI_ENABLE == 0) begin : P2_UI_MCB\n      assign  p2_arb_en_i        =  p2_arb_en        ; \n      assign  p2_cmd_clk_i       =  p2_cmd_clk       ; \n      assign  p2_cmd_en_i        =  p2_cmd_en        ; \n      assign  p2_cmd_instr_i     =  p2_cmd_instr     ; \n      assign  p2_cmd_bl_i        =  p2_cmd_bl        ; \n      assign  p2_cmd_byte_addr_i =  p2_cmd_byte_addr ; \n      assign  p2_cmd_empty       =  p2_cmd_empty_i   ; \n      assign  p2_cmd_full        =  p2_cmd_full_i    ; \n      assign  p2_wr_clk_i        =  p2_wr_clk        ; \n      assign  p2_wr_en_i         =  p2_wr_en         ; \n      assign  p2_wr_mask_i       =  p2_wr_mask       ; \n      assign  p2_wr_data_i       =  p2_wr_data       ; \n      assign  p2_wr_full         =  p2_wr_full_i     ; \n      assign  p2_wr_empty        =  p2_wr_empty_i    ; \n      assign  p2_wr_count        =  p2_wr_count_i    ; \n      assign  p2_wr_underrun     =  p2_wr_underrun_i ; \n      assign  p2_wr_error        =  p2_wr_error_i    ; \n      assign  p2_rd_clk_i        =  p2_rd_clk        ; \n      assign  p2_rd_en_i         =  p2_rd_en         ; \n      assign  p2_rd_data         =  p2_rd_data_i     ; \n      assign  p2_rd_full         =  p2_rd_full_i     ; \n      assign  p2_rd_empty        =  p2_rd_empty_i    ; \n      assign  p2_rd_count        =  p2_rd_count_i    ; \n      assign  p2_rd_overflow     =  p2_rd_overflow_i ; \n      assign  p2_rd_error        =  p2_rd_error_i    ; \n    end\n    else begin : P2_UI_AXI\n      assign  p2_arb_en_i        =  p2_arb_en;\n      assign  s2_axi_araddr_i    = s2_axi_araddr & P_S2_AXI_ADDRMASK;\n      assign  s2_axi_awaddr_i    = s2_axi_awaddr & P_S2_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s2_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S2_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S2_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( 32                       ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S2_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S2_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S2_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S2_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S2_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( 32                       ) ,\n        .C_STRICT_COHERENCY      ( C_S2_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S2_AXI_ENABLE_AP           )\n        )\n        p2_axi_mcb\n        (\n        .aclk              ( s2_axi_aclk        ),\n        .aresetn           ( s2_axi_aresetn     ),\n        .s_axi_awid        ( s2_axi_awid        ),\n        .s_axi_awaddr      ( s2_axi_awaddr_i    ),\n        .s_axi_awlen       ( s2_axi_awlen       ),\n        .s_axi_awsize      ( s2_axi_awsize      ),\n        .s_axi_awburst     ( s2_axi_awburst     ),\n        .s_axi_awlock      ( s2_axi_awlock      ),\n        .s_axi_awcache     ( s2_axi_awcache     ),\n        .s_axi_awprot      ( s2_axi_awprot      ),\n        .s_axi_awqos       ( s2_axi_awqos       ),\n        .s_axi_awvalid     ( s2_axi_awvalid     ),\n        .s_axi_awready     ( s2_axi_awready     ),\n        .s_axi_wdata       ( s2_axi_wdata       ),\n        .s_axi_wstrb       ( s2_axi_wstrb       ),\n        .s_axi_wlast       ( s2_axi_wlast       ),\n        .s_axi_wvalid      ( s2_axi_wvalid      ),\n        .s_axi_wready      ( s2_axi_wready      ),\n        .s_axi_bid         ( s2_axi_bid         ),\n        .s_axi_bresp       ( s2_axi_bresp       ),\n        .s_axi_bvalid      ( s2_axi_bvalid      ),\n        .s_axi_bready      ( s2_axi_bready      ),\n        .s_axi_arid        ( s2_axi_arid        ),\n        .s_axi_araddr      ( s2_axi_araddr_i    ),\n        .s_axi_arlen       ( s2_axi_arlen       ),\n        .s_axi_arsize      ( s2_axi_arsize      ),\n        .s_axi_arburst     ( s2_axi_arburst     ),\n        .s_axi_arlock      ( s2_axi_arlock      ),\n        .s_axi_arcache     ( s2_axi_arcache     ),\n        .s_axi_arprot      ( s2_axi_arprot      ),\n        .s_axi_arqos       ( s2_axi_arqos       ),\n        .s_axi_arvalid     ( s2_axi_arvalid     ),\n        .s_axi_arready     ( s2_axi_arready     ),\n        .s_axi_rid         ( s2_axi_rid         ),\n        .s_axi_rdata       ( s2_axi_rdata       ),\n        .s_axi_rresp       ( s2_axi_rresp       ),\n        .s_axi_rlast       ( s2_axi_rlast       ),\n        .s_axi_rvalid      ( s2_axi_rvalid      ),\n        .s_axi_rready      ( s2_axi_rready      ),\n        .mcb_cmd_clk       ( p2_cmd_clk_i       ),\n        .mcb_cmd_en        ( p2_cmd_en_i        ),\n        .mcb_cmd_instr     ( p2_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p2_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p2_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p2_cmd_empty_i     ),\n        .mcb_cmd_full      ( p2_cmd_full_i      ),\n        .mcb_wr_clk        ( p2_wr_clk_i        ),\n        .mcb_wr_en         ( p2_wr_en_i         ),\n        .mcb_wr_mask       ( p2_wr_mask_i       ),\n        .mcb_wr_data       ( p2_wr_data_i       ),\n        .mcb_wr_full       ( p2_wr_full_i       ),\n        .mcb_wr_empty      ( p2_wr_empty_i      ),\n        .mcb_wr_count      ( p2_wr_count_i      ),\n        .mcb_wr_underrun   ( p2_wr_underrun_i   ),\n        .mcb_wr_error      ( p2_wr_error_i      ),\n        .mcb_rd_clk        ( p2_rd_clk_i        ),\n        .mcb_rd_en         ( p2_rd_en_i         ),\n        .mcb_rd_data       ( p2_rd_data_i       ),\n        .mcb_rd_full       ( p2_rd_full_i       ),\n        .mcb_rd_empty      ( p2_rd_empty_i      ),\n        .mcb_rd_count      ( p2_rd_count_i      ),\n        .mcb_rd_overflow   ( p2_rd_overflow_i   ),\n        .mcb_rd_error      ( p2_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate",
        "  generate\n    if (C_S1_AXI_ENABLE == 0) begin : P1_UI_MCB\n      assign  p1_arb_en_i        =  p1_arb_en        ; \n      assign  p1_cmd_clk_i       =  p1_cmd_clk       ; \n      assign  p1_cmd_en_i        =  p1_cmd_en        ; \n      assign  p1_cmd_instr_i     =  p1_cmd_instr     ; \n      assign  p1_cmd_bl_i        =  p1_cmd_bl        ; \n      assign  p1_cmd_byte_addr_i =  p1_cmd_byte_addr ; \n      assign  p1_cmd_empty       =  p1_cmd_empty_i   ; \n      assign  p1_cmd_full        =  p1_cmd_full_i    ; \n      assign  p1_wr_clk_i        =  p1_wr_clk        ; \n      assign  p1_wr_en_i         =  p1_wr_en         ; \n      assign  p1_wr_mask_i       =  p1_wr_mask       ; \n      assign  p1_wr_data_i       =  p1_wr_data       ; \n      assign  p1_wr_full         =  p1_wr_full_i     ; \n      assign  p1_wr_empty        =  p1_wr_empty_i    ; \n      assign  p1_wr_count        =  p1_wr_count_i    ; \n      assign  p1_wr_underrun     =  p1_wr_underrun_i ; \n      assign  p1_wr_error        =  p1_wr_error_i    ; \n      assign  p1_rd_clk_i        =  p1_rd_clk        ; \n      assign  p1_rd_en_i         =  p1_rd_en         ; \n      assign  p1_rd_data         =  p1_rd_data_i     ; \n      assign  p1_rd_full         =  p1_rd_full_i     ; \n      assign  p1_rd_empty        =  p1_rd_empty_i    ; \n      assign  p1_rd_count        =  p1_rd_count_i    ; \n      assign  p1_rd_overflow     =  p1_rd_overflow_i ; \n      assign  p1_rd_error        =  p1_rd_error_i    ; \n    end\n    else begin : P1_UI_AXI\n      assign  p1_arb_en_i        =  p1_arb_en;\n      assign  s1_axi_araddr_i    = s1_axi_araddr & P_S1_AXI_ADDRMASK;\n      assign  s1_axi_awaddr_i    = s1_axi_awaddr & P_S1_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk                    ( s1_axi_aclk      ),\n        .synch_in               ( uo_done_cal      ),\n        .synch_out              ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S1_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S1_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( C_S1_AXI_DATA_WIDTH      ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S1_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S1_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S1_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S1_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S1_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( C_P1_DATA_PORT_SIZE      ) ,\n        .C_STRICT_COHERENCY      ( C_S1_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S1_AXI_ENABLE_AP           )\n        )\n        p1_axi_mcb\n        (\n        .aclk              ( s1_axi_aclk        ),\n        .aresetn           ( s1_axi_aresetn     ),\n        .s_axi_awid        ( s1_axi_awid        ),\n        .s_axi_awaddr      ( s1_axi_awaddr_i    ),\n        .s_axi_awlen       ( s1_axi_awlen       ),\n        .s_axi_awsize      ( s1_axi_awsize      ),\n        .s_axi_awburst     ( s1_axi_awburst     ),\n        .s_axi_awlock      ( s1_axi_awlock      ),\n        .s_axi_awcache     ( s1_axi_awcache     ),\n        .s_axi_awprot      ( s1_axi_awprot      ),\n        .s_axi_awqos       ( s1_axi_awqos       ),\n        .s_axi_awvalid     ( s1_axi_awvalid     ),\n        .s_axi_awready     ( s1_axi_awready     ),\n        .s_axi_wdata       ( s1_axi_wdata       ),\n        .s_axi_wstrb       ( s1_axi_wstrb       ),\n        .s_axi_wlast       ( s1_axi_wlast       ),\n        .s_axi_wvalid      ( s1_axi_wvalid      ),\n        .s_axi_wready      ( s1_axi_wready      ),\n        .s_axi_bid         ( s1_axi_bid         ),\n        .s_axi_bresp       ( s1_axi_bresp       ),\n        .s_axi_bvalid      ( s1_axi_bvalid      ),\n        .s_axi_bready      ( s1_axi_bready      ),\n        .s_axi_arid        ( s1_axi_arid        ),\n        .s_axi_araddr      ( s1_axi_araddr_i    ),\n        .s_axi_arlen       ( s1_axi_arlen       ),\n        .s_axi_arsize      ( s1_axi_arsize      ),\n        .s_axi_arburst     ( s1_axi_arburst     ),\n        .s_axi_arlock      ( s1_axi_arlock      ),\n        .s_axi_arcache     ( s1_axi_arcache     ),\n        .s_axi_arprot      ( s1_axi_arprot      ),\n        .s_axi_arqos       ( s1_axi_arqos       ),\n        .s_axi_arvalid     ( s1_axi_arvalid     ),\n        .s_axi_arready     ( s1_axi_arready     ),\n        .s_axi_rid         ( s1_axi_rid         ),\n        .s_axi_rdata       ( s1_axi_rdata       ),\n        .s_axi_rresp       ( s1_axi_rresp       ),\n        .s_axi_rlast       ( s1_axi_rlast       ),\n        .s_axi_rvalid      ( s1_axi_rvalid      ),\n        .s_axi_rready      ( s1_axi_rready      ),\n        .mcb_cmd_clk       ( p1_cmd_clk_i       ),\n        .mcb_cmd_en        ( p1_cmd_en_i        ),\n        .mcb_cmd_instr     ( p1_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p1_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p1_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p1_cmd_empty_i     ),\n        .mcb_cmd_full      ( p1_cmd_full_i      ),\n        .mcb_wr_clk        ( p1_wr_clk_i        ),\n        .mcb_wr_en         ( p1_wr_en_i         ),\n        .mcb_wr_mask       ( p1_wr_mask_i       ),\n        .mcb_wr_data       ( p1_wr_data_i       ),\n        .mcb_wr_full       ( p1_wr_full_i       ),\n        .mcb_wr_empty      ( p1_wr_empty_i      ),\n        .mcb_wr_count      ( p1_wr_count_i      ),\n        .mcb_wr_underrun   ( p1_wr_underrun_i   ),\n        .mcb_wr_error      ( p1_wr_error_i      ),\n        .mcb_rd_clk        ( p1_rd_clk_i        ),\n        .mcb_rd_en         ( p1_rd_en_i         ),\n        .mcb_rd_data       ( p1_rd_data_i       ),\n        .mcb_rd_full       ( p1_rd_full_i       ),\n        .mcb_rd_empty      ( p1_rd_empty_i      ),\n        .mcb_rd_count      ( p1_rd_count_i      ),\n        .mcb_rd_overflow   ( p1_rd_overflow_i   ),\n        .mcb_rd_error      ( p1_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate",
        "        .synch_in  ( uo_done_cal      ) ,",
        "      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk       ( s0_axi_aclk      ) ,\n        .synch_in  ( uo_done_cal      ) ,\n        .synch_out ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S0_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S0_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( C_S0_AXI_DATA_WIDTH      ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S0_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S0_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S0_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S0_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S0_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( C_P0_DATA_PORT_SIZE      ) ,\n        .C_STRICT_COHERENCY      ( C_S0_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S0_AXI_ENABLE_AP           )\n        )\n        p0_axi_mcb\n        (\n        .aclk              ( s0_axi_aclk        ),\n        .aresetn           ( s0_axi_aresetn     ),\n        .s_axi_awid        ( s0_axi_awid        ),\n        .s_axi_awaddr      ( s0_axi_awaddr_i    ),\n        .s_axi_awlen       ( s0_axi_awlen       ),\n        .s_axi_awsize      ( s0_axi_awsize      ),\n        .s_axi_awburst     ( s0_axi_awburst     ),\n        .s_axi_awlock      ( s0_axi_awlock      ),\n        .s_axi_awcache     ( s0_axi_awcache     ),\n        .s_axi_awprot      ( s0_axi_awprot      ),\n        .s_axi_awqos       ( s0_axi_awqos       ),\n        .s_axi_awvalid     ( s0_axi_awvalid     ),\n        .s_axi_awready     ( s0_axi_awready     ),\n        .s_axi_wdata       ( s0_axi_wdata       ),\n        .s_axi_wstrb       ( s0_axi_wstrb       ),\n        .s_axi_wlast       ( s0_axi_wlast       ),\n        .s_axi_wvalid      ( s0_axi_wvalid      ),\n        .s_axi_wready      ( s0_axi_wready      ),\n        .s_axi_bid         ( s0_axi_bid         ),\n        .s_axi_bresp       ( s0_axi_bresp       ),\n        .s_axi_bvalid      ( s0_axi_bvalid      ),\n        .s_axi_bready      ( s0_axi_bready      ),\n        .s_axi_arid        ( s0_axi_arid        ),\n        .s_axi_araddr      ( s0_axi_araddr_i    ),\n        .s_axi_arlen       ( s0_axi_arlen       ),\n        .s_axi_arsize      ( s0_axi_arsize      ),\n        .s_axi_arburst     ( s0_axi_arburst     ),\n        .s_axi_arlock      ( s0_axi_arlock      ),\n        .s_axi_arcache     ( s0_axi_arcache     ),\n        .s_axi_arprot      ( s0_axi_arprot      ),\n        .s_axi_arqos       ( s0_axi_arqos       ),\n        .s_axi_arvalid     ( s0_axi_arvalid     ),\n        .s_axi_arready     ( s0_axi_arready     ),\n        .s_axi_rid         ( s0_axi_rid         ),\n        .s_axi_rdata       ( s0_axi_rdata       ),\n        .s_axi_rresp       ( s0_axi_rresp       ),\n        .s_axi_rlast       ( s0_axi_rlast       ),\n        .s_axi_rvalid      ( s0_axi_rvalid      ),\n        .s_axi_rready      ( s0_axi_rready      ),\n        .mcb_cmd_clk       ( p0_cmd_clk_i       ),\n        .mcb_cmd_en        ( p0_cmd_en_i        ),\n        .mcb_cmd_instr     ( p0_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p0_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p0_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p0_cmd_empty_i     ),\n        .mcb_cmd_full      ( p0_cmd_full_i      ),\n        .mcb_wr_clk        ( p0_wr_clk_i        ),\n        .mcb_wr_en         ( p0_wr_en_i         ),\n        .mcb_wr_mask       ( p0_wr_mask_i       ),\n        .mcb_wr_data       ( p0_wr_data_i       ),\n        .mcb_wr_full       ( p0_wr_full_i       ),\n        .mcb_wr_empty      ( p0_wr_empty_i      ),\n        .mcb_wr_count      ( p0_wr_count_i      ),\n        .mcb_wr_underrun   ( p0_wr_underrun_i   ),\n        .mcb_wr_error      ( p0_wr_error_i      ),\n        .mcb_rd_clk        ( p0_rd_clk_i        ),\n        .mcb_rd_en         ( p0_rd_en_i         ),\n        .mcb_rd_data       ( p0_rd_data_i       ),\n        .mcb_rd_full       ( p0_rd_full_i       ),\n        .mcb_rd_empty      ( p0_rd_empty_i      ),\n        .mcb_rd_count      ( p0_rd_count_i      ),\n        .mcb_rd_overflow   ( p0_rd_overflow_i   ),\n        .mcb_rd_error      ( p0_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );",
        "    else begin : P0_UI_AXI\n      assign  p0_arb_en_i        =  p0_arb_en;\n      assign  s0_axi_araddr_i    = s0_axi_araddr & P_S0_AXI_ADDRMASK;\n      assign  s0_axi_awaddr_i    = s0_axi_awaddr & P_S0_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk       ( s0_axi_aclk      ) ,\n        .synch_in  ( uo_done_cal      ) ,\n        .synch_out ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S0_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S0_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( C_S0_AXI_DATA_WIDTH      ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S0_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S0_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S0_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S0_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S0_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( C_P0_DATA_PORT_SIZE      ) ,\n        .C_STRICT_COHERENCY      ( C_S0_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S0_AXI_ENABLE_AP           )\n        )\n        p0_axi_mcb\n        (\n        .aclk              ( s0_axi_aclk        ),\n        .aresetn           ( s0_axi_aresetn     ),\n        .s_axi_awid        ( s0_axi_awid        ),\n        .s_axi_awaddr      ( s0_axi_awaddr_i    ),\n        .s_axi_awlen       ( s0_axi_awlen       ),\n        .s_axi_awsize      ( s0_axi_awsize      ),\n        .s_axi_awburst     ( s0_axi_awburst     ),\n        .s_axi_awlock      ( s0_axi_awlock      ),\n        .s_axi_awcache     ( s0_axi_awcache     ),\n        .s_axi_awprot      ( s0_axi_awprot      ),\n        .s_axi_awqos       ( s0_axi_awqos       ),\n        .s_axi_awvalid     ( s0_axi_awvalid     ),\n        .s_axi_awready     ( s0_axi_awready     ),\n        .s_axi_wdata       ( s0_axi_wdata       ),\n        .s_axi_wstrb       ( s0_axi_wstrb       ),\n        .s_axi_wlast       ( s0_axi_wlast       ),\n        .s_axi_wvalid      ( s0_axi_wvalid      ),\n        .s_axi_wready      ( s0_axi_wready      ),\n        .s_axi_bid         ( s0_axi_bid         ),\n        .s_axi_bresp       ( s0_axi_bresp       ),\n        .s_axi_bvalid      ( s0_axi_bvalid      ),\n        .s_axi_bready      ( s0_axi_bready      ),\n        .s_axi_arid        ( s0_axi_arid        ),\n        .s_axi_araddr      ( s0_axi_araddr_i    ),\n        .s_axi_arlen       ( s0_axi_arlen       ),\n        .s_axi_arsize      ( s0_axi_arsize      ),\n        .s_axi_arburst     ( s0_axi_arburst     ),\n        .s_axi_arlock      ( s0_axi_arlock      ),\n        .s_axi_arcache     ( s0_axi_arcache     ),\n        .s_axi_arprot      ( s0_axi_arprot      ),\n        .s_axi_arqos       ( s0_axi_arqos       ),\n        .s_axi_arvalid     ( s0_axi_arvalid     ),\n        .s_axi_arready     ( s0_axi_arready     ),\n        .s_axi_rid         ( s0_axi_rid         ),\n        .s_axi_rdata       ( s0_axi_rdata       ),\n        .s_axi_rresp       ( s0_axi_rresp       ),\n        .s_axi_rlast       ( s0_axi_rlast       ),\n        .s_axi_rvalid      ( s0_axi_rvalid      ),\n        .s_axi_rready      ( s0_axi_rready      ),\n        .mcb_cmd_clk       ( p0_cmd_clk_i       ),\n        .mcb_cmd_en        ( p0_cmd_en_i        ),\n        .mcb_cmd_instr     ( p0_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p0_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p0_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p0_cmd_empty_i     ),\n        .mcb_cmd_full      ( p0_cmd_full_i      ),\n        .mcb_wr_clk        ( p0_wr_clk_i        ),\n        .mcb_wr_en         ( p0_wr_en_i         ),\n        .mcb_wr_mask       ( p0_wr_mask_i       ),\n        .mcb_wr_data       ( p0_wr_data_i       ),\n        .mcb_wr_full       ( p0_wr_full_i       ),\n        .mcb_wr_empty      ( p0_wr_empty_i      ),\n        .mcb_wr_count      ( p0_wr_count_i      ),\n        .mcb_wr_underrun   ( p0_wr_underrun_i   ),\n        .mcb_wr_error      ( p0_wr_error_i      ),\n        .mcb_rd_clk        ( p0_rd_clk_i        ),\n        .mcb_rd_en         ( p0_rd_en_i         ),\n        .mcb_rd_data       ( p0_rd_data_i       ),\n        .mcb_rd_full       ( p0_rd_full_i       ),\n        .mcb_rd_empty      ( p0_rd_empty_i      ),\n        .mcb_rd_count      ( p0_rd_count_i      ),\n        .mcb_rd_overflow   ( p0_rd_overflow_i   ),\n        .mcb_rd_error      ( p0_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end",
        "    if (C_S0_AXI_ENABLE == 0) begin : P0_UI_MCB\n      assign  p0_arb_en_i        =  p0_arb_en        ; \n      assign  p0_cmd_clk_i       =  p0_cmd_clk       ; \n      assign  p0_cmd_en_i        =  p0_cmd_en        ; \n      assign  p0_cmd_instr_i     =  p0_cmd_instr     ; \n      assign  p0_cmd_bl_i        =  p0_cmd_bl        ; \n      assign  p0_cmd_byte_addr_i =  p0_cmd_byte_addr ; \n      assign  p0_cmd_empty       =  p0_cmd_empty_i   ; \n      assign  p0_cmd_full        =  p0_cmd_full_i    ; \n      assign  p0_wr_clk_i        =  p0_wr_clk        ; \n      assign  p0_wr_en_i         =  p0_wr_en         ; \n      assign  p0_wr_mask_i       =  p0_wr_mask       ; \n      assign  p0_wr_data_i       =  p0_wr_data       ; \n      assign  p0_wr_full         =  p0_wr_full_i     ; \n      assign  p0_wr_empty        =  p0_wr_empty_i    ; \n      assign  p0_wr_count        =  p0_wr_count_i    ; \n      assign  p0_wr_underrun     =  p0_wr_underrun_i ; \n      assign  p0_wr_error        =  p0_wr_error_i    ; \n      assign  p0_rd_clk_i        =  p0_rd_clk        ; \n      assign  p0_rd_en_i         =  p0_rd_en         ; \n      assign  p0_rd_data         =  p0_rd_data_i     ; \n      assign  p0_rd_full         =  p0_rd_full_i     ; \n      assign  p0_rd_empty        =  p0_rd_empty_i    ; \n      assign  p0_rd_count        =  p0_rd_count_i    ; \n      assign  p0_rd_overflow     =  p0_rd_overflow_i ; \n      assign  p0_rd_error        =  p0_rd_error_i    ; \n    end",
        "  generate\n    if (C_S0_AXI_ENABLE == 0) begin : P0_UI_MCB\n      assign  p0_arb_en_i        =  p0_arb_en        ; \n      assign  p0_cmd_clk_i       =  p0_cmd_clk       ; \n      assign  p0_cmd_en_i        =  p0_cmd_en        ; \n      assign  p0_cmd_instr_i     =  p0_cmd_instr     ; \n      assign  p0_cmd_bl_i        =  p0_cmd_bl        ; \n      assign  p0_cmd_byte_addr_i =  p0_cmd_byte_addr ; \n      assign  p0_cmd_empty       =  p0_cmd_empty_i   ; \n      assign  p0_cmd_full        =  p0_cmd_full_i    ; \n      assign  p0_wr_clk_i        =  p0_wr_clk        ; \n      assign  p0_wr_en_i         =  p0_wr_en         ; \n      assign  p0_wr_mask_i       =  p0_wr_mask       ; \n      assign  p0_wr_data_i       =  p0_wr_data       ; \n      assign  p0_wr_full         =  p0_wr_full_i     ; \n      assign  p0_wr_empty        =  p0_wr_empty_i    ; \n      assign  p0_wr_count        =  p0_wr_count_i    ; \n      assign  p0_wr_underrun     =  p0_wr_underrun_i ; \n      assign  p0_wr_error        =  p0_wr_error_i    ; \n      assign  p0_rd_clk_i        =  p0_rd_clk        ; \n      assign  p0_rd_en_i         =  p0_rd_en         ; \n      assign  p0_rd_data         =  p0_rd_data_i     ; \n      assign  p0_rd_full         =  p0_rd_full_i     ; \n      assign  p0_rd_empty        =  p0_rd_empty_i    ; \n      assign  p0_rd_count        =  p0_rd_count_i    ; \n      assign  p0_rd_overflow     =  p0_rd_overflow_i ; \n      assign  p0_rd_error        =  p0_rd_error_i    ; \n    end\n    else begin : P0_UI_AXI\n      assign  p0_arb_en_i        =  p0_arb_en;\n      assign  s0_axi_araddr_i    = s0_axi_araddr & P_S0_AXI_ADDRMASK;\n      assign  s0_axi_awaddr_i    = s0_axi_awaddr & P_S0_AXI_ADDRMASK;\n      wire                     calib_done_synch;\n\n      mcb_ui_top_synch #(\n        .C_SYNCH_WIDTH          ( 1 )\n      )\n      axi_mcb_synch\n      (\n        .clk       ( s0_axi_aclk      ) ,\n        .synch_in  ( uo_done_cal      ) ,\n        .synch_out ( calib_done_synch )\n      );\n      axi_mcb #\n        (\n        .C_FAMILY                ( \"spartan6\"               ) ,\n        .C_S_AXI_ID_WIDTH        ( C_S0_AXI_ID_WIDTH        ) ,\n        .C_S_AXI_ADDR_WIDTH      ( C_S0_AXI_ADDR_WIDTH      ) ,\n        .C_S_AXI_DATA_WIDTH      ( C_S0_AXI_DATA_WIDTH      ) ,\n        .C_S_AXI_SUPPORTS_READ   ( C_S0_AXI_SUPPORTS_READ   ) ,\n        .C_S_AXI_SUPPORTS_WRITE  ( C_S0_AXI_SUPPORTS_WRITE  ) ,\n        .C_S_AXI_REG_EN0         ( C_S0_AXI_REG_EN0         ) ,\n        .C_S_AXI_REG_EN1         ( C_S0_AXI_REG_EN1         ) ,\n        .C_S_AXI_SUPPORTS_NARROW_BURST ( C_S0_AXI_SUPPORTS_NARROW_BURST ) ,\n        .C_MCB_ADDR_WIDTH        ( 30                       ) ,\n        .C_MCB_DATA_WIDTH        ( C_P0_DATA_PORT_SIZE      ) ,\n        .C_STRICT_COHERENCY      ( C_S0_AXI_STRICT_COHERENCY    ) ,\n        .C_ENABLE_AP             ( C_S0_AXI_ENABLE_AP           )\n        )\n        p0_axi_mcb\n        (\n        .aclk              ( s0_axi_aclk        ),\n        .aresetn           ( s0_axi_aresetn     ),\n        .s_axi_awid        ( s0_axi_awid        ),\n        .s_axi_awaddr      ( s0_axi_awaddr_i    ),\n        .s_axi_awlen       ( s0_axi_awlen       ),\n        .s_axi_awsize      ( s0_axi_awsize      ),\n        .s_axi_awburst     ( s0_axi_awburst     ),\n        .s_axi_awlock      ( s0_axi_awlock      ),\n        .s_axi_awcache     ( s0_axi_awcache     ),\n        .s_axi_awprot      ( s0_axi_awprot      ),\n        .s_axi_awqos       ( s0_axi_awqos       ),\n        .s_axi_awvalid     ( s0_axi_awvalid     ),\n        .s_axi_awready     ( s0_axi_awready     ),\n        .s_axi_wdata       ( s0_axi_wdata       ),\n        .s_axi_wstrb       ( s0_axi_wstrb       ),\n        .s_axi_wlast       ( s0_axi_wlast       ),\n        .s_axi_wvalid      ( s0_axi_wvalid      ),\n        .s_axi_wready      ( s0_axi_wready      ),\n        .s_axi_bid         ( s0_axi_bid         ),\n        .s_axi_bresp       ( s0_axi_bresp       ),\n        .s_axi_bvalid      ( s0_axi_bvalid      ),\n        .s_axi_bready      ( s0_axi_bready      ),\n        .s_axi_arid        ( s0_axi_arid        ),\n        .s_axi_araddr      ( s0_axi_araddr_i    ),\n        .s_axi_arlen       ( s0_axi_arlen       ),\n        .s_axi_arsize      ( s0_axi_arsize      ),\n        .s_axi_arburst     ( s0_axi_arburst     ),\n        .s_axi_arlock      ( s0_axi_arlock      ),\n        .s_axi_arcache     ( s0_axi_arcache     ),\n        .s_axi_arprot      ( s0_axi_arprot      ),\n        .s_axi_arqos       ( s0_axi_arqos       ),\n        .s_axi_arvalid     ( s0_axi_arvalid     ),\n        .s_axi_arready     ( s0_axi_arready     ),\n        .s_axi_rid         ( s0_axi_rid         ),\n        .s_axi_rdata       ( s0_axi_rdata       ),\n        .s_axi_rresp       ( s0_axi_rresp       ),\n        .s_axi_rlast       ( s0_axi_rlast       ),\n        .s_axi_rvalid      ( s0_axi_rvalid      ),\n        .s_axi_rready      ( s0_axi_rready      ),\n        .mcb_cmd_clk       ( p0_cmd_clk_i       ),\n        .mcb_cmd_en        ( p0_cmd_en_i        ),\n        .mcb_cmd_instr     ( p0_cmd_instr_i     ),\n        .mcb_cmd_bl        ( p0_cmd_bl_i        ),\n        .mcb_cmd_byte_addr ( p0_cmd_byte_addr_i ),\n        .mcb_cmd_empty     ( p0_cmd_empty_i     ),\n        .mcb_cmd_full      ( p0_cmd_full_i      ),\n        .mcb_wr_clk        ( p0_wr_clk_i        ),\n        .mcb_wr_en         ( p0_wr_en_i         ),\n        .mcb_wr_mask       ( p0_wr_mask_i       ),\n        .mcb_wr_data       ( p0_wr_data_i       ),\n        .mcb_wr_full       ( p0_wr_full_i       ),\n        .mcb_wr_empty      ( p0_wr_empty_i      ),\n        .mcb_wr_count      ( p0_wr_count_i      ),\n        .mcb_wr_underrun   ( p0_wr_underrun_i   ),\n        .mcb_wr_error      ( p0_wr_error_i      ),\n        .mcb_rd_clk        ( p0_rd_clk_i        ),\n        .mcb_rd_en         ( p0_rd_en_i         ),\n        .mcb_rd_data       ( p0_rd_data_i       ),\n        .mcb_rd_full       ( p0_rd_full_i       ),\n        .mcb_rd_empty      ( p0_rd_empty_i      ),\n        .mcb_rd_count      ( p0_rd_count_i      ),\n        .mcb_rd_overflow   ( p0_rd_overflow_i   ),\n        .mcb_rd_error      ( p0_rd_error_i      ),\n        .mcb_calib_done    ( calib_done_synch   )\n        );\n    end\n  endgenerate",
        "   mcb_raw_wrapper_inst\n   (\n   .sysclk_2x                 ( ioclk0                    ),\n   .sysclk_2x_180             ( ioclk180                  ),\n   .pll_ce_0                  ( pll_ce_0_i                ),\n   .pll_ce_90                 ( pll_ce_90_i               ),\n   .pll_lock                  ( pll_lock_bufpll_o         ),\n   .sys_rst                   ( sys_rst                   ),\n   .p0_arb_en                 ( p0_arb_en_i               ),\n   .p0_cmd_clk                ( p0_cmd_clk_i              ),\n   .p0_cmd_en                 ( p0_cmd_en_i               ),\n   .p0_cmd_instr              ( p0_cmd_instr_i            ),\n   .p0_cmd_bl                 ( p0_cmd_bl_i               ),\n   .p0_cmd_byte_addr          ( p0_cmd_byte_addr_i        ),\n   .p0_cmd_empty              ( p0_cmd_empty_i            ),\n   .p0_cmd_full               ( p0_cmd_full_i             ),\n   .p0_wr_clk                 ( p0_wr_clk_i               ),\n   .p0_wr_en                  ( p0_wr_en_i                ),\n   .p0_wr_mask                ( p0_wr_mask_i              ),\n   .p0_wr_data                ( p0_wr_data_i              ),\n   .p0_wr_full                ( p0_wr_full_i              ),\n   .p0_wr_empty               ( p0_wr_empty_i             ),\n   .p0_wr_count               ( p0_wr_count_i             ),\n   .p0_wr_underrun            ( p0_wr_underrun_i          ),\n   .p0_wr_error               ( p0_wr_error_i             ),\n   .p0_rd_clk                 ( p0_rd_clk_i               ),\n   .p0_rd_en                  ( p0_rd_en_i                ),\n   .p0_rd_data                ( p0_rd_data_i              ),\n   .p0_rd_full                ( p0_rd_full_i              ),\n   .p0_rd_empty               ( p0_rd_empty_i             ),\n   .p0_rd_count               ( p0_rd_count_i             ),\n   .p0_rd_overflow            ( p0_rd_overflow_i          ),\n   .p0_rd_error               ( p0_rd_error_i             ),\n   .p1_arb_en                 ( p1_arb_en_i               ),\n   .p1_cmd_clk                ( p1_cmd_clk_i              ),\n   .p1_cmd_en                 ( p1_cmd_en_i               ),\n   .p1_cmd_instr              ( p1_cmd_instr_i            ),\n   .p1_cmd_bl                 ( p1_cmd_bl_i               ),\n   .p1_cmd_byte_addr          ( p1_cmd_byte_addr_i        ),\n   .p1_cmd_empty              ( p1_cmd_empty_i            ),\n   .p1_cmd_full               ( p1_cmd_full_i             ),\n   .p1_wr_clk                 ( p1_wr_clk_i               ),\n   .p1_wr_en                  ( p1_wr_en_i                ),\n   .p1_wr_mask                ( p1_wr_mask_i              ),\n   .p1_wr_data                ( p1_wr_data_i              ),\n   .p1_wr_full                ( p1_wr_full_i              ),\n   .p1_wr_empty               ( p1_wr_empty_i             ),\n   .p1_wr_count               ( p1_wr_count_i             ),\n   .p1_wr_underrun            ( p1_wr_underrun_i          ),\n   .p1_wr_error               ( p1_wr_error_i             ),\n   .p1_rd_clk                 ( p1_rd_clk_i               ),\n   .p1_rd_en                  ( p1_rd_en_i                ),\n   .p1_rd_data                ( p1_rd_data_i              ),\n   .p1_rd_full                ( p1_rd_full_i              ),\n   .p1_rd_empty               ( p1_rd_empty_i             ),\n   .p1_rd_count               ( p1_rd_count_i             ),\n   .p1_rd_overflow            ( p1_rd_overflow_i          ),\n   .p1_rd_error               ( p1_rd_error_i             ),\n   .p2_arb_en                 ( p2_arb_en_i               ),\n   .p2_cmd_clk                ( p2_cmd_clk_i              ),\n   .p2_cmd_en                 ( p2_cmd_en_i               ),\n   .p2_cmd_instr              ( p2_cmd_instr_i            ),\n   .p2_cmd_bl                 ( p2_cmd_bl_i               ),\n   .p2_cmd_byte_addr          ( p2_cmd_byte_addr_i        ),\n   .p2_cmd_empty              ( p2_cmd_empty_i            ),\n   .p2_cmd_full               ( p2_cmd_full_i             ),\n   .p2_wr_clk                 ( p2_wr_clk_i               ),\n   .p2_wr_en                  ( p2_wr_en_i                ),\n   .p2_wr_mask                ( p2_wr_mask_i              ),\n   .p2_wr_data                ( p2_wr_data_i              ),\n   .p2_wr_full                ( p2_wr_full_i              ),\n   .p2_wr_empty               ( p2_wr_empty_i             ),\n   .p2_wr_count               ( p2_wr_count_i             ),\n   .p2_wr_underrun            ( p2_wr_underrun_i          ),\n   .p2_wr_error               ( p2_wr_error_i             ),\n   .p2_rd_clk                 ( p2_rd_clk_i               ),\n   .p2_rd_en                  ( p2_rd_en_i                ),\n   .p2_rd_data                ( p2_rd_data_i              ),\n   .p2_rd_full                ( p2_rd_full_i              ),\n   .p2_rd_empty               ( p2_rd_empty_i             ),\n   .p2_rd_count               ( p2_rd_count_i             ),\n   .p2_rd_overflow            ( p2_rd_overflow_i          ),\n   .p2_rd_error               ( p2_rd_error_i             ),\n   .p3_arb_en                 ( p3_arb_en_i               ),\n   .p3_cmd_clk                ( p3_cmd_clk_i              ),\n   .p3_cmd_en                 ( p3_cmd_en_i               ),\n   .p3_cmd_instr              ( p3_cmd_instr_i            ),\n   .p3_cmd_bl                 ( p3_cmd_bl_i               ),\n   .p3_cmd_byte_addr          ( p3_cmd_byte_addr_i        ),\n   .p3_cmd_empty              ( p3_cmd_empty_i            ),\n   .p3_cmd_full               ( p3_cmd_full_i             ),\n   .p3_wr_clk                 ( p3_wr_clk_i               ),\n   .p3_wr_en                  ( p3_wr_en_i                ),\n   .p3_wr_mask                ( p3_wr_mask_i              ),\n   .p3_wr_data                ( p3_wr_data_i              ),\n   .p3_wr_full                ( p3_wr_full_i              ),\n   .p3_wr_empty               ( p3_wr_empty_i             ),\n   .p3_wr_count               ( p3_wr_count_i             ),\n   .p3_wr_underrun            ( p3_wr_underrun_i          ),\n   .p3_wr_error               ( p3_wr_error_i             ),\n   .p3_rd_clk                 ( p3_rd_clk_i               ),\n   .p3_rd_en                  ( p3_rd_en_i                ),\n   .p3_rd_data                ( p3_rd_data_i              ),\n   .p3_rd_full                ( p3_rd_full_i              ),\n   .p3_rd_empty               ( p3_rd_empty_i             ),\n   .p3_rd_count               ( p3_rd_count_i             ),\n   .p3_rd_overflow            ( p3_rd_overflow_i          ),\n   .p3_rd_error               ( p3_rd_error_i             ),\n   .p4_arb_en                 ( p4_arb_en_i               ),\n   .p4_cmd_clk                ( p4_cmd_clk_i              ),\n   .p4_cmd_en                 ( p4_cmd_en_i               ),\n   .p4_cmd_instr              ( p4_cmd_instr_i            ),\n   .p4_cmd_bl                 ( p4_cmd_bl_i               ),\n   .p4_cmd_byte_addr          ( p4_cmd_byte_addr_i        ),\n   .p4_cmd_empty              ( p4_cmd_empty_i            ),\n   .p4_cmd_full               ( p4_cmd_full_i             ),\n   .p4_wr_clk                 ( p4_wr_clk_i               ),\n   .p4_wr_en                  ( p4_wr_en_i                ),\n   .p4_wr_mask                ( p4_wr_mask_i              ),\n   .p4_wr_data                ( p4_wr_data_i              ),\n   .p4_wr_full                ( p4_wr_full_i              ),\n   .p4_wr_empty               ( p4_wr_empty_i             ),\n   .p4_wr_count               ( p4_wr_count_i             ),\n   .p4_wr_underrun            ( p4_wr_underrun_i          ),\n   .p4_wr_error               ( p4_wr_error_i             ),\n   .p4_rd_clk                 ( p4_rd_clk_i               ),\n   .p4_rd_en                  ( p4_rd_en_i                ),\n   .p4_rd_data                ( p4_rd_data_i              ),\n   .p4_rd_full                ( p4_rd_full_i              ),\n   .p4_rd_empty               ( p4_rd_empty_i             ),\n   .p4_rd_count               ( p4_rd_count_i             ),\n   .p4_rd_overflow            ( p4_rd_overflow_i          ),\n   .p4_rd_error               ( p4_rd_error_i             ),\n   .p5_arb_en                 ( p5_arb_en_i               ),\n   .p5_cmd_clk                ( p5_cmd_clk_i              ),\n   .p5_cmd_en                 ( p5_cmd_en_i               ),\n   .p5_cmd_instr              ( p5_cmd_instr_i            ),\n   .p5_cmd_bl                 ( p5_cmd_bl_i               ),\n   .p5_cmd_byte_addr          ( p5_cmd_byte_addr_i        ),\n   .p5_cmd_empty              ( p5_cmd_empty_i            ),\n   .p5_cmd_full               ( p5_cmd_full_i             ),\n   .p5_wr_clk                 ( p5_wr_clk_i               ),\n   .p5_wr_en                  ( p5_wr_en_i                ),\n   .p5_wr_mask                ( p5_wr_mask_i              ),\n   .p5_wr_data                ( p5_wr_data_i              ),\n   .p5_wr_full                ( p5_wr_full_i              ),\n   .p5_wr_empty               ( p5_wr_empty_i             ),\n   .p5_wr_count               ( p5_wr_count_i             ),\n   .p5_wr_underrun            ( p5_wr_underrun_i          ),\n   .p5_wr_error               ( p5_wr_error_i             ),\n   .p5_rd_clk                 ( p5_rd_clk_i               ),\n   .p5_rd_en                  ( p5_rd_en_i                ),\n   .p5_rd_data                ( p5_rd_data_i              ),\n   .p5_rd_full                ( p5_rd_full_i              ),\n   .p5_rd_empty               ( p5_rd_empty_i             ),\n   .p5_rd_count               ( p5_rd_count_i             ),\n   .p5_rd_overflow            ( p5_rd_overflow_i          ),\n   .p5_rd_error               ( p5_rd_error_i             ),\n   .mcbx_dram_addr            ( mcbx_dram_addr            ),\n   .mcbx_dram_ba              ( mcbx_dram_ba              ),\n   .mcbx_dram_ras_n           ( mcbx_dram_ras_n           ),\n   .mcbx_dram_cas_n           ( mcbx_dram_cas_n           ),\n   .mcbx_dram_we_n            ( mcbx_dram_we_n            ),\n   .mcbx_dram_cke             ( mcbx_dram_cke             ),\n   .mcbx_dram_clk             ( mcbx_dram_clk             ),\n   .mcbx_dram_clk_n           ( mcbx_dram_clk_n           ),\n   .mcbx_dram_dq              ( mcbx_dram_dq              ),\n   .mcbx_dram_dqs             ( mcbx_dram_dqs             ),\n   .mcbx_dram_dqs_n           ( mcbx_dram_dqs_n           ),\n   .mcbx_dram_udqs            ( mcbx_dram_udqs            ),\n   .mcbx_dram_udqs_n          ( mcbx_dram_udqs_n          ),\n   .mcbx_dram_udm             ( mcbx_dram_udm             ),\n   .mcbx_dram_ldm             ( mcbx_dram_ldm             ),\n   .mcbx_dram_odt             ( mcbx_dram_odt             ),\n   .mcbx_dram_ddr3_rst        ( mcbx_dram_ddr3_rst        ),\n   .calib_recal               ( calib_recal               ),\n   .rzq                       ( rzq                       ),\n   .zio                       ( zio                       ),\n   .ui_read                   ( ui_read                   ),\n   .ui_add                    ( ui_add                    ),\n   .ui_cs                     ( ui_cs                     ),\n   .ui_clk                    ( ui_clk                    ),\n   .ui_sdi                    ( ui_sdi                    ),\n   .ui_addr                   ( ui_addr                   ),\n   .ui_broadcast              ( ui_broadcast              ),\n   .ui_drp_update             ( ui_drp_update             ),\n   .ui_done_cal               ( ui_done_cal               ),\n   .ui_cmd                    ( ui_cmd                    ),\n   .ui_cmd_in                 ( ui_cmd_in                 ),\n   .ui_cmd_en                 ( ui_cmd_en                 ),\n   .ui_dqcount                ( ui_dqcount                ),\n   .ui_dq_lower_dec           ( ui_dq_lower_dec           ),\n   .ui_dq_lower_inc           ( ui_dq_lower_inc           ),\n   .ui_dq_upper_dec           ( ui_dq_upper_dec           ),\n   .ui_dq_upper_inc           ( ui_dq_upper_inc           ),\n   .ui_udqs_inc               ( ui_udqs_inc               ),\n   .ui_udqs_dec               ( ui_udqs_dec               ),\n   .ui_ldqs_inc               ( ui_ldqs_inc               ),\n   .ui_ldqs_dec               ( ui_ldqs_dec               ),\n   .uo_data                   ( uo_data                   ),\n   .uo_data_valid             ( uo_data_valid             ),\n   .uo_done_cal               ( uo_done_cal               ),\n   .uo_cmd_ready_in           ( uo_cmd_ready_in           ),\n   .uo_refrsh_flag            ( uo_refrsh_flag            ),\n   .uo_cal_start              ( uo_cal_start              ),\n   .uo_sdo                    ( uo_sdo                    ),\n   .status                    ( status                    ),\n   .selfrefresh_enter         ( selfrefresh_enter         ),\n   .selfrefresh_mode          ( selfrefresh_mode          )\n   );",
        "   .C_MEM_TZQINIT_MAXCNT      ( C_MEM_TZQINIT_MAXCNT - 16 ),\n   .C_MC_CALIB_BYPASS         ( C_MC_CALIB_BYPASS         ),\n   .C_MC_CALIBRATION_RA       ( C_MC_CALIBRATION_RA       ),\n   .C_MC_CALIBRATION_BA       ( C_MC_CALIBRATION_BA       ),\n   .C_CALIB_SOFT_IP           ( C_CALIB_SOFT_IP           ),\n   .C_SKIP_IN_TERM_CAL        ( C_SKIP_IN_TERM_CAL        ),\n   .C_SKIP_DYNAMIC_CAL        ( C_SKIP_DYNAMIC_CAL        ),\n   .C_SKIP_DYN_IN_TERM        ( C_SKIP_DYN_IN_TERM        ),\n   .LDQSP_TAP_DELAY_VAL       ( LDQSP_TAP_DELAY_VAL       ),\n   .UDQSP_TAP_DELAY_VAL       ( UDQSP_TAP_DELAY_VAL       ),\n   .LDQSN_TAP_DELAY_VAL       ( LDQSN_TAP_DELAY_VAL       ),\n   .UDQSN_TAP_DELAY_VAL       ( UDQSN_TAP_DELAY_VAL       ),\n   .DQ0_TAP_DELAY_VAL         ( DQ0_TAP_DELAY_VAL         ),\n   .DQ1_TAP_DELAY_VAL         ( DQ1_TAP_DELAY_VAL         ),\n   .DQ2_TAP_DELAY_VAL         ( DQ2_TAP_DELAY_VAL         ),\n   .DQ3_TAP_DELAY_VAL         ( DQ3_TAP_DELAY_VAL         ),\n   .DQ4_TAP_DELAY_VAL         ( DQ4_TAP_DELAY_VAL         ),\n   .DQ5_TAP_DELAY_VAL         ( DQ5_TAP_DELAY_VAL         ),\n   .DQ6_TAP_DELAY_VAL         ( DQ6_TAP_DELAY_VAL         ),\n   .DQ7_TAP_DELAY_VAL         ( DQ7_TAP_DELAY_VAL         ),\n   .DQ8_TAP_DELAY_VAL         ( DQ8_TAP_DELAY_VAL         ),\n   .DQ9_TAP_DELAY_VAL         ( DQ9_TAP_DELAY_VAL         ),\n   .DQ10_TAP_DELAY_VAL        ( DQ10_TAP_DELAY_VAL        ),\n   .DQ11_TAP_DELAY_VAL        ( DQ11_TAP_DELAY_VAL        ),\n   .DQ12_TAP_DELAY_VAL        ( DQ12_TAP_DELAY_VAL        ),\n   .DQ13_TAP_DELAY_VAL        ( DQ13_TAP_DELAY_VAL        ),\n   .DQ14_TAP_DELAY_VAL        ( DQ14_TAP_DELAY_VAL        ),\n   .DQ15_TAP_DELAY_VAL        ( DQ15_TAP_DELAY_VAL        ),\n   .C_MC_CALIBRATION_CA       ( C_MC_CALIBRATION_CA       ),\n   .C_MC_CALIBRATION_CLK_DIV  ( C_MC_CALIBRATION_CLK_DIV  ),\n   .C_MC_CALIBRATION_MODE     ( C_MC_CALIBRATION_MODE     ),\n   .C_MC_CALIBRATION_DELAY    ( C_MC_CALIBRATION_DELAY    ),\n   \n   .C_SIMULATION              ( C_SIMULATION              ),\n   \n   .C_P0_MASK_SIZE            ( C_P0_MASK_SIZE            ),\n   .C_P0_DATA_PORT_SIZE       ( C_P0_DATA_PORT_SIZE       ),\n   .C_P1_MASK_SIZE            ( C_P1_MASK_SIZE            ),\n   .C_P1_DATA_PORT_SIZE       ( C_P1_DATA_PORT_SIZE       )\n   )",
        "  assign sysclk_2x_bufpll_o     = ioclk0;\n  assign sysclk_2x_180_bufpll_o = ioclk180;\n  assign pll_ce_0_bufpll_o      = pll_ce_0_i;\n  assign pll_ce_90_bufpll_o     = pll_ce_90_i;",
        "  generate\n    if (C_MCB_USE_EXTERNAL_BUFPLL == 0) begin : gen_spartan6_bufpll_mcb\n      \n      BUFPLL_MCB #\n      (\n      .DIVIDE   (2),\n      .LOCK_SRC (\"LOCK_TO_0\")\n      )\n      bufpll_0\n        (\n        .IOCLK0       (ioclk0),\n        .IOCLK1       (ioclk180),\n        .GCLK         (ui_clk),\n        .LOCKED       (pll_lock),\n        .LOCK         (pll_lock_bufpll_o),\n        .SERDESSTROBE0(pll_ce_0_i),\n        .SERDESSTROBE1(pll_ce_90_i),\n        .PLLIN0       (sysclk_2x),\n        .PLLIN1       (sysclk_2x_180)\n        );\n      end else begin : gen_spartan6_no_bufpll_mcb\n        \n        assign pll_ce_0_i   = pll_ce_0;\n        assign pll_ce_90_i  = pll_ce_90;\n        assign ioclk0     = sysclk_2x;\n        assign ioclk180   = sysclk_2x_180;\n        assign pll_lock_bufpll_o = pll_lock;\n      end\n  endgenerate",
        "function integer calc_num_time_slots (\n  input [5:0]   port_enable,\n  input integer port_config\n);\nbegin : func_calc_num_tim_slots\n  integer num_ports;\n  integer i;\n  num_ports = 0;\n  for (i = 0; i < 6; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n  calc_num_time_slots = (port_config == 1 && num_ports == 5) ? 10 : 12;\nend\nendfunction",
        "function [17:0] convert_arb_slot (\n  input [5:0]   port_enable,\n  input integer port_config,\n  input [17:0]  mig_arb_slot\n);\nbegin : func_convert_arb_slot\n  integer i;\n  integer num_ports;\n  integer mig_port_num;\n  reg [17:0] port_map;\n  num_ports = 0;\n\n  \n  case (port_config)\n    1: port_map = 18'o543210;\n    2: port_map = 18'o774210;\n    3: port_map = 18'o777420;\n    4: port_map = 18'o777720;\n    5: port_map = 18'o777770;\n\n    default : $display (\"ERROR: Invalid Port Configuration.\");\n\n  endcase\n\n  \n  for (i = 0; i < 6; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n\n  \n  for (i = 0; i < 6; i = i + 1) begin\n    if (i < num_ports) begin\n      mig_port_num = mig_arb_slot[3*(num_ports-i-1) +: 3];\n      convert_arb_slot[3*i +: 3] = port_map[3*mig_port_num +: 3];\n    end else begin\n      convert_arb_slot[3*i +: 3] = 3'b111;\n    end\n  end\nend\nendfunction",
        "function [17:0] rr (\n  input [5:0] port_enable,\n  input integer port_config,\n  input integer slot_num\n);\nbegin : func_rr\n  integer i;\n  integer max_ports;\n  integer num_ports;\n  integer port_cnt;\n\n  case (port_config)\n    1: max_ports = 6;\n    2: max_ports = 4;\n    3: max_ports = 3;\n    4: max_ports = 2;\n    5: max_ports = 1;\n\n    default : $display(\"ERROR: Port Config can't be %d\", port_config);\n\n  endcase\n\n  num_ports = 0;\n  for (i = 0; i < max_ports; i = i + 1) begin\n    if (port_enable[i] == 1'b1) begin\n      num_ports = num_ports + 1;\n    end\n  end\n\n  rr = 18'o000000;\n  port_cnt = 0;\n\n  for (i = (num_ports-1); i >= 0; i = i - 1) begin\n    while (port_enable[port_cnt] != 1'b1) begin\n      port_cnt = port_cnt + 1;\n    end\n    rr[i*3 +: 3] = port_cnt[2:0];\n    port_cnt = port_cnt +1;\n  end\n\n\n  rr = blso(rr, slot_num, num_ports);\nend\nendfunction",
        "function [17:0] blso (\n  input [17:0] a,\n  input integer shift,\n  input integer width\n);\nbegin : func_blso\n  integer i;\n  integer w;\n  integer s;\n  w = width*3;\n  s = (shift*3) % w;\n  blso = 18'o000000;\n  for (i = 0; i < w; i = i + 1) begin\n    blso[i] = a[(i+w-s)%w];\n    \n  end\nend\nendfunction"
    ]
}