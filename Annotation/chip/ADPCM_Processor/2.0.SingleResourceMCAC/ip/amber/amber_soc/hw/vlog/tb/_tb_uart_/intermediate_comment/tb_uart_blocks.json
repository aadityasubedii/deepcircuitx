{
    "line_num": [
        [
            244,
            290
        ],
        [
            221,
            241
        ],
        [
            211,
            218
        ],
        [
            208,
            208
        ],
        [
            202,
            207
        ],
        [
            197,
            197
        ],
        [
            196,
            196
        ],
        [
            195,
            195
        ],
        [
            193,
            193
        ],
        [
            192,
            192
        ],
        [
            190,
            190
        ],
        [
            188,
            188
        ],
        [
            187,
            187
        ],
        [
            134,
            179
        ],
        [
            132,
            132
        ],
        [
            131,
            131
        ],
        [
            120,
            129
        ],
        [
            108,
            114
        ],
        [
            102,
            106
        ]
    ],
    "blocks": [
        "always @( posedge clk_uart or negedge clk_uart_rst_n )\n    if ( ~clk_uart_rst_n )\n        begin\n        tx_state            <= 'd0;\n        tx_bit              <= 'd0;\n        tx_byte             <= 'd0;\n        o_uart_txd          <= 1'd1;\n        txfifo_rp           <= 'd0;\n        end\n    else                    \n        begin\n        if ( tx_bit_start )\n            begin\n            case ( tx_state ) \n        \n                \n                2'd0: if ( tx_start && !txfifo_empty && !i_uart_cts_n )\n                        begin\n                        tx_state    <= 2'd1;\n                        tx_byte     <= tx_fifo[txfifo_rp[3:0]];\n                        txfifo_rp   <= txfifo_rp + 1'd1;\n                        \n                        o_uart_txd  <= 1'd0;\n                        end\n                        \n                \n                2'd1: if ( !i_uart_cts_n )   \n                        begin\n                        if ( tx_bit == 3'd7 )\n                            tx_state <= 2'd2;\n                        tx_bit      <= tx_bit + 1'd1;\n                        tx_byte     <= {1'd0, tx_byte[7:1]};\n                        \n                        o_uart_txd  <= tx_byte[0];\n                        end\n                        \n                \n                2'd2:   begin\n                        tx_state    <= 2'd0;\n                        o_uart_txd  <= 1'd1;\n                        end\n            endcase\n            end    \n        end\n\n\nendmodule",
        "always @( posedge clk_uart or negedge clk_uart_rst_n )\n    if ( ~clk_uart_rst_n )\n        begin\n        txfifo_wp               <=    'd0;\n        end\n    else if ( !loopback && tx_push_toggle && !txfifo_full )\n        begin\n        tx_fifo[txfifo_wp[3:0]] <=    txd;\n        txfifo_wp               <=    txfifo_wp + 1'd1;\n        end\n    else if ( !loopback && tx_push_toggle && txfifo_full )\n        begin\n        `TB_WARNING_MESSAGE\n        $display(\"TB UART FIFO overflow\");\n        end\n    \n    else if ( loopback && rx_state == 2'd2 && rx_bit_start )\n        begin\n        tx_fifo[txfifo_wp[3:0]] <=    rx_byte;\n        txfifo_wp               <=    txfifo_wp + 1'd1;\n        end",
        "always @( posedge clk_uart or negedge clk_uart_rst_n )\n    if ( ~clk_uart_rst_n )\n        tx_bit_count <= 'd0;\n    else if ( tx_bit_count == 4'd9 )                \n        tx_bit_count <= 'd0;\n    else\n        tx_bit_count <= tx_bit_count + 1'd1;\n",
        "assign tx_push_toggle =  tx_push ^ tx_push_r; ",
        "always @( posedge clk_uart or negedge clk_uart_rst_n )\n    if ( ~clk_uart_rst_n )\n        tx_push_r <= 'd0;\n    else\n        tx_push_r <= tx_push;\n        ",
        "assign txfifo_full  = txfifo_wp == {~txfifo_rp[4], txfifo_rp[3:0]};",
        "assign txfifo_empty = txfifo_wp == txfifo_rp;",
        "assign tx_bit_start = tx_bit_count == 4'd0;      ",
        "assign txd          = `U_TEST_MODULE.tb_uart_txd_reg;",
        "assign tx_push      = `U_TEST_MODULE.tb_uart_push;",
        "always @* `U_TEST_MODULE.tb_uart_status_reg[1:0] = {txfifo_full, txfifo_empty};",
        "assign loopback     = `U_TEST_MODULE.tb_uart_control_reg[1];",
        "assign tx_start     = `U_TEST_MODULE.tb_uart_control_reg[0];",
        "always @( posedge clk_uart or negedge clk_uart_rst_n )\n    if ( ~clk_uart_rst_n )\n        begin\n        rx_state            <= 'd0;\n        rx_bit              <= 'd0;\n        rx_byte             <= 'd0;\n        rx_tap              <= 'd0;\n        rx_start_negedge_d1 <= 'd0;\n        end\n    else                    \n        begin\n        rx_tap <= { rx_tap[2:0], i_uart_rxd };\n        rx_start_negedge_d1 <= rx_start_negedge;\n        \n        if ( rx_bit_start )\n            begin\n            case ( rx_state ) \n        \n                \n                \n                \n                2'd0: if ( rx_start_negedge_d1 )\n                        rx_state <= 2'd1;\n                \n                \n                2'd1: if ( rx_bit == 3'd7 )\n                        rx_state <= 2'd2;\n                        \n                \n                2'd2: rx_state <= 2'd0;\n                        \n            endcase\n        \n            if ( rx_state == 2'd1 )\n                begin\n                rx_bit  <= rx_bit + 1'd1;\n                \n                rx_byte <= {i_uart_rxd, rx_byte[7:1]};\n                end\n                \n            \n            \n            if ( rx_state == 2'd2 && rx_byte != 8'h0d && rx_byte != 8'h0c )\n                $write(\"%c\", rx_byte);\n            end    \n        end",
        "assign rx_start_negedge = rx_tap[3] && !rx_tap[2] && rx_state == 2'd0;",
        "assign rx_bit_start     = rx_bit_count == 4'd0;      ",
        "always @( posedge clk_uart or negedge clk_uart_rst_n )\n    if ( ~clk_uart_rst_n )\n        rx_bit_count <= 'd0;\n    else if ( rx_bit_count == 4'd9 )                \n        rx_bit_count <= 'd0;\n    \n    else if ( rx_start_negedge )                \n        rx_bit_count <= 'd0;\n    else\n        rx_bit_count <= rx_bit_count + 1'd1;",
        "initial\n    begin\n    \n    clk_uart_rst_n  = 1'd0;\n    \n    #(UART_BIT_PERIOD*1000) clk_uart_rst_n  = 1'd1;\n    end",
        "initial\n    begin\n    clk_uart        = 1'd0;\n    forever #(UART_BIT_PERIOD*100/2) clk_uart = ~clk_uart;\n    end"
    ]
}