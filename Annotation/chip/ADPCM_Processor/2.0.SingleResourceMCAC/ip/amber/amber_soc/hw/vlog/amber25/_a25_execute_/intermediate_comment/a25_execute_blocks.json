{
    "line_num": [
        [
            668,
            692
        ],
        [
            625,
            659
        ],
        [
            604,
            619
        ],
        [
            586,
            586
        ],
        [
            572,
            572
        ],
        [
            566,
            566
        ],
        [
            542,
            564
        ],
        [
            533,
            539
        ],
        [
            523,
            531
        ],
        [
            521,
            521
        ],
        [
            512,
            515
        ],
        [
            506,
            506
        ],
        [
            503,
            503
        ],
        [
            496,
            501
        ]
    ],
    "blocks": [
        "wire    [(2*8)-1:0]    xCONDITION;\nwire    [(4*8)-1:0]    xMODE;\n\nassign  xCONDITION           = i_condition == EQ ? \"EQ\"  :\n                               i_condition == NE ? \"NE\"  :\n                               i_condition == CS ? \"CS\"  :\n                               i_condition == CC ? \"CC\"  :\n                               i_condition == MI ? \"MI\"  :\n                               i_condition == PL ? \"PL\"  :\n                               i_condition == VS ? \"VS\"  :\n                               i_condition == VC ? \"VC\"  :\n                               i_condition == HI ? \"HI\"  :\n                               i_condition == LS ? \"LS\"  :\n                               i_condition == GE ? \"GE\"  :\n                               i_condition == LT ? \"LT\"  :\n                               i_condition == GT ? \"GT\"  :\n                               i_condition == LE ? \"LE\"  :\n                               i_condition == AL ? \"AL\"  :\n                                                   \"NV \" ;\n\nassign  xMODE  =  status_bits_mode == SVC  ? \"SVC\"  :\n                  status_bits_mode == IRQ  ? \"IRQ\"  :\n                  status_bits_mode == FIRQ ? \"FIRQ\" :\n                  status_bits_mode == USR  ? \"USR\"  :\n                                             \"XXX\"  ;",
        "a25_register_bank u_register_bank(\n    .i_clk                   ( i_clk                     ),\n    .i_core_stall            ( i_core_stall              ),\n    .i_mem_stall             ( i_mem_stall               ),\n    .i_rm_sel                ( i_rm_sel                  ),\n    .i_rs_sel                ( i_rs_sel                  ),\n    .i_rn_sel                ( i_rn_sel                  ),\n    .i_pc_wen                ( pc_wen                    ),\n    .i_reg_bank_wen          ( reg_bank_wen              ),\n    .i_pc                    ( pc_nxt[25:2]              ),\n    .i_reg                   ( reg_write_nxt             ),\n    .i_mode_idec             ( i_status_bits_mode        ),\n    .i_mode_exec             ( status_bits_mode          ),\n\n    .i_wb_read_data          ( read_data_filtered        ),\n    .i_wb_read_data_valid    ( i_wb_read_data_valid      ),\n    .i_wb_read_data_rd       ( i_wb_load_rd[3:0]         ),\n    .i_wb_mode               ( i_wb_load_rd[6:5]         ),\n\n    .i_status_bits_flags     ( status_bits_flags         ),\n    .i_status_bits_irq_mask  ( status_bits_irq_mask      ),\n    .i_status_bits_firq_mask ( status_bits_firq_mask     ),\n\n    \n    .i_firq_not_user_mode    ( i_firq_not_user_mode      ),\n\n    \n    .i_mode_rds_exec         ( status_bits_mode_rds_oh   ),\n\n    .o_rm                    ( reg_bank_rm               ),\n    .o_rs                    ( reg_bank_rs               ),\n    .o_rd                    ( reg_bank_rd               ),\n    .o_rn                    ( reg_bank_rn               ),\n    .o_pc                    ( pc                        )\n);",
        "\n\n\n\n\na25_multiply u_multiply (\n    .i_clk          ( i_clk                 ),\n    .i_core_stall   ( i_core_stall          ),\n    .i_a_in         ( rs                    ),\n    .i_b_in         ( rm                    ),\n    .i_function     ( i_multiply_function   ),\n    .i_execute      ( execute               ),\n    .o_out          ( multiply_out          ),\n    .o_flags        ( multiply_flags        ),  \n    .o_done         ( o_multiply_done       )\n);",
        "",
        "assign carry_in = i_use_carry_in ? status_bits_flags[1] : 1'd0;",
        "assign o_iaddress = iaddress_r;",
        "always @( posedge i_clk )\n    begin\n    o_daddress              <= daddress_update                ? o_daddress_nxt               : o_daddress;\n    o_daddress_valid        <= daddress_update                ? daddress_valid_nxt           : o_daddress_valid;\n    o_exec_load_rd          <= exec_load_rd_update            ? exec_load_rd_nxt             : o_exec_load_rd;\n    o_priviledged           <= priviledged_update             ? priviledged_nxt              : o_priviledged;\n    o_exclusive             <= exclusive_update               ? i_decode_exclusive           : o_exclusive;\n    o_write_enable          <= write_enable_update            ? write_enable_nxt             : o_write_enable;\n    o_write_data            <= write_data_update              ? write_data_nxt               : o_write_data;\n    o_byte_enable           <= byte_enable_update             ? byte_enable_nxt              : o_byte_enable;\n    iaddress_r              <= iaddress_update                ? o_iaddress_nxt               : iaddress_r;\n    o_iaddress_valid        <= iaddress_update                ? iaddress_valid_nxt           : o_iaddress_valid;\n    o_adex                  <= iaddress_update                ? adex_nxt                     : o_adex;\n    o_copro_write_data      <= copro_write_data_update        ? write_data_nxt               : o_copro_write_data;\n\n    base_address            <= base_address_update            ? rn                           : base_address;\n\n    status_bits_flags       <= status_bits_flags_update       ? status_bits_flags_nxt        : status_bits_flags;\n    status_bits_mode        <= status_bits_mode_update        ? status_bits_mode_nxt         : status_bits_mode;\n    status_bits_mode_rds_oh <= status_bits_mode_rds_oh_update ? status_bits_mode_rds_oh_nxt  : status_bits_mode_rds_oh;\n    status_bits_irq_mask    <= status_bits_irq_mask_update    ? status_bits_irq_mask_nxt     : status_bits_irq_mask;\n    status_bits_firq_mask   <= status_bits_firq_mask_update   ? status_bits_firq_mask_nxt    : status_bits_firq_mask;\n    end",
        "\nassign base_address_update             = !i_core_stall && execute && i_base_address_wen;\nassign status_bits_flags_update        = ldm_flags       || (!i_core_stall && execute && i_status_bits_flags_wen);\nassign status_bits_mode_update         = ldm_status_bits || (!i_core_stall && execute && i_status_bits_mode_wen);\nassign status_bits_mode_rds_oh_update  = !i_core_stall;\nassign status_bits_irq_mask_update     = ldm_status_bits || (!i_core_stall && execute && i_status_bits_irq_mask_wen);\nassign status_bits_firq_mask_update    = ldm_status_bits || (!i_core_stall && execute && i_status_bits_firq_mask_wen);",
        "assign daddress_update                 = !i_core_stall;\nassign exec_load_rd_update             = !i_core_stall && execute;\nassign priviledged_update              = !i_core_stall;\nassign exclusive_update                = !i_core_stall && execute;\nassign write_enable_update             = !i_core_stall;\nassign write_data_update               = !i_core_stall && execute && i_write_data_wen;\nassign byte_enable_update              = !i_core_stall && execute && i_write_data_wen;\n\nassign iaddress_update                 = pc_dmem_wen || (!i_core_stall && !i_conflict);",
        "assign o_exec_stall                    = barrel_shift_stall;",
        "\nassign  exec_load_rd_nxt   = { i_decode_load_rd[7:6],\n                               i_decode_load_rd[5] ? USR : status_bits_mode,  \n                               i_decode_load_rd[4:0] };",
        "assign load_rd_c            = i_wb_read_data_valid ? {i_wb_load_rd[6:5], i_wb_load_rd[3:0]}  : load_rd_r;",
        "assign read_data_filtered_c = i_wb_read_data_valid ? read_data_filtered : read_data_filtered_r;",
        "always@( posedge i_clk )\n    if ( i_wb_read_data_valid )\n        begin\n        read_data_filtered_r <= read_data_filtered;\n        load_rd_r            <= {i_wb_load_rd[6:5], i_wb_load_rd[3:0]};\n        end"
    ]
}