{
    "line_num": [
        [
            879,
            902
        ],
        [
            862,
            876
        ],
        [
            852,
            859
        ],
        [
            839,
            849
        ],
        [
            825,
            836
        ],
        [
            793,
            822
        ],
        [
            762,
            784
        ],
        [
            746,
            759
        ],
        [
            732,
            743
        ],
        [
            713,
            729
        ],
        [
            693,
            710
        ],
        [
            646,
            690
        ],
        [
            600,
            643
        ],
        [
            588,
            597
        ],
        [
            571,
            585
        ],
        [
            555,
            568
        ],
        [
            543,
            552
        ],
        [
            524,
            539
        ],
        [
            511,
            521
        ],
        [
            487,
            508
        ],
        [
            466,
            479
        ],
        [
            446,
            463
        ],
        [
            419,
            437
        ],
        [
            385,
            414
        ],
        [
            256,
            382
        ],
        [
            253,
            255
        ],
        [
            208,
            251
        ],
        [
            195,
            205
        ],
        [
            178,
            188
        ],
        [
            154,
            171
        ],
        [
            150,
            152
        ],
        [
            140,
            148
        ],
        [
            128,
            138
        ],
        [
            121,
            189
        ],
        [
            112,
            115
        ],
        [
            100,
            107
        ]
    ],
    "blocks": [
        "function more_to_come;\ninput [15:0] regs;\ninput [31:0] i;\nbegin\ncase (i)\n    15 : more_to_come = 1'd0;\n    14 : more_to_come =  regs[15]    ? 1'd1 : 1'd0;\n    13 : more_to_come = |regs[15:14] ? 1'd1 : 1'd0;\n    12 : more_to_come = |regs[15:13] ? 1'd1 : 1'd0;\n    11 : more_to_come = |regs[15:12] ? 1'd1 : 1'd0;\n    10 : more_to_come = |regs[15:11] ? 1'd1 : 1'd0;\n     9 : more_to_come = |regs[15:10] ? 1'd1 : 1'd0;\n     8 : more_to_come = |regs[15: 9] ? 1'd1 : 1'd0;\n     7 : more_to_come = |regs[15: 8] ? 1'd1 : 1'd0;\n     6 : more_to_come = |regs[15: 7] ? 1'd1 : 1'd0;\n     5 : more_to_come = |regs[15: 6] ? 1'd1 : 1'd0;\n     4 : more_to_come = |regs[15: 5] ? 1'd1 : 1'd0;\n     3 : more_to_come = |regs[15: 4] ? 1'd1 : 1'd0;\n     2 : more_to_come = |regs[15: 3] ? 1'd1 : 1'd0;\n     1 : more_to_come = |regs[15: 2] ? 1'd1 : 1'd0;\n     0 : more_to_come = |regs[15: 1] ? 1'd1 : 1'd0;\nendcase\nend\nendfunction",
        "function [3:0] numchars;\ninput [(5*8)-1:0] xINSTRUCTION_EXECUTE;\nbegin\n     if (xINSTRUCTION_EXECUTE[31:0] == \"    \")\n    numchars = 4'd1;\nelse if (xINSTRUCTION_EXECUTE[23:0] == \"   \")\n    numchars = 4'd2;\nelse if (xINSTRUCTION_EXECUTE[15:0] == \"  \")\n    numchars = 4'd3;\nelse if (xINSTRUCTION_EXECUTE[7:0]  == \" \")\n    numchars = 4'd4;\nelse    \n    numchars = 4'd5;\nend\nendfunction",
        "function [3:0] get_4bit_signal;\ninput [2:0] num;\nbegin\n    case (num)\n        3'd0: get_4bit_signal = `U_CACHE.i_byte_enable;\n    endcase\nend\nendfunction",
        "function get_1bit_signal;\ninput [2:0] num;\nbegin\n    case (num)\n        3'd0: get_1bit_signal = `U_FETCH.i_write_enable;\n        3'd1: get_1bit_signal = `U_AMBER.fetch_stall;\n        3'd2: get_1bit_signal = 1'd0;\n        3'd3: get_1bit_signal = `U_FETCH.i_data_access;\n    endcase\nend\nendfunction",
        "function [31:0] get_32bit_signal;\ninput [2:0] num;\nbegin\n    case (num)\n        3'd0: get_32bit_signal = `U_EXECUTE.pc_nxt;\n        3'd1: get_32bit_signal = `U_FETCH.i_address;\n        3'd2: get_32bit_signal = `U_FETCH.i_address;\n        3'd3: get_32bit_signal = `U_CACHE.i_write_data;\n        3'd4: get_32bit_signal = `U_DECODE.i_read_data;\n    endcase\nend\nendfunction",
        "function [31:0] get_reg_val;\ninput [4:0] regnum;\nbegin\n    case (regnum)\n        5'd0   : get_reg_val = `U_REGISTER_BANK.r0_out;\n        5'd1   : get_reg_val = `U_REGISTER_BANK.r1_out; \n        5'd2   : get_reg_val = `U_REGISTER_BANK.r2_out; \n        5'd3   : get_reg_val = `U_REGISTER_BANK.r3_out; \n        5'd4   : get_reg_val = `U_REGISTER_BANK.r4_out; \n        5'd5   : get_reg_val = `U_REGISTER_BANK.r5_out; \n        5'd6   : get_reg_val = `U_REGISTER_BANK.r6_out; \n        5'd7   : get_reg_val = `U_REGISTER_BANK.r7_out; \n        5'd8   : get_reg_val = `U_REGISTER_BANK.r8_out; \n        5'd9   : get_reg_val = `U_REGISTER_BANK.r9_out; \n        5'd10  : get_reg_val = `U_REGISTER_BANK.r10_out; \n        5'd11  : get_reg_val = `U_REGISTER_BANK.r11_out; \n        5'd12  : get_reg_val = `U_REGISTER_BANK.r12_out; \n        5'd13  : get_reg_val = `U_REGISTER_BANK.r13_out; \n        5'd14  : get_reg_val = `U_REGISTER_BANK.r14_out; \n        5'd15  : get_reg_val = `U_REGISTER_BANK.r15_out_rm; \n        \n        5'd16  : get_reg_val = `U_REGISTER_BANK.r14_svc;\n        5'd17  : get_reg_val = `U_REGISTER_BANK.r14_firq;\n        5'd18  : get_reg_val = `U_REGISTER_BANK.r14_irq;\n        5'd19  : get_reg_val = `U_REGISTER_BANK.r14_svc;\n        5'd20  : get_reg_val = `U_REGISTER_BANK.r14_svc;\n        5'd21  : get_reg_val = `U_REGISTER_BANK.r15_out_rn; \n    endcase\nend\nendfunction",
        "task fwrite_hex_drop_zeros;\ninput [31:0] file;\ninput [31:0] num;\n    begin\n    if (num[31:28] != 4'd0) \n        $fwrite(file, \"%x\", num);\n    else if (num[27:24] != 4'd0) \n        $fwrite(file, \"%x\", num[27:0]);\n    else if (num[23:20] != 4'd0) \n        $fwrite(file, \"%x\", num[23:0]);\n    else if (num[19:16] != 4'd0) \n        $fwrite(file, \"%x\", num[19:0]);\n    else if (num[15:12] != 4'd0) \n        $fwrite(file, \"%x\", num[15:0]);\n    else if (num[11:8] != 4'd0) \n        $fwrite(file, \"%x\", num[11:0]);\n    else if (num[7:4] != 4'd0) \n        $fwrite(file, \"%x\", num[7:0]);\n    else\n        $fwrite(file, \"%x\", num[3:0]);\n        \n    end\nendtask",
        "task warmreg;\ninput [3:0] regnum;\n    begin\n    if (regnum < 4'd12)\n        $fwrite(decompile_file,\"r%1d\", regnum);\n    else\n    case (regnum)\n        4'd12   : $fwrite(decompile_file,\"ip\");\n        4'd13   : $fwrite(decompile_file,\"sp\");\n        4'd14   : $fwrite(decompile_file,\"lr\");\n        4'd15   : $fwrite(decompile_file,\"pc\");\n    endcase\n    end\nendtask",
        "task wshiftreg;\n    begin\n    case(execute_instruction[6:5])\n        2'd0: $fwrite(decompile_file,\", lsl \");\n        2'd1: $fwrite(decompile_file,\", lsr \");\n        2'd2: $fwrite(decompile_file,\", asr \");\n        2'd3: $fwrite(decompile_file,\", ror \"); \n    endcase\n\n    warmreg(reg_s); \n    end\nendtask",
        "task wshift;\n    begin                                                                                                        \n    \n    if (execute_instruction[6:5] != LSL || shift_imm != 5'd0)                                                    \n        begin                                                                                                    \n        case(execute_instruction[6:5])                                                                           \n            2'd0: $fwrite(decompile_file,\", lsl\");                                                               \n            2'd1: $fwrite(decompile_file,\", lsr\");                                                               \n            2'd2: $fwrite(decompile_file,\", asr\");                                                               \n            2'd3: if (shift_imm == 5'd0) $fwrite(decompile_file,\", rrx\"); else $fwrite(decompile_file,\", ror\");  \n        endcase                                                                                                  \n\n       if (execute_instruction[6:5] != 2'd3 || shift_imm != 5'd0)                                                \n           $fwrite(decompile_file,\" #%1d\", shift_imm);                                                           \n       end                                                                                                       \n    end                                                                                                          \nendtask",
        "task mtrans_args;\n    begin\n    warmreg(reg_n);\n    if (execute_instruction[21]) $fwrite(decompile_file,\"!\");\n    $fwrite(decompile_file,\", {\");\n    for (i=0;i<16;i=i+1)\n        if (execute_instruction[i])  \n            begin \n            warmreg(i); \n            if (more_to_come(execute_instruction[15:0], i))\n                $fwrite(decompile_file,\", \"); \n            end\n    $fwrite(decompile_file,\"}\");\n    \n    if (execute_instruction[22:20] == 3'b100)  \n        $fwrite(decompile_file,\"^\");\n    end\nendtask",
        "task trans_args;\n    begin\n    warmreg(reg_d);   \n\n    casez ({execute_instruction[25:23], execute_instruction[21], no_shift, offset12==12'd0})\n           6'b0100?0 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", #-%1d]\" , offset12); end\n           6'b0110?0 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", #%1d]\"  , offset12); end\n           6'b0100?1 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"]\"); end\n           6'b0110?1 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"]\"); end\n           6'b0101?? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", #-%1d]!\", offset12); end\n           6'b0111?? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", #%1d]!\" , offset12); end\n\n           6'b0000?0 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], #-%1d\", offset12); end\n           6'b0010?0 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], #%1d\" , offset12); end\n           6'b0001?0 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], #-%1d\", offset12); end\n           6'b0011?0 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], #%1d\" , offset12); end\n     \n           6'b0000?1 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"]\"); end\n           6'b0010?1 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"]\"); end\n           6'b0001?1 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"]\"); end\n           6'b0011?1 : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"]\"); end\n\n           6'b11001? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", -\");  warmreg(reg_m); $fwrite(decompile_file,\"]\");  end\n           6'b11101? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", \");   warmreg(reg_m); $fwrite(decompile_file,\"]\");  end\n           6'b11011? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", -\");  warmreg(reg_m); $fwrite(decompile_file,\"]!\"); end\n           6'b11111? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", \");   warmreg(reg_m); $fwrite(decompile_file,\"]!\"); end\n\n           6'b10001? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], -\"); warmreg(reg_m);  end\n           6'b10101? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], \");  warmreg(reg_m);  end\n           6'b10011? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], -\"); warmreg(reg_m);  end\n           6'b10111? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], \");  warmreg(reg_m);  end\n\n           6'b11000? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", -\");  warmreg(reg_m); wshift; $fwrite(decompile_file,\"]\"); end\n           6'b11100? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", \");   warmreg(reg_m); wshift; $fwrite(decompile_file,\"]\"); end\n           6'b11010? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", -\");  warmreg(reg_m); wshift; $fwrite(decompile_file,\"]!\");end\n           6'b11110? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\", \");   warmreg(reg_m); wshift; $fwrite(decompile_file,\"]!\");end\n\n           6'b10000? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], -\"); warmreg(reg_m); wshift; end\n           6'b10100? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], \");  warmreg(reg_m); wshift; end\n           6'b10010? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], -\"); warmreg(reg_m); wshift; end\n           6'b10110? : begin $fwrite(decompile_file,\", [\"); warmreg(reg_n); $fwrite(decompile_file,\"], \");  warmreg(reg_m); wshift; end\n\n    endcase       \n    end\nendtask",
        "task regop_args;\n    begin\n    if (!opcode_compare)\n        warmreg(reg_d);\n        \n    if (!opcode_move )\n        begin\n        if (!opcode_compare)\n            begin\n            $fwrite(decompile_file,\", \");\n            if (reg_d < 4'd10 || reg_d > 4'd12) \n                $fwrite(decompile_file,\" \");\n            end\n        warmreg(reg_n);\n        $fwrite(decompile_file,\", \");\n        if (reg_n < 4'd10 || reg_n > 4'd12) \n            $fwrite(decompile_file,\" \");\n        end\n    else\n        begin\n        $fwrite(decompile_file,\", \");\n        if (reg_d < 4'd10 || reg_d > 4'd12) \n            $fwrite(decompile_file,\" \");\n        end    \n            \n    if (shift_op_imm)  \n        begin\n        if (|imm32[31:15])\n            $fwrite(decompile_file,\"#0x%08h\", imm32);\n        else\n            $fwrite(decompile_file,\"#%1d\", imm32);\n        end        \n    else \n        begin\n        warmreg(reg_m);\n        if (execute_instruction[4]) \n            \n            wshiftreg;\n        else \n            \n            wshift;\n        end       \n    end\nendtask",
        "task swap_args;\n    begin\n    warmreg(reg_d);\n    $fwrite(decompile_file,\", \");\n    warmreg(reg_m);\n    $fwrite(decompile_file,\", [\");\n    warmreg(reg_n); \n    $fwrite(decompile_file,\"]\");\n    end\nendtask",
        "task mult_args;\n    begin\n    warmreg(reg_n);  \n    $fwrite(decompile_file,\", \");\n    warmreg(reg_m);\n    $fwrite(decompile_file,\", \");\n    warmreg(reg_s); \n\n    if (execute_instruction[21]) \n        begin\n        $fwrite(decompile_file,\", \");\n        warmreg(reg_d); \n        end\n    end\nendtask",
        "task branch_args;\nreg [31:0] shift_amount;\n    begin\n    if (execute_instruction[23]) \n        shift_amount = {~execute_instruction[23:0] + 24'd1, 2'd0};\n    else\n        shift_amount = {execute_instruction[23:0], 2'd0};\n\n    if (execute_instruction[23]) \n        fwrite_hex_drop_zeros ( decompile_file, get_reg_val( 5'd21 ) - shift_amount );\n    else             \n        fwrite_hex_drop_zeros ( decompile_file, get_reg_val( 5'd21 ) + shift_amount );\n    end\nendtask",
        "task codtrans_args;\n    begin\n    \n    $fwrite(decompile_file,\"%1d, \", execute_instruction[11:8]);\n    \n    $fwrite(decompile_file,\"cr%1d, \", execute_instruction[15:12]);\n    \n    warmreg(reg_n); \n    end\nendtask",
        "task cortrans_args;\n    begin\n    \n    $fwrite(decompile_file,\"%1d, \", execute_instruction[11:8]);\n    \n    $fwrite(decompile_file,\"%1d, \", execute_instruction[23:21]);\n    \n    warmreg(reg_d); \n    \n    $fwrite(decompile_file,\", cr%1d\", execute_instruction[19:16]);\n    \n    $fwrite(decompile_file,\", cr%1d\", execute_instruction[3:0]);\n    \n    $fwrite(decompile_file,\", {%1d}\",   execute_instruction[7:5]);\n    end\nendtask",
        "task w_mtrans_type;\n    begin\n    case( mtrans_itype )\n        4'h0:    $fwrite(decompile_file,\"da\");\n        4'h1:    $fwrite(decompile_file,\"ia\");\n        4'h2:    $fwrite(decompile_file,\"db\");\n        4'h3:    $fwrite(decompile_file,\"ib\");\n        default: $fwrite(decompile_file,\"xx\");\n    endcase    \n    end\nendtask",
        "task wcond;\n    begin\n    case( condition)\n        4'h0:    $fwrite(decompile_file,\"eq\");\n        4'h1:    $fwrite(decompile_file,\"ne\");\n        4'h2:    $fwrite(decompile_file,\"cs\");\n        4'h3:    $fwrite(decompile_file,\"cc\");\n        4'h4:    $fwrite(decompile_file,\"mi\");\n        4'h5:    $fwrite(decompile_file,\"pl\");\n        4'h6:    $fwrite(decompile_file,\"vs\");\n        4'h7:    $fwrite(decompile_file,\"vc\");\n        4'h8:    $fwrite(decompile_file,\"hi\");\n        4'h9:    $fwrite(decompile_file,\"ls\"); \n        4'ha:    $fwrite(decompile_file,\"ge\"); \n        4'hb:    $fwrite(decompile_file,\"lt\");\n        4'hc:    $fwrite(decompile_file,\"gt\");\n        4'hd:    $fwrite(decompile_file,\"le\"); \n        4'he:    $fwrite(decompile_file,\"  \");  \n        default: $fwrite(decompile_file,\"nv\");  \n    endcase    \n    end\nendtask",
        "    else if (get_1bit_signal(3) && !get_1bit_signal(0)  && !get_1bit_signal(1))     \n        begin\n        \n        $fwrite(decompile_file, \"%09d              read    addr \", `U_TB.clk_count);\n        tmp_address = get_32bit_signal(2);\n        fwrite_hex_drop_zeros(decompile_file, {tmp_address[31:2], 2'd0} );    \n                     \n        $fwrite(decompile_file, \", data %08h\", get_32bit_signal(4));  \n                                      \n        if ( get_1bit_signal(2) ) \n            $fwrite(decompile_file, \" aborted!\\n\");\n        else                                 \n            $fwrite(decompile_file, \"\\n\");\n        end",
        "always @( posedge i_clk )\n    \n    if ( get_1bit_signal(0) && !get_1bit_signal(1) )\n        begin\n        \n        $fwrite(decompile_file, \"%09d              write   addr \", `U_TB.clk_count);\n        tmp_address = get_32bit_signal(2);\n        fwrite_hex_drop_zeros(decompile_file, {tmp_address [31:2], 2'd0} );\n                  \n        $fwrite(decompile_file, \", data %08h, be %h\", \n                get_32bit_signal(3),    \n                get_4bit_signal (0));   \n                                       \n        if ( get_1bit_signal(2) ) \n            $fwrite(decompile_file, \" aborted!\\n\");\n        else                                 \n            $fwrite(decompile_file, \"\\n\");\n        end",
        "always @( posedge i_clk )\n        if ( \n             i_pc_sel != 2'd0 && \n             i_pc_wen &&\n             !i_fetch_stall && \n             i_instruction_execute && \n             i_interrupt == 3'd0 &&\n             !execute_undefined &&\n             itype != SWI &&\n             execute_address != get_32bit_signal(0)  \n             )\n            begin\n            $fwrite(decompile_file,\"%09d              jump    from \", `U_TB.clk_count);\n            fwrite_hex_drop_zeros(decompile_file,  pcf(execute_address));\n            $fwrite(decompile_file,\" to \");\n            fwrite_hex_drop_zeros(decompile_file,  pcf(get_32bit_signal(0)) ); \n            $fwrite(decompile_file,\", r0 %08h, \",  get_reg_val ( 5'd0 ));\n            $fwrite(decompile_file,\"r1 %08h\\n\",    get_reg_val ( 5'd1 ));\n            end",
        "always @( posedge i_clk )\n    if ( !i_fetch_stall )\n        begin\n        interrupt_d1 <= i_interrupt;\n        \n        \n        if ( interrupt_d1 != 3'd0 && i_interrupt_state )\n            begin\n            $fwrite( decompile_file,\"%09d              interrupt \", `U_TB.clk_count );\n            case ( interrupt_d1 )\n                3'd1:    $fwrite( decompile_file,\"data abort\" );\n                3'd2:    $fwrite( decompile_file,\"firq\" );\n                3'd3:    $fwrite( decompile_file,\"irq\" );\n                3'd4:    $fwrite( decompile_file,\"address exception\" );\n                3'd5:    $fwrite( decompile_file,\"instruction abort\" );\n                default: $fwrite( decompile_file,\"unknown itype\" );\n            endcase\n            $fwrite( decompile_file,\", return addr \" );\n            \n            case ( interrupt_d1 )\n                3'd1:    $fwrite(decompile_file,\"%08h\\n\",  pcf(get_reg_val(5'd16)));\n                3'd2:    $fwrite(decompile_file,\"%08h\\n\",  pcf(get_reg_val(5'd17)));\n                3'd3:    $fwrite(decompile_file,\"%08h\\n\",  pcf(get_reg_val(5'd18)));\n                3'd4:    $fwrite(decompile_file,\"%08h\\n\",  pcf(get_reg_val(5'd19)));\n                3'd5:    $fwrite(decompile_file,\"%08h\\n\",  pcf(get_reg_val(5'd19)));\n                3'd7:    $fwrite(decompile_file,\"%08h\\n\",  pcf(get_reg_val(5'd20)));\n                default: ;\n            endcase\n            end\n        end",
        "always @( posedge i_clk )\n    if ( execute_now )\n        begin\n        \n            \n        if ( interrupt_d1 == 3'd0 || interrupt_d1 == 3'd7 )\n            begin\n            $fwrite(decompile_file,\"%09d  \", `U_TB.clk_count);\n            \n            \n            if      ( execute_address < 32'h10)        $fwrite(decompile_file,\"       %01x:  \", {execute_address[ 3:1], 1'd0});\n            else if ( execute_address < 32'h100)       $fwrite(decompile_file,\"      %02x:  \",  {execute_address[ 7:1], 1'd0}); \n            else if ( execute_address < 32'h1000)      $fwrite(decompile_file,\"     %03x:  \",   {execute_address[11:1], 1'd0}); \n            else if ( execute_address < 32'h10000)     $fwrite(decompile_file,\"    %04x:  \",    {execute_address[15:1], 1'd0});\n            else if ( execute_address < 32'h100000)    $fwrite(decompile_file,\"   %05x:  \",     {execute_address[19:1], 1'd0});\n            else if ( execute_address < 32'h1000000)   $fwrite(decompile_file,\"  %06x:  \",      {execute_address[23:1], 1'd0});\n            else if ( execute_address < 32'h10000000)  $fwrite(decompile_file,\" %07x:  \",       {execute_address[27:1], 1'd0});\n            else                                       $fwrite(decompile_file,\"%8x:  \",         {execute_address[31:1], 1'd0});\n            \n            \n            \n            if (!i_instruction_execute)\n                begin\n                $fwrite(decompile_file,\"-\");\n                if ( itype == SWI )\n                    $display (\"Cycle %09d  SWI not taken *************\", `U_TB.clk_count);\n                end\n            else     \n                $fwrite(decompile_file,\" \");\n                \n            \n            \n            \n            case (numchars( xINSTRUCTION_EXECUTE ))\n                4'd1: $fwrite(decompile_file,\"%s\", xINSTRUCTION_EXECUTE[39:32] );\n                4'd2: $fwrite(decompile_file,\"%s\", xINSTRUCTION_EXECUTE[39:24] );\n                4'd3: $fwrite(decompile_file,\"%s\", xINSTRUCTION_EXECUTE[39:16] );\n                4'd4: $fwrite(decompile_file,\"%s\", xINSTRUCTION_EXECUTE[39: 8] );\n            default:  $fwrite(decompile_file,\"%s\", xINSTRUCTION_EXECUTE[39: 0] );\n            endcase\n\n            fchars = 8 - numchars(xINSTRUCTION_EXECUTE);\n        \n            \n            if (itype   == MTRANS )\n                begin\n                w_mtrans_type;           \n                fchars = fchars - 2;\n                end\n\n            \n           if ( ((itype == REGOP && !opcode_compare) || itype == MULT ) && s_bit == 1'b1 )\n                begin\n                $fwrite(decompile_file,\"s\");\n                fchars = fchars - 1;\n                end\n\n            \n           if ( itype == REGOP && opcode_compare && s_bit == 1'b1 && reg_d == 4'd15 )\n                begin\n                $fwrite(decompile_file,\"p\");\n                fchars = fchars - 1;\n                end\n\n            \n            if ( condition != AL )\n                begin\n                wcond;\n                fchars = fchars - 2;\n                end\n                            \n            \n            case ( fchars )\n                4'd0: $fwrite(decompile_file,\"\");\n                4'd1: $fwrite(decompile_file,\" \");\n                4'd2: $fwrite(decompile_file,\"  \");\n                4'd3: $fwrite(decompile_file,\"   \");\n                4'd4: $fwrite(decompile_file,\"    \");\n                4'd5: $fwrite(decompile_file,\"     \");\n                4'd6: $fwrite(decompile_file,\"      \");\n                4'd7: $fwrite(decompile_file,\"       \");\n                4'd8: $fwrite(decompile_file,\"        \");\n            default:  $fwrite(decompile_file,\"         \");\n            endcase\n        \n            \n            \n            \n            case ( itype )\n                REGOP:     regop_args;\n                TRANS:     trans_args;\n                MTRANS:    mtrans_args;\n                BRANCH:    branch_args;\n                MULT:      mult_args;\n                SWAP:      swap_args;\n                CODTRANS:  codtrans_args; \n                COREGOP:   begin \n                           \n                           $write(\"Coregop not implemented in decompiler yet\\n\"); \n                           end\n                CORTRANS:  cortrans_args; \n                SWI:       $fwrite(decompile_file,\"#0x%06h\", execute_instruction[23:0]);\n                default: begin\n                         `TB_ERROR_MESSAGE\n                         $write(\"Unknown Instruction Type ERROR\\n\");\n                         end                     \n            endcase\n            \n            $fwrite( decompile_file,\"\\n\" );\n            end\n\n        \n        if ( i_instruction_execute && execute_undefined )\n            begin\n            $fwrite( decompile_file,\"%09d              interrupt undefined instruction\", `U_TB.clk_count );\n            $fwrite( decompile_file,\", return addr \" );\n            $fwrite( decompile_file,\"%08x\\n\",  pcf(get_reg_val(5'd21)-4'd4) );\n            end\n            \n        \n        if ( i_instruction_execute && itype == SWI )    \n            begin\n            $fwrite( decompile_file,\"%09d              interrupt swi\", `U_TB.clk_count );\n            $fwrite( decompile_file,\", return addr \" );\n            $fwrite( decompile_file,\"%08x\\n\",  pcf(get_reg_val(5'd21)-4'd4) );\n            end\n        end",
        "always @ ( posedge i_clk )\n    xINSTRUCTION_EXECUTE_R <= xINSTRUCTION_EXECUTE;\n",
        "always @*\n    begin\n    \n    if ( !execute_now ) \n        begin \n        xINSTRUCTION_EXECUTE =  xINSTRUCTION_EXECUTE_R; \n        end \n\n    else if ( itype == REGOP    && opcode == ADC                                                          ) xINSTRUCTION_EXECUTE = \"adc  \";\n    else if ( itype == REGOP    && opcode == ADD                                                          ) xINSTRUCTION_EXECUTE = \"add  \";\n    else if ( itype == REGOP    && opcode == AND                                                          ) xINSTRUCTION_EXECUTE = \"and  \";\n    else if ( itype == BRANCH   && execute_instruction[24] == 1'b0                                        ) xINSTRUCTION_EXECUTE = \"b    \";\n    else if ( itype == REGOP    && opcode == BIC                                                          ) xINSTRUCTION_EXECUTE = \"bic  \";\n    else if ( itype == BRANCH   && execute_instruction[24] == 1'b1                                        ) xINSTRUCTION_EXECUTE = \"bl   \";\n    else if ( itype == COREGOP                                                                            ) xINSTRUCTION_EXECUTE = \"cdp  \";\n    else if ( itype == REGOP    && opcode == CMN                                                          ) xINSTRUCTION_EXECUTE = \"cmn  \";\n    else if ( itype == REGOP    && opcode == CMP                                                          ) xINSTRUCTION_EXECUTE = \"cmp  \";\n    else if ( itype == REGOP    && opcode == EOR                                                          ) xINSTRUCTION_EXECUTE = \"eor  \";\n    else if ( itype == CODTRANS && execute_instruction[20] == 1'b1                                        ) xINSTRUCTION_EXECUTE = \"ldc  \";\n    else if ( itype == MTRANS   && execute_instruction[20] == 1'b1                                        ) xINSTRUCTION_EXECUTE = \"ldm  \";\n    else if ( itype == TRANS    && {execute_instruction[22],execute_instruction[20]}    == {1'b0, 1'b1}   ) xINSTRUCTION_EXECUTE = \"ldr  \";\n    else if ( itype == TRANS    && {execute_instruction[22],execute_instruction[20]}    == {1'b1, 1'b1}   ) xINSTRUCTION_EXECUTE = \"ldrb \";\n    else if ( itype == CORTRANS && execute_instruction[20] == 1'b0                                        ) xINSTRUCTION_EXECUTE = \"mcr  \";\n    else if ( itype == MULT     && execute_instruction[21] == 1'b1                                        ) xINSTRUCTION_EXECUTE = \"mla  \";\n    else if ( itype == REGOP    && opcode == MOV                                                          ) xINSTRUCTION_EXECUTE = \"mov  \";\n    else if ( itype == CORTRANS && execute_instruction[20] == 1'b1                                        ) xINSTRUCTION_EXECUTE = \"mrc  \";\n    else if ( itype == MULT     && execute_instruction[21] == 1'b0                                        ) xINSTRUCTION_EXECUTE = \"mul  \";\n    else if ( itype == REGOP    && opcode == MVN                                                          ) xINSTRUCTION_EXECUTE = \"mvn  \";\n    else if ( itype == REGOP    && opcode == ORR                                                          ) xINSTRUCTION_EXECUTE = \"orr  \";\n    else if ( itype == REGOP    && opcode == RSB                                                          ) xINSTRUCTION_EXECUTE = \"rsb  \";\n    else if ( itype == REGOP    && opcode == RSC                                                          ) xINSTRUCTION_EXECUTE = \"rsc  \";\n    else if ( itype == REGOP    && opcode == SBC                                                          ) xINSTRUCTION_EXECUTE = \"sbc  \";\n    else if ( itype == CODTRANS && execute_instruction[20] == 1'b0                                        ) xINSTRUCTION_EXECUTE = \"stc  \";\n    else if ( itype == MTRANS   && execute_instruction[20] == 1'b0                                        ) xINSTRUCTION_EXECUTE = \"stm  \";\n    else if ( itype == TRANS    && {execute_instruction[22],execute_instruction[20]}    == {1'b0, 1'b0}   ) xINSTRUCTION_EXECUTE = \"str  \";\n    else if ( itype == TRANS    && {execute_instruction[22],execute_instruction[20]}    == {1'b1, 1'b0}   ) xINSTRUCTION_EXECUTE = \"strb \";\n    else if ( itype == REGOP    && opcode == SUB                                                          ) xINSTRUCTION_EXECUTE = \"sub  \";  \n    else if ( itype == SWI                                                                                ) xINSTRUCTION_EXECUTE = \"swi  \";  \n    else if ( itype == SWAP     && execute_instruction[22] == 1'b0                                        ) xINSTRUCTION_EXECUTE = \"swp  \";  \n    else if ( itype == SWAP     && execute_instruction[22] == 1'b1                                        ) xINSTRUCTION_EXECUTE = \"swpb \";  \n    else if ( itype == REGOP    && opcode == TEQ                                                          ) xINSTRUCTION_EXECUTE = \"teq  \";  \n    else if ( itype == REGOP    && opcode == TST                                                          ) xINSTRUCTION_EXECUTE = \"tst  \";  \n    else                                                                                                   xINSTRUCTION_EXECUTE = \"unkow\";  \n    end",
        "assign TYPE_NAME    = itype == REGOP    ? \"REGOP   \" :\n                      itype == MULT     ? \"MULT    \" :\n                      itype == SWAP     ? \"SWAP    \" :\n                      itype == TRANS    ? \"TRANS   \" : \n                      itype == MTRANS   ? \"MTRANS  \" : \n                      itype == BRANCH   ? \"BRANCH  \" : \n                      itype == CODTRANS ? \"CODTRANS\" : \n                      itype == COREGOP  ? \"COREGOP \" : \n                      itype == CORTRANS ? \"CORTRANS\" : \n                      itype == SWI      ? \"SWI     \" : \n                                         \"UNKNOWN \" ;",
        "assign itype = \n    {execute_instruction[27:23], execute_instruction[21:20], execute_instruction[11:4] } == { 5'b00010, 2'b00, 8'b00001001 } ? SWAP     :  \n    {execute_instruction[27:22], execute_instruction[7:4]                              } == { 6'b000000, 4'b1001           } ? MULT     :  \n    {execute_instruction[27:26]                                                        } == { 2'b00                        } ? REGOP    :    \n    {execute_instruction[27:26]                                                        } == { 2'b01                        } ? TRANS    :\n    {execute_instruction[27:25]                                                        } == { 3'b100                       } ? MTRANS   :\n    {execute_instruction[27:25]                                                        } == { 3'b101                       } ? BRANCH   :\n    {execute_instruction[27:25]                                                        } == { 3'b110                       } ? CODTRANS :\n    {execute_instruction[27:24], execute_instruction[4]                                } == { 4'b1110, 1'b0                } ? COREGOP  :\n    {execute_instruction[27:24], execute_instruction[4]                                } == { 4'b1110, 1'b1                } ? CORTRANS :\n                                                                                                                               SWI      ;",
        "assign shift_op_imm = itype == REGOP && execute_instruction[25] == 1'd1;\n\nassign imm32 =  execute_instruction[11:8] == 4'h0 ? {            24'h0, imm8[7:0] } :\n                execute_instruction[11:8] == 4'h1 ? { imm8[1:0], 24'h0, imm8[7:2] } :\n                execute_instruction[11:8] == 4'h2 ? { imm8[3:0], 24'h0, imm8[7:4] } :\n                execute_instruction[11:8] == 4'h3 ? { imm8[5:0], 24'h0, imm8[7:6] } :\n                execute_instruction[11:8] == 4'h4 ? { imm8[7:0], 24'h0            } :\n                execute_instruction[11:8] == 4'h5 ? { 2'h0,  imm8[7:0], 22'h0 }     :\n                execute_instruction[11:8] == 4'h6 ? { 4'h0,  imm8[7:0], 20'h0 }     :\n                execute_instruction[11:8] == 4'h7 ? { 6'h0,  imm8[7:0], 18'h0 }     :\n                execute_instruction[11:8] == 4'h8 ? { 8'h0,  imm8[7:0], 16'h0 }     :\n                execute_instruction[11:8] == 4'h9 ? { 10'h0, imm8[7:0], 14'h0 }     :\n                execute_instruction[11:8] == 4'ha ? { 12'h0, imm8[7:0], 12'h0 }     :\n                execute_instruction[11:8] == 4'hb ? { 14'h0, imm8[7:0], 10'h0 }     :\n                execute_instruction[11:8] == 4'hc ? { 16'h0, imm8[7:0], 8'h0  }     :\n                execute_instruction[11:8] == 4'hd ? { 18'h0, imm8[7:0], 6'h0  }     :\n                execute_instruction[11:8] == 4'he ? { 20'h0, imm8[7:0], 4'h0  }     :\n                                                    { 22'h0, imm8[7:0], 2'h0  }     ;",
        "assign opcode_move =\n            opcode == MOV || \n            opcode == MVN ;",
        "assign no_shift    = execute_instruction[11:4] == 8'h0;\nassign mtrans_itype = execute_instruction[24:23];\n\n\nassign opcode_compare =\n            opcode == CMP || \n            opcode == CMN || \n            opcode == TEQ || \n            opcode == TST ;",
        "assign opcode      = execute_instruction[24:21];\nassign condition   = execute_instruction[31:28];\nassign s_bit       = execute_instruction[20];\nassign reg_n       = execute_instruction[19:16];\nassign reg_d       = execute_instruction[15:12];\nassign reg_m       = execute_instruction[3:0];\nassign reg_s       = execute_instruction[11:8];\nassign shift_imm   = execute_instruction[11:7];\nassign offset12    = execute_instruction[11:0];\nassign offset8     = {execute_instruction[11:8], execute_instruction[3:0]};\nassign imm8        = execute_instruction[7:0];",
        "initial \n    #1 decompile_file = $fopen(`A23_DECOMPILE_FILE, \"w\");\n\n\n\n\n\nassign opcode      = execute_instruction[24:21];\nassign condition   = execute_instruction[31:28];\nassign s_bit       = execute_instruction[20];\nassign reg_n       = execute_instruction[19:16];\nassign reg_d       = execute_instruction[15:12];\nassign reg_m       = execute_instruction[3:0];\nassign reg_s       = execute_instruction[11:8];\nassign shift_imm   = execute_instruction[11:7];\nassign offset12    = execute_instruction[11:0];\nassign offset8     = {execute_instruction[11:8], execute_instruction[3:0]};\nassign imm8        = execute_instruction[7:0];\n\nassign no_shift    = execute_instruction[11:4] == 8'h0;\nassign mtrans_itype = execute_instruction[24:23];\n\n\nassign opcode_compare =\n            opcode == CMP || \n            opcode == CMN || \n            opcode == TEQ || \n            opcode == TST ;\n            \nassign opcode_move =\n            opcode == MOV || \n            opcode == MVN ;\n            \nassign shift_op_imm = itype == REGOP && execute_instruction[25] == 1'd1;\n\nassign imm32 =  execute_instruction[11:8] == 4'h0 ? {            24'h0, imm8[7:0] } :\n                execute_instruction[11:8] == 4'h1 ? { imm8[1:0], 24'h0, imm8[7:2] } :\n                execute_instruction[11:8] == 4'h2 ? { imm8[3:0], 24'h0, imm8[7:4] } :\n                execute_instruction[11:8] == 4'h3 ? { imm8[5:0], 24'h0, imm8[7:6] } :\n                execute_instruction[11:8] == 4'h4 ? { imm8[7:0], 24'h0            } :\n                execute_instruction[11:8] == 4'h5 ? { 2'h0,  imm8[7:0], 22'h0 }     :\n                execute_instruction[11:8] == 4'h6 ? { 4'h0,  imm8[7:0], 20'h0 }     :\n                execute_instruction[11:8] == 4'h7 ? { 6'h0,  imm8[7:0], 18'h0 }     :\n                execute_instruction[11:8] == 4'h8 ? { 8'h0,  imm8[7:0], 16'h0 }     :\n                execute_instruction[11:8] == 4'h9 ? { 10'h0, imm8[7:0], 14'h0 }     :\n                execute_instruction[11:8] == 4'ha ? { 12'h0, imm8[7:0], 12'h0 }     :\n                execute_instruction[11:8] == 4'hb ? { 14'h0, imm8[7:0], 10'h0 }     :\n                execute_instruction[11:8] == 4'hc ? { 16'h0, imm8[7:0], 8'h0  }     :\n                execute_instruction[11:8] == 4'hd ? { 18'h0, imm8[7:0], 6'h0  }     :\n                execute_instruction[11:8] == 4'he ? { 20'h0, imm8[7:0], 4'h0  }     :\n                                                    { 22'h0, imm8[7:0], 2'h0  }     ;\n\n\n\n\n\n\nassign itype = \n    {execute_instruction[27:23], execute_instruction[21:20], execute_instruction[11:4] } == { 5'b00010, 2'b00, 8'b00001001 } ? SWAP     :  \n    {execute_instruction[27:22], execute_instruction[7:4]                              } == { 6'b000000, 4'b1001           } ? MULT     :  \n    {execute_instruction[27:26]                                                        } == { 2'b00                        } ? REGOP    :    \n    {execute_instruction[27:26]                                                        } == { 2'b01                        } ? TRANS    :\n    {execute_instruction[27:25]                                                        } == { 3'b100                       } ? MTRANS   :\n    {execute_instruction[27:25]                                                        } == { 3'b101                       } ? BRANCH   :\n    {execute_instruction[27:25]                                                        } == { 3'b110                       } ? CODTRANS :\n    {execute_instruction[27:24], execute_instruction[4]                                } == { 4'b1110, 1'b0                } ? COREGOP  :\n    {execute_instruction[27:24], execute_instruction[4]                                } == { 4'b1110, 1'b1                } ? CORTRANS :\n                                                                                                                               SWI      ;\n",
        "always @ ( posedge i_clk )\n    if ( !i_fetch_stall )\n        execute_valid <= i_instruction_valid;\n    ",
        "always @( posedge i_clk )\n    if ( !i_fetch_stall && i_instruction_valid )\n        begin\n        execute_instruction <= i_instruction;\n        execute_address     <= i_instruction_address;\n        execute_undefined   <= i_instruction_undefined;\n        execute_now         <= 1'd1;\n        end"
    ]
}