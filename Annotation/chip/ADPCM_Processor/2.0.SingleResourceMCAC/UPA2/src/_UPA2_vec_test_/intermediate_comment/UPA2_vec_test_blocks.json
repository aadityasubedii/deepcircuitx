{
    "line_num": [
        [
            295,
            297
        ],
        [
            100,
            299
        ],
        [
            98,
            98
        ],
        [
            79,
            95
        ]
    ],
    "blocks": [
        "  #10 $display(\"%t TEST COMPLETE\", $time);\n\n  $finish;",
        "initial begin\n  $timeformat(-9,2,\"ns\", 16);\n`ifdef SDFSCAN\n  $sdf_annotate(\"sdf/UPA2_tsmc18_scan.sdf\", test.top);\n`endif\n\n  clk         = 1'b0;\n  reset       = 1'b0;\n  scan_in0    = 1'b0;\n  scan_in1    = 1'b0;\n  scan_in2    = 1'b0;\n  scan_in3    = 1'b0;\n  scan_in4    = 1'b0;\n  scan_enable = 1'b0;\n  test_mode   = 1'b0;\n\n  \n  for (model=0; model<2; model=model+1) begin\n\n    for (rate=0; rate<4; rate=rate+1) begin\n\n      for (operation=0; operation<3; operation = operation+1) begin\n\n        if(!(model==0 && operation==2)) begin \n\n          for (type=0; type<2; type=type+1) begin\n\n            for (law=0; law<2; law=law+1) begin\n\n              $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"pk1.t\"}, PK1s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"pk2.t\"}, PK2s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a1.t\"}, A1s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a2.t\"}, A2s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a2t.t\"}, A2Ts); \n\n              loop = vectorSizes[0];\n     \n              @(posedge clk);   \n\n              for (j=0; j<loop; j=j+1) begin \n\n                 PK0 = PK0s[j]; \n                   PK1 = PK1s[j];\n                   PK2 = PK2s[j];\n                   A1 = A1s[j];\n                   A2 = A2s[j];\n                   SIGPK = SIGPKs[j];\n\n              @(negedge clk);\n                \n`ifdef VERBOSE\n                $display(\"PK0 = %h\", PK0); \n                $display(\"PK1 = %h\", PK1);\n                $display(\"PK2 = %h\", PK2);\n                $display(\"A1 = %h\", A1);\n                $display(\"A2 = %h\", A2);\n                $display(\"SIGPK = %h\", SIGPK);\n                $display(\"A2T = %h\", A2T); \n`endif\n                \n                if (A2T !== A2Ts[j]) begin\n                  \n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, PK0 = %h PK1=%h PK2=%h A1=%h A2=%h SIGPK=%h A2T = %h instead of %h\",\n                    $time, j, models[model], rates[rate], laws[law], types[type], operations[operation], PK0,PK1,PK2,A1,A2,SIGPK,A2T, A2Ts[j]); \n`ifdef ERRORSTOP\n                  $stop;\n`endif\n                end \n\n               @(posedge clk);\n\n              end \n\n            end \n\n          end \n\n        end \n\n      end \n\n    end \n\n  end \n\n  \n  for (model=0; model<2; model=model+1) begin\n\n    for (rate=0; rate<4; rate=rate+1) begin\n\n      for (operation=0; operation<2; operation = operation+1) begin\n\n        for (type=0; type<2; type=type+1) begin\n\n          if(!(model==0 && type==1)) begin \n\n            for (law=2; law<4; law=law+1) begin\n\n              $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"pk0.t\"}, PK0s);\n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"pk1.t\"}, PK1s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"pk2.t\"}, PK2s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a1.t\"}, A1s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a2.t\"}, A2s); \n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"sigpk.t\"}, SIGPKs);   \n                        \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a2t.t\"}, A2Ts); \n\n             loop = vectorSizes[0];\n               \n              @(posedge clk);\n\n              for (j=0; j<loop; j=j+1) begin \n\n                   PK0 = PK0s[j]; \n                   PK1 = PK1s[j];\n                   PK2 = PK2s[j];\n                   A1 = A1s[j];\n                   A2 = A2s[j];\n                   SIGPK = SIGPKs[j];\n\n               @(negedge clk);\n                \n`ifdef VERBOSE\n                $display(\"PK0 = %h\", PK0);   \n                $display(\"PK1 = %h\", PK1);\n                $display(\"PK2 = %h\", PK2);\n                $display(\"A1 = %h\", A1);\n                $display(\"A2 = %h\", A2);\n                $display(\"SIGPK = %h\", SIGPK);\n                $display(\"A2T = %h\", A2T); \n`endif\n                \n                if (A2T !== A2Ts[j]) begin\n                  \n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, PK0 = %h PK1 = %h PK2 = %h A1 = %h A2 = %h SIGPK = %h A2T = %h instead of %h\",\n                    $time, j, models[model], rates[rate], laws[law], types[type], operations[operation], PK0,PK1,PK2,A1,A2,SIGPK, A2T, A2Ts[j]); \n`ifdef ERRORSTOP\n                  $stop;\n`endif\n                end \n\n               @(posedge clk);\n\n              end \n\n            end \n\n          end \n\n        end \n\n      end \n\n    end \n\n  end \n\n  #10 $display(\"%t TEST COMPLETE\", $time);\n\n  $finish;\n\nend ",
        "always #(`CLK_PERIOD/2) clk = ~clk;",
        "initial begin\n  rates[0]      = \"40\";\n  rates[1]      = \"32\";\n  rates[2]      = \"24\";\n  rates[3]      = \"16\";\n  laws[0]       = \"AA\";\n  laws[1]       = \"MM\";  \n  laws[2]       = \"AM\";\n  laws[3]       = \"MA\";\n  operations[0] = \"nrm\";\n  operations[1] = \"ovr\";\n  operations[2] = \"i\";\n  types[0]      = \"reset\";\n  types[1]      = \"homing\";\n  models[0]     = \"enc\";\n  models[1]     = \"dec\";\nend"
    ]
}