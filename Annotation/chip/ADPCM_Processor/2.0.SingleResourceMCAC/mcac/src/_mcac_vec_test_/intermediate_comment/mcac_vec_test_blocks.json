{
    "line_num": [
        [
            948,
            960
        ],
        [
            940,
            943
        ],
        [
            928,
            928
        ],
        [
            795,
            925
        ],
        [
            722,
            789
        ],
        [
            650,
            717
        ],
        [
            648,
            649
        ],
        [
            576,
            643
        ],
        [
            574,
            574
        ],
        [
            538,
            568
        ],
        [
            502,
            532
        ],
        [
            496,
            498
        ],
        [
            463,
            491
        ],
        [
            415,
            459
        ],
        [
            400,
            411
        ],
        [
            395,
            397
        ],
        [
            390,
            392
        ],
        [
            387,
            389
        ],
        [
            313,
            385
        ],
        [
            295,
            311
        ]
    ],
    "blocks": [
        "function [127:0] insert_32_into_128;\ninput [1:0]   pos;\ninput [127:0] word128;\ninput [31:0]  word32;\nbegin\n     case (pos)\n         2'd0: insert_32_into_128 = {word128[127:32], word32};\n         2'd1: insert_32_into_128 = {word128[127:64], word32, word128[31:0]};\n         2'd2: insert_32_into_128 = {word128[127:96], word32, word128[63:0]};\n         2'd3: insert_32_into_128 = {word32, word128[95:0]};\n     endcase\nend\nendfunction",
        "initial\n    begin\n    testfail  = 1'd0;\n    end",
        "dumpvcd u_dumpvcd();",
        "always @ ( posedge `U_SYSTEM.reset ) begin\n\trepeat(`RESET_MEM_TICKS)\n\t\t@ ( negedge `U_SYSTEM.clk );\n        $display(\"Load enc main memory from %s\", `ENC_MAIN_MEM_FILE);\n\n        main_mem_file   = $fopen(`ENC_MAIN_MEM_FILE, \"r\");\n            \n        \n        main_mem_line_count   = 0;\n        \n        if (main_mem_file == 0)\n            begin\n            $display(\"ERROR: Can't open input file %s\", `ENC_MAIN_MEM_FILE);\n            `ifndef NETLIST\n\t\t\t`TB_ERROR_MESSAGE\n\t\t`endif\n            end\n\n        if (main_mem_file != 0)\n            begin  \n            fgets_return = 1;\n            while (fgets_return != 0)\n                begin\n                fgets_return        = $fgets(line, main_mem_file);\n                main_mem_line_count = main_mem_line_count + 1;\n                aligned_line        = align_line(line);\n                \n                \n                if (aligned_line[120*8-1:118*8] != 16'h2f2f)\n                    begin\n                    \n                    if (aligned_line[120*8-1:119*8] != 8'h40 && aligned_line[120*8-1:119*8] != 8'h00)\n                        begin\n                        $display(\"Format ERROR in input file %s, line %1d. Line must start with a @, not %08x\", \n                                 `MAIN_MEM_FILE, main_mem_line_count, aligned_line[118*8-1:117*8]);\n                        `ifndef NETLIST\n            \t\t\t`TB_ERROR_MESSAGE\n\t\t\t\t`endif\n                        end\n                    \n                    if (aligned_line[120*8-1:119*8] != 8'h00)\n                        begin\n                        main_mem_file_address =   hex_chars_to_32bits (aligned_line[119*8-1:111*8]);\n                        main_mem_file_data    =   hex_chars_to_32bits (aligned_line[110*8-1:102*8]);\n\n                      \n                      \n                      \n                      \n                      main_mem_file_data_128 = test.main_mem_e.ram[main_mem_file_address[31:4]];\n                      test.main_mem_e.ram [main_mem_file_address[31:4]] = \n                          insert_32_into_128 ( main_mem_file_address[3:2], \n                                               main_mem_file_data_128, \n                                               main_mem_file_data );\n\n                      `ifdef AMBER_LOAD_MEM_DEBUG\n                          $display (\"Load RAM: PAddr: 0x%08x, Data 0x%08x\", \n                                     main_mem_file_address, main_mem_file_data);\n                      `endif   \n                        \n                        end\n                    end  \n                end\n                \n            $display(\"Read in %1d lines\", main_mem_line_count);      \n            end\n\n\t  $display(\"Load dec main memory from %s\", `DEC_MAIN_MEM_FILE);\n\n        main_mem_file   = $fopen(`DEC_MAIN_MEM_FILE, \"r\");\n            \n        \n        main_mem_line_count   = 0;\n        \n        if (main_mem_file == 0)\n            begin\n            $display(\"ERROR: Can't open input file %s\", `DEC_MAIN_MEM_FILE);\n            `ifndef NETLIST\n\t\t\t`TB_ERROR_MESSAGE\n\t\t`endif\n            end\n\n        if (main_mem_file != 0)\n            begin  \n            fgets_return = 1;\n            while (fgets_return != 0)\n                begin\n                fgets_return        = $fgets(line, main_mem_file);\n                main_mem_line_count = main_mem_line_count + 1;\n                aligned_line        = align_line(line);\n                \n                \n                if (aligned_line[120*8-1:118*8] != 16'h2f2f)\n                    begin\n                    \n                    if (aligned_line[120*8-1:119*8] != 8'h40 && aligned_line[120*8-1:119*8] != 8'h00)\n                        begin\n                        $display(\"Format ERROR in input file %s, line %1d. Line must start with a @, not %08x\", \n                                 `DEC_MAIN_MEM_FILE, main_mem_line_count, aligned_line[118*8-1:117*8]);\n                        `ifndef NETLIST\n            \t\t\t`TB_ERROR_MESSAGE\n\t\t\t\t`endif\n                        end\n                    \n                    if (aligned_line[120*8-1:119*8] != 8'h00)\n                        begin\n                        main_mem_file_address =   hex_chars_to_32bits (aligned_line[119*8-1:111*8]);\n                        main_mem_file_data    =   hex_chars_to_32bits (aligned_line[110*8-1:102*8]);\n\n                      \n                      \n                      \n                      \n                      main_mem_file_data_128 = test.main_mem_d.ram[main_mem_file_address[31:4]];\n                      test.main_mem_d.ram [main_mem_file_address[31:4]] = \n                          insert_32_into_128 ( main_mem_file_address[3:2], \n                                               main_mem_file_data_128, \n                                               main_mem_file_data );\n\n                      `ifdef AMBER_LOAD_MEM_DEBUG\n                          $display (\"Load RAM: PAddr: 0x%08x, Data 0x%08x\", \n                                     main_mem_file_address, main_mem_file_data);\n                      `endif   \n                        \n                        end\n                    end  \n                end\n                \n            $display(\"Read in %1d lines\", main_mem_line_count);      \n            end\n end",
        "always @ ( posedge `U_SYSTEM.reset ) begin\n\t\trepeat(`RESET_MEM_TICKS)\n\t\t\t@ ( negedge `U_SYSTEM.clk );\n        $display(\"Load boot memory from %s\", `BOOT_MEM_FILE);\n        boot_mem_line_count   = 0;\n        boot_mem_file         = $fopen(`BOOT_MEM_FILE,    \"r\");\n        if (boot_mem_file == 0)\n            begin\n\t\t`ifndef NETLIST\n            \t`TB_ERROR_MESSAGE\n\t\t`endif\n            $display(\"TESTBENCHERROR: Can't open input file %s\", `BOOT_MEM_FILE);\n            $finish;\n            end\n        \n        if (boot_mem_file != 0)\n            begin  \n            fgets_return = 1;\n            while (fgets_return != 0)\n                begin\n                fgets_return        = $fgets(line, boot_mem_file);\n                boot_mem_line_count = boot_mem_line_count + 1;\n                aligned_line        = align_line(line);\n                \n                \n                if (aligned_line[120*8-1:118*8] != 16'h2f2f)\n                    begin\n                    \n                    if (aligned_line[120*8-1:119*8] != 8'h40 && aligned_line[120*8-1:119*8] != 8'h00)\n                        begin\n                        $display(\"Format ERROR in input file %s, line %1d. Line must start with a @, not %08x\", \n                                 `BOOT_MEM_FILE, boot_mem_line_count, aligned_line[118*8-1:117*8]);\n                        `ifndef NETLIST\n            \t\t\t`TB_ERROR_MESSAGE\n\t\t\t\t`endif\n                        end\n                    \n                    if (aligned_line[120*8-1:119*8] != 8'h00)\n                        begin\n                        boot_mem_file_address  =   hex_chars_to_32bits (aligned_line[119*8-1:111*8]);\n                        boot_mem_file_data     =   hex_chars_to_32bits (aligned_line[110*8-1:102*8]);\n                        \n                        boot_mem_file_data_128 = top.ENC_INST0.boot_mem_inst0.u_mem.mem[boot_mem_file_address[BOOT_MSB:4]];\n                        top.ENC_INST0.boot_mem_inst0.u_mem.mem[boot_mem_file_address[BOOT_MSB:4]] = \n                              insert_32_into_128 ( boot_mem_file_address[3:2], \n                                                   boot_mem_file_data_128, \n                                                   boot_mem_file_data );\n                        top.DEC_INST0.boot_mem_inst0.u_mem.mem[boot_mem_file_address[BOOT_MSB:4]] = \n                              insert_32_into_128 ( boot_mem_file_address[3:2], \n                                                   boot_mem_file_data_128, \n                                                   boot_mem_file_data );\n                        `ifdef AMBER_LOAD_MEM_DEBUG\n                            $display (\"Load Boot Mem: PAddr: 0x%08x, Data 0x%08x\", \n                                        boot_mem_file_address, boot_mem_file_data);\n                        `endif   \n                        end\n                    end  \n                end\n                \n            $display(\"Read in %1d lines\", boot_mem_line_count);      \n            end\n\n        \n        timeout   = `AMBER_TIMEOUT   ;  \n        core_str = \"amber25\";      \n        $display(\"Core %s, log file %s, timeout %0d, test name %0s \", core_str, `AMBER_LOG_FILE, timeout, `AMBER_TEST_NAME );          \n        log_file = $fopen(`AMBER_LOG_FILE, \"a\");                               \nend",
        "always @(posedge reset, negedge dec_s_clk) begin\n\tif (reset | ~program_start) begin\n\t\ttdmo_fs_prev_d <= 1'b0;\n\t\tcaptured_data_d <= 1'b0;\n\t\ttdmo_test_count_d <= 'd0;\n\t\ttdmo_ch_count_d <= 'd0;\n\t\ttdmo_bit_count_d <= 'd7;\n\tend else begin\n\t\tif (tdmo_test_count_d <= loop_d) begin\n\t\t\tif (dec_s_fs & ~tdmo_fs_prev_d) begin\n\t\t\t\tdata_out_d[0][7] <= dec_s;\n\t\t\t\ttdmo_bit_count_d <= 3'b110;\n\t\t\t\ttdmo_ch_count_d <= 5'b00000;\n\t\t\tend else begin\n\t\t\t\tdata_out_d[tdmo_ch_count_d][tdmo_bit_count_d] <= dec_s;\n\t\t\t\ttdmo_bit_count_d <= tdmo_bit_count_d - 1'b1;\n\t\t\t\tif (tdmo_test_count_d == 'd0 && tdmo_ch_count_d == 5'b11111 && tdmo_bit_count_d == 3'b001) begin\n\t\t\t\t\ttdmo_bit_count_d <= 3'd7;\n\t\t\t\t\ttdmo_test_count_d <= tdmo_test_count_d + 1'b1;\n\t\t\t\t\ttdmo_ch_count_d <= 5'b00000;\n\t\t\t\tend else if (tdmo_bit_count_d == 3'd0) begin\n\t\t\t\t\t\tcaptured_data_d <= 1'b1;\n\t\t\t\t\t\ttdmo_bit_count_d <= 3'd7;\n\t\t\t\t\t\ttdmo_ch_count_d <= tdmo_ch_count_d + 1'b1;\n\t\t\t\t\t\tif (tdmo_ch_count_d == 5'b11111) begin\n\t\t\t\t\t\t\ttdmo_test_count_d <= tdmo_test_count_d + 1'b1;\n\t\t\t\t\t\t\ttdmo_ch_count_d <= 5'b00000;\n\t\t\t\t\t\tend\n\t\t\t\tend else begin\n`ifdef ERRORCHECK\n\t\t\t\t\tif (captured_data_d && (tdmo_bit_count_d == 3'd7)) begin\n`ifdef SINGLECHANNEL\n\t\t\t\t\tif ((tdmo_ch_count_d == 1) && (tdmo_test_count_d >= 2)) begin\n\t\t\t\t\t\tif (data_out_d[0] != data_out_vec_d[tdmo_test_count_d-2][7:0]) begin\n\t\t\t\t\t\t\t$display(\"%t TESTBENCHERROR: failure found for channel 0 and test number %d, when output data = %h but should be %h\",$time,tdmo_test_count_d,data_out_d[0],data_out_vec_d[tdmo_test_count_d-1][7:0]); \n\t\t\t\t\t\t\t$finish;\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n`else\n\t\t\t\t\tif (tdmo_test_count_d >= 2) begin\n\t\t\t\t\t\tif (tdmo_ch_count_d == 0) begin\n\t\t\t\t\t\t\tif (data_out_d[31] != data_out_vec_d[32*tdmo_test_count_d-65][7:0]) begin\n\t\t\t\t\t\t\t\t$display(\"%t TESTBENCHERROR: failure found for channel %h and test number %d, when output data = %h but should be %h\",$time,tdmo_ch_count_d,tdmo_test_count_d,data_out_d[31],data_out_vec_d[32*tdmo_test_count_d-33][7:0]); \n\t\t\t\t\t\t\t\t$finish;\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend else begin\n\t\t\t\t\t\t\tif (data_out_d[tdmo_ch_count_d-1] != data_out_vec_d[32*tdmo_test_count_d+tdmo_ch_count_d-65][7:0]) begin\n\t\t\t\t\t\t\t\t$display\t\t(\"%t TESTBENCHERROR: failure found for channel %h and test number %d, when output data = %h but should be %h\",$time,tdmo_ch_count_d,tdmo_test_count_d,data_out_d[tdmo_ch_count_d-1],data_out_vec_d[32*tdmo_test_count_d+tdmo_ch_count_d-33][7:0]); \n\t\t\t\t\t\t\t\t$finish;\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse if ((tdmo_test_count_d % 100)==0 && tdmo_ch_count_d == 1) begin \n\t\t\t\t\t\t\t\t$display(\"%t Passing tests so far. Currently on test number %d\", $time, tdmo_test_count_d);\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n`endif\n\t\t\t\t\tend\n`endif\n\t\t\t\t\tcaptured_data_d <= 1'b0;\n\t\t\t\tend\n\t\t\tend\n\t\t\ttdmo_fs_prev_d <= dec_s_fs;\n\t\tend else begin\n\t\t\t$display(\"%t TESTBENCHFINISHED: simulation complete\",$time);\n\t\t\t$finish;\n\t\tend\n\tend\nend",
        "reg tdmo_fs_prev_d;\nreg captured_data_d;",
        "always @(posedge reset, negedge enc_i_clk) begin\n\tif (reset | ~program_start) begin\n\t\ttdmo_fs_prev_e <= 1'b0;\n\t\tcaptured_data_e <= 1'b0;\n\t\ttdmo_test_count_e <= 'd0;\n\t\ttdmo_ch_count_e <= 'd0;\n\t\ttdmo_bit_count_e <= 'd7;\n\tend else begin\n\t\tif (tdmo_test_count_e <= loop_e) begin\n\t\t\tif (enc_i_fs & ~tdmo_fs_prev_e) begin\n\t\t\t\tdata_out_e[0][7] <= enc_i;\n\t\t\t\ttdmo_bit_count_e <= 3'b110;\n\t\t\t\ttdmo_ch_count_e <= 5'b00000;\n\t\t\tend else begin\n\t\t\t\tdata_out_e[tdmo_ch_count_e][tdmo_bit_count_e] <= enc_i;\n\t\t\t\ttdmo_bit_count_e <= tdmo_bit_count_e - 1'b1;\n\t\t\t\tif (tdmo_test_count_e == 'd0 && tdmo_ch_count_e == 5'b11111 && tdmo_bit_count_e == 3'b001) begin\n\t\t\t\t\ttdmo_bit_count_e <= 3'd7;\n\t\t\t\t\ttdmo_test_count_e <= tdmo_test_count_e + 1'b1;\n\t\t\t\t\ttdmo_ch_count_e <= 5'b00000;\n\t\t\t\tend else if (tdmo_bit_count_e == 3'd0) begin\n\t\t\t\t\t\tcaptured_data_e <= 1'b1;\n\t\t\t\t\t\ttdmo_bit_count_e <= 3'd7;\n\t\t\t\t\t\ttdmo_ch_count_e <= tdmo_ch_count_e + 1'b1;\n\t\t\t\t\t\tif (tdmo_ch_count_e == 5'b11111) begin\n\t\t\t\t\t\t\ttdmo_test_count_e <= tdmo_test_count_e + 1'b1;\n\t\t\t\t\t\t\ttdmo_ch_count_e <= 5'b00000;\n\t\t\t\t\t\tend\n\t\t\t\tend else begin\n`ifdef ERRORCHECK\n\t\t\t\t\tif (captured_data_e && (tdmo_bit_count_e == 3'd7)) begin\n`ifdef SINGLECHANNEL\n\t\t\t\t\tif ((tdmo_ch_count_e == 1) && (tdmo_test_count_e >= 1)) begin\n\t\t\t\t\t\tif (data_out_e[0] != data_out_vec_e[tdmo_test_count_e-1][7:0]) begin\n\t\t\t\t\t\t\t$display(\"%t TESTBENCHERROR: failure found for channel 0 and test number %d, when output data = %h but should be %h\",$time,tdmo_test_count_e,data_out_e[0],data_out_vec_e[tdmo_test_count_e-1][7:0]); \n\t\t\t\t\t\t\t$finish;\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n`else\n\t\t\t\t\tif (tdmo_test_count_e >= 1) begin\n\t\t\t\t\t\tif (tdmo_ch_count_e == 0) begin\n\t\t\t\t\t\t\tif (data_out_e[31] != data_out_vec_e[32*tdmo_test_count_e-33][7:0]) begin\n\t\t\t\t\t\t\t\t$display(\"%t TESTBENCHERROR: failure found for channel %h and test number %d, when output data = %h but should be %h\",$time,tdmo_ch_count_e,tdmo_test_count_e,data_out_e[31],data_out_vec_e[32*tdmo_test_count_e-33][7:0]); \n\t\t\t\t\t\t\t\t$finish;\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend else begin\n\t\t\t\t\t\t\tif (data_out_e[tdmo_ch_count_e-1] != data_out_vec_e[32*tdmo_test_count_e+tdmo_ch_count_e-33][7:0]) begin\n\t\t\t\t\t\t\t\t$display\t\t(\"%t TESTBENCHERROR: failure found for channel %h and test number %d, when output data = %h but should be %h\",$time,tdmo_ch_count_e,tdmo_test_count_e,data_out_e[tdmo_ch_count_e-1],data_out_vec_e[32*tdmo_test_count_e+tdmo_ch_count_e-33][7:0]); \n\t\t\t\t\t\t\t\t$finish;\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\telse if ((tdmo_test_count_e % 100)==0 && tdmo_ch_count_e == 1) begin \n\t\t\t\t\t\t\t\t$display(\"%t Passing tests so far. Currently on test number %d\", $time, tdmo_test_count_e);\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n`endif\n\t\t\t\t\tend\n`endif\n\t\t\t\t\tcaptured_data_e <= 1'b0;\n\t\t\t\tend\n\t\t\tend\n\t\t\ttdmo_fs_prev_e <= enc_i_fs;\n\t\tend else begin\n\t\t\t$display(\"%t TESTBENCHFINISHED: simulation complete\",$time);\n\t\t\t$finish;\n\t\tend\n\tend\nend",
        "reg tdmo_fs_prev_e;",
        "always @(posedge reset, posedge dec_i_clk) begin\n\tif (reset | ~program_start) begin\n\t\tch_count_d <= 'd0;\n\t\ttest_count_d <= 'd0;\n\t\tbit_count_d <= 'd7;\n\tend else begin\n\t\tif (test_count_d < loop_d)  begin\n\t\t\tif (ch_count_d == 5'd0) begin\n\t\t\t\tdec_i_fs <= 1'b1;\n\t\t\tend else begin\n\t\t\t\tdec_i_fs <= 1'b0;\n\t\t\tend\n\t`ifdef SINGLECHANNEL\n\t\t\tif (ch_count_d == 0) begin\n\t\t\t\tdec_i <= data_in_vec_d[test_count_d][bit_count_d];\n\t\t\tend else begin\n\t\t\t\tdec_i <= 1'b0;\n\t\t\tend\n\t`else\n\t\t\tdec_i <= data_in_vec_d[32*test_count_d + ch_count_d][bit_count_d];\n\t`endif\n\t\t\tbit_count_d <= bit_count_d - 1'b1;\n\t\t\tif (bit_count_d == 3'd0) begin\n\t\t\t\tch_count_d <= ch_count_d + 1'b1;\n\t\t\t\tif (ch_count_d == 5'b11111) begin\n\t\t\t\t\ttest_count_d <= test_count_d + 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend",
        "always @(posedge reset, posedge enc_s_clk) begin\n\tif (reset | ~program_start) begin\n\t\tch_count_e <= 'd0;\n\t\ttest_count_e <= 'd0;\n\t\tbit_count_e <= 'd7;\n\tend else begin\n\t\tif (test_count_e < loop_e)  begin\n\t\t\tif (ch_count_e == 5'd0) begin\n\t\t\t\tenc_s_fs <= 1'b1;\n\t\t\tend else begin\n\t\t\t\tenc_s_fs <= 1'b0;\n\t\t\tend\n\t`ifdef SINGLECHANNEL\n\t\t\tif (ch_count_e == 0) begin\n\t\t\t\tenc_s <= data_in_vec_e[test_count_e][bit_count_e];\n\t\t\tend else begin\n\t\t\t\tenc_s <= 1'b0;\n\t\t\tend\n\t`else\n\t\t\tenc_s <= data_in_vec_e[32*test_count_e + ch_count_e][bit_count_e];\n\t`endif\n\t\t\tbit_count_e <= bit_count_e - 1'b1;\n\t\t\tif (bit_count_e == 3'd0) begin\n\t\t\t\tch_count_e <= ch_count_e + 1'b1;\n\t\t\t\tif (ch_count_e == 5'b11111) begin\n\t\t\t\t\ttest_count_e <= test_count_e + 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend",
        "always @ ( posedge `U_SYSTEM.clk )\n    clk_count <= clk_count + 1'd1;\n",
        "always @(posedge reset, posedge clk) begin\n\tif (reset) begin\n\t\tprogram_start <= 1'b0;\n\t\te_mail <= 1'b0;\n\t\td_mail <= 1'b0;\n\tend else begin\n\t\tif(config_done == 1 && program_start == 0) begin\n\t\t\taddrs = 7'b1000000;\n\t\t\t@(posedge clk);\n\t\t\trs = 1'b1;\n\t\t\t@(posedge clk);\n\t\t\trs = 1'b0;\n\t\t\tif (r_data == 1) begin\n\t\t\t\td_mail = 1'b1;\n\t\t\tend\n\t\t\taddrs = 7'b1100000;\n\t\t\t@(posedge clk);\n\t\t\trs = 1'b1;\n\t\t\t@(posedge clk);\n\t\t\trs = 1'b0;\n\t\t\tif (r_data == 1) begin\n\t\t\t\te_mail = 1'b1;\n\t\t\tend\n\t\t\tif (e_mail & d_mail) begin\n\t\t\t\tprogram_start <= 1'b1;\n\t\t\tend\n\t\tend\n\tend\nend",
        "always @(rate, law) begin\n\tcase (rates[rate])\n\t\t\"40\": w_data[2:1] = 2'b00;\n\t\t\"32\": w_data[2:1] = 2'b01;\n\t\t\"24\": w_data[2:1] = 2'b10;\n\t\t\"16\": w_data[2:1] = 2'b11;\n\tendcase\n\tcase (laws[law])\n\t\t\"AA\": begin\n\t\t\te_law = 1'b1;\n\t\t\td_law = 1'b1;\n\t\tend\n\t\t\"MM\": begin\n\t\t\te_law = 1'b0;\n\t\t\td_law = 1'b0;\n\t\tend\n\t\t\"AM\": begin\n\t\t\te_law = 1'b1;\n\t\t\td_law = 1'b0;\n\t\tend\n\t\t\"MA\": begin\n\t\t\te_law = 1'b0;\n\t\t\td_law = 1'b1;\n\t\tend\n\tendcase\n\taddrs[5] = 1'b0;\n\tfor (next_channel = 0; next_channel<32; next_channel=next_channel+1) begin\n\t\tw_data[0] = d_law;\n\t\taddrs[4:0] = next_channel[4:0];\n\t\tws = 1'b1;\n\t\t@(posedge clk);\n\t\tws = 1'b0;\n\t\t@(posedge clk);\n\tend\n\taddrs[5] = 1'b1;\n\tfor (next_channel = 0; next_channel<32; next_channel=next_channel+1) begin\n\t\tw_data[0] = e_law;\n\t\taddrs[4:0] = next_channel[4:0];\n\t\tws = 1'b1;\n\t\t@(posedge clk);\n\t\tws = 1'b0;\n\t\t@(posedge clk);\n\tend\n\tconfig_done = 1'b1;\nend",
        "always @ (posedge clk, posedge reset) begin\n\tif(reset) begin\n\t\tenc_s_clk <= 1'b0;\n\t\tser_count <= 8'h00;\n\tend else if (ser_count != 8'h3B) begin\n\t\tser_count <= ser_count + 1'b1;\n\t\tenc_s_clk <= enc_s_clk;\n\tend else if (ser_count == 8'h3B) begin\n\t\tser_count <= 8'h00;\n\t\tenc_s_clk <= ~ enc_s_clk;\n\tend\nend",
        "assign dec_i_clk = (tie_in) ? (enc_i_clk) : (enc_s_clk);\nassign dec_in = (tie_in) ? (enc_i) : (dec_i);\nassign dec_fs_in = (tie_in) ? (enc_i_fs) : (dec_i_fs);",
        "\tassign tie_in = 1'b1;\n`else\n\tassign tie_in = 1'b0;",
        "wire tie_in;\n\n`ifdef TIE_IN",
        "initial begin\n    $timeformat(-9,2,\"ns\", 16);\n`ifdef SDFSCAN\n    $sdf_annotate(\"sdf/mcac_tsmc065_scan.sdf\", test.top);\n`endif\n\tclk = 1'b0;\n\tenc_s = 1'b0;\n\tdec_i = 1'b0;\n\tenc_s_fs = 1'b0;\n\tdec_i_fs = 1'b0;\n\tuart_clk = 1'b0;\n\tscan_in0 = 1'b0;\n\tscan_in1 = 1'b0;\n\tscan_in2 = 1'b0;\n\tscan_in3 = 1'b0;\n\tscan_in4 = 1'b0;\n\tscan_enable = 1'b0;\n\ttest_mode = 1'b0;\n\n\treset = 1'd0;\n\t@(posedge clk)\n\t\treset = #1 1'd1;\n\trepeat(`RESET_MEM_TICKS)\n\t\t@(negedge clk);\n\treset = #1 1'd0;\n\n\taddrs = 7'h00;\n\tcs = 1'b1;\n\trs = 1'b0;\n\tws = 1'b0;\n\tw_data = 8'h00;\n\n`ifdef STANDALONE\n\tmodel = 0;\n\ttype = 0;\n\toperation= 0;\n\tlaw = 2;\n\trate = 0;\n`else\n\t\n\t$readmemh({\"./MCACTests.t\"},testCases);\n\tmodel = testCases[0];\n\ttype = testCases[1];\n\toperation = testCases[2];\n\tlaw = testCases[3];\n\trate = testCases[4];\n`endif\n\t$display(\"MCAC %s %s %s %s law\", rates[rate], operations[operation], types[type], laws[law]);\n\n\t\n\t$readmemh({\"../sw/mc_model/vector_out/\",laws[law],\"/\", models[0], \"/\", types[type],\"/\", operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes_e);\n\tloop_e = vectorSizes_e[0];\n\t$readmemh({\"../sw/mc_model/vector_out/\",laws[law],\"/\", models[1], \"/\", types[type],\"/\", operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes_d);\n\tloop_d = vectorSizes_d[0];\n`ifndef SINGLECHANNEL\n\tloop_e = loop_e / 32;\n\tloop_d = loop_d / 32;\n`endif\n\t$readmemh({\"../sw/mc_model/vector_out/\",laws[law],\"/\", models[0], \"/\", types[type],\"/\", operations[operation],\"/\",rates[rate],\"/\",\"channel.t\"}, channels_e);\n\ttest_channel_e = channels_e[0];\n\t$display(\"Current channel being tested with main vectors is: %d\", test_channel_e);\n\t$display(\"Other channels being tested with null vectors\");\n\t$readmemh({\"../sw/mc_model/vector_out/\",laws[law],\"/\", models[0], \"/\", types[type],\"/\", operations[operation],\"/\",rates[rate],\"/\",\"input.t\"}, data_in_vec_e);\n\t$readmemh({\"../sw/mc_model/vector_out/\",laws[law],\"/\", models[0], \"/\", types[type],\"/\", operations[operation],\"/\",rates[rate],\"/\",\"output.t\"}, data_out_vec_e);\n\n\t$readmemh({\"../sw/mc_model/vector_out/\",laws[law],\"/\", models[1], \"/\", types[type],\"/\", operations[operation],\"/\",rates[rate],\"/\",\"channel.t\"}, channels_d);\n\ttest_channel_d = channels_d[0];\n\t$display(\"Current channel being tested with main vectors is: %d\", test_channel_d);\n\t$display(\"Other channels being tested with null vectors\");           \n\t$readmemh({\"../sw/mc_model/vector_out/\",laws[law],\"/\", models[1], \"/\", types[type],\"/\", operations[operation],\"/\",rates[rate],\"/\",\"input.t\"}, data_in_vec_d);\n\t$readmemh({\"../sw/mc_model/vector_out/\",laws[law],\"/\", models[1], \"/\", types[type],\"/\", operations[operation],\"/\",rates[rate],\"/\",\"output.t\"}, data_out_vec_d);\n\nend",
        "initial begin\n  rates[0]      = \"40\";\n  rates[1]      = \"32\";\n  rates[2]      = \"24\";\n  rates[3]      = \"16\";\n  laws[0]       = \"AA\";\n  laws[1]       = \"MM\";  \n  laws[2]       = \"AM\";\n  laws[3]       = \"MA\";\n  operations[0] = \"nrm\";\n  operations[1] = \"ovr\";\n  operations[2] = \"i\";\n  types[0]      = \"reset\";\n  types[1]      = \"homing\";\n  models[0]     = \"enc\";\n  models[1]     = \"dec\";\nend"
    ]
}