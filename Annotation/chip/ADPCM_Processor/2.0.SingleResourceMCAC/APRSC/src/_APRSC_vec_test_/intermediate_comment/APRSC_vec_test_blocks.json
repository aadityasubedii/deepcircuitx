{
    "line_num": [
        [
            506,
            537
        ],
        [
            483,
            504
        ],
        [
            154,
            481
        ],
        [
            152,
            152
        ],
        [
            149,
            149
        ],
        [
            125,
            146
        ]
    ],
    "blocks": [
        "task wb_read_strobe;\n\t\n\tinput [31:0] wb_address_test;\t\t\t\t\n\tinput\t\t check_for_truth;\n\tinput [31:0] truth_data_test;\n\n\tbegin\n\t\t@(posedge clk) begin\n\t\t\ti_wb_adr <= wb_address_test;\t\n\t\t\ti_wb_cyc <= 1'b1;\t\t\t\n\t\t\ti_wb_stb <= 1'b1;\t\t\t\n\t\t\ti_wb_we  <= 1'b0;\t\t\t\n\t\tend\n\n\t\t@(posedge clk);\n\n\t\t@(posedge clk) begin\n\t\t\ti_wb_cyc <= 1'b0;\n\t\t\ti_wb_stb <= 1'b0;\n\t\tend\n\n\t\tif (check_for_truth) begin\n\t\t\tif (o_wb_dat !== truth_data_test) begin\n\t\t\t\t$display(\"%t ERROR: failure found when truth_data = %h. Is %h but should be %h\",\n\t\t\t  \t$time, truth_data_test, o_wb_dat, truth_data_test); \n\t\t\t\t`ifdef ERRORSTOP\n\t\t\t\t\t$stop;\n\t\t\t\t`endif\n\t\t\tend\n\t\tend\n\tend\nendtask",
        "task wb_write_strobe;\n\t\n\tinput [31:0] wb_waddress_test;\t\n\tinput [31:0] wb_data_test;\t\t\n\n\tbegin\n\t\t@(posedge clk) begin\t\t\t\n\t\t\ti_wb_adr <= wb_waddress_test;\t\n\t\t\ti_wb_cyc <= 1'b1;\t\t\t\n\t\t\ti_wb_stb <= 1'b1;\t\t\t\n\t\t\ti_wb_we  <= 1'b1;\t\t\t\n\t\t\ti_wb_dat <= wb_data_test;\t\n\t\tend\n\n\n\t\t@(posedge clk) begin\n\t\t\ti_wb_we  <= 1'b0;\t\t\t\n\t\t\ti_wb_cyc <= 1'b0;\t\t\t\n\t\t\ti_wb_stb <= 1'b0;\t\t\t\n\t\tend\n\tend\nendtask",
        "initial\nbegin\n    $timeformat(-9,2,\"ns\", 16);\n`ifdef SDFSCAN\n    $sdf_annotate(\"sdf/APRSC_saed32nm_scan.sdf\", test.top);\n`endif\n    clk = 1'b0;\n    CoPrclk = 1'b0;\n    reset = 1'b0;\n    scan_in0 = 1'b0;\n    scan_in1 = 1'b0;\n    scan_in2 = 1'b0;\n    scan_in3 = 1'b0;\n    scan_in4 = 1'b0;\n    scan_enable = 1'b0;\n    test_mode = 1'b0;\n    wait_for_ack = 1'b1;\n\n    i_wb_adr <= 32'h0000_0000;\n    i_wb_sel <= 4'h0;\n    i_wb_we <= 1'b0;\n    i_wb_dat <= 32'h0000_0000;\n    i_wb_cyc <= 1'b0;\n    i_wb_stb <= 1'b0;\n\n    j = 0;\n    k = 0;\n    test_channel = 0;\n    dq = 0;\n    tr = 0;\n    rate_in = 0;\n    req = 1'b0;\n\n\nrepeat(4) begin\n    @(posedge CoPrclk)\n   reset <= 1'b1;\nend\n   @(posedge CoPrclk)\n   reset <= 1'b0;\n\nrepeat(2) begin\n    @(posedge CoPrclk)\n   test_mode <= 1'b1;\nend\n   @(posedge CoPrclk)\n   test_mode <= 1'b0;\n\n\nrepeat(4) begin\n    @(posedge CoPrclk)\n    reset <= 1'b1;\nend\n   @(posedge CoPrclk)\n   reset <= 1'b0;\n\n\n  for (model=0; model<2; model=model+1) begin\n    for (rate=0; rate<4; rate=rate+1) begin\n      for (operation=0; operation<3; operation = operation+1) begin\n        if(!(model==0 && operation==2)) begin \n          for (type=0; type<2; type=type+1) begin\n            for (law=0; law<2; law=law+1) begin\n              $display(\"Current channel being tested with main vectors is: %d\", test_channel);            \n\n              $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              \tloop = vectorSizes[0];\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, dqs);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"tr.t\"}, trs);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"se.t\"}, ses);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a2p.t\"}, a2ps);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"sr.t\"}, srs);\n\t\t\n                \n                if(model==0) begin\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, dq_null);\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"tr.t\"}, tr_null);\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"se.t\"}, se_null);\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"a2p.t\"}, a2p_null);\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"sr.t\"}, sr_null);\n                end\n\n                @(posedge CoPrclk);\n\n                \n                repeat(4)\n                begin\n                    @(posedge CoPrclk)\n                    reset <= 1'b1;\n                end\n                @(posedge CoPrclk)\n             \treset <= 1'b0;\n                @(posedge CoPrclk);\n\n                for (j=0; j<loop; j=j+1)  begin \n                    for(k=0; k<32; k=k+1) begin\n                        if(k==test_channel) begin \n                            wb_write_strobe({16'h0000, APRSC_DQ}, {8'h00, dqs[j]});\n                            wb_write_strobe({16'h0000, APRSC_TR}, {8'h00, trs[j]});\n                            wb_write_strobe({16'h0000, APRSC_RATE}, rate);\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0001);\n                            repeat(4)\n                            @(negedge CoPrclk);\n                            while(wait_for_ack) begin\n\t                      \twb_read_strobe({16'h0000, APRSC_ACK}, 1'b0, 32'h0000_0000);\n\t                      \tif (o_wb_dat[0] == 1'b1) begin\n\t                        \twait_for_ack = 1'b0;\n\t                      \tend\n\t\t\t\t\t@(posedge clk);\n                            end\n                            wait_for_ack = 1'b1;\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n                            wb_read_strobe({16'h0000, APRSC_SE}, 1'b1, {8'h00, ses[j]});\n                            wb_read_strobe({16'h0000, APRSC_SR}, 1'b1, {8'h00, srs[j]});\n                            wb_read_strobe({16'h0000, APRSC_A2P}, 1'b1, {8'h00, a2ps[j]});\n                            @(posedge CoPrclk);\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n                        end \n                    else begin \n\t\t\tif(model==0) begin \n                            wb_write_strobe({16'h0000, APRSC_DQ}, {8'h00, dq_null[j]});\n                            wb_write_strobe({16'h0000, APRSC_TR}, {8'h00, tr_null[j]});\n                            wb_write_strobe({16'h0000, APRSC_RATE}, rate);\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0001);\n\t\t                repeat(4)\n\t\t                @(negedge CoPrclk);\n\t\t                while(wait_for_ack) begin\n\t\t\t          \twb_read_strobe({16'h0000, APRSC_ACK}, 1'b0, 32'h0000_0000);\n\t\t\t              \tif (o_wb_dat[0] == 1'b1) begin\n\t\t\t                \twait_for_ack = 1'b0;\n\t\t\t              \tend\n\t\t\t\t\t\t@(posedge clk);\n\t\t                end\n                            wait_for_ack = 1'b1;\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n                            wb_read_strobe({16'h0000, APRSC_SE}, 1'b1, {8'h00, se_null[j]});\n                            wb_read_strobe({16'h0000, APRSC_SR}, 1'b1, {8'h00, sr_null[j]});\n                            wb_read_strobe({16'h0000, APRSC_A2P}, 1'b1, {8'h00, a2p_null[j]});\n                            @(posedge CoPrclk);\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n\t\t\tend \n\t\t\telse begin \n\t\t                wb_write_strobe({16'h0000, APRSC_DQ}, 32'h0000_0000);\n\t\t                wb_write_strobe({16'h0000, APRSC_TR}, 32'h0000_0000);\n\t\t                wb_write_strobe({16'h0000, APRSC_RATE}, rate);\n\t\t                wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0001);\n\t\t                repeat(4)\n\t\t                @(negedge CoPrclk);\n\t\t                while(wait_for_ack) begin\n\t\t\t          \twb_read_strobe({16'h0000, APRSC_ACK}, 1'b0, 32'h0000_0000);\n\t\t\t              \tif (o_wb_dat[0] == 1'b1) begin\n\t\t\t                \twait_for_ack = 1'b0;\n\t\t\t              \tend\n\t\t\t\t\t\t@(posedge clk);\n\t\t                end\n\t\t                wait_for_ack = 1'b1;\n\t\t                wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n                                wb_read_strobe({16'h0000, APRSC_SE}, 1'b0, {8'h00, ses[j]});\n                                wb_read_strobe({16'h0000, APRSC_SR}, 1'b0, {8'h00, srs[j]});\n                                wb_read_strobe({16'h0000, APRSC_A2P}, 1'b0, {8'h00, a2ps[j]});\n\t\t                @(posedge CoPrclk);\n\t\t                @(posedge CoPrclk);\n\t\t\tend \n                    end \n                    repeat(2)\n                        @(posedge CoPrclk);\n                end \n                @(posedge CoPrclk);\n              end \n              if(test_channel==31) test_channel = 0;\n              else test_channel = test_channel + 1;\n            end \n          end \n        end \n      end \n    end \n  end \n\n  test_channel = 0;\n\n  \n  for (model=0; model<2; model=model+1) begin\n    for (rate=0; rate<4; rate=rate+1) begin\n      for (operation=0; operation<2; operation = operation+1) begin\n        for (type=0; type<2; type=type+1) begin\n          if(!(model==0 && type==1)) begin \n            for (law=2; law<4; law=law+1) begin\n                $display(\"Current channel being tested with main vectors is: %d\", test_channel);\n\n                $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                    operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n                loop = vectorSizes[0];\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, dqs);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"tr.t\"}, trs);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"se.t\"}, ses);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a2p.t\"}, a2ps);\n                $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"sr.t\"}, srs);\n\n                \n                if(model==0) begin\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"dq.t\"}, dq_null);\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"tr.t\"}, tr_null);\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"se.t\"}, se_null);\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"a2p.t\"}, a2p_null);\n                  $readmemh({\"../sw/sc_model/null_vectors/output/\",laws_null[law],\"/\", types[type],\"/\",\n                  operations[operation],\"/\",rates[rate],\"/\",\"sr.t\"}, sr_null);\n                end\n                @(posedge CoPrclk);\n\n                \n                repeat(4)\n                begin\n                    @(posedge CoPrclk)\n                    reset <= 1'b1;\n                end\n                @(posedge CoPrclk)\n             \treset <= 1'b0;\n                @(posedge CoPrclk);\n\n                for (j=0; j<loop; j=j+1)  begin \n                    for(k=0; k<32; k=k+1) begin\n                        if(k==test_channel) begin \n                            wb_write_strobe({16'h0000, APRSC_DQ}, {8'h00, dqs[j]});\n                            wb_write_strobe({16'h0000, APRSC_TR}, {8'h00, trs[j]});\n                            wb_write_strobe({16'h0000, APRSC_RATE}, rate);\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0001);\n                            repeat(4)\n                            @(negedge CoPrclk);\n                            while(wait_for_ack) begin\n\t                      \twb_read_strobe({16'h0000, APRSC_ACK}, 1'b0, 32'h0000_0000);\n\t                      \tif (o_wb_dat[0] == 1'b1) begin\n\t                        \twait_for_ack = 1'b0;\n\t                      \tend\n\t\t\t\t\t@(posedge clk);\n                            end\n                            wait_for_ack = 1'b1;\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n                            wb_read_strobe({16'h0000, APRSC_SE}, 1'b1, {8'h00, ses[j]});\n                            wb_read_strobe({16'h0000, APRSC_SR}, 1'b1, {8'h00, srs[j]});\n                            wb_read_strobe({16'h0000, APRSC_A2P}, 1'b1, {8'h00, a2ps[j]});\n                            @(posedge CoPrclk);\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n                        end \n                    else begin \n\t\t\tif(model==0) begin \n                            wb_write_strobe({16'h0000, APRSC_DQ}, {8'h00, dq_null[j]});\n                            wb_write_strobe({16'h0000, APRSC_TR}, {8'h00, tr_null[j]});\n                            wb_write_strobe({16'h0000, APRSC_RATE}, rate);\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0001);\n\t\t                repeat(4)\n\t\t                @(negedge CoPrclk);\n\t\t                while(wait_for_ack) begin\n\t\t\t          \twb_read_strobe({16'h0000, APRSC_ACK}, 1'b0, 32'h0000_0000);\n\t\t\t              \tif (o_wb_dat[0] == 1'b1) begin\n\t\t\t                \twait_for_ack = 1'b0;\n\t\t\t              \tend\n\t\t\t\t\t\t@(posedge clk);\n\t\t                end\n                            wait_for_ack = 1'b1;\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n                            wb_read_strobe({16'h0000, APRSC_SE}, 1'b1, {8'h00, se_null[j]});\n                            wb_read_strobe({16'h0000, APRSC_SR}, 1'b1, {8'h00, sr_null[j]});\n                            wb_read_strobe({16'h0000, APRSC_A2P}, 1'b1, {8'h00, a2p_null[j]});\n                            @(posedge CoPrclk);\n                            wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n\t\t\tend \n\t\t\telse begin \n\t\t                wb_write_strobe({16'h0000, APRSC_DQ}, 32'h0000_0000);\n\t\t                wb_write_strobe({16'h0000, APRSC_TR}, 32'h0000_0000);\n\t\t                wb_write_strobe({16'h0000, APRSC_RATE}, rate);\n\t\t                wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0001);\n\t\t                repeat(4)\n\t\t                @(negedge CoPrclk);\n\t\t                while(wait_for_ack) begin\n\t\t\t          \twb_read_strobe({16'h0000, APRSC_ACK}, 1'b0, 32'h0000_0000);\n\t\t\t              \tif (o_wb_dat[0] == 1'b1) begin\n\t\t\t                \twait_for_ack = 1'b0;\n\t\t\t              \tend\n\t\t\t\t\t\t@(posedge clk);\n\t\t                end\n\t\t                wait_for_ack = 1'b1;\n\t\t                wb_write_strobe({16'h0000, APRSC_REQ}, 32'h0000_0000);\n                                wb_read_strobe({16'h0000, APRSC_SE}, 1'b0, {8'h00, ses[j]});\n                                wb_read_strobe({16'h0000, APRSC_SR}, 1'b0, {8'h00, srs[j]});\n                                wb_read_strobe({16'h0000, APRSC_A2P}, 1'b0, {8'h00, a2ps[j]});\n\t\t                @(posedge CoPrclk);\n\t\t                @(posedge CoPrclk);\n\t\t\tend \n                    end \n                    repeat(2)\n                        @(posedge CoPrclk);\n                end \n                @(posedge CoPrclk);\n              end \n              if(test_channel==31) test_channel = 0;\n              else test_channel = test_channel + 1;\n            end \n          end \n        end \n      end \n    end \n  end \n\n#10 $display(\"%t TEST COMPLETE\", $time);\n  $finish;\nend ",
        "always #(`CO_PROC_PERIOD/2) CoPrclk = ~CoPrclk;",
        "always #(`SYS_CLK_PERIOD/2) clk = ~clk;",
        "initial begin\n  rates[0]      = \"40\";\n  rates[1]      = \"32\";\n  rates[2]      = \"24\";\n  rates[3]      = \"16\";\n  laws[0]       = \"AA\";\n  laws[1]       = \"MM\";  \n  laws[2]       = \"AM\";\n  laws[3]       = \"MA\";\n  operations[0] = \"nrm\";\n  operations[1] = \"ovr\";\n  operations[2] = \"i\";\n  types[0]      = \"reset\";\n  types[1]      = \"homing\";\n  models[0]     = \"enc\";\n  models[1]     = \"dec\";\n\n  laws_null[0]  = \"A\";\n  laws_null[1]  = \"M\";\n  laws_null[2]  = \"A\";\n  laws_null[3]  = \"M\";\nend"
    ]
}