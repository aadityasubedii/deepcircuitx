{
    "line_num": [
        [
            1106,
            1106
        ],
        [
            1089,
            1102
        ],
        [
            1074,
            1087
        ],
        [
            1070,
            1070
        ],
        [
            1042,
            1063
        ],
        [
            993,
            1034
        ],
        [
            967,
            991
        ],
        [
            943,
            964
        ],
        [
            932,
            938
        ],
        [
            929,
            929
        ],
        [
            910,
            921
        ],
        [
            841,
            892
        ],
        [
            814,
            836
        ],
        [
            668,
            809
        ],
        [
            661,
            661
        ],
        [
            653,
            659
        ],
        [
            639,
            648
        ],
        [
            633,
            633
        ],
        [
            631,
            631
        ],
        [
            529,
            625
        ],
        [
            500,
            517
        ],
        [
            489,
            495
        ],
        [
            417,
            484
        ],
        [
            413,
            413
        ],
        [
            412,
            412
        ],
        [
            411,
            411
        ],
        [
            409,
            409
        ],
        [
            408,
            408
        ],
        [
            406,
            407
        ],
        [
            404,
            404
        ],
        [
            396,
            396
        ],
        [
            393,
            394
        ],
        [
            382,
            391
        ],
        [
            358,
            376
        ],
        [
            279,
            350
        ],
        [
            273,
            276
        ],
        [
            251,
            266
        ],
        [
            249,
            249
        ],
        [
            248,
            248
        ],
        [
            240,
            246
        ]
    ],
    "blocks": [
        "endmodule",
        "assign xRXD_STATE      = rxd_state == RXD_IDLE       ? \"RXD_IDLE\"      :\n                         rxd_state == RXD_START      ? \"RXD_START\"     :\n                         rxd_state == RXD_START_MID1 ? \"RXD_START_MID1\":\n                         rxd_state == RXD_START_MID  ? \"RXD_START_MID\" :\n                         rxd_state == RXD_DATA0      ? \"RXD_DATA0\"     :\n                         rxd_state == RXD_DATA1      ? \"RXD_DATA1\"     :\n                         rxd_state == RXD_DATA2      ? \"RXD_DATA2\"     :\n                         rxd_state == RXD_DATA3      ? \"RXD_DATA3\"     :\n                         rxd_state == RXD_DATA4      ? \"RXD_DATA4\"     :\n                         rxd_state == RXD_DATA5      ? \"RXD_DATA5\"     :\n                         rxd_state == RXD_DATA6      ? \"RXD_DATA6\"     :\n                         rxd_state == RXD_DATA7      ? \"RXD_DATA7\"     :\n                         rxd_state == RXD_STOP       ? \"RXD_STOP\"      :\n                                                       \"UNKNOWN\"       ;",
        "assign xTXD_STATE      = txd_state == TXD_IDLE       ? \"TXD_IDLE\"   :\n                         txd_state == TXD_START      ? \"TXD_START\"  :\n                         txd_state == TXD_DATA0      ? \"TXD_DATA0\"  :\n                         txd_state == TXD_DATA1      ? \"TXD_DATA1\"  :\n                         txd_state == TXD_DATA2      ? \"TXD_DATA2\"  :\n                         txd_state == TXD_DATA3      ? \"TXD_DATA3\"  :\n                         txd_state == TXD_DATA4      ? \"TXD_DATA4\"  :\n                         txd_state == TXD_DATA5      ? \"TXD_DATA5\"  :\n                         txd_state == TXD_DATA6      ? \"TXD_DATA6\"  :\n                         txd_state == TXD_DATA7      ? \"TXD_DATA7\"  :\n                         txd_state == TXD_STOP1      ? \"TXD_STOP1\"  :\n                         txd_state == TXD_STOP2      ? \"TXD_STOP2\"  :\n                         txd_state == TXD_STOP3      ? \"TXD_STOP3\"  :\n                                                       \"UNKNOWN\"    ;",
        "wire    [(10*8)-1:0]    xTXD_STATE;",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\n\tend else begin\n\t    if ( rx_fifo_pop  && !rx_fifo_push && rx_fifo_empty )\n\t\t  begin\n\t\t  `TB_WARNING_MESSAGE\n\t\t  $write(\"UART rx FIFO underflow\\n\");\n\t\t  end\n\t    if ( !rx_fifo_pop  && rx_fifo_push && rx_fifo_full )\n\t\t  begin\n\t\t  `TB_WARNING_MESSAGE\n\t\t  $write(\"UART rx FIFO overflow\\n\");\n\t\t  end\n\n\t    if ( tx_fifo_push && tx_fifo_full )\n\t\t  begin\n\t\t  `TB_WARNING_MESSAGE\n\t\t  $display(\"UART tx FIFO overflow - char = %c\", wb_wdata32[7:0]);\n\t\t  end\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\n\tend else begin\n\t    if ( wb_read_ack || wb_start_write )\n\t\t  begin\n\t\t  `TB_DEBUG_MESSAGE\n\t\t  \n\t\t  if ( wb_start_write )\n\t\t      $write(\"Write 0x%08x to   \", wb_wdata32);\n\t\t  else\n\t\t      $write(\"Read  0x%08x from \", o_wb_dat);\n\t\t      \n\t\t  case ( i_wb_adr[15:0] )\n\t\t      AMBER_UART_PID0:    $write(\"UART PID0 register\"); \n\t\t      AMBER_UART_PID1:    $write(\"UART PID1 register\"); \n\t\t      AMBER_UART_PID2:    $write(\"UART PID2 register\"); \n\t\t      AMBER_UART_PID3:    $write(\"UART PID3 register\"); \n\t\t      AMBER_UART_CID0:    $write(\"UART CID0 register\"); \n\t\t      AMBER_UART_CID1:    $write(\"UART CID1 register\"); \n\t\t      AMBER_UART_CID2:    $write(\"UART CID2 register\"); \n\t\t      AMBER_UART_CID3:    $write(\"UART CID3 register\"); \n\t\t      AMBER_UART_DR:      $write(\"UART Tx/Rx char %c\", wb_start_write ? wb_wdata32[7:0] : o_wb_dat[7:0] );\n\t\t      AMBER_UART_RSR:     $write(\"UART (Read) Receive status, (Write) Error Clear\");\n\t\t      AMBER_UART_LCRH:    $write(\"UART Line Control High Byte\");\n\t\t      AMBER_UART_LCRM:    $write(\"UART Line Control Middle Byte\");\n\t\t      AMBER_UART_LCRL:    $write(\"UART Line Control Low Byte\");\n\t\t      AMBER_UART_CR:      $write(\"UART Control Register\");\n\t\t      AMBER_UART_FR:      $write(\"UART Flag Register\");\n\t\t      AMBER_UART_IIR:     $write(\"UART (Read) Interrupt Identification Register\");\n\n\t\t      default:\n\t\t          begin\n\t\t          `TB_ERROR_MESSAGE\n\t\t          $write(\"Unknown UART Register region\");\n\t\t          end\n\t\t  endcase\n\t\t  \n\t\t  $write(\", Address 0x%08h\\n\", i_wb_adr); \n\t\t  end\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\n\tend else begin\n\t    uart0_rx_int_d1 <= rx_interrupt;\n\n\t    if ( rx_interrupt && !uart0_rx_int_d1 )\n\t\t  begin\n\t\t  `TB_DEBUG_MESSAGE\n\t\t  $display(\"rx_interrupt Interrupt fifo_enable %d, rx_fifo_full %d\", \n\t\t           fifo_enable, rx_fifo_full);\n\t\t  $display(\"rx_fifo_half_or_more %d, rx_int_timer 0x%08h, rx_fifo_count %d\", \n\t\t           rx_fifo_half_or_more, rx_int_timer, rx_fifo_count);\n\t\t  end\n\t\t  \n\t    if ( !rx_interrupt && uart0_rx_int_d1 )\n\t\t  begin\n\t\t  `TB_DEBUG_MESSAGE\n\t\t  $display(\"rx_interrupt Interrupt Cleared fifo_enable %d, rx_fifo_full %d\", \n\t\t           fifo_enable, rx_fifo_full);\n\t\t  $display(\"    rx_fifo_half_or_more %d, rx_int_timer 0x%08h, rx_fifo_count %d\", \n\t\t           rx_fifo_half_or_more, rx_int_timer, rx_fifo_count);\n\t\t  end\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\n\tend else begin\n\t    if ( wb_start_write && i_wb_adr[15:0] == AMBER_UART_ICR )\n\t\t      ;\n\t    else if ( fifo_enable ) \n\t\t  begin\n\t\t  if (tx_interrupt == 1'd0 && tx_fifo_half_or_less_full && uart_cr_reg[5])\n\t\t      $display(\"%m: tx_interrupt Interrupt Set with FIFO enabled\");\n\t\t  if (tx_interrupt == 1'd1 && !(tx_fifo_half_or_less_full && uart_cr_reg[5]))\n\t\t      $display(\"%m: tx_interrupt Interrupt Cleared with FIFO enabled\");\n\t\t  end\n\t    else\n\t\t  begin\n\t\t  if (tx_interrupt == 1'd0 && tx_fifo_empty && uart_cr_reg[5])\n\t\t      $display(\"%m: tx_interrupt Interrupt Set with FIFO disabled\");\n\t\t  if (tx_interrupt == 1'd1 && !(tx_fifo_empty && uart_cr_reg[5]))\n\t\t      $display(\"%m: tx_interrupt Interrupt Cleared with FIFO disabled\");\n\t\t  end\n\tend\nend",
        "initial\n    begin\n    $display(\"%m UART period = %f nS, want %f nS, %d, %d\", \n             (TX_BITPULSE_COUNT*11 + TX_BITADJUST_COUNT) * CLK_PERIOD,\n             UART_WORD_PERIOD,\n             TX_BITPULSE_COUNT, TX_BITADJUST_COUNT);\n    end",
        "assign wb_read_ack = i_wb_stb && !i_wb_we &&  o_wb_ack;",
        "initial\n    begin\n    if ((( TX_BITPULSE_COUNT * CLK_PERIOD ) > (UART_BIT_PERIOD * 1.03) ) ||\n        (( TX_BITPULSE_COUNT * CLK_PERIOD ) < (UART_BIT_PERIOD * 0.97) ) )\n        begin\n        `TB_ERROR_MESSAGE\n        $display(\"UART TX bit period, %.1f, is too big. UART will not work!\", TX_BITPULSE_COUNT * CLK_PERIOD);\n        $display(\"Baud rate is %f, and baud bit period is %.1f\", UART_BAUD, UART_BIT_PERIOD);\n        $display(\"Either reduce the baud rate, or increase the system clock frequency\");\n        $display(\"------\");\n        end\n    end",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\twb_rdata32 <= 'd0;\n\tend else begin\n\t    if ( wb_start_read )\n\t\t  case ( i_wb_adr[15:0] )\n\t\t  \n\t\t      AMBER_UART_CID0:    wb_rdata32 <= 32'h0d;\n\t\t      AMBER_UART_CID1:    wb_rdata32 <= 32'hf0;\n\t\t      AMBER_UART_CID2:    wb_rdata32 <= 32'h05;\n\t\t      AMBER_UART_CID3:    wb_rdata32 <= 32'hb1;\n\t\t      AMBER_UART_PID0:    wb_rdata32 <= 32'h10;\n\t\t      AMBER_UART_PID1:    wb_rdata32 <= 32'h10;\n\t\t      AMBER_UART_PID2:    wb_rdata32 <= 32'h04;\n\t\t      AMBER_UART_PID3:    wb_rdata32 <= 32'h00;\n\t\t      \n\t\t      AMBER_UART_DR:      \n\t\t              if ( fifo_enable )\n\t\t                  wb_rdata32 <= {24'd0, rx_fifo[rx_fifo_rp[3:0]]};\n\t\t              else    \n\t\t                  wb_rdata32 <= {24'd0, rx_fifo[0]};\n\t\t                                \n\t\t      AMBER_UART_RSR:     wb_rdata32 <= uart_rsr_reg;          \n\t\t      AMBER_UART_LCRH:    wb_rdata32 <= uart_lcrh_reg;         \n\t\t      AMBER_UART_LCRM:    wb_rdata32 <= uart_lcrm_reg;         \n\t\t      AMBER_UART_LCRL:    wb_rdata32 <= uart_lcrl_reg;         \n\t\t      AMBER_UART_CR:      wb_rdata32 <= uart_cr_reg;           \n\t\t      \n\t\t      \n\t\t      AMBER_UART_FR:      wb_rdata32 <= {tx_fifo_empty,       \n\t\t                                       rx_fifo_full,        \n\t\t                                       tx_fifo_full,        \n\t\t                                       rx_fifo_empty,       \n\t\t                                       !tx_fifo_empty,      \n\t\t                                       1'd1,                 \n\t\t                                       1'd1,                 \n\t\t                                       !uart0_cts_n_d[3]     \n\t\t                                       };                    \n\t\t      \n\t\t      \n\t\t      AMBER_UART_IIR:     wb_rdata32 <= {5'd0, \n\t\t                                       1'd0,                 \n\t\t                                       tx_interrupt,         \n\t\t                                       rx_interrupt,         \n\t\t                                       1'd0                  \n\t\t                                      };                     \n\t\t                                      \n\t\t      default:            wb_rdata32 <= 32'h00c0ffee;\n\t\t      \n\t\t  endcase\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tuart_rsr_reg <= 'd0;\n\t\tuart_lcrh_reg <= 'd0;\n\t\tuart_lcrm_reg <= 'd0;\n\t\tuart_lcrl_reg <= 'd0;\n\t\tuart_cr_reg <= 'd0;\n\tend else begin\n\t    if ( wb_start_write )\n\t\t  case ( i_wb_adr[15:0] )\n\t\t      \n\t\t      AMBER_UART_RSR:  uart_rsr_reg      <= wb_wdata32[7:0];\n\t\t      \n\t\t      AMBER_UART_LCRH: uart_lcrh_reg     <= wb_wdata32[7:0];\n\t\t      \n\t\t      AMBER_UART_LCRM: uart_lcrm_reg     <= wb_wdata32[7:0];\n\t\t      \n\t\t      AMBER_UART_LCRL: uart_lcrl_reg     <= wb_wdata32[7:0];\n\t\t      \n\t\t      AMBER_UART_CR:   uart_cr_reg       <= wb_wdata32[7:0];\n\t\t  endcase\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\trx_byte <= 'd0;\n\t\trxd_state <= RXD_IDLE;\n\t\trxen <= 'd0;\n\t\trestart_rx_bit_count <= 'd0;\n\tend else begin\n\t    case ( rxd_state )\n\t    \n\t\t  RXD_IDLE :\n\t\t      if ( rx_fifo_full )\n\t\t          rxen                    <= 1'd0;\n\t\t      else\n\t\t          begin\n\t\t          rxd_state               <= RXD_START;\n\t\t          rxen                    <= 1'd1;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte                 <= 'd0;\n\t\t          end\n\t\t      \n\t\t  RXD_START : \n\t\t      \n\t\t      if ( rx_start ) \n\t\t          begin\n\t\t          rxd_state               <= RXD_START_MID1;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\n\t\t  \n\t\t  \n\t\t  \n\t\t  RXD_START_MID1 :\n\t\t      rxd_state               <= RXD_START_MID;\n\t\t      \n\t\t  RXD_START_MID :\n\t\t      if ( rx_bit_pulse_count == RX_HALFPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_DATA0;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_DATA0 :\n\t\t      if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_DATA1;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte[0]              <= i_uart_rxd;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_DATA1 :\n\t\t      if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_DATA2;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte[1]              <= i_uart_rxd;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_DATA2 :\n\t\t      if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_DATA3;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte[2]              <= i_uart_rxd;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_DATA3 :\n\t\t      if ( rx_bit_pulse_count == RX_BITPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_DATA4;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte[3]              <= i_uart_rxd;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_DATA4 :\n\t\t      if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_DATA5;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte[4]              <= i_uart_rxd;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_DATA5 :\n\t\t      if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_DATA6;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte[5]              <= i_uart_rxd;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_DATA6 :\n\t\t      if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_DATA7;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte[6]              <= i_uart_rxd;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_DATA7 :\n\t\t      if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )\n\t\t          begin\n\t\t          rxd_state               <= RXD_STOP;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          rx_byte[7]              <= i_uart_rxd;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  RXD_STOP :\n\t\t      if ( rx_bit_pulse_count ==  RX_BITPULSE_COUNT )  \n\t\t          begin\n\t\t          rxd_state               <= RXD_IDLE;\n\t\t          restart_rx_bit_count    <= 1'd1;\n\t\t          end\n\t\t      else    \n\t\t          restart_rx_bit_count    <= 1'd0;\n\t\t      \n\t\t  default :\n\t\t      begin\n\t\t      rxd_state       <= RXD_IDLE;\n\t\t      end\n\t\t      \n\t    endcase\n\tend\nend",
        "assign rx_start = rxd_d[4:3] == 2'b11 && rxd_d[1:0] == 2'b00;",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\trxd_d <= 5'h1f;\n\tend else begin\n\t\trxd_d[4:0] <= {rxd_d[3:0], i_uart_rxd};\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\trx_bit_pulse_count <= 'd0;\n\tend else begin\n\t    if ( restart_rx_bit_count )\n\t\t  rx_bit_pulse_count <= 'd0;\n\t    else\n\t\t  rx_bit_pulse_count <= rx_bit_pulse_count + 1'd1;\n\tend\nend",
        "assign rx_fifo_push  = rxd_state == RXD_STOP && rx_bit_pulse_count == 10'd0;",
        "assign o_uart_rts_n  = ~rxen;",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\ttxd_state <= TXD_IDLE;\n\t\ttxd <= 1'd1;\n\tend else begin\n\t    if ( tx_bit_pulse )\n\t    \n\t\t  case ( txd_state )\n\t\t  \n\t\t      TXD_IDLE :\n\t\t          begin\n\t\t          txd       <= 1'd1;\n\t\t          \n\t\t          if ( uart0_cts_n_d[3:1] == 3'b000 && !tx_fifo_empty )\n\t\t              txd_state <= TXD_START;\n\t\t          end\n\t\t          \n\t\t      TXD_START :\n\t\t          begin\n\t\t          txd       <= 1'd0;\n\t\t          txd_state <= TXD_DATA0;\n\t\t          end\n\t\t          \n\t\t      TXD_DATA0 :\n\t\t          begin\n\t\t          txd       <= tx_byte[0];\n\t\t          txd_state <= TXD_DATA1;\n\t\t          end\n\t\t          \n\t\t      TXD_DATA1 :\n\t\t          begin\n\t\t          txd       <= tx_byte[1];\n\t\t          txd_state <= TXD_DATA2;\n\t\t          end\n\t\t          \n\t\t      TXD_DATA2 :\n\t\t          begin\n\t\t          txd       <= tx_byte[2];\n\t\t          txd_state <= TXD_DATA3;\n\t\t          end\n\t\t          \n\t\t      TXD_DATA3 :\n\t\t          begin\n\t\t          txd       <= tx_byte[3];\n\t\t          txd_state <= TXD_DATA4;\n\t\t          end\n\t\t          \n\t\t      TXD_DATA4 :\n\t\t          begin\n\t\t          txd       <= tx_byte[4];\n\t\t          txd_state <= TXD_DATA5;\n\t\t          end\n\t\t          \n\t\t      TXD_DATA5 :\n\t\t          begin\n\t\t          txd       <= tx_byte[5];\n\t\t          txd_state <= TXD_DATA6;\n\t\t          end\n\t\t          \n\t\t      TXD_DATA6 :\n\t\t          begin\n\t\t          txd       <= tx_byte[6];\n\t\t          txd_state <= TXD_DATA7;\n\t\t          end\n\t\t          \n\t\t      TXD_DATA7 :\n\t\t          begin\n\t\t          txd       <= tx_byte[7];\n\t\t          txd_state <= TXD_STOP1;\n\t\t          end\n\t\t          \n\t\t      TXD_STOP1 :\n\t\t          begin\n\t\t          txd       <= 1'd1;\n\t\t          txd_state <= TXD_STOP2;\n\t\t          end\n\n\t\t      TXD_STOP2 :\n\t\t          begin\n\t\t          txd       <= 1'd1;\n\t\t          txd_state <= TXD_STOP3;\n\t\t          end\n\t\t          \n\t\t      TXD_STOP3 :\n\t\t          begin\n\t\t          txd       <= 1'd1;\n\t\t          txd_state <= TXD_IDLE;\n\t\t          end\n\t\t          \n\t\t      default :\n\t\t          begin\n\t\t          txd       <= 1'd1;\n\t\t          end\n\t\t          \n\t\t  endcase\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\ttx_bit_pulse <= 'd0;\n\t\ttx_bit_pulse_count <= 'd0;\n\tend else begin\n\t    if (( tx_bit_pulse_count == (TX_BITADJUST_COUNT-1) && txd_state == TXD_STOP2 ) ||\n\t\t  ( tx_bit_pulse_count == (TX_BITPULSE_COUNT-1)  && txd_state != TXD_STOP2 )  )\n\t\t  begin\n\t\t  tx_bit_pulse_count <= 'd0;\n\t\t  tx_bit_pulse       <= 1'd1;\n\t\t  end\n\t    else\n\t\t  begin\n\t\t  tx_bit_pulse_count <= tx_bit_pulse_count + 1'd1;\n\t\t  tx_bit_pulse       <= 1'd0;\n\t\t  end\n\tend\nend",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\tuart0_cts_n_d <= 4'hf;\n\tend else begin\n\t\tuart0_cts_n_d <= {uart0_cts_n_d[2:0], i_uart_cts_n};\n\tend\nend                                  ",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\ttx_fifo[0] <= 'd0;\n\t\ttx_fifo[1] <= 'd0;\n\t\ttx_fifo[2] <= 'd0;\n\t\ttx_fifo[3] <= 'd0;\n\t\ttx_fifo[4] <= 'd0;\n\t\ttx_fifo[5] <= 'd0;\n\t\ttx_fifo[6] <= 'd0;\n\t\ttx_fifo[7] <= 'd0;\n\t\ttx_fifo[8] <= 'd0;\n\t\ttx_fifo[9] <= 'd0;\n\t\ttx_fifo[10] <= 'd0;\n\t\ttx_fifo[11] <= 'd0;\n\t\ttx_fifo[12] <= 'd0;\n\t\ttx_fifo[13] <= 'd0;\n\t\ttx_fifo[14] <= 'd0;\n\t\ttx_fifo[15] <= 'd0;\n\t\ttx_fifo_wp <= 'd0;\n\t\ttx_fifo_rp <= 'd0;\n\t\ttx_fifo_count <= 'd0;\n\t\ttx_fifo_full_flag <= 'd0;\n\tend else begin\n\t    \n\t    if ( fifo_enable )\n\t\t  begin\n\t\t  \n\t\t  if ( tx_fifo_push_not_full )\n\t\t      begin\n\t\t      tx_fifo[tx_fifo_wp[3:0]] <= wb_wdata32[7:0];\n\t\t      tx_fifo_wp <= tx_fifo_wp + 1'd1;\n\t\t      end\n\t\t  \n\t\t      \n\t\t  \n\t\t  if ( tx_fifo_pop_not_empty )\n\t\t      tx_fifo_rp <= tx_fifo_rp + 1'd1;\n\t\t      \n\t\t  \n\t\t  if (tx_fifo_push_not_full && !tx_fifo_pop_not_empty)\n\t\t      tx_fifo_count <= tx_fifo_count + 1'd1;\n\t\t      \n\t\t  \n\t\t  else if (tx_fifo_pop_not_empty  && !tx_fifo_push_not_full)\n\t\t      tx_fifo_count <= tx_fifo_count - 1'd1;\n\t\t  end\n\t\t  \n\t    \n\t    else  \n\t\t  begin\n\t\t  \n\t\t  tx_fifo_wp    <= 'd0;\n\t\t  tx_fifo_rp    <= 'd0;\n\t\t  tx_fifo_count <= 'd0;\n\t\t  \n\t\t  \n\t\t  if ( tx_fifo_push_not_full )\n\t\t      begin\n\t\t      tx_fifo[0]          <= wb_wdata32[7:0];\n\t\t      tx_fifo_full_flag   <= 1'd1;\n\t\t      end\n\t\t  \n\t\t  else if ( tx_fifo_pop_not_empty )\n\t\t      tx_fifo_full_flag   <= 1'd0;\n\n\t\t  end        \n\tend\nend",
        "assign   tx_fifo_pop_not_empty      = txd_state == TXD_STOP3 && tx_bit_pulse == 1'd1 && !tx_fifo_empty;",
        "assign   tx_fifo_push_not_full      = tx_fifo_push && !tx_fifo_full;",
        "assign   tx_fifo_push               = wb_start_write && i_wb_adr[15:0] == AMBER_UART_DR;",
        "assign   tx_byte                    = fifo_enable ? tx_fifo[tx_fifo_rp[3:0]] : tx_fifo[0] ;",
        "assign   tx_fifo_half_or_less_full  =               tx_fifo_count <= 5'd8;",
        "assign   tx_fifo_full               = fifo_enable ? tx_fifo_count >= 5'd16 :  tx_fifo_full_flag;\nassign   tx_fifo_empty              = fifo_enable ? tx_fifo_count == 5'd00 : !tx_fifo_full_flag;",
        "assign   o_uart_txd                 = txd;",
        "assign fifo_enable = uart_lcrh_reg[4];",
        "assign o_uart_int   = ( tx_interrupt & uart_cr_reg[5] )  |  \n                      ( rx_interrupt & uart_cr_reg[4] )  ;  ",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\trx_interrupt <= 'd0;\n\tend else begin\n\t    if (fifo_enable)\n\t\t  rx_interrupt <=  rx_fifo_half_or_more || rx_int_timer == RX_INTERRUPT_COUNT;\n\t    else    \n\t\t  rx_interrupt <=  rx_fifo_full;\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\ttx_interrupt <= 'd0;\n\tend else begin\n\t    \n\t    if ( wb_start_write && i_wb_adr[15:0] == AMBER_UART_ICR )\n\t\t  tx_interrupt <= 1'd0;\n\n\t    \n\t    else if  ( fifo_enable ) \n\t\t  \n\t\t  \n\t\t  tx_interrupt <= tx_fifo_half_or_less_full && uart_cr_reg[5];\n\t    else \n\t\t  \n\t\t  \n\t\t  tx_interrupt <= tx_fifo_empty && uart_cr_reg[5];\n\tend\nend",
        "always @ ( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\trx_int_timer <= 'd0;\n\t\trx_fifo[0] <= 'd0;\n\t\trx_fifo[1] <= 'd0;\n\t\trx_fifo[2] <= 'd0;\n\t\trx_fifo[3] <= 'd0;\n\t\trx_fifo[4] <= 'd0;\n\t\trx_fifo[5] <= 'd0;\n\t\trx_fifo[6] <= 'd0;\n\t\trx_fifo[7] <= 'd0;\n\t\trx_fifo[8] <= 'd0;\n\t\trx_fifo[9] <= 'd0;\n\t\trx_fifo[10] <= 'd0;\n\t\trx_fifo[11] <= 'd0;\n\t\trx_fifo[12] <= 'd0;\n\t\trx_fifo[13] <= 'd0;\n\t\trx_fifo[14] <= 'd0;\n\t\trx_fifo[15] <= 'd0;\n\t\trx_fifo_empty <= 1'd1;\n\t\trx_fifo_full <= 1'd0;\n\t\trx_fifo_count <= 'd0;\t\n\t\trx_fifo_wp <= 'd0;\n\t\trx_fifo_rp <= 'd0;\n\tend else begin\n\t    if ( fifo_enable )\n\t\t  begin\n\t\t  \n\t\t  if ( rx_fifo_push_not_full )\n\t\t      begin\n\t\t      rx_fifo[rx_fifo_wp[3:0]]    <= rx_byte;                \n\t\t      rx_fifo_wp                  <= rx_fifo_wp + 1'd1;\n\t\t      end\n\n\t\t  if ( rx_fifo_pop_not_empty )\n\t\t      begin\n\t\t      rx_fifo_rp                  <= rx_fifo_rp + 1'd1;\n\t\t      end\n\t\t      \n\t\t  if ( rx_fifo_push_not_full && !rx_fifo_pop_not_empty )\n\t\t      rx_fifo_count <= rx_fifo_count + 1'd1;\n\t\t  else if ( rx_fifo_pop_not_empty  && !rx_fifo_push_not_full )\n\t\t      rx_fifo_count <= rx_fifo_count - 1'd1;\n\t\t  \n\t\t  rx_fifo_full  <= rx_fifo_wp == {~rx_fifo_rp[4], rx_fifo_rp[3:0]};\n\t\t  rx_fifo_empty <= rx_fifo_wp == rx_fifo_rp;\n\t\t  \n\t\t  if ( rx_fifo_empty || rx_fifo_pop )\n\t\t      rx_int_timer     <= 'd0;\n\t\t  else if ( rx_int_timer != RX_INTERRUPT_COUNT )\n\t\t      rx_int_timer     <= rx_int_timer + 1'd1;\n\t\t  \n\t\t      \n\t\t  end\n\t    else    \n\t\t  begin\n\t\t  rx_int_timer     <= 'd0;\n\t\t  \n\t\t  if ( rx_fifo_push )\n\t\t      begin\n\t\t      rx_fifo[0]         <= rx_byte;\n\t\t      rx_fifo_empty      <= 1'd0;\n\t\t      rx_fifo_full       <= 1'd1;\n\t\t      end\n\t\t  else if ( rx_fifo_pop )\n\t\t      begin\n\t\t      rx_fifo_empty      <= 1'd1;\n\t\t      rx_fifo_full       <= 1'd0;\n\t\t      end\n\t\t  end\n\tend\nend",
        "assign rx_fifo_pop           = wb_start_read && i_wb_adr[15:0] == AMBER_UART_DR;\nassign rx_fifo_push_not_full = rx_fifo_push && !rx_fifo_full;\nassign rx_fifo_pop_not_empty = rx_fifo_pop && !rx_fifo_empty;\nassign rx_fifo_half_or_more  = rx_fifo_count >= 5'd8;",
        "generate\nif (WB_DWIDTH == 128) \n    begin : wb128\n    assign wb_wdata32   = i_wb_adr[3:2] == 2'd3 ? i_wb_dat[127:96] :\n                          i_wb_adr[3:2] == 2'd2 ? i_wb_dat[ 95:64] :\n                          i_wb_adr[3:2] == 2'd1 ? i_wb_dat[ 63:32] :\n                                                  i_wb_dat[ 31: 0] ;\n                                                                                                                                            \n    assign o_wb_dat    = {4{wb_rdata32}};\n    end\nelse\n    begin : wb32\n    assign wb_wdata32  = i_wb_dat;\n    assign o_wb_dat    = wb_rdata32;\n    end\nendgenerate",
        "assign o_wb_ack = i_wb_stb && ( wb_start_write || wb_start_read_d1 );",
        "assign o_wb_err = 1'd0;",
        "always @( posedge reset, posedge clk ) begin\n\tif (reset) begin\n\t\twb_start_read_d1 <= 'd0;\n\tend else begin\n\t\twb_start_read_d1 <= wb_start_read;\n\tend\nend"
    ]
}