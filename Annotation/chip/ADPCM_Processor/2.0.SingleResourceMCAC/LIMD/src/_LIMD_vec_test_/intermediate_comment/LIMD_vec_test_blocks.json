{
    "line_num": [
        [
            87,
            194
        ],
        [
            85,
            85
        ],
        [
            66,
            82
        ]
    ],
    "blocks": [
        "initial begin\n  $timeformat(-9,2,\"ns\", 16);\n`ifdef SDFSCAN\n  $sdf_annotate(\"sdf/LIMD_tsmc18_scan.sdf\", test.top);\n`endif\n\n  clk         = 1'b0;\n  reset       = 1'b0;\n  scan_in0    = 1'b0;\n  scan_in1    = 1'b0;\n  scan_in2    = 1'b0;\n  scan_in3    = 1'b0;\n  scan_in4    = 1'b0;\n  scan_enable = 1'b0;\n  test_mode   = 1'b0;\n\n  \n  for (model=0; model<2; model=model+1) begin\n    for (rate=0; rate<4; rate=rate+1) begin\n      for (operation=0; operation<3; operation = operation+1) begin\n        if(!(model==0 && operation==2)) begin \n          for (type=0; type<2; type=type+1) begin\n            for (law=0; law<2; law=law+1) begin\n              $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              loop = vectorSizes[0];\n              \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a1t.t\"}, A1Ts);                 \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a2p.t\"}, A2Ps);                 \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a1p.t\"}, A1Ps);                 \n              \n              @(posedge clk);\n              for (j=0; j<loop; j=j+1) begin \n                #1 A1T = A1Ts[j]; A2P = A2Ps[j];\n                @(posedge clk); \n`ifdef VERBOSE\n                $display(\"A1T = %h\", A1T); \n                $display(\"A2P = %h\", A2P);  \n                $display(\"A1P = %h\", A1P);\n`endif\n                                                     \n                if (A1P !== A1Ps[j]) begin                                                                                    \n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, A1T = %h, A2P = %h. A1P = %h instead of %h\",  \n                    $time, j, models[model], rates[rate], laws[law], types[type], operations[operation], A1T,A2P, A1P, A1Ps[j]); \n`ifdef ERRORSTOP\n                  $stop;\n`endif\n                end \n                @(negedge clk);\n              end \n            end \n          end \n        end \n      end \n    end \n  end \n\n  \n  for (model=0; model<2; model=model+1) begin\n    for (rate=0; rate<4; rate=rate+1) begin\n      for (operation=0; operation<2; operation = operation+1) begin\n        for (type=0; type<2; type=type+1) begin\n          if(!(model==0 && type==1)) begin \n            for (law=2; law<4; law=law+1) begin\n              $display(\"%s %s %s %s %s law\", models[model], rates[rate], operations[operation], types[type], laws[law]);\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"vectorSize.t\"}, vectorSizes);\n              loop = vectorSizes[0];\n\n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a1t.t\"}, A1Ts); \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\", models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a2p.t\"}, A2Ps); \n              $readmemh({\"../model/adpcm-itu/vector_out/\",laws[law],\"/\",models[model], \"/\", types[type],\"/\",\n                operations[operation],\"/\",rates[rate],\"/\",\"a1p.t\"}, A1Ps); \n               @(posedge clk);\n              for (j=0; j<loop; j=j+1) begin \n                #1 A1T = A1Ts[j]; A2P = A2Ps[j];         \n                @(posedge clk);\n`ifdef VERBOSE\n                $display(\"A1T = %h\", A1T); \n                $display(\"A2P = %h\", A2P);\n                $display(\"A1P = %h\", A1P); \n`endif\n              \n                if (A2P !== A2Ps[j]) begin\n                  $display(\"%t ERROR: Test #%7d failed for %s, rate = %s, law = %s, %s, %s, A1T = %h, A2P = %h. A1P = %h instead of %h\",  \n                    $time, j, models[model], rates[rate], laws[law], types[type], operations[operation], A1T,A2P, A1P, A1Ps[j]); \n`ifdef ERRORSTOP\n                  $stop;\n`endif\n                end \n               @(negedge clk);\n              end \n            end \n          end \n        end \n      end \n    end \n  end \n\n  #10 $display(\"%t TEST COMPLETE\", $time);\n  $finish;\nend ",
        "always #(`CLK_PERIOD/2) clk = ~clk;",
        "initial begin\n  rates[0]      = \"40\";\n  rates[1]      = \"32\";\n  rates[2]      = \"24\";\n  rates[3]      = \"16\";\n  laws[0]       = \"AA\";\n  laws[1]       = \"MM\";  \n  laws[2]       = \"AM\";\n  laws[3]       = \"MA\";\n  operations[0] = \"nrm\";\n  operations[1] = \"ovr\";\n  operations[2] = \"i\";\n  types[0]      = \"reset\";\n  types[1]      = \"homing\";\n  models[0]     = \"enc\";\n  models[1]     = \"dec\";\nend"
    ]
}